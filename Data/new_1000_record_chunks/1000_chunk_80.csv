record_number,buggy_code,fixed_code
79001,"/** 
 * Sets the look and feel (L&F) object that renders this component.
 * @param ui  the <code>TableHeaderUI</code> L&F object
 * @see UIDefaults#getUI
 */
public void setUI(TableHeaderUI ui){
  if (this.ui != ui) {
    super.setUI(ui);
    repaint();
  }
}","/** 
 * Sets the look and feel (L&amp;F) object that renders this component.
 * @param ui  the <code>TableHeaderUI</code> L&amp;F object
 * @see UIDefaults#getUI
 */
public void setUI(TableHeaderUI ui){
  if (this.ui != ui) {
    super.setUI(ui);
    repaint();
  }
}"
79002,"/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing. <p> The <code>TableCellRenderer</code> is also responsible for rendering the the cell representing the table's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location: <pre> JTable.DropLocation dropLocation = table.getDropLocation(); if (dropLocation != null && !dropLocation.isInsertRow() && !dropLocation.isInsertColumn() && dropLocation.getRow() == row && dropLocation.getColumn() == column) { // this cell represents the current drop location // so render it specially, perhaps with a different color } </pre> <p> During a printing operation, this method will be called with <code>isSelected</code> and <code>hasFocus</code> values of <code>false</code> to prevent selection and focus from appearing in the printed output. To do other customization based on whether or not the table is being printed, check the return value from  {@link javax.swing.JComponent#isPaintingForPrint()}.
 * @param table           the <code>JTable</code> that is asking therenderer to draw; can be <code>null</code>
 * @param value           the value of the cell to be rendered.  It isup to the specific renderer to interpret and draw the value.  For example, if <code>value</code> is the string ""true"", it could be rendered as a string or it could be rendered as a check box that is checked.  <code>null</code> is a valid value
 * @param isSelected      true if the cell is to be rendered with theselection highlighted; otherwise false
 * @param hasFocus        if true, render cell appropriately.  Forexample, put a special border on the cell, if the cell can be edited, render in the color used to indicate editing
 * @param row             the row index of the cell being drawn.  Whendrawing the header, the value of <code>row</code> is -1
 * @param column          the column index of the cell being drawn
 * @see javax.swing.JComponent#isPaintingForPrint()
 */
Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column);","/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing. <p> The <code>TableCellRenderer</code> is also responsible for rendering the the cell representing the table's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location: <pre> JTable.DropLocation dropLocation = table.getDropLocation(); if (dropLocation != null &amp;&amp; !dropLocation.isInsertRow() &amp;&amp; !dropLocation.isInsertColumn() &amp;&amp; dropLocation.getRow() == row &amp;&amp; dropLocation.getColumn() == column) { // this cell represents the current drop location // so render it specially, perhaps with a different color } </pre> <p> During a printing operation, this method will be called with <code>isSelected</code> and <code>hasFocus</code> values of <code>false</code> to prevent selection and focus from appearing in the printed output. To do other customization based on whether or not the table is being printed, check the return value from  {@link javax.swing.JComponent#isPaintingForPrint()}.
 * @param table           the <code>JTable</code> that is asking therenderer to draw; can be <code>null</code>
 * @param value           the value of the cell to be rendered.  It isup to the specific renderer to interpret and draw the value.  For example, if <code>value</code> is the string ""true"", it could be rendered as a string or it could be rendered as a check box that is checked.  <code>null</code> is a valid value
 * @param isSelected      true if the cell is to be rendered with theselection highlighted; otherwise false
 * @param hasFocus        if true, render cell appropriately.  Forexample, put a special border on the cell, if the cell can be edited, render in the color used to indicate editing
 * @param row             the row index of the cell being drawn.  Whendrawing the header, the value of <code>row</code> is -1
 * @param column          the column index of the cell being drawn
 * @see javax.swing.JComponent#isPaintingForPrint()
 */
Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column);"
79003,"/** 
 * @inheritDoc
 */
@Override public Dimension getMaximumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMaximumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}","/** 
 * {@inheritDoc}
 */
@Override public Dimension getMaximumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMaximumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}"
79004,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintButtonBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintButtonBorder(context,g,x,y,w,h);
}"
79005,"/** 
 * @inheritDoc
 */
@Override protected void installListeners(AbstractButton b){
  super.installListeners(b);
  b.addPropertyChangeListener(this);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installListeners(AbstractButton b){
  super.installListeners(b);
  b.addPropertyChangeListener(this);
}"
79006,"/** 
 * @inheritDoc
 */
@Override public Dimension getMinimumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMinimumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}","/** 
 * {@inheritDoc}
 */
@Override public Dimension getMinimumSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getMinimumSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}"
79007,"/** 
 * @inheritDoc
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((AbstractButton)e.getSource());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((AbstractButton)e.getSource());
  }
}"
79008,"/** 
 * @inheritDoc
 */
@Override protected void installDefaults(AbstractButton b){
  updateStyle(b);
  LookAndFeel.installProperty(b,""String_Node_Str"",Boolean.TRUE);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installDefaults(AbstractButton b){
  updateStyle(b);
  LookAndFeel.installProperty(b,""String_Node_Str"",Boolean.TRUE);
}"
79009,"/** 
 * @inheritDoc
 */
@Override protected void uninstallListeners(AbstractButton b){
  super.uninstallListeners(b);
  b.removePropertyChangeListener(this);
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallListeners(AbstractButton b){
  super.uninstallListeners(b);
  b.removePropertyChangeListener(this);
}"
79010,"/** 
 * @inheritDoc
 */
@Override protected void uninstallDefaults(AbstractButton b){
  SynthContext context=getContext(b,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallDefaults(AbstractButton b){
  SynthContext context=getContext(b,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}"
79011,"/** 
 * @inheritDoc
 */
@Override public int getBaseline(JComponent c,int width,int height){
  if (c == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (width < 0 || height < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AbstractButton b=(AbstractButton)c;
  String text=b.getText();
  if (text == null || ""String_Node_Str"".equals(text)) {
    return -1;
  }
  Insets i=b.getInsets();
  Rectangle viewRect=new Rectangle();
  Rectangle textRect=new Rectangle();
  Rectangle iconRect=new Rectangle();
  viewRect.x=i.left;
  viewRect.y=i.top;
  viewRect.width=width - (i.right + viewRect.x);
  viewRect.height=height - (i.bottom + viewRect.y);
  SynthContext context=getContext(b);
  FontMetrics fm=context.getComponent().getFontMetrics(context.getStyle().getFont(context));
  context.getStyle().getGraphicsUtils(context).layoutText(context,fm,b.getText(),b.getIcon(),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),viewRect,iconRect,textRect,b.getIconTextGap());
  View view=(View)b.getClientProperty(BasicHTML.propertyKey);
  int baseline;
  if (view != null) {
    baseline=BasicHTML.getHTMLBaseline(view,textRect.width,textRect.height);
    if (baseline >= 0) {
      baseline+=textRect.y;
    }
  }
 else {
    baseline=textRect.y + fm.getAscent();
  }
  context.dispose();
  return baseline;
}","/** 
 * {@inheritDoc}
 */
@Override public int getBaseline(JComponent c,int width,int height){
  if (c == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (width < 0 || height < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AbstractButton b=(AbstractButton)c;
  String text=b.getText();
  if (text == null || ""String_Node_Str"".equals(text)) {
    return -1;
  }
  Insets i=b.getInsets();
  Rectangle viewRect=new Rectangle();
  Rectangle textRect=new Rectangle();
  Rectangle iconRect=new Rectangle();
  viewRect.x=i.left;
  viewRect.y=i.top;
  viewRect.width=width - (i.right + viewRect.x);
  viewRect.height=height - (i.bottom + viewRect.y);
  SynthContext context=getContext(b);
  FontMetrics fm=context.getComponent().getFontMetrics(context.getStyle().getFont(context));
  context.getStyle().getGraphicsUtils(context).layoutText(context,fm,b.getText(),b.getIcon(),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),viewRect,iconRect,textRect,b.getIconTextGap());
  View view=(View)b.getClientProperty(BasicHTML.propertyKey);
  int baseline;
  if (view != null) {
    baseline=BasicHTML.getHTMLBaseline(view,textRect.width,textRect.height);
    if (baseline >= 0) {
      baseline+=textRect.y;
    }
  }
 else {
    baseline=textRect.y + fm.getAscent();
  }
  context.dispose();
  return baseline;
}"
79012,"/** 
 * @inheritDoc
 */
@Override public Dimension getPreferredSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getPreferredSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}","/** 
 * {@inheritDoc}
 */
@Override public Dimension getPreferredSize(JComponent c){
  if (c.getComponentCount() > 0 && c.getLayout() != null) {
    return null;
  }
  AbstractButton b=(AbstractButton)c;
  SynthContext ss=getContext(c);
  Dimension size=ss.getStyle().getGraphicsUtils(ss).getPreferredSize(ss,ss.getStyle().getFont(ss),b.getText(),getSizingIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex());
  ss.dispose();
  return size;
}"
79013,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxMenuItemBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxMenuItemBorder(context,g,x,y,w,h);
}"
79014,"/** 
 * @inheritDoc
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}"
79015,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintCheckBoxBorder(context,g,x,y,w,h);
}"
79016,"/** 
 * @inheritDoc
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
@Override protected String getPropertyPrefix(){
  return ""String_Node_Str"";
}"
79017,"/** 
 * @inheritDoc
 */
@Override protected void installDefaults(){
  super.installDefaults();
  updateStyle(chooser);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installDefaults(){
  super.installDefaults();
  updateStyle(chooser);
}"
79018,"/** 
 * @inheritDoc
 */
@Override protected void uninstallListeners(){
  chooser.removePropertyChangeListener(this);
  super.uninstallListeners();
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallListeners(){
  chooser.removePropertyChangeListener(this);
  super.uninstallListeners();
}"
79019,"/** 
 * @inheritDoc
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(chooser,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
  super.uninstallDefaults();
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(chooser,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
  super.uninstallDefaults();
}"
79020,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintColorChooserBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintColorChooserBorder(context,g,x,y,w,h);
}"
79021,"/** 
 * @inheritDoc
 */
@Override protected void installListeners(){
  super.installListeners();
  chooser.addPropertyChangeListener(this);
}","/** 
 * {@inheritDoc}
 */
@Override protected void installListeners(){
  super.installListeners();
  chooser.addPropertyChangeListener(this);
}"
79022,"/** 
 * @inheritDoc
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((JColorChooser)e.getSource());
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void propertyChange(PropertyChangeEvent e){
  if (SynthLookAndFeel.shouldUpdateStyle(e)) {
    updateStyle((JColorChooser)e.getSource());
  }
}"
79023,"/** 
 * @inheritDoc
 */
@Override protected AbstractColorChooserPanel[] createDefaultChoosers(){
  SynthContext context=getContext(chooser,ENABLED);
  AbstractColorChooserPanel[] panels=(AbstractColorChooserPanel[])context.getStyle().get(context,""String_Node_Str"");
  context.dispose();
  if (panels == null) {
    panels=ColorChooserComponentFactory.getDefaultChooserPanels();
  }
  return panels;
}","/** 
 * {@inheritDoc}
 */
@Override protected AbstractColorChooserPanel[] createDefaultChoosers(){
  SynthContext context=getContext(chooser,ENABLED);
  AbstractColorChooserPanel[] panels=(AbstractColorChooserPanel[])context.getStyle().get(context,""String_Node_Str"");
  context.dispose();
  if (panels == null) {
    panels=ColorChooserComponentFactory.getDefaultChooserPanels();
  }
  return panels;
}"
79024,"/** 
 * @inheritDoc
 */
@Override protected ComboBoxEditor createEditor(){
  return new SynthComboBoxEditor();
}","/** 
 * {@inheritDoc}
 */
@Override protected ComboBoxEditor createEditor(){
  return new SynthComboBoxEditor();
}"
79025,"/** 
 * @inheritDoc
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintComboBoxBorder(context,g,x,y,w,h);
}","/** 
 * {@inheritDoc}
 */
@Override public void paintBorder(SynthContext context,Graphics g,int x,int y,int w,int h){
  context.getPainter().paintComboBoxBorder(context,g,x,y,w,h);
}"
79026,"/** 
 * @inheritDoc Overridden to ensure that ButtonHandler is created prior to any of the other installXXX methods, since several of them reference buttonHandler.
 */
@Override public void installUI(JComponent c){
  buttonHandler=new ButtonHandler();
  super.installUI(c);
}","/** 
 * {@inheritDoc}Overridden to ensure that ButtonHandler is created prior to any of the other installXXX methods, since several of them reference buttonHandler.
 */
@Override public void installUI(JComponent c){
  buttonHandler=new ButtonHandler();
  super.installUI(c);
}"
79027,"/** 
 * @inheritDoc
 */
@Override protected void installListeners(){
  comboBox.addPropertyChangeListener(this);
  comboBox.addMouseListener(buttonHandler);
  editorFocusHandler=new EditorFocusHandler(comboBox);
  super.installListeners();
}","/** 
 * {@inheritDoc}
 */
@Override protected void installListeners(){
  comboBox.addPropertyChangeListener(this);
  comboBox.addMouseListener(buttonHandler);
  editorFocusHandler=new EditorFocusHandler(comboBox);
  super.installListeners();
}"
79028,"/** 
 * @inheritDoc
 */
@Override protected JButton createArrowButton(){
  SynthArrowButton button=new SynthArrowButton(SwingConstants.SOUTH);
  button.setName(""String_Node_Str"");
  button.setModel(buttonHandler);
  return button;
}","/** 
 * {@inheritDoc}
 */
@Override protected JButton createArrowButton(){
  SynthArrowButton button=new SynthArrowButton(SwingConstants.SOUTH);
  button.setName(""String_Node_Str"");
  button.setModel(buttonHandler);
  return button;
}"
79029,"/** 
 * @inheritDoc
 */
@Override protected ListCellRenderer createRenderer(){
  return new SynthComboBoxRenderer();
}","/** 
 * {@inheritDoc}
 */
@Override protected ListCellRenderer createRenderer(){
  return new SynthComboBoxRenderer();
}"
79030,"/** 
 * @inheritDoc
 */
@Override protected void uninstallListeners(){
  editorFocusHandler.unregister();
  comboBox.removePropertyChangeListener(this);
  comboBox.removeMouseListener(buttonHandler);
  buttonHandler.pressed=false;
  buttonHandler.over=false;
  super.uninstallListeners();
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallListeners(){
  editorFocusHandler.unregister();
  comboBox.removePropertyChangeListener(this);
  comboBox.removeMouseListener(buttonHandler);
  buttonHandler.pressed=false;
  buttonHandler.over=false;
  super.uninstallListeners();
}"
79031,"/** 
 * @inheritDoc
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(comboBox,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}","/** 
 * {@inheritDoc}
 */
@Override protected void uninstallDefaults(){
  SynthContext context=getContext(comboBox,ENABLED);
  style.uninstallDefaults(context);
  context.dispose();
  style=null;
}"
79032,"/** 
 * @inheritDoc
 */
@Override protected ComboPopup createPopup(){
  SynthComboPopup p=new SynthComboPopup(comboBox);
  p.addPopupMenuListener(buttonHandler);
  return p;
}","/** 
 * {@inheritDoc}
 */
@Override protected ComboPopup createPopup(){
  SynthComboPopup p=new SynthComboPopup(comboBox);
  p.addPopupMenuListener(buttonHandler);
  return p;
}"
79033,"/** 
 * @inheritDoc
 */
@Override public void uninstallUI(JComponent c){
  if (popup instanceof SynthComboPopup) {
    ((SynthComboPopup)popup).removePopupMenuListener(buttonHandler);
  }
  super.uninstallUI(c);
  buttonHandler=null;
}","/** 
 * {@inheritDoc}
 */
@Override public void uninstallUI(JComponent c){
  if (popup instanceof SynthComboPopup) {
    ((SynthComboPopup)popup).removePopupMenuListener(buttonHandler);
  }
  super.uninstallUI(c);
  buttonHandler=null;
}"
79034,"/** 
 * Initializes a new instance of this class.
 */
protected Association(int associationID,int maxInStreams,int maxOutStreams){
  this.associationID=associationID;
  this.maxInStreams=maxInStreams;
  this.maxOutStreams=maxOutStreams;
}","/** 
 * Initializes a new instance of this class.
 * @param associationID The association ID
 * @param maxInStreams The maximum number of inbound streams
 * @param maxOutStreams The maximum number of outbound streams
 */
protected Association(int associationID,int maxInStreams,int maxOutStreams){
  this.associationID=associationID;
  this.maxInStreams=maxInStreams;
  this.maxOutStreams=maxOutStreams;
}"
79035,"/** 
 * Constructs an instance of this class with the specified message.
 */
public IllegalReceiveException(String msg){
  super(msg);
}","/** 
 * Constructs an instance of this class with the specified message.
 * @param msg The String that contains a detailed message
 */
public IllegalReceiveException(String msg){
  super(msg);
}"
79036,"/** 
 * Constructs an instance of this class with the specified detailed message.
 */
public IllegalUnbindException(String msg){
  super(msg);
}","/** 
 * Constructs an instance of this class with the specified detailed message.
 * @param msg The String that contains a detailed message
 */
public IllegalUnbindException(String msg){
  super(msg);
}"
79037,"/** 
 * Constructs an instance of this class with the specified detailed message.
 */
public InvalidStreamException(String msg){
  super(msg);
}","/** 
 * Constructs an instance of this class with the specified detailed message.
 * @param msg The String that contains a detailed message
 */
public InvalidStreamException(String msg){
  super(msg);
}"
79038,"/** 
 * Returns the association that this notification is applicable to.
 */
public Association association();","/** 
 * Returns the association that this notification is applicable to.
 * @return  The association
 */
public Association association();"
79039,"/** 
 * Sets the value of a socket option.
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;","/** 
 * Sets the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;"
79040,"/** 
 * Receives a message into the given buffer and/or handles a notification. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer. The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of   {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns {@link HandlerResult#CONTINUE CONTINUE} then this method will try toreceive another message/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returned this method will return {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the   {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param dst The buffer into which message bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or  {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@link HandlerResult#RETURN RETURN} after handling a notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer dst,T attachment,NotificationHandler<T> handler) throws IOException ;","/** 
 * Receives a message into the given buffer and/or handles a notification. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer. The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of   {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns {@link HandlerResult#CONTINUE CONTINUE} then this method will try toreceive another message/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returned this method will return {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the   {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param < T > The type of the attachment
 * @param dst The buffer into which message bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or  {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@link HandlerResult#RETURN RETURN} after handling a notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer dst,T attachment,NotificationHandler<T> handler) throws IOException ;"
79041,"/** 
 * Returns the value of a socket option.
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;","/** 
 * Returns the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;"
79042,"/** 
 * Sends a message via this channel. <P> If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> The bytes will be written to the stream number that is specified by {@link MessageInfo#streamNumber streamNumber} in the given {@code messageInfo}. <P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param src The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamExcepton If  {@code streamNumner} is negative or greater than or equal tothe maximum number of outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer src,MessageInfo messageInfo) throws IOException ;","/** 
 * Sends a message via this channel. <P> If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> The bytes will be written to the stream number that is specified by {@link MessageInfo#streamNumber streamNumber} in the given {@code messageInfo}. <P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param src The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamException If  {@code streamNumner} is negative or greater than or equal tothe maximum number of outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws java.nio.channels.NotYetConnectedException If this channel is not yet connected
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer src,MessageInfo messageInfo) throws IOException ;"
79043,"/** 
 * Sets the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param name The socket option
 * @param association The association whose option should be set, or  {@code null}if this option should be set at the channel's socket level.
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpMultiChannel setOption(SctpSocketOption<T> name,T value,Association association) throws IOException ;","/** 
 * Sets the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param association The association whose option should be set, or  {@code null}if this option should be set at the channel's socket level.
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpMultiChannel setOption(SctpSocketOption<T> name,T value,Association association) throws IOException ;"
79044,"/** 
 * Receives a message and/or handles a notification via this channel. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer and an   {@link MessageInfo} is returned.The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of  {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns  {@link HandlerResult#CONTINUE CONTINUE} then this method will try to receive anothermessage/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returnedthis method will return  {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> If a security manager has been installed then for each new association setup this method verifies that the associations source address and port number are permitted by the security manager's   {@link java.lang.SecurityManager#checkAccept(String,int) checkAccept} method.<P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the  {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param buffer The buffer into which bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@code RETURN} after handlinga notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws NotYetBoundException If this channel is not yet bound
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be accepted from the message's sender
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer buffer,T attachment,NotificationHandler<T> handler) throws IOException ;","/** 
 * Receives a message and/or handles a notification via this channel. <P> If a message or notification is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the message or notification is returned or handled, respectively. If this channel is in non-blocking mode and a message or notification is not immediately available then this method immediately returns   {@code null}. <P> If this method receives a message it is copied into the given byte buffer and an   {@link MessageInfo} is returned.The message is transferred into the given byte buffer starting at its current position and the buffers position is incremented by the number of bytes read. If there are fewer bytes remaining in the buffer than are required to hold the message, or the underlying input buffer does not contain the complete message, then an invocation of  {@link MessageInfo#isComplete isComplete} on the returned {@code MessageInfo} will return {@code false}, and more invocations of this method will be necessary to completely consume the messgae. Only one message at a time will be partially delivered in any stream. The socket option   {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVE SCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing ofmessages occurs. <P> If this method receives a notification then the appropriate method of the given handler, if there is one, is invoked. If the handler returns  {@link HandlerResult#CONTINUE CONTINUE} then this method will try to receive anothermessage/notification, otherwise, if  {@link HandlerResult#RETURN RETURN} is returnedthis method will return  {@code null}. If an uncaught exception is thrown by the handler it will be propagated up the stack through this method. <P> If a security manager has been installed then for each new association setup this method verifies that the associations source address and port number are permitted by the security manager's   {@link java.lang.SecurityManager#checkAccept(String,int) checkAccept} method.<P> This method may be invoked at any time. If another thread has already initiated a receive operation upon this channel, then an invocation of this method will block until the first operation is complete. The given handler is invoked without holding any locks used to enforce the above synchronization policy, that way handlers will not stall other threads from receiving. A handler should not invoke the  {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.
 * @param < T > The type of the attachment
 * @param buffer The buffer into which bytes are to be transferred
 * @param attachment The object to attach to the receive operation; can be {@code null}
 * @param handler A handler to handle notifications from the SCTP stack, or {@code null} to ignore any notifications.
 * @return  The {@code MessageInfo},   {@code null} if this channel is innon-blocking mode and no messages are immediately available or the notification handler returns  {@code RETURN} after handlinga notification
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws NotYetBoundException If this channel is not yet bound
 * @throws IllegalReceiveException If the given handler invokes the  {@code receive} method of thischannel
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be accepted from the message's sender
 * @throws IOException If some other I/O error occurs
 */
public abstract <T>MessageInfo receive(ByteBuffer buffer,T attachment,NotificationHandler<T> handler) throws IOException ;"
79045,"/** 
 * Returns the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param name The socket option
 * @param association The association whose option should be retrieved, or  {@code null}if this option should be retrieved at the channel's socket level.
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name,Association association) throws IOException ;","/** 
 * Returns the value of a socket option. <P> Note that some options are retrieved on the channel's socket, therefore the   {@code association} parameter is not applicable and will beignored if given. However, if the option is association specific then the association must be given.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param association The association whose option should be retrieved, or  {@code null}if this option should be retrieved at the channel's socket level.
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name,Association association) throws IOException ;"
79046,"/** 
 * Returns all of the remote addresses to which the given association on this channel's socket is connected.
 * @return  All of the remote addresses for the given association, oran empty  {@code Set} if the association has been shutdown
 * @throws ClosedChannelException If the channel is closed
 * @throws IOException If an I/O error occurs
 */
public abstract Set<SocketAddress> getRemoteAddresses(Association association) throws IOException ;","/** 
 * Returns all of the remote addresses to which the given association on this channel's socket is connected.
 * @param association The association
 * @return  All of the remote addresses for the given association, oran empty  {@code Set} if the association has been shutdown
 * @throws ClosedChannelException If the channel is closed
 * @throws IOException If an I/O error occurs
 */
public abstract Set<SocketAddress> getRemoteAddresses(Association association) throws IOException ;"
79047,"/** 
 * Sends a message via this channel. <P> If this channel is unbound then this method will invoke   {@link #bind(SocketAddress,int) bind(null, 0)} before sending any data.<P> If there is no association existing between this channel's socket and the intended receiver, identified by the address in the given messageInfo, then one will be automatically setup to the intended receiver. This is considered to be Implicit Association Setup. Upon successful association setup, an {@link AssociationChangeNotification association changed}notification will be put to the SCTP stack with its   {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#COMM_UP COMM_UP}. This notification can be received by invoking   {@link #receive receive}. <P> If this channel is in blocking mode, there is sufficient room in the underlying output buffer, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> If this channel is in non-blocking mode, there is sufficient room in the underlying output buffer, and an implicit association setup is required, then the remaining bytes in the given byte buffer are transmitted as a single message, subject to   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}. If for any reason the message cannot be delivered an   {@link AssociationChangeNotification associationchanged} notification is put on the SCTP stack with its {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#CANT_START CANT_START}. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> If a security manager has been installed then for each new association setup this method verifies that the given remote peers address and port number are permitted by the security manager's  {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect} method.<P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param buffer The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamExcepton If  {@code streamNumber} is negative, or if an association alreadyexists and  {@code streamNumber} is greater than the maximum numberof outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be setup with the the messages's address
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer buffer,MessageInfo messageInfo) throws IOException ;","/** 
 * Sends a message via this channel. <P> If this channel is unbound then this method will invoke   {@link #bind(SocketAddress,int) bind(null, 0)} before sending any data.<P> If there is no association existing between this channel's socket and the intended receiver, identified by the address in the given messageInfo, then one will be automatically setup to the intended receiver. This is considered to be Implicit Association Setup. Upon successful association setup, an {@link AssociationChangeNotification association changed}notification will be put to the SCTP stack with its   {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#COMM_UP COMM_UP}. This notification can be received by invoking   {@link #receive receive}. <P> If this channel is in blocking mode, there is sufficient room in the underlying output buffer, then the remaining bytes in the given byte buffer are transmitted as a single message. Sending a message is atomic unless explicit message completion   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel's socket. <P> If this channel is in non-blocking mode, there is sufficient room in the underlying output buffer, and an implicit association setup is required, then the remaining bytes in the given byte buffer are transmitted as a single message, subject to   {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}. If for any reason the message cannot be delivered an   {@link AssociationChangeNotification associationchanged} notification is put on the SCTP stack with its {@code event} parameter setto  {@link AssociationChangeNotification.AssocChangeEvent#CANT_START CANT_START}. <P> The message is transferred from the byte buffer as if by a regular  {@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer) write} operation.<P> If a security manager has been installed then for each new association setup this method verifies that the given remote peers address and port number are permitted by the security manager's  {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect} method.<P> This method may be invoked at any time. If another thread has already initiated a send operation upon this channel, then an invocation of this method will block until the first operation is complete.
 * @param buffer The buffer containing the message to be sent
 * @param messageInfo Ancillary data about the message to be sent
 * @return  The number of bytes sent, which will be either the number ofbytes that were remaining in the messages buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the message in the underlying output buffer
 * @throws InvalidStreamException If  {@code streamNumber} is negative, or if an association alreadyexists and  {@code streamNumber} is greater than the maximum numberof outgoing streams
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws java.nio.channels.AsynchronousCloseException If another thread closes this channel while the read operation is in progress
 * @throws java.nio.channels.ClosedByInterruptException If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status
 * @throws SecurityException If a security manager has been installed and it does not permit new associations to be setup with the the messages's address
 * @throws IOException If some other I/O error occurs
 */
public abstract int send(ByteBuffer buffer,MessageInfo messageInfo) throws IOException ;"
79048,"/** 
 * Sets the value of a socket option.
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;","/** 
 * Sets the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @param value The value of the socket option. A value of  {@code null} may bea valid value for some socket options.
 * @return  This channel
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws IllegalArgumentException If the value is not a valid value for this socket option
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ;"
79049,"/** 
 * Returns the value of a socket option.
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;","/** 
 * Returns the value of a socket option.
 * @param < T > The type of the socket option value
 * @param name The socket option
 * @return  The value of the socket option. A value of {@code null} may bea valid value for some socket options.
 * @throws UnsupportedOperationException If the socket option is not supported by this channel
 * @throws java.nio.channels.ClosedChannelException If this channel is closed
 * @throws IOException If an I/O error occurs
 * @see SctpStandardSocketOptions
 */
public abstract <T>T getOption(SctpSocketOption<T> name) throws IOException ;"
79050,"/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method. <p> This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @see java.security.DomainCombiner
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  DomainCombiner dc=parent.getCombiner();
  if (dc == null && context != null) {
    dc=context.getCombiner();
  }
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(dc,caller,parent,context,perms));
}","/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method. <p> This method preserves the current AccessControlContext's DomainCombiner (which may be null) while the action is performed.
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @see java.security.DomainCombiner
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivilegedWithCombiner(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  DomainCombiner dc=parent.getCombiner();
  if (dc == null && context != null) {
    dc=context.getCombiner();
  }
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(dc,caller,parent,context,perms));
}"
79051,"/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivileged(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(null,caller,parent,context,perms));
}","/** 
 * Performs the specified   {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited byspecified  {@code Permission} arguments.The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified {@code AccessControlContext}. <p> If the action's   {@code run} method throws an (unchecked) exception,it will propagate through this method.
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the action to be performed.
 * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.
 * @param perms the {@code Permission} arguments which limit thescope of the caller's privileges. The number of arguments is variable.
 * @return the value returned by the action's {@code run} method.
 * @throws PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception
 * @throws NullPointerException if action or perms or any element ofperms is  {@code null}
 * @see #doPrivileged(PrivilegedAction)
 * @see #doPrivileged(PrivilegedAction,AccessControlContext)
 * @since 1.8
 */
@CallerSensitive public static <T>T doPrivileged(PrivilegedExceptionAction<T> action,AccessControlContext context,Permission... perms) throws PrivilegedActionException {
  AccessControlContext parent=getContext();
  if (perms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<?> caller=Reflection.getCallerClass();
  return AccessController.doPrivileged(action,createWrapper(null,caller,parent,context,perms));
}"
79052,"/** 
 * Returns a (transparent) specification of this parameter object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object, or if this parameter object has not been initialized.
 */
public final <T extends AlgorithmParameterSpec>T getParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException {
  if (this.initialized == false) {
    throw new InvalidParameterSpecException(""String_Node_Str"");
  }
  return paramSpi.engineGetParameterSpec(paramSpec);
}","/** 
 * Returns a (transparent) specification of this parameter object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param < T > the type of the parameter specification to be returrned
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object, or if this parameter object has not been initialized.
 */
public final <T extends AlgorithmParameterSpec>T getParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException {
  if (this.initialized == false) {
    throw new InvalidParameterSpecException(""String_Node_Str"");
  }
  return paramSpi.engineGetParameterSpec(paramSpec);
}"
79053,"/** 
 * Returns a (transparent) specification of this parameters object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object.
 */
protected abstract <T extends AlgorithmParameterSpec>T engineGetParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException ;","/** 
 * Returns a (transparent) specification of this parameters object.  {@code paramSpec} identifies the specification class in whichthe parameters should be returned. It could, for example, be {@code DSAParameterSpec.class}, to indicate that the parameters should be returned in an instance of the  {@code DSAParameterSpec} class.
 * @param < T > the type of the parameter specification to be returned
 * @param paramSpec the specification class in whichthe parameters should be returned.
 * @return the parameter specification.
 * @exception InvalidParameterSpecException if the requested parameterspecification is inappropriate for this parameter object.
 */
protected abstract <T extends AlgorithmParameterSpec>T engineGetParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException ;"
79054,"/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be processed (e.g., the given key has an unrecognized algorithm or format).
 */
public final <T extends KeySpec>T getKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {
  if (serviceIterator == null) {
    return spi.engineGetKeySpec(key,keySpec);
  }
  Exception failure=null;
  KeyFactorySpi mySpi=spi;
  do {
    try {
      return mySpi.engineGetKeySpec(key,keySpec);
    }
 catch (    Exception e) {
      if (failure == null) {
        failure=e;
      }
      mySpi=nextSpi(mySpi);
    }
  }
 while (mySpi != null);
  if (failure instanceof RuntimeException) {
    throw (RuntimeException)failure;
  }
  if (failure instanceof InvalidKeySpecException) {
    throw (InvalidKeySpecException)failure;
  }
  throw new InvalidKeySpecException(""String_Node_Str"",failure);
}","/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param < T > the type of the key specification to be returned
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be processed (e.g., the given key has an unrecognized algorithm or format).
 */
public final <T extends KeySpec>T getKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {
  if (serviceIterator == null) {
    return spi.engineGetKeySpec(key,keySpec);
  }
  Exception failure=null;
  KeyFactorySpi mySpi=spi;
  do {
    try {
      return mySpi.engineGetKeySpec(key,keySpec);
    }
 catch (    Exception e) {
      if (failure == null) {
        failure=e;
      }
      mySpi=nextSpi(mySpi);
    }
  }
 while (mySpi != null);
  if (failure instanceof RuntimeException) {
    throw (RuntimeException)failure;
  }
  if (failure instanceof InvalidKeySpecException) {
    throw (InvalidKeySpecException)failure;
  }
  throw new InvalidKeySpecException(""String_Node_Str"",failure);
}"
79055,"/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be dealt with (e.g., the given key has an unrecognized format).
 */
protected abstract <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException ;","/** 
 * Returns a specification (key material) of the given key object.  {@code keySpec} identifies the specification class in whichthe key material should be returned. It could, for example, be {@code DSAPublicKeySpec.class}, to indicate that the key material should be returned in an instance of the  {@code DSAPublicKeySpec} class.
 * @param < T > the type of the key specification to be returned
 * @param key the key.
 * @param keySpec the specification class in whichthe key material should be returned.
 * @return the underlying key specification (key material) in an instanceof the requested specification class.
 * @exception InvalidKeySpecException if the requested key specification isinappropriate for the given key, or the given key cannot be dealt with (e.g., the given key has an unrecognized format).
 */
protected abstract <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException ;"
79056,"/** 
 * Returns true if the specified subject is implied by this principal. <p>The default implementation of this method returns true if  {@code subject} is non-null and contains at least one principal thatis equal to this principal. <p>Subclasses may override this with a different implementation, if necessary.
 * @return true if {@code subject} is non-null and isimplied by this principal, or false otherwise.
 * @since 1.8
 */
public default boolean implies(Subject subject){
  if (subject == null)   return false;
  return subject.getPrincipals().contains(this);
}","/** 
 * Returns true if the specified subject is implied by this principal. <p>The default implementation of this method returns true if  {@code subject} is non-null and contains at least one principal thatis equal to this principal. <p>Subclasses may override this with a different implementation, if necessary.
 * @param subject the {@code Subject}
 * @return true if {@code subject} is non-null and isimplied by this principal, or false otherwise.
 * @since 1.8
 */
public default boolean implies(Subject subject){
  if (subject == null)   return false;
  return subject.getPrincipals().contains(this);
}"
79057,"/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathBuilder} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}","/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathBuilder} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @return a {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}"
79058,"/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathValidator} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}","/** 
 * Returns a   {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates. A PKIX implementation returns objects of type  {@code PKIXRevocationChecker}. <p>The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of   {@code CertPathValidator} for an example.<p>This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an  {@code UnsupportedOperationException}.
 * @return a {@code CertPathChecker} that this implementation uses tocheck the revocation status of certificates
 * @throws UnsupportedOperationException if this method is not supported
 * @since 1.8
 */
public CertPathChecker engineGetRevocationChecker(){
  throw new UnsupportedOperationException();
}"
79059,"protected PKIXRevocationChecker(){
}","/** 
 * Default constructor.
 */
protected PKIXRevocationChecker(){
}"
79060,"/** 
 * Creates an   {@link SNIMatcher} object for {@code SNIHostName}s. <P> This method can be used by a server to verify the acceptable  {@code SNIHostName}s.  For example, <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.com""); </pre> will accept the hostname ""www.example.com"". <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.(com|org)""); </pre> will accept hostnames ""www.example.com"" and ""www.example.org"".
 * @param regex the <a href="" {@docRoot}/java/util/regex/Pattern.html#sum""> regular expression pattern</a> representing the hostname(s) to match
 * @throws NullPointerException if {@code regex} is{@code null}
 * @throws java.util.regex.PatternSyntaxException if the regular expression'ssyntax is invalid
 */
public static SNIMatcher createSNIMatcher(String regex){
  if (regex == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return new SNIHostNameMatcher(regex);
}","/** 
 * Creates an   {@link SNIMatcher} object for {@code SNIHostName}s. <P> This method can be used by a server to verify the acceptable  {@code SNIHostName}s.  For example, <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.com""); </pre> will accept the hostname ""www.example.com"". <pre> SNIMatcher matcher = SNIHostName.createSNIMatcher(""www\\.example\\.(com|org)""); </pre> will accept hostnames ""www.example.com"" and ""www.example.org"".
 * @param regex the <a href="" {@docRoot}/java/util/regex/Pattern.html#sum""> regular expression pattern</a> representing the hostname(s) to match
 * @return a {@code SNIMatcher} object for {@code SNIHostName}s
 * @throws NullPointerException if {@code regex} is{@code null}
 * @throws java.util.regex.PatternSyntaxException if the regular expression'ssyntax is invalid
 */
public static SNIMatcher createSNIMatcher(String regex){
  if (regex == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return new SNIHostNameMatcher(regex);
}"
79061,"/** 
 * Returns the last access time of the entry. <p> The last access time is from the extended timestamp fields of entry's   {@code optional extra data} when read from a ZIP fileor ZIP file formatted stream.
 * @return The last access time of the entry, null if not specified
 * @see #setLastAccessTime(long)
 * @since 1.8
 */
public FileTime getLastAccessTime(){
  return atime;
}","/** 
 * Returns the last access time of the entry. <p> The last access time is from the extended timestamp fields of entry's   {@code optional extra data} when read from a ZIP fileor ZIP file formatted stream.
 * @return The last access time of the entry, null if not specified
 * @see #setLastAccessTime(FileTime)
 * @since 1.8
 */
public FileTime getLastAccessTime(){
  return atime;
}"
79062,"/** 
 * Returns the AccessibleContext associated with this object.  In most cases, the return value should not be null if the object implements interface Accessible.  If a component developer creates a subclass of an object that implements Accessible, and that subclass is not Accessible, the developer should override the getAccessibleContext method to return null.
 */
public AccessibleContext getAccessibleContext();","/** 
 * Returns the AccessibleContext associated with this object.  In most cases, the return value should not be null if the object implements interface Accessible.  If a component developer creates a subclass of an object that implements Accessible, and that subclass is not Accessible, the developer should override the getAccessibleContext method to return null.
 * @return the AccessibleContext associated with this object
 */
public AccessibleContext getAccessibleContext();"
79063,"public AccessibleBundle(){
}","/** 
 * Construct an   {@code AccessibleBundle}.
 */
public AccessibleBundle(){
}"
79064,"public int getAccessibleIndex(int r,int c);","/** 
 * Returns the index at a row and column in the table.
 * @param r zero-based row of the table
 * @param c zero-based column of the table
 * @return the zero-based index in the table if one exists;otherwise -1.  The index is  the table cell offset from row == 0 and column == 0.
 */
public int getAccessibleIndex(int r,int c);"
79065,"/** 
 * Returns the number of relations in the relation set.
 */
public int size(){
  if (relations == null) {
    return 0;
  }
 else {
    return relations.size();
  }
}","/** 
 * Returns the number of relations in the relation set.
 * @return the number of relations in the relation set
 */
public int size(){
  if (relations == null) {
    return 0;
  }
 else {
    return relations.size();
  }
}"
79066,"/** 
 * Returns the number of rows occupied by the Accessible at a specified row and column in the table.
 * @return the number of rows occupied by the Accessible at agiven specified (row, column)
 */
public int getAccessibleRowExtentAt(int r,int c);","/** 
 * Returns the number of rows occupied by the Accessible at a specified row and column in the table.
 * @param r zero-based row of the table
 * @param c zero-based column of the table
 * @return the number of rows occupied by the Accessible at agiven specified (row, column)
 */
public int getAccessibleRowExtentAt(int r,int c);"
79067,"/** 
 * Returns the number of columns occupied by the Accessible at a specified row and column in the table.
 * @return the number of columns occupied by the Accessible at agiven specified row and column
 */
public int getAccessibleColumnExtentAt(int r,int c);","/** 
 * Returns the number of columns occupied by the Accessible at a specified row and column in the table.
 * @param r zero-based row of the table
 * @param c zero-based column of the table
 * @return the number of columns occupied by the Accessible at agiven specified row and column
 */
public int getAccessibleColumnExtentAt(int r,int c);"
79068,"/** 
 * Returns the last row that changed.
 */
public int getLastRow();","/** 
 * Returns the last row that changed.
 * @return the last row that changed
 */
public int getLastRow();"
79069,"/** 
 * Returns the first row that changed.
 */
public int getFirstRow();","/** 
 * Returns the first row that changed.
 * @return the first row that changed
 */
public int getFirstRow();"
79070,"/** 
 * Returns the type of event
 * @see #INSERT
 * @see #UPDATE
 * @see #DELETE
 */
public int getType();","/** 
 * Returns the type of event.
 * @return the type of event
 * @see #INSERT
 * @see #UPDATE
 * @see #DELETE
 */
public int getType();"
79071,"/** 
 * Returns the last column that changed.
 */
public int getLastColumn();","/** 
 * Returns the last column that changed.
 * @return the last column that changed
 */
public int getLastColumn();"
79072,"/** 
 * Returns the first column that changed.
 */
public int getFirstColumn();","/** 
 * Returns the first column that changed.
 * @return the first column that changed
 */
public int getFirstColumn();"
79073,"/** 
 * Set the value of this object as a Number.
 * @return True if the value was set; else False
 * @see #getCurrentAccessibleValue
 */
public boolean setCurrentAccessibleValue(Number n);","/** 
 * Set the value of this object as a Number.
 * @param n the number to use for the value
 * @return True if the value was set; else False
 * @see #getCurrentAccessibleValue
 */
public boolean setCurrentAccessibleValue(Number n);"
79074,"public MalformedInputException(int inputLength){
  this.inputLength=inputLength;
}","/** 
 * Constructs an   {@code MalformedInputException} with the givenlength.
 * @param inputLength the length of the input
 */
public MalformedInputException(int inputLength){
  this.inputLength=inputLength;
}"
79075,"public int getInputLength(){
  return inputLength;
}","/** 
 * Returns the length of the input.
 * @return the length of the input
 */
public int getInputLength(){
  return inputLength;
}"
79076,"public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}","/** 
 * Returns the message.
 * @return the message
 */
public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}"
79077,"public UnmappableCharacterException(int inputLength){
  this.inputLength=inputLength;
}","/** 
 * Constructs an   {@code UnmappableCharacterException} with thegiven length.
 * @param inputLength the length of the input
 */
public UnmappableCharacterException(int inputLength){
  this.inputLength=inputLength;
}"
79078,"public int getInputLength(){
  return inputLength;
}","/** 
 * Returns the length of the input.
 * @return the length of the input
 */
public int getInputLength(){
  return inputLength;
}"
79079,"public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}","/** 
 * Returns the message.
 * @return the message
 */
public String getMessage(){
  return ""String_Node_Str"" + inputLength;
}"
79080,"/** 
 * Returns a   {@code RunnableFuture} for the given callable task.
 * @param callable the callable task being wrapped
 * @return a {@code RunnableFuture} which, when run, will call theunderlying callable and which, as a  {@code Future}, will yield the callable's result as its result and provide for cancellation of the underlying task
 * @since 1.6
 */
protected <T>RunnableFuture<T> newTaskFor(Callable<T> callable){
  return new FutureTask<T>(callable);
}","/** 
 * Returns a   {@code RunnableFuture} for the given callable task.
 * @param callable the callable task being wrapped
 * @param < T > the type of the callable's result
 * @return a {@code RunnableFuture} which, when run, will call theunderlying callable and which, as a  {@code Future}, will yield the callable's result as its result and provide for cancellation of the underlying task
 * @since 1.6
 */
protected <T>RunnableFuture<T> newTaskFor(Callable<T> callable){
  return new FutureTask<T>(callable);
}"
79081,"/** 
 * Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.  {@link Future#isDone} is {@code true} for eachelement of the returned list. Upon return, tasks that have not completed are cancelled. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @return a list of Futures representing the tasks, in the samesequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed.
 * @throws InterruptedException if interrupted while waiting, inwhich case unfinished tasks are cancelled
 * @throws NullPointerException if tasks, any of its elements, orunit are  {@code null}
 * @throws RejectedExecutionException if any task cannot be scheduledfor execution
 */
<T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException ;","/** 
 * Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.  {@link Future#isDone} is {@code true} for eachelement of the returned list. Upon return, tasks that have not completed are cancelled. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @param < T > the type of the values returned from the tasks
 * @return a list of Futures representing the tasks, in the samesequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed.
 * @throws InterruptedException if interrupted while waiting, inwhich case unfinished tasks are cancelled
 * @throws NullPointerException if tasks, any of its elements, orunit are  {@code null}
 * @throws RejectedExecutionException if any task cannot be scheduledfor execution
 */
<T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException ;"
79082,"/** 
 * Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @return the result returned by one of the tasks
 * @throws InterruptedException if interrupted while waiting
 * @throws NullPointerException if tasks, or unit, or any elementtask subject to execution is  {@code null}
 * @throws TimeoutException if the given timeout elapses beforeany task successfully completes
 * @throws ExecutionException if no task successfully completes
 * @throws RejectedExecutionException if tasks cannot be scheduledfor execution
 */
<T>T invokeAny(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException ;","/** 
 * Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.
 * @param tasks the collection of tasks
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @param < T > the type of the values returned from the tasks
 * @return the result returned by one of the tasks
 * @throws InterruptedException if interrupted while waiting
 * @throws NullPointerException if tasks, or unit, or any elementtask subject to execution is  {@code null}
 * @throws TimeoutException if the given timeout elapses beforeany task successfully completes
 * @throws ExecutionException if no task successfully completes
 * @throws RejectedExecutionException if tasks cannot be scheduledfor execution
 */
<T>T invokeAny(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException ;"
79083,"/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context, with the current context class loader as the context class loader. This method should normally be invoked within an {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @return a callable object
 * @throws NullPointerException if callable null
 * @throws AccessControlException if the current access controlcontext does not have permission to both set and get context class loader
 */
public static <T>Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);
}","/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context, with the current context class loader as the context class loader. This method should normally be invoked within an {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @param < T > the type of the callable's result
 * @return a callable object
 * @throws NullPointerException if callable null
 * @throws AccessControlException if the current access controlcontext does not have permission to both set and get context class loader
 */
public static <T>Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);
}"
79084,"/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context. This method should normally be invoked within an  {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @return a callable object
 * @throws NullPointerException if callable null
 */
public static <T>Callable<T> privilegedCallable(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallable<T>(callable);
}","/** 
 * Returns a   {@link Callable} object that will, when called,execute the given  {@code callable} under the current accesscontrol context. This method should normally be invoked within an  {@link AccessController#doPrivileged AccessController.doPrivileged}action to create callables that will, if possible, execute under the selected permission settings holding within that action; or if not possible, throw an associated   {@link AccessControlException}.
 * @param callable the underlying task
 * @param < T > the type of the callable's result
 * @return a callable object
 * @throws NullPointerException if callable null
 */
public static <T>Callable<T> privilegedCallable(Callable<T> callable){
  if (callable == null)   throw new NullPointerException();
  return new PrivilegedCallable<T>(callable);
}"
79085,"/** 
 * Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation.  Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using   {@code ex.printStackTrace()}) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.
 * @param task the task
 * @return the task's result
 * @throws NullPointerException if the task is null
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 */
public <T>T invoke(ForkJoinTask<T> task){
  if (task == null)   throw new NullPointerException();
  externalPush(task);
  return task.join();
}","/** 
 * Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation.  Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using   {@code ex.printStackTrace()}) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.
 * @param task the task
 * @param < T > the type of the task's result
 * @return the task's result
 * @throws NullPointerException if the task is null
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 */
public <T>T invoke(ForkJoinTask<T> task){
  if (task == null)   throw new NullPointerException();
  externalPush(task);
  return task.join();
}"
79086,"/** 
 * Saves this task to a stream (that is, serializes it).
 * @serialData the current run status and the exception thrownduring execution, or  {@code null} if none
 */
private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeObject(getException());
}","/** 
 * Saves this task to a stream (that is, serializes it).
 * @param s the stream
 * @throws java.io.IOException if an I/O error occurs
 * @serialData the current run status and the exception thrownduring execution, or  {@code null} if none
 */
private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeObject(getException());
}"
79087,"/** 
 * Returns a new   {@code ForkJoinTask} that performs the {@code call}method of the given   {@code Callable} as its action, and returnsits result upon  {@link #join}, translating any checked exceptions encountered into   {@code RuntimeException}.
 * @param callable the callable action
 * @return the task
 */
public static <T>ForkJoinTask<T> adapt(Callable<? extends T> callable){
  return new AdaptedCallable<T>(callable);
}","/** 
 * Returns a new   {@code ForkJoinTask} that performs the {@code call}method of the given   {@code Callable} as its action, and returnsits result upon  {@link #join}, translating any checked exceptions encountered into   {@code RuntimeException}.
 * @param callable the callable action
 * @param < T > the type of the callable's result
 * @return the task
 */
public static <T>ForkJoinTask<T> adapt(Callable<? extends T> callable){
  return new AdaptedCallable<T>(callable);
}"
79088,"/** 
 * Reconstitutes this task from a stream (that is, deserializes it).
 */
private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  Object ex=s.readObject();
  if (ex != null)   setExceptionalCompletion((Throwable)ex);
}","/** 
 * Reconstitutes this task from a stream (that is, deserializes it).
 * @param s the stream
 * @throws ClassNotFoundException if the class of a serialized objectcould not be found
 * @throws java.io.IOException if an I/O error occurs
 */
private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  Object ex=s.readObject();
  if (ex != null)   setExceptionalCompletion((Throwable)ex);
}"
79089,"/** 
 * Forks all tasks in the specified collection, returning when  {@code isDone} holds for each task or an (unchecked) exceptionis encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using  {@link #getException()} and related methods to check if they have beencancelled, completed normally or exceptionally, or left unprocessed.
 * @param tasks the collection of tasks
 * @return the tasks argument, to simplify usage
 * @throws NullPointerException if tasks or any element are null
 */
public static <T extends ForkJoinTask<?>>Collection<T> invokeAll(Collection<T> tasks){
  if (!(tasks instanceof RandomAccess) || !(tasks instanceof List<?>)) {
    invokeAll(tasks.toArray(new ForkJoinTask<?>[tasks.size()]));
    return tasks;
  }
  @SuppressWarnings(""String_Node_Str"") List<? extends ForkJoinTask<?>> ts=(List<? extends ForkJoinTask<?>>)tasks;
  Throwable ex=null;
  int last=ts.size() - 1;
  for (int i=last; i >= 0; --i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t == null) {
      if (ex == null)       ex=new NullPointerException();
    }
 else     if (i != 0)     t.fork();
 else     if (t.doInvoke() < NORMAL && ex == null)     ex=t.getException();
  }
  for (int i=1; i <= last; ++i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t != null) {
      if (ex != null)       t.cancel(false);
 else       if (t.doJoin() < NORMAL)       ex=t.getException();
    }
  }
  if (ex != null)   rethrow(ex);
  return tasks;
}","/** 
 * Forks all tasks in the specified collection, returning when  {@code isDone} holds for each task or an (unchecked) exceptionis encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using  {@link #getException()} and related methods to check if they have beencancelled, completed normally or exceptionally, or left unprocessed.
 * @param tasks the collection of tasks
 * @param < T > the type of the values returned from the tasks
 * @return the tasks argument, to simplify usage
 * @throws NullPointerException if tasks or any element are null
 */
public static <T extends ForkJoinTask<?>>Collection<T> invokeAll(Collection<T> tasks){
  if (!(tasks instanceof RandomAccess) || !(tasks instanceof List<?>)) {
    invokeAll(tasks.toArray(new ForkJoinTask<?>[tasks.size()]));
    return tasks;
  }
  @SuppressWarnings(""String_Node_Str"") List<? extends ForkJoinTask<?>> ts=(List<? extends ForkJoinTask<?>>)tasks;
  Throwable ex=null;
  int last=ts.size() - 1;
  for (int i=last; i >= 0; --i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t == null) {
      if (ex == null)       ex=new NullPointerException();
    }
 else     if (i != 0)     t.fork();
 else     if (t.doInvoke() < NORMAL && ex == null)     ex=t.getException();
  }
  for (int i=1; i <= last; ++i) {
    ForkJoinTask<?> t=ts.get(i);
    if (t != null) {
      if (ex != null)       t.cancel(false);
 else       if (t.doJoin() < NORMAL)       ex=t.getException();
    }
  }
  if (ex != null)   rethrow(ex);
  return tasks;
}"
79090,"/** 
 * Creates and executes a ScheduledFuture that becomes enabled after the given delay.
 * @param callable the function to execute
 * @param delay the time from now to delay execution
 * @param unit the time unit of the delay parameter
 * @return a ScheduledFuture that can be used to extract result or cancel
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 * @throws NullPointerException if callable is null
 */
public <V>ScheduledFuture<V> schedule(Callable<V> callable,long delay,TimeUnit unit);","/** 
 * Creates and executes a ScheduledFuture that becomes enabled after the given delay.
 * @param callable the function to execute
 * @param delay the time from now to delay execution
 * @param unit the time unit of the delay parameter
 * @param < V > the type of the callable's result
 * @return a ScheduledFuture that can be used to extract result or cancel
 * @throws RejectedExecutionException if the task cannot bescheduled for execution
 * @throws NullPointerException if callable is null
 */
public <V>ScheduledFuture<V> schedule(Callable<V> callable,long delay,TimeUnit unit);"
79091,"/** 
 * Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.
 * @param callable the submitted Callable
 * @param task the task created to execute the callable
 * @return a task that can execute the callable
 * @since 1.6
 */
protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){
  return task;
}","/** 
 * Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.
 * @param callable the submitted Callable
 * @param task the task created to execute the callable
 * @param < V > the type of the task's result
 * @return a task that can execute the callable
 * @since 1.6
 */
protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){
  return task;
}"
79092,"/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile integer type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName,Reflection.getCallerClass());
}","/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @param < U > the type of instances of tclass
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile integer type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName,Reflection.getCallerClass());
}"
79093,"/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile long type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  Class<?> caller=Reflection.getCallerClass();
  if (AtomicLong.VM_SUPPORTS_LONG_CAS)   return new CASUpdater<U>(tclass,fieldName,caller);
 else   return new LockedUpdater<U>(tclass,fieldName,caller);
}","/** 
 * Creates and returns an updater for objects with the given field. The Class argument is needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param fieldName the name of the field to be updated
 * @param < U > the type of instances of tclass
 * @return the updater
 * @throws IllegalArgumentException if the field is not avolatile long type
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U>AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  Class<?> caller=Reflection.getCallerClass();
  if (AtomicLong.VM_SUPPORTS_LONG_CAS)   return new CASUpdater<U>(tclass,fieldName,caller);
 else   return new LockedUpdater<U>(tclass,fieldName,caller);
}"
79094,"/** 
 * Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param vclass the class of the field
 * @param fieldName the name of the field to be updated
 * @return the updater
 * @throws ClassCastException if the field is of the wrong type
 * @throws IllegalArgumentException if the field is not volatile
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U,W>AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,Class<W> vclass,String fieldName){
  return new AtomicReferenceFieldUpdaterImpl<U,W>(tclass,vclass,fieldName,Reflection.getCallerClass());
}","/** 
 * Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match.
 * @param tclass the class of the objects holding the field
 * @param vclass the class of the field
 * @param fieldName the name of the field to be updated
 * @param < U > the type of instances of tclass
 * @param < W > the type of instances of vclass
 * @return the updater
 * @throws ClassCastException if the field is of the wrong type
 * @throws IllegalArgumentException if the field is not volatile
 * @throws RuntimeException with a nested reflection-basedexception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control
 */
@CallerSensitive public static <U,W>AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,Class<W> vclass,String fieldName){
  return new AtomicReferenceFieldUpdaterImpl<U,W>(tclass,vclass,fieldName,Reflection.getCallerClass());
}"
79095,"/** 
 * Provide a way for subclasses that are completely reimplementing ObjectInputStream to not have to allocate private data just used by this implementation of ObjectInputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with the <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectInputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bin=null;
  handles=null;
  vlist=null;
  enableOverride=true;
}","/** 
 * Provide a way for subclasses that are completely reimplementing ObjectInputStream to not have to allocate private data just used by this implementation of ObjectInputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with the <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @throws IOException if an I/O error occurs while creating this stream
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectInputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bin=null;
  handles=null;
  vlist=null;
  enableOverride=true;
}"
79096,"/** 
 * Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with a <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectOutputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bout=null;
  handles=null;
  subs=null;
  enableOverride=true;
  debugInfoStack=null;
}","/** 
 * Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream. <p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with a <code>SerializablePermission(""enableSubclassImplementation"")</code> permission to ensure it's ok to enable subclassing.
 * @throws SecurityException if a security manager exists and its<code>checkPermission</code> method denies enabling subclassing.
 * @throws IOException if an I/O error occurs while creating this stream
 * @see SecurityManager#checkPermission
 * @see java.io.SerializablePermission
 */
protected ObjectOutputStream() throws IOException, SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
  }
  bout=null;
  handles=null;
  subs=null;
  enableOverride=true;
  debugInfoStack=null;
}"
79097,"/** 
 * Returns the <code>Manifest</code> <code>Attributes</code> for this entry, or <code>null</code> if none.
 * @return the <code>Manifest</code> <code>Attributes</code> for thisentry, or <code>null</code> if none
 */
public Attributes getAttributes() throws IOException {
  return attr;
}","/** 
 * Returns the <code>Manifest</code> <code>Attributes</code> for this entry, or <code>null</code> if none.
 * @return the <code>Manifest</code> <code>Attributes</code> for thisentry, or <code>null</code> if none
 * @throws IOException  if an I/O error has occurred
 */
public Attributes getAttributes() throws IOException {
  return attr;
}"
79098,"/** 
 * Returns the jar file manifest, or <code>null</code> if none.
 * @return the jar file manifest, or <code>null</code> if none
 * @throws IllegalStateException may be thrown if the jar file has been closed
 */
public Manifest getManifest() throws IOException {
  return getManifestFromReference();
}","/** 
 * Returns the jar file manifest, or <code>null</code> if none.
 * @return the jar file manifest, or <code>null</code> if none
 * @throws IllegalStateException may be thrown if the jar file has been closed
 * @throws IOException  if an I/O error has occurred
 */
public Manifest getManifest() throws IOException {
  return getManifestFromReference();
}"
79099,"/** 
 * Creates a new sequential or parallel   {@code Stream} from a{@code Supplier} of {@code Spliterator}. <p>The   {@link Supplier#get()} method will be invoked on the supplier nomore than once, and after the terminal operation of the stream pipeline commences. <p>For spliterators that report a characteristic of  {@code IMMUTABLE}or   {@code CONCURRENT}, or that are <a href=""../Spliterator.html#binding"">late-binding</a>, it is likely more efficient to use   {@link #stream(java.util.Spliterator,boolean)}instead. The use of a   {@code Supplier} in this form provides a level ofindirection that reduces the scope of potential interference with the source.  Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result.  See <a href=""package-summary.html#Non-Interference"">Non-Interference</a> for more details.
 * @param supplier a {@code Supplier} of a {@code Spliterator}
 * @param characteristics Spliterator characteristics of the supplied{@code Spliterator}.  The characteristics must be equal to  {@code supplier.get().characteristics()}.
 * @param parallel if {@code true} then the returned stream is a parallelstream; if  {@code false} the returned stream is a sequentialstream.
 * @return a new sequential or parallel {@code Stream}
 * @see #stream(java.util.Spliterator,boolean)
 */
public static <T>Stream<T> stream(Supplier<? extends Spliterator<T>> supplier,int characteristics,boolean parallel){
  Objects.requireNonNull(supplier);
  return new ReferencePipeline.Head<>(supplier,StreamOpFlag.fromCharacteristics(characteristics),parallel);
}","/** 
 * Creates a new sequential or parallel   {@code Stream} from a{@code Supplier} of {@code Spliterator}. <p>The   {@link Supplier#get()} method will be invoked on the supplier nomore than once, and after the terminal operation of the stream pipeline commences. <p>For spliterators that report a characteristic of  {@code IMMUTABLE}or   {@code CONCURRENT}, or that are <a href=""../Spliterator.html#binding"">late-binding</a>, it is likely more efficient to use   {@link #stream(java.util.Spliterator,boolean)}instead. The use of a   {@code Supplier} in this form provides a level ofindirection that reduces the scope of potential interference with the source.  Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result.  See <a href=""package-summary.html#Non-Interference"">Non-Interference</a> for more details.
 * @param < T > the type of stream elements
 * @param supplier a {@code Supplier} of a {@code Spliterator}
 * @param characteristics Spliterator characteristics of the supplied{@code Spliterator}.  The characteristics must be equal to  {@code supplier.get().characteristics()}.
 * @param parallel if {@code true} then the returned stream is a parallelstream; if  {@code false} the returned stream is a sequentialstream.
 * @return a new sequential or parallel {@code Stream}
 * @see #stream(java.util.Spliterator,boolean)
 */
public static <T>Stream<T> stream(Supplier<? extends Spliterator<T>> supplier,int characteristics,boolean parallel){
  Objects.requireNonNull(supplier);
  return new ReferencePipeline.Head<>(supplier,StreamOpFlag.fromCharacteristics(characteristics),parallel);
}"
79100,"/** 
 * Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.
 * @since 1.4
 */
public boolean isUnshared(){
  return unshared;
}","/** 
 * Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.
 * @return {@code true} if this field is unshared
 * @since 1.4
 */
public boolean isUnshared(){
  return unshared;
}"
79101,"/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<p>The <a name=""mode""><tt>mode</tt></a> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <table summary=""Access mode permitted values and meanings""> <tr><th><p align=""left"">Value</p></th><th><p align=""left"">Meaning</p></th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p>The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p>If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}","/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<p>The <a name=""mode""><tt>mode</tt></a> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <table summary=""Access mode permitted values and meanings""> <tr><th align=""left"">Value</th><th align=""left"">Meaning</th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p>The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p>If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}"
79102,"/** 
 * Retrieve cookies associated with given URI, or whose domain matches the given URI. Only cookies that have not expired are returned. This is called for every outgoing HTTP request.
 * @return          an immutable list of HttpCookie,return empty list if no cookies match the given URI
 * @throws NullPointerException if <tt>uri</tt> is <tt>null</tt>
 * @see #add
 */
public List<HttpCookie> get(URI uri);","/** 
 * Retrieve cookies associated with given URI, or whose domain matches the given URI. Only cookies that have not expired are returned. This is called for every outgoing HTTP request.
 * @return          an immutable list of HttpCookie,return empty list if no cookies match the given URI
 * @param uri       the uri associated with the cookies to be returned
 * @throws NullPointerException if <tt>uri</tt> is <tt>null</tt>
 * @see #add
 */
public List<HttpCookie> get(URI uri);"
79103,"/** 
 * Checks if this HttpURLPermission implies the given permission. Specifically, the following checks are done as if in the following sequence: <p><ul> <li>if 'p' is not an instance of HttpURLPermission return false</li> <li>if any of p's methods are not in this's method list, and if this's method list is not equal to ""*"", then return false.</li> <li>if any of p's headers are not in this's request header list, and if this's request header list is not equal to ""*"", then return false.</li> <li>if this's url is equal to p's url , then return true</li> <li>if this's url scheme is not equal to p's url scheme return false</li> <li>if the scheme specific part of this's url is '*' return true</li> <li>if this's url authority is not equal to p's url authority return false</li> <li>if the path or paths specified by p's url are contained in the set of paths specified by this's url, then return true <li>otherwise, return false</li> </ol> <p> Some examples of how paths are matched are shown below: <p> <table border> <tr><th>this's path</th><th>p's path</th><th>match</th></tr> <tr><td>/a/b</td><td>/a/b</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/d</td><td>no</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d/e</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/*</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/-</td><td>no</td></tr> </table>
 */
public boolean implies(Permission p){
  if (!(p instanceof HttpURLPermission)) {
    return false;
  }
  HttpURLPermission that=(HttpURLPermission)p;
  if (!this.methods.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.methods,that.methods) == -1) {
    return false;
  }
  if (this.requestHeaders.isEmpty() && !that.requestHeaders.isEmpty()) {
    return false;
  }
  if (!this.requestHeaders.isEmpty() && !this.requestHeaders.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.requestHeaders,that.requestHeaders) == -1) {
    return false;
  }
  if (this.uri.equals(that.uri)) {
    return true;
  }
  if (!this.uri.getScheme().equals(that.uri.getScheme())) {
    return false;
  }
  if (this.uri.getSchemeSpecificPart().equals(""String_Node_Str"")) {
    return true;
  }
  String thisAuthority=this.uri.getAuthority();
  if (thisAuthority != null && !thisAuthority.equals(that.uri.getAuthority())) {
    return false;
  }
  String thispath=this.uri.getPath();
  String thatpath=that.uri.getPath();
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    return thatpath.startsWith(thisprefix);
  }
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    if (!thatpath.startsWith(thisprefix)) {
      return false;
    }
    String thatsuffix=thatpath.substring(thisprefix.length());
    if (thatsuffix.indexOf('/') != -1) {
      return false;
    }
    if (thatsuffix.equals(""String_Node_Str"")) {
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * Checks if this HttpURLPermission implies the given permission. Specifically, the following checks are done as if in the following sequence: <p><ul> <li>if 'p' is not an instance of HttpURLPermission return false</li> <li>if any of p's methods are not in this's method list, and if this's method list is not equal to ""*"", then return false.</li> <li>if any of p's headers are not in this's request header list, and if this's request header list is not equal to ""*"", then return false.</li> <li>if this's url is equal to p's url , then return true</li> <li>if this's url scheme is not equal to p's url scheme return false</li> <li>if the scheme specific part of this's url is '*' return true</li> <li>if this's url authority is not equal to p's url authority return false</li> <li>if the path or paths specified by p's url are contained in the set of paths specified by this's url, then return true <li>otherwise, return false</li> </ul> <p>Some examples of how paths are matched are shown below: <p><table border> <caption>Examples of Path Matching</caption> <tr><th>this's path</th><th>p's path</th><th>match</th></tr> <tr><td>/a/b</td><td>/a/b</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/d</td><td>no</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/d/e</td><td>yes</td></tr> <tr><td>/a/b/-</td><td>/a/b/c/*</td><td>yes</td></tr> <tr><td>/a/b/*</td><td>/a/b/c/-</td><td>no</td></tr> </table>
 */
public boolean implies(Permission p){
  if (!(p instanceof HttpURLPermission)) {
    return false;
  }
  HttpURLPermission that=(HttpURLPermission)p;
  if (!this.methods.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.methods,that.methods) == -1) {
    return false;
  }
  if (this.requestHeaders.isEmpty() && !that.requestHeaders.isEmpty()) {
    return false;
  }
  if (!this.requestHeaders.isEmpty() && !this.requestHeaders.get(0).equals(""String_Node_Str"") && Collections.indexOfSubList(this.requestHeaders,that.requestHeaders) == -1) {
    return false;
  }
  if (this.uri.equals(that.uri)) {
    return true;
  }
  if (!this.uri.getScheme().equals(that.uri.getScheme())) {
    return false;
  }
  if (this.uri.getSchemeSpecificPart().equals(""String_Node_Str"")) {
    return true;
  }
  String thisAuthority=this.uri.getAuthority();
  if (thisAuthority != null && !thisAuthority.equals(that.uri.getAuthority())) {
    return false;
  }
  String thispath=this.uri.getPath();
  String thatpath=that.uri.getPath();
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    return thatpath.startsWith(thisprefix);
  }
  if (thispath.endsWith(""String_Node_Str"")) {
    String thisprefix=thispath.substring(0,thispath.length() - 1);
    if (!thatpath.startsWith(thisprefix)) {
      return false;
    }
    String thatsuffix=thatpath.substring(thisprefix.length());
    if (thatsuffix.indexOf('/') != -1) {
      return false;
    }
    if (thatsuffix.equals(""String_Node_Str"")) {
      return false;
    }
    return true;
  }
  return false;
}"
79104,"/** 
 * Creates a HttpURLPermission with the given url string and unrestricted methods and request headers by invoking the two argument constructor as follows: HttpURLPermission(url, ""*:*"")
 * @throws IllegalArgumentException if url does not result in a valid {@link URI}
 */
public HttpURLPermission(String url){
  this(url,""String_Node_Str"");
}","/** 
 * Creates a HttpURLPermission with the given url string and unrestricted methods and request headers by invoking the two argument constructor as follows: HttpURLPermission(url, ""*:*"")
 * @param url the url string
 * @throws IllegalArgumentException if url does not result in a valid {@link URI}
 */
public HttpURLPermission(String url){
  this(url,""String_Node_Str"");
}"
79105,"/** 
 * Returns the name of the protocol family.
 */
String name();","/** 
 * Returns the name of the protocol family.
 * @return the name of the protocol family
 */
String name();"
79106,"/** 
 * Returns the name of the socket option.
 */
String name();","/** 
 * Returns the name of the socket option.
 * @return the name of the socket option
 */
String name();"
79107,"/** 
 * Returns the type of the socket option value.
 */
Class<T> type();","/** 
 * Returns the type of the socket option value.
 * @return the type of the socket option value
 */
Class<T> type();"
79108,"/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file input stream. <p> The initial   {@link java.nio.channels.FileChannel#position() </code>position<code>} of the returned channel will be equal to thenumber of bytes read from the file so far.  Reading bytes from this stream will increment the channel's position.  Changing the channel's position, either explicitly or by reading, will change this stream's file position.
 * @return  the file channel associated with this file input stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,true,false,this);
    }
    return channel;
  }
}","/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file input stream. <p> The initial   {@link java.nio.channels.FileChannel#position() position} of the returned channel will be equal to thenumber of bytes read from the file so far.  Reading bytes from this stream will increment the channel's position.  Changing the channel's position, either explicitly or by reading, will change this stream's file position.
 * @return  the file channel associated with this file input stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,true,false,this);
    }
    return channel;
  }
}"
79109,"/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file output stream. </p> <p> The initial   {@link java.nio.channels.FileChannel#position() </code>position<code>} of the returned channel will be equal to thenumber of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file. Writing bytes to this stream will increment the channel's position accordingly.  Changing the channel's position, either explicitly or by writing, will change this stream's file position.
 * @return  the file channel associated with this file output stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,false,true,append,this);
    }
    return channel;
  }
}","/** 
 * Returns the unique   {@link java.nio.channels.FileChannel FileChannel}object associated with this file output stream. <p> The initial   {@link java.nio.channels.FileChannel#position() position} of the returned channel will be equal to thenumber of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file. Writing bytes to this stream will increment the channel's position accordingly.  Changing the channel's position, either explicitly or by writing, will change this stream's file position.
 * @return  the file channel associated with this file output stream
 * @since 1.4
 * @spec JSR-51
 */
public FileChannel getChannel(){
synchronized (this) {
    if (channel == null) {
      channel=FileChannelImpl.open(fd,false,true,append,this);
    }
    return channel;
  }
}"
79110,"/** 
 * Creates an InputStreamReader that uses the given charset decoder.  </p>
 * @param in       An InputStream
 * @param dec      A charset decoder
 * @since 1.4
 * @spec JSR-51
 */
public InputStreamReader(InputStream in,CharsetDecoder dec){
  super(in);
  if (dec == null)   throw new NullPointerException(""String_Node_Str"");
  sd=StreamDecoder.forInputStreamReader(in,this,dec);
}","/** 
 * Creates an InputStreamReader that uses the given charset decoder.
 * @param in       An InputStream
 * @param dec      A charset decoder
 * @since 1.4
 * @spec JSR-51
 */
public InputStreamReader(InputStream in,CharsetDecoder dec){
  super(in);
  if (dec == null)   throw new NullPointerException(""String_Node_Str"");
  sd=StreamDecoder.forInputStreamReader(in,this,dec);
}"
79111,"/** 
 * Creates an OutputStreamWriter that uses the given charset encoder.  </p>
 * @param out An OutputStream
 * @param enc A charset encoder
 * @since 1.4
 * @spec JSR-51
 */
public OutputStreamWriter(OutputStream out,CharsetEncoder enc){
  super(out);
  if (enc == null)   throw new NullPointerException(""String_Node_Str"");
  se=StreamEncoder.forOutputStreamWriter(out,this,enc);
}","/** 
 * Creates an OutputStreamWriter that uses the given charset encoder.
 * @param out An OutputStream
 * @param enc A charset encoder
 * @since 1.4
 * @spec JSR-51
 */
public OutputStreamWriter(OutputStream out,CharsetEncoder enc){
  super(out);
  if (enc == null)   throw new NullPointerException(""String_Node_Str"");
  se=StreamEncoder.forOutputStreamWriter(out,this,enc);
}"
79112,"/** 
 * Receives data into an array of bytes.  This method will block until some input is available.
 * @param b the buffer into which the data is received
 * @param off the start offset of the data
 * @param len the maximum number of bytes received
 * @exception IOException If the pipe is <a href=#BROKEN> broken</a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed,or if an I/O error occurs.
 */
synchronized void receive(byte b[],int off,int len) throws IOException {
  checkStateForReceive();
  writeSide=Thread.currentThread();
  int bytesToTransfer=len;
  while (bytesToTransfer > 0) {
    if (in == out)     awaitSpace();
    int nextTransferAmount=0;
    if (out < in) {
      nextTransferAmount=buffer.length - in;
    }
 else     if (in < out) {
      if (in == -1) {
        in=out=0;
        nextTransferAmount=buffer.length - in;
      }
 else {
        nextTransferAmount=out - in;
      }
    }
    if (nextTransferAmount > bytesToTransfer)     nextTransferAmount=bytesToTransfer;
    assert(nextTransferAmount > 0);
    System.arraycopy(b,off,buffer,in,nextTransferAmount);
    bytesToTransfer-=nextTransferAmount;
    off+=nextTransferAmount;
    in+=nextTransferAmount;
    if (in >= buffer.length) {
      in=0;
    }
  }
}","/** 
 * Receives data into an array of bytes.  This method will block until some input is available.
 * @param b the buffer into which the data is received
 * @param off the start offset of the data
 * @param len the maximum number of bytes received
 * @exception IOException If the pipe is <a href=""#BROKEN""> broken</a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed,or if an I/O error occurs.
 */
synchronized void receive(byte b[],int off,int len) throws IOException {
  checkStateForReceive();
  writeSide=Thread.currentThread();
  int bytesToTransfer=len;
  while (bytesToTransfer > 0) {
    if (in == out)     awaitSpace();
    int nextTransferAmount=0;
    if (out < in) {
      nextTransferAmount=buffer.length - in;
    }
 else     if (in < out) {
      if (in == -1) {
        in=out=0;
        nextTransferAmount=buffer.length - in;
      }
 else {
        nextTransferAmount=out - in;
      }
    }
    if (nextTransferAmount > bytesToTransfer)     nextTransferAmount=bytesToTransfer;
    assert(nextTransferAmount > 0);
    System.arraycopy(b,off,buffer,in,nextTransferAmount);
    bytesToTransfer-=nextTransferAmount;
    off+=nextTransferAmount;
    in+=nextTransferAmount;
    if (in >= buffer.length) {
      in=0;
    }
  }
}"
79113,"/** 
 * Reads up to <code>len</code> bytes of data from this piped input stream into an array of bytes. Less than <code>len</code> bytes will be read if the end of the data stream is reached or if <code>len</code> exceeds the pipe's buffer size. If <code>len </code> is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in the destination array <code>b</code>
 * @param len   the maximum number of bytes read.
 * @return     the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the end of the stream has been reached.
 * @exception NullPointerException If <code>b</code> is <code>null</code>.
 * @exception IndexOutOfBoundsException If <code>off</code> is negative,<code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code>
 * @exception IOException if the pipe is <a href=#BROKEN> <code>broken</code></a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed, or if an I/O error occurs.
 */
public synchronized int read(byte b[],int off,int len) throws IOException {
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  int c=read();
  if (c < 0) {
    return -1;
  }
  b[off]=(byte)c;
  int rlen=1;
  while ((in >= 0) && (len > 1)) {
    int available;
    if (in > out) {
      available=Math.min((buffer.length - out),(in - out));
    }
 else {
      available=buffer.length - out;
    }
    if (available > (len - 1)) {
      available=len - 1;
    }
    System.arraycopy(buffer,out,b,off + rlen,available);
    out+=available;
    rlen+=available;
    len-=available;
    if (out >= buffer.length) {
      out=0;
    }
    if (in == out) {
      in=-1;
    }
  }
  return rlen;
}","/** 
 * Reads up to <code>len</code> bytes of data from this piped input stream into an array of bytes. Less than <code>len</code> bytes will be read if the end of the data stream is reached or if <code>len</code> exceeds the pipe's buffer size. If <code>len </code> is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in the destination array <code>b</code>
 * @param len   the maximum number of bytes read.
 * @return     the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the end of the stream has been reached.
 * @exception NullPointerException If <code>b</code> is <code>null</code>.
 * @exception IndexOutOfBoundsException If <code>off</code> is negative,<code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code>
 * @exception IOException if the pipe is <a href=""#BROKEN""> <code>broken</code></a>,{@link #connect(java.io.PipedOutputStream) unconnected}, closed, or if an I/O error occurs.
 */
public synchronized int read(byte b[],int off,int len) throws IOException {
  if (b == null) {
    throw new NullPointerException();
  }
 else   if (off < 0 || len < 0 || len > b.length - off) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  int c=read();
  if (c < 0) {
    return -1;
  }
  b[off]=(byte)c;
  int rlen=1;
  while ((in >= 0) && (len > 1)) {
    int available;
    if (in > out) {
      available=Math.min((buffer.length - out),(in - out));
    }
 else {
      available=buffer.length - out;
    }
    if (available > (len - 1)) {
      available=len - 1;
    }
    System.arraycopy(buffer,out,b,off + rlen,available);
    out+=available;
    rlen+=available;
    len-=available;
    if (out >= buffer.length) {
      out=0;
    }
    if (in == out) {
      in=-1;
    }
  }
  return rlen;
}"
79114,"/** 
 * Returns the number of bytes that can be read from this input stream without blocking.
 * @return the number of bytes that can be read from this input streamwithout blocking, or  {@code 0} if this input stream has beenclosed by invoking its  {@link #close()} method, or if the pipeis  {@link #connect(java.io.PipedOutputStream) unconnected}, or <a href=#BROKEN> <code>broken</code></a>.
 * @exception IOException  if an I/O error occurs.
 * @since   JDK1.0.2
 */
public synchronized int available() throws IOException {
  if (in < 0)   return 0;
 else   if (in == out)   return buffer.length;
 else   if (in > out)   return in - out;
 else   return in + buffer.length - out;
}","/** 
 * Returns the number of bytes that can be read from this input stream without blocking.
 * @return the number of bytes that can be read from this input streamwithout blocking, or  {@code 0} if this input stream has beenclosed by invoking its  {@link #close()} method, or if the pipeis  {@link #connect(java.io.PipedOutputStream) unconnected}, or <a href=""#BROKEN""> <code>broken</code></a>.
 * @exception IOException  if an I/O error occurs.
 * @since   JDK1.0.2
 */
public synchronized int available() throws IOException {
  if (in < 0)   return 0;
 else   if (in == out)   return buffer.length;
 else   if (in > out)   return in - out;
 else   return in + buffer.length - out;
}"
79115,"/** 
 * Returns the opaque file descriptor object associated with this stream. </p>
 * @return     the file descriptor object associated with this stream.
 * @exception IOException  if an I/O error occurs.
 * @see java.io.FileDescriptor
 */
public final FileDescriptor getFD() throws IOException {
  if (fd != null) {
    return fd;
  }
  throw new IOException();
}","/** 
 * Returns the opaque file descriptor object associated with this stream.
 * @return     the file descriptor object associated with this stream.
 * @exception IOException  if an I/O error occurs.
 * @see java.io.FileDescriptor
 */
public final FileDescriptor getFD() throws IOException {
  if (fd != null) {
    return fd;
  }
  throw new IOException();
}"
79116,"/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<a name=""mode""><p> The <tt>mode</tt> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <blockquote><table summary=""Access mode permitted values and meanings""> <tr><th><p align=""left"">Value</p></th><th><p align=""left"">Meaning</p></th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table></blockquote> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p> The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p> If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}","/** 
 * Creates a random access file stream to read from, and optionally to write to, the file specified by the   {@link File} argument.  A new {@link FileDescriptor} object is created to represent this file connection.<p>The <a name=""mode""><tt>mode</tt></a> argument specifies the access mode in which the file is to be opened.  The permitted values and their meanings are: <table summary=""Access mode permitted values and meanings""> <tr><th><p align=""left"">Value</p></th><th><p align=""left"">Meaning</p></th></tr> <tr><td valign=""top""><tt>""r""</tt></td> <td> Open for reading only.  Invoking any of the <tt>write</tt> methods of the resulting object will cause an  {@link java.io.IOException} to be thrown. </td></tr><tr><td valign=""top""><tt>""rw""</tt></td> <td> Open for reading and writing.  If the file does not already exist then an attempt will be made to create it. </td></tr> <tr><td valign=""top""><tt>""rws""</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content or metadata be written synchronously to the underlying storage device.  </td></tr> <tr><td valign=""top""><tt>""rwd""&nbsp;&nbsp;</tt></td> <td> Open for reading and writing, as with <tt>""rw""</tt>, and also require that every update to the file's content be written synchronously to the underlying storage device. </td></tr> </table> The <tt>""rws""</tt> and <tt>""rwd""</tt> modes work much like the  {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method ofthe  {@link java.nio.channels.FileChannel} class, passing arguments of<tt>true</tt> and <tt>false</tt>, respectively, except that they always apply to every I/O operation and are therefore often more efficient.  If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device.  This is useful for ensuring that critical information is not lost in the event of a system crash.  If the file does not reside on a local device then no such guarantee is made. <p>The <tt>""rwd""</tt> mode can be used to reduce the number of I/O operations performed.  Using <tt>""rwd""</tt> only requires updates to the file's content to be written to storage; using <tt>""rws""</tt> requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. <p>If there is a security manager, its  {@code checkRead} method iscalled with the pathname of the  {@code file} argument as itsargument to see if read access to the file is allowed.  If the mode allows writing, the security manager's  {@code checkWrite} method isalso called with the path argument to see if write access to the file is allowed.
 * @param file   the file object
 * @param mode   the access mode, as described<a href=""#mode"">above</a>
 * @exception IllegalArgumentException  if the mode argument is not equalto one of <tt>""r""</tt>, <tt>""rw""</tt>, <tt>""rws""</tt>, or <tt>""rwd""</tt>
 * @exception FileNotFoundException if the mode is <tt>""r""</tt> but the given file object does not denote an existing regular file, or if the mode begins with <tt>""rw""</tt> but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file
 * @exception SecurityException         if a security manager exists and its{@code checkRead} method denies read access to the fileor the mode is ""rw"" and the security manager's {@code checkWrite} method denies write access to the file
 * @see java.lang.SecurityManager#checkRead(java.lang.String)
 * @see java.lang.SecurityManager#checkWrite(java.lang.String)
 * @see java.nio.channels.FileChannel#force(boolean)
 * @revised 1.4
 * @spec JSR-51
 */
public RandomAccessFile(File file,String mode) throws FileNotFoundException {
  String name=(file != null ? file.getPath() : null);
  int imode=-1;
  if (mode.equals(""String_Node_Str""))   imode=O_RDONLY;
 else   if (mode.startsWith(""String_Node_Str"")) {
    imode=O_RDWR;
    rw=true;
    if (mode.length() > 2) {
      if (mode.equals(""String_Node_Str""))       imode|=O_SYNC;
 else       if (mode.equals(""String_Node_Str""))       imode|=O_DSYNC;
 else       imode=-1;
    }
  }
  if (imode < 0)   throw new IllegalArgumentException(""String_Node_Str"" + mode + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  SecurityManager security=System.getSecurityManager();
  if (security != null) {
    security.checkRead(name);
    if (rw) {
      security.checkWrite(name);
    }
  }
  if (name == null) {
    throw new NullPointerException();
  }
  if (file.isInvalid()) {
    throw new FileNotFoundException(""String_Node_Str"");
  }
  fd=new FileDescriptor();
  fd.attach(this);
  open(name,imode);
}"
79117,"/** 
 * Returns a   {@code LockInfo} object represented by thegiven  {@code CompositeData}. The given   {@code CompositeData} must contain the following attributes:<blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>identityHashCode</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd {@code CompositeData} representing a {@code LockInfo}
 * @throws IllegalArgumentException if {@code cd} does notrepresent a  {@code LockInfo} with the attributes describedabove.
 * @return a {@code LockInfo} object representedby  {@code cd} if {@code cd} is not {@code null};  {@code null} otherwise.
 * @since 1.8
 */
public static LockInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof LockInfoCompositeData) {
    return ((LockInfoCompositeData)cd).getLockInfo();
  }
 else {
    return LockInfoCompositeData.toLockInfo(cd);
  }
}","/** 
 * Returns a   {@code LockInfo} object represented by thegiven  {@code CompositeData}. The given   {@code CompositeData} must contain the following attributes:<blockquote> <table border summary=""The attributes and the types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>identityHashCode</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd {@code CompositeData} representing a {@code LockInfo}
 * @throws IllegalArgumentException if {@code cd} does notrepresent a  {@code LockInfo} with the attributes describedabove.
 * @return a {@code LockInfo} object representedby  {@code cd} if {@code cd} is not {@code null};  {@code null} otherwise.
 * @since 1.8
 */
public static LockInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof LockInfoCompositeData) {
    return ((LockInfoCompositeData)cd).getLockInfo();
  }
 else {
    return LockInfoCompositeData.toLockInfo(cd);
  }
}"
79118,"/** 
 * Returns the list of the platform MXBean proxies for forwarding the method calls of the   {@code mxbeanInterface}through the given   {@code MBeanServerConnection}. The returned list may contain zero, one, or more instances. The number of instances in the returned list is defined in the specification of the given management interface. The order is undefined and there is no guarantee that the list returned is in the same order as previous invocations.
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean
 * @return the list of platform MXBean proxies forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>List<T> getPlatformMXBeans(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null) {
    throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  }
  return Collections.unmodifiableList(pc.getMXBeans(connection,mxbeanInterface));
}","/** 
 * Returns the list of the platform MXBean proxies for forwarding the method calls of the   {@code mxbeanInterface}through the given   {@code MBeanServerConnection}. The returned list may contain zero, one, or more instances. The number of instances in the returned list is defined in the specification of the given management interface. The order is undefined and there is no guarantee that the list returned is in the same order as previous invocations.
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean
 * @param < T > an {@code mxbeanInterface} type parameter
 * @return the list of platform MXBean proxies forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>List<T> getPlatformMXBeans(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null) {
    throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  }
  return Collections.unmodifiableList(pc.getMXBeans(connection,mxbeanInterface));
}"
79119,"/** 
 * Returns a proxy for a platform MXBean interface of a given <a href=""#MXBeanNames"">MXBean name</a> that forwards its method calls through the given <tt>MBeanServerConnection</tt>. <p>This method is equivalent to: <blockquote>  {@link java.lang.reflect.Proxy#newProxyInstance Proxy.newProxyInstance}<tt>(mxbeanInterface.getClassLoader(), new Class[] { mxbeanInterface }, handler)</tt> </blockquote> where <tt>handler</tt> is an   {@link java.lang.reflect.InvocationHandler InvocationHandler} to which method invocations to the MXBean interfaceare dispatched. This <tt>handler</tt> converts an input parameter from an MXBean data type to its mapped open type before forwarding to the <tt>MBeanServer</tt> and converts a return value from an MXBean method call through the <tt>MBeanServer</tt> from an open type to the corresponding return type declared in the MXBean interface. <p> If the MXBean is a notification emitter (i.e., it implements {@link javax.management.NotificationEmitter NotificationEmitter}), both the <tt>mxbeanInterface</tt> and <tt>NotificationEmitter</tt> will be implemented by this proxy. <p> <b>Notes:</b> <ol> <li>Using an MXBean proxy is a convenience remote access to a platform MXBean of a running virtual machine.  All method calls to the MXBean proxy are forwarded to an <tt>MBeanServerConnection</tt> where  {@link java.io.IOException IOException} may be thrownwhen the communication problem occurs with the connector server. An application remotely accesses the platform MXBeans using proxy should prepare to catch <tt>IOException</tt> as if accessing with the <tt>MBeanServerConnector</tt> interface.</li> <li>When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch {@link java.io.InvalidObjectException InvalidObjectException}which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. </li> <li>  {@link javax.management.MBeanServerInvocationHandler MBeanServerInvocationHandler} or its{@link javax.management.MBeanServerInvocationHandler#newProxyInstance newProxyInstance} method cannot be used to createa proxy for a platform MXBean. The proxy object created by <tt>MBeanServerInvocationHandler</tt> does not handle the properties of the platform MXBeans described in the <a href=""#MXBean"">class specification</a>. </li> </ol>
 * @param connection the <tt>MBeanServerConnection</tt> to forward to.
 * @param mxbeanName the name of a platform MXBean within<tt>connection</tt> to forward to. <tt>mxbeanName</tt> must be in the format of  {@link ObjectName ObjectName}.
 * @param mxbeanInterface the MXBean interface to be implementedby the proxy.
 * @throws IllegalArgumentException if<ul> <li><tt>mxbeanName</tt> is not with a valid {@link ObjectName ObjectName} format, or</li><li>the named MXBean in the <tt>connection</tt> is not a MXBean provided by the platform, or</li> <li>the named MXBean is not registered in the <tt>MBeanServerConnection</tt>, or</li> <li>the named MXBean is not an instance of the given <tt>mxbeanInterface</tt></li> </ul>
 * @throws java.io.IOException if a communication problemoccurred when accessing the <tt>MBeanServerConnection</tt>.
 */
public static <T>T newPlatformMXBeanProxy(MBeanServerConnection connection,String mxbeanName,Class<T> mxbeanInterface) throws java.io.IOException {
  final Class<?> cls=mxbeanInterface;
  ClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
    public ClassLoader run(){
      return cls.getClassLoader();
    }
  }
);
  if (!sun.misc.VM.isSystemDomainLoader(loader)) {
    throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"");
  }
  try {
    final ObjectName objName=new ObjectName(mxbeanName);
    String intfName=mxbeanInterface.getName();
    if (!connection.isInstanceOf(objName,intfName)) {
      throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"" + mxbeanInterface);
    }
    final Class[] interfaces;
    boolean emitter=connection.isInstanceOf(objName,NOTIF_EMITTER);
    return JMX.newMXBeanProxy(connection,objName,mxbeanInterface,emitter);
  }
 catch (  InstanceNotFoundException|MalformedObjectNameException e) {
    throw new IllegalArgumentException(e);
  }
}","/** 
 * Returns a proxy for a platform MXBean interface of a given <a href=""#MXBeanNames"">MXBean name</a> that forwards its method calls through the given <tt>MBeanServerConnection</tt>. <p>This method is equivalent to: <blockquote>  {@link java.lang.reflect.Proxy#newProxyInstance Proxy.newProxyInstance}<tt>(mxbeanInterface.getClassLoader(), new Class[] { mxbeanInterface }, handler)</tt> </blockquote> where <tt>handler</tt> is an   {@link java.lang.reflect.InvocationHandler InvocationHandler} to which method invocations to the MXBean interfaceare dispatched. This <tt>handler</tt> converts an input parameter from an MXBean data type to its mapped open type before forwarding to the <tt>MBeanServer</tt> and converts a return value from an MXBean method call through the <tt>MBeanServer</tt> from an open type to the corresponding return type declared in the MXBean interface. <p> If the MXBean is a notification emitter (i.e., it implements {@link javax.management.NotificationEmitter NotificationEmitter}), both the <tt>mxbeanInterface</tt> and <tt>NotificationEmitter</tt> will be implemented by this proxy. <p> <b>Notes:</b> <ol> <li>Using an MXBean proxy is a convenience remote access to a platform MXBean of a running virtual machine.  All method calls to the MXBean proxy are forwarded to an <tt>MBeanServerConnection</tt> where  {@link java.io.IOException IOException} may be thrownwhen the communication problem occurs with the connector server. An application remotely accesses the platform MXBeans using proxy should prepare to catch <tt>IOException</tt> as if accessing with the <tt>MBeanServerConnector</tt> interface.</li> <li>When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch {@link java.io.InvalidObjectException InvalidObjectException}which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. </li> <li>  {@link javax.management.MBeanServerInvocationHandler MBeanServerInvocationHandler} or its{@link javax.management.MBeanServerInvocationHandler#newProxyInstance newProxyInstance} method cannot be used to createa proxy for a platform MXBean. The proxy object created by <tt>MBeanServerInvocationHandler</tt> does not handle the properties of the platform MXBeans described in the <a href=""#MXBean"">class specification</a>. </li> </ol>
 * @param connection the <tt>MBeanServerConnection</tt> to forward to.
 * @param mxbeanName the name of a platform MXBean within<tt>connection</tt> to forward to. <tt>mxbeanName</tt> must be in the format of  {@link ObjectName ObjectName}.
 * @param mxbeanInterface the MXBean interface to be implementedby the proxy.
 * @param < T > an {@code mxbeanInterface} type parameter
 * @return a proxy for a platform MXBean interface of agiven <a href=""#MXBeanNames"">MXBean name</a> that forwards its method calls through the given <tt>MBeanServerConnection</tt>, or  {@code null} if not exist.
 * @throws IllegalArgumentException if<ul> <li><tt>mxbeanName</tt> is not with a valid {@link ObjectName ObjectName} format, or</li><li>the named MXBean in the <tt>connection</tt> is not a MXBean provided by the platform, or</li> <li>the named MXBean is not registered in the <tt>MBeanServerConnection</tt>, or</li> <li>the named MXBean is not an instance of the given <tt>mxbeanInterface</tt></li> </ul>
 * @throws java.io.IOException if a communication problemoccurred when accessing the <tt>MBeanServerConnection</tt>.
 */
public static <T>T newPlatformMXBeanProxy(MBeanServerConnection connection,String mxbeanName,Class<T> mxbeanInterface) throws java.io.IOException {
  final Class<?> cls=mxbeanInterface;
  ClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
    public ClassLoader run(){
      return cls.getClassLoader();
    }
  }
);
  if (!sun.misc.VM.isSystemDomainLoader(loader)) {
    throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"");
  }
  try {
    final ObjectName objName=new ObjectName(mxbeanName);
    String intfName=mxbeanInterface.getName();
    if (!connection.isInstanceOf(objName,intfName)) {
      throw new IllegalArgumentException(mxbeanName + ""String_Node_Str"" + mxbeanInterface);
    }
    final Class[] interfaces;
    boolean emitter=connection.isInstanceOf(objName,NOTIF_EMITTER);
    return JMX.newMXBeanProxy(connection,objName,mxbeanInterface,emitter);
  }
 catch (  InstanceNotFoundException|MalformedObjectNameException e) {
    throw new IllegalArgumentException(e);
  }
}"
79120,"/** 
 * Returns the platform MXBean proxy for  {@code mxbeanInterface} which is specified to have one singleinstance in a Java virtual machine and the proxy will forward the method calls through the given  {@code MBeanServerConnection}. This method may return   {@code null} if the management interfaceis not implemented in the Java virtual machine being monitored (for example, a Java virtual machine with no compilation system does not implement  {@link CompilationMXBean}); otherwise, this method is equivalent to calling: <pre>  {@link #getPlatformMXBeans(MBeanServerConnection,Class) getPlatformMXBeans(connection, mxbeanInterface)}.get(0); </pre>
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean with one single instance in the Java virtual machine being monitored, if implemented.
 * @return the platform MXBean proxy forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}, or   {@code null} if not exist.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface or not a singleton platform MXBean.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>T getPlatformMXBean(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null)   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  if (!pc.isSingleton())   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  return pc.getSingletonMXBean(connection,mxbeanInterface);
}","/** 
 * Returns the platform MXBean proxy for  {@code mxbeanInterface} which is specified to have one singleinstance in a Java virtual machine and the proxy will forward the method calls through the given  {@code MBeanServerConnection}. This method may return   {@code null} if the management interfaceis not implemented in the Java virtual machine being monitored (for example, a Java virtual machine with no compilation system does not implement  {@link CompilationMXBean}); otherwise, this method is equivalent to calling: <pre>  {@link #getPlatformMXBeans(MBeanServerConnection,Class) getPlatformMXBeans(connection, mxbeanInterface)}.get(0); </pre>
 * @param connection the {@code MBeanServerConnection} to forward to.
 * @param mxbeanInterface a management interface for a platformMXBean with one single instance in the Java virtual machine being monitored, if implemented.
 * @param < T > an {@code mxbeanInterface} type parameter
 * @return the platform MXBean proxy forforwarding the method calls of the  {@code mxbeanInterface}through the given   {@code MBeanServerConnection}, or   {@code null} if not exist.
 * @throws IllegalArgumentException if {@code mxbeanInterface}is not a platform management interface or not a singleton platform MXBean.
 * @throws java.io.IOException if a communication problemoccurred when accessing the  {@code MBeanServerConnection}.
 * @see #newPlatformMXBeanProxy
 * @since 1.7
 */
public static <T extends PlatformManagedObject>T getPlatformMXBean(MBeanServerConnection connection,Class<T> mxbeanInterface) throws java.io.IOException {
  PlatformComponent pc=PlatformComponent.getPlatformComponent(mxbeanInterface);
  if (pc == null)   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  if (!pc.isSingleton())   throw new IllegalArgumentException(mxbeanInterface.getName() + ""String_Node_Str"");
  return pc.getSingletonMXBean(connection,mxbeanInterface);
}"
79121,"/** 
 * Returns a <tt>MemoryNotificationInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>poolName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>usage</td> <td><tt>javax.management.openmbean.CompositeData</tt></td> </tr> <tr> <td>count</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a<tt>MemoryNotificationInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryNotificationInfo</tt> object.
 * @return a <tt>MemoryNotificationInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryNotificationInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryNotifInfoCompositeData) {
    return ((MemoryNotifInfoCompositeData)cd).getMemoryNotifInfo();
  }
 else {
    return new MemoryNotificationInfo(cd);
  }
}","/** 
 * Returns a <tt>MemoryNotificationInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <blockquote> <table border summary=""The attributes and the types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>poolName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>usage</td> <td><tt>javax.management.openmbean.CompositeData</tt></td> </tr> <tr> <td>count</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a<tt>MemoryNotificationInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryNotificationInfo</tt> object.
 * @return a <tt>MemoryNotificationInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryNotificationInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryNotifInfoCompositeData) {
    return ((MemoryNotifInfoCompositeData)cd).getMemoryNotifInfo();
  }
 else {
    return new MemoryNotificationInfo(cd);
  }
}"
79122,"/** 
 * Returns a <tt>MemoryUsage</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <p> <blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>init</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>used</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>committed</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>max</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MemoryUsage</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryUsage</tt> with the attributes described above.
 * @return a <tt>MemoryUsage</tt> object represented by <tt>cd</tt>if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryUsage from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryUsageCompositeData) {
    return ((MemoryUsageCompositeData)cd).getMemoryUsage();
  }
 else {
    return new MemoryUsage(cd);
  }
}","/** 
 * Returns a <tt>MemoryUsage</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes: <p> <blockquote> <table border summary=""The attributes and the types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>init</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>used</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>committed</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>max</td> <td><tt>java.lang.Long</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MemoryUsage</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MemoryUsage</tt> with the attributes described above.
 * @return a <tt>MemoryUsage</tt> object represented by <tt>cd</tt>if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MemoryUsage from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MemoryUsageCompositeData) {
    return ((MemoryUsageCompositeData)cd).getMemoryUsage();
  }
 else {
    return new MemoryUsage(cd);
  }
}"
79123,"/** 
 * Returns a <tt>MonitorInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes as well as the attributes specified in the <a href=""LockInfo.html#MappedType""> mapped type</a> for the   {@link LockInfo} class:<blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>lockedStackFrame</td> <td><tt>CompositeData as specified in the <a href=""ThreadInfo.html#StackTrace"">stackTrace</a> attribute defined in the  {@link ThreadInfo#from ThreadInfo.from} method.</tt></td> </tr> <tr> <td>lockedStackDepth</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MonitorInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MonitorInfo</tt> with the attributes described above.
 * @return a <tt>MonitorInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MonitorInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MonitorInfoCompositeData) {
    return ((MonitorInfoCompositeData)cd).getMonitorInfo();
  }
 else {
    MonitorInfoCompositeData.validateCompositeData(cd);
    String className=MonitorInfoCompositeData.getClassName(cd);
    int identityHashCode=MonitorInfoCompositeData.getIdentityHashCode(cd);
    int stackDepth=MonitorInfoCompositeData.getLockedStackDepth(cd);
    StackTraceElement stackFrame=MonitorInfoCompositeData.getLockedStackFrame(cd);
    return new MonitorInfo(className,identityHashCode,stackDepth,stackFrame);
  }
}","/** 
 * Returns a <tt>MonitorInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes as well as the attributes specified in the <a href=""LockInfo.html#MappedType""> mapped type</a> for the   {@link LockInfo} class:<blockquote> <table border summary=""The attributes and their types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>lockedStackFrame</td> <td><tt>CompositeData as specified in the <a href=""ThreadInfo.html#StackTrace"">stackTrace</a> attribute defined in the  {@link ThreadInfo#from ThreadInfo.from} method.</tt></td> </tr> <tr> <td>lockedStackDepth</td> <td><tt>java.lang.Integer</tt></td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>MonitorInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>MonitorInfo</tt> with the attributes described above.
 * @return a <tt>MonitorInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static MonitorInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof MonitorInfoCompositeData) {
    return ((MonitorInfoCompositeData)cd).getMonitorInfo();
  }
 else {
    MonitorInfoCompositeData.validateCompositeData(cd);
    String className=MonitorInfoCompositeData.getClassName(cd);
    int identityHashCode=MonitorInfoCompositeData.getIdentityHashCode(cd);
    int stackDepth=MonitorInfoCompositeData.getLockedStackDepth(cd);
    StackTraceElement stackFrame=MonitorInfoCompositeData.getLockedStackFrame(cd);
    return new MonitorInfo(className,identityHashCode,stackDepth,stackFrame);
  }
}"
79124,"/** 
 * Returns the input arguments passed to the Java virtual machine which does not include the arguments to the <tt>main</tt> method. This method returns an empty list if there is no input argument to the Java virtual machine. <p> Some Java virtual machine implementations may take input arguments from multiple different sources: for examples, arguments passed from the application that launches the Java virtual machine such as the 'java' command, environment variables, configuration files, etc. <p> Typically, not all command-line options to the 'java' command are passed to the Java virtual machine. Thus, the returned input arguments may not include all command-line options. <p> <b>MBeanServer access</b>:<br> The mapped type of <tt>List<String></tt> is <tt>String[]</tt>.
 * @return a list of <tt>String</tt> objects; each elementis an argument passed to the Java virtual machine.
 * @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(""monitor"").
 */
public java.util.List<String> getInputArguments();","/** 
 * Returns the input arguments passed to the Java virtual machine which does not include the arguments to the <tt>main</tt> method. This method returns an empty list if there is no input argument to the Java virtual machine. <p> Some Java virtual machine implementations may take input arguments from multiple different sources: for examples, arguments passed from the application that launches the Java virtual machine such as the 'java' command, environment variables, configuration files, etc. <p> Typically, not all command-line options to the 'java' command are passed to the Java virtual machine. Thus, the returned input arguments may not include all command-line options. <p> <b>MBeanServer access</b>:<br> The mapped type of   {@code List<String>} is <tt>String[]</tt>.
 * @return a list of <tt>String</tt> objects; each elementis an argument passed to the Java virtual machine.
 * @throws java.lang.SecurityException if a security manager exists and the caller does not have ManagementPermission(""monitor"").
 */
public java.util.List<String> getInputArguments();"
79125,"/** 
 * Returns a map of names and values of all system properties. This method calls   {@link System#getProperties} to get allsystem properties.  Properties whose name or value is not a <tt>String</tt> are omitted. <p> <b>MBeanServer access</b>:<br> The mapped type of  {@code Map<String,String>} is{@link javax.management.openmbean.TabularData TabularData}with two items in each row as follows: <blockquote> <table border> <tr> <th>Item Name</th> <th>Item Type</th> </tr> <tr> <td><tt>key</tt></td> <td><tt>String</tt></td> </tr> <tr> <td><tt>value</tt></td> <td><tt>String</tt></td> </tr> </table> </blockquote>
 * @return a map of names and values of all system properties.
 * @throws java.lang.SecurityException if a security manager exists and its <code>checkPropertiesAccess</code> method doesn't allow access to the system properties.
 */
public java.util.Map<String,String> getSystemProperties();","/** 
 * Returns a map of names and values of all system properties. This method calls   {@link System#getProperties} to get allsystem properties.  Properties whose name or value is not a <tt>String</tt> are omitted. <p> <b>MBeanServer access</b>:<br> The mapped type of  {@code Map<String,String>} is{@link javax.management.openmbean.TabularData TabularData}with two items in each row as follows: <blockquote> <table border summary=""Name and Type for each item""> <tr> <th>Item Name</th> <th>Item Type</th> </tr> <tr> <td><tt>key</tt></td> <td><tt>String</tt></td> </tr> <tr> <td><tt>value</tt></td> <td><tt>String</tt></td> </tr> </table> </blockquote>
 * @return a map of names and values of all system properties.
 * @throws java.lang.SecurityException if a security manager exists and its <code>checkPropertiesAccess</code> method doesn't allow access to the system properties.
 */
public java.util.Map<String,String> getSystemProperties();"
79126,"/** 
 * Returns a <tt>ThreadInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes unless otherwise specified below: <blockquote> <table border> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>threadId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>threadName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>threadState</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>suspended</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>inNative</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>blockedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>blockedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockInfo</td> <td><tt>javax.management.openmbean.CompositeData</tt> - the mapped type for   {@link LockInfo} as specified in the{@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, the <tt>LockInfo</tt> object will be constructed from the value of the <tt>lockName</tt> attribute. </td> </tr> <tr> <td>lockName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lockOwnerId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockOwnerName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td><a name=""StackTrace"">stackTrace</a></td> <td><tt>javax.management.openmbean.CompositeData[]</tt> <p> Each element is a <tt>CompositeData</tt> representing StackTraceElement containing the following attributes: <blockquote> <table cellspacing=1 cellpadding=0> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>methodName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>fileName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lineNumber</td> <td><tt>java.lang.Integer</tt></td> </tr> <tr> <td>nativeMethod</td> <td><tt>java.lang.Boolean</tt></td> </tr> </table> </blockquote> </td> </tr> <tr> <td>lockedMonitors</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link MonitorInfo} as specified in the{@link MonitorInfo#from Monitor.from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> <tr> <td>lockedSynchronizers</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link LockInfo} as specified in the {@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>ThreadInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>ThreadInfo</tt> with the attributes described above.
 * @return a <tt>ThreadInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static ThreadInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof ThreadInfoCompositeData) {
    return ((ThreadInfoCompositeData)cd).getThreadInfo();
  }
 else {
    return new ThreadInfo(cd);
  }
}","/** 
 * Returns a <tt>ThreadInfo</tt> object represented by the given <tt>CompositeData</tt>. The given <tt>CompositeData</tt> must contain the following attributes unless otherwise specified below: <blockquote> <table border summary=""The attributes and their types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>threadId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>threadName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>threadState</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>suspended</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>inNative</td> <td><tt>java.lang.Boolean</tt></td> </tr> <tr> <td>blockedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>blockedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedCount</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>waitedTime</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockInfo</td> <td><tt>javax.management.openmbean.CompositeData</tt> - the mapped type for   {@link LockInfo} as specified in the{@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, the <tt>LockInfo</tt> object will be constructed from the value of the <tt>lockName</tt> attribute. </td> </tr> <tr> <td>lockName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lockOwnerId</td> <td><tt>java.lang.Long</tt></td> </tr> <tr> <td>lockOwnerName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td><a name=""StackTrace"">stackTrace</a></td> <td><tt>javax.management.openmbean.CompositeData[]</tt> <p> Each element is a <tt>CompositeData</tt> representing StackTraceElement containing the following attributes: <blockquote> <table cellspacing=1 cellpadding=0 summary=""The attributes and their types the given CompositeData contains""> <tr> <th align=left>Attribute Name</th> <th align=left>Type</th> </tr> <tr> <td>className</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>methodName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>fileName</td> <td><tt>java.lang.String</tt></td> </tr> <tr> <td>lineNumber</td> <td><tt>java.lang.Integer</tt></td> </tr> <tr> <td>nativeMethod</td> <td><tt>java.lang.Boolean</tt></td> </tr> </table> </blockquote> </td> </tr> <tr> <td>lockedMonitors</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link MonitorInfo} as specified in the{@link MonitorInfo#from Monitor.from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> <tr> <td>lockedSynchronizers</td> <td><tt>javax.management.openmbean.CompositeData[]</tt> whose element type is the mapped type for {@link LockInfo} as specified in the {@link LockInfo#from} method.<p> If <tt>cd</tt> does not contain this attribute, this attribute will be set to an empty array. </td> </tr> </table> </blockquote>
 * @param cd <tt>CompositeData</tt> representing a <tt>ThreadInfo</tt>
 * @throws IllegalArgumentException if <tt>cd</tt> does notrepresent a <tt>ThreadInfo</tt> with the attributes described above.
 * @return a <tt>ThreadInfo</tt> object representedby <tt>cd</tt> if <tt>cd</tt> is not <tt>null</tt>; <tt>null</tt> otherwise.
 */
public static ThreadInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof ThreadInfoCompositeData) {
    return ((ThreadInfoCompositeData)cd).getThreadInfo();
  }
 else {
    return new ThreadInfo(cd);
  }
}"
79127,"/** 
 * Returns   {@code true} if this Spliterator's {@link #characteristics} contain all of the given characteristics.
 * @implSpec The default implementation returns true if the corresponding bits of the given characteristics are set.
 * @return {@code true} if all the specified characteristics are present,else  {@code false}
 */
default boolean hasCharacteristics(int characteristics){
  return (characteristics() & characteristics) == characteristics;
}","/** 
 * Returns   {@code true} if this Spliterator's {@link #characteristics} contain all of the given characteristics.
 * @implSpec The default implementation returns true if the corresponding bits of the given characteristics are set.
 * @param characteristics the characteristics to check for
 * @return {@code true} if all the specified characteristics are present,else  {@code false}
 */
default boolean hasCharacteristics(int characteristics){
  return (characteristics() & characteristics) == characteristics;
}"
79128,"/** 
 * Skips <code>n</code> bytes of input from the bytes that can be read from this input stream without blocking. <p>Fewer bytes than requested might be skipped. The actual number of bytes skipped is equal to <code>n</code> or the result of a call to  {@link #available() <code>available</code>}, whichever is smaller. If <code>n</code> is less than zero, no bytes are skipped. <p>The actual number of bytes skipped is returned.
 * @param n the number of bytes to be skipped.
 * @return     the actual number of bytes skipped.
 * @exception IOException  if an I/O error occurs.
 * @since JCE1.2
 */
public long skip(long n) throws IOException {
  int available=ofinish - ostart;
  if (n > available) {
    n=available;
  }
  if (n < 0) {
    return 0;
  }
  ostart+=n;
  return n;
}","/** 
 * Skips <code>n</code> bytes of input from the bytes that can be read from this input stream without blocking. <p>Fewer bytes than requested might be skipped. The actual number of bytes skipped is equal to <code>n</code> or the result of a call to  {@link #available() available}, whichever is smaller. If <code>n</code> is less than zero, no bytes are skipped. <p>The actual number of bytes skipped is returned.
 * @param n the number of bytes to be skipped.
 * @return     the actual number of bytes skipped.
 * @exception IOException  if an I/O error occurs.
 * @since JCE1.2
 */
public long skip(long n) throws IOException {
  int available=ofinish - ostart;
  if (n > available) {
    n=available;
  }
  if (n < 0) {
    return 0;
  }
  ostart+=n;
  return n;
}"
79129,"/** 
 * Returns an <code>ExemptionMechanism</code> object that implements the specified exemption mechanism algorithm. <p> A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested exemption mechanism.See the ExemptionMechanism section in the <a href= ""{docRoot}/../technotes/guides/security/StandardNames.html#Exemption""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard exemption mechanism names.
 * @param provider the provider.
 * @return the new <code>ExemptionMechanism</code> object.
 * @exception NullPointerException if <code>algorithm</code>is null.
 * @exception NoSuchAlgorithmException if an ExemptionMechanismSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final ExemptionMechanism getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",ExemptionMechanismSpi.class,algorithm,provider);
  return new ExemptionMechanism((ExemptionMechanismSpi)instance.impl,instance.provider,algorithm);
}","/** 
 * Returns an <code>ExemptionMechanism</code> object that implements the specified exemption mechanism algorithm. <p> A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested exemption mechanism.See the ExemptionMechanism section in the <a href= "" {@docRoot}/../technotes/guides/security/StandardNames.html#Exemption""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard exemption mechanism names.
 * @param provider the provider.
 * @return the new <code>ExemptionMechanism</code> object.
 * @exception NullPointerException if <code>algorithm</code>is null.
 * @exception NoSuchAlgorithmException if an ExemptionMechanismSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final ExemptionMechanism getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",ExemptionMechanismSpi.class,algorithm,provider);
  return new ExemptionMechanism((ExemptionMechanismSpi)instance.impl,instance.provider,algorithm);
}"
79130,"/** 
 * Returns a <code>KeyAgreement</code> object that implements the specified key agreement algorithm. <p> A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested key agreementalgorithm. See the KeyAgreement section in the <a href= "" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement""> Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names.
 * @param provider the provider.
 * @return the new <code>KeyAgreement</code> object.
 * @exception NullPointerException if the specified algorithmis null.
 * @exception NoSuchAlgorithmException if a KeyAgreementSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final KeyAgreement getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",KeyAgreementSpi.class,algorithm,provider);
  return new KeyAgreement((KeyAgreementSpi)instance.impl,instance.provider,algorithm);
}","/** 
 * Returns a <code>KeyAgreement</code> object that implements the specified key agreement algorithm. <p> A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param algorithm the standard name of the requested key agreementalgorithm. See the KeyAgreement section in the <a href= "" {@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard algorithm names.
 * @param provider the provider.
 * @return the new <code>KeyAgreement</code> object.
 * @exception NullPointerException if the specified algorithmis null.
 * @exception NoSuchAlgorithmException if a KeyAgreementSpiimplementation for the specified algorithm is not available from the specified Provider object.
 * @exception IllegalArgumentException if the <code>provider</code>is null.
 * @see java.security.Provider
 */
public static final KeyAgreement getInstance(String algorithm,Provider provider) throws NoSuchAlgorithmException {
  Instance instance=JceSecurity.getInstance(""String_Node_Str"",KeyAgreementSpi.class,algorithm,provider);
  return new KeyAgreement((KeyAgreementSpi)instance.impl,instance.provider,algorithm);
}"
79131,"public NullCipher(){
  super(new NullCipherSpi(),null);
}","/** 
 * Creates a NullCipher object.
 */
public NullCipher(){
  super(new NullCipherSpi(),null);
}"
79132,"/** 
 * Return a <code>Set</code> of private credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The caller must have permission to access all of the requested Credentials, or a <code>SecurityException</code> will be thrown. <p> The returned <code>Set</code> is not backed by this Subject's internal private Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal private Credential <code>Set</code>. <p>
 * @param c the returned <code>Set</code> of private credentials will all beinstances of this class.
 * @return a <code>Set</code> of private credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPrivateCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRIV_CREDENTIAL_SET,c);
}","/** 
 * Return a <code>Set</code> of private credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The caller must have permission to access all of the requested Credentials, or a <code>SecurityException</code> will be thrown. <p> The returned <code>Set</code> is not backed by this Subject's internal private Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal private Credential <code>Set</code>. <p>
 * @param < T > the type of the class modeled by {@code c}
 * @param c the returned <code>Set</code> of private credentials will all beinstances of this class.
 * @return a <code>Set</code> of private credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPrivateCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRIV_CREDENTIAL_SET,c);
}"
79133,"/** 
 * Return a <code>Set</code> of public credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal public Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal public Credential <code>Set</code>. <p>
 * @param c the returned <code>Set</code> of public credentials will all beinstances of this class.
 * @return a <code>Set</code> of public credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPublicCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PUB_CREDENTIAL_SET,c);
}","/** 
 * Return a <code>Set</code> of public credentials associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal public Credential <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal public Credential <code>Set</code>. <p>
 * @param < T > the type of the class modeled by {@code c}
 * @param c the returned <code>Set</code> of public credentials will all beinstances of this class.
 * @return a <code>Set</code> of public credentials that are instancesof the  specified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T>Set<T> getPublicCredentials(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PUB_CREDENTIAL_SET,c);
}"
79134,"/** 
 * Return a <code>Set</code> of Principals associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal <code>Principal</code> <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal <code>Principal</code> <code>Set</code>. <p>
 * @param c the returned <code>Set</code> of Principals will all beinstances of this class.
 * @return a <code>Set</code> of Principals that are instances of thespecified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T extends Principal>Set<T> getPrincipals(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRINCIPAL_SET,c);
}","/** 
 * Return a <code>Set</code> of Principals associated with this <code>Subject</code> that are instances or subclasses of the specified <code>Class</code>. <p> The returned <code>Set</code> is not backed by this Subject's internal <code>Principal</code> <code>Set</code>.  A new <code>Set</code> is created and returned for each method invocation. Modifications to the returned <code>Set</code> will not affect the internal <code>Principal</code> <code>Set</code>. <p>
 * @param < T > the type of the class modeled by {@code c}
 * @param c the returned <code>Set</code> of Principals will all beinstances of this class.
 * @return a <code>Set</code> of Principals that are instances of thespecified <code>Class</code>.
 * @exception NullPointerException if the specified <code>Class</code>is <code>null</code>.
 */
public <T extends Principal>Set<T> getPrincipals(Class<T> c){
  if (c == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  return new ClassSet<T>(PRINCIPAL_SET,c);
}"
79135,"/** 
 * Perform privileged work as a particular <code>Subject</code>. <p> This method behaves exactly as <code>Subject.doAs</code>, except that instead of retrieving the current Thread's <code>AccessControlContext</code>, it uses the provided <code>AccessControlContext</code>.  If the provided <code>AccessControlContext</code> is <code>null</code>, this method instantiates a new <code>AccessControlContext</code> with an empty collection of ProtectionDomains. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @param acc the <code>AccessControlContext</code> to be tied to thespecified <i>subject</i> and <i>action</i>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAsPrivileged(final Subject subject,final java.security.PrivilegedExceptionAction<T> action,final java.security.AccessControlContext acc) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PRIVILEGED_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext callerAcc=(acc == null ? new AccessControlContext(NULL_PD_ARRAY) : acc);
  return java.security.AccessController.doPrivileged(action,createContext(subject,callerAcc));
}","/** 
 * Perform privileged work as a particular <code>Subject</code>. <p> This method behaves exactly as <code>Subject.doAs</code>, except that instead of retrieving the current Thread's <code>AccessControlContext</code>, it uses the provided <code>AccessControlContext</code>.  If the provided <code>AccessControlContext</code> is <code>null</code>, this method instantiates a new <code>AccessControlContext</code> with an empty collection of ProtectionDomains. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @param acc the <code>AccessControlContext</code> to be tied to thespecified <i>subject</i> and <i>action</i>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAsPrivileged(final Subject subject,final java.security.PrivilegedExceptionAction<T> action,final java.security.AccessControlContext acc) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PRIVILEGED_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext callerAcc=(acc == null ? new AccessControlContext(NULL_PD_ARRAY) : acc);
  return java.security.AccessController.doPrivileged(action,createContext(subject,callerAcc));
}"
79136,"/** 
 * Perform work as a particular <code>Subject</code>. <p> This method first retrieves the current Thread's <code>AccessControlContext</code> via <code>AccessController.getContext</code>, and then instantiates a new <code>AccessControlContext</code> using the retrieved context along with a new <code>SubjectDomainCombiner</code> (constructed using the provided <code>Subject</code>). Finally, this method invokes <code>AccessController.doPrivileged</code>, passing it the provided <code>PrivilegedExceptionAction</code>, as well as the newly constructed <code>AccessControlContext</code>. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAs(final Subject subject,final java.security.PrivilegedExceptionAction<T> action) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext currentAcc=AccessController.getContext();
  return java.security.AccessController.doPrivileged(action,createContext(subject,currentAcc));
}","/** 
 * Perform work as a particular <code>Subject</code>. <p> This method first retrieves the current Thread's <code>AccessControlContext</code> via <code>AccessController.getContext</code>, and then instantiates a new <code>AccessControlContext</code> using the retrieved context along with a new <code>SubjectDomainCombiner</code> (constructed using the provided <code>Subject</code>). Finally, this method invokes <code>AccessController.doPrivileged</code>, passing it the provided <code>PrivilegedExceptionAction</code>, as well as the newly constructed <code>AccessControlContext</code>. <p>
 * @param subject the <code>Subject</code> that the specified<code>action</code> will run as.  This parameter may be <code>null</code>. <p>
 * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.
 * @param action the code to be run as the specified<code>Subject</code>. <p>
 * @return the value returned by thePrivilegedExceptionAction's <code>run</code> method.
 * @exception PrivilegedActionException if the<code>PrivilegedExceptionAction.run</code> method throws a checked exception. <p>
 * @exception NullPointerException if the specified<code>PrivilegedExceptionAction</code> is <code>null</code>. <p>
 * @exception SecurityException if the caller does not have permissionto invoke this method.
 */
public static <T>T doAs(final Subject subject,final java.security.PrivilegedExceptionAction<T> action) throws java.security.PrivilegedActionException {
  java.lang.SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(AuthPermissionHolder.DO_AS_PERMISSION);
  }
  if (action == null)   throw new NullPointerException(ResourcesMgr.getString(""String_Node_Str""));
  final AccessControlContext currentAcc=AccessController.getContext();
  return java.security.AccessController.doPrivileged(action,createContext(subject,currentAcc));
}"
79137,"/** 
 * Gets the <code>version</code> (version number) value from the certificate. The ASN.1 definition for this is: <pre> version         [0]  EXPLICIT Version DEFAULT v1<p> Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number from the ASN.1 encoding, i.e. 0, 1 or 2.
 */
public abstract int getVersion();","/** 
 * Gets the <code>version</code> (version number) value from the certificate. The ASN.1 definition for this is: <pre> version         [0]  EXPLICIT Version DEFAULT v1 Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number from the ASN.1 encoding, i.e. 0, 1 or 2.
 */
public abstract int getVersion();"
79138,"/** 
 * Gets the <code>serialNumber</code> value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber<p> CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();","/** 
 * Gets the <code>serialNumber</code> value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();"
79139,"/** 
 * Gets the <code>issuer</code> (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name<p> Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The <code>Name</code> describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the <code>AttributeValue</code> component is determined by the <code>AttributeType</code>; in general it will be a <code>directoryString</code>. A <code>directoryString</code> is usually one of <code>PrintableString</code>, <code>TeletexString</code> or <code>UniversalString</code>.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();","/** 
 * Gets the <code>issuer</code> (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The <code>Name</code> describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the <code>AttributeValue</code> component is determined by the <code>AttributeType</code>; in general it will be a <code>directoryString</code>. A <code>directoryString</code> is usually one of <code>PrintableString</code>, <code>TeletexString</code> or <code>UniversalString</code>.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();"
79140,"/** 
 * Gets the <code>notBefore</code> date from the validity period of the certificate. The relevant ASN.1 definitions are: <pre> validity             Validity<p> Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate }<p> CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity()
 */
public abstract Date getNotBefore();","/** 
 * Gets the <code>notBefore</code> date from the validity period of the certificate. The relevant ASN.1 definitions are: <pre> validity             Validity Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate } CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity()
 */
public abstract Date getNotBefore();"
79141,"/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA-1/DSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier<p> AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the <code>algorithm</code> OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();","/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA-1/DSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the <code>algorithm</code> OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();"
79142,"/** 
 * Instantiates an X509Certificate object, and initializes it with the specified byte array. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the  {@code cert.provider.x509v1} security property.<p>Note: All X509Certificate subclasses must provide a constructor of the form: <code><pre> public &lt;subClass&gt;(InputStream inStream) ... </pre></code>
 * @param certData a byte array containing the DER-encodedcertificate.
 * @return an X509Certificate object initialized with the datafrom <code>certData</code>.
 * @exception CertificateException if a class initializationor certificate parsing error occurs.
 */
public static final X509Certificate getInstance(byte[] certData) throws CertificateException {
  return getInst((Object)certData);
}","/** 
 * Instantiates an X509Certificate object, and initializes it with the specified byte array. The implementation (X509Certificate is an abstract class) is provided by the class specified as the value of the  {@code cert.provider.x509v1} security property.<p>Note: All X509Certificate subclasses must provide a constructor of the form: <pre> {@code public <subClass>(InputStream inStream) ...}</pre>
 * @param certData a byte array containing the DER-encodedcertificate.
 * @return an X509Certificate object initialized with the datafrom <code>certData</code>.
 * @exception CertificateException if a class initializationor certificate parsing error occurs.
 */
public static final X509Certificate getInstance(byte[] certData) throws CertificateException {
  return getInst((Object)certData);
}"
79143,"/** 
 * Returns the length of this character sequence.  The length is the number of 16-bit <code>char</code>s in the sequence.</p>
 * @return  the number of <code>char</code>s in this sequence
 */
int length();","/** 
 * Returns the length of this character sequence.  The length is the number of 16-bit <code>char</code>s in the sequence.
 * @return  the number of <code>char</code>s in this sequence
 */
int length();"
79144,"/** 
 * Returns a string containing the characters in this sequence in the same order as this sequence.  The length of the string will be the length of this sequence. </p>
 * @return  a string consisting of exactly this sequence of characters
 */
public String toString();","/** 
 * Returns a string containing the characters in this sequence in the same order as this sequence.  The length of the string will be the length of this sequence.
 * @return  a string consisting of exactly this sequence of characters
 */
public String toString();"
79145,"/** 
 * Returns a new <code>CharSequence</code> that is a subsequence of this sequence. The subsequence starts with the <code>char</code> value at the specified index and ends with the <code>char</code> value at index <tt>end - 1</tt>.  The length (in <code>char</code>s) of the returned sequence is <tt>end - start</tt>, so if <tt>start == end</tt> then an empty sequence is returned. </p>
 * @param start   the start index, inclusive
 * @param end     the end index, exclusive
 * @return  the specified subsequence
 * @throws IndexOutOfBoundsException if <tt>start</tt> or <tt>end</tt> are negative, if <tt>end</tt> is greater than <tt>length()</tt>, or if <tt>start</tt> is greater than <tt>end</tt>
 */
CharSequence subSequence(int start,int end);","/** 
 * Returns a new <code>CharSequence</code> that is a subsequence of this sequence. The subsequence starts with the <code>char</code> value at the specified index and ends with the <code>char</code> value at index <tt>end - 1</tt>.  The length (in <code>char</code>s) of the returned sequence is <tt>end - start</tt>, so if <tt>start == end</tt> then an empty sequence is returned.
 * @param start   the start index, inclusive
 * @param end     the end index, exclusive
 * @return  the specified subsequence
 * @throws IndexOutOfBoundsException if <tt>start</tt> or <tt>end</tt> are negative, if <tt>end</tt> is greater than <tt>length()</tt>, or if <tt>start</tt> is greater than <tt>end</tt>
 */
CharSequence subSequence(int start,int end);"
79146,"/** 
 * Returns the <code>char</code> value at the specified index.  An index ranges from zero to <tt>length() - 1</tt>.  The first <code>char</code> value of the sequence is at index zero, the next at index one, and so on, as for array indexing. </p> <p>If the <code>char</code> value specified by the index is a <a href=""  {@docRoot}/java/lang/Character.html#unicode"">surrogate</a>, the surrogate value is returned.
 * @param index   the index of the <code>char</code> value to be returned
 * @return  the specified <code>char</code> value
 * @throws IndexOutOfBoundsException if the <tt>index</tt> argument is negative or not less than <tt>length()</tt>
 */
char charAt(int index);","/** 
 * Returns the <code>char</code> value at the specified index.  An index ranges from zero to <tt>length() - 1</tt>.  The first <code>char</code> value of the sequence is at index zero, the next at index one, and so on, as for array indexing. <p>If the <code>char</code> value specified by the index is a <a href=""  {@docRoot}/java/lang/Character.html#unicode"">surrogate</a>, the surrogate value is returned.
 * @param index   the index of the <code>char</code> value to be returned
 * @return  the specified <code>char</code> value
 * @throws IndexOutOfBoundsException if the <tt>index</tt> argument is negative or not less than <tt>length()</tt>
 */
char charAt(int index);"
79147,"/** 
 * Determines if the specified character is ISO-LATIN-1 white space. This method returns   {@code true} for the following fivecharacters only: <table> <tr><td> {@code '\t'}</td>            <td>  {@code U+0009}</td> <td>  {@code HORIZONTAL TABULATION}</td></tr> <tr><td>  {@code '\n'}</td>            <td>  {@code U+000A}</td> <td>  {@code NEW LINE}</td></tr> <tr><td>  {@code '\f'}</td>            <td>  {@code U+000C}</td> <td>  {@code FORM FEED}</td></tr> <tr><td>  {@code '\r'}</td>            <td>  {@code U+000D}</td> <td>  {@code CARRIAGE RETURN}</td></tr> <tr><td>  {@code '&nbsp;'}</td>  <td>  {@code U+0020}</td> <td>  {@code SPACE}</td></tr> </table>
 * @param ch   the character to be tested.
 * @return     {@code true} if the character is ISO-LATIN-1 whitespace;  {@code false} otherwise.
 * @see Character#isSpaceChar(char)
 * @see Character#isWhitespace(char)
 * @deprecated Replaced by isWhitespace(char).
 */
@Deprecated public static boolean isSpace(char ch){
  return (ch <= 0x0020) && (((((1L << 0x0009) | (1L << 0x000A) | (1L << 0x000C)| (1L << 0x000D)| (1L << 0x0020)) >> ch) & 1L) != 0);
}","/** 
 * Determines if the specified character is ISO-LATIN-1 white space. This method returns   {@code true} for the following fivecharacters only: <table summary=""truechars""> <tr><td> {@code '\t'}</td>            <td>  {@code U+0009}</td> <td>  {@code HORIZONTAL TABULATION}</td></tr> <tr><td>  {@code '\n'}</td>            <td>  {@code U+000A}</td> <td>  {@code NEW LINE}</td></tr> <tr><td>  {@code '\f'}</td>            <td>  {@code U+000C}</td> <td>  {@code FORM FEED}</td></tr> <tr><td>  {@code '\r'}</td>            <td>  {@code U+000D}</td> <td>  {@code CARRIAGE RETURN}</td></tr> <tr><td>  {@code '&nbsp;'}</td>  <td>  {@code U+0020}</td> <td>  {@code SPACE}</td></tr> </table>
 * @param ch   the character to be tested.
 * @return     {@code true} if the character is ISO-LATIN-1 whitespace;  {@code false} otherwise.
 * @see Character#isSpaceChar(char)
 * @see Character#isWhitespace(char)
 * @deprecated Replaced by isWhitespace(char).
 */
@Deprecated public static boolean isSpace(char ch){
  return (ch <= 0x0020) && (((((1L << 0x0009) | (1L << 0x000A) | (1L << 0x000C)| (1L << 0x000D)| (1L << 0x0020)) >> ch) & 1L) != 0);
}"
79148,"/** 
 * Returns the value obtained by reversing the order of the bytes in the specified <tt>char</tt> value.
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified <tt>char</tt> value.
 * @since 1.5
 */
public static char reverseBytes(char ch){
  return (char)(((ch & 0xFF00) >> 8) | (ch << 8));
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the specified <tt>char</tt> value.
 * @param ch The {@code char} of which to reverse the byte order.
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified <tt>char</tt> value.
 * @since 1.5
 */
public static char reverseBytes(char ch){
  return (char)(((ch & 0xFF00) >> 8) | (ch << 8));
}"
79149,"/** 
 * Returns a hash code for a   {@code char} value; compatible with{@code Character.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code char} value.
 */
public static int hashCode(char value){
  return (int)value;
}","/** 
 * Returns a hash code for a   {@code char} value; compatible with{@code Character.hashCode()}.
 * @since 1.8
 * @param value The {@code char} for which to return a hash code.
 * @return a hash code value for a {@code char} value.
 */
public static int hashCode(char value){
  return (int)value;
}"
79150,"/** 
 * Finds the resource with the given name. Class loader implementations should override this method to specify where to find resources.  </p>
 * @param name The resource name
 * @return  A <tt>URL</tt> object for reading the resource, or<tt>null</tt> if the resource could not be found
 * @since  1.2
 */
protected URL findResource(String name){
  return null;
}","/** 
 * Finds the resource with the given name. Class loader implementations should override this method to specify where to find resources.
 * @param name The resource name
 * @return  A <tt>URL</tt> object for reading the resource, or<tt>null</tt> if the resource could not be found
 * @since  1.2
 */
protected URL findResource(String name){
  return null;
}"
79151,"/** 
 * Sets the default assertion status for this class loader to <tt>false</tt> and discards any package defaults or class assertion status settings associated with the class loader.  This method is provided so that class loaders can be made to ignore any command line or persistent assertion status settings and ""start with a clean slate."" </p>
 * @since  1.4
 */
public void clearAssertionStatus(){
synchronized (assertionLock) {
    classAssertionStatus=new HashMap<>();
    packageAssertionStatus=new HashMap<>();
    defaultAssertionStatus=false;
  }
}","/** 
 * Sets the default assertion status for this class loader to <tt>false</tt> and discards any package defaults or class assertion status settings associated with the class loader.  This method is provided so that class loaders can be made to ignore any command line or persistent assertion status settings and ""start with a clean slate.""
 * @since  1.4
 */
public void clearAssertionStatus(){
synchronized (assertionLock) {
    classAssertionStatus=new HashMap<>();
    packageAssertionStatus=new HashMap<>();
    defaultAssertionStatus=false;
  }
}"
79152,"/** 
 * Registers the caller as parallel capable.</p> The registration succeeds if and only if all of the following conditions are met: <br> 1. no instance of the caller has been created</p> 2. all of the super classes (except class Object) of the caller are registered as parallel capable</p> Note that once a class loader is registered as parallel capable, there is no way to change it back. </p>
 * @return  true if the caller is successfully registered asparallel capable and false if otherwise.
 * @since   1.7
 */
@CallerSensitive protected static boolean registerAsParallelCapable(){
  Class<? extends ClassLoader> callerClass=Reflection.getCallerClass().asSubclass(ClassLoader.class);
  return ParallelLoaders.register(callerClass);
}","/** 
 * Registers the caller as parallel capable. The registration succeeds if and only if all of the following conditions are met: <ol> <li> no instance of the caller has been created</li> <li> all of the super classes (except class Object) of the caller are registered as parallel capable</li> </ol> <p>Note that once a class loader is registered as parallel capable, there is no way to change it back.</p>
 * @return  true if the caller is successfully registered asparallel capable and false if otherwise.
 * @since   1.7
 */
@CallerSensitive protected static boolean registerAsParallelCapable(){
  Class<? extends ClassLoader> callerClass=Reflection.getCallerClass().asSubclass(ClassLoader.class);
  return ParallelLoaders.register(callerClass);
}"
79153,"/** 
 * Returns a <tt>Package</tt> that has been defined by this class loader or any of its ancestors.  </p>
 * @param name The package name
 * @return  The <tt>Package</tt> corresponding to the given name, or<tt>null</tt> if not found
 * @since  1.2
 */
protected Package getPackage(String name){
  Package pkg;
synchronized (packages) {
    pkg=packages.get(name);
  }
  if (pkg == null) {
    if (parent != null) {
      pkg=parent.getPackage(name);
    }
 else {
      pkg=Package.getSystemPackage(name);
    }
    if (pkg != null) {
synchronized (packages) {
        Package pkg2=packages.get(name);
        if (pkg2 == null) {
          packages.put(name,pkg);
        }
 else {
          pkg=pkg2;
        }
      }
    }
  }
  return pkg;
}","/** 
 * Returns a <tt>Package</tt> that has been defined by this class loader or any of its ancestors.
 * @param name The package name
 * @return  The <tt>Package</tt> corresponding to the given name, or<tt>null</tt> if not found
 * @since  1.2
 */
protected Package getPackage(String name){
  Package pkg;
synchronized (packages) {
    pkg=packages.get(name);
  }
  if (pkg == null) {
    if (parent != null) {
      pkg=parent.getPackage(name);
    }
 else {
      pkg=Package.getSystemPackage(name);
    }
    if (pkg != null) {
synchronized (packages) {
        Package pkg2=packages.get(name);
        if (pkg2 == null) {
          packages.put(name,pkg);
        }
 else {
          pkg=pkg2;
        }
      }
    }
  }
  return pkg;
}"
79154,"/** 
 * Returns an enumeration of   {@link java.net.URL <tt>URL</tt>} objectsrepresenting all the resources with the given name. Class loader implementations should override this method to specify where to load resources from.  </p>
 * @param name The resource name
 * @return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects forthe resources
 * @throws IOException If I/O errors occur
 * @since  1.2
 */
protected Enumeration<URL> findResources(String name) throws IOException {
  return java.util.Collections.emptyEnumeration();
}","/** 
 * Returns an enumeration of   {@link java.net.URL <tt>URL</tt>} objectsrepresenting all the resources with the given name. Class loader implementations should override this method to specify where to load resources from.
 * @param name The resource name
 * @return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects forthe resources
 * @throws IOException If I/O errors occur
 * @since  1.2
 */
protected Enumeration<URL> findResources(String name) throws IOException {
  return java.util.Collections.emptyEnumeration();
}"
79155,"/** 
 * Finds the class with the specified <a href=""#name"">binary name</a>. This method should be overridden by class loader implementations that follow the delegation model for loading classes, and will be invoked by the   {@link #loadClass <tt>loadClass</tt>} method after checking theparent class loader for the requested class.  The default implementation throws a <tt>ClassNotFoundException</tt>.  </p>
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The resulting <tt>Class</tt> object
 * @throws ClassNotFoundException If the class could not be found
 * @since  1.2
 */
protected Class<?> findClass(String name) throws ClassNotFoundException {
  throw new ClassNotFoundException(name);
}","/** 
 * Finds the class with the specified <a href=""#name"">binary name</a>. This method should be overridden by class loader implementations that follow the delegation model for loading classes, and will be invoked by the   {@link #loadClass <tt>loadClass</tt>} method after checking theparent class loader for the requested class.  The default implementation throws a <tt>ClassNotFoundException</tt>.
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The resulting <tt>Class</tt> object
 * @throws ClassNotFoundException If the class could not be found
 * @since  1.2
 */
protected Class<?> findClass(String name) throws ClassNotFoundException {
  throw new ClassNotFoundException(name);
}"
79156,"/** 
 * Open for reading, a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).  </p>
 * @param name The resource name
 * @return  An input stream for reading the resource, or <tt>null</tt>if the resource could not be found
 * @since  1.1
 */
public static InputStream getSystemResourceAsStream(String name){
  URL url=getSystemResource(name);
  try {
    return url != null ? url.openStream() : null;
  }
 catch (  IOException e) {
    return null;
  }
}","/** 
 * Open for reading, a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).
 * @param name The resource name
 * @return  An input stream for reading the resource, or <tt>null</tt>if the resource could not be found
 * @since  1.1
 */
public static InputStream getSystemResourceAsStream(String name){
  URL url=getSystemResource(name);
  try {
    return url != null ? url.openStream() : null;
  }
 catch (  IOException e) {
    return null;
  }
}"
79157,"/** 
 * Links the specified class.  This (misleadingly named) method may be used by a class loader to link a class.  If the class <tt>c</tt> has already been linked, then this method simply returns. Otherwise, the class is linked as described in the ""Execution"" chapter of <cite>The Java&trade; Language Specification</cite>. </p>
 * @param c The class to link
 * @throws NullPointerException If <tt>c</tt> is <tt>null</tt>.
 * @see #defineClass(String,byte[],int,int)
 */
protected final void resolveClass(Class<?> c){
  resolveClass0(c);
}","/** 
 * Links the specified class.  This (misleadingly named) method may be used by a class loader to link a class.  If the class <tt>c</tt> has already been linked, then this method simply returns. Otherwise, the class is linked as described in the ""Execution"" chapter of <cite>The Java&trade; Language Specification</cite>.
 * @param c The class to link
 * @throws NullPointerException If <tt>c</tt> is <tt>null</tt>.
 * @see #defineClass(String,byte[],int,int)
 */
protected final void resolveClass(Class<?> c){
  resolveClass0(c);
}"
79158,"/** 
 * Sets the default assertion status for this class loader.  This setting determines whether classes loaded by this class loader and initialized in the future will have assertions enabled or disabled by default. This setting may be overridden on a per-package or per-class basis by invoking   {@link #setPackageAssertionStatus(String,boolean)} or {@link #setClassAssertionStatus(String,boolean)}.  </p>
 * @param enabled <tt>true</tt> if classes loaded by this class loader will henceforth have assertions enabled by default, <tt>false</tt> if they will have assertions disabled by default.
 * @since  1.4
 */
public void setDefaultAssertionStatus(boolean enabled){
synchronized (assertionLock) {
    if (classAssertionStatus == null)     initializeJavaAssertionMaps();
    defaultAssertionStatus=enabled;
  }
}","/** 
 * Sets the default assertion status for this class loader.  This setting determines whether classes loaded by this class loader and initialized in the future will have assertions enabled or disabled by default. This setting may be overridden on a per-package or per-class basis by invoking   {@link #setPackageAssertionStatus(String,boolean)} or {@link #setClassAssertionStatus(String,boolean)}.
 * @param enabled <tt>true</tt> if classes loaded by this class loader will henceforth have assertions enabled by default, <tt>false</tt> if they will have assertions disabled by default.
 * @since  1.4
 */
public void setDefaultAssertionStatus(boolean enabled){
synchronized (assertionLock) {
    if (classAssertionStatus == null)     initializeJavaAssertionMaps();
    defaultAssertionStatus=enabled;
  }
}"
79159,"/** 
 * Defines a package by name in this <tt>ClassLoader</tt>.  This allows class loaders to define the packages for their classes. Packages must be created before the class is defined, and package names must be unique within a class loader and cannot be redefined or changed once created.  </p>
 * @param name The package name
 * @param specTitle The specification title
 * @param specVersion The specification version
 * @param specVendor The specification vendor
 * @param implTitle The implementation title
 * @param implVersion The implementation version
 * @param implVendor The implementation vendor
 * @param sealBase If not <tt>null</tt>, then this package is sealed with respect to the given code source  {@link java.net.URL <tt>URL</tt>}  object.  Otherwise, the package is not sealed.
 * @return  The newly defined <tt>Package</tt> object
 * @throws IllegalArgumentException If package name duplicates an existing package either in this class loader or one of its ancestors
 * @since  1.2
 */
protected Package definePackage(String name,String specTitle,String specVersion,String specVendor,String implTitle,String implVersion,String implVendor,URL sealBase) throws IllegalArgumentException {
synchronized (packages) {
    Package pkg=getPackage(name);
    if (pkg != null) {
      throw new IllegalArgumentException(name);
    }
    pkg=new Package(name,specTitle,specVersion,specVendor,implTitle,implVersion,implVendor,sealBase,this);
    packages.put(name,pkg);
    return pkg;
  }
}","/** 
 * Defines a package by name in this <tt>ClassLoader</tt>.  This allows class loaders to define the packages for their classes. Packages must be created before the class is defined, and package names must be unique within a class loader and cannot be redefined or changed once created.
 * @param name The package name
 * @param specTitle The specification title
 * @param specVersion The specification version
 * @param specVendor The specification vendor
 * @param implTitle The implementation title
 * @param implVersion The implementation version
 * @param implVendor The implementation vendor
 * @param sealBase If not <tt>null</tt>, then this package is sealed with respect to the given code source  {@link java.net.URL <tt>URL</tt>}  object.  Otherwise, the package is not sealed.
 * @return  The newly defined <tt>Package</tt> object
 * @throws IllegalArgumentException If package name duplicates an existing package either in this class loader or one of its ancestors
 * @since  1.2
 */
protected Package definePackage(String name,String specTitle,String specVersion,String specVendor,String implTitle,String implVersion,String implVendor,URL sealBase) throws IllegalArgumentException {
synchronized (packages) {
    Package pkg=getPackage(name);
    if (pkg != null) {
      throw new IllegalArgumentException(name);
    }
    pkg=new Package(name,specTitle,specVersion,specVendor,implTitle,implVersion,implVendor,sealBase,this);
    packages.put(name,pkg);
    return pkg;
  }
}"
79160,"/** 
 * Converts a   {@link java.nio.ByteBuffer <tt>ByteBuffer</tt>}into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>.  If the domain is <tt>null</tt>, then a default domain will be assigned to the class as specified in the documentation for   {@link #defineClass(String,byte[],int,int)}.  Before the class can be used it must be resolved. <p>The rules about the first class defined in a package determining the set of certificates for the package, and the restrictions on class names are identical to those specified in the documentation for   {@link #defineClass(String,byte[],int,int,ProtectionDomain)}. <p> An invocation of this method of the form <i>cl</i><tt>.defineClass(</tt><i>name</i><tt>,</tt> <i>bBuffer</i><tt>,</tt> <i>pd</i><tt>)</tt> yields exactly the same result as the statements <blockquote><tt> ...<br> byte[] temp = new byte[</tt><i>bBuffer</i><tt>.  {@link java.nio.ByteBuffer#remaining remaining}()];<br> </tt><i>bBuffer</i><tt>.  {@link java.nio.ByteBuffer#get(byte[]) get}(temp);<br> return   {@link #defineClass(String,byte[],int,int,ProtectionDomain) </tt><i>cl</i><tt>.defineClass}(</tt><i>name</i><tt>, temp, 0, temp.length, </tt><i>pd</i><tt>);<br> </tt></blockquote>
 * @param name The expected <a href=""#name"">binary name</a>. of the class, or <tt>null</tt> if not known
 * @param b The bytes that make up the class data. The bytes from positions <tt>b.position()</tt> through <tt>b.position() + b.limit() -1 </tt> should have the format of a valid class file as defined by <cite>The Java&trade; Virtual Machine Specification</cite>.
 * @param protectionDomain The ProtectionDomain of the class, or <tt>null</tt>.
 * @return  The <tt>Class</tt> object created from the data,and optional <tt>ProtectionDomain</tt>.
 * @throws ClassFormatError If the data did not contain a valid class.
 * @throws NoClassDefFoundError If <tt>name</tt> is not equal to the <a href=""#name"">binary name</a> of the class specified by <tt>b</tt>
 * @throws SecurityException If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class, or if <tt>name</tt> begins with ""<tt>java.</tt>"".
 * @see #defineClass(String,byte[],int,int,ProtectionDomain)
 * @since  1.5
 */
protected final Class<?> defineClass(String name,java.nio.ByteBuffer b,ProtectionDomain protectionDomain) throws ClassFormatError {
  int len=b.remaining();
  if (!b.isDirect()) {
    if (b.hasArray()) {
      return defineClass(name,b.array(),b.position() + b.arrayOffset(),len,protectionDomain);
    }
 else {
      byte[] tb=new byte[len];
      b.get(tb);
      return defineClass(name,tb,0,len,protectionDomain);
    }
  }
  protectionDomain=preDefineClass(name,protectionDomain);
  String source=defineClassSourceLocation(protectionDomain);
  Class<?> c=defineClass2(name,b,b.position(),len,protectionDomain,source);
  postDefineClass(c,protectionDomain);
  return c;
}","/** 
 * Converts a   {@link java.nio.ByteBuffer <tt>ByteBuffer</tt>}into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>.  If the domain is <tt>null</tt>, then a default domain will be assigned to the class as specified in the documentation for   {@link #defineClass(String,byte[],int,int)}.  Before the class can be used it must be resolved. <p>The rules about the first class defined in a package determining the set of certificates for the package, and the restrictions on class names are identical to those specified in the documentation for   {@link #defineClass(String,byte[],int,int,ProtectionDomain)}. <p> An invocation of this method of the form <i>cl</i><tt>.defineClass(</tt><i>name</i><tt>,</tt> <i>bBuffer</i><tt>,</tt> <i>pd</i><tt>)</tt> yields exactly the same result as the statements <p> <tt> ...<br> byte[] temp = new byte[bBuffer.  {@link java.nio.ByteBuffer#remaining remaining}()];<br> bBuffer.  {@link java.nio.ByteBuffer#get(byte[]) get}(temp);<br> return   {@link #defineClass(String,byte[],int,int,ProtectionDomain) cl.defineClass}(name, temp, 0, temp.length, pd);<br> </tt></p>
 * @param name The expected <a href=""#name"">binary name</a>. of the class, or <tt>null</tt> if not known
 * @param b The bytes that make up the class data. The bytes from positions <tt>b.position()</tt> through <tt>b.position() + b.limit() -1 </tt> should have the format of a valid class file as defined by <cite>The Java&trade; Virtual Machine Specification</cite>.
 * @param protectionDomain The ProtectionDomain of the class, or <tt>null</tt>.
 * @return  The <tt>Class</tt> object created from the data,and optional <tt>ProtectionDomain</tt>.
 * @throws ClassFormatError If the data did not contain a valid class.
 * @throws NoClassDefFoundError If <tt>name</tt> is not equal to the <a href=""#name"">binary name</a> of the class specified by <tt>b</tt>
 * @throws SecurityException If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class, or if <tt>name</tt> begins with ""<tt>java.</tt>"".
 * @see #defineClass(String,byte[],int,int,ProtectionDomain)
 * @since  1.5
 */
protected final Class<?> defineClass(String name,java.nio.ByteBuffer b,ProtectionDomain protectionDomain) throws ClassFormatError {
  int len=b.remaining();
  if (!b.isDirect()) {
    if (b.hasArray()) {
      return defineClass(name,b.array(),b.position() + b.arrayOffset(),len,protectionDomain);
    }
 else {
      byte[] tb=new byte[len];
      b.get(tb);
      return defineClass(name,tb,0,len,protectionDomain);
    }
  }
  protectionDomain=preDefineClass(name,protectionDomain);
  String source=defineClassSourceLocation(protectionDomain);
  Class<?> c=defineClass2(name,b,b.position(),len,protectionDomain,source);
  postDefineClass(c,protectionDomain);
  return c;
}"
79161,"/** 
 * Returns the class with the given <a href=""#name"">binary name</a> if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that <a href=""#name"">binary name</a>.  Otherwise <tt>null</tt> is returned.  </p>
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The <tt>Class</tt> object, or <tt>null</tt> if the class hasnot been loaded
 * @since  1.1
 */
protected final Class<?> findLoadedClass(String name){
  if (!checkName(name))   return null;
  return findLoadedClass0(name);
}","/** 
 * Returns the class with the given <a href=""#name"">binary name</a> if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that <a href=""#name"">binary name</a>.  Otherwise <tt>null</tt> is returned.
 * @param name The <a href=""#name"">binary name</a> of the class
 * @return  The <tt>Class</tt> object, or <tt>null</tt> if the class hasnot been loaded
 * @since  1.1
 */
protected final Class<?> findLoadedClass(String name){
  if (!checkName(name))   return null;
  return findLoadedClass0(name);
}"
79162,"/** 
 * Find a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).  </p>
 * @param name The resource name
 * @return  A {@link java.net.URL <tt>URL</tt>} object for reading theresource, or <tt>null</tt> if the resource could not be found
 * @since  1.1
 */
public static URL getSystemResource(String name){
  ClassLoader system=getSystemClassLoader();
  if (system == null) {
    return getBootstrapResource(name);
  }
  return system.getResource(name);
}","/** 
 * Find a resource of the specified name from the search path used to load classes.  This method locates the resource through the system class loader (see   {@link #getSystemClassLoader()}).
 * @param name The resource name
 * @return  A {@link java.net.URL <tt>URL</tt>} object for reading theresource, or <tt>null</tt> if the resource could not be found
 * @since  1.1
 */
public static URL getSystemResource(String name){
  ClassLoader system=getSystemClassLoader();
  if (system == null) {
    return getBootstrapResource(name);
  }
  return system.getResource(name);
}"
79163,"/** 
 * Sets the signers of a class.  This should be invoked after defining a class.  </p>
 * @param c The <tt>Class</tt> object
 * @param signers The signers for the class
 * @since  1.1
 */
protected final void setSigners(Class<?> c,Object[] signers){
  c.setSigners(signers);
}","/** 
 * Sets the signers of a class.  This should be invoked after defining a class.
 * @param c The <tt>Class</tt> object
 * @param signers The signers for the class
 * @since  1.1
 */
protected final void setSigners(Class<?> c,Object[] signers){
  c.setSigners(signers);
}"
79164,"/** 
 * Returns all of the <tt>Packages</tt> defined by this class loader and its ancestors.  </p>
 * @return  The array of <tt>Package</tt> objects defined by this<tt>ClassLoader</tt>
 * @since  1.2
 */
protected Package[] getPackages(){
  Map<String,Package> map;
synchronized (packages) {
    map=new HashMap<>(packages);
  }
  Package[] pkgs;
  if (parent != null) {
    pkgs=parent.getPackages();
  }
 else {
    pkgs=Package.getSystemPackages();
  }
  if (pkgs != null) {
    for (int i=0; i < pkgs.length; i++) {
      String pkgName=pkgs[i].getName();
      if (map.get(pkgName) == null) {
        map.put(pkgName,pkgs[i]);
      }
    }
  }
  return map.values().toArray(new Package[map.size()]);
}","/** 
 * Returns all of the <tt>Packages</tt> defined by this class loader and its ancestors.
 * @return  The array of <tt>Package</tt> objects defined by this<tt>ClassLoader</tt>
 * @since  1.2
 */
protected Package[] getPackages(){
  Map<String,Package> map;
synchronized (packages) {
    map=new HashMap<>(packages);
  }
  Package[] pkgs;
  if (parent != null) {
    pkgs=parent.getPackages();
  }
 else {
    pkgs=Package.getSystemPackages();
  }
  if (pkgs != null) {
    for (int i=0; i < pkgs.length; i++) {
      String pkgName=pkgs[i].getName();
      if (map.get(pkgName) == null) {
        map.put(pkgName,pkgs[i]);
      }
    }
  }
  return map.values().toArray(new Package[map.size()]);
}"
79165,"/** 
 * Returns the lock object for class loading operations. For backward compatibility, the default implementation of this method behaves as follows. If this ClassLoader object is registered as parallel capable, the method returns a dedicated object associated with the specified class name. Otherwise, the method returns this ClassLoader object. </p>
 * @param className The name of the to-be-loaded class
 * @return the lock for class loading operations
 * @throws NullPointerException If registered as parallel capable and <tt>className</tt> is null
 * @see #loadClass(String,boolean)
 * @since  1.7
 */
protected Object getClassLoadingLock(String className){
  Object lock=this;
  if (parallelLockMap != null) {
    Object newLock=new Object();
    lock=parallelLockMap.putIfAbsent(className,newLock);
    if (lock == null) {
      lock=newLock;
    }
  }
  return lock;
}","/** 
 * Returns the lock object for class loading operations. For backward compatibility, the default implementation of this method behaves as follows. If this ClassLoader object is registered as parallel capable, the method returns a dedicated object associated with the specified class name. Otherwise, the method returns this ClassLoader object.
 * @param className The name of the to-be-loaded class
 * @return the lock for class loading operations
 * @throws NullPointerException If registered as parallel capable and <tt>className</tt> is null
 * @see #loadClass(String,boolean)
 * @since  1.7
 */
protected Object getClassLoadingLock(String className){
  Object lock=this;
  if (parallelLockMap != null) {
    Object newLock=new Object();
    lock=parallelLockMap.putIfAbsent(className,newLock);
    if (lock == null) {
      lock=newLock;
    }
  }
  return lock;
}"
79166,"/** 
 * Returns the absolute path name of a native library.  The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns <tt>null</tt>, the VM searches the library along the path specified as the ""<tt>java.library.path</tt>"" property.  </p>
 * @param libname The library name
 * @return  The absolute path of the native library
 * @see System#loadLibrary(String)
 * @see System#mapLibraryName(String)
 * @since  1.2
 */
protected String findLibrary(String libname){
  return null;
}","/** 
 * Returns the absolute path name of a native library.  The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns <tt>null</tt>, the VM searches the library along the path specified as the ""<tt>java.library.path</tt>"" property.
 * @param libname The library name
 * @return  The absolute path of the native library
 * @see System#loadLibrary(String)
 * @see System#mapLibraryName(String)
 * @since  1.2
 */
protected String findLibrary(String libname){
  return null;
}"
79167,"/** 
 * Returns a hexadecimal string representation of the  {@code double} argument. All characters mentioned beloware ASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code double} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code double} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-1022""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption><h3>Examples</h3></caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Double.MAX_VALUE}</td> <td>  {@code 0x1.fffffffffffffp1023}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-1022}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffffffffffp-1022}</td> <tr><td>  {@code Double.MIN_VALUE}</td> <td>  {@code 0x0.0000000000001p-1022}</td> </table>
 * @param d   the {@code double} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(double d){
  if (!isFinite(d))   return Double.toString(d);
 else {
    StringBuilder answer=new StringBuilder(24);
    if (Math.copySign(1.0,d) == -1.0)     answer.append(""String_Node_Str"");
    answer.append(""String_Node_Str"");
    d=Math.abs(d);
    if (d == 0.0) {
      answer.append(""String_Node_Str"");
    }
 else {
      boolean subnormal=(d < DoubleConsts.MIN_NORMAL);
      long signifBits=(Double.doubleToLongBits(d) & DoubleConsts.SIGNIF_BIT_MASK) | 0x1000000000000000L;
      answer.append(subnormal ? ""String_Node_Str"" : ""String_Node_Str"");
      String signif=Long.toHexString(signifBits).substring(3,16);
      answer.append(signif.equals(""String_Node_Str"") ? ""String_Node_Str"" : signif.replaceFirst(""String_Node_Str"",""String_Node_Str""));
      answer.append('p');
      answer.append(subnormal ? DoubleConsts.MIN_EXPONENT : Math.getExponent(d));
    }
    return answer.toString();
  }
}","/** 
 * Returns a hexadecimal string representation of the  {@code double} argument. All characters mentioned beloware ASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code double} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code double} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-1022""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption>Examples</caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Double.MAX_VALUE}</td> <td>  {@code 0x1.fffffffffffffp1023}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-1022}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffffffffffp-1022}</td> <tr><td>  {@code Double.MIN_VALUE}</td> <td>  {@code 0x0.0000000000001p-1022}</td> </table>
 * @param d   the {@code double} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(double d){
  if (!isFinite(d))   return Double.toString(d);
 else {
    StringBuilder answer=new StringBuilder(24);
    if (Math.copySign(1.0,d) == -1.0)     answer.append(""String_Node_Str"");
    answer.append(""String_Node_Str"");
    d=Math.abs(d);
    if (d == 0.0) {
      answer.append(""String_Node_Str"");
    }
 else {
      boolean subnormal=(d < DoubleConsts.MIN_NORMAL);
      long signifBits=(Double.doubleToLongBits(d) & DoubleConsts.SIGNIF_BIT_MASK) | 0x1000000000000000L;
      answer.append(subnormal ? ""String_Node_Str"" : ""String_Node_Str"");
      String signif=Long.toHexString(signifBits).substring(3,16);
      answer.append(signif.equals(""String_Node_Str"") ? ""String_Node_Str"" : signif.replaceFirst(""String_Node_Str"",""String_Node_Str""));
      answer.append('p');
      answer.append(subnormal ? DoubleConsts.MIN_EXPONENT : Math.getExponent(d));
    }
    return answer.toString();
  }
}"
79168,"/** 
 * Returns a hexadecimal string representation of the  {@code float} argument. All characters mentioned below areASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code float} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code float} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-126""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption><h3>Examples</h3></caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Float.MAX_VALUE}</td> <td>  {@code 0x1.fffffep127}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-126}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffep-126}</td> <tr><td>  {@code Float.MIN_VALUE}</td> <td>  {@code 0x0.000002p-126}</td> </table>
 * @param f   the {@code float} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(float f){
  if (Math.abs(f) < FloatConsts.MIN_NORMAL && f != 0.0f) {
    String s=Double.toHexString(Math.scalb((double)f,DoubleConsts.MIN_EXPONENT - FloatConsts.MIN_EXPONENT));
    return s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   return Double.toHexString(f);
}","/** 
 * Returns a hexadecimal string representation of the  {@code float} argument. All characters mentioned below areASCII characters. <ul> <li>If the argument is NaN, the result is the string "" {@code NaN}"". <li>Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '  {@code -}' (  {@code '\u005Cu002D'}); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>: <ul> <li>If <i>m</i> is infinity, it is represented by the string  {@code ""Infinity""}; thus, positive infinity produces the result   {@code ""Infinity""} and negative infinity producesthe result  {@code ""-Infinity""}. <li>If <i>m</i> is zero, it is represented by the string  {@code ""0x0.0p0""}; thus, negative zero produces the result  {@code ""-0x0.0p0""} and positive zero produces the result{@code ""0x0.0p0""}. <li>If <i>m</i> is a   {@code float} value with anormalized representation, substrings are used to represent the significand and exponent fields.  The significand is represented by the characters  {@code ""0x1.""}followed by a lowercase hexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by   {@code ""p""} followedby a decimal string of the unbiased exponent as if produced by a call to  {@link Integer#toString(int) Integer.toString} on theexponent value. <li>If <i>m</i> is a  {@code float} value with a subnormalrepresentation, the significand is represented by the characters  {@code ""0x0.""} followed by ahexadecimal representation of the rest of the significand as a fraction.  Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by {@code ""p-126""}.  Note that there must be at least one nonzero digit in a subnormal significand. </ul> </ul> <table border> <caption>Examples</caption> <tr><th>Floating-point Value</th><th>Hexadecimal String</th> <tr><td>  {@code 1.0}</td> <td>  {@code 0x1.0p0}</td> <tr><td>  {@code -1.0}</td>        <td>  {@code -0x1.0p0}</td> <tr><td>  {@code 2.0}</td> <td>  {@code 0x1.0p1}</td> <tr><td>  {@code 3.0}</td> <td>  {@code 0x1.8p1}</td> <tr><td>  {@code 0.5}</td> <td>  {@code 0x1.0p-1}</td> <tr><td>  {@code 0.25}</td>        <td>  {@code 0x1.0p-2}</td> <tr><td>  {@code Float.MAX_VALUE}</td> <td>  {@code 0x1.fffffep127}</td> <tr><td>  {@code Minimum Normal Value}</td> <td>  {@code 0x1.0p-126}</td> <tr><td>  {@code Maximum Subnormal Value}</td> <td>  {@code 0x0.fffffep-126}</td> <tr><td>  {@code Float.MIN_VALUE}</td> <td>  {@code 0x0.000002p-126}</td> </table>
 * @param f   the {@code float} to be converted.
 * @return a hex string representation of the argument.
 * @since 1.5
 * @author Joseph D. Darcy
 */
public static String toHexString(float f){
  if (Math.abs(f) < FloatConsts.MIN_NORMAL && f != 0.0f) {
    String s=Double.toHexString(Math.scalb((double)f,DoubleConsts.MIN_EXPONENT - FloatConsts.MIN_EXPONENT));
    return s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   return Double.toHexString(f);
}"
79169,"/** 
 * Returns a redirect to append to the specified file. Each write operation first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. <p>It will always be true that <pre>   {@code Redirect.appendTo(file).file() == file && Redirect.appendTo(file).type() == Redirect.Type.APPEND}</pre>
 * @throws NullPointerException if the specified file is null
 * @return a redirect to append to the specified file
 */
public static Redirect appendTo(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.APPEND;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return true;
    }
  }
;
}","/** 
 * Returns a redirect to append to the specified file. Each write operation first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. <p>It will always be true that <pre>   {@code Redirect.appendTo(file).file() == file && Redirect.appendTo(file).type() == Redirect.Type.APPEND}</pre>
 * @param file The {@code File} for the {@code Redirect}.
 * @throws NullPointerException if the specified file is null
 * @return a redirect to append to the specified file
 */
public static Redirect appendTo(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.APPEND;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return true;
    }
  }
;
}"
79170,"/** 
 * Returns a redirect to read from the specified file. <p>It will always be true that <pre>   {@code Redirect.from(file).file() == file && Redirect.from(file).type() == Redirect.Type.READ}</pre>
 * @throws NullPointerException if the specified file is null
 * @return a redirect to read from the specified file
 */
public static Redirect from(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.READ;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
  }
;
}","/** 
 * Returns a redirect to read from the specified file. <p>It will always be true that <pre>   {@code Redirect.from(file).file() == file && Redirect.from(file).type() == Redirect.Type.READ}</pre>
 * @param file The {@code File} for the {@code Redirect}.
 * @throws NullPointerException if the specified file is null
 * @return a redirect to read from the specified file
 */
public static Redirect from(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.READ;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
  }
;
}"
79171,"/** 
 * Returns a redirect to write to the specified file. If the specified file exists when the subprocess is started, its previous contents will be discarded. <p>It will always be true that <pre>   {@code Redirect.to(file).file() == file && Redirect.to(file).type() == Redirect.Type.WRITE}</pre>
 * @throws NullPointerException if the specified file is null
 * @return a redirect to write to the specified file
 */
public static Redirect to(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.WRITE;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return false;
    }
  }
;
}","/** 
 * Returns a redirect to write to the specified file. If the specified file exists when the subprocess is started, its previous contents will be discarded. <p>It will always be true that <pre>   {@code Redirect.to(file).file() == file && Redirect.to(file).type() == Redirect.Type.WRITE}</pre>
 * @param file The {@code File} for the {@code Redirect}.
 * @throws NullPointerException if the specified file is null
 * @return a redirect to write to the specified file
 */
public static Redirect to(final File file){
  if (file == null)   throw new NullPointerException();
  return new Redirect(){
    public Type type(){
      return Type.WRITE;
    }
    public File file(){
      return file;
    }
    public String toString(){
      return ""String_Node_Str"" + file + ""String_Node_Str"";
    }
    boolean append(){
      return false;
    }
  }
;
}"
79172,"/** 
 * Returns the maximum amount of memory that the Java virtual machine will attempt to use.  If there is no inherent limit then the value   {@link java.lang.Long#MAX_VALUE} will be returned. </p>
 * @return  the maximum amount of memory that the virtual machine willattempt to use, measured in bytes
 * @since 1.4
 */
public native long maxMemory();","/** 
 * Returns the maximum amount of memory that the Java virtual machine will attempt to use.  If there is no inherent limit then the value   {@link java.lang.Long#MAX_VALUE} will be returned.
 * @return  the maximum amount of memory that the virtual machine willattempt to use, measured in bytes
 * @since 1.4
 */
public native long maxMemory();"
79173,"/** 
 * Interrupts this thread. <p> Unless the current thread is interrupting itself, which is always permitted, the   {@link #checkAccess() checkAccess} methodof this thread is invoked, which may cause a  {@link SecurityException} to be thrown.<p> If this thread is blocked in an invocation of the  {@link Object#wait() wait()},   {@link Object#wait(long) wait(long)}, or   {@link Object#wait(long,int) wait(long, int)} methods of the {@link Object}class, or of the   {@link #join()},   {@link #join(long)},   {@link #join(long,int)},   {@link #sleep(long)}, or   {@link #sleep(long,int)}, methods of this class, then its interrupt status will be cleared and it will receive an   {@link InterruptedException}. <p> If this thread is blocked in an I/O operation upon an   {@link java.nio.channels.InterruptibleChannel </code>interruptiblechannel<code>} then the channel will be closed, the thread's interruptstatus will be set, and the thread will receive a  {@link java.nio.channels.ClosedByInterruptException}. <p> If this thread is blocked in a   {@link java.nio.channels.Selector}then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's   {@link java.nio.channels.Selector#wakeup wakeup} method were invoked.<p> If none of the previous conditions hold then this thread's interrupt status will be set. </p> <p> Interrupting a thread that is not alive need not have any effect.
 * @throws SecurityException if the current thread cannot modify this thread
 * @revised 6.0
 * @spec JSR-51
 */
public void interrupt(){
  if (this != Thread.currentThread())   checkAccess();
synchronized (blockerLock) {
    Interruptible b=blocker;
    if (b != null) {
      interrupt0();
      b.interrupt(this);
      return;
    }
  }
  interrupt0();
}","/** 
 * Interrupts this thread. <p> Unless the current thread is interrupting itself, which is always permitted, the   {@link #checkAccess() checkAccess} methodof this thread is invoked, which may cause a  {@link SecurityException} to be thrown.<p> If this thread is blocked in an invocation of the  {@link Object#wait() wait()},   {@link Object#wait(long) wait(long)}, or   {@link Object#wait(long,int) wait(long, int)} methods of the {@link Object}class, or of the   {@link #join()},   {@link #join(long)},   {@link #join(long,int)},   {@link #sleep(long)}, or   {@link #sleep(long,int)}, methods of this class, then its interrupt status will be cleared and it will receive an   {@link InterruptedException}. <p> If this thread is blocked in an I/O operation upon an   {@link java.nio.channels.InterruptibleChannel InterruptibleChannel}then the channel will be closed, the thread's interrupt status will be set, and the thread will receive a   {@link java.nio.channels.ClosedByInterruptException}. <p> If this thread is blocked in a   {@link java.nio.channels.Selector}then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's   {@link java.nio.channels.Selector#wakeup wakeup} method were invoked.<p> If none of the previous conditions hold then this thread's interrupt status will be set. </p> <p> Interrupting a thread that is not alive need not have any effect.
 * @throws SecurityException if the current thread cannot modify this thread
 * @revised 6.0
 * @spec JSR-51
 */
public void interrupt(){
  if (this != Thread.currentThread())   checkAccess();
synchronized (blockerLock) {
    Interruptible b=blocker;
    if (b != null) {
      interrupt0();
      b.interrupt(this);
      return;
    }
  }
  interrupt0();
}"
79174,"/** 
 * Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is <tt>null</tt>, there is no default.
 * @since 1.5
 * @see #setDefaultUncaughtExceptionHandler
 */
public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler(){
  return defaultUncaughtExceptionHandler;
}","/** 
 * Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is <tt>null</tt>, there is no default.
 * @since 1.5
 * @see #setDefaultUncaughtExceptionHandler
 * @return the default uncaught exception handler for all threads
 */
public static UncaughtExceptionHandler getDefaultUncaughtExceptionHandler(){
  return defaultUncaughtExceptionHandler;
}"
79175,"/** 
 * Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread's <tt>ThreadGroup</tt> object is returned, unless this thread has terminated, in which case <tt>null</tt> is returned.
 * @since 1.5
 */
public UncaughtExceptionHandler getUncaughtExceptionHandler(){
  return uncaughtExceptionHandler != null ? uncaughtExceptionHandler : group;
}","/** 
 * Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread's <tt>ThreadGroup</tt> object is returned, unless this thread has terminated, in which case <tt>null</tt> is returned.
 * @since 1.5
 * @return the uncaught exception handler for this thread
 */
public UncaughtExceptionHandler getUncaughtExceptionHandler(){
  return uncaughtExceptionHandler != null ? uncaughtExceptionHandler : group;
}"
79176,"/** 
 * Creates a thread local variable. The initial value of the variable is determined by invoking the   {@code get} method on the {@code Supplier}.
 * @param supplier the supplier to be used to determine the initial value
 * @return a new thread local variable
 * @throws NullPointerException if the specified supplier is null
 * @since 1.8
 */
public static <T>ThreadLocal<T> withInitial(Supplier<? extends T> supplier){
  return new SuppliedThreadLocal<>(supplier);
}","/** 
 * Creates a thread local variable. The initial value of the variable is determined by invoking the   {@code get} method on the {@code Supplier}.
 * @param < S > the type of the thread local's value
 * @param supplier the supplier to be used to determine the initial value
 * @return a new thread local variable
 * @throws NullPointerException if the specified supplier is null
 * @since 1.8
 */
public static <S>ThreadLocal<S> withInitial(Supplier<? extends S> supplier){
  return new SuppliedThreadLocal<>(supplier);
}"
79177,"/** 
 * This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name. When used with the  {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer}, it enables native methods to be instrumented. <p/> Since native methods cannot be directly instrumented (they have no bytecodes), they must be wrapped with a non-native method which can be instrumented. For example, if we had: <pre> native boolean foo(int x);</pre> <p/> We could transform the class file (with the ClassFileTransformer during the initial definition of the class) so that this becomes: <pre> boolean foo(int x) { <i>... record entry to foo ...</i> return wrapped_foo(x); } native boolean wrapped_foo(int x);</pre> <p/> Where <code>foo</code> becomes a wrapper for the actual native method with the appended prefix ""wrapped_"".  Note that ""wrapped_"" would be a poor choice of prefix since it might conceivably form the name of an existing method thus something like ""$$$MyAgentWrapped$$$_"" would be better but would make these examples less readable. <p/> The wrapper will allow data to be collected on the native method call, but now the problem becomes linking up the wrapped method with the native implementation. That is, the method <code>wrapped_foo</code> needs to be resolved to the native implementation of <code>foo</code>, which might be: <pre> Java_somePackage_someClass_foo(JNIEnv* env, jint x)</pre> <p/> This function allows the prefix to be specified and the proper resolution to occur. Specifically, when the standard resolution fails, the resolution is retried taking the prefix into consideration. There are two ways that resolution occurs, explicit resolution with the JNI function <code>RegisterNatives</code> and the normal automatic resolution.  For <code>RegisterNatives</code>, the JVM will attempt this association: <pre>  {@code method(foo) -> nativeImplementation(foo)}</pre> <p/> When this fails, the resolution will be retried with the specified prefix prepended to the method name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p/> For automatic resolution, the JVM will attempt: <pre>  {@code method(wrapped_foo) -> nativeImplementation(wrapped_foo)}</pre> <p/> When this fails, the resolution will be retried with the specified prefix deleted from the implementation name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p/> Note that since the prefix is only used when standard resolution fails, native methods can be wrapped selectively. <p/> Since each <code>ClassFileTransformer</code> can do its own transformation of the bytecodes, more than one layer of wrappers may be applied. Thus each transformer needs its own prefix.  Since transformations are applied in order, the prefixes, if applied, will be applied in the same order (see   {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}). Thus if three transformers applied wrappers, <code>foo</code> might become <code>$trans3_$trans2_$trans1_foo</code>.  But if, say, the second transformer did not apply a wrapper to <code>foo</code> it would be just <code>$trans3_$trans1_foo</code>.  To be able to efficiently determine the sequence of prefixes, an intermediate prefix is only applied if its non-native wrapper exists.  Thus, in the last example, even though <code>$trans1_foo</code> is not a native method, the <code>$trans1_</code> prefix is applied since <code>$trans1_foo</code> exists.
 * @param transformer The ClassFileTransformer which wraps using this prefix.
 * @param prefix The prefix to apply to wrapped native methods when retrying a failed native method resolution. If prefix is either <code>null</code> or the empty string, then failed native method resolutions are not retried for this transformer.
 * @throws java.lang.NullPointerException if passed a <code>null</code> transformer.
 * @throws java.lang.UnsupportedOperationException if the current configuration ofthe JVM does not allow setting a native method prefix ( {@link #isNativeMethodPrefixSupported} is false).
 * @throws java.lang.IllegalArgumentException if the transformer is not registered(see  {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}).
 * @since 1.6
 */
void setNativeMethodPrefix(ClassFileTransformer transformer,String prefix);","/** 
 * This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name. When used with the  {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer}, it enables native methods to be instrumented. <p> Since native methods cannot be directly instrumented (they have no bytecodes), they must be wrapped with a non-native method which can be instrumented. For example, if we had: <pre> native boolean foo(int x);</pre> <p> We could transform the class file (with the ClassFileTransformer during the initial definition of the class) so that this becomes: <pre> boolean foo(int x) { <i>... record entry to foo ...</i> return wrapped_foo(x); } native boolean wrapped_foo(int x);</pre> <p> Where <code>foo</code> becomes a wrapper for the actual native method with the appended prefix ""wrapped_"".  Note that ""wrapped_"" would be a poor choice of prefix since it might conceivably form the name of an existing method thus something like ""$$$MyAgentWrapped$$$_"" would be better but would make these examples less readable. <p> The wrapper will allow data to be collected on the native method call, but now the problem becomes linking up the wrapped method with the native implementation. That is, the method <code>wrapped_foo</code> needs to be resolved to the native implementation of <code>foo</code>, which might be: <pre> Java_somePackage_someClass_foo(JNIEnv* env, jint x)</pre> <p> This function allows the prefix to be specified and the proper resolution to occur. Specifically, when the standard resolution fails, the resolution is retried taking the prefix into consideration. There are two ways that resolution occurs, explicit resolution with the JNI function <code>RegisterNatives</code> and the normal automatic resolution.  For <code>RegisterNatives</code>, the JVM will attempt this association: <pre>  {@code method(foo) -> nativeImplementation(foo)}</pre> <p> When this fails, the resolution will be retried with the specified prefix prepended to the method name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p> For automatic resolution, the JVM will attempt: <pre>  {@code method(wrapped_foo) -> nativeImplementation(wrapped_foo)}</pre> <p> When this fails, the resolution will be retried with the specified prefix deleted from the implementation name, yielding the correct resolution: <pre>  {@code method(wrapped_foo) -> nativeImplementation(foo)}</pre> <p> Note that since the prefix is only used when standard resolution fails, native methods can be wrapped selectively. <p> Since each <code>ClassFileTransformer</code> can do its own transformation of the bytecodes, more than one layer of wrappers may be applied. Thus each transformer needs its own prefix.  Since transformations are applied in order, the prefixes, if applied, will be applied in the same order (see   {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}). Thus if three transformers applied wrappers, <code>foo</code> might become <code>$trans3_$trans2_$trans1_foo</code>.  But if, say, the second transformer did not apply a wrapper to <code>foo</code> it would be just <code>$trans3_$trans1_foo</code>.  To be able to efficiently determine the sequence of prefixes, an intermediate prefix is only applied if its non-native wrapper exists.  Thus, in the last example, even though <code>$trans1_foo</code> is not a native method, the <code>$trans1_</code> prefix is applied since <code>$trans1_foo</code> exists.
 * @param transformer The ClassFileTransformer which wraps using this prefix.
 * @param prefix The prefix to apply to wrapped native methods when retrying a failed native method resolution. If prefix is either <code>null</code> or the empty string, then failed native method resolutions are not retried for this transformer.
 * @throws java.lang.NullPointerException if passed a <code>null</code> transformer.
 * @throws java.lang.UnsupportedOperationException if the current configuration ofthe JVM does not allow setting a native method prefix ( {@link #isNativeMethodPrefixSupported} is false).
 * @throws java.lang.IllegalArgumentException if the transformer is not registered(see  {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}).
 * @since 1.6
 */
void setNativeMethodPrefix(ClassFileTransformer transformer,String prefix);"
79178,"/** 
 * Determines whether a class is modifiable by  {@linkplain #retransformClasses retransformation}or   {@linkplain #redefineClasses redefinition}. If a class is modifiable then this method returns <code>true</code>. If a class is not modifiable then this method returns <code>false</code>. <P> For a class to be retransformed,   {@link #isRetransformClassesSupported} must also be true.But the value of <code>isRetransformClassesSupported()</code> does not influence the value returned by this function. For a class to be redefined,  {@link #isRedefineClassesSupported} must also be true.But the value of <code>isRedefineClassesSupported()</code> does not influence the value returned by this function. <P> Primitive classes (for example, <code>java.lang.Integer.TYPE</code>) and array classes are never modifiable.
 * @throws java.lang.NullPointerException if the specified class is <code>null</code>.
 * @see #retransformClasses
 * @see #isRetransformClassesSupported
 * @see #redefineClasses
 * @see #isRedefineClassesSupported
 * @since 1.6
 */
boolean isModifiableClass(Class<?> theClass);","/** 
 * Determines whether a class is modifiable by  {@linkplain #retransformClasses retransformation}or   {@linkplain #redefineClasses redefinition}. If a class is modifiable then this method returns <code>true</code>. If a class is not modifiable then this method returns <code>false</code>. <P> For a class to be retransformed,   {@link #isRetransformClassesSupported} must also be true.But the value of <code>isRetransformClassesSupported()</code> does not influence the value returned by this function. For a class to be redefined,  {@link #isRedefineClassesSupported} must also be true.But the value of <code>isRedefineClassesSupported()</code> does not influence the value returned by this function. <P> Primitive classes (for example, <code>java.lang.Integer.TYPE</code>) and array classes are never modifiable.
 * @param theClass the class to check for being modifiable
 * @return whether or not the argument class is modifiable
 * @throws java.lang.NullPointerException if the specified class is <code>null</code>.
 * @see #retransformClasses
 * @see #isRetransformClassesSupported
 * @see #redefineClasses
 * @see #isRedefineClassesSupported
 * @since 1.6
 */
boolean isModifiableClass(Class<?> theClass);"
79179,"/** 
 * A query that provides access to whether a leap-second was parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null boolean, true if parsing saw a leap-second, false if not. <p> Instant parsing handles the special ""leap second"" time of '23:59:60'. Leap seconds occur at '23:59:60' in the UTC time-zone, but at other local times in different time-zones. To avoid this potential ambiguity, the handling of leap-seconds is limited to {@link DateTimeFormatterBuilder#appendInstant()}, as that method always parses the instant with the UTC zone offset. <p> If the time '23:59:60' is received, then a simple conversion is applied, replacing the second-of-minute of 60 with 59. This query can be used on the parse result to determine if the leap-second adjustment was made. The query will return one second of excess if it did adjust to remove the leap-second, and zero if not. Note that applying a leap-second smoothing mechanism, such as UTC-SLS, is the responsibility of the application, as follows: <pre> TemporalAccessor parsed = formatter.parse(str); Instant instant = parsed.query(Instant::from); if (parsed.query(DateTimeFormatter.parsedLeapSecond())) { // validate leap-second is correct and apply correct smoothing } </pre>
 */
public static final TemporalQuery<Boolean> parsedLeapSecond(){
  return PARSED_LEAP_SECOND;
}","/** 
 * A query that provides access to whether a leap-second was parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null boolean, true if parsing saw a leap-second, false if not. <p> Instant parsing handles the special ""leap second"" time of '23:59:60'. Leap seconds occur at '23:59:60' in the UTC time-zone, but at other local times in different time-zones. To avoid this potential ambiguity, the handling of leap-seconds is limited to {@link DateTimeFormatterBuilder#appendInstant()}, as that method always parses the instant with the UTC zone offset. <p> If the time '23:59:60' is received, then a simple conversion is applied, replacing the second-of-minute of 60 with 59. This query can be used on the parse result to determine if the leap-second adjustment was made. The query will return one second of excess if it did adjust to remove the leap-second, and zero if not. Note that applying a leap-second smoothing mechanism, such as UTC-SLS, is the responsibility of the application, as follows: <pre> TemporalAccessor parsed = formatter.parse(str); Instant instant = parsed.query(Instant::from); if (parsed.query(DateTimeFormatter.parsedLeapSecond())) { // validate leap-second is correct and apply correct smoothing } </pre>
 * @return a query that provides access to whether a leap-second was parsed
 */
public static final TemporalQuery<Boolean> parsedLeapSecond(){
  return PARSED_LEAP_SECOND;
}"
79180,"/** 
 * A query that provides access to the excess days that were parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null period, with a zero period returned instead of null. <p> There are two situations where this query may return a non-zero period. <p><ul> <li>If the  {@code ResolverStyle} is {@code LENIENT} and a time is parsedwithout a date, then the complete result of the parse consists of a {@code LocalTime} and an excess {@code Period} in days.<p> <li>If the  {@code ResolverStyle} is {@code SMART} and a time is parsedwithout a date where the time is 24:00:00, then the complete result of the parse consists of a  {@code LocalTime} of 00:00:00 and an excess{@code Period} of one day.</ul> <p> In both cases, if a complete  {@code ChronoLocalDateTime} or {@code Instant}is parsed, then the excess days are added to the date part. As a result, this query will return a zero period. <p> The   {@code SMART} behaviour handles the common ""end of day"" 24:00 value.Processing in  {@code LENIENT} mode also produces the same result:<pre> Text to parse        Parsed object                         Excess days ""2012-12-03T00:00""   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO ""2012-12-03T24:00""   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO ""00:00""              LocalTime.of(0, 0)                    ZERO ""24:00""              LocalTime.of(0, 0)                    Period.ofDays(1) </pre> The query can be used as follows: <pre> TemporalAccessor parsed = formatter.parse(str); LocalTime time = parsed.query(LocalTime::from); Period extraDays = parsed.query(DateTimeFormatter.parsedExcessDays()); </pre>
 */
public static final TemporalQuery<Period> parsedExcessDays(){
  return PARSED_EXCESS_DAYS;
}","/** 
 * A query that provides access to the excess days that were parsed. <p> This returns a singleton   {@linkplain TemporalQuery query} that providesaccess to additional information from the parse. The query always returns a non-null period, with a zero period returned instead of null. <p> There are two situations where this query may return a non-zero period. <p><ul> <li>If the  {@code ResolverStyle} is {@code LENIENT} and a time is parsedwithout a date, then the complete result of the parse consists of a {@code LocalTime} and an excess {@code Period} in days.<p> <li>If the  {@code ResolverStyle} is {@code SMART} and a time is parsedwithout a date where the time is 24:00:00, then the complete result of the parse consists of a  {@code LocalTime} of 00:00:00 and an excess{@code Period} of one day.</ul> <p> In both cases, if a complete  {@code ChronoLocalDateTime} or {@code Instant}is parsed, then the excess days are added to the date part. As a result, this query will return a zero period. <p> The   {@code SMART} behaviour handles the common ""end of day"" 24:00 value.Processing in  {@code LENIENT} mode also produces the same result:<pre> Text to parse        Parsed object                         Excess days ""2012-12-03T00:00""   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO ""2012-12-03T24:00""   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO ""00:00""              LocalTime.of(0, 0)                    ZERO ""24:00""              LocalTime.of(0, 0)                    Period.ofDays(1) </pre> The query can be used as follows: <pre> TemporalAccessor parsed = formatter.parse(str); LocalTime time = parsed.query(LocalTime::from); Period extraDays = parsed.query(DateTimeFormatter.parsedExcessDays()); </pre>
 * @return a query that provides access to the excess days that were parsed
 */
public static final TemporalQuery<Period> parsedExcessDays(){
  return PARSED_EXCESS_DAYS;
}"
79181,"/** 
 * Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed. The returned providers are ordered according to their <a href= ""#insertProviderAt(java.security.Provider, int)"">preference order</a>. <p>The selection criteria are represented by a map. Each map entry represents a selection criterion. A provider is selected iff it satisfies all selection criteria. The key for any entry in such a map must be in one of the following two formats: <ul> <li> <i>&lt;crypto_service>.&lt;algorithm_or_type></i> <p> The cryptographic service name must not contain any dots. <p> The value associated with the key must be an empty string. <p> A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. <li>  <i>&lt;crypto_service>.&lt;algorithm_or_type> &lt;attribute_name></i> <p> The cryptographic service name must not contain any dots. There must be one or more space charaters between the <i>&lt;algorithm_or_type></i> and the <i>&lt;attribute_name></i>. <p> The value associated with the key must be a non-empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value pair. </ul> <p> See the <a href= ""../../../technotes/guides/security/StandardNames.html""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard cryptographic service names, standard algorithm names and standard attribute names.
 * @param filter the criteria for selectingproviders. The filter is case-insensitive.
 * @return all the installed providers that satisfy the selectioncriteria, or null if no such providers have been installed.
 * @throws InvalidParameterException if the filter is not in the required format
 * @throws NullPointerException if filter is null
 * @see #getProviders(java.lang.String)
 * @since 1.3
 */
public static Provider[] getProviders(Map<String,String> filter){
  Provider[] allProviders=Security.getProviders();
  Set<String> keySet=filter.keySet();
  LinkedHashSet<Provider> candidates=new LinkedHashSet<>(5);
  if ((keySet == null) || (allProviders == null)) {
    return allProviders;
  }
  boolean firstSearch=true;
  for (Iterator<String> ite=keySet.iterator(); ite.hasNext(); ) {
    String key=ite.next();
    String value=filter.get(key);
    LinkedHashSet<Provider> newCandidates=getAllQualifyingCandidates(key,value,allProviders);
    if (firstSearch) {
      candidates=newCandidates;
      firstSearch=false;
    }
    if ((newCandidates != null) && !newCandidates.isEmpty()) {
      for (Iterator<Provider> cansIte=candidates.iterator(); cansIte.hasNext(); ) {
        Provider prov=cansIte.next();
        if (!newCandidates.contains(prov)) {
          cansIte.remove();
        }
      }
    }
 else {
      candidates=null;
      break;
    }
  }
  if ((candidates == null) || (candidates.isEmpty()))   return null;
  Object[] candidatesArray=candidates.toArray();
  Provider[] result=new Provider[candidatesArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=(Provider)candidatesArray[i];
  }
  return result;
}","/** 
 * Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed. The returned providers are ordered according to their  {@linkplain #insertProviderAt(java.security.Provider,int) preference order}. <p>The selection criteria are represented by a map. Each map entry represents a selection criterion. A provider is selected iff it satisfies all selection criteria. The key for any entry in such a map must be in one of the following two formats: <ul> <li> <i>  {@literal <crypto_service>.<algorithm_or_type>}</i> <p> The cryptographic service name must not contain any dots. <p> The value associated with the key must be an empty string. <p> A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. <li>  <i>  {@literal <crypto_service>}.  {@literal <algorithm_or_type> <attribute_name>}</i> <p> The cryptographic service name must not contain any dots. There must be one or more space charaters between the <i>  {@literal <algorithm_or_type>}</i> and the <i>  {@literal <attribute_name>}</i>. <p> The value associated with the key must be a non-empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value pair. </ul> <p> See the <a href= ""../../../technotes/guides/security/StandardNames.html""> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for information about standard cryptographic service names, standard algorithm names and standard attribute names.
 * @param filter the criteria for selectingproviders. The filter is case-insensitive.
 * @return all the installed providers that satisfy the selectioncriteria, or null if no such providers have been installed.
 * @throws InvalidParameterException if the filter is not in the required format
 * @throws NullPointerException if filter is null
 * @see #getProviders(java.lang.String)
 * @since 1.3
 */
public static Provider[] getProviders(Map<String,String> filter){
  Provider[] allProviders=Security.getProviders();
  Set<String> keySet=filter.keySet();
  LinkedHashSet<Provider> candidates=new LinkedHashSet<>(5);
  if ((keySet == null) || (allProviders == null)) {
    return allProviders;
  }
  boolean firstSearch=true;
  for (Iterator<String> ite=keySet.iterator(); ite.hasNext(); ) {
    String key=ite.next();
    String value=filter.get(key);
    LinkedHashSet<Provider> newCandidates=getAllQualifyingCandidates(key,value,allProviders);
    if (firstSearch) {
      candidates=newCandidates;
      firstSearch=false;
    }
    if ((newCandidates != null) && !newCandidates.isEmpty()) {
      for (Iterator<Provider> cansIte=candidates.iterator(); cansIte.hasNext(); ) {
        Provider prov=cansIte.next();
        if (!newCandidates.contains(prov)) {
          cansIte.remove();
        }
      }
    }
 else {
      candidates=null;
      break;
    }
  }
  if ((candidates == null) || (candidates.isEmpty()))   return null;
  Object[] candidatesArray=candidates.toArray();
  Provider[] result=new Provider[candidatesArray.length];
  for (int i=0; i < result.length; i++) {
    result[i]=(Provider)candidatesArray[i];
  }
  return result;
}"
79182,"/** 
 * Gets the   {@code version} (version number) value from the CRL.The ASN.1 definition for this is: <pre> version    Version OPTIONAL, -- if present, must be v2<p> Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } -- v3 does not apply to CRLs but appears for consistency -- with definition of Version for certs </pre>
 * @return the version number, i.e. 1 or 2.
 */
public abstract int getVersion();","/** 
 * Gets the   {@code version} (version number) value from the CRL.The ASN.1 definition for this is: <pre> version    Version OPTIONAL, -- if present, must be v2 Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } -- v3 does not apply to CRLs but appears for consistency -- with definition of Version for certs </pre>
 * @return the version number, i.e. 1 or 2.
 */
public abstract int getVersion();"
79183,"/** 
 * Gets the signature algorithm name for the CRL signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier<p> AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();","/** 
 * Gets the signature algorithm name for the CRL signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();"
79184,"/** 
 * Gets the   {@code version} (version number) value from thecertificate. The ASN.1 definition for this is: <pre> version  [0] EXPLICIT Version DEFAULT v1<p> Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number, i.e. 1, 2 or 3.
 */
public abstract int getVersion();","/** 
 * Gets the   {@code version} (version number) value from thecertificate. The ASN.1 definition for this is: <pre> version  [0] EXPLICIT Version DEFAULT v1 Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  } </pre>
 * @return the version number, i.e. 1, 2 or 3.
 */
public abstract int getVersion();"
79185,"/** 
 * Gets the   {@code serialNumber} value from the certificate.The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber<p> CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();","/** 
 * Gets the   {@code serialNumber} value from the certificate.The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is: <pre> serialNumber     CertificateSerialNumber CertificateSerialNumber  ::=  INTEGER </pre>
 * @return the serial number.
 */
public abstract BigInteger getSerialNumber();"
79186,"/** 
 * Gets the   {@code issuerUniqueID} value from the certificate.The issuer unique identifier is present in the certificate to handle the possibility of reuse of issuer names over time. RFC 3280 recommends that names not be reused and that conforming certificates not make use of unique identifiers. Applications conforming to that profile should be capable of parsing unique identifiers and making comparisons. <p>The ASN.1 definition for this is: <pre> issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL<p> UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the issuer unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getIssuerUniqueID();","/** 
 * Gets the   {@code issuerUniqueID} value from the certificate.The issuer unique identifier is present in the certificate to handle the possibility of reuse of issuer names over time. RFC 3280 recommends that names not be reused and that conforming certificates not make use of unique identifiers. Applications conforming to that profile should be capable of parsing unique identifiers and making comparisons. <p>The ASN.1 definition for this is: <pre> issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the issuer unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getIssuerUniqueID();"
79187,"/** 
 * <strong>Denigrated</strong>, replaced by   {@linkplain #getIssuerX500Principal()}. This method returns the   {@code issuer}as an implementation specific Principal object, which should not be relied upon by portable code. <p> Gets the   {@code issuer} (issuer distinguished name) value fromthe certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name<p> Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The  {@code Name} describes a hierarchical name composed ofattributes, such as country name, and corresponding values, such as US. The type of the  {@code AttributeValue} component is determined bythe  {@code AttributeType}; in general it will be a  {@code directoryString}. A   {@code directoryString} is usuallyone of  {@code PrintableString},  {@code TeletexString} or {@code UniversalString}.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();","/** 
 * <strong>Denigrated</strong>, replaced by   {@linkplain #getIssuerX500Principal()}. This method returns the   {@code issuer}as an implementation specific Principal object, which should not be relied upon by portable code. <p> Gets the   {@code issuer} (issuer distinguished name) value fromthe certificate. The issuer name identifies the entity that signed (and issued) the certificate. <p>The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: <pre> issuer    Name Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF RelativeDistinguishedName RelativeDistinguishedName ::= SET OF AttributeValueAssertion AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY </pre> The  {@code Name} describes a hierarchical name composed ofattributes, such as country name, and corresponding values, such as US. The type of the  {@code AttributeValue} component is determined bythe  {@code AttributeType}; in general it will be a  {@code directoryString}. A   {@code directoryString} is usuallyone of  {@code PrintableString},  {@code TeletexString} or {@code UniversalString}.
 * @return a Principal whose name is the issuer distinguished name.
 */
public abstract Principal getIssuerDN();"
79188,"/** 
 * Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the   {@code ExtKeyUsageSyntax} field of theextended key usage extension, (OID = 2.5.29.37).  It indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.  The ASN.1 definition for this is: <pre> ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId<p> KeyPurposeId ::= OBJECT IDENTIFIER<p> </pre> Key purposes may be defined by any organization with a need. Object identifiers used to identify key purposes shall be assigned in accordance with IANA or ITU-T Rec. X.660 | ISO/IEC/ITU 9834-1. <p> This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not  {@code abstract}and it provides a default implementation. Subclasses should override this method with a correct implementation.
 * @return the ExtendedKeyUsage extension of this certificate,as an unmodifiable list of object identifiers represented as Strings. Returns null if this certificate does not contain an ExtendedKeyUsage extension.
 * @throws CertificateParsingException if the extension cannot be decoded
 * @since 1.4
 */
public List<String> getExtendedKeyUsage() throws CertificateParsingException {
  return X509CertImpl.getExtendedKeyUsage(this);
}","/** 
 * Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the   {@code ExtKeyUsageSyntax} field of theextended key usage extension, (OID = 2.5.29.37).  It indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.  The ASN.1 definition for this is: <pre> ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId KeyPurposeId ::= OBJECT IDENTIFIER </pre> Key purposes may be defined by any organization with a need. Object identifiers used to identify key purposes shall be assigned in accordance with IANA or ITU-T Rec. X.660 | ISO/IEC/ITU 9834-1. <p> This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not  {@code abstract}and it provides a default implementation. Subclasses should override this method with a correct implementation.
 * @return the ExtendedKeyUsage extension of this certificate,as an unmodifiable list of object identifiers represented as Strings. Returns null if this certificate does not contain an ExtendedKeyUsage extension.
 * @throws CertificateParsingException if the extension cannot be decoded
 * @since 1.4
 */
public List<String> getExtendedKeyUsage() throws CertificateParsingException {
  return X509CertImpl.getExtendedKeyUsage(this);
}"
79189,"/** 
 * Gets the   {@code notBefore} date from the validity period ofthe certificate. The relevant ASN.1 definitions are: <pre> validity             Validity<p> Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate }<p> CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity
 */
public abstract Date getNotBefore();","/** 
 * Gets the   {@code notBefore} date from the validity period ofthe certificate. The relevant ASN.1 definitions are: <pre> validity             Validity Validity ::= SEQUENCE { notBefore      CertificateValidityDate, notAfter       CertificateValidityDate } CertificateValidityDate ::= CHOICE { utcTime        UTCTime, generalTime    GeneralizedTime } </pre>
 * @return the start date of the validity period.
 * @see #checkValidity
 */
public abstract Date getNotBefore();"
79190,"/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier<p> AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();","/** 
 * Gets the signature algorithm name for the certificate signature algorithm. An example is the string ""SHA256withRSA"". The ASN.1 definition for this is: <pre> signatureAlgorithm   AlgorithmIdentifier AlgorithmIdentifier  ::=  SEQUENCE  { algorithm               OBJECT IDENTIFIER, parameters              ANY DEFINED BY algorithm OPTIONAL  } -- contains a value of the type -- registered for use with the -- algorithm object identifier value </pre> <p>The algorithm name is determined from the   {@code algorithm}OID string.
 * @return the signature algorithm name.
 */
public abstract String getSigAlgName();"
79191,"/** 
 * Gets the   {@code subjectUniqueID} value from the certificate.<p>The ASN.1 definition for this is: <pre> subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL<p> UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the subject unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getSubjectUniqueID();","/** 
 * Gets the   {@code subjectUniqueID} value from the certificate.<p>The ASN.1 definition for this is: <pre> subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL UniqueIdentifier  ::=  BIT STRING </pre>
 * @return the subject unique identifier or null if it is notpresent in the certificate.
 */
public abstract boolean[] getSubjectUniqueID();"
79192,"/** 
 * Returns   {@code true} if the given {@code locale} is supported bythis locale service provider. The given  {@code locale} may contain<a href=""../Locale.html#def_extensions"">extensions<a/> that should be taken into account for the support determination. <p>The default implementation returns  {@code true} if the given {@code locale}is equal to any of the available   {@code Locale}s returned by  {@link #getAvailableLocales()} with ignoring any extensions in both thegiven  {@code locale} and the available locales. Concrete locale serviceprovider implementations should override this method if those implementations are  {@code Locale} extensions-aware. For example,{@code DecimalFormatSymbolsProvider} implementations will need to checkextensions in the given  {@code locale} to see if any numbering system isspecified and can be supported. However,  {@code CollatorProvider}implementations may not be affected by any particular numbering systems, and in that case, extensions for numbering systems should be ignored.
 * @param locale a {@code Locale} to be tested
 * @return {@code true} if the given {@code locale} is supported by thisprovider;  {@code false} otherwise.
 * @throws NullPointerException if the given  {@code locale} is {@code null}
 * @see Locale#hasExtensions()
 * @see Locale#stripExtensions()
 * @since 1.8
 */
public boolean isSupportedLocale(Locale locale){
  locale=locale.stripExtensions();
  for (  Locale available : getAvailableLocales()) {
    if (locale.equals(available.stripExtensions())) {
      return true;
    }
  }
  return false;
}","/** 
 * Returns   {@code true} if the given {@code locale} is supported bythis locale service provider. The given  {@code locale} may contain<a href=""../Locale.html#def_extensions"">extensions</a> that should be taken into account for the support determination. <p>The default implementation returns  {@code true} if the given {@code locale}is equal to any of the available   {@code Locale}s returned by  {@link #getAvailableLocales()} with ignoring any extensions in both thegiven  {@code locale} and the available locales. Concrete locale serviceprovider implementations should override this method if those implementations are  {@code Locale} extensions-aware. For example,{@code DecimalFormatSymbolsProvider} implementations will need to checkextensions in the given  {@code locale} to see if any numbering system isspecified and can be supported. However,  {@code CollatorProvider}implementations may not be affected by any particular numbering systems, and in that case, extensions for numbering systems should be ignored.
 * @param locale a {@code Locale} to be tested
 * @return {@code true} if the given {@code locale} is supported by thisprovider;  {@code false} otherwise.
 * @throws NullPointerException if the given  {@code locale} is {@code null}
 * @see Locale#hasExtensions()
 * @see Locale#stripExtensions()
 * @since 1.8
 */
public boolean isSupportedLocale(Locale locale){
  locale=locale.stripExtensions();
  for (  Locale available : getAvailableLocales()) {
    if (locale.equals(available.stripExtensions())) {
      return true;
    }
  }
  return false;
}"
79193,"/** 
 * <p> If passed to the appropriate variant of java.beans.Beans.instantiate this method will be called in order to associate the newly instantiated Applet (JavaBean) with its AppletContext, AppletStub, and Container. </p> <p> Conformant implementations shall: <ol> <li> Associate the newly instantiated Applet with the appropriate AppletContext. <li> Instantiate an AppletStub() and associate that AppletStub with the Applet via an invocation of setStub(). <li> If BeanContext parameter is null, then it shall associate the Applet with its appropriate Container by adding that Applet to its Container via an invocation of add(). If the BeanContext parameter is non-null, then it is the responsibility of the BeanContext to associate the Applet with its Container during the subsequent invocation of its addChildren() method. </ol> </p>
 * @param newAppletBean  The newly instantiated JavaBean
 * @param bCtxt          The BeanContext intended for this Applet, ornull.
 */
void initialize(Applet newAppletBean,BeanContext bCtxt);","/** 
 * <p> If passed to the appropriate variant of java.beans.Beans.instantiate this method will be called in order to associate the newly instantiated Applet (JavaBean) with its AppletContext, AppletStub, and Container. </p> <p> Conformant implementations shall: <ol> <li> Associate the newly instantiated Applet with the appropriate AppletContext. <li> Instantiate an AppletStub() and associate that AppletStub with the Applet via an invocation of setStub(). <li> If BeanContext parameter is null, then it shall associate the Applet with its appropriate Container by adding that Applet to its Container via an invocation of add(). If the BeanContext parameter is non-null, then it is the responsibility of the BeanContext to associate the Applet with its Container during the subsequent invocation of its addChildren() method. </ol>
 * @param newAppletBean  The newly instantiated JavaBean
 * @param bCtxt          The BeanContext intended for this Applet, ornull.
 */
void initialize(Applet newAppletBean,BeanContext bCtxt);"
79194,"/** 
 * From a given bean, obtain an object representing a specified type view of that source object. <p> The result may be the same object or a different object.  If the requested target view isn't available then the given bean is returned. <p> This method is provided in Beans 1.0 as a hook to allow the addition of more flexible bean behaviour in the future.
 * @param bean        Object from which we want to obtain a view.
 * @param targetType  The type of view we'd like to get.
 */
public static Object getInstanceOf(Object bean,Class<?> targetType){
  return bean;
}","/** 
 * From a given bean, obtain an object representing a specified type view of that source object. <p> The result may be the same object or a different object.  If the requested target view isn't available then the given bean is returned. <p> This method is provided in Beans 1.0 as a hook to allow the addition of more flexible bean behaviour in the future.
 * @return an object representing a specified type view of thesource object
 * @param bean        Object from which we want to obtain a view.
 * @param targetType  The type of view we'd like to get.
 */
public static Object getInstanceOf(Object bean,Class<?> targetType){
  return bean;
}"
79195,"/** 
 * Instantiate a bean. <p> The bean is created based on a name relative to a class-loader. This name should be a dot-separated name such as ""a.b.c"". <p> In Beans 1.0 the given name can indicate either a serialized object or a class.  Other mechanisms may be added in the future.  In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name. <p> When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing "".ser"" suffix. We then try to load a serialized object from that resource. <p> For example, given a beanName of ""x.y"", Beans.instantiate would first try to read a serialized object from the resource ""x/y.ser"" and if that failed it would try to load the class ""x.y"" and create an instance of that class. <p> If the bean is a subtype of java.applet.Applet, then it is given some special initialization.  First, it is supplied with a default AppletStub and AppletContext.  Second, if it was instantiated from a classname the applet's ""init"" method is called.  (If the bean was deserialized this step is skipped.) <p> Note that for beans which are applets, it is the caller's responsiblity to call ""start"" on the applet.  For correct behaviour, this should be done after the applet has been added into a visible AWT container. <p> Note that applets created via beans.instantiate run in a slightly different environment than applets running inside browsers.  In particular, bean applets have no access to ""parameters"", so they may wish to provide property get/set methods to set parameter values.  We advise bean-applet developers to test their bean-applets against both the JDK appletviewer (for a reference browser environment) and the BDK BeanBox (for a reference bean container).
 * @param cls         the class-loader from which we should createthe bean.  If this is null, then the system class-loader is used.
 * @param beanName    the name of the bean within the class-loader.For example ""sun.beanbox.foobah""
 * @param beanContext The BeanContext in which to nest the new bean
 * @param initializer The AppletInitializer for the new bean
 * @exception ClassNotFoundException if the class of a serializedobject could not be found.
 * @exception IOException if an I/O error occurs.
 */
public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext,AppletInitializer initializer) throws IOException, ClassNotFoundException {
  InputStream ins;
  ObjectInputStream oins=null;
  Object result=null;
  boolean serialized=false;
  IOException serex=null;
  if (cls == null) {
    try {
      cls=ClassLoader.getSystemClassLoader();
    }
 catch (    SecurityException ex) {
    }
  }
  final String serName=beanName.replace('.','/').concat(""String_Node_Str"");
  final ClassLoader loader=cls;
  ins=AccessController.doPrivileged(new PrivilegedAction<InputStream>(){
    public InputStream run(){
      if (loader == null)       return ClassLoader.getSystemResourceAsStream(serName);
 else       return loader.getResourceAsStream(serName);
    }
  }
);
  if (ins != null) {
    try {
      if (cls == null) {
        oins=new ObjectInputStream(ins);
      }
 else {
        oins=new ObjectInputStreamWithLoader(ins,cls);
      }
      result=oins.readObject();
      serialized=true;
      oins.close();
    }
 catch (    IOException ex) {
      ins.close();
      serex=ex;
    }
catch (    ClassNotFoundException ex) {
      ins.close();
      throw ex;
    }
  }
  if (result == null) {
    Class<?> cl;
    try {
      cl=ClassFinder.findClass(beanName,cls);
    }
 catch (    ClassNotFoundException ex) {
      if (serex != null) {
        throw serex;
      }
      throw ex;
    }
    try {
      result=cl.newInstance();
    }
 catch (    Exception ex) {
      throw new ClassNotFoundException(""String_Node_Str"" + cl + ""String_Node_Str""+ ex,ex);
    }
  }
  if (result != null) {
    AppletStub stub=null;
    if (result instanceof Applet) {
      Applet applet=(Applet)result;
      boolean needDummies=initializer == null;
      if (needDummies) {
        final String resourceName;
        if (serialized) {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
 else {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
        URL objectUrl=null;
        URL codeBase=null;
        URL docBase=null;
        final ClassLoader cloader=cls;
        objectUrl=AccessController.doPrivileged(new PrivilegedAction<URL>(){
          public URL run(){
            if (cloader == null)             return ClassLoader.getSystemResource(resourceName);
 else             return cloader.getResource(resourceName);
          }
        }
);
        if (objectUrl != null) {
          String s=objectUrl.toExternalForm();
          if (s.endsWith(resourceName)) {
            int ix=s.length() - resourceName.length();
            codeBase=new URL(s.substring(0,ix));
            docBase=codeBase;
            ix=s.lastIndexOf('/');
            if (ix >= 0) {
              docBase=new URL(s.substring(0,ix + 1));
            }
          }
        }
        BeansAppletContext context=new BeansAppletContext(applet);
        stub=(AppletStub)new BeansAppletStub(applet,context,codeBase,docBase);
        applet.setStub(stub);
      }
 else {
        initializer.initialize(applet,beanContext);
      }
      if (beanContext != null) {
        unsafeBeanContextAdd(beanContext,result);
      }
      if (!serialized) {
        applet.setSize(100,100);
        applet.init();
      }
      if (needDummies) {
        ((BeansAppletStub)stub).active=true;
      }
 else       initializer.activate(applet);
    }
 else     if (beanContext != null)     unsafeBeanContextAdd(beanContext,result);
  }
  return result;
}","/** 
 * Instantiate a bean. <p> The bean is created based on a name relative to a class-loader. This name should be a dot-separated name such as ""a.b.c"". <p> In Beans 1.0 the given name can indicate either a serialized object or a class.  Other mechanisms may be added in the future.  In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name. <p> When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing "".ser"" suffix. We then try to load a serialized object from that resource. <p> For example, given a beanName of ""x.y"", Beans.instantiate would first try to read a serialized object from the resource ""x/y.ser"" and if that failed it would try to load the class ""x.y"" and create an instance of that class. <p> If the bean is a subtype of java.applet.Applet, then it is given some special initialization.  First, it is supplied with a default AppletStub and AppletContext.  Second, if it was instantiated from a classname the applet's ""init"" method is called.  (If the bean was deserialized this step is skipped.) <p> Note that for beans which are applets, it is the caller's responsiblity to call ""start"" on the applet.  For correct behaviour, this should be done after the applet has been added into a visible AWT container. <p> Note that applets created via beans.instantiate run in a slightly different environment than applets running inside browsers.  In particular, bean applets have no access to ""parameters"", so they may wish to provide property get/set methods to set parameter values.  We advise bean-applet developers to test their bean-applets against both the JDK appletviewer (for a reference browser environment) and the BDK BeanBox (for a reference bean container).
 * @return a JavaBean
 * @param cls         the class-loader from which we should createthe bean.  If this is null, then the system class-loader is used.
 * @param beanName    the name of the bean within the class-loader.For example ""sun.beanbox.foobah""
 * @param beanContext The BeanContext in which to nest the new bean
 * @param initializer The AppletInitializer for the new bean
 * @exception ClassNotFoundException if the class of a serializedobject could not be found.
 * @exception IOException if an I/O error occurs.
 */
public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext,AppletInitializer initializer) throws IOException, ClassNotFoundException {
  InputStream ins;
  ObjectInputStream oins=null;
  Object result=null;
  boolean serialized=false;
  IOException serex=null;
  if (cls == null) {
    try {
      cls=ClassLoader.getSystemClassLoader();
    }
 catch (    SecurityException ex) {
    }
  }
  final String serName=beanName.replace('.','/').concat(""String_Node_Str"");
  final ClassLoader loader=cls;
  ins=AccessController.doPrivileged(new PrivilegedAction<InputStream>(){
    public InputStream run(){
      if (loader == null)       return ClassLoader.getSystemResourceAsStream(serName);
 else       return loader.getResourceAsStream(serName);
    }
  }
);
  if (ins != null) {
    try {
      if (cls == null) {
        oins=new ObjectInputStream(ins);
      }
 else {
        oins=new ObjectInputStreamWithLoader(ins,cls);
      }
      result=oins.readObject();
      serialized=true;
      oins.close();
    }
 catch (    IOException ex) {
      ins.close();
      serex=ex;
    }
catch (    ClassNotFoundException ex) {
      ins.close();
      throw ex;
    }
  }
  if (result == null) {
    Class<?> cl;
    try {
      cl=ClassFinder.findClass(beanName,cls);
    }
 catch (    ClassNotFoundException ex) {
      if (serex != null) {
        throw serex;
      }
      throw ex;
    }
    try {
      result=cl.newInstance();
    }
 catch (    Exception ex) {
      throw new ClassNotFoundException(""String_Node_Str"" + cl + ""String_Node_Str""+ ex,ex);
    }
  }
  if (result != null) {
    AppletStub stub=null;
    if (result instanceof Applet) {
      Applet applet=(Applet)result;
      boolean needDummies=initializer == null;
      if (needDummies) {
        final String resourceName;
        if (serialized) {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
 else {
          resourceName=beanName.replace('.','/').concat(""String_Node_Str"");
        }
        URL objectUrl=null;
        URL codeBase=null;
        URL docBase=null;
        final ClassLoader cloader=cls;
        objectUrl=AccessController.doPrivileged(new PrivilegedAction<URL>(){
          public URL run(){
            if (cloader == null)             return ClassLoader.getSystemResource(resourceName);
 else             return cloader.getResource(resourceName);
          }
        }
);
        if (objectUrl != null) {
          String s=objectUrl.toExternalForm();
          if (s.endsWith(resourceName)) {
            int ix=s.length() - resourceName.length();
            codeBase=new URL(s.substring(0,ix));
            docBase=codeBase;
            ix=s.lastIndexOf('/');
            if (ix >= 0) {
              docBase=new URL(s.substring(0,ix + 1));
            }
          }
        }
        BeansAppletContext context=new BeansAppletContext(applet);
        stub=(AppletStub)new BeansAppletStub(applet,context,codeBase,docBase);
        applet.setStub(stub);
      }
 else {
        initializer.initialize(applet,beanContext);
      }
      if (beanContext != null) {
        unsafeBeanContextAdd(beanContext,result);
      }
      if (!serialized) {
        applet.setSize(100,100);
        applet.init();
      }
      if (needDummies) {
        ((BeansAppletStub)stub).active=true;
      }
 else       initializer.activate(applet);
    }
 else     if (beanContext != null)     unsafeBeanContextAdd(beanContext,result);
  }
  return result;
}"
79196,"/** 
 * This default implementation of the <code>initialize</code> method assumes all state held in objects of this type is exposed via the matching pairs of ""setter"" and ""getter"" methods in the order they are returned by the Introspector. If a property descriptor defines a ""transient"" attribute with a value equal to <code>Boolean.TRUE</code> the property is ignored by this default implementation. Note that this use of the word ""transient"" is quite independent of the field modifier that is used by the <code>ObjectOutputStream</code>. <p> For each non-transient property, an expression is created in which the nullary ""getter"" method is applied to the <code>oldInstance</code>. The value of this expression is the value of the property in the instance that is being serialized. If the value of this expression in the cloned environment <code>mutatesTo</code> the target value, the new value is initialized to make it equivalent to the old value. In this case, because the property value has not changed there is no need to call the corresponding ""setter"" method and no statement is emitted. If not however, the expression for this value is replaced with another expression (normally a constructor) and the corresponding ""setter"" method is called to install the new property value in the object. This scheme removes default information from the output produced by streams using this delegate. <p> In passing these statements to the output stream, where they will be executed, side effects are made to the <code>newInstance</code>. In most cases this allows the problem of properties whose values depend on each other to actually help the serialization process by making the number of statements that need to be written to the output smaller. In general, the problem of handling interdependent properties is reduced to that of finding an order for the properties in a class such that no property value depends on the value of a subsequent property.
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 * @see java.beans.Introspector#getBeanInfo
 * @see java.beans.PropertyDescriptor
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  super.initialize(type,oldInstance,newInstance,out);
  if (oldInstance.getClass() == type) {
    initBean(type,oldInstance,newInstance,out);
  }
}","/** 
 * This default implementation of the <code>initialize</code> method assumes all state held in objects of this type is exposed via the matching pairs of ""setter"" and ""getter"" methods in the order they are returned by the Introspector. If a property descriptor defines a ""transient"" attribute with a value equal to <code>Boolean.TRUE</code> the property is ignored by this default implementation. Note that this use of the word ""transient"" is quite independent of the field modifier that is used by the <code>ObjectOutputStream</code>. <p> For each non-transient property, an expression is created in which the nullary ""getter"" method is applied to the <code>oldInstance</code>. The value of this expression is the value of the property in the instance that is being serialized. If the value of this expression in the cloned environment <code>mutatesTo</code> the target value, the new value is initialized to make it equivalent to the old value. In this case, because the property value has not changed there is no need to call the corresponding ""setter"" method and no statement is emitted. If not however, the expression for this value is replaced with another expression (normally a constructor) and the corresponding ""setter"" method is called to install the new property value in the object. This scheme removes default information from the output produced by streams using this delegate. <p> In passing these statements to the output stream, where they will be executed, side effects are made to the <code>newInstance</code>. In most cases this allows the problem of properties whose values depend on each other to actually help the serialization process by making the number of statements that need to be written to the output smaller. In general, the problem of handling interdependent properties is reduced to that of finding an order for the properties in a class such that no property value depends on the value of a subsequent property.
 * @param type the type of the instances
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 * @see java.beans.Introspector#getBeanInfo
 * @see java.beans.PropertyDescriptor
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  super.initialize(type,oldInstance,newInstance,out);
  if (oldInstance.getClass() == type) {
    initBean(type,oldInstance,newInstance,out);
  }
}"
79197,"/** 
 * Creates an implementation of <code>listenerInterface</code> in which the method named <code>listenerMethodName</code> passes the value of the event expression, <code>eventPropertyName</code>, to the final method in the statement, <code>action</code>, which is applied to the <code>target</code>. All of the other listener methods do nothing. <p> The <code>eventPropertyName</code> string is used to extract a value from the incoming event object that is passed to the target method.  The common case is the target method takes no arguments, in which case a value of null should be used for the <code>eventPropertyName</code>.  Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the <code>eventPropertyName</code> string is a sequence of methods or properties where each method or property is applied to the value returned by the preceeding method starting from the incoming event object. The syntax is: <code>propertyName{.propertyName}*</code> where <code>propertyName</code> matches a method or property.  For example, to extract the <code>point</code> property from a <code>MouseEvent</code>, you could use either <code>""point""</code> or <code>""getPoint""</code> as the <code>eventPropertyName</code>.  To extract the ""text"" property from a <code>MouseEvent</code> with a <code>JLabel</code> source use any of the following as <code>eventPropertyName</code>: <code>""source.text""</code>, <code>""getSource.text""</code> <code>""getSource.getText""</code> or <code>""source.getText""</code>.  If a method can not be found, or an exception is generated as part of invoking a method a <code>RuntimeException</code> will be thrown at dispatch time.  For example, if the incoming event object is null, and <code>eventPropertyName</code> is non-null and not empty, a <code>RuntimeException</code> will be thrown. <p> The <code>action</code> argument is of the same format as the <code>eventPropertyName</code> argument where the last property name identifies either a method name or writable property. <p> If the <code>listenerMethodName</code> is <code>null</code> <em>all</em> methods in the interface trigger the <code>action</code> to be executed on the <code>target</code>. <p> For example, to create a <code>MouseListener</code> that sets the target object's <code>origin</code> property to the incoming <code>MouseEvent</code>'s location (that's the value of <code>mouseEvent.getPoint()</code>) each time a mouse button is pressed, one would write: <blockquote> <pre> EventHandler.create(MouseListener.class, target, ""origin"", ""point"", ""mousePressed""); </pre> </blockquote> This is comparable to writing a <code>MouseListener</code> in which all of the methods except <code>mousePressed</code> are no-ops: <blockquote> <pre> //Equivalent code using an inner class instead of EventHandler. new MouseAdapter() { public void mousePressed(MouseEvent e) { target.setOrigin(e.getPoint()); } }; </pre> </blockquote>
 * @param listenerInterface the listener interface to create a proxy for
 * @param target the object that will perform the action
 * @param action the name of a (possibly qualified) property or method onthe target
 * @param eventPropertyName the (possibly qualified) name of a readable property of the incoming event
 * @param listenerMethodName the name of the method in the listener interface that should trigger the action
 * @return an object that implements <code>listenerInterface</code>
 * @throws NullPointerException if <code>listenerInterface</code> is null
 * @throws NullPointerException if <code>target</code> is null
 * @throws NullPointerException if <code>action</code> is null
 * @see EventHandler
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T create(Class<T> listenerInterface,Object target,String action,String eventPropertyName,String listenerMethodName){
  EventHandler eventHandler=new EventHandler(target,action,eventPropertyName,listenerMethodName);
  if (listenerInterface == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return (T)Proxy.newProxyInstance(target.getClass().getClassLoader(),new Class<?>[]{listenerInterface},eventHandler);
}","/** 
 * Creates an implementation of <code>listenerInterface</code> in which the method named <code>listenerMethodName</code> passes the value of the event expression, <code>eventPropertyName</code>, to the final method in the statement, <code>action</code>, which is applied to the <code>target</code>. All of the other listener methods do nothing. <p> The <code>eventPropertyName</code> string is used to extract a value from the incoming event object that is passed to the target method.  The common case is the target method takes no arguments, in which case a value of null should be used for the <code>eventPropertyName</code>.  Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the <code>eventPropertyName</code> string is a sequence of methods or properties where each method or property is applied to the value returned by the preceeding method starting from the incoming event object. The syntax is: <code>propertyName{.propertyName}*</code> where <code>propertyName</code> matches a method or property.  For example, to extract the <code>point</code> property from a <code>MouseEvent</code>, you could use either <code>""point""</code> or <code>""getPoint""</code> as the <code>eventPropertyName</code>.  To extract the ""text"" property from a <code>MouseEvent</code> with a <code>JLabel</code> source use any of the following as <code>eventPropertyName</code>: <code>""source.text""</code>, <code>""getSource.text""</code> <code>""getSource.getText""</code> or <code>""source.getText""</code>.  If a method can not be found, or an exception is generated as part of invoking a method a <code>RuntimeException</code> will be thrown at dispatch time.  For example, if the incoming event object is null, and <code>eventPropertyName</code> is non-null and not empty, a <code>RuntimeException</code> will be thrown. <p> The <code>action</code> argument is of the same format as the <code>eventPropertyName</code> argument where the last property name identifies either a method name or writable property. <p> If the <code>listenerMethodName</code> is <code>null</code> <em>all</em> methods in the interface trigger the <code>action</code> to be executed on the <code>target</code>. <p> For example, to create a <code>MouseListener</code> that sets the target object's <code>origin</code> property to the incoming <code>MouseEvent</code>'s location (that's the value of <code>mouseEvent.getPoint()</code>) each time a mouse button is pressed, one would write: <blockquote> <pre> EventHandler.create(MouseListener.class, target, ""origin"", ""point"", ""mousePressed""); </pre> </blockquote> This is comparable to writing a <code>MouseListener</code> in which all of the methods except <code>mousePressed</code> are no-ops: <blockquote> <pre> //Equivalent code using an inner class instead of EventHandler. new MouseAdapter() { public void mousePressed(MouseEvent e) { target.setOrigin(e.getPoint()); } }; </pre> </blockquote>
 * @param < T > the type to create
 * @param listenerInterface the listener interface to create a proxy for
 * @param target the object that will perform the action
 * @param action the name of a (possibly qualified) property or method onthe target
 * @param eventPropertyName the (possibly qualified) name of a readable property of the incoming event
 * @param listenerMethodName the name of the method in the listener interface that should trigger the action
 * @return an object that implements <code>listenerInterface</code>
 * @throws NullPointerException if <code>listenerInterface</code> is null
 * @throws NullPointerException if <code>target</code> is null
 * @throws NullPointerException if <code>action</code> is null
 * @see EventHandler
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T create(Class<T> listenerInterface,Object target,String action,String eventPropertyName,String listenerMethodName){
  EventHandler eventHandler=new EventHandler(target,action,eventPropertyName,listenerMethodName);
  if (listenerInterface == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  return (T)Proxy.newProxyInstance(target.getClass().getClassLoader(),new Class<?>[]{listenerInterface},eventHandler);
}"
79198,"/** 
 * If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it. The result of the method invocation is first copied into the value property of this expression and then returned as the result of <code>getValue</code>. If the value property was already set, either by a call to <code>setValue</code> or a previous call to <code>getValue</code> then the value property is returned without either looking up or calling the method. <p> The value property of an <code>Expression</code> is set to a unique private (non-<code>null</code>) value by default and this value is used as an internal indication that the method has not yet been called. A return value of <code>null</code> replaces this default value in the same way that any other value would, ensuring that expressions are never evaluated more than once. <p> See the <code>excecute</code> method for details on how methods are chosen using the dynamic types of the target and arguments.
 * @see Statement#execute
 * @see #setValue
 * @return The result of applying this method to these arguments.
 */
public Object getValue() throws Exception {
  if (value == unbound) {
    setValue(invoke());
  }
  return value;
}","/** 
 * If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it. The result of the method invocation is first copied into the value property of this expression and then returned as the result of <code>getValue</code>. If the value property was already set, either by a call to <code>setValue</code> or a previous call to <code>getValue</code> then the value property is returned without either looking up or calling the method. <p> The value property of an <code>Expression</code> is set to a unique private (non-<code>null</code>) value by default and this value is used as an internal indication that the method has not yet been called. A return value of <code>null</code> replaces this default value in the same way that any other value would, ensuring that expressions are never evaluated more than once. <p> See the <code>execute</code> method for details on how methods are chosen using the dynamic types of the target and arguments.
 * @see Statement#execute
 * @see #setValue
 * @return The result of applying this method to these arguments.
 * @throws Exception if the method with the specified methodNamethrows an exception
 */
public Object getValue() throws Exception {
  if (value == unbound) {
    setValue(invoke());
  }
  return value;
}"
79199,"/** 
 * Sets the method that should be used to read an indexed property value.
 * @param readMethod The new indexed read method.
 */
public synchronized void setIndexedReadMethod(Method readMethod) throws IntrospectionException {
  setIndexedPropertyType(findIndexedPropertyType(readMethod,getIndexedWriteMethod0()));
  setIndexedReadMethod0(readMethod);
}","/** 
 * Sets the method that should be used to read an indexed property value.
 * @param readMethod The new indexed read method.
 * @throws IntrospectionException if an exception occurs duringintrospection.
 */
public synchronized void setIndexedReadMethod(Method readMethod) throws IntrospectionException {
  setIndexedPropertyType(findIndexedPropertyType(readMethod,getIndexedWriteMethod0()));
  setIndexedReadMethod0(readMethod);
}"
79200,"/** 
 * Sets the method that should be used to write an indexed property value.
 * @param writeMethod The new indexed write method.
 */
public synchronized void setIndexedWriteMethod(Method writeMethod) throws IntrospectionException {
  Class<?> type=findIndexedPropertyType(getIndexedReadMethod(),writeMethod);
  setIndexedPropertyType(type);
  setIndexedWriteMethod0(writeMethod);
}","/** 
 * Sets the method that should be used to write an indexed property value.
 * @param writeMethod The new indexed write method.
 * @throws IntrospectionException if an exception occurs duringintrospection.
 */
public synchronized void setIndexedWriteMethod(Method writeMethod) throws IntrospectionException {
  Class<?> type=findIndexedPropertyType(getIndexedReadMethod(),writeMethod);
  setIndexedPropertyType(type);
  setIndexedWriteMethod0(writeMethod);
}"
79201,"/** 
 * Produce a series of statements with side effects on <code>newInstance</code> so that the new instance becomes <em>equivalent</em> to <code>oldInstance</code>. In the specification of this method, we mean by equivalent that, after the method returns, the modified instance is indistinguishable from <code>newInstance</code> in the behavior of all methods in its public API. <p> The implementation typically achieves this goal by producing a series of ""what happened"" statements involving the <code>oldInstance</code> and its publicly available state. These statements are sent to the output stream using its <code>writeExpression</code> method which returns an expression involving elements in a cloned environment simulating the state of an input stream during reading. Each statement returned will have had all instances the old environment replaced with objects which exist in the new one. In particular, references to the target of these statements, which start out as references to <code>oldInstance</code> are returned as references to the <code>newInstance</code> instead. Executing these statements effects an incremental alignment of the state of the two objects as a series of modifications to the objects in the new environment. By the time the initialize method returns it should be impossible to tell the two instances apart by using their public APIs. Most importantly, the sequence of steps that were used to make these objects appear equivalent will have been recorded by the output stream and will form the actual output when the stream is flushed. <p> The default implementation, calls the <code>initialize</code> method of the type's superclass.
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  Class<?> superType=type.getSuperclass();
  PersistenceDelegate info=out.getPersistenceDelegate(superType);
  info.initialize(superType,oldInstance,newInstance,out);
}","/** 
 * Produce a series of statements with side effects on <code>newInstance</code> so that the new instance becomes <em>equivalent</em> to <code>oldInstance</code>. In the specification of this method, we mean by equivalent that, after the method returns, the modified instance is indistinguishable from <code>newInstance</code> in the behavior of all methods in its public API. <p> The implementation typically achieves this goal by producing a series of ""what happened"" statements involving the <code>oldInstance</code> and its publicly available state. These statements are sent to the output stream using its <code>writeExpression</code> method which returns an expression involving elements in a cloned environment simulating the state of an input stream during reading. Each statement returned will have had all instances the old environment replaced with objects which exist in the new one. In particular, references to the target of these statements, which start out as references to <code>oldInstance</code> are returned as references to the <code>newInstance</code> instead. Executing these statements effects an incremental alignment of the state of the two objects as a series of modifications to the objects in the new environment. By the time the initialize method returns it should be impossible to tell the two instances apart by using their public APIs. Most importantly, the sequence of steps that were used to make these objects appear equivalent will have been recorded by the output stream and will form the actual output when the stream is flushed. <p> The default implementation, calls the <code>initialize</code> method of the type's superclass.
 * @param type the type of the instances
 * @param oldInstance The instance to be copied.
 * @param newInstance The instance that is to be modified.
 * @param out The stream to which any initialization statements should be written.
 * @throws NullPointerException if {@code out} is {@code null}
 */
protected void initialize(Class<?> type,Object oldInstance,Object newInstance,Encoder out){
  Class<?> superType=type.getSuperclass();
  PersistenceDelegate info=out.getPersistenceDelegate(superType);
  info.initialize(superType,oldInstance,newInstance,out);
}"
79202,"/** 
 * Sets the method that should be used to write the property value.
 * @param writeMethod The new write method.
 */
public synchronized void setWriteMethod(Method writeMethod) throws IntrospectionException {
  if (writeMethod == null) {
    writeMethodName=null;
    writeMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(getReadMethod(),writeMethod));
  setClass0(writeMethod.getDeclaringClass());
  writeMethodName=writeMethod.getName();
  this.writeMethodRef=getSoftReference(writeMethod);
  setTransient(writeMethod.getAnnotation(Transient.class));
}","/** 
 * Sets the method that should be used to write the property value.
 * @param writeMethod The new write method.
 * @throws IntrospectionException if the write method is invalid
 */
public synchronized void setWriteMethod(Method writeMethod) throws IntrospectionException {
  if (writeMethod == null) {
    writeMethodName=null;
    writeMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(getReadMethod(),writeMethod));
  setClass0(writeMethod.getDeclaringClass());
  writeMethodName=writeMethod.getName();
  this.writeMethodRef=getSoftReference(writeMethod);
  setTransient(writeMethod.getAnnotation(Transient.class));
}"
79203,"/** 
 * Sets the method that should be used to read the property value.
 * @param readMethod The new read method.
 */
public synchronized void setReadMethod(Method readMethod) throws IntrospectionException {
  if (readMethod == null) {
    readMethodName=null;
    readMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(readMethod,getWriteMethod0()));
  setClass0(readMethod.getDeclaringClass());
  readMethodName=readMethod.getName();
  this.readMethodRef=getSoftReference(readMethod);
  setTransient(readMethod.getAnnotation(Transient.class));
}","/** 
 * Sets the method that should be used to read the property value.
 * @param readMethod The new read method.
 * @throws IntrospectionException if the read method is invalid
 */
public synchronized void setReadMethod(Method readMethod) throws IntrospectionException {
  if (readMethod == null) {
    readMethodName=null;
    readMethodRef=null;
    return;
  }
  setPropertyType(findPropertyType(readMethod,getWriteMethod0()));
  setClass0(readMethod.getDeclaringClass());
  readMethodName=readMethod.getName();
  this.readMethodRef=getSoftReference(readMethod);
  setTransient(readMethod.getAnnotation(Transient.class));
}"
79204,"/** 
 * Analagous to <code>java.lang.ClassLoader.getResource()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return a <code>URL</code> for the namedresource for the specified child
 * @throws <code>IllegalArgumentException</code>if the resource is not valid
 */
URL getResource(String name,BeanContextChild bcc) throws IllegalArgumentException ;","/** 
 * Analagous to <code>java.lang.ClassLoader.getResource()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return a <code>URL</code> for the namedresource for the specified child
 * @throws IllegalArgumentException if the resource is not valid
 */
URL getResource(String name,BeanContextChild bcc) throws IllegalArgumentException ;"
79205,"/** 
 * Adds the specified <code>BeanContextMembershipListener</code> to receive <code>BeanContextMembershipEvents</code> from this <code>BeanContext</code> whenever it adds or removes a child <code>Component</code>(s).
 * @param bcml the <code>BeanContextMembershipListener</code> to be added
 */
void addBeanContextMembershipListener(BeanContextMembershipListener bcml);","/** 
 * Adds the specified <code>BeanContextMembershipListener</code> to receive <code>BeanContextMembershipEvents</code> from this <code>BeanContext</code> whenever it adds or removes a child <code>Component</code>(s).
 * @param bcml the BeanContextMembershipListener to be added
 */
void addBeanContextMembershipListener(BeanContextMembershipListener bcml);"
79206,"/** 
 * Analagous to <code>java.lang.ClassLoader.getResourceAsStream()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return an <code>InputStream</code> for reading the resource,or <code>null</code> if the resource could not be found.
 * @throws <code>IllegalArgumentException</code> ifthe resource is not valid
 */
InputStream getResourceAsStream(String name,BeanContextChild bcc) throws IllegalArgumentException ;","/** 
 * Analagous to <code>java.lang.ClassLoader.getResourceAsStream()</code>, this method allows a <code>BeanContext</code> implementation to interpose behavior between the child <code>Component</code> and underlying <code>ClassLoader</code>.
 * @param name the resource name
 * @param bcc the specified child
 * @return an <code>InputStream</code> for reading the resource,or <code>null</code> if the resource could not be found.
 * @throws IllegalArgumentException ifthe resource is not valid
 */
InputStream getResourceAsStream(String name,BeanContextChild bcc) throws IllegalArgumentException ;"
79207,"/** 
 * Instantiate the javaBean named as a child of this <code>BeanContext</code>. The implementation of the JavaBean is derived from the value of the beanName parameter, and is defined by the <code>java.beans.Beans.instantiate()</code> method.
 * @param beanName The name of the JavaBean to instantiateas a child of this <code>BeanContext</code>
 * @throws <code>IOException</code>
 * @throws <code>ClassNotFoundException</code> if the class identifiedby the beanName parameter is not found
 */
Object instantiateChild(String beanName) throws IOException, ClassNotFoundException ;","/** 
 * Instantiate the javaBean named as a child of this <code>BeanContext</code>. The implementation of the JavaBean is derived from the value of the beanName parameter, and is defined by the <code>java.beans.Beans.instantiate()</code> method.
 * @return a javaBean named as a child of this<code>BeanContext</code>
 * @param beanName The name of the JavaBean to instantiateas a child of this <code>BeanContext</code>
 * @throws IOException if an IO problem occurs
 * @throws ClassNotFoundException if the class identifiedby the beanName parameter is not found
 */
Object instantiateChild(String beanName) throws IOException, ClassNotFoundException ;"
79208,"/** 
 * Returns a   {@link BinaryOperator} which returns the greater of two elementsaccording to the specified  {@code Comparator}
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the greater of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> maxBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) >= 0 ? a : b;
}","/** 
 * Returns a   {@link BinaryOperator} which returns the greater of two elementsaccording to the specified  {@code Comparator}
 * @param < T > the type of values to be compared and returned
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the greater of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> maxBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) >= 0 ? a : b;
}"
79209,"/** 
 * Returns a   {@link BinaryOperator} which returns the lesser of two elementsaccording to the specified  {@code Comparator}
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the lesser of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> minBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) <= 0 ? a : b;
}","/** 
 * Returns a   {@link BinaryOperator} which returns the lesser of two elementsaccording to the specified  {@code Comparator}
 * @param < T > the type of values to be compared and returned
 * @param comparator a {@code Comparator} for comparing the two values
 * @return a {@code BinaryOperator} which returns the lesser of its operands,according to the supplied  {@code Comparator}
 * @throws NullPointerException if the argument is null
 */
public static <T>BinaryOperator<T> minBy(Comparator<? super T> comparator){
  Objects.requireNonNull(comparator);
  return (a,b) -> comparator.compare(a,b) <= 0 ? a : b;
}"
79210,"/** 
 * Returns a   {@code Function} whose {@code apply} method returns its input.
 * @param < T > the type of the input and output objects to the function
 */
static <T>Function<T,T> identity(){
  return t -> t;
}","/** 
 * Returns a   {@code Function} whose {@code apply} method returns its input.
 * @param < T > the type of the input and output objects to the function
 * @return a {@code Function} whose {@code apply} method returns its input
 */
static <T>Function<T,T> identity(){
  return t -> t;
}"
79211,"/** 
 * Returns a unary operator that provides its input value as the result.
 * @return a unary operator that provides its input value as the result
 */
static <T>UnaryOperator<T> identity(){
  return t -> t;
}","/** 
 * Returns a unary operator that provides its input value as the result.
 * @param < T > the type of the input and output objects to the function
 * @return a unary operator that provides its input value as the result
 */
static <T>UnaryOperator<T> identity(){
  return t -> t;
}"
79212,"/** 
 * Obtain new instance of a class that implements Packer. <li><p>If the system property <tt>java.util.jar.Pack200.Packer</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Packer. This class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Packer engine.
 */
public synchronized static Packer newPacker(){
  return (Packer)newInstance(PACK_PROVIDER);
}","/** 
 * Obtain new instance of a class that implements Packer. <ul> <li><p>If the system property <tt>java.util.jar.Pack200.Packer</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Packer. This class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> </ul> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Packer engine.
 */
public synchronized static Packer newPacker(){
  return (Packer)newInstance(PACK_PROVIDER);
}"
79213,"/** 
 * Obtain new instance of a class that implements Unpacker. <li><p>If the system property <tt>java.util.jar.Pack200.Unpacker</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Unpacker engine.
 */
public static Unpacker newUnpacker(){
  return (Unpacker)newInstance(UNPACK_PROVIDER);
}","/** 
 * Obtain new instance of a class that implements Unpacker. <ul> <li><p>If the system property <tt>java.util.jar.Pack200.Unpacker</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated.  If this process fails then an unspecified error is thrown.</p></li> <li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.</p></li> </ul> <p>Note:  The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock.
 * @return  A newly allocated Unpacker engine.
 */
public static Unpacker newUnpacker(){
  return (Unpacker)newInstance(UNPACK_PROVIDER);
}"
79214,"/** 
 * Inserts the specified element at the front of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addFirst} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return <tt>true</tt> if the element was added to this deque, else<tt>false</tt>
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerFirst(E e);","/** 
 * Inserts the specified element at the front of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addFirst} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return {@code true} if the element was added to this deque, else{@code false}
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerFirst(E e);"
79215,"/** 
 * Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns <tt>null</tt> if this deque is empty. <p>This method is equivalent to   {@link #pollFirst()}.
 * @return the first element of this deque, or <tt>null</tt> ifthis deque is empty
 */
E poll();","/** 
 * Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns  {@code null} if this deque is empty.<p>This method is equivalent to  {@link #pollFirst()}.
 * @return the first element of this deque, or {@code null} ifthis deque is empty
 */
E poll();"
79216,"/** 
 * Retrieves and removes the last element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the tail of this deque, or <tt>null</tt> if this deque is empty
 */
E pollLast();","/** 
 * Retrieves and removes the last element of this deque, or returns   {@code null} if this deque is empty.
 * @return the tail of this deque, or {@code null} if this deque is empty
 */
E pollLast();"
79217,"/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). <p>This method is equivalent to   {@link #removeFirstOccurrence}.
 * @param o element to be removed from this deque, if present
 * @return <tt>true</tt> if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean remove(Object o);","/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element   {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns  {@code true} if this deque contained the specified element(or equivalently, if this deque changed as a result of the call). <p>This method is equivalent to  {@link #removeFirstOccurrence(Object)}.
 * @param o element to be removed from this deque, if present
 * @return {@code true} if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean remove(Object o);"
79218,"/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and <tt>false</tt> if no space is currently available.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #add} method, which can fail toinsert an element only by throwing an exception. <p>This method is equivalent to  {@link #offerLast}.
 * @param e the element to add
 * @return <tt>true</tt> if the element was added to this deque, else<tt>false</tt>
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offer(E e);","/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning  {@code true} upon success and {@code false} if no space is currentlyavailable.  When using a capacity-restricted deque, this method is generally preferable to the  {@link #add} method, which can fail toinsert an element only by throwing an exception. <p>This method is equivalent to  {@link #offerLast}.
 * @param e the element to add
 * @return {@code true} if the element was added to this deque, else{@code false}
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offer(E e);"
79219,"/** 
 * Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method   {@link #offerLast}. <p>This method is equivalent to   {@link #add}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addLast(E e);","/** 
 * Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an   {@code IllegalStateException} if no space is currentlyavailable.  When using a capacity-restricted deque, it is generally preferable to use method  {@link #offerLast}. <p>This method is equivalent to   {@link #add}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addLast(E e);"
79220,"/** 
 * Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return <tt>true</tt> if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeLastOccurrence(Object o);","/** 
 * Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element   {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns  {@code true} if this deque contained the specified element(or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return {@code true} if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeLastOccurrence(Object o);"
79221,"/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt> if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use   {@link #offer(Object) offer}. <p>This method is equivalent to   {@link #addLast}.
 * @param e the element to add
 * @return <tt>true</tt> (as specified by {@link Collection#add})
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean add(E e);","/** 
 * Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning  {@code true} upon success and throwing an{@code IllegalStateException} if no space is currently available.When using a capacity-restricted deque, it is generally preferable to use  {@link #offer(Object) offer}. <p>This method is equivalent to   {@link #addLast}.
 * @param e the element to add
 * @return {@code true} (as specified by {@link Collection#add})
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean add(E e);"
79222,"/** 
 * Retrieves, but does not remove, the first element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the head of this deque, or <tt>null</tt> if this deque is empty
 */
E peekFirst();","/** 
 * Retrieves, but does not remove, the first element of this deque, or returns   {@code null} if this deque is empty.
 * @return the head of this deque, or {@code null} if this deque is empty
 */
E peekFirst();"
79223,"/** 
 * Retrieves, but does not remove, the last element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the tail of this deque, or <tt>null</tt> if this deque is empty
 */
E peekLast();","/** 
 * Retrieves, but does not remove, the last element of this deque, or returns   {@code null} if this deque is empty.
 * @return the tail of this deque, or {@code null} if this deque is empty
 */
E peekLast();"
79224,"/** 
 * Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt> if no space is currently available. <p>This method is equivalent to   {@link #addFirst}.
 * @param e the element to push
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void push(E e);","/** 
 * Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an  {@code IllegalStateException} if no space is currently available.<p>This method is equivalent to  {@link #addFirst}.
 * @param e the element to push
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void push(E e);"
79225,"/** 
 * Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns <tt>null</tt> if this deque is empty. <p>This method is equivalent to   {@link #peekFirst()}.
 * @return the head of the queue represented by this deque, or<tt>null</tt> if this deque is empty
 */
E peek();","/** 
 * Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns   {@code null} if this deque is empty.<p>This method is equivalent to  {@link #peekFirst()}.
 * @return the head of the queue represented by this deque, or{@code null} if this deque is empty
 */
E peek();"
79226,"/** 
 * Inserts the specified element at the end of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addLast} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return <tt>true</tt> if the element was added to this deque, else<tt>false</tt>
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerLast(E e);","/** 
 * Inserts the specified element at the end of this deque unless it would violate capacity restrictions.  When using a capacity-restricted deque, this method is generally preferable to the   {@link #addLast} method,which can fail to insert an element only by throwing an exception.
 * @param e the element to add
 * @return {@code true} if the element was added to this deque, else{@code false}
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
boolean offerLast(E e);"
79227,"/** 
 * Returns <tt>true</tt> if this deque contains the specified element. More formally, returns <tt>true</tt> if and only if this deque contains at least one element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 * @param o element whose presence in this deque is to be tested
 * @return <tt>true</tt> if this deque contains the specified element
 * @throws ClassCastException if the type of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean contains(Object o);","/** 
 * Returns   {@code true} if this deque contains the specified element.More formally, returns  {@code true} if and only if this deque containsat least one element  {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 * @param o element whose presence in this deque is to be tested
 * @return {@code true} if this deque contains the specified element
 * @throws ClassCastException if the type of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean contains(Object o);"
79228,"/** 
 * Retrieves and removes the first element of this deque, or returns <tt>null</tt> if this deque is empty.
 * @return the head of this deque, or <tt>null</tt> if this deque is empty
 */
E pollFirst();","/** 
 * Retrieves and removes the first element of this deque, or returns   {@code null} if this deque is empty.
 * @return the head of this deque, or {@code null} if this deque is empty
 */
E pollFirst();"
79229,"/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element <tt>e</tt> such that <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns <tt>true</tt> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return <tt>true</tt> if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeFirstOccurrence(Object o);","/** 
 * Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element   {@code e} such that<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt> (if such an element exists). Returns  {@code true} if this deque contained the specified element(or equivalently, if this deque changed as a result of the call).
 * @param o element to be removed from this deque, if present
 * @return {@code true} if an element was removed as a result of this call
 * @throws ClassCastException if the class of the specified elementis incompatible with this deque (<a href=""Collection.html#optional-restrictions"">optional</a>)
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements (<a href=""Collection.html#optional-restrictions"">optional</a>)
 */
boolean removeFirstOccurrence(Object o);"
79230,"/** 
 * Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions. When using a capacity-restricted deque, it is generally preferable to use method   {@link #offerFirst}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addFirst(E e);","/** 
 * Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an   {@code IllegalStateException} if no space is currentlyavailable.  When using a capacity-restricted deque, it is generally preferable to use method  {@link #offerFirst}.
 * @param e the element to add
 * @throws IllegalStateException if the element cannot be added at thistime due to capacity restrictions
 * @throws ClassCastException if the class of the specified elementprevents it from being added to this deque
 * @throws NullPointerException if the specified element is null and thisdeque does not permit null elements
 * @throws IllegalArgumentException if some property of the specifiedelement prevents it from being added to this deque
 */
void addFirst(E e);"
79231,"/** 
 * A static method to retrieve the named object. See   {@link #doLookup(Name)} for details.
 * @param name the name of the object to look up
 * @return  the object bound to <tt>name</tt>
 * @throws NamingException if a naming exception is encountered
 * @since 1.6
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T doLookup(String name) throws NamingException {
  return (T)(new InitialContext()).lookup(name);
}","/** 
 * A static method to retrieve the named object. See   {@link #doLookup(Name)} for details.
 * @param < T > the type of the returned object
 * @param name the name of the object to look up
 * @return  the object bound to <tt>name</tt>
 * @throws NamingException if a naming exception is encountered
 * @since 1.6
 */
@SuppressWarnings(""String_Node_Str"") public static <T>T doLookup(String name) throws NamingException {
  return (T)(new InitialContext()).lookup(name);
}"
79232,"/** 
 * Determines whether obj is equal to this RefAddr. <p> obj is equal to this RefAddr all of these conditions are true <ul> non-null <li> instance of RefAddr <li> obj has the same address type as this RefAddr (using String.compareTo()) <li> both obj and this RefAddr's contents are null or they are equal (using the equals() test). </ul>
 * @param obj possibly null obj to check.
 * @return true if obj is equal to this refaddr; false otherwise.
 * @see #getContent
 * @see #getType
 */
public boolean equals(Object obj){
  if ((obj != null) && (obj instanceof RefAddr)) {
    RefAddr target=(RefAddr)obj;
    if (addrType.compareTo(target.addrType) == 0) {
      Object thisobj=this.getContent();
      Object thatobj=target.getContent();
      if (thisobj == thatobj)       return true;
      if (thisobj != null)       return thisobj.equals(thatobj);
    }
  }
  return false;
}","/** 
 * Determines whether obj is equal to this RefAddr. <p> obj is equal to this RefAddr all of these conditions are true <ul> <li> non-null <li> instance of RefAddr <li> obj has the same address type as this RefAddr (using String.compareTo()) <li> both obj and this RefAddr's contents are null or they are equal (using the equals() test). </ul>
 * @param obj possibly null obj to check.
 * @return true if obj is equal to this refaddr; false otherwise.
 * @see #getContent
 * @see #getType
 */
public boolean equals(Object obj){
  if ((obj != null) && (obj instanceof RefAddr)) {
    RefAddr target=(RefAddr)obj;
    if (addrType.compareTo(target.addrType) == 0) {
      Object thisobj=this.getContent();
      Object thatobj=target.getContent();
      if (thisobj == thatobj)       return true;
      if (thisobj != null)       return thisobj.equals(thatobj);
    }
  }
  return false;
}"
79233,"protected ControlFactory(){
}","/** 
 * Creates a new instance of a control factory.
 */
protected ControlFactory(){
}"
79234,"/** 
 * Retrieves the ErrorManager for this Handler.
 * @exception SecurityException  if a security manager exists and ifthe caller does not have <tt>LoggingPermission(""control"")</tt>.
 */
public ErrorManager getErrorManager(){
  checkPermission();
  return errorManager;
}","/** 
 * Retrieves the ErrorManager for this Handler.
 * @return the ErrorManager for this Handler
 * @exception SecurityException  if a security manager exists and ifthe caller does not have <tt>LoggingPermission(""control"")</tt>.
 */
public ErrorManager getErrorManager(){
  checkPermission();
  return errorManager;
}"
79235,"/** 
 * Return the global LogManager object.
 */
public static LogManager getLogManager(){
  if (manager != null) {
    manager.readPrimordialConfiguration();
  }
  return manager;
}","/** 
 * Returns the global LogManager object.
 * @return the global LogManager object
 */
public static LogManager getLogManager(){
  if (manager != null) {
    manager.readPrimordialConfiguration();
  }
  return manager;
}"
79236,"/** 
 * Get the localization resource bundle name <p> This is the name for the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable.
 */
public String getResourceBundleName(){
  return resourceBundleName;
}","/** 
 * Get the localization resource bundle name <p> This is the name for the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable.
 * @return the localization resource bundle name
 */
public String getResourceBundleName(){
  return resourceBundleName;
}"
79237,"/** 
 * Get the localization resource bundle <p> This is the ResourceBundle that should be used to localize the message string before formatting it.  The result may be null if the message is not localizable, or if no suitable ResourceBundle is available.
 */
public ResourceBundle getResourceBundle(){
  return resourceBundle;
}","/** 
 * Get the localization resource bundle <p> This is the ResourceBundle that should be used to localize the message string before formatting it.  The result may be null if the message is not localizable, or if no suitable ResourceBundle is available.
 * @return the localization resource bundle
 */
public ResourceBundle getResourceBundle(){
  return resourceBundle;
}"
79238,"/** 
 * Set the sequence number. <p> Sequence numbers are normally assigned in the LogRecord constructor, so it should not normally be necessary to use this method.
 */
public void setSequenceNumber(long seq){
  sequenceNumber=seq;
}","/** 
 * Set the sequence number. <p> Sequence numbers are normally assigned in the LogRecord constructor, so it should not normally be necessary to use this method.
 * @param seq the sequence number
 */
public void setSequenceNumber(long seq){
  sequenceNumber=seq;
}"
79239,"/** 
 * <p>Returns an object representing the value of OUT parameter  {@code parameterName} and will convert from theSQL type of the parameter to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements  {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param parameterName the name of the parameter
 * @param type Class representing the Java data type to convertthe designated parameter to.
 * @return an instance of {@code type} holding the OUT parametervalue
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String parameterName,Class<T> type) throws SQLException ;","/** 
 * <p>Returns an object representing the value of OUT parameter  {@code parameterName} and will convert from theSQL type of the parameter to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements  {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param parameterName the name of the parameter
 * @param type Class representing the Java data type to convertthe designated parameter to.
 * @param < T > the type of the class modeled by this Class object
 * @return an instance of {@code type} holding the OUT parametervalue
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String parameterName,Class<T> type) throws SQLException ;"
79240,"/** 
 * Retrieves whether this database supports the given result set holdability.
 * @param holdability one of the following constants:<code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT<code>
 * @return <code>true</code> if so; <code>false</code> otherwise
 * @exception SQLException if a database access error occurs
 * @see Connection
 * @since 1.4
 */
boolean supportsResultSetHoldability(int holdability) throws SQLException ;","/** 
 * Retrieves whether this database supports the given result set holdability.
 * @param holdability one of the following constants:<code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
 * @return <code>true</code> if so; <code>false</code> otherwise
 * @exception SQLException if a database access error occurs
 * @see Connection
 * @since 1.4
 */
boolean supportsResultSetHoldability(int holdability) throws SQLException ;"
79241,"/** 
 * Return the parent Logger of all the Loggers used by this driver. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this driver. Configuring this Logger will affect all of the log messages generated by the driver. In the worst case, this may be the root Logger.
 * @return the parent Logger for this driver
 * @throws SQLFeatureNotSupportedException if the driver does not use <code>java.util.logging<code>.
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;","/** 
 * Return the parent Logger of all the Loggers used by this driver. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this driver. Configuring this Logger will affect all of the log messages generated by the driver. In the worst case, this may be the root Logger.
 * @return the parent Logger for this driver
 * @throws SQLFeatureNotSupportedException if the driver does not use{@code java.util.logging}.
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;"
79242,"/** 
 * Reports whether this driver is a genuine JDBC Compliant<sup><font size=-2>TM</font></sup> driver. A driver may only report <code>true</code> here if it passes the JDBC compliance tests; otherwise it is required to return <code>false</code>. <P> JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will be available for all the major commercial databases. <P> This method is not intended to encourage the development of non-JDBC compliant drivers, but is a recognition of the fact that some vendors are interested in using the JDBC API and framework for lightweight databases that do not support full database functionality, or for special databases such as document information retrieval where a SQL implementation may not be feasible.
 * @return <code>true</code> if this driver is JDBC Compliant; <code>false</code>otherwise
 */
boolean jdbcCompliant();","/** 
 * Reports whether this driver is a genuine JDBC Compliant&trade; driver. A driver may only report <code>true</code> here if it passes the JDBC compliance tests; otherwise it is required to return <code>false</code>. <P> JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level.  It is expected that JDBC compliant drivers will be available for all the major commercial databases. <P> This method is not intended to encourage the development of non-JDBC compliant drivers, but is a recognition of the fact that some vendors are interested in using the JDBC API and framework for lightweight databases that do not support full database functionality, or for special databases such as document information retrieval where a SQL implementation may not be feasible.
 * @return <code>true</code> if this driver is JDBC Compliant; <code>false</code>otherwise
 */
boolean jdbcCompliant();"
79243,"/** 
 * <p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements   {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param columnLabel the label for the column specified with the SQL AS clause.If the SQL AS clause was not specified, then the label is the name of the column
 * @param type Class representing the Java data type to convert the designatedcolumn to.
 * @return an instance of {@code type} holding the column value
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String columnLabel,Class<T> type) throws SQLException ;","/** 
 * <p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements   {@code SQLData}, or   {@code Struct}. Additional conversions may be supported and are vendor defined.
 * @param columnLabel the label for the column specified with the SQL AS clause.If the SQL AS clause was not specified, then the label is the name of the column
 * @param type Class representing the Java data type to convert the designatedcolumn to.
 * @param < T > the type of the class modeled by this Class object
 * @return an instance of {@code type} holding the column value
 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs
 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.7
 */
public <T>T getObject(String columnLabel,Class<T> type) throws SQLException ;"
79244,"/** 
 * Reads the next attribute in the stream and returns it as an  {@code Object} in the Java programming language. Theactual type of the object returned is determined by the specified Java data type, and any customizations present in this stream's type map. <P>A type map is registered with the stream by the JDBC driver before the stream is passed to the application. <P>When the attribute at the head of the stream is an SQL  {@code NULL}the method returns   {@code null}. If the attribute is an SQL structured or distinct type, it determines the SQL type of the attribute at the head of the stream. If the stream's type map has an entry for that SQL type, the driver constructs an object of the appropriate class and calls the method  {@code SQLData.readSQL} on that object, which reads additional data from thestream, using the protocol described for that method. <p> The default implementation will throw  {@code SQLFeatureNotSupportedException}
 * @param type Class representing the Java data type to convert the attribute to.
 * @return the attribute at the head of the stream as an {@code Object} in theJava programming language; {@code null} if the attribute is SQL {@code NULL}
 * @exception SQLException if a database access error occurs
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.8
 */
default <T>T readObject(Class<T> type) throws SQLException {
  throw new SQLFeatureNotSupportedException();
}","/** 
 * Reads the next attribute in the stream and returns it as an  {@code Object} in the Java programming language. Theactual type of the object returned is determined by the specified Java data type, and any customizations present in this stream's type map. <P>A type map is registered with the stream by the JDBC driver before the stream is passed to the application. <P>When the attribute at the head of the stream is an SQL  {@code NULL}the method returns   {@code null}. If the attribute is an SQL structured or distinct type, it determines the SQL type of the attribute at the head of the stream. If the stream's type map has an entry for that SQL type, the driver constructs an object of the appropriate class and calls the method  {@code SQLData.readSQL} on that object, which reads additional data from thestream, using the protocol described for that method. <p> The default implementation will throw  {@code SQLFeatureNotSupportedException}
 * @param < T > the type of the class modeled by this Class object
 * @param type Class representing the Java data type to convert the attribute to.
 * @return the attribute at the head of the stream as an {@code Object} in theJava programming language; {@code null} if the attribute is SQL {@code NULL}
 * @exception SQLException if a database access error occurs
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.8
 */
default <T>T readObject(Class<T> type) throws SQLException {
  throw new SQLFeatureNotSupportedException();
}"
79245,"/** 
 * Returns a Result for setting the XML value designated by this SQLXML instance. <p> The systemID of the Result is implementation dependent. <p> The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation. <p> Note that SAX is a callback architecture and the returned SAXResult has a content handler assigned that will receive the SAX events based on the contents of the XML.  Call the content handler with the contents of the XML document to assign the values. <pre> SAXResult saxResult = sqlxml.setResult(SAXResult.class); ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler(); contentHandler.startDocument(); // set the XML elements and attributes into the result contentHandler.endDocument(); </pre>
 * @param resultClass The class of the result, or null.If resultClass is null, a vendor specific Result implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMResult - returns a DOMResult javax.xml.transform.sax.SAXResult - returns a SAXResult javax.xml.transform.stax.StAXResult - returns a StAXResult javax.xml.transform.stream.StreamResult - returns a StreamResult </pre>
 * @return Returns a Result for setting the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not writable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Result>T setResult(Class<T> resultClass) throws SQLException ;","/** 
 * Returns a Result for setting the XML value designated by this SQLXML instance. <p> The systemID of the Result is implementation dependent. <p> The SQL XML object becomes not writeable when this method is called and may also become not readable depending on implementation. <p> Note that SAX is a callback architecture and the returned SAXResult has a content handler assigned that will receive the SAX events based on the contents of the XML.  Call the content handler with the contents of the XML document to assign the values. <pre> SAXResult saxResult = sqlxml.setResult(SAXResult.class); ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler(); contentHandler.startDocument(); // set the XML elements and attributes into the result contentHandler.endDocument(); </pre>
 * @param < T > the type of the class modeled by this Class object
 * @param resultClass The class of the result, or null.If resultClass is null, a vendor specific Result implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMResult - returns a DOMResult javax.xml.transform.sax.SAXResult - returns a SAXResult javax.xml.transform.stax.StAXResult - returns a StAXResult javax.xml.transform.stream.StreamResult - returns a StreamResult </pre>
 * @return Returns a Result for setting the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not writable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Result>T setResult(Class<T> resultClass) throws SQLException ;"
79246,"/** 
 * Returns a Source for reading the XML value designated by this SQLXML instance. Sources are used as inputs to XML parsers and XSLT transformers. <p> Sources for XML parsers will have namespace processing on by default. The systemID of the Source is implementation dependent. <p> The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation. <p> Note that SAX is a callback architecture, so a returned SAXSource should then be set with a content handler that will receive the SAX events from parsing.  The content handler will receive callbacks based on the contents of the XML. <pre> SAXSource saxSource = sqlxml.getSource(SAXSource.class); XMLReader xmlReader = saxSource.getXMLReader(); xmlReader.setContentHandler(myHandler); xmlReader.parse(saxSource.getInputSource()); </pre>
 * @param sourceClass The class of the source, or null.If the class is null, a vendor specifc Source implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMSource - returns a DOMSource javax.xml.transform.sax.SAXSource - returns a SAXSource javax.xml.transform.stax.StAXSource - returns a StAXSource javax.xml.transform.stream.StreamSource - returns a StreamSource </pre>
 * @return a Source for reading the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not readable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Source>T getSource(Class<T> sourceClass) throws SQLException ;","/** 
 * Returns a Source for reading the XML value designated by this SQLXML instance. Sources are used as inputs to XML parsers and XSLT transformers. <p> Sources for XML parsers will have namespace processing on by default. The systemID of the Source is implementation dependent. <p> The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation. <p> Note that SAX is a callback architecture, so a returned SAXSource should then be set with a content handler that will receive the SAX events from parsing.  The content handler will receive callbacks based on the contents of the XML. <pre> SAXSource saxSource = sqlxml.getSource(SAXSource.class); XMLReader xmlReader = saxSource.getXMLReader(); xmlReader.setContentHandler(myHandler); xmlReader.parse(saxSource.getInputSource()); </pre>
 * @param < T > the type of the class modeled by this Class object
 * @param sourceClass The class of the source, or null.If the class is null, a vendor specifc Source implementation will be returned. The following classes are supported at a minimum: <pre> javax.xml.transform.dom.DOMSource - returns a DOMSource javax.xml.transform.sax.SAXSource - returns a SAXSource javax.xml.transform.stax.StAXSource - returns a StAXSource javax.xml.transform.stream.StreamSource - returns a StreamSource </pre>
 * @return a Source for reading the XML value.
 * @throws SQLException if there is an error processing the XML valueor if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not readable.
 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method
 * @since 1.6
 */
<T extends Source>T getSource(Class<T> sourceClass) throws SQLException ;"
79247,"/** 
 * Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy. If the receiver implements the interface then the result is the receiver or a proxy for the receiver. If the receiver is a wrapper and the wrapped object implements the interface then the result is the wrapped object or a proxy for the wrapped object. Otherwise return the the result of calling <code>unwrap</code> recursively on the wrapped object or a proxy for that result. If the receiver is not a wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
 * @param iface A Class defining an interface that the result must implement.
 * @return an object that implements the interface. May be a proxy for the actual implementing object.
 * @throws java.sql.SQLException If no object found that implements the interface
 * @since 1.6
 */
<T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException ;","/** 
 * Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy. If the receiver implements the interface then the result is the receiver or a proxy for the receiver. If the receiver is a wrapper and the wrapped object implements the interface then the result is the wrapped object or a proxy for the wrapped object. Otherwise return the the result of calling <code>unwrap</code> recursively on the wrapped object or a proxy for that result. If the receiver is not a wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
 * @param < T > the type of the class modeled by this Class object
 * @param iface A Class defining an interface that the result must implement.
 * @return an object that implements the interface. May be a proxy for the actual implementing object.
 * @throws java.sql.SQLException If no object found that implements the interface
 * @since 1.6
 */
<T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException ;"
79248,"/** 
 * Return the parent Logger of all the Loggers used by this data source. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this data source. Configuring this Logger will affect all of the log messages generated by the data source. In the worst case, this may be the root Logger.
 * @return the parent Logger for this data source
 * @throws SQLFeatureNotSupportedException if the data source does not use <code>java.util.logging<code>.
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;","/** 
 * Return the parent Logger of all the Loggers used by this data source. This should be the Logger farthest from the root Logger that is still an ancestor of all of the Loggers used by this data source. Configuring this Logger will affect all of the log messages generated by the data source. In the worst case, this may be the root Logger.
 * @return the parent Logger for this data source
 * @throws SQLFeatureNotSupportedException if the data source does not use{@code java.util.logging}
 * @since 1.7
 */
public Logger getParentLogger() throws SQLFeatureNotSupportedException ;"
79249,"/** 
 * Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows. The <code>numRows</code> parameter ensures that this event will only be fired every <code>numRow</code>. <p> The source of the event can be retrieved with the method event.getSource.
 * @param event a <code>RowSetEvent</code> object that contains the<code>RowSet</code> object that is the source of the events
 * @param numRows when populating, the number of rows interval on which the<code>CachedRowSet</code> populated should fire; the default value is zero; cannot be less than <code>fetchSize</code> or zero
 */
public void rowSetPopulated(RowSetEvent event,int numRows) throws SQLException ;","/** 
 * Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows. The <code>numRows</code> parameter ensures that this event will only be fired every <code>numRow</code>. <p> The source of the event can be retrieved with the method event.getSource.
 * @param event a <code>RowSetEvent</code> object that contains the<code>RowSet</code> object that is the source of the events
 * @param numRows when populating, the number of rows interval on which the<code>CachedRowSet</code> populated should fire; the default value is zero; cannot be less than <code>fetchSize</code> or zero
 * @throws SQLException {@code numRows < 0 or numRows < getFetchSize() }
 */
public void rowSetPopulated(RowSetEvent event,int numRows) throws SQLException ;"
79250,"/** 
 * Propagates all row update, insert and delete changes to the data source backing this <code>CachedRowSet</code> object using the specified <code>Connection</code> object to establish a connection to the data source. <P> The other version of the <code>acceptChanges</code> method is not passed a connection because it uses the <code>Connection</code> object already defined within the <code>RowSet</code> object, which is the connection used for populating it initially. <P> This form of the method <code>acceptChanges</code> is similar to the form that takes no arguments; however, unlike the other form, this form can be used only when the underlying data source is a JDBC data source. The updated <code>Connection</code> properties must be used by the <code>SyncProvider</code> to reset the <code>RowSetWriter</code> configuration to ensure that the contents of the <code>CachedRowSet</code> object are synchronized correctly. <P> When the method <code>acceptChanges</code> executes successfully, in addition to writing changes to the data source, it makes the values in the current row be the values in the original row. <P> Depending on the synchronization level of the <code>SyncProvider</code> implementation being used, the writer will compare the original values with those in the data source to check for conflicts. When there is a conflict, the <code>RIOptimisticProvider</code> implementation, for example, throws a <code>SyncProviderException</code> and does not write anything to the data source. <P> An application may choose to catch the <code>SyncProviderException</code> object and retrieve the <code>SyncResolver</code> object it contains. The <code>SyncResolver</code> object lists the conflicts row by row and sets a lock on the data source to avoid further conflicts while the current conflicts are being resolved. Further, for each conflict, it provides methods for examining the conflict and setting the value that should be persisted in the data source. After all conflicts have been resolved, an application must call the <code>acceptChanges</code> method again to write resolved values to the data source.  If all of the values in the data source are already the values to be persisted, the method <code>acceptChanges</code> does nothing. <P> Some provider implementations may use locks to ensure that there are no conflicts.  In such cases, it is guaranteed that the writer will succeed in writing changes to the data source when the method <code>acceptChanges</code> is called.  This method may be called immediately after the methods <code>updateRow</code>, <code>insertRow</code>, or <code>deleteRow</code> have been called, but it is more efficient to call it only once after all changes have been made so that only one connection needs to be established. <P> Note: The <code>acceptChanges()</code> method will determine if the <code>COMMIT_ON_ACCEPT_CHANGES</code> is set to true or not. If it is set to true, all updates in the synchronization are committed to the data source. Otherwise, the application <b>must</b> explicity call the <code>commit</code> or <code>rollback</code> methods as appropriate.
 * @param con a standard JDBC <code>Connection</code> object
 * @throws SQLException if the cursor is on the insert row
 * @throws SyncProviderException if the underlyingsynchronization provider's writer fails to write the updates back to the data source
 * @see #acceptChanges()
 * @see javax.sql.RowSetWriter
 * @see javax.sql.rowset.spi.SyncFactory
 * @see javax.sql.rowset.spi.SyncProvider
 * @see javax.sql.rowset.spi.SyncProviderException
 * @see javax.sql.rowset.spi.SyncResolver
 */
public void acceptChanges(Connection con) throws SyncProviderException ;","/** 
 * Propagates all row update, insert and delete changes to the data source backing this <code>CachedRowSet</code> object using the specified <code>Connection</code> object to establish a connection to the data source. <P> The other version of the <code>acceptChanges</code> method is not passed a connection because it uses the <code>Connection</code> object already defined within the <code>RowSet</code> object, which is the connection used for populating it initially. <P> This form of the method <code>acceptChanges</code> is similar to the form that takes no arguments; however, unlike the other form, this form can be used only when the underlying data source is a JDBC data source. The updated <code>Connection</code> properties must be used by the <code>SyncProvider</code> to reset the <code>RowSetWriter</code> configuration to ensure that the contents of the <code>CachedRowSet</code> object are synchronized correctly. <P> When the method <code>acceptChanges</code> executes successfully, in addition to writing changes to the data source, it makes the values in the current row be the values in the original row. <P> Depending on the synchronization level of the <code>SyncProvider</code> implementation being used, the writer will compare the original values with those in the data source to check for conflicts. When there is a conflict, the <code>RIOptimisticProvider</code> implementation, for example, throws a <code>SyncProviderException</code> and does not write anything to the data source. <P> An application may choose to catch the <code>SyncProviderException</code> object and retrieve the <code>SyncResolver</code> object it contains. The <code>SyncResolver</code> object lists the conflicts row by row and sets a lock on the data source to avoid further conflicts while the current conflicts are being resolved. Further, for each conflict, it provides methods for examining the conflict and setting the value that should be persisted in the data source. After all conflicts have been resolved, an application must call the <code>acceptChanges</code> method again to write resolved values to the data source.  If all of the values in the data source are already the values to be persisted, the method <code>acceptChanges</code> does nothing. <P> Some provider implementations may use locks to ensure that there are no conflicts.  In such cases, it is guaranteed that the writer will succeed in writing changes to the data source when the method <code>acceptChanges</code> is called.  This method may be called immediately after the methods <code>updateRow</code>, <code>insertRow</code>, or <code>deleteRow</code> have been called, but it is more efficient to call it only once after all changes have been made so that only one connection needs to be established. <P> Note: The <code>acceptChanges()</code> method will determine if the <code>COMMIT_ON_ACCEPT_CHANGES</code> is set to true or not. If it is set to true, all updates in the synchronization are committed to the data source. Otherwise, the application <b>must</b> explicity call the <code>commit</code> or <code>rollback</code> methods as appropriate.
 * @param con a standard JDBC <code>Connection</code> object
 * @throws SyncProviderException if the underlyingsynchronization provider's writer fails to write the updates back to the data source
 * @see #acceptChanges()
 * @see javax.sql.RowSetWriter
 * @see javax.sql.rowset.spi.SyncFactory
 * @see javax.sql.rowset.spi.SyncProvider
 * @see javax.sql.rowset.spi.SyncProviderException
 * @see javax.sql.rowset.spi.SyncResolver
 */
public void acceptChanges(Connection con) throws SyncProviderException ;"
79251,"/** 
 * Creates a <code>CachedRowSet</code> object that is an empty copy of this <code>CachedRowSet</code> object.  The copy must not contain any contents but only represent the table structure of the original <code>CachedRowSet</code> object. In addition, primary or foreign key constraints set in the originating <code>CachedRowSet</code> object must be equally enforced in the new empty <code>CachedRowSet</code> object. In contrast to the <code>RowSet</code> object generated from a <code>createShared</code> method call, updates made to a copy of this <code>CachedRowSet</code> object with the <code>createCopySchema</code> method must not be visible to it. <P> Applications can form a <code>WebRowSet</code> object from the <code>CachedRowSet</code> object returned by this method in order to export the <code>RowSet</code> schema definition to XML for future use.
 * @throws SQLException if an error occurs in cloning the structure of this<code>CachedRowSet</code> object
 * @see #createShared
 * @see #createCopySchema
 * @see #createCopyNoConstraints
 * @see javax.sql.RowSetEvent
 * @see javax.sql.RowSetListener
 */
public CachedRowSet createCopySchema() throws SQLException ;","/** 
 * Creates a <code>CachedRowSet</code> object that is an empty copy of this <code>CachedRowSet</code> object.  The copy must not contain any contents but only represent the table structure of the original <code>CachedRowSet</code> object. In addition, primary or foreign key constraints set in the originating <code>CachedRowSet</code> object must be equally enforced in the new empty <code>CachedRowSet</code> object. In contrast to the <code>RowSet</code> object generated from a <code>createShared</code> method call, updates made to a copy of this <code>CachedRowSet</code> object with the <code>createCopySchema</code> method must not be visible to it. <P> Applications can form a <code>WebRowSet</code> object from the <code>CachedRowSet</code> object returned by this method in order to export the <code>RowSet</code> schema definition to XML for future use.
 * @return An empty copy of this {@code CachedRowSet} object
 * @throws SQLException if an error occurs in cloning the structure of this<code>CachedRowSet</code> object
 * @see #createShared
 * @see #createCopySchema
 * @see #createCopyNoConstraints
 * @see javax.sql.RowSetEvent
 * @see javax.sql.RowSetListener
 */
public CachedRowSet createCopySchema() throws SQLException ;"
79252,"/** 
 * Put the given key-value association into this preference node.  It is guaranteed that <tt>key</tt> and <tt>value</tt> are non-null and of legal length.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for any of these things.) <p>This method is invoked with the lock on this node held.
 */
protected abstract void putSpi(String key,String value);","/** 
 * Put the given key-value association into this preference node.  It is guaranteed that <tt>key</tt> and <tt>value</tt> are non-null and of legal length.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for any of these things.) <p>This method is invoked with the lock on this node held.
 * @param key the key
 * @param value the value
 */
protected abstract void putSpi(String key,String value);"
79253,"/** 
 * Remove the association (if any) for the specified key at this preference node.  It is guaranteed that <tt>key</tt> is non-null. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for either of these things.) <p>This method is invoked with the lock on this node held.
 */
protected abstract void removeSpi(String key);","/** 
 * Remove the association (if any) for the specified key at this preference node.  It is guaranteed that <tt>key</tt> is non-null. Also, it is guaranteed that this node has not been removed. (The implementor needn't check for either of these things.) <p>This method is invoked with the lock on this node held.
 * @param key the key
 */
protected abstract void removeSpi(String key);"
79254,"/** 
 * Return the value associated with the specified key at this preference node, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.  It is guaranteed that <tt>key</tt> is non-null.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for either of these things.) <p> Generally speaking, this method should not throw an exception under any circumstances.  If, however, if it does throw an exception, the exception will be intercepted and treated as a <tt>null</tt> return value. <p>This method is invoked with the lock on this node held.
 * @return the value associated with the specified key at this preferencenode, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.
 */
protected abstract String getSpi(String key);","/** 
 * Return the value associated with the specified key at this preference node, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.  It is guaranteed that <tt>key</tt> is non-null.  Also, it is guaranteed that this node has not been removed.  (The implementor needn't check for either of these things.) <p> Generally speaking, this method should not throw an exception under any circumstances.  If, however, if it does throw an exception, the exception will be intercepted and treated as a <tt>null</tt> return value. <p>This method is invoked with the lock on this node held.
 * @param key the key
 * @return the value associated with the specified key at this preferencenode, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time.
 */
protected abstract String getSpi(String key);"
79255,"/** 
 * Returns the user root preference node corresponding to the calling user.  In a server, the returned value will typically depend on some implicit client-context.
 */
Preferences userRoot();","/** 
 * Returns the user root preference node corresponding to the calling user.  In a server, the returned value will typically depend on some implicit client-context.
 * @return the user root preference node corresponding to the callinguser
 */
Preferences userRoot();"
79256,"/** 
 * Returns the system root preference node.  (Multiple calls on this method will return the same object reference.)
 */
Preferences systemRoot();","/** 
 * Returns the system root preference node.  (Multiple calls on this method will return the same object reference.)
 * @return the system root preference node
 */
Preferences systemRoot();"
79257,"/** 
 * Returns an implementation of an interface using member functions of a scripting object compiled in the interpreter. The methods of the interface may be implemented using the <code>invokeMethod</code> method.
 * @param thiz The scripting object whose member functions are used to implement the methods of the interface.
 * @param clasz The <code>Class</code> object of the interface to return.
 * @return An instance of requested interface - null if the requested interface is unavailable,i. e. if compiled methods in the <code>ScriptEngine</code> cannot be found matching the ones in the requested interface.
 * @throws IllegalArgumentException if the specified <code>Class</code> objectis null or is not an interface, or if the specified Object is null or does not represent a scripting object.
 */
public <T>T getInterface(Object thiz,Class<T> clasz);","/** 
 * Returns an implementation of an interface using member functions of a scripting object compiled in the interpreter. The methods of the interface may be implemented using the <code>invokeMethod</code> method.
 * @param < T > the type of the interface to return
 * @param thiz The scripting object whose member functions are used to implement the methods of the interface.
 * @param clasz The <code>Class</code> object of the interface to return.
 * @return An instance of requested interface - null if the requested interface is unavailable,i. e. if compiled methods in the <code>ScriptEngine</code> cannot be found matching the ones in the requested interface.
 * @throws IllegalArgumentException if the specified <code>Class</code> objectis null or is not an interface, or if the specified Object is null or does not represent a scripting object.
 */
public <T>T getInterface(Object thiz,Class<T> clasz);"
79258,"/** 
 * Used to call top-level procedures and functions defined in scripts.
 * @param args Arguments to pass to the procedure or function
 * @return The value returned by the procedure or function
 * @throws ScriptException if an error occurrs during invocation of the method.
 * @throws NoSuchMethodException if method with given name or matching argument types cannot be found.
 * @throws NullPointerException if method name is null.
 */
public Object invokeFunction(String name,Object... args) throws ScriptException, NoSuchMethodException ;","/** 
 * Used to call top-level procedures and functions defined in scripts.
 * @param name of the procedure or function to call
 * @param args Arguments to pass to the procedure or function
 * @return The value returned by the procedure or function
 * @throws ScriptException if an error occurrs during invocation of the method.
 * @throws NoSuchMethodException if method with given name or matching argument types cannot be found.
 * @throws NullPointerException if method name is null.
 */
public Object invokeFunction(String name,Object... args) throws ScriptException, NoSuchMethodException ;"
79259,"/** 
 * Gets the <code>Bindings</code>  associated with the given scope in this <code>ScriptContext</code>.
 * @return The associated <code>Bindings</code>.  Returns <code>null</code> if it has notbeen set.
 * @throws IllegalArgumentException If no <code>Bindings</code> is defined for thespecified scope value in <code>ScriptContext</code> of this type.
 */
public Bindings getBindings(int scope);","/** 
 * Gets the <code>Bindings</code>  associated with the given scope in this <code>ScriptContext</code>.
 * @return The associated <code>Bindings</code>.  Returns <code>null</code> if it has notbeen set.
 * @param scope The scope
 * @throws IllegalArgumentException If no <code>Bindings</code> is defined for thespecified scope value in <code>ScriptContext</code> of this type.
 */
public Bindings getBindings(int scope);"
79260,"/** 
 * Returns an immutable list of  short names for the <code>ScriptEngine</code>, which may be used to identify the <code>ScriptEngine</code> by the <code>ScriptEngineManager</code>. For instance, an implementation based on the Mozilla Rhino Javascript engine might return list containing {&quot;javascript&quot;, &quot;rhino&quot;}.
 */
public List<String> getNames();","/** 
 * Returns an immutable list of  short names for the <code>ScriptEngine</code>, which may be used to identify the <code>ScriptEngine</code> by the <code>ScriptEngineManager</code>. For instance, an implementation based on the Mozilla Rhino Javascript engine might return list containing {&quot;javascript&quot;, &quot;rhino&quot;}.
 * @return an immutable list of short names
 */
public List<String> getNames();"
79261,"public SimpleScriptContext(){
  engineScope=new SimpleBindings();
  globalScope=null;
  reader=new InputStreamReader(System.in);
  writer=new PrintWriter(System.out,true);
  errorWriter=new PrintWriter(System.err,true);
}","/** 
 * Create a   {@code SimpleScriptContext}.
 */
public SimpleScriptContext(){
  engineScope=new SimpleBindings();
  globalScope=null;
  reader=new InputStreamReader(System.in);
  writer=new PrintWriter(System.out,true);
  errorWriter=new PrintWriter(System.err,true);
}"
79262,"/** 
 * Returns the total number of compressed bytes output so far.</p>
 * @return the total (non-negative) number of compressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}","/** 
 * Returns the total number of compressed bytes output so far.
 * @return the total (non-negative) number of compressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}"
79263,"/** 
 * Returns the total number of uncompressed bytes input so far.</p>
 * @return the total (non-negative) number of uncompressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}","/** 
 * Returns the total number of uncompressed bytes input so far.
 * @return the total (non-negative) number of uncompressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}"
79264,"/** 
 * Returns the total number of uncompressed bytes output so far.</p>
 * @return the total (non-negative) number of uncompressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}","/** 
 * Returns the total number of uncompressed bytes output so far.
 * @return the total (non-negative) number of uncompressed bytes output so far
 * @since 1.5
 */
public long getBytesWritten(){
synchronized (zsRef) {
    ensureOpen();
    return bytesWritten;
  }
}"
79265,"/** 
 * Returns the total number of compressed bytes input so far.</p>
 * @return the total (non-negative) number of compressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}","/** 
 * Returns the total number of compressed bytes input so far.
 * @return the total (non-negative) number of compressed bytes input so far
 * @since 1.5
 */
public long getBytesRead(){
synchronized (zsRef) {
    ensureOpen();
    return bytesRead;
  }
}"
79266,"/** 
 * Returns a hash code for a   {@code boolean} value; compatible with{@code Boolean.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code boolean} value.
 */
public static int hashCode(boolean value){
  return value ? 1231 : 1237;
}","/** 
 * Returns a hash code for a   {@code boolean} value; compatible with{@code Boolean.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code boolean} value.
 * @since 1.8
 */
public static int hashCode(boolean value){
  return value ? 1231 : 1237;
}"
79267,"/** 
 * Returns a hash code for a   {@code byte} value; compatible with{@code Byte.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code byte} value.
 */
public static int hashCode(byte value){
  return (int)value;
}","/** 
 * Returns a hash code for a   {@code byte} value; compatible with{@code Byte.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code byte} value.
 * @since 1.8
 */
public static int hashCode(byte value){
  return (int)value;
}"
79268,"/** 
 * Casts this   {@code Class} object to represent a subclass of the classrepresented by the specified class object.  Checks that the cast is valid, and throws a  {@code ClassCastException} if it is not.  Ifthis method succeeds, it always returns a reference to this class object. <p>This method is useful when a client needs to ""narrow"" the type of a  {@code Class} object to pass it to an API that restricts the{@code Class} objects that it is willing to accept.  A cast wouldgenerate a compile-time warning, as the correctness of the cast could not be checked at runtime (because generic types are implemented by erasure).
 * @return this {@code Class} object, cast to represent a subclass ofthe specified class object.
 * @throws ClassCastException if this {@code Class} object does notrepresent a subclass of the specified class (here ""subclass"" includes the class itself).
 * @since 1.5
 */
@SuppressWarnings(""String_Node_Str"") public <U>Class<? extends U> asSubclass(Class<U> clazz){
  if (clazz.isAssignableFrom(this))   return (Class<? extends U>)this;
 else   throw new ClassCastException(this.toString());
}","/** 
 * Casts this   {@code Class} object to represent a subclass of the classrepresented by the specified class object.  Checks that the cast is valid, and throws a  {@code ClassCastException} if it is not.  Ifthis method succeeds, it always returns a reference to this class object. <p>This method is useful when a client needs to ""narrow"" the type of a  {@code Class} object to pass it to an API that restricts the{@code Class} objects that it is willing to accept.  A cast wouldgenerate a compile-time warning, as the correctness of the cast could not be checked at runtime (because generic types are implemented by erasure).
 * @param < U > the type to cast this class object to
 * @param clazz the class of the type to cast this class object to
 * @return this {@code Class} object, cast to represent a subclass ofthe specified class object.
 * @throws ClassCastException if this {@code Class} object does notrepresent a subclass of the specified class (here ""subclass"" includes the class itself).
 * @since 1.5
 */
@SuppressWarnings(""String_Node_Str"") public <U>Class<? extends U> asSubclass(Class<U> clazz){
  if (clazz.isAssignableFrom(this))   return (Class<? extends U>)this;
 else   throw new ClassCastException(this.toString());
}"
79269,"/** 
 * Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class. (The <em>use</em> of type Foo to specify a superinterface in '... implements Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class, the return value is an array containing objects representing the uses of interface types to specify interfaces implemented by the class. The order of the objects in the array corresponds to the order of the interface types used in the 'implements' clause of the declaration of this Class. If this Class represents an interface, the return value is an array containing objects representing the uses of interface types to specify interfaces directly extended by the interface. The order of the objects in the array corresponds to the order of the interface types used in the 'extends' clause of the declaration of this Class. If this Class represents a class or interface whose declaration does not explicitly indicate any annotated superinterfaces, the return value is an array of length 0. If this Class represents either the Object class, an array type, a primitive type, or void, the return value is an array of length 0.
 * @since 1.8
 */
public AnnotatedType[] getAnnotatedInterfaces(){
  return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(),getConstantPool(),this);
}","/** 
 * Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class. (The <em>use</em> of type Foo to specify a superinterface in '... implements Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class, the return value is an array containing objects representing the uses of interface types to specify interfaces implemented by the class. The order of the objects in the array corresponds to the order of the interface types used in the 'implements' clause of the declaration of this Class. If this Class represents an interface, the return value is an array containing objects representing the uses of interface types to specify interfaces directly extended by the interface. The order of the objects in the array corresponds to the order of the interface types used in the 'extends' clause of the declaration of this Class. If this Class represents a class or interface whose declaration does not explicitly indicate any annotated superinterfaces, the return value is an array of length 0. If this Class represents either the Object class, an array type, a primitive type, or void, the return value is an array of length 0.
 * @return an array representing the superinterfaces
 * @since 1.8
 */
public AnnotatedType[] getAnnotatedInterfaces(){
  return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(),getConstantPool(),this);
}"
79270,"/** 
 * Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class. (The <em>use</em> of type Foo to specify the superclass in '... extends Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class type whose declaration does not explicitly indicate an annotated superclass, the return value is null. If this Class represents either the Object class, an interface type, an array type, a primitive type, or void, the return value is null.
 * @since 1.8
 */
public AnnotatedType getAnnotatedSuperclass(){
  return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(),getConstantPool(),this);
}","/** 
 * Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class. (The <em>use</em> of type Foo to specify the superclass in '... extends Foo' is distinct from the <em>declaration</em> of type Foo.) If this Class represents a class type whose declaration does not explicitly indicate an annotated superclass, the return value is null. If this Class represents either the Object class, an interface type, an array type, a primitive type, or void, the return value is null.
 * @return an object representing the superclass
 * @since 1.8
 */
public AnnotatedType getAnnotatedSuperclass(){
  return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(),getConstantPool(),this);
}"
79271,"/** 
 * Returns a hash code for a   {@code double} value; compatible with{@code Double.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code double} value.
 */
public static int hashCode(double value){
  long bits=doubleToLongBits(value);
  return (int)(bits ^ (bits >>> 32));
}","/** 
 * Returns a hash code for a   {@code double} value; compatible with{@code Double.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code double} value.
 * @since 1.8
 */
public static int hashCode(double value){
  long bits=doubleToLongBits(value);
  return (int)(bits ^ (bits >>> 32));
}"
79272,"/** 
 * Returns a hash code for a   {@code float} value; compatible with{@code Float.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code float} value.
 */
public static int hashCode(float value){
  return floatToIntBits(value);
}","/** 
 * Returns a hash code for a   {@code float} value; compatible with{@code Float.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code float} value.
 * @since 1.8
 */
public static int hashCode(float value){
  return floatToIntBits(value);
}"
79273,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x1F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value left by thespecified number of bits.
 * @since 1.5
 */
public static int rotateLeft(int i,int distance){
  return (i << distance) | (i >>> -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x1F)}.
 * @param i the value whose bits are to be rotated left
 * @param distance the number of bit positions to rotate left
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value left by thespecified number of bits.
 * @since 1.5
 */
public static int rotateLeft(int i,int distance){
  return (i << distance) | (i >>> -distance);
}"
79274,"/** 
 * Returns a hash code for a   {@code int} value; compatible with{@code Integer.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code int} value.
 */
public static int hashCode(int value){
  return value;
}","/** 
 * Returns a hash code for a   {@code int} value; compatible with{@code Integer.hashCode()}.
 * @param value the value to hash
 * @since 1.8
 * @return a hash code value for a {@code int} value.
 */
public static int hashCode(int value){
  return value;
}"
79275,"/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return an {@code int} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int lowestOneBit(int i){
  return i & -i;
}","/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose lowest one bit is to be computed
 * @return an {@code int} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int lowestOneBit(int i){
  return i & -i;
}"
79276,"/** 
 * Returns the signum function of the specified   {@code int} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @return the signum function of the specified {@code int} value.
 * @since 1.5
 */
public static int signum(int i){
  return (i >> 31) | (-i >>> 31);
}","/** 
 * Returns the signum function of the specified   {@code int} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @param i the value whose signum is to be computed
 * @return the signum function of the specified {@code int} value.
 * @since 1.5
 */
public static int signum(int i){
  return (i >> 31) | (-i >>> 31);
}"
79277,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x1F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value right by thespecified number of bits.
 * @since 1.5
 */
public static int rotateRight(int i,int distance){
  return (i >>> distance) | (i << -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code int} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x1F)}.
 * @param i the value whose bits are to be rotated right
 * @param distance the number of bit positions to rotate right
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code int} value right by thespecified number of bits.
 * @since 1.5
 */
public static int rotateRight(int i,int distance){
  return (i >>> distance) | (i << -distance);
}"
79278,"/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code int}value.
 * @return the value obtained by reversing order of the bits in thespecified  {@code int} value.
 * @since 1.5
 */
public static int reverse(int i){
  i=(i & 0x55555555) << 1 | (i >>> 1) & 0x55555555;
  i=(i & 0x33333333) << 2 | (i >>> 2) & 0x33333333;
  i=(i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f;
  i=(i << 24) | ((i & 0xff00) << 8) | ((i >>> 8) & 0xff00)| (i >>> 24);
  return i;
}","/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code int}value.
 * @param i the value to be reversed
 * @return the value obtained by reversing order of the bits in thespecified  {@code int} value.
 * @since 1.5
 */
public static int reverse(int i){
  i=(i & 0x55555555) << 1 | (i >>> 1) & 0x55555555;
  i=(i & 0x33333333) << 2 | (i >>> 2) & 0x33333333;
  i=(i & 0x0f0f0f0f) << 4 | (i >>> 4) & 0x0f0f0f0f;
  i=(i << 24) | ((i & 0xff00) << 8) | ((i >>> 8) & 0xff00)| (i >>> 24);
  return i;
}"
79279,"/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code int} value.  Returns 32 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code int} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 31 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 32 - numberOfLeadingZeros(x - 1)}</ul>
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(int i){
  if (i == 0)   return 32;
  int n=1;
  if (i >>> 16 == 0) {
    n+=16;
    i<<=16;
  }
  if (i >>> 24 == 0) {
    n+=8;
    i<<=8;
  }
  if (i >>> 28 == 0) {
    n+=4;
    i<<=4;
  }
  if (i >>> 30 == 0) {
    n+=2;
    i<<=2;
  }
  n-=i >>> 31;
  return n;
}","/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code int} value.  Returns 32 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code int} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 31 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 32 - numberOfLeadingZeros(x - 1)}</ul>
 * @param i the value whose number of leading zeros is to be computed
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(int i){
  if (i == 0)   return 32;
  int n=1;
  if (i >>> 16 == 0) {
    n+=16;
    i<<=16;
  }
  if (i >>> 24 == 0) {
    n+=8;
    i<<=8;
  }
  if (i >>> 28 == 0) {
    n+=4;
    i<<=4;
  }
  if (i >>> 30 == 0) {
    n+=2;
    i<<=2;
  }
  n-=i >>> 31;
  return n;
}"
79280,"/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code int} value.  This function issometimes referred to as the <i>population count</i>.
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code int} value.
 * @since 1.5
 */
public static int bitCount(int i){
  i=i - ((i >>> 1) & 0x55555555);
  i=(i & 0x33333333) + ((i >>> 2) & 0x33333333);
  i=(i + (i >>> 4)) & 0x0f0f0f0f;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  return i & 0x3f;
}","/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code int} value.  This function issometimes referred to as the <i>population count</i>.
 * @param i the value whose bits are to be counted
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code int} value.
 * @since 1.5
 */
public static int bitCount(int i){
  i=i - ((i >>> 1) & 0x55555555);
  i=(i & 0x33333333) + ((i >>> 2) & 0x33333333);
  i=(i + (i >>> 4)) & 0x0f0f0f0f;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  return i & 0x3f;
}"
79281,"/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return an {@code int} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int highestOneBit(int i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  return i - (i >>> 1);
}","/** 
 * Returns an   {@code int} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code int} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose highest one bit is to be computed
 * @return an {@code int} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static int highestOneBit(int i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  return i - (i >>> 1);
}"
79282,"/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code int} value.  Returns 32 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(int i){
  int y;
  if (i == 0)   return 32;
  int n=31;
  y=i << 16;
  if (y != 0) {
    n=n - 16;
    i=y;
  }
  y=i << 8;
  if (y != 0) {
    n=n - 8;
    i=y;
  }
  y=i << 4;
  if (y != 0) {
    n=n - 4;
    i=y;
  }
  y=i << 2;
  if (y != 0) {
    n=n - 2;
    i=y;
  }
  return n - ((i << 1) >>> 31);
}","/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code int} value.  Returns 32 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @param i the value whose number of trailing zeros is to be computed
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code int} value, or 32 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(int i){
  int y;
  if (i == 0)   return 32;
  int n=31;
  y=i << 16;
  if (y != 0) {
    n=n - 16;
    i=y;
  }
  y=i << 8;
  if (y != 0) {
    n=n - 8;
    i=y;
  }
  y=i << 4;
  if (y != 0) {
    n=n - 4;
    i=y;
  }
  y=i << 2;
  if (y != 0) {
    n=n - 2;
    i=y;
  }
  return n - ((i << 1) >>> 31);
}"
79283,"/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code int} value.
 * @return the value obtained by reversing the bytes in the specified{@code int} value.
 * @since 1.5
 */
public static int reverseBytes(int i){
  return ((i >>> 24)) | ((i >> 8) & 0xFF00) | ((i << 8) & 0xFF0000)| ((i << 24));
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code int} value.
 * @param i the value whose bytes are to be reversed
 * @return the value obtained by reversing the bytes in the specified{@code int} value.
 * @since 1.5
 */
public static int reverseBytes(int i){
  return ((i >>> 24)) | ((i >> 8) & 0xFF00) | ((i << 8) & 0xFF0000)| ((i << 24));
}"
79284,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x3F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value left by thespecified number of bits.
 * @since 1.5
 */
public static long rotateLeft(long i,int distance){
  return (i << distance) | (i >>> -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value left by thespecified number of bits.  (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) <p>Note that left rotation with a negative distance is equivalent to right rotation:  {@code rotateLeft(val, -distance) == rotateRight(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateLeft(val,distance) == rotateLeft(val, distance & 0x3F)}.
 * @param i the value whose bits are to be rotated left
 * @param distance the number of bit positions to rotate left
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value left by thespecified number of bits.
 * @since 1.5
 */
public static long rotateLeft(long i,int distance){
  return (i << distance) | (i >>> -distance);
}"
79285,"/** 
 * Returns a hash code for a   {@code long} value; compatible with{@code Long.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code long} value.
 */
public static int hashCode(long value){
  return (int)(value ^ (value >>> 32));
}","/** 
 * Returns a hash code for a   {@code long} value; compatible with{@code Long.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code long} value.
 * @since 1.8
 */
public static int hashCode(long value){
  return (int)(value ^ (value >>> 32));
}"
79286,"/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return a {@code long} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long lowestOneBit(long i){
  return i & -i;
}","/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the lowest-order (""rightmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose lowest one bit is to be computed
 * @return a {@code long} value with a single one-bit, in the positionof the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long lowestOneBit(long i){
  return i & -i;
}"
79287,"/** 
 * Returns the signum function of the specified   {@code long} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @return the signum function of the specified {@code long} value.
 * @since 1.5
 */
public static int signum(long i){
  return (int)((i >> 63) | (-i >>> 63));
}","/** 
 * Returns the signum function of the specified   {@code long} value.  (Thereturn value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)
 * @param i the value whose signum is to be computed
 * @return the signum function of the specified {@code long} value.
 * @since 1.5
 */
public static int signum(long i){
  return (int)((i >> 63) | (-i >>> 63));
}"
79288,"/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x3F)}.
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value right by thespecified number of bits.
 * @since 1.5
 */
public static long rotateRight(long i,int distance){
  return (i >>> distance) | (i << -distance);
}","/** 
 * Returns the value obtained by rotating the two's complement binary representation of the specified   {@code long} value right by thespecified number of bits.  (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) <p>Note that right rotation with a negative distance is equivalent to left rotation:  {@code rotateRight(val, -distance) == rotateLeft(val,distance)}.  Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative:   {@code rotateRight(val,distance) == rotateRight(val, distance & 0x3F)}.
 * @param i the value whose bits are to be rotated right
 * @param distance the number of bit positions to rotate right
 * @return the value obtained by rotating the two's complement binaryrepresentation of the specified  {@code long} value right by thespecified number of bits.
 * @since 1.5
 */
public static long rotateRight(long i,int distance){
  return (i >>> distance) | (i << -distance);
}"
79289,"/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code long}value.
 * @return the value obtained by reversing order of the bits in thespecified  {@code long} value.
 * @since 1.5
 */
public static long reverse(long i){
  i=(i & 0x5555555555555555L) << 1 | (i >>> 1) & 0x5555555555555555L;
  i=(i & 0x3333333333333333L) << 2 | (i >>> 2) & 0x3333333333333333L;
  i=(i & 0x0f0f0f0f0f0f0f0fL) << 4 | (i >>> 4) & 0x0f0f0f0f0f0f0f0fL;
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  i=(i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
  return i;
}","/** 
 * Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified   {@code long}value.
 * @param i the value to be reversed
 * @return the value obtained by reversing order of the bits in thespecified  {@code long} value.
 * @since 1.5
 */
public static long reverse(long i){
  i=(i & 0x5555555555555555L) << 1 | (i >>> 1) & 0x5555555555555555L;
  i=(i & 0x3333333333333333L) << 2 | (i >>> 2) & 0x3333333333333333L;
  i=(i & 0x0f0f0f0f0f0f0f0fL) << 4 | (i >>> 4) & 0x0f0f0f0f0f0f0f0fL;
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  i=(i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
  return i;
}"
79290,"/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code long} value.  Returns 64 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code long} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 63 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 64 - numberOfLeadingZeros(x - 1)}</ul>
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(long i){
  if (i == 0)   return 64;
  int n=1;
  int x=(int)(i >>> 32);
  if (x == 0) {
    n+=32;
    x=(int)i;
  }
  if (x >>> 16 == 0) {
    n+=16;
    x<<=16;
  }
  if (x >>> 24 == 0) {
    n+=8;
    x<<=8;
  }
  if (x >>> 28 == 0) {
    n+=4;
    x<<=4;
  }
  if (x >>> 30 == 0) {
    n+=2;
    x<<=2;
  }
  n-=x >>> 31;
  return n;
}","/** 
 * Returns the number of zero bits preceding the highest-order (""leftmost"") one-bit in the two's complement binary representation of the specified   {@code long} value.  Returns 64 if thespecified value has no one-bits in its two's complement representation, in other words if it is equal to zero. <p>Note that this method is closely related to the logarithm base 2. For all positive  {@code long} values x:<ul> <li>floor(log<sub>2</sub>(x)) =  {@code 63 - numberOfLeadingZeros(x)}<li>ceil(log<sub>2</sub>(x)) =   {@code 64 - numberOfLeadingZeros(x - 1)}</ul>
 * @param i the value whose number of leading zeros is to be computed
 * @return the number of zero bits preceding the highest-order(""leftmost"") one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the valueis equal to zero.
 * @since 1.5
 */
public static int numberOfLeadingZeros(long i){
  if (i == 0)   return 64;
  int n=1;
  int x=(int)(i >>> 32);
  if (x == 0) {
    n+=32;
    x=(int)i;
  }
  if (x >>> 16 == 0) {
    n+=16;
    x<<=16;
  }
  if (x >>> 24 == 0) {
    n+=8;
    x<<=8;
  }
  if (x >>> 28 == 0) {
    n+=4;
    x<<=4;
  }
  if (x >>> 30 == 0) {
    n+=2;
    x<<=2;
  }
  n-=x >>> 31;
  return n;
}"
79291,"/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code long} value.  This function issometimes referred to as the <i>population count</i>.
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code long} value.
 * @since 1.5
 */
public static int bitCount(long i){
  i=i - ((i >>> 1) & 0x5555555555555555L);
  i=(i & 0x3333333333333333L) + ((i >>> 2) & 0x3333333333333333L);
  i=(i + (i >>> 4)) & 0x0f0f0f0f0f0f0f0fL;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  i=i + (i >>> 32);
  return (int)i & 0x7f;
}","/** 
 * Returns the number of one-bits in the two's complement binary representation of the specified   {@code long} value.  This function issometimes referred to as the <i>population count</i>.
 * @param i the value whose bits are to be counted
 * @return the number of one-bits in the two's complement binaryrepresentation of the specified  {@code long} value.
 * @since 1.5
 */
public static int bitCount(long i){
  i=i - ((i >>> 1) & 0x5555555555555555L);
  i=(i & 0x3333333333333333L) + ((i >>> 2) & 0x3333333333333333L);
  i=(i + (i >>> 4)) & 0x0f0f0f0f0f0f0f0fL;
  i=i + (i >>> 8);
  i=i + (i >>> 16);
  i=i + (i >>> 32);
  return (int)i & 0x7f;
}"
79292,"/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @return a {@code long} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long highestOneBit(long i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  i|=(i >> 32);
  return i - (i >>> 1);
}","/** 
 * Returns a   {@code long} value with at most a single one-bit, in theposition of the highest-order (""leftmost"") one-bit in the specified {@code long} value.  Returns zero if the specified value has noone-bits in its two's complement binary representation, that is, if it is equal to zero.
 * @param i the value whose highest one bit is to be computed
 * @return a {@code long} value with a single one-bit, in the positionof the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.
 * @since 1.5
 */
public static long highestOneBit(long i){
  i|=(i >> 1);
  i|=(i >> 2);
  i|=(i >> 4);
  i|=(i >> 8);
  i|=(i >> 16);
  i|=(i >> 32);
  return i - (i >>> 1);
}"
79293,"/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code long} value.  Returns 64 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(long i){
  int x, y;
  if (i == 0)   return 64;
  int n=63;
  y=(int)i;
  if (y != 0) {
    n=n - 32;
    x=y;
  }
 else   x=(int)(i >>> 32);
  y=x << 16;
  if (y != 0) {
    n=n - 16;
    x=y;
  }
  y=x << 8;
  if (y != 0) {
    n=n - 8;
    x=y;
  }
  y=x << 4;
  if (y != 0) {
    n=n - 4;
    x=y;
  }
  y=x << 2;
  if (y != 0) {
    n=n - 2;
    x=y;
  }
  return n - ((x << 1) >>> 31);
}","/** 
 * Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified  {@code long} value.  Returns 64 if the specified value has noone-bits in its two's complement representation, in other words if it is equal to zero.
 * @param i the value whose number of trailing zeros is to be computed
 * @return the number of zero bits following the lowest-order (""rightmost"")one-bit in the two's complement binary representation of the specified  {@code long} value, or 64 if the value is equalto zero.
 * @since 1.5
 */
public static int numberOfTrailingZeros(long i){
  int x, y;
  if (i == 0)   return 64;
  int n=63;
  y=(int)i;
  if (y != 0) {
    n=n - 32;
    x=y;
  }
 else   x=(int)(i >>> 32);
  y=x << 16;
  if (y != 0) {
    n=n - 16;
    x=y;
  }
  y=x << 8;
  if (y != 0) {
    n=n - 8;
    x=y;
  }
  y=x << 4;
  if (y != 0) {
    n=n - 4;
    x=y;
  }
  y=x << 2;
  if (y != 0) {
    n=n - 2;
    x=y;
  }
  return n - ((x << 1) >>> 31);
}"
79294,"/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code long} value.
 * @return the value obtained by reversing the bytes in the specified{@code long} value.
 * @since 1.5
 */
public static long reverseBytes(long i){
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  return (i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code long} value.
 * @param i the value whose bytes are to be reversed
 * @return the value obtained by reversing the bytes in the specified{@code long} value.
 * @since 1.5
 */
public static long reverseBytes(long i){
  i=(i & 0x00ff00ff00ff00ffL) << 8 | (i >>> 8) & 0x00ff00ff00ff00ffL;
  return (i << 48) | ((i & 0xffff0000L) << 16) | ((i >>> 16) & 0xffff0000L)| (i >>> 48);
}"
79295,"/** 
 * Registers a new virtual-machine shutdown hook. <p> The Java virtual machine <i>shuts down</i> in response to two kinds of events: <ul> <p> <li> The program <i>exits</i> normally, when the last non-daemon thread exits or when the <tt>  {@link #exit exit}</tt> (equivalently, <tt>  {@link System#exit(int) System.exit}</tt>) method is invoked, or <p> <li> The virtual machine is <i>terminated</i> in response to a user interrupt, such as typing <tt>^C</tt>, or a system-wide event, such as user logoff or system shutdown. </ul> <p> A <i>shutdown hook</i> is simply an initialized but unstarted thread.  When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently.  When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt.  Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the <tt>  {@link #exit exit}</tt> method. <p> Once the shutdown sequence has begun it can be stopped only by invoking the <tt>  {@link #halt halt}</tt> method, which forcibly terminates the virtual machine. <p> Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an <tt>  {@link IllegalStateException}</tt> to be thrown. <p> Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively.  They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible.  They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down.  Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. <p> Shutdown hooks should also finish their work quickly.  When a program invokes <tt>  {@link #exit exit}</tt> the expectation is that the virtual machine will promptly shut down and exit.  When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit.  It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook. <p> Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the <tt>  {@link ThreadGroup#uncaughtException uncaughtException}</tt> method of the thread's <tt>  {@link ThreadGroup}</tt> object.  The default implementation of this method prints the exception's stack trace to <tt>  {@link System#err}</tt> and terminates the thread; it does not cause the virtual machine to exit or halt. <p> In rare circumstances the virtual machine may <i>abort</i>, that is, stop running without shutting down cleanly.  This occurs when the virtual machine is terminated externally, for example with the <tt>SIGKILL</tt> signal on Unix or the <tt>TerminateProcess</tt> call on Microsoft Windows.  The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory.  If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run. <p>
 * @param hook An initialized but unstarted <tt> {@link Thread}</tt> object
 * @throws IllegalArgumentException If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run
 * @throws IllegalStateException If the virtual machine is already in the process of shutting down
 * @throws SecurityException If a security manager is present and it denies <tt> {@link RuntimePermission}(""shutdownHooks"")</tt>
 * @see #removeShutdownHook
 * @see #halt(int)
 * @see #exit(int)
 * @since 1.3
 */
public void addShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
  ApplicationShutdownHooks.add(hook);
}","/** 
 * Registers a new virtual-machine shutdown hook. <p> The Java virtual machine <i>shuts down</i> in response to two kinds of events: <ul> <li> The program <i>exits</i> normally, when the last non-daemon thread exits or when the <tt>  {@link #exit exit}</tt> (equivalently,  {@link System#exit(int) System.exit}) method is invoked, or <li> The virtual machine is <i>terminated</i> in response to a user interrupt, such as typing <tt>^C</tt>, or a system-wide event, such as user logoff or system shutdown. </ul> <p> A <i>shutdown hook</i> is simply an initialized but unstarted thread.  When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently.  When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt.  Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the <tt>  {@link #exit exit}</tt> method. <p> Once the shutdown sequence has begun it can be stopped only by invoking the <tt>  {@link #halt halt}</tt> method, which forcibly terminates the virtual machine. <p> Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an <tt>  {@link IllegalStateException}</tt> to be thrown. <p> Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively.  They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible.  They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down.  Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. <p> Shutdown hooks should also finish their work quickly.  When a program invokes <tt>  {@link #exit exit}</tt> the expectation is that the virtual machine will promptly shut down and exit.  When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit.  It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook. <p> Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the <tt>  {@link ThreadGroup#uncaughtException uncaughtException}</tt> method of the thread's <tt>  {@link ThreadGroup}</tt> object.  The default implementation of this method prints the exception's stack trace to <tt>  {@link System#err}</tt> and terminates the thread; it does not cause the virtual machine to exit or halt. <p> In rare circumstances the virtual machine may <i>abort</i>, that is, stop running without shutting down cleanly.  This occurs when the virtual machine is terminated externally, for example with the <tt>SIGKILL</tt> signal on Unix or the <tt>TerminateProcess</tt> call on Microsoft Windows.  The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory.  If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run. <p>
 * @param hook An initialized but unstarted <tt> {@link Thread}</tt> object
 * @throws IllegalArgumentException If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run
 * @throws IllegalStateException If the virtual machine is already in the process of shutting down
 * @throws SecurityException If a security manager is present and it denies <tt> {@link RuntimePermission}(""shutdownHooks"")</tt>
 * @see #removeShutdownHook
 * @see #halt(int)
 * @see #exit(int)
 * @since 1.3
 */
public void addShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
  ApplicationShutdownHooks.add(hook);
}"
79296,"/** 
 * Returns a hash code for a   {@code short} value; compatible with{@code Short.hashCode()}.
 * @since 1.8
 * @return a hash code value for a {@code short} value.
 */
public static int hashCode(short value){
  return (int)value;
}","/** 
 * Returns a hash code for a   {@code short} value; compatible with{@code Short.hashCode()}.
 * @param value the value to hash
 * @return a hash code value for a {@code short} value.
 * @since 1.8
 */
public static int hashCode(short value){
  return (int)value;
}"
79297,"/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code short} value.
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified  {@code short} value.
 * @since 1.5
 */
public static short reverseBytes(short i){
  return (short)(((i & 0xFF00) >> 8) | (i << 8));
}","/** 
 * Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified   {@code short} value.
 * @param i the value whose bytes are to be reversed
 * @return the value obtained by reversing (or, equivalently, swapping)the bytes in the specified  {@code short} value.
 * @since 1.5
 */
public static short reverseBytes(short i){
  return (short)(((i & 0xFF00) >> 8) | (i << 8));
}"
79298,"/** 
 * Returns the unbiased exponent used in the representation of a  {@code double}.  Special cases: <ul> <li>If the argument is NaN or infinite, then the result is  {@link Double#MAX_EXPONENT} + 1.<li>If the argument is zero or subnormal, then the result is {@link Double#MIN_EXPONENT} -1.</ul>
 * @param d a {@code double} value
 * @since 1.6
 */
public static int getExponent(double d){
  return Math.getExponent(d);
}","/** 
 * Returns the unbiased exponent used in the representation of a  {@code double}.  Special cases: <ul> <li>If the argument is NaN or infinite, then the result is  {@link Double#MAX_EXPONENT} + 1.<li>If the argument is zero or subnormal, then the result is {@link Double#MIN_EXPONENT} -1.</ul>
 * @param d a {@code double} value
 * @return the unbiased exponent of the argument
 * @since 1.6
 */
public static int getExponent(double d){
  return Math.getExponent(d);
}"
79299,"/** 
 * Returns a BigDecimal whose numerical value is equal to (  {@code this} * 10<sup>n</sup>).  The scale ofthe result is  {@code (this.scale() - n)}.
 * @throws ArithmeticException if the scale would beoutside the range of a 32-bit integer.
 * @since 1.5
 */
public BigDecimal scaleByPowerOfTen(int n){
  return new BigDecimal(intVal,intCompact,checkScale((long)scale - n),precision);
}","/** 
 * Returns a BigDecimal whose numerical value is equal to (  {@code this} * 10<sup>n</sup>).  The scale ofthe result is  {@code (this.scale() - n)}.
 * @param n the exponent power of ten to scale by
 * @return a BigDecimal whose numerical value is equal to( {@code this} * 10<sup>n</sup>)
 * @throws ArithmeticException if the scale would beoutside the range of a 32-bit integer.
 * @since 1.5
 */
public BigDecimal scaleByPowerOfTen(int n){
  return new BigDecimal(intVal,intCompact,checkScale((long)scale - n),precision);
}"
79300,"/** 
 * Return the kind of this tag. similar or synonymous tags.  For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0""> <tr><th><tt> kind()  </tt></th>  <th><tt> name()      </tt></th></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @throws     </tt></td></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @exception  </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @see        </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @link       </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @linkplain  </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serial     </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serialData </tt></td></tr> </table>
 */
String kind();","/** 
 * Return the kind of this tag. For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0"" summary=""related tags""> <tr><th>  {@code kind()  }</th>  <th>  {@code name()      }</th></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @throws     }</td></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @exception  }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @see        }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @link       }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @linkplain  }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serial     }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serialData }</td></tr> </table>
 * @return the kind of this tag.
 */
String kind();"
79301,"/** 
 * Return the name of this tag.  The name is the string starting with ""@"" that is used in a doc comment, such as <code>@return</code>.  For inline tags, such as <code>{&#064;link}</code>, the curly brackets are not part of the name, so in this example the name would be simply <code>@link</code>.
 */
String name();","/** 
 * Return the name of this tag.  The name is the string starting with ""@"" that is used in a doc comment, such as <code>@return</code>.  For inline tags, such as <code>{&#064;link}</code>, the curly brackets are not part of the name, so in this example the name would be simply <code>@link</code>.
 * @return the name of this tag
 */
String name();"
79302,"/** 
 * Return the containing   {@link Doc} of this Tag element.
 */
Doc holder();","/** 
 * Return the containing   {@link Doc} of this Tag element.
 * @return the containing {@link Doc} of this Tag element
 */
Doc holder();"
79303,"/** 
 * Return the text of this tag, that is, portion beyond tag name.
 */
String text();","/** 
 * Return the text of this tag, that is, the portion beyond tag name.
 * @return the text of this tag
 */
String text();"
79304,"BasicLookupHelper(Name name,Type site,List<Type> argtypes,List<Type> typeargtypes){
  super(name,site,argtypes,typeargtypes,MethodResolutionPhase.VARARITY);
}","BasicLookupHelper(Name name,Type site,List<Type> argtypes,List<Type> typeargtypes,MethodResolutionPhase maxPhase){
  super(name,site,argtypes,typeargtypes,maxPhase);
}"
79305,"/** 
 * Select the best method for a call site among two choices.
 * @param env              The current environment.
 * @param site             The original type from where theselection takes place.
 * @param argtypes         The invocation's value arguments,
 * @param typeargtypes     The invocation's type arguments,
 * @param sym              Proposed new best match.
 * @param bestSoFar        Previously found best match.
 * @param allowBoxing Allow boxing conversions of arguments.
 * @param useVarargs Box trailing arguments into an array for varargs.
 */
@SuppressWarnings(""String_Node_Str"") Symbol selectBest(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,Symbol sym,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  if (sym.kind == ERR || !sym.isInheritedIn(site.tsym,types)) {
    return bestSoFar;
  }
 else   if (useVarargs && (sym.flags() & VARARGS) == 0) {
    return bestSoFar.kind >= ERRONEOUS ? new BadVarargsMethod((ResolveError)bestSoFar) : bestSoFar;
  }
  Assert.check(sym.kind < AMBIGUOUS);
  try {
    Type mt=rawInstantiate(env,site,sym,null,argtypes,typeargtypes,allowBoxing,useVarargs,types.noWarnings);
    if (!operator)     currentResolutionContext.addApplicableCandidate(sym,mt);
  }
 catch (  InapplicableMethodException ex) {
    if (!operator)     currentResolutionContext.addInapplicableCandidate(sym,ex.getDiagnostic());
switch (bestSoFar.kind) {
case ABSENT_MTH:
      return new InapplicableSymbolError(currentResolutionContext);
case WRONG_MTH:
    if (operator)     return bestSoFar;
  bestSoFar=new InapplicableSymbolsError(currentResolutionContext);
default :
return bestSoFar;
}
}
if (!isAccessible(env,site,sym)) {
return (bestSoFar.kind == ABSENT_MTH) ? new AccessError(env,site,sym) : bestSoFar;
}
return (bestSoFar.kind > AMBIGUOUS) ? sym : mostSpecific(argtypes,sym,bestSoFar,env,site,allowBoxing && operator,useVarargs);
}","/** 
 * Select the best method for a call site among two choices.
 * @param env              The current environment.
 * @param site             The original type from where theselection takes place.
 * @param argtypes         The invocation's value arguments,
 * @param typeargtypes     The invocation's type arguments,
 * @param sym              Proposed new best match.
 * @param bestSoFar        Previously found best match.
 * @param allowBoxing Allow boxing conversions of arguments.
 * @param useVarargs Box trailing arguments into an array for varargs.
 */
@SuppressWarnings(""String_Node_Str"") Symbol selectBest(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,Symbol sym,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  if (sym.kind == ERR || !sym.isInheritedIn(site.tsym,types)) {
    return bestSoFar;
  }
 else   if (useVarargs && (sym.flags() & VARARGS) == 0) {
    return bestSoFar.kind >= ERRONEOUS ? new BadVarargsMethod((ResolveError)bestSoFar) : bestSoFar;
  }
  Assert.check(sym.kind < AMBIGUOUS);
  try {
    Type mt=rawInstantiate(env,site,sym,null,argtypes,typeargtypes,allowBoxing,useVarargs,types.noWarnings);
    if (!operator || verboseResolutionMode.contains(VerboseResolutionMode.PREDEF))     currentResolutionContext.addApplicableCandidate(sym,mt);
  }
 catch (  InapplicableMethodException ex) {
    if (!operator)     currentResolutionContext.addInapplicableCandidate(sym,ex.getDiagnostic());
switch (bestSoFar.kind) {
case ABSENT_MTH:
      return new InapplicableSymbolError(currentResolutionContext);
case WRONG_MTH:
    if (operator)     return bestSoFar;
  bestSoFar=new InapplicableSymbolsError(currentResolutionContext);
default :
return bestSoFar;
}
}
if (!isAccessible(env,site,sym)) {
return (bestSoFar.kind == ABSENT_MTH) ? new AccessError(env,site,sym) : bestSoFar;
}
return (bestSoFar.kind > AMBIGUOUS) ? sym : mostSpecific(argtypes,sym,bestSoFar,env,site,allowBoxing && operator,useVarargs);
}"
79306,"/** 
 * Resolve operator.
 * @param pos       The position to use for error reporting.
 * @param optag     The tag of the operation tree.
 * @param env       The environment current at the operation.
 * @param argtypes  The types of the operands.
 */
Symbol resolveOperator(DiagnosticPosition pos,JCTree.Tag optag,Env<AttrContext> env,List<Type> argtypes){
  MethodResolutionContext prevResolutionContext=currentResolutionContext;
  try {
    currentResolutionContext=new MethodResolutionContext();
    Name name=treeinfo.operatorName(optag);
    env.info.pendingResolutionPhase=currentResolutionContext.step=BASIC;
    Symbol sym=findMethod(env,syms.predefClass.type,name,argtypes,null,false,false,true);
    if (boxingEnabled && sym.kind >= WRONG_MTHS)     env.info.pendingResolutionPhase=currentResolutionContext.step=BOX;
    sym=findMethod(env,syms.predefClass.type,name,argtypes,null,true,false,true);
    return accessMethod(sym,pos,env.enclClass.sym.type,name,false,argtypes,null);
  }
  finally {
    currentResolutionContext=prevResolutionContext;
  }
}","/** 
 * Resolve operator.
 * @param pos       The position to use for error reporting.
 * @param optag     The tag of the operation tree.
 * @param env       The environment current at the operation.
 * @param argtypes  The types of the operands.
 */
Symbol resolveOperator(DiagnosticPosition pos,JCTree.Tag optag,Env<AttrContext> env,List<Type> argtypes){
  MethodResolutionContext prevResolutionContext=currentResolutionContext;
  try {
    currentResolutionContext=new MethodResolutionContext();
    Name name=treeinfo.operatorName(optag);
    return lookupMethod(env,pos,syms.predefClass,currentResolutionContext,new BasicLookupHelper(name,syms.predefClass.type,argtypes,null,BOX){
      @Override Symbol lookup(      Env<AttrContext> env,      MethodResolutionPhase phase){
        return findMethod(env,site,name,argtypes,typeargtypes,phase.isBoxingRequired(),phase.isVarargsRequired(),true);
      }
      @Override Symbol access(      Env<AttrContext> env,      DiagnosticPosition pos,      Symbol location,      Symbol sym){
        return accessMethod(sym,pos,env.enclClass.sym.type,name,false,argtypes,null);
      }
    }
);
  }
  finally {
    currentResolutionContext=prevResolutionContext;
  }
}"
79307,"String computeKey(Element e){
  StringBuilder buf=new StringBuilder();
  while (e != null) {
    buf.append(e.toString());
    e=e.getEnclosingElement();
  }
  buf.append(jfo.getName());
  return buf.toString();
}","String computeKey(Element e){
  StringBuilder buf=new StringBuilder();
  if (predefTranslationMap.containsKey(e.getSimpleName().toString())) {
    buf.append(""String_Node_Str"");
    String replacedName=predefTranslationMap.get(e.getSimpleName().toString());
    buf.append(e.toString().replace(e.getSimpleName().toString(),replacedName));
  }
 else   if (e.getSimpleName().toString().startsWith(""String_Node_Str"")) {
    buf.append(""String_Node_Str"");
    buf.append(e.toString());
  }
 else {
    while (e != null) {
      buf.append(e.toString());
      e=e.getEnclosingElement();
    }
    buf.append(jfo.getName());
  }
  return buf.toString();
}"
79308,"protected ResolveHarness(JavaFileObject jfo){
  this.jfo=jfo;
  this.diagProcessors=new DiagnosticProcessor[]{new VerboseResolutionNoteProcessor(),new VerboseDeferredInferenceNoteProcessor(),new ErrorProcessor()};
}","protected ResolveHarness(JavaFileObject jfo){
  this.jfo=jfo;
  this.diagProcessors=new DiagnosticProcessor[]{new VerboseResolutionNoteProcessor(),new VerboseDeferredInferenceNoteProcessor(),new ErrorProcessor()};
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
  predefTranslationMap.put(""String_Node_Str"",""String_Node_Str"");
}"
79309,"/** 
 * Convenience method equivalent to   {@code v.scan(e, null)}.
 * @return the result of scanning {@code e}.
 */
public final R scan(Element e){
  return scan(e,null);
}","/** 
 * Convenience method equivalent to   {@code v.scan(e, null)}.
 * @param e the element to scan
 * @return the result of scanning {@code e}.
 */
public final R scan(Element e){
  return scan(e,null);
}"
79310,"/** 
 * Return a name with the same sequence of characters as the argument.
 * @param cs the character sequence to return as a name
 */
Name getName(CharSequence cs);","/** 
 * Return a name with the same sequence of characters as the argument.
 * @param cs the character sequence to return as a name
 * @return a name with the same sequence of characters as the argument
 */
Name getName(CharSequence cs);"
79311,"/** 
 * Returns the element corresponding to a type. The type may be a   {@code DeclaredType} or {@code TypeVariable}. Returns   {@code null} if the type is not one with acorresponding element.
 * @return the element corresponding to the given type
 */
Element asElement(TypeMirror t);","/** 
 * Returns the element corresponding to a type. The type may be a   {@code DeclaredType} or {@code TypeVariable}. Returns   {@code null} if the type is not one with acorresponding element.
 * @param t the type to map to an element
 * @return the element corresponding to the given type
 */
Element asElement(TypeMirror t);"
79312,"private static List<Archive> init(){
  List<Archive> result=new ArrayList<Archive>();
  String javaHome=System.getProperty(""String_Node_Str"");
  List<File> files=new ArrayList<File>();
  File jre=new File(javaHome,""String_Node_Str"");
  File lib=new File(javaHome,""String_Node_Str"");
  try {
    if (jre.exists() && jre.isDirectory()) {
      result.addAll(addJarFiles(new File(jre,""String_Node_Str"")));
      result.addAll(addJarFiles(lib));
    }
 else     if (lib.exists() && lib.isDirectory()) {
      File classes=new File(javaHome,""String_Node_Str"");
      if (classes.exists() && classes.isDirectory()) {
        result.add(new Archive(classes,ClassFileReader.newInstance(classes)));
      }
      result.addAll(addJarFiles(lib));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + javaHome + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return result;
}","private static List<Archive> init(){
  List<Archive> result=new ArrayList<Archive>();
  String javaHome=System.getProperty(""String_Node_Str"");
  File jre=new File(javaHome,""String_Node_Str"");
  File lib=new File(javaHome,""String_Node_Str"");
  try {
    if (jre.exists() && jre.isDirectory()) {
      result.addAll(addJarFiles(new File(jre,""String_Node_Str"")));
      result.addAll(addJarFiles(lib));
    }
 else     if (lib.exists() && lib.isDirectory()) {
      File classes=new File(javaHome,""String_Node_Str"");
      if (classes.exists() && classes.isDirectory()) {
        result.add(new Archive(classes,ClassFileReader.newInstance(classes)));
      }
      result.addAll(addJarFiles(lib));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + javaHome + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return result;
}"
79313,"/** 
 * Scan the arguments for -i -x -xf -if followed by the option -src, -sourcepath, -modulepath or -classpath and produce a map of all the files to referenced for that particular option. Store the found sources and the found modules in the supplied maps.
 */
private boolean findFiles(String[] args,String option,Set<String> suffixes,Map<String,Source> found_files,Map<String,Module> found_modules,Module current_module,boolean inLinksrc) throws ProblemException, ProblemException {
  Set<File> roots=new HashSet<File>();
  List<String> includes=new LinkedList<String>();
  List<String> excludes=new LinkedList<String>();
  List<String> excludefiles=new LinkedList<String>();
  List<String> includefiles=new LinkedList<String>();
  List<String> moduleinfo=new LinkedList<String>();
  moduleinfo.add(""String_Node_Str"");
  for (int i=0; i < args.length; ++i) {
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String incl=args[i + 1];
      checkPattern(incl);
      includes.add(incl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String excl=args[i + 1];
      checkPattern(excl);
      excludes.add(excl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String exclf=args[i + 1];
      checkFilePattern(exclf);
      exclf=Util.normalizeDriveLetter(exclf);
      excludefiles.add(fixupSeparator(exclf));
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String inclf=args[i + 1];
      checkFilePattern(inclf);
      inclf=Util.normalizeDriveLetter(inclf);
      includefiles.add(fixupSeparator(inclf));
    }
    if (args[i].equals(option)) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"" + option);
      }
      String[] root_dirs=args[i + 1].split(File.pathSeparator);
      for (      String r : root_dirs) {
        File root=new File(r);
        if (!root.isDirectory()) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str"");
        }
        try {
          root=root.getCanonicalFile();
        }
 catch (        IOException e) {
          throw new ProblemException(""String_Node_Str"" + e);
        }
        if (roots.contains(root)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option);
        }
        if (roots.equals(bin_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (roots.equals(gensrc_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (roots.equals(header_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        roots.add(root);
        Source.scanRoot(root,suffixes,excludes,includes,excludefiles,includefiles,found_files,found_modules,current_module,findBooleanOption(args,""String_Node_Str""),false,inLinksrc);
      }
    }
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")) {
      includes=new LinkedList<String>();
      excludes=new LinkedList<String>();
      excludefiles=new LinkedList<String>();
      includefiles=new LinkedList<String>();
    }
  }
  return true;
}","/** 
 * Scan the arguments for -i -x -xf -if followed by the option -src, -sourcepath, -modulepath or -classpath and produce a map of all the files to referenced for that particular option. Store the found sources and the found modules in the supplied maps.
 */
private boolean findFiles(String[] args,String option,Set<String> suffixes,Map<String,Source> found_files,Map<String,Module> found_modules,Module current_module,boolean inLinksrc) throws ProblemException, ProblemException {
  Set<File> roots=new HashSet<File>();
  List<String> includes=new LinkedList<String>();
  List<String> excludes=new LinkedList<String>();
  List<String> excludefiles=new LinkedList<String>();
  List<String> includefiles=new LinkedList<String>();
  List<String> moduleinfo=new LinkedList<String>();
  moduleinfo.add(""String_Node_Str"");
  for (int i=0; i < args.length; ++i) {
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String incl=args[i + 1];
      checkPattern(incl);
      includes.add(incl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String excl=args[i + 1];
      checkPattern(excl);
      excludes.add(excl);
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String exclf=args[i + 1];
      checkFilePattern(exclf);
      exclf=Util.normalizeDriveLetter(exclf);
      excludefiles.add(fixupSeparator(exclf));
    }
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"");
      }
      String inclf=args[i + 1];
      checkFilePattern(inclf);
      inclf=Util.normalizeDriveLetter(inclf);
      includefiles.add(fixupSeparator(inclf));
    }
    if (args[i].equals(option)) {
      if (i + 1 >= args.length) {
        throw new ProblemException(""String_Node_Str"" + option);
      }
      String[] root_dirs=args[i + 1].split(File.pathSeparator);
      for (      String r : root_dirs) {
        File root=new File(r);
        if (!root.isDirectory()) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str"");
        }
        try {
          root=root.getCanonicalFile();
        }
 catch (        IOException e) {
          throw new ProblemException(""String_Node_Str"" + e);
        }
        if (roots.contains(root)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option);
        }
        if (root.equals(bin_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (root.equals(gensrc_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        if (root.equals(header_dir)) {
          throw new ProblemException(""String_Node_Str"" + r + ""String_Node_Str""+ option+ ""String_Node_Str"");
        }
        roots.add(root);
        Source.scanRoot(root,suffixes,excludes,includes,excludefiles,includefiles,found_files,found_modules,current_module,findBooleanOption(args,""String_Node_Str""),false,inLinksrc);
      }
    }
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")|| args[i].equals(""String_Node_Str"")) {
      includes=new LinkedList<String>();
      excludes=new LinkedList<String>();
      excludefiles=new LinkedList<String>();
      includefiles=new LinkedList<String>();
    }
  }
  return true;
}"
79314,"public int go(String[] args,PrintStream out,PrintStream err){
  try {
    if (args.length == 0 || findJavaSourceFiles(args) || findAtFile(args) || null == Util.findServerSettings(args)) {
      printHelp();
      return 0;
    }
    Log.setLogLevel(findLogLevel(args),out,err);
    String server_settings=Util.findServerSettings(args);
    args=verifyImplicitOption(args);
    args=addSrcBeforeDirectories(args);
    checkSrcOption(args);
    bin_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",true,false,true);
    gensrc_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    header_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    makefile_source_list=findFileOption(args,""String_Node_Str"",""String_Node_Str"",false);
    javac_state=JavacState.load(args,bin_dir,gensrc_dir,header_dir,findBooleanOption(args,""String_Node_Str""),out,err);
    suffix_rules=javac_state.getJavaSuffixRule();
    findTranslateOptions(args,suffix_rules);
    if (suffix_rules.keySet().size() > 1 && gensrc_dir == null) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    findCopyOptions(args,suffix_rules);
    Map<String,Module> modules=new HashMap<String,Module>();
    Module current_module=new Module(""String_Node_Str"",""String_Node_Str"");
    modules.put(""String_Node_Str"",current_module);
    Map<String,Source> sources=new HashMap<String,Source>();
    findFiles(args,""String_Node_Str"",suffix_rules.keySet(),sources,modules,current_module,false);
    if (sources.isEmpty()) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    Map<String,Source> sources_to_link_to=new HashMap<String,Source>();
    rewriteOptions(args,""String_Node_Str"",""String_Node_Str"");
    findFiles(args,""String_Node_Str"",Util.set(""String_Node_Str""),sources_to_link_to,modules,current_module,true);
    Map<String,Source> classes_to_link_to=new HashMap<String,Source>();
    Map<String,Source> modules_to_link_to=new HashMap<String,Source>();
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.now().checkInternalState(""String_Node_Str"",false,sources);
    javac_state.now().checkInternalState(""String_Node_Str"",true,sources_to_link_to);
    javac_state.setVisibleSources(sources_to_link_to);
    javac_state.checkSourceStatus(false);
    javac_state.findAllArtifacts();
    if (!findBooleanOption(args,""String_Node_Str"")) {
      javac_state.removeUnidentifiedArtifacts();
    }
    javac_state.taintPackagesThatMissArtifacts();
    javac_state.deleteClassArtifactsInTaintedPackages();
    javac_state.performCopying(bin_dir,suffix_rules);
    javac_state.performTranslation(gensrc_dir,suffix_rules);
    Map<String,Source> generated_sources=new HashMap<String,Source>();
    Source.scanRoot(gensrc_dir,Util.set(""String_Node_Str""),null,null,null,null,generated_sources,modules,current_module,false,true,false);
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.checkSourceStatus(true);
    javac_state.compareWithMakefileList(makefile_source_list);
    boolean again;
    Set<String> recently_compiled=new HashSet<String>();
    boolean[] rc=new boolean[1];
    do {
      javac_state.deleteClassArtifactsInTaintedPackages();
      again=javac_state.performJavaCompilations(bin_dir,server_settings,args,recently_compiled,rc);
      if (!rc[0])       break;
    }
 while (again);
    if (rc[0]) {
      javac_state.save();
      javac_state.now().collectArtifacts(modules);
      javac_state.removeSuperfluousArtifacts(recently_compiled);
    }
    return rc[0] ? 0 : -1;
  }
 catch (  ProblemException e) {
    Log.error(e.getMessage());
    return -1;
  }
catch (  Exception e) {
    e.printStackTrace(err);
    return -1;
  }
}","public int go(String[] args,PrintStream out,PrintStream err){
  try {
    if (args.length == 0 || findJavaSourceFiles(args) || findAtFile(args) || null == Util.findServerSettings(args)) {
      printHelp();
      return 0;
    }
    Log.setLogLevel(findLogLevel(args),out,err);
    String server_settings=Util.findServerSettings(args);
    args=verifyImplicitOption(args);
    args=addSrcBeforeDirectories(args);
    checkSrcOption(args);
    bin_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",true,false,true);
    gensrc_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    header_dir=findDirectoryOption(args,""String_Node_Str"",""String_Node_Str"",false,false,true);
    makefile_source_list=findFileOption(args,""String_Node_Str"",""String_Node_Str"",false);
    javac_state=JavacState.load(args,bin_dir,gensrc_dir,header_dir,findBooleanOption(args,""String_Node_Str""),out,err);
    suffix_rules=javac_state.getJavaSuffixRule();
    findTranslateOptions(args,suffix_rules);
    if (suffix_rules.keySet().size() > 1 && gensrc_dir == null) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    findCopyOptions(args,suffix_rules);
    Map<String,Module> modules=new HashMap<String,Module>();
    Module current_module=new Module(""String_Node_Str"",""String_Node_Str"");
    modules.put(""String_Node_Str"",current_module);
    Map<String,Source> sources=new HashMap<String,Source>();
    findFiles(args,""String_Node_Str"",suffix_rules.keySet(),sources,modules,current_module,false);
    if (sources.isEmpty()) {
      Log.error(""String_Node_Str"");
      return -1;
    }
    Map<String,Source> sources_to_link_to=new HashMap<String,Source>();
    rewriteOptions(args,""String_Node_Str"",""String_Node_Str"");
    findFiles(args,""String_Node_Str"",Util.set(""String_Node_Str""),sources_to_link_to,modules,current_module,true);
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.now().checkInternalState(""String_Node_Str"",false,sources);
    javac_state.now().checkInternalState(""String_Node_Str"",true,sources_to_link_to);
    javac_state.setVisibleSources(sources_to_link_to);
    javac_state.checkSourceStatus(false);
    javac_state.findAllArtifacts();
    if (!findBooleanOption(args,""String_Node_Str"")) {
      javac_state.removeUnidentifiedArtifacts();
    }
    javac_state.taintPackagesThatMissArtifacts();
    javac_state.deleteClassArtifactsInTaintedPackages();
    javac_state.performCopying(bin_dir,suffix_rules);
    javac_state.performTranslation(gensrc_dir,suffix_rules);
    Map<String,Source> generated_sources=new HashMap<String,Source>();
    Source.scanRoot(gensrc_dir,Util.set(""String_Node_Str""),null,null,null,null,generated_sources,modules,current_module,false,true,false);
    javac_state.now().collectPackagesSourcesAndArtifacts(modules);
    javac_state.checkSourceStatus(true);
    javac_state.compareWithMakefileList(makefile_source_list);
    boolean again;
    Set<String> recently_compiled=new HashSet<String>();
    boolean[] rc=new boolean[1];
    do {
      javac_state.deleteClassArtifactsInTaintedPackages();
      again=javac_state.performJavaCompilations(bin_dir,server_settings,args,recently_compiled,rc);
      if (!rc[0])       break;
    }
 while (again);
    if (rc[0]) {
      javac_state.save();
      javac_state.now().collectArtifacts(modules);
      javac_state.removeSuperfluousArtifacts(recently_compiled);
    }
    return rc[0] ? 0 : -1;
  }
 catch (  ProblemException e) {
    Log.error(e.getMessage());
    return -1;
  }
catch (  Exception e) {
    e.printStackTrace(err);
    return -1;
  }
}"
79315,"private void checkConfigPermission(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
}","private static void checkConfigPermission(){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new RuntimePermission(""String_Node_Str""));
  }
}"
79316,"@Override protected void makeObject(final MethodEmitter m){
  final String className=SCRIPTFUNCTION_IMPL_OBJECT;
  m._new(className).dup();
  loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
  if (isLazy || functionNode.needsParentScope()) {
    m.loadScope();
  }
 else {
    m.loadNull();
  }
  m.invoke(constructorNoLookup(className,cparams));
}","@Override protected void makeObject(final MethodEmitter m){
  final String className=SCRIPTFUNCTION_IMPL_OBJECT;
  m._new(className).dup();
  loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
  if (isLazy || functionNode.needsParentScope()) {
    m.loadScope();
  }
 else {
    m.loadNull();
  }
  m.invoke(constructorNoLookup(className,RecompilableScriptFunctionData.class,ScriptObject.class));
}"
79317,"private void newFunctionObject(final FunctionNode functionNode){
  final boolean isLazy=functionNode.isLazy();
  final Class<?>[] cparams=new Class<?>[]{RecompilableScriptFunctionData.class,ScriptObject.class};
  new ObjectCreator(this,new ArrayList<String>(),new ArrayList<Symbol>(),false,false){
    @Override protected void makeObject(    final MethodEmitter m){
      final String className=SCRIPTFUNCTION_IMPL_OBJECT;
      m._new(className).dup();
      loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
      if (isLazy || functionNode.needsParentScope()) {
        m.loadScope();
      }
 else {
        m.loadNull();
      }
      m.invoke(constructorNoLookup(className,cparams));
    }
  }
.makeObject(method);
}","private void newFunctionObject(final FunctionNode functionNode){
  final boolean isLazy=functionNode.isLazy();
  new ObjectCreator(this,new ArrayList<String>(),new ArrayList<Symbol>(),false,false){
    @Override protected void makeObject(    final MethodEmitter m){
      final String className=SCRIPTFUNCTION_IMPL_OBJECT;
      m._new(className).dup();
      loadConstant(new RecompilableScriptFunctionData(functionNode,compiler.getCodeInstaller(),Compiler.binaryName(getClassName()),makeMap()));
      if (isLazy || functionNode.needsParentScope()) {
        m.loadScope();
      }
 else {
        m.loadNull();
      }
      m.invoke(constructorNoLookup(className,RecompilableScriptFunctionData.class,ScriptObject.class));
    }
  }
.makeObject(method);
}"
79318,"/** 
 * Check if this function's generated Java method needs a   {@code callee} parameter. Functions that need access totheir parent scope, functions that reference themselves, and non-strict functions that need an Arguments object (since it exposes  {@code arguments.callee} property) will need to have a callee parameter.We also conservatively need a callee if we have lazy children, i.e. nested function nodes that have not yet been evaluated. _They_ may need the callee and we don't know it
 * @return true if the function's generated Java method needs a {@code callee} parameter.
 */
public boolean needsCallee(){
  return hasLazyChildren() || needsParentScope() || needsSelfSymbol()|| (needsArguments() && !isStrictMode());
}","/** 
 * Check if this function's generated Java method needs a   {@code callee} parameter. Functions that need access totheir parent scope, functions that reference themselves, and non-strict functions that need an Arguments object (since it exposes  {@code arguments.callee} property) will need to have a callee parameter.
 * @return true if the function's generated Java method needs a {@code callee} parameter.
 */
public boolean needsCallee(){
  return needsParentScope() || needsSelfSymbol() || (needsArguments() && !isStrictMode());
}"
79319,"private void copyOptions(final ScriptObject options,final ScriptEnvironment scriptEnv){
  AccessController.doPrivileged(new PrivilegedAction<Void>(){
    public Void run(){
      for (      Field f : scriptEnv.getClass().getFields()) {
        try {
          options.set(f.getName(),f.get(scriptEnv),false);
        }
 catch (        final IllegalArgumentException|IllegalAccessException exp) {
          throw new RuntimeException(exp);
        }
      }
      return null;
    }
  }
);
}","private static void copyOptions(final ScriptObject options,final ScriptEnvironment scriptEnv){
  AccessController.doPrivileged(new PrivilegedAction<Void>(){
    @Override public Void run(){
      for (      Field f : scriptEnv.getClass().getFields()) {
        try {
          options.set(f.getName(),f.get(scriptEnv),false);
        }
 catch (        final IllegalArgumentException|IllegalAccessException exp) {
          throw new RuntimeException(exp);
        }
      }
      return null;
    }
  }
);
}"
79320,"public Void run(){
  for (  Field f : scriptEnv.getClass().getFields()) {
    try {
      options.set(f.getName(),f.get(scriptEnv),false);
    }
 catch (    final IllegalArgumentException|IllegalAccessException exp) {
      throw new RuntimeException(exp);
    }
  }
  return null;
}","@Override public Void run(){
  for (  Field f : scriptEnv.getClass().getFields()) {
    try {
      options.set(f.getName(),f.get(scriptEnv),false);
    }
 catch (    final IllegalArgumentException|IllegalAccessException exp) {
      throw new RuntimeException(exp);
    }
  }
  return null;
}"
79321,"private synchronized Class<?> compile(final Source source,final ErrorManager errMan,final boolean strict){
  errMan.reset();
  GlobalObject global=null;
  Class<?> script;
  if (env._class_cache_size > 0) {
    global=(GlobalObject)Context.getGlobalTrusted();
    script=global.findCachedClass(source);
    if (script != null) {
      return script;
    }
  }
  final FunctionNode functionNode=new Parser(env,source,errMan,strict).parse();
  if (errors.hasErrors() || env._parse_only) {
    return null;
  }
  if (env._print_ast) {
    getErr().println(new ASTWriter(functionNode));
  }
  if (env._print_parse) {
    getErr().println(new PrintVisitor(functionNode));
  }
  final URL url=source.getURL();
  final ScriptLoader loader=env._loader_per_compile ? createNewLoader() : scriptLoader;
  final CodeSource cs=url == null ? null : new CodeSource(url,(CodeSigner[])null);
  final CodeInstaller<ScriptEnvironment> installer=new ContextCodeInstaller(this,loader,cs);
  final Compiler compiler=new Compiler(installer,functionNode,strict);
  compiler.compile();
  script=compiler.install();
  if (global != null) {
    global.cacheClass(source,script);
  }
  return script;
}","private synchronized Class<?> compile(final Source source,final ErrorManager errMan,final boolean strict){
  errMan.reset();
  GlobalObject global=null;
  Class<?> script;
  if (env._class_cache_size > 0) {
    global=(GlobalObject)Context.getGlobalTrusted();
    script=global.findCachedClass(source);
    if (script != null) {
      Compiler.LOG.fine(""String_Node_Str"" + source + ""String_Node_Str"");
      return script;
    }
  }
  final FunctionNode functionNode=new Parser(env,source,errMan,strict).parse();
  if (errors.hasErrors() || env._parse_only) {
    return null;
  }
  if (env._print_ast) {
    getErr().println(new ASTWriter(functionNode));
  }
  if (env._print_parse) {
    getErr().println(new PrintVisitor(functionNode));
  }
  final URL url=source.getURL();
  final ScriptLoader loader=env._loader_per_compile ? createNewLoader() : scriptLoader;
  final CodeSource cs=url == null ? null : new CodeSource(url,(CodeSigner[])null);
  final CodeInstaller<ScriptEnvironment> installer=new ContextCodeInstaller(this,loader,cs);
  final Compiler compiler=new Compiler(installer,functionNode,strict);
  compiler.compile();
  script=compiler.install();
  if (global != null) {
    global.cacheClass(source,script);
  }
  return script;
}"
79322,"/** 
 * Install a class for use by the Nashorn runtime
 * @param name Binary name of class.
 * @param data Class data bytes.
 * @param cs CodeSource code source of the class bytes.
 * @return Installed class.
 */
synchronized Class<?> installClass(final String name,final byte[] data,final CodeSource cs){
  if (cs == null) {
    return defineClass(name,data,0,data.length,new ProtectionDomain(null,getPermissions(null)));
  }
 else {
    return defineClass(name,data,0,data.length,cs);
  }
}","/** 
 * Install a class for use by the Nashorn runtime
 * @param name Binary name of class.
 * @param data Class data bytes.
 * @param cs CodeSource code source of the class bytes.
 * @return Installed class.
 */
synchronized Class<?> installClass(final String name,final byte[] data,final CodeSource cs){
  if (cs == null) {
    return defineClass(name,data,0,data.length,new ProtectionDomain(null,getPermissions(null)));
  }
  return defineClass(name,data,0,data.length,cs);
}"
79323,"/** 
 * Returns a method handle representing a constructor that takes a single argument of the source type (which, really, should be one of   {@link ScriptObject},   {@link ScriptFunction}, or   {@link Object}, and returns an instance of the adapter for the target type. Used to implement the function autoconverters as well as the Nashorn's JSR-223 script engine's   {@code getInterface()} method.
 * @param sourceType the source type; should be either {@link ScriptObject},   {@link ScriptFunction}, or  {@link Object}. In case of   {@code Object}, it will return a method handle that dispatches to either the script object or function constructor at invocation based on the actual argument.
 * @param targetType the target type, for which adapter instances will be created
 * @return the constructor method handle.
 * @throws Exception if anything goes wrong
 */
public static MethodHandle getConstructor(final Class<?> sourceType,final Class<?> targetType) throws Exception {
  final StaticClass adapterClass=getAdapterClassFor(new Class<?>[]{targetType});
  return AccessController.doPrivileged(new PrivilegedExceptionAction<MethodHandle>(){
    public MethodHandle run() throws Exception {
      return MH.bindTo(Bootstrap.getLinkerServices().getGuardedInvocation(new LinkRequestImpl(NashornCallSiteDescriptor.get(""String_Node_Str"",MethodType.methodType(targetType,StaticClass.class,sourceType),0),false,adapterClass,null)).getInvocation(),adapterClass);
    }
  }
);
}","/** 
 * Returns a method handle representing a constructor that takes a single argument of the source type (which, really, should be one of   {@link ScriptObject},   {@link ScriptFunction}, or   {@link Object}, and returns an instance of the adapter for the target type. Used to implement the function autoconverters as well as the Nashorn's JSR-223 script engine's   {@code getInterface()} method.
 * @param sourceType the source type; should be either {@link ScriptObject},   {@link ScriptFunction}, or  {@link Object}. In case of   {@code Object}, it will return a method handle that dispatches to either the script object or function constructor at invocation based on the actual argument.
 * @param targetType the target type, for which adapter instances will be created
 * @return the constructor method handle.
 * @throws Exception if anything goes wrong
 */
public static MethodHandle getConstructor(final Class<?> sourceType,final Class<?> targetType) throws Exception {
  final StaticClass adapterClass=getAdapterClassFor(new Class<?>[]{targetType});
  return AccessController.doPrivileged(new PrivilegedExceptionAction<MethodHandle>(){
    @Override public MethodHandle run() throws Exception {
      return MH.bindTo(Bootstrap.getLinkerServices().getGuardedInvocation(new LinkRequestImpl(NashornCallSiteDescriptor.get(""String_Node_Str"",MethodType.methodType(targetType,StaticClass.class,sourceType),0),false,adapterClass,null)).getInvocation(),adapterClass);
    }
  }
);
}"
79324,"@Override public RegExpMatcher match(final String str){
  if (pattern == null) {
    return null;
  }
  RegExpMatcher matcher=this.matcher;
  if (matcher == null || matcher.getInput() != str) {
    matcher=new DefaultMatcher(str);
    this.matcher=matcher;
  }
  return matcher;
}","@Override public RegExpMatcher match(final String str){
  if (pattern == null) {
    return null;
  }
  RegExpMatcher currentMatcher=this.matcher;
  if (currentMatcher == null || matcher.getInput() != str) {
    currentMatcher=new DefaultMatcher(str);
    this.matcher=currentMatcher;
  }
  return currentMatcher;
}"
79325,"@Override public RegExpMatcher match(final String input){
  if (regex == null) {
    return null;
  }
  RegExpMatcher matcher=this.matcher;
  if (matcher == null || input != matcher.getInput()) {
    matcher=new JoniMatcher(input);
    this.matcher=matcher;
  }
  return matcher;
}","@Override public RegExpMatcher match(final String input){
  if (regex == null) {
    return null;
  }
  RegExpMatcher currentMatcher=this.matcher;
  if (currentMatcher == null || input != currentMatcher.getInput()) {
    currentMatcher=new JoniMatcher(input);
    this.matcher=currentMatcher;
  }
  return currentMatcher;
}"
79326,"/** 
 * Throw a regexp parser exception.
 * @param key the message key
 * @param str string argument
 * @throws jdk.nashorn.internal.runtime.ParserException
 */
protected static void throwParserException(final String key,final String str) throws ParserException {
  throw new ParserException(ECMAErrors.getMessage(""String_Node_Str"" + key,str));
}","/** 
 * Throw a regexp parser exception.
 * @param key the message key
 * @param str string argument
 * @throws jdk.nashorn.internal.runtime.ParserException unconditionally
 */
protected static void throwParserException(final String key,final String str) throws ParserException {
  throw new ParserException(ECMAErrors.getMessage(""String_Node_Str"" + key,str));
}"
79327,"/** 
 * Creates a Regular expression from the given   {@code pattern} and {@code flags} strings.
 * @param pattern RegExp pattern string
 * @param flags RegExp flags string
 * @throws ParserException if flags is invalid or pattern string has syntax error.
 */
protected RegExp compile(final String pattern,final String flags) throws ParserException {
  return new DefaultRegExp(pattern,flags);
}","/** 
 * Creates a Regular expression from the given   {@code pattern} and {@code flags} strings.
 * @param pattern RegExp pattern string
 * @param flags   RegExp flags string
 * @return new RegExp
 * @throws ParserException if flags is invalid or pattern string has syntax error.
 */
protected RegExp compile(final String pattern,final String flags) throws ParserException {
  return new DefaultRegExp(pattern,flags);
}"
79328,"/** 
 * Compile a regexp with the given   {@code source} and {@code flags}.
 * @param pattern RegExp pattern string
 * @param flags  flag string
 * @throws ParserException if invalid source or flags
 */
public static RegExp create(final String pattern,final String flags){
  return instance.compile(pattern,flags);
}","/** 
 * Compile a regexp with the given   {@code source} and {@code flags}.
 * @param pattern RegExp pattern string
 * @param flags   flag string
 * @return new RegExp
 * @throws ParserException if invalid source or flags
 */
public static RegExp create(final String pattern,final String flags){
  return instance.compile(pattern,flags);
}"
79329,"/** 
 * Get the group with the given index or the empty string if group index is not valid.
 * @param index the group index
 * @return the group or """"
 */
public Object getGroup(int index){
  return index >= 0 && index < groups.length ? groups[index] : ""String_Node_Str"";
}","/** 
 * Get the group with the given index or the empty string if group index is not valid.
 * @param groupIndex the group index
 * @return the group or """"
 */
public Object getGroup(final int groupIndex){
  return groupIndex >= 0 && groupIndex < groups.length ? groups[groupIndex] : ""String_Node_Str"";
}"
79330,"public static boolean isDynamicMethod(final Object obj){
  return obj instanceof DynamicMethod;
}","/** 
 * Returns true if the object is a Dynalink Java dynamic method.
 * @param obj the object we want to test for being a dynamic method
 * @return true if it is a dynamic method, false otherwise.
 */
public static boolean isDynamicMethod(final Object obj){
  return obj instanceof DynamicMethod;
}"
79331,"public static final Attribute readAttribute(DataInputStream file,ConstantPool constant_pool) throws IOException, ClassFormatException {
  ConstantUtf8 c;
  String name;
  int name_index;
  int length;
  byte tag=Constants.ATTR_UNKNOWN;
  name_index=(int)file.readUnsignedShort();
  c=(ConstantUtf8)constant_pool.getConstant(name_index,Constants.CONSTANT_Utf8);
  name=c.getBytes();
  length=file.readInt();
  for (byte i=0; i < Constants.KNOWN_ATTRIBUTES; i++) {
    if (name.equals(Constants.ATTRIBUTE_NAMES[i])) {
      tag=i;
      break;
    }
  }
switch (tag) {
case Constants.ATTR_UNKNOWN:
    AttributeReader r=(AttributeReader)readers.get(name);
  if (r != null)   return r.createAttribute(name_index,length,file,constant_pool);
 else   return new Unknown(name_index,length,file,constant_pool);
case Constants.ATTR_CONSTANT_VALUE:
return new ConstantValue(name_index,length,file,constant_pool);
case Constants.ATTR_SOURCE_FILE:
return new SourceFile(name_index,length,file,constant_pool);
case Constants.ATTR_CODE:
return new Code(name_index,length,file,constant_pool);
case Constants.ATTR_EXCEPTIONS:
return new ExceptionTable(name_index,length,file,constant_pool);
case Constants.ATTR_LINE_NUMBER_TABLE:
return new LineNumberTable(name_index,length,file,constant_pool);
case Constants.ATTR_LOCAL_VARIABLE_TABLE:
return new LocalVariableTable(name_index,length,file,constant_pool);
case Constants.ATTR_INNER_CLASSES:
return new InnerClasses(name_index,length,file,constant_pool);
case Constants.ATTR_SYNTHETIC:
return new Synthetic(name_index,length,file,constant_pool);
case Constants.ATTR_DEPRECATED:
return new Deprecated(name_index,length,file,constant_pool);
case Constants.ATTR_PMG:
return new PMGClass(name_index,length,file,constant_pool);
case Constants.ATTR_SIGNATURE:
return new Signature(name_index,length,file,constant_pool);
case Constants.ATTR_STACK_MAP:
return new StackMap(name_index,length,file,constant_pool);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","public static final Attribute readAttribute(DataInputStream file,ConstantPool constant_pool) throws IOException, ClassFormatException {
  ConstantUtf8 c;
  String name;
  int name_index;
  int length;
  byte tag=Constants.ATTR_UNKNOWN;
  name_index=(int)file.readUnsignedShort();
  c=(ConstantUtf8)constant_pool.getConstant(name_index,Constants.CONSTANT_Utf8);
  name=c.getBytes();
  length=file.readInt();
  for (byte i=0; i < Constants.KNOWN_ATTRIBUTES; i++) {
    if (name.equals(Constants.ATTRIBUTE_NAMES[i])) {
      tag=i;
      break;
    }
  }
switch (tag) {
case Constants.ATTR_UNKNOWN:
    AttributeReader r=(AttributeReader)readers.get(name);
  if (r != null)   return r.createAttribute(name_index,length,file,constant_pool);
 else   return new Unknown(name_index,length,file,constant_pool);
case Constants.ATTR_CONSTANT_VALUE:
return new ConstantValue(name_index,length,file,constant_pool);
case Constants.ATTR_SOURCE_FILE:
return new SourceFile(name_index,length,file,constant_pool);
case Constants.ATTR_CODE:
return new Code(name_index,length,file,constant_pool);
case Constants.ATTR_EXCEPTIONS:
return new ExceptionTable(name_index,length,file,constant_pool);
case Constants.ATTR_LINE_NUMBER_TABLE:
return new LineNumberTable(name_index,length,file,constant_pool);
case Constants.ATTR_LOCAL_VARIABLE_TABLE:
return new LocalVariableTable(name_index,length,file,constant_pool);
case Constants.ATTR_LOCAL_VARIABLE_TYPE_TABLE:
return new LocalVariableTypeTable(name_index,length,file,constant_pool);
case Constants.ATTR_INNER_CLASSES:
return new InnerClasses(name_index,length,file,constant_pool);
case Constants.ATTR_SYNTHETIC:
return new Synthetic(name_index,length,file,constant_pool);
case Constants.ATTR_DEPRECATED:
return new Deprecated(name_index,length,file,constant_pool);
case Constants.ATTR_PMG:
return new PMGClass(name_index,length,file,constant_pool);
case Constants.ATTR_SIGNATURE:
return new Signature(name_index,length,file,constant_pool);
case Constants.ATTR_STACK_MAP:
return new StackMap(name_index,length,file,constant_pool);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
79332,"/** 
 * Instantiate from existing method.
 * @param m method
 * @param class_name class name containing this method
 * @param cp constant pool
 */
public MethodGen(Method m,String class_name,ConstantPoolGen cp){
  this(m.getAccessFlags(),Type.getReturnType(m.getSignature()),Type.getArgumentTypes(m.getSignature()),null,m.getName(),class_name,((m.getAccessFlags() & (Constants.ACC_ABSTRACT | Constants.ACC_NATIVE)) == 0) ? new InstructionList(m.getCode().getCode()) : null,cp);
  Attribute[] attributes=m.getAttributes();
  for (int i=0; i < attributes.length; i++) {
    Attribute a=attributes[i];
    if (a instanceof Code) {
      Code c=(Code)a;
      setMaxStack(c.getMaxStack());
      setMaxLocals(c.getMaxLocals());
      CodeException[] ces=c.getExceptionTable();
      if (ces != null) {
        for (int j=0; j < ces.length; j++) {
          CodeException ce=ces[j];
          int type=ce.getCatchType();
          ObjectType c_type=null;
          if (type > 0) {
            String cen=m.getConstantPool().getConstantString(type,Constants.CONSTANT_Class);
            c_type=new ObjectType(cen);
          }
          int end_pc=ce.getEndPC();
          int length=m.getCode().getCode().length;
          InstructionHandle end;
          if (length == end_pc) {
            end=il.getEnd();
          }
 else {
            end=il.findHandle(end_pc);
            end=end.getPrev();
          }
          addExceptionHandler(il.findHandle(ce.getStartPC()),end,il.findHandle(ce.getHandlerPC()),c_type);
        }
      }
      Attribute[] c_attributes=c.getAttributes();
      for (int j=0; j < c_attributes.length; j++) {
        a=c_attributes[j];
        if (a instanceof LineNumberTable) {
          LineNumber[] ln=((LineNumberTable)a).getLineNumberTable();
          for (int k=0; k < ln.length; k++) {
            LineNumber l=ln[k];
            addLineNumber(il.findHandle(l.getStartPC()),l.getLineNumber());
          }
        }
 else         if (a instanceof LocalVariableTable) {
          LocalVariable[] lv=((LocalVariableTable)a).getLocalVariableTable();
          removeLocalVariables();
          for (int k=0; k < lv.length; k++) {
            LocalVariable l=lv[k];
            InstructionHandle start=il.findHandle(l.getStartPC());
            InstructionHandle end=il.findHandle(l.getStartPC() + l.getLength());
            if (null == start) {
              start=il.getStart();
            }
            if (null == end) {
              end=il.getEnd();
            }
            addLocalVariable(l.getName(),Type.getType(l.getSignature()),l.getIndex(),start,end);
          }
        }
 else         addCodeAttribute(a);
      }
    }
 else     if (a instanceof ExceptionTable) {
      String[] names=((ExceptionTable)a).getExceptionNames();
      for (int j=0; j < names.length; j++)       addException(names[j]);
    }
 else     addAttribute(a);
  }
}","/** 
 * Instantiate from existing method.
 * @param m method
 * @param class_name class name containing this method
 * @param cp constant pool
 */
public MethodGen(Method m,String class_name,ConstantPoolGen cp){
  this(m.getAccessFlags(),Type.getReturnType(m.getSignature()),Type.getArgumentTypes(m.getSignature()),null,m.getName(),class_name,((m.getAccessFlags() & (Constants.ACC_ABSTRACT | Constants.ACC_NATIVE)) == 0) ? new InstructionList(m.getCode().getCode()) : null,cp);
  Attribute[] attributes=m.getAttributes();
  for (int i=0; i < attributes.length; i++) {
    Attribute a=attributes[i];
    if (a instanceof Code) {
      Code c=(Code)a;
      setMaxStack(c.getMaxStack());
      setMaxLocals(c.getMaxLocals());
      CodeException[] ces=c.getExceptionTable();
      if (ces != null) {
        for (int j=0; j < ces.length; j++) {
          CodeException ce=ces[j];
          int type=ce.getCatchType();
          ObjectType c_type=null;
          if (type > 0) {
            String cen=m.getConstantPool().getConstantString(type,Constants.CONSTANT_Class);
            c_type=new ObjectType(cen);
          }
          int end_pc=ce.getEndPC();
          int length=m.getCode().getCode().length;
          InstructionHandle end;
          if (length == end_pc) {
            end=il.getEnd();
          }
 else {
            end=il.findHandle(end_pc);
            end=end.getPrev();
          }
          addExceptionHandler(il.findHandle(ce.getStartPC()),end,il.findHandle(ce.getHandlerPC()),c_type);
        }
      }
      Attribute[] c_attributes=c.getAttributes();
      for (int j=0; j < c_attributes.length; j++) {
        a=c_attributes[j];
        if (a instanceof LineNumberTable) {
          LineNumber[] ln=((LineNumberTable)a).getLineNumberTable();
          for (int k=0; k < ln.length; k++) {
            LineNumber l=ln[k];
            addLineNumber(il.findHandle(l.getStartPC()),l.getLineNumber());
          }
        }
 else         if (a instanceof LocalVariableTable) {
          LocalVariable[] lv=((LocalVariableTable)a).getLocalVariableTable();
          removeLocalVariables();
          for (int k=0; k < lv.length; k++) {
            LocalVariable l=lv[k];
            InstructionHandle start=il.findHandle(l.getStartPC());
            InstructionHandle end=il.findHandle(l.getStartPC() + l.getLength());
            if (null == start) {
              start=il.getStart();
            }
            if (null == end) {
              end=il.getEnd();
            }
            addLocalVariable(l.getName(),Type.getType(l.getSignature()),l.getIndex(),start,end);
          }
        }
 else         if (a instanceof LocalVariableTypeTable) {
          LocalVariable[] lv=((LocalVariableTypeTable)a).getLocalVariableTypeTable();
          removeLocalVariables();
          for (int k=0; k < lv.length; k++) {
            LocalVariable l=lv[k];
            InstructionHandle start=il.findHandle(l.getStartPC());
            InstructionHandle end=il.findHandle(l.getStartPC() + l.getLength());
            if (null == start) {
              start=il.getStart();
            }
            if (null == end) {
              end=il.getEnd();
            }
            addLocalVariable(l.getName(),Type.getType(l.getSignature()),l.getIndex(),start,end);
          }
        }
 else         addCodeAttribute(a);
      }
    }
 else     if (a instanceof ExceptionTable) {
      String[] names=((ExceptionTable)a).getExceptionNames();
      for (int j=0; j < names.length; j++)       addException(names[j]);
    }
 else     addAttribute(a);
  }
}"
79333,"@Override public Symbol access(Name name,TypeSymbol location){
  return types.createErrorType(name,location,syms.errSymbol.type).tsym;
}","@Override protected Symbol access(Name name,TypeSymbol location){
  return ambiguousSyms.last();
}"
79334,"Symbol mostSpecific(List<Type> argtypes,Symbol m1,Symbol m2,Env<AttrContext> env,final Type site,boolean allowBoxing,boolean useVarargs){
switch (m2.kind) {
case MTH:
    if (m1 == m2)     return m1;
  boolean m1SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m1,m2,allowBoxing,useVarargs);
boolean m2SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m2,m1,allowBoxing,useVarargs);
if (m1SignatureMoreSpecific && m2SignatureMoreSpecific) {
Type mt1=types.memberType(site,m1);
Type mt2=types.memberType(site,m2);
if (!types.overrideEquivalent(mt1,mt2)) return ambiguityError(m1,m2);
if ((m1.flags() & BRIDGE) != (m2.flags() & BRIDGE)) return ((m1.flags() & BRIDGE) != 0) ? m2 : m1;
TypeSymbol m1Owner=(TypeSymbol)m1.owner;
TypeSymbol m2Owner=(TypeSymbol)m2.owner;
if (types.asSuper(m1Owner.type,m2Owner) != null && ((m1.owner.flags_field & INTERFACE) == 0 || (m2.owner.flags_field & INTERFACE) != 0) && m1.overrides(m2,m1Owner,types,false)) return m1;
if (types.asSuper(m2Owner.type,m1Owner) != null && ((m2.owner.flags_field & INTERFACE) == 0 || (m1.owner.flags_field & INTERFACE) != 0) && m2.overrides(m1,m2Owner,types,false)) return m2;
boolean m1Abstract=(m1.flags() & ABSTRACT) != 0;
boolean m2Abstract=(m2.flags() & ABSTRACT) != 0;
if (m1Abstract && !m2Abstract) return m2;
if (m2Abstract && !m1Abstract) return m1;
if (!m1Abstract && !m2Abstract) return ambiguityError(m1,m2);
if (!types.isSameTypes(m1.erasure(types).getParameterTypes(),m2.erasure(types).getParameterTypes())) return ambiguityError(m1,m2);
Type mst=mostSpecificReturnType(mt1,mt2);
if (mst == null) {
  return ambiguityError(m1,m2);
}
Symbol mostSpecific=mst == mt1 ? m1 : m2;
List<Type> allThrown=chk.intersect(mt1.getThrownTypes(),mt2.getThrownTypes());
Type newSig=types.createMethodTypeWithThrown(mostSpecific.type,allThrown);
MethodSymbol result=new MethodSymbol(mostSpecific.flags(),mostSpecific.name,newSig,mostSpecific.owner){
  @Override public MethodSymbol implementation(  TypeSymbol origin,  Types types,  boolean checkResult){
    if (origin == site.tsym)     return this;
 else     return super.implementation(origin,types,checkResult);
  }
}
;
return result;
}
if (m1SignatureMoreSpecific) return m1;
if (m2SignatureMoreSpecific) return m2;
return ambiguityError(m1,m2);
case AMBIGUOUS:
AmbiguityError e=(AmbiguityError)m2;
Symbol err1=mostSpecific(argtypes,m1,e.sym,env,site,allowBoxing,useVarargs);
Symbol err2=mostSpecific(argtypes,m1,e.sym2,env,site,allowBoxing,useVarargs);
if (err1 == err2) return err1;
if (err1 == e.sym && err2 == e.sym2) return m2;
if (err1 instanceof AmbiguityError && err2 instanceof AmbiguityError && ((AmbiguityError)err1).sym == ((AmbiguityError)err2).sym) return ambiguityError(m1,m2);
 else return ambiguityError(err1,err2);
default :
throw new AssertionError();
}
}","Symbol mostSpecific(List<Type> argtypes,Symbol m1,Symbol m2,Env<AttrContext> env,final Type site,boolean allowBoxing,boolean useVarargs){
switch (m2.kind) {
case MTH:
    if (m1 == m2)     return m1;
  boolean m1SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m1,m2,allowBoxing,useVarargs);
boolean m2SignatureMoreSpecific=signatureMoreSpecific(argtypes,env,site,m2,m1,allowBoxing,useVarargs);
if (m1SignatureMoreSpecific && m2SignatureMoreSpecific) {
Type mt1=types.memberType(site,m1);
Type mt2=types.memberType(site,m2);
if (!types.overrideEquivalent(mt1,mt2)) return ambiguityError(m1,m2);
if ((m1.flags() & BRIDGE) != (m2.flags() & BRIDGE)) return ((m1.flags() & BRIDGE) != 0) ? m2 : m1;
TypeSymbol m1Owner=(TypeSymbol)m1.owner;
TypeSymbol m2Owner=(TypeSymbol)m2.owner;
if (types.asSuper(m1Owner.type,m2Owner) != null && ((m1.owner.flags_field & INTERFACE) == 0 || (m2.owner.flags_field & INTERFACE) != 0) && m1.overrides(m2,m1Owner,types,false)) return m1;
if (types.asSuper(m2Owner.type,m1Owner) != null && ((m2.owner.flags_field & INTERFACE) == 0 || (m1.owner.flags_field & INTERFACE) != 0) && m2.overrides(m1,m2Owner,types,false)) return m2;
boolean m1Abstract=(m1.flags() & ABSTRACT) != 0;
boolean m2Abstract=(m2.flags() & ABSTRACT) != 0;
if (m1Abstract && !m2Abstract) return m2;
if (m2Abstract && !m1Abstract) return m1;
return ambiguityError(m1,m2);
}
if (m1SignatureMoreSpecific) return m1;
if (m2SignatureMoreSpecific) return m2;
return ambiguityError(m1,m2);
case AMBIGUOUS:
AmbiguityError e=(AmbiguityError)m2;
for (Symbol s : e.ambiguousSyms) {
if (mostSpecific(argtypes,m1,s,env,site,allowBoxing,useVarargs) != m1) {
return e.addAmbiguousSymbol(m1);
}
}
return m1;
default :
throw new AssertionError();
}
}"
79335,"AmbiguityError(Symbol sym1,Symbol sym2){
  super(AMBIGUOUS,sym1,""String_Node_Str"");
  this.sym2=sym2;
}","AmbiguityError(Symbol sym1,Symbol sym2){
  super(AMBIGUOUS,""String_Node_Str"");
  ambiguousSyms=flatten(sym2).appendList(flatten(sym1));
}"
79336,"@Override JCDiagnostic getDiagnostic(JCDiagnostic.DiagnosticType dkind,DiagnosticPosition pos,Symbol location,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes){
  AmbiguityError pair=this;
  while (true) {
    if (pair.sym.kind == AMBIGUOUS)     pair=(AmbiguityError)pair.sym;
 else     if (pair.sym2.kind == AMBIGUOUS)     pair=(AmbiguityError)pair.sym2;
 else     break;
  }
  Name sname=pair.sym.name;
  if (sname == names.init)   sname=pair.sym.owner.name;
  return diags.create(dkind,log.currentSource(),pos,""String_Node_Str"",sname,kindName(pair.sym),pair.sym,pair.sym.location(site,types),kindName(pair.sym2),pair.sym2,pair.sym2.location(site,types));
}","@Override JCDiagnostic getDiagnostic(JCDiagnostic.DiagnosticType dkind,DiagnosticPosition pos,Symbol location,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes){
  List<Symbol> diagSyms=ambiguousSyms.reverse();
  Symbol s1=diagSyms.head;
  Symbol s2=diagSyms.tail.head;
  Name sname=s1.name;
  if (sname == names.init)   sname=s1.owner.name;
  return diags.create(dkind,log.currentSource(),pos,""String_Node_Str"",sname,kindName(s1),s1,s1.location(site,types),kindName(s2),s2,s2.location(site,types));
}"
79337,"@Override public boolean exists(){
  return false;
}","@Override public boolean exists(){
  return true;
}"
79338,"/** 
 * Construct the SplitIndexWriter. Uses path to this file and relative path from this file.
 * @param path       Path to the file which is getting generated.
 * @param filename   Name of the file which is getting genrated.
 * @param relpath    Relative path from this file to the current directory.
 * @param indexbuilder Unicode based Index from {@link IndexBuilder}
 */
public SplitIndexWriter(ConfigurationImpl configuration,DocPath path,IndexBuilder indexbuilder,int prev,int next) throws IOException {
  super(configuration,path,indexbuilder);
  this.prev=prev;
  this.next=next;
}","/** 
 * Construct the SplitIndexWriter. Uses path to this file and relative path from this file.
 * @param path       Path to the file which is getting generated.
 * @param indexbuilder Unicode based Index from {@link IndexBuilder}
 */
public SplitIndexWriter(ConfigurationImpl configuration,DocPath path,IndexBuilder indexbuilder,int prev,int next) throws IOException {
  super(configuration,path,indexbuilder);
  this.prev=prev;
  this.next=next;
}"
79339,"/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @param filename File Name to which the PrintWriter willdo the Output.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  writer=Util.genWriter(configuration,path);
  this.configuration=configuration;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  writer=Util.genWriter(configuration,path);
  this.configuration=configuration;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}"
79340,"/** 
 * @inheritDoc 
 */
@Override public int hashCode(){
  return path.hashCode();
}","/** 
 * {@inheritDoc} 
 */
@Override public int hashCode(){
  return path.hashCode();
}"
79341,"/** 
 * @inheritDoc 
 */
@Override public boolean equals(Object other){
  return (other instanceof DocPath) && path.equals(((DocPath)other).path);
}","/** 
 * {@inheritDoc} 
 */
@Override public boolean equals(Object other){
  return (other instanceof DocPath) && path.equals(((DocPath)other).path);
}"
79342,"/** 
 * Find the specified directory in the source path.
 * @param name Name of the directory to be searched for in the source path.
 * @return File Return the directory if found else return null.
 */
public File getDirectory(DocPath p){
  for (int i=0; i < sourcePath.length; i++) {
    File directoryNeeded=new File(sourcePath[i],p.getPath());
    if (directoryNeeded.isDirectory()) {
      return directoryNeeded;
    }
  }
  return null;
}","/** 
 * Find the specified directory in the source path.
 * @param p Name of the directory to be searched for in the source path.
 * @return File Return the directory if found else return null.
 */
public File getDirectory(DocPath p){
  for (int i=0; i < sourcePath.length; i++) {
    File directoryNeeded=new File(sourcePath[i],p.getPath());
    if (directoryNeeded.isDirectory()) {
      return directoryNeeded;
    }
  }
  return null;
}"
79343,"/** 
 * Create the directory path for the file to be generated, construct FileOutputStream and OutputStreamWriter depending upon docencoding.
 * @param path The directory path to be created for this file.
 * @param filename File Name to which the PrintWriter will do the Output.
 * @param docencoding Encoding to be used for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 * @return Writer Writer for the file getting generated.
 * @see java.io.FileOutputStream
 * @see java.io.OutputStreamWriter
 */
public static Writer genWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  File file=path.resolveAgainst(configuration.destDirName);
  createDirectory(configuration,file.getParentFile());
  FileOutputStream fos=new FileOutputStream(file);
  if (configuration.docencoding == null) {
    return new BufferedWriter(new OutputStreamWriter(fos));
  }
 else {
    return new BufferedWriter(new OutputStreamWriter(fos,configuration.docencoding));
  }
}","/** 
 * Create the directory path for the file to be generated, construct FileOutputStream and OutputStreamWriter depending upon docencoding.
 * @param path The directory path to be created for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 * @return Writer Writer for the file getting generated.
 * @see java.io.FileOutputStream
 * @see java.io.OutputStreamWriter
 */
public static Writer genWriter(Configuration configuration,DocPath path) throws IOException, UnsupportedEncodingException {
  File file=path.resolveAgainst(configuration.destDirName);
  createDirectory(configuration,file.getParentFile());
  FileOutputStream fos=new FileOutputStream(file);
  if (configuration.docencoding == null) {
    return new BufferedWriter(new OutputStreamWriter(fos));
  }
 else {
    return new BufferedWriter(new OutputStreamWriter(fos,configuration.docencoding));
  }
}"
79344,"/** 
 * Given a path string create all the directories in the path. For example, if the path string is ""java/applet"", the method will create directory ""java"" and then ""java/applet"" if they don't exist. The file separator string ""/"" is platform dependent system property.
 * @param path Directory path string.
 */
public static void createDirectory(Configuration configuration,File dir){
  if (dir == null) {
    return;
  }
  if (dir.exists()) {
    return;
  }
 else {
    if (dir.mkdirs()) {
      return;
    }
 else {
      configuration.message.error(""String_Node_Str"",dir.getPath());
      throw new DocletAbortException();
    }
  }
}","/** 
 * Given a path string create all the directories in the path. For example, if the path string is ""java/applet"", the method will create directory ""java"" and then ""java/applet"" if they don't exist. The file separator string ""/"" is platform dependent system property.
 * @param dir Directory path string.
 */
public static void createDirectory(Configuration configuration,File dir){
  if (dir == null) {
    return;
  }
  if (dir.exists()) {
    return;
  }
 else {
    if (dir.mkdirs()) {
      return;
    }
 else {
      configuration.message.error(""String_Node_Str"",dir.getPath());
      throw new DocletAbortException();
    }
  }
}"
79345,"/** 
 * Return the kind of this tag. similar or synonymous tags.  For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0""> <tr><th><tt> kind()  </th>  <th><tt> name()      </th></tr> <tr><td><tt> @throws </td>  <td><tt> @throws     </td></tr> <tr><td><tt> @throws </td>  <td><tt> @exception  </td></tr> <tr><td><tt> @see    </td>  <td><tt> @see        </td></tr> <tr><td><tt> @see    </td>  <td><tt> @link       </td></tr> <tr><td><tt> @see    </td>  <td><tt> @linkplain  </td></tr> <tr><td><tt> @serial </td>  <td><tt> @serial     </td></tr> <tr><td><tt> @serial </td>  <td><tt> @serialData </td></tr> </table>
 */
String kind();","/** 
 * Return the kind of this tag. similar or synonymous tags.  For most tags, <code>kind()&nbsp;==&nbsp;name()</code>; the following table lists those cases where there is more than one tag of a given kind: <p> <table border=""1"" cellpadding=""4"" cellspacing=""0""> <tr><th><tt> kind()  </tt></th>  <th><tt> name()      </tt></th></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @throws     </tt></td></tr> <tr><td><tt> @throws </tt></td>  <td><tt> @exception  </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @see        </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @link       </tt></td></tr> <tr><td><tt> @see    </tt></td>  <td><tt> @linkplain  </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serial     </tt></td></tr> <tr><td><tt> @serial </tt></td>  <td><tt> @serialData </tt></td></tr> </table>
 */
String kind();"
79346,"/** 
 * Get the ClassFile object for a specified class.
 * @param className the name of the class to be returned.
 * @return the ClassFile for the given class
 * @throws Dependencies #ClassFileNotFoundException if the classfile cannot be found
 */
public ClassFile getClassFile(String className) throws ClassFileNotFoundException ;","/** 
 * Get the ClassFile object for a specified class.
 * @param className the name of the class to be returned.
 * @return the ClassFile for the given class
 * @throws Dependencies.ClassFileNotFoundException if the classfile cannot befound
 */
public ClassFile getClassFile(String className) throws ClassFileNotFoundException ;"
79347,"/** 
 * See   {@link Kind#LOCAL_UBYTE}. 
 */
R visitLocalAndValue(Instruction instr,int index,int value,P p);","/** 
 * See   {@link Kind#LOCAL_BYTE}. 
 */
R visitLocalAndValue(Instruction instr,int index,int value,P p);"
79348,"/** 
 * Add all the parameters for the executable member.
 * @param member the member to write parameters for.
 * @param includeAnnotations true if annotation information needs to be added.
 * @param tree the content tree to which the parameters information will be added.
 */
protected void addParameters(ExecutableMemberDoc member,boolean includeAnnotations,Content htmltree){
  htmltree.addContent(""String_Node_Str"");
  Parameter[] params=member.parameters();
  String indent=makeSpace(writer.displayLength);
  if (configuration().linksource) {
    indent+=makeSpace(member.name().length());
  }
  int paramstart;
  for (paramstart=0; paramstart < params.length; paramstart++) {
    Parameter param=params[paramstart];
    if (!param.name().startsWith(""String_Node_Str"")) {
      if (includeAnnotations) {
        boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,param,htmltree);
        if (foundAnnotations) {
          htmltree.addContent(DocletConstants.NL);
          htmltree.addContent(indent);
        }
      }
      addParam(member,param,(paramstart == params.length - 1) && member.isVarArgs(),htmltree);
      break;
    }
  }
  for (int i=paramstart + 1; i < params.length; i++) {
    htmltree.addContent(""String_Node_Str"");
    htmltree.addContent(DocletConstants.NL);
    htmltree.addContent(indent);
    if (includeAnnotations) {
      boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,params[i],htmltree);
      if (foundAnnotations) {
        htmltree.addContent(DocletConstants.NL);
        htmltree.addContent(indent);
      }
    }
    addParam(member,params[i],(i == params.length - 1) && member.isVarArgs(),htmltree);
  }
  htmltree.addContent(""String_Node_Str"");
}","/** 
 * Add all the parameters for the executable member.
 * @param member the member to write parameters for.
 * @param includeAnnotations true if annotation information needs to be added.
 * @param htmltree the content tree to which the parameters information will be added.
 */
protected void addParameters(ExecutableMemberDoc member,boolean includeAnnotations,Content htmltree){
  htmltree.addContent(""String_Node_Str"");
  Parameter[] params=member.parameters();
  String indent=makeSpace(writer.displayLength);
  if (configuration().linksource) {
    indent+=makeSpace(member.name().length());
  }
  int paramstart;
  for (paramstart=0; paramstart < params.length; paramstart++) {
    Parameter param=params[paramstart];
    if (!param.name().startsWith(""String_Node_Str"")) {
      if (includeAnnotations) {
        boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,param,htmltree);
        if (foundAnnotations) {
          htmltree.addContent(DocletConstants.NL);
          htmltree.addContent(indent);
        }
      }
      addParam(member,param,(paramstart == params.length - 1) && member.isVarArgs(),htmltree);
      break;
    }
  }
  for (int i=paramstart + 1; i < params.length; i++) {
    htmltree.addContent(""String_Node_Str"");
    htmltree.addContent(DocletConstants.NL);
    htmltree.addContent(indent);
    if (includeAnnotations) {
      boolean foundAnnotations=writer.addAnnotationInfo(indent.length(),member,params[i],htmltree);
      if (foundAnnotations) {
        htmltree.addContent(DocletConstants.NL);
        htmltree.addContent(indent);
      }
    }
    addParam(member,params[i],(i == params.length - 1) && member.isVarArgs(),htmltree);
  }
  htmltree.addContent(""String_Node_Str"");
}"
79349,"/** 
 * Add the inherited summary link for the member.
 * @param classDoc the classDoc that we should link to
 * @param member the member being linked to
 * @param linksTree the content tree to which the link will be added
 */
protected void addInheritedSummaryLink(ClassDoc cd,ProgramElementDoc member,Content linksTree){
  linksTree.addContent(new RawHtml(writer.getDocLink(LinkInfoImpl.CONTEXT_MEMBER,cd,(MemberDoc)member,member.name(),false)));
}","/** 
 * Add the inherited summary link for the member.
 * @param cd the classDoc that we should link to
 * @param member the member being linked to
 * @param linksTree the content tree to which the link will be added
 */
protected void addInheritedSummaryLink(ClassDoc cd,ProgramElementDoc member,Content linksTree){
  linksTree.addContent(new RawHtml(writer.getDocLink(LinkInfoImpl.CONTEXT_MEMBER,cd,(MemberDoc)member,member.name(),false)));
}"
79350,"/** 
 * Add the summary link for the member.
 * @param context the id of the context where the link will be printed
 * @param classDoc the classDoc that we should link to
 * @param member the member being linked to
 * @param tdSummary the content tree to which the link will be added
 */
protected void addSummaryLink(int context,ClassDoc cd,ProgramElementDoc member,Content tdSummary){
  ExecutableMemberDoc emd=(ExecutableMemberDoc)member;
  String name=emd.name();
  Content strong=HtmlTree.STRONG(new RawHtml(writer.getDocLink(context,cd,(MemberDoc)emd,name,false)));
  Content code=HtmlTree.CODE(strong);
  writer.displayLength=name.length();
  addParameters(emd,false,code);
  tdSummary.addContent(code);
}","/** 
 * Add the summary link for the member.
 * @param context the id of the context where the link will be printed
 * @param cd the classDoc that we should link to
 * @param member the member being linked to
 * @param tdSummary the content tree to which the link will be added
 */
protected void addSummaryLink(int context,ClassDoc cd,ProgramElementDoc member,Content tdSummary){
  ExecutableMemberDoc emd=(ExecutableMemberDoc)member;
  String name=emd.name();
  Content strong=HtmlTree.STRONG(new RawHtml(writer.getDocLink(context,cd,(MemberDoc)emd,name,false)));
  Content code=HtmlTree.CODE(strong);
  writer.displayLength=name.length();
  addParameters(emd,false,code);
  tdSummary.addContent(code);
}"
79351,"/** 
 * Add the comment for the given member.
 * @param member the member being documented.
 * @param contentTree the content tree to which the comment will be added.
 */
protected void addComment(ProgramElementDoc member,Content htmltree){
  if (member.inlineTags().length > 0) {
    writer.addInlineComment(member,htmltree);
  }
}","/** 
 * Add the comment for the given member.
 * @param member the member being documented.
 * @param htmltree the content tree to which the comment will be added.
 */
protected void addComment(ProgramElementDoc member,Content htmltree){
  if (member.inlineTags().length > 0) {
    writer.addInlineComment(member,htmltree);
  }
}"
79352,"/** 
 * Constructor. Initialises resource for the  {@link com.sun.tools.doclets.MessageRetriever}.
 */
private ConfigurationImpl(){
  standardmessage=new MessageRetriever(this,""String_Node_Str"");
}","/** 
 * Constructor. Initializes resource for the  {@link com.sun.tools.doclets.internal.toolkit.util.MessageRetriever MessageRetriever}.
 */
private ConfigurationImpl(){
  standardmessage=new MessageRetriever(this,""String_Node_Str"");
}"
79353,"/** 
 * Add the anchor.
 * @param builder the deprecated list builder
 * @param type the type of list being documented
 * @param contentTree the content tree to which the anchor will be added
 */
private void addAnchor(DeprecatedAPIListBuilder builder,int type,Content htmlTree){
  if (builder.hasDocumentation(type)) {
    htmlTree.addContent(getMarkerAnchor(ANCHORS[type]));
  }
}","/** 
 * Add the anchor.
 * @param builder the deprecated list builder
 * @param type the type of list being documented
 * @param htmlTree the content tree to which the anchor will be added
 */
private void addAnchor(DeprecatedAPIListBuilder builder,int type,Content htmlTree){
  if (builder.hasDocumentation(type)) {
    htmlTree.addContent(getMarkerAnchor(ANCHORS[type]));
  }
}"
79354,"/** 
 * Returns a package name label.
 * @param parsedName the package name
 * @return the package name content
 */
public Content getPackageLabel(String packageName){
  return new StringContent(packageName);
}","/** 
 * Returns a package name label.
 * @param packageName the package name
 * @return the package name content
 */
public Content getPackageLabel(String packageName){
  return new StringContent(packageName);
}"
79355,"/** 
 * Add the member header.
 * @param fieldsType the class document to be listed
 * @param fieldTypeStr the string for the filed type to be documented
 * @param fieldDimensions the dimensions of the field string to be added
 * @param firldName name of the field to be added
 * @param contentTree the content tree to which the member header will be added
 */
public void addMemberHeader(ClassDoc fieldType,String fieldTypeStr,String fieldDimensions,String fieldName,Content contentTree){
  Content nameContent=new RawHtml(fieldName);
  Content heading=HtmlTree.HEADING(HtmlConstants.MEMBER_HEADING,nameContent);
  contentTree.addContent(heading);
  Content pre=new HtmlTree(HtmlTag.PRE);
  if (fieldType == null) {
    pre.addContent(fieldTypeStr);
  }
 else {
    Content fieldContent=new RawHtml(writer.getLink(new LinkInfoImpl(LinkInfoImpl.CONTEXT_SERIAL_MEMBER,fieldType)));
    pre.addContent(fieldContent);
  }
  pre.addContent(fieldDimensions + ""String_Node_Str"");
  pre.addContent(fieldName);
  contentTree.addContent(pre);
}","/** 
 * Add the member header.
 * @param fieldType the class document to be listed
 * @param fieldTypeStr the string for the field type to be documented
 * @param fieldDimensions the dimensions of the field string to be added
 * @param fieldName name of the field to be added
 * @param contentTree the content tree to which the member header will be added
 */
public void addMemberHeader(ClassDoc fieldType,String fieldTypeStr,String fieldDimensions,String fieldName,Content contentTree){
  Content nameContent=new RawHtml(fieldName);
  Content heading=HtmlTree.HEADING(HtmlConstants.MEMBER_HEADING,nameContent);
  contentTree.addContent(heading);
  Content pre=new HtmlTree(HtmlTag.PRE);
  if (fieldType == null) {
    pre.addContent(fieldTypeStr);
  }
 else {
    Content fieldContent=new RawHtml(writer.getLink(new LinkInfoImpl(LinkInfoImpl.CONTEXT_SERIAL_MEMBER,fieldType)));
    pre.addContent(fieldContent);
  }
  pre.addContent(fieldDimensions + ""String_Node_Str"");
  pre.addContent(fieldName);
  contentTree.addContent(pre);
}"
79356,"/** 
 * Return path to the given file name in the given package. So if the name passed is ""Object.html"" and the name of the package is ""java.lang"", and if the relative path is ""../.."" then returned string will be ""../../java/lang/Object.html""
 * @param linkInfo the information about the link.
 * @param fileName the file name, to which path string is.
 */
private String pathString(LinkInfoImpl linkInfo){
  if (linkInfo.context == LinkInfoImpl.PACKAGE_FRAME) {
    return linkInfo.classDoc.name() + ""String_Node_Str"";
  }
  StringBuffer buf=new StringBuffer(m_writer.relativePath);
  buf.append(DirectoryManager.getPathToPackage(linkInfo.classDoc.containingPackage(),linkInfo.classDoc.name() + ""String_Node_Str""));
  return buf.toString();
}","/** 
 * Return path to the given file name in the given package. So if the name passed is ""Object.html"" and the name of the package is ""java.lang"", and if the relative path is ""../.."" then returned string will be ""../../java/lang/Object.html""
 * @param linkInfo the information about the link.
 */
private String pathString(LinkInfoImpl linkInfo){
  if (linkInfo.context == LinkInfoImpl.PACKAGE_FRAME) {
    return linkInfo.classDoc.name() + ""String_Node_Str"";
  }
  StringBuffer buf=new StringBuffer(m_writer.relativePath);
  buf.append(DirectoryManager.getPathToPackage(linkInfo.classDoc.containingPackage(),linkInfo.classDoc.name() + ""String_Node_Str""));
  return buf.toString();
}"
79357,"/** 
 * Adds the lower navigation bar and the bottom text (from the -bottom option) at the bottom of page.
 * @param the documentation tree to which the navigation bar footer will be added
 */
protected void addNavigationBarFooter(Content body){
  addNavLinks(false,body);
  addBottom(body);
}","/** 
 * Adds the lower navigation bar and the bottom text (from the -bottom option) at the bottom of page.
 * @param body the documentation tree to which the navigation bar footer will be added
 */
protected void addNavigationBarFooter(Content body){
  addNavLinks(false,body);
  addBottom(body);
}"
79358,"/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @param filename File Name to which the PrintWriter willdo the Output.
 * @param docencoding Encoding to be used for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnSupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,String path,String filename,String docencoding) throws IOException, UnsupportedEncodingException {
  super(Util.genWriter(configuration,path,filename,docencoding));
  this.configuration=configuration;
  htmlFilename=filename;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}","/** 
 * Constructor.
 * @param path The directory path to be created for this fileor null if none to be created.
 * @param filename File Name to which the PrintWriter willdo the Output.
 * @param docencoding Encoding to be used for this file.
 * @exception IOException Exception raised by the FileWriter is passed onto next level.
 * @exception UnsupportedEncodingException Exception raised by theOutputStreamWriter is passed on to next level.
 */
public HtmlWriter(Configuration configuration,String path,String filename,String docencoding) throws IOException, UnsupportedEncodingException {
  super(Util.genWriter(configuration,path,filename,docencoding));
  this.configuration=configuration;
  htmlFilename=filename;
  this.memberDetailsListPrinted=false;
  packageTableHeader=new String[]{configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str"")};
  useTableSummary=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""));
  modifierTypeHeader=configuration.getText(""String_Node_Str"",configuration.getText(""String_Node_Str""),configuration.getText(""String_Node_Str""));
  overviewLabel=getResource(""String_Node_Str"");
  defaultPackageLabel=new RawHtml(DocletConstants.DEFAULT_PACKAGE_NAME);
  packageLabel=getResource(""String_Node_Str"");
  useLabel=getResource(""String_Node_Str"");
  prevLabel=getResource(""String_Node_Str"");
  nextLabel=getResource(""String_Node_Str"");
  prevclassLabel=getResource(""String_Node_Str"");
  nextclassLabel=getResource(""String_Node_Str"");
  summaryLabel=getResource(""String_Node_Str"");
  detailLabel=getResource(""String_Node_Str"");
  framesLabel=getResource(""String_Node_Str"");
  noframesLabel=getResource(""String_Node_Str"");
  treeLabel=getResource(""String_Node_Str"");
  classLabel=getResource(""String_Node_Str"");
  deprecatedLabel=getResource(""String_Node_Str"");
  deprecatedPhrase=getResource(""String_Node_Str"");
  allclassesLabel=getResource(""String_Node_Str"");
  indexLabel=getResource(""String_Node_Str"");
  helpLabel=getResource(""String_Node_Str"");
  seeLabel=getResource(""String_Node_Str"");
  descriptionLabel=getResource(""String_Node_Str"");
  prevpackageLabel=getResource(""String_Node_Str"");
  nextpackageLabel=getResource(""String_Node_Str"");
  packagesLabel=getResource(""String_Node_Str"");
  methodDetailsLabel=getResource(""String_Node_Str"");
  annotationTypeDetailsLabel=getResource(""String_Node_Str"");
  fieldDetailsLabel=getResource(""String_Node_Str"");
  constructorDetailsLabel=getResource(""String_Node_Str"");
  enumConstantsDetailsLabel=getResource(""String_Node_Str"");
  specifiedByLabel=getResource(""String_Node_Str"");
  overridesLabel=getResource(""String_Node_Str"");
  descfrmClassLabel=getResource(""String_Node_Str"");
  descfrmInterfaceLabel=getResource(""String_Node_Str"");
}"
79359,"/** 
 * Get the enum constants documentation tree header.
 * @param enumConstant the enum constant being documented
 * @param enumConstantDetailsTree the content tree representing enum constant details
 * @return content tree for the enum constant documentation header
 */
public Content getEnumConstantsTreeHeader(FieldDoc enumConstant,Content enumConstantsDetailsTree);","/** 
 * Get the enum constants documentation tree header.
 * @param enumConstant the enum constant being documented
 * @param enumConstantsDetailsTree the content tree representing enum constant details
 * @return content tree for the enum constant documentation header
 */
public Content getEnumConstantsTreeHeader(FieldDoc enumConstant,Content enumConstantsDetailsTree);"
79360,"/** 
 * Return the list of visible constant fields for the given classdoc.
 * @param cd the classdoc to examine.
 * @return the list of visible constant fields for the given classdoc.
 */
protected List<FieldDoc> members(){
  List<ProgramElementDoc> l=visibleMemberMapFields.getLeafClassMembers(configuration);
  l.addAll(visibleMemberMapEnumConst.getLeafClassMembers(configuration));
  Iterator<ProgramElementDoc> iter;
  if (l != null) {
    iter=l.iterator();
  }
 else {
    return null;
  }
  List<FieldDoc> inclList=new LinkedList<FieldDoc>();
  FieldDoc member;
  while (iter.hasNext()) {
    member=(FieldDoc)iter.next();
    if (member.constantValue() != null) {
      inclList.add(member);
    }
  }
  return inclList;
}","/** 
 * Return the list of visible constant fields for the given classdoc.
 * @return the list of visible constant fields for the given classdoc.
 */
protected List<FieldDoc> members(){
  List<ProgramElementDoc> l=visibleMemberMapFields.getLeafClassMembers(configuration);
  l.addAll(visibleMemberMapEnumConst.getLeafClassMembers(configuration));
  Iterator<ProgramElementDoc> iter;
  if (l != null) {
    iter=l.iterator();
  }
 else {
    return null;
  }
  List<FieldDoc> inclList=new LinkedList<FieldDoc>();
  FieldDoc member;
  while (iter.hasNext()) {
    member=(FieldDoc)iter.next();
    if (member.constantValue() != null) {
      inclList.add(member);
    }
  }
  return inclList;
}"
79361,"/** 
 * Returns a list of methods that will be documented for the given class. This information can be used for doclet specific documentation generation.
 * @param classDoc the {@link ClassDoc} we want to check.
 * @param type the type of members to return.
 * @return a list of methods that will be documented.
 * @see VisibleMemberMap
 */
public List<ProgramElementDoc> members(int type){
  return visibleMemberMaps[type].getLeafClassMembers(configuration);
}","/** 
 * Returns a list of methods that will be documented for the given class. This information can be used for doclet specific documentation generation.
 * @param type the type of members to return.
 * @return a list of methods that will be documented.
 * @see VisibleMemberMap
 */
public List<ProgramElementDoc> members(int type){
  return visibleMemberMaps[type].getLeafClassMembers(configuration);
}"
79362,"/** 
 * Given an array of <code>Tag</code>s representing this custom tag, return its string representation.  Print a warning for param tags that do not map to parameters.  Print a warning for param tags that are duplicated.
 * @param paramTags the array of <code>ParamTag</code>s to convert.
 * @param writer the TagletWriter that will write this tag.
 * @param alreadyDocumented the set of exceptions that have alreadybeen documented.
 * @param rankMap a {@link java.util.Map} which holds orderinginformation about the parameters.
 * @param nameMap a {@link java.util.Map} which holds a mappingof a rank of a parameter to its name.  This is used to ensure that the right name is used when parameter documentation is inherited.
 * @return the TagletOutput representation of this <code>Tag</code>.
 */
private TagletOutput processParamTags(boolean isNonTypeParams,ParamTag[] paramTags,Map<String,String> rankMap,TagletWriter writer,Set<String> alreadyDocumented){
  TagletOutput result=writer.getOutputInstance();
  if (paramTags.length > 0) {
    for (int i=0; i < paramTags.length; ++i) {
      ParamTag pt=paramTags[i];
      String paramName=isNonTypeParams ? pt.parameterName() : ""String_Node_Str"" + pt.parameterName() + ""String_Node_Str"";
      if (!rankMap.containsKey(pt.parameterName())) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      String rank=rankMap.get(pt.parameterName());
      if (rank != null && alreadyDocumented.contains(rank)) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      result.appendOutput(processParamTag(isNonTypeParams,writer,pt,pt.parameterName(),alreadyDocumented.size() == 0));
      alreadyDocumented.add(rank);
    }
  }
  return result;
}","/** 
 * Given an array of <code>Tag</code>s representing this custom tag, return its string representation.  Print a warning for param tags that do not map to parameters.  Print a warning for param tags that are duplicated.
 * @param paramTags the array of <code>ParamTag</code>s to convert.
 * @param writer the TagletWriter that will write this tag.
 * @param alreadyDocumented the set of exceptions that have alreadybeen documented.
 * @param rankMap a {@link java.util.Map} which holds orderinginformation about the parameters.
 * @param rankMap a {@link java.util.Map} which holds a mappingof a rank of a parameter to its name.  This is used to ensure that the right name is used when parameter documentation is inherited.
 * @return the TagletOutput representation of this <code>Tag</code>.
 */
private TagletOutput processParamTags(boolean isNonTypeParams,ParamTag[] paramTags,Map<String,String> rankMap,TagletWriter writer,Set<String> alreadyDocumented){
  TagletOutput result=writer.getOutputInstance();
  if (paramTags.length > 0) {
    for (int i=0; i < paramTags.length; ++i) {
      ParamTag pt=paramTags[i];
      String paramName=isNonTypeParams ? pt.parameterName() : ""String_Node_Str"" + pt.parameterName() + ""String_Node_Str"";
      if (!rankMap.containsKey(pt.parameterName())) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      String rank=rankMap.get(pt.parameterName());
      if (rank != null && alreadyDocumented.contains(rank)) {
        writer.getMsgRetriever().warning(pt.position(),isNonTypeParams ? ""String_Node_Str"" : ""String_Node_Str"",paramName);
      }
      result.appendOutput(processParamTag(isNonTypeParams,writer,pt,pt.parameterName(),alreadyDocumented.size() == 0));
      alreadyDocumented.add(rank);
    }
  }
  return result;
}"
79363,"/** 
 * Given an array of <code>ParamTag</code>s,return its string representation. Try to inherit the param tags that are missing.
 * @param doc               the doc that holds the param tags.
 * @param writer            the TagletWriter that will write this tag.
 * @param formalParameters  The array of parmeters (from type or executablemember) to check.
 * @return the TagletOutput representation of these <code>ParamTag</code>s.
 */
private TagletOutput getTagletOutput(boolean isNonTypeParams,Doc holder,TagletWriter writer,Object[] formalParameters,ParamTag[] paramTags){
  TagletOutput result=writer.getOutputInstance();
  Set<String> alreadyDocumented=new HashSet<String>();
  if (paramTags.length > 0) {
    result.appendOutput(processParamTags(isNonTypeParams,paramTags,getRankMap(formalParameters),writer,alreadyDocumented));
  }
  if (alreadyDocumented.size() != formalParameters.length) {
    result.appendOutput(getInheritedTagletOutput(isNonTypeParams,holder,writer,formalParameters,alreadyDocumented));
  }
  return result;
}","/** 
 * Given an array of <code>ParamTag</code>s,return its string representation. Try to inherit the param tags that are missing.
 * @param holder            the doc that holds the param tags.
 * @param writer            the TagletWriter that will write this tag.
 * @param formalParameters  The array of parmeters (from type or executablemember) to check.
 * @return the TagletOutput representation of these <code>ParamTag</code>s.
 */
private TagletOutput getTagletOutput(boolean isNonTypeParams,Doc holder,TagletWriter writer,Object[] formalParameters,ParamTag[] paramTags){
  TagletOutput result=writer.getOutputInstance();
  Set<String> alreadyDocumented=new HashSet<String>();
  if (paramTags.length > 0) {
    result.appendOutput(processParamTags(isNonTypeParams,paramTags,getRankMap(formalParameters),writer,alreadyDocumented));
  }
  if (alreadyDocumented.size() != formalParameters.length) {
    result.appendOutput(getInheritedTagletOutput(isNonTypeParams,holder,writer,formalParameters,alreadyDocumented));
  }
  return result;
}"
79364,"/** 
 * Given the name of the field, return the corresponding FieldDoc.
 * @param config the current configuration of the doclet.
 * @param tag the value tag.
 * @param name the name of the field to search for.  The name should be in<qualified class name>#<field name> format. If the class name is omitted, it is assumed that the field is in the current class.
 * @return the corresponding FieldDoc. If the name is null or empty string,return field that the value tag was used in.
 * @throws DocletAbortException if the value tag does not specify a name toa value field and it is not used within the comments of a valid field.
 */
private FieldDoc getFieldDoc(Configuration config,Tag tag,String name){
  if (name == null || name.length() == 0) {
    if (tag.holder() instanceof FieldDoc) {
      return (FieldDoc)tag.holder();
    }
 else {
      throw new DocletAbortException();
    }
  }
  StringTokenizer st=new StringTokenizer(name,""String_Node_Str"");
  String memberName=null;
  ClassDoc cd=null;
  if (st.countTokens() == 1) {
    Doc holder=tag.holder();
    if (holder instanceof MemberDoc) {
      cd=((MemberDoc)holder).containingClass();
    }
 else     if (holder instanceof ClassDoc) {
      cd=(ClassDoc)holder;
    }
    memberName=st.nextToken();
  }
 else {
    cd=config.root.classNamed(st.nextToken());
    memberName=st.nextToken();
  }
  if (cd == null) {
    return null;
  }
  FieldDoc[] fields=cd.fields();
  for (int i=0; i < fields.length; i++) {
    if (fields[i].name().equals(memberName)) {
      return fields[i];
    }
  }
  return null;
}","/** 
 * Given the name of the field, return the corresponding FieldDoc.
 * @param config the current configuration of the doclet.
 * @param tag the value tag.
 * @param name the name of the field to search for.  The name should be in{@code <qualified class name>#<field name>} format. If the class name is omitted,it is assumed that the field is in the current class.
 * @return the corresponding FieldDoc. If the name is null or empty string,return field that the value tag was used in.
 * @throws DocletAbortException if the value tag does not specify a name toa value field and it is not used within the comments of a valid field.
 */
private FieldDoc getFieldDoc(Configuration config,Tag tag,String name){
  if (name == null || name.length() == 0) {
    if (tag.holder() instanceof FieldDoc) {
      return (FieldDoc)tag.holder();
    }
 else {
      throw new DocletAbortException();
    }
  }
  StringTokenizer st=new StringTokenizer(name,""String_Node_Str"");
  String memberName=null;
  ClassDoc cd=null;
  if (st.countTokens() == 1) {
    Doc holder=tag.holder();
    if (holder instanceof MemberDoc) {
      cd=((MemberDoc)holder).containingClass();
    }
 else     if (holder instanceof ClassDoc) {
      cd=(ClassDoc)holder;
    }
    memberName=st.nextToken();
  }
 else {
    cd=config.root.classNamed(st.nextToken());
    memberName=st.nextToken();
  }
  if (cd == null) {
    return null;
  }
  FieldDoc[] fields=cd.fields();
  for (int i=0; i < fields.length; i++) {
    if (fields[i].name().equals(memberName)) {
      return fields[i];
    }
  }
  return null;
}"
79365,"/** 
 * Return the list of deprecated Doc objects of a given type.
 * @param the constant representing the type of list being returned.
 */
public List<Doc> getList(int type){
  return deprecatedLists.get(type);
}","/** 
 * Return the list of deprecated Doc objects of a given type.
 * @param type the constant representing the type of list being returned.
 */
public List<Doc> getList(int type){
  return deprecatedLists.get(type);
}"
79366,"/** 
 * Get the Extern Item object associated with this package name.
 * @param pkgname Package name.
 */
private Item findPackageItem(String pkgName){
  if (packageToItemMap == null) {
    return null;
  }
  return packageToItemMap.get(pkgName);
}","/** 
 * Get the Extern Item object associated with this package name.
 * @param pkgName Package name.
 */
private Item findPackageItem(String pkgName){
  if (packageToItemMap == null) {
    return null;
  }
  return packageToItemMap.get(pkgName);
}"
79367,"/** 
 * Constructor to build a Extern Item object and map it with the package name. If the same package name is found in the map, then the first mapped Item object or offline location will be retained.
 * @param packagename Package name found in the ""package-list"" file.
 * @param path        URL or Directory path from where the ""package-list""file is picked.
 * @param relative    True if path is URL, false if directory path.
 */
Item(String packageName,String path,boolean relative){
  this.packageName=packageName;
  this.path=path;
  this.relative=relative;
  if (packageToItemMap == null) {
    packageToItemMap=new HashMap<String,Item>();
  }
  if (!packageToItemMap.containsKey(packageName)) {
    packageToItemMap.put(packageName,this);
  }
}","/** 
 * Constructor to build a Extern Item object and map it with the package name. If the same package name is found in the map, then the first mapped Item object or offline location will be retained.
 * @param packageName Package name found in the ""package-list"" file.
 * @param path        URL or Directory path from where the ""package-list""file is picked.
 * @param relative    True if path is URL, false if directory path.
 */
Item(String packageName,String path,boolean relative){
  this.packageName=packageName;
  this.path=path;
  this.relative=relative;
  if (packageToItemMap == null) {
    packageToItemMap=new HashMap<String,Item>();
  }
  if (!packageToItemMap.containsKey(packageName)) {
    packageToItemMap.put(packageName,this);
  }
}"
79368,"/** 
 * Return the package private members inherited by the class.  Only return if parent is package private and not documented.
 * @param configuation the current configuration of the doclet.
 * @return the package private members inherited by the class.
 */
private List<ProgramElementDoc> getInheritedPackagePrivateMethods(Configuration configuration){
  List<ProgramElementDoc> results=new ArrayList<ProgramElementDoc>();
  for (Iterator<ClassDoc> iter=visibleClasses.iterator(); iter.hasNext(); ) {
    ClassDoc currentClass=iter.next();
    if (currentClass != classdoc && currentClass.isPackagePrivate() && !Util.isLinkable(currentClass,configuration)) {
      results.addAll(getMembersFor(currentClass));
    }
  }
  return results;
}","/** 
 * Return the package private members inherited by the class.  Only return if parent is package private and not documented.
 * @param configuration the current configuration of the doclet.
 * @return the package private members inherited by the class.
 */
private List<ProgramElementDoc> getInheritedPackagePrivateMethods(Configuration configuration){
  List<ProgramElementDoc> results=new ArrayList<ProgramElementDoc>();
  for (Iterator<ClassDoc> iter=visibleClasses.iterator(); iter.hasNext(); ) {
    ClassDoc currentClass=iter.next();
    if (currentClass != classdoc && currentClass.isPackagePrivate() && !Util.isLinkable(currentClass,configuration)) {
      results.addAll(getMembersFor(currentClass));
    }
  }
  return results;
}"
79369,"/** 
 * Return the visible members of the class being mapped.  Also append at the end of the list members that are inherited by inaccessible parents. We document these members in the child because the parent is not documented.
 * @param configuation the current configuration of the doclet.
 */
public List<ProgramElementDoc> getLeafClassMembers(Configuration configuration){
  List<ProgramElementDoc> result=getMembersFor(classdoc);
  result.addAll(getInheritedPackagePrivateMethods(configuration));
  return result;
}","/** 
 * Return the visible members of the class being mapped.  Also append at the end of the list members that are inherited by inaccessible parents. We document these members in the child because the parent is not documented.
 * @param configuration the current configuration of the doclet.
 */
public List<ProgramElementDoc> getLeafClassMembers(Configuration configuration){
  List<ProgramElementDoc> result=getMembersFor(classdoc);
  result.addAll(getInheritedPackagePrivateMethods(configuration));
  return result;
}"
79370,"/** 
 * Configure the set of diagnostic parts that should be displayed by the formatter.
 * @param options options to set
 */
public void setVisible(Set<DiagnosticPart> visibleParts);","/** 
 * Configure the set of diagnostic parts that should be displayed by the formatter.
 * @param visibleParts the parts to be set
 */
public void setVisible(Set<DiagnosticPart> visibleParts);"
79371,"/** 
 * Constructor used by service provider mechanism.  The recommended way to obtain an instance of this class is by using   {@link #create} or theservice provider mechanism.
 * @see javax.tools.JavaCompilerTool
 * @see javax.tools.ToolProvider
 * @see #create
 */
@Deprecated public JavacTool(){
}","/** 
 * Constructor used by service provider mechanism.  The recommended way to obtain an instance of this class is by using   {@link #create} or theservice provider mechanism.
 * @see javax.tools.JavaCompiler
 * @see javax.tools.ToolProvider
 * @see #create
 */
@Deprecated public JavacTool(){
}"
79372,"public Iterator<TypeSymbol> iterator(){
  return new Iterator<TypeSymbol>(){
    List<TypeSymbol> seen=List.nil();
    TypeSymbol currentSym=getSymbol(intype);
    public boolean hasNext(){
      return currentSym != null;
    }
    public TypeSymbol next(){
      TypeSymbol prevSym=currentSym;
      currentSym=getSymbol(types.supertype(currentSym.type));
      return prevSym;
    }
    public void remove(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    TypeSymbol getSymbol(    Type intype){
      if (intype.tag != CLASS && intype.tag != TYPEVAR) {
        return null;
      }
      while (intype.tag == TYPEVAR)       intype=intype.getUpperBound();
      if (seen.contains(intype.tsym)) {
        return null;
      }
      seen=seen.prepend(intype.tsym);
      return intype.tsym;
    }
  }
;
}","public Iterator<TypeSymbol> iterator(){
  return new Iterator<TypeSymbol>(){
    List<TypeSymbol> seen=List.nil();
    TypeSymbol currentSym=symbolFor(intype);
    TypeSymbol prevSym=null;
    public boolean hasNext(){
      if (currentSym == syms.noSymbol) {
        currentSym=symbolFor(types.supertype(prevSym.type));
      }
      return currentSym != null;
    }
    public TypeSymbol next(){
      prevSym=currentSym;
      currentSym=syms.noSymbol;
      Assert.check(prevSym != null || prevSym != syms.noSymbol);
      return prevSym;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
    TypeSymbol symbolFor(    Type t){
      if (t.tag != CLASS && t.tag != TYPEVAR) {
        return null;
      }
      while (t.tag == TYPEVAR)       t=t.getUpperBound();
      if (seen.contains(t.tsym)) {
        return null;
      }
      seen=seen.prepend(t.tsym);
      return t.tsym;
    }
  }
;
}"
79373,"public boolean hasNext(){
  return currentSym != null;
}","public boolean hasNext(){
  if (currentSym == syms.noSymbol) {
    currentSym=symbolFor(types.supertype(prevSym.type));
  }
  return currentSym != null;
}"
79374,"public TypeSymbol next(){
  TypeSymbol prevSym=currentSym;
  currentSym=getSymbol(types.supertype(currentSym.type));
  return prevSym;
}","public TypeSymbol next(){
  prevSym=currentSym;
  currentSym=syms.noSymbol;
  Assert.check(prevSym != null || prevSym != syms.noSymbol);
  return prevSym;
}"
79375,"public void remove(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void remove(){
  throw new UnsupportedOperationException();
}"
79376,"/** 
 * Return an Iterable object to scan the superclasses of a given type. It's crucial that the scan is done lazily, as we don't want to accidentally access more supertypes than strictly needed (as this could trigger completion errors if some of the not-needed supertypes are missing/ill-formed).
 */
Iterable<TypeSymbol> superclasses(final Type intype){
  return new Iterable<TypeSymbol>(){
    public Iterator<TypeSymbol> iterator(){
      return new Iterator<TypeSymbol>(){
        List<TypeSymbol> seen=List.nil();
        TypeSymbol currentSym=getSymbol(intype);
        public boolean hasNext(){
          return currentSym != null;
        }
        public TypeSymbol next(){
          TypeSymbol prevSym=currentSym;
          currentSym=getSymbol(types.supertype(currentSym.type));
          return prevSym;
        }
        public void remove(){
          throw new UnsupportedOperationException(""String_Node_Str"");
        }
        TypeSymbol getSymbol(        Type intype){
          if (intype.tag != CLASS && intype.tag != TYPEVAR) {
            return null;
          }
          while (intype.tag == TYPEVAR)           intype=intype.getUpperBound();
          if (seen.contains(intype.tsym)) {
            return null;
          }
          seen=seen.prepend(intype.tsym);
          return intype.tsym;
        }
      }
;
    }
  }
;
}","/** 
 * Return an Iterable object to scan the superclasses of a given type. It's crucial that the scan is done lazily, as we don't want to accidentally access more supertypes than strictly needed (as this could trigger completion errors if some of the not-needed supertypes are missing/ill-formed).
 */
Iterable<TypeSymbol> superclasses(final Type intype){
  return new Iterable<TypeSymbol>(){
    public Iterator<TypeSymbol> iterator(){
      return new Iterator<TypeSymbol>(){
        List<TypeSymbol> seen=List.nil();
        TypeSymbol currentSym=symbolFor(intype);
        TypeSymbol prevSym=null;
        public boolean hasNext(){
          if (currentSym == syms.noSymbol) {
            currentSym=symbolFor(types.supertype(prevSym.type));
          }
          return currentSym != null;
        }
        public TypeSymbol next(){
          prevSym=currentSym;
          currentSym=syms.noSymbol;
          Assert.check(prevSym != null || prevSym != syms.noSymbol);
          return prevSym;
        }
        public void remove(){
          throw new UnsupportedOperationException();
        }
        TypeSymbol symbolFor(        Type t){
          if (t.tag != CLASS && t.tag != TYPEVAR) {
            return null;
          }
          while (t.tag == TYPEVAR)           t=t.getUpperBound();
          if (seen.contains(t.tsym)) {
            return null;
          }
          seen=seen.prepend(t.tsym);
          return t.tsym;
        }
      }
;
    }
  }
;
}"
79377,"private Symbol findMethod(Env<AttrContext> env,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes,Type intype,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  boolean abstractOk=true;
  List<Type> itypes=List.nil();
  for (  TypeSymbol s : superclasses(intype)) {
    bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,s.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
    abstractOk&=excludeAbstractsFilter.accepts(s);
    if (abstractOk) {
      for (      Type itype : types.interfaces(s.type)) {
        itypes=types.union(types.closure(itype),itypes);
      }
    }
    if (name == names.init)     break;
  }
  Symbol concrete=bestSoFar.kind < ERR && (bestSoFar.flags() & ABSTRACT) == 0 ? bestSoFar : methodNotFound;
  if (name != names.init) {
    for (    Type itype : itypes) {
      if (!itype.isInterface())       continue;
      bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,itype.tsym.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
      if (concrete != bestSoFar && concrete.kind < ERR && bestSoFar.kind < ERR && types.isSubSignature(concrete.type,bestSoFar.type)) {
        bestSoFar=concrete;
      }
    }
  }
  return bestSoFar;
}","private Symbol findMethod(Env<AttrContext> env,Type site,Name name,List<Type> argtypes,List<Type> typeargtypes,Type intype,Symbol bestSoFar,boolean allowBoxing,boolean useVarargs,boolean operator){
  boolean abstractOk=true;
  List<Type> itypes=List.nil();
  for (  TypeSymbol s : superclasses(intype)) {
    bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,s.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
    abstractOk&=(s.flags() & (ABSTRACT | INTERFACE | ENUM)) != 0;
    if (abstractOk) {
      for (      Type itype : types.interfaces(s.type)) {
        itypes=types.union(types.closure(itype),itypes);
      }
    }
    if (name == names.init)     break;
  }
  Symbol concrete=bestSoFar.kind < ERR && (bestSoFar.flags() & ABSTRACT) == 0 ? bestSoFar : methodNotFound;
  if (name != names.init) {
    for (    Type itype : itypes) {
      if (!itype.isInterface())       continue;
      bestSoFar=lookupMethod(env,site,name,argtypes,typeargtypes,itype.tsym.members(),bestSoFar,allowBoxing,useVarargs,operator,true);
      if (concrete != bestSoFar && concrete.kind < ERR && bestSoFar.kind < ERR && types.isSubSignature(concrete.type,bestSoFar.type)) {
        bestSoFar=concrete;
      }
    }
  }
  return bestSoFar;
}"
79378,"public boolean accepts(Name n){
  return n == names.init;
}","public boolean accepts(Name n){
  return n == n.table.names.init;
}"
79379,"public MethodHandle(int refKind,Symbol refSym,Names names){
  this.refKind=refKind;
  this.refSym=refSym;
  this.names=names;
  checkConsistent();
}","public MethodHandle(int refKind,Symbol refSym){
  this.refKind=refKind;
  this.refSym=refSym;
  checkConsistent();
}"
79380,"public Names(Context context){
  Options options=Options.instance(context);
  table=createTable(options);
  asterisk=fromString(""String_Node_Str"");
  comma=fromString(""String_Node_Str"");
  empty=fromString(""String_Node_Str"");
  hyphen=fromString(""String_Node_Str"");
  one=fromString(""String_Node_Str"");
  period=fromString(""String_Node_Str"");
  semicolon=fromString(""String_Node_Str"");
  slash=fromString(""String_Node_Str"");
  slashequals=fromString(""String_Node_Str"");
  _class=fromString(""String_Node_Str"");
  _default=fromString(""String_Node_Str"");
  _super=fromString(""String_Node_Str"");
  _this=fromString(""String_Node_Str"");
  _name=fromString(""String_Node_Str"");
  addSuppressed=fromString(""String_Node_Str"");
  any=fromString(""String_Node_Str"");
  append=fromString(""String_Node_Str"");
  clinit=fromString(""String_Node_Str"");
  clone=fromString(""String_Node_Str"");
  close=fromString(""String_Node_Str"");
  compareTo=fromString(""String_Node_Str"");
  desiredAssertionStatus=fromString(""String_Node_Str"");
  equals=fromString(""String_Node_Str"");
  error=fromString(""String_Node_Str"");
  family=fromString(""String_Node_Str"");
  finalize=fromString(""String_Node_Str"");
  forName=fromString(""String_Node_Str"");
  getClass=fromString(""String_Node_Str"");
  getClassLoader=fromString(""String_Node_Str"");
  getComponentType=fromString(""String_Node_Str"");
  getDeclaringClass=fromString(""String_Node_Str"");
  getMessage=fromString(""String_Node_Str"");
  hasNext=fromString(""String_Node_Str"");
  hashCode=fromString(""String_Node_Str"");
  init=fromString(""String_Node_Str"");
  initCause=fromString(""String_Node_Str"");
  iterator=fromString(""String_Node_Str"");
  length=fromString(""String_Node_Str"");
  next=fromString(""String_Node_Str"");
  ordinal=fromString(""String_Node_Str"");
  serialVersionUID=fromString(""String_Node_Str"");
  toString=fromString(""String_Node_Str"");
  value=fromString(""String_Node_Str"");
  valueOf=fromString(""String_Node_Str"");
  values=fromString(""String_Node_Str"");
  java_io_Serializable=fromString(""String_Node_Str"");
  java_lang_AutoCloseable=fromString(""String_Node_Str"");
  java_lang_Class=fromString(""String_Node_Str"");
  java_lang_Cloneable=fromString(""String_Node_Str"");
  java_lang_Enum=fromString(""String_Node_Str"");
  java_lang_Object=fromString(""String_Node_Str"");
  java_lang_invoke_MethodHandle=fromString(""String_Node_Str"");
  Array=fromString(""String_Node_Str"");
  Bound=fromString(""String_Node_Str"");
  Method=fromString(""String_Node_Str"");
  java_lang=fromString(""String_Node_Str"");
  Annotation=fromString(""String_Node_Str"");
  AnnotationDefault=fromString(""String_Node_Str"");
  Bridge=fromString(""String_Node_Str"");
  CharacterRangeTable=fromString(""String_Node_Str"");
  Code=fromString(""String_Node_Str"");
  CompilationID=fromString(""String_Node_Str"");
  ConstantValue=fromString(""String_Node_Str"");
  Deprecated=fromString(""String_Node_Str"");
  EnclosingMethod=fromString(""String_Node_Str"");
  Enum=fromString(""String_Node_Str"");
  Exceptions=fromString(""String_Node_Str"");
  InnerClasses=fromString(""String_Node_Str"");
  LineNumberTable=fromString(""String_Node_Str"");
  LocalVariableTable=fromString(""String_Node_Str"");
  LocalVariableTypeTable=fromString(""String_Node_Str"");
  RuntimeInvisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleTypeAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleTypeAnnotations=fromString(""String_Node_Str"");
  Signature=fromString(""String_Node_Str"");
  SourceFile=fromString(""String_Node_Str"");
  SourceID=fromString(""String_Node_Str"");
  StackMap=fromString(""String_Node_Str"");
  StackMapTable=fromString(""String_Node_Str"");
  Synthetic=fromString(""String_Node_Str"");
  Value=fromString(""String_Node_Str"");
  Varargs=fromString(""String_Node_Str"");
  ANNOTATION_TYPE=fromString(""String_Node_Str"");
  CONSTRUCTOR=fromString(""String_Node_Str"");
  FIELD=fromString(""String_Node_Str"");
  LOCAL_VARIABLE=fromString(""String_Node_Str"");
  METHOD=fromString(""String_Node_Str"");
  PACKAGE=fromString(""String_Node_Str"");
  PARAMETER=fromString(""String_Node_Str"");
  TYPE=fromString(""String_Node_Str"");
  TYPE_PARAMETER=fromString(""String_Node_Str"");
  TYPE_USE=fromString(""String_Node_Str"");
  CLASS=fromString(""String_Node_Str"");
  RUNTIME=fromString(""String_Node_Str"");
  SOURCE=fromString(""String_Node_Str"");
  T=fromString(""String_Node_Str"");
  deprecated=fromString(""String_Node_Str"");
  ex=fromString(""String_Node_Str"");
  package_info=fromString(""String_Node_Str"");
  BootstrapMethods=fromString(""String_Node_Str"");
}","public Names(Context context){
  Options options=Options.instance(context);
  table=createTable(options);
  asterisk=fromString(""String_Node_Str"");
  comma=fromString(""String_Node_Str"");
  empty=fromString(""String_Node_Str"");
  hyphen=fromString(""String_Node_Str"");
  one=fromString(""String_Node_Str"");
  period=fromString(""String_Node_Str"");
  semicolon=fromString(""String_Node_Str"");
  slash=fromString(""String_Node_Str"");
  slashequals=fromString(""String_Node_Str"");
  _class=fromString(""String_Node_Str"");
  _default=fromString(""String_Node_Str"");
  _super=fromString(""String_Node_Str"");
  _this=fromString(""String_Node_Str"");
  _name=fromString(""String_Node_Str"");
  addSuppressed=fromString(""String_Node_Str"");
  any=fromString(""String_Node_Str"");
  append=fromString(""String_Node_Str"");
  clinit=fromString(""String_Node_Str"");
  clone=fromString(""String_Node_Str"");
  close=fromString(""String_Node_Str"");
  compareTo=fromString(""String_Node_Str"");
  desiredAssertionStatus=fromString(""String_Node_Str"");
  equals=fromString(""String_Node_Str"");
  error=fromString(""String_Node_Str"");
  family=fromString(""String_Node_Str"");
  finalize=fromString(""String_Node_Str"");
  forName=fromString(""String_Node_Str"");
  getClass=fromString(""String_Node_Str"");
  getClassLoader=fromString(""String_Node_Str"");
  getComponentType=fromString(""String_Node_Str"");
  getDeclaringClass=fromString(""String_Node_Str"");
  getMessage=fromString(""String_Node_Str"");
  hasNext=fromString(""String_Node_Str"");
  hashCode=fromString(""String_Node_Str"");
  init=fromString(""String_Node_Str"");
  initCause=fromString(""String_Node_Str"");
  iterator=fromString(""String_Node_Str"");
  length=fromString(""String_Node_Str"");
  next=fromString(""String_Node_Str"");
  ordinal=fromString(""String_Node_Str"");
  serialVersionUID=fromString(""String_Node_Str"");
  toString=fromString(""String_Node_Str"");
  value=fromString(""String_Node_Str"");
  valueOf=fromString(""String_Node_Str"");
  values=fromString(""String_Node_Str"");
  java_io_Serializable=fromString(""String_Node_Str"");
  java_lang_AutoCloseable=fromString(""String_Node_Str"");
  java_lang_Class=fromString(""String_Node_Str"");
  java_lang_Cloneable=fromString(""String_Node_Str"");
  java_lang_Enum=fromString(""String_Node_Str"");
  java_lang_Object=fromString(""String_Node_Str"");
  java_lang_invoke_MethodHandle=fromString(""String_Node_Str"");
  Array=fromString(""String_Node_Str"");
  Bound=fromString(""String_Node_Str"");
  Method=fromString(""String_Node_Str"");
  java_lang=fromString(""String_Node_Str"");
  Annotation=fromString(""String_Node_Str"");
  AnnotationDefault=fromString(""String_Node_Str"");
  BootstrapMethods=fromString(""String_Node_Str"");
  Bridge=fromString(""String_Node_Str"");
  CharacterRangeTable=fromString(""String_Node_Str"");
  Code=fromString(""String_Node_Str"");
  CompilationID=fromString(""String_Node_Str"");
  ConstantValue=fromString(""String_Node_Str"");
  Deprecated=fromString(""String_Node_Str"");
  EnclosingMethod=fromString(""String_Node_Str"");
  Enum=fromString(""String_Node_Str"");
  Exceptions=fromString(""String_Node_Str"");
  InnerClasses=fromString(""String_Node_Str"");
  LineNumberTable=fromString(""String_Node_Str"");
  LocalVariableTable=fromString(""String_Node_Str"");
  LocalVariableTypeTable=fromString(""String_Node_Str"");
  RuntimeInvisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeInvisibleTypeAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleParameterAnnotations=fromString(""String_Node_Str"");
  RuntimeVisibleTypeAnnotations=fromString(""String_Node_Str"");
  Signature=fromString(""String_Node_Str"");
  SourceFile=fromString(""String_Node_Str"");
  SourceID=fromString(""String_Node_Str"");
  StackMap=fromString(""String_Node_Str"");
  StackMapTable=fromString(""String_Node_Str"");
  Synthetic=fromString(""String_Node_Str"");
  Value=fromString(""String_Node_Str"");
  Varargs=fromString(""String_Node_Str"");
  ANNOTATION_TYPE=fromString(""String_Node_Str"");
  CONSTRUCTOR=fromString(""String_Node_Str"");
  FIELD=fromString(""String_Node_Str"");
  LOCAL_VARIABLE=fromString(""String_Node_Str"");
  METHOD=fromString(""String_Node_Str"");
  PACKAGE=fromString(""String_Node_Str"");
  PARAMETER=fromString(""String_Node_Str"");
  TYPE=fromString(""String_Node_Str"");
  TYPE_PARAMETER=fromString(""String_Node_Str"");
  TYPE_USE=fromString(""String_Node_Str"");
  CLASS=fromString(""String_Node_Str"");
  RUNTIME=fromString(""String_Node_Str"");
  SOURCE=fromString(""String_Node_Str"");
  T=fromString(""String_Node_Str"");
  deprecated=fromString(""String_Node_Str"");
  ex=fromString(""String_Node_Str"");
  package_info=fromString(""String_Node_Str"");
}"
79381,"/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"". <p> If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by block HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag}s representing the first sentence of the comment
 */
Tag[] firstSentenceTags();","/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64;link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"". <p> If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by block HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag}s representing the first sentence of the comment
 */
Tag[] firstSentenceTags();"
79382,"/** 
 * Return comment as an array of tags. Includes inline tags (i.e. {&#64link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"".
 * @return an array of {@link Tag}s representing the comment
 */
Tag[] inlineTags();","/** 
 * Return comment as an array of tags. Includes inline tags (i.e. {&#64;link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of   {@linkplain Tag#kind() kind} ""Text"".Inline tags are represented as a  {@link SeeTag} of kind ""@see""and name ""@link"".
 * @return an array of {@link Tag}s representing the comment
 */
Tag[] inlineTags();"
79383,"/** 
 * Return the param tags in this method, excluding the type parameter tags.
 * @return an array of ParamTag containing all <code>&#64param</code> tagscorresponding to the parameters of this method.
 */
ParamTag[] paramTags();","/** 
 * Return the param tags in this method, excluding the type parameter tags.
 * @return an array of ParamTag containing all <code>&#64;param</code> tagscorresponding to the parameters of this method.
 */
ParamTag[] paramTags();"
79384,"/** 
 * Return the type parameter tags in this method.
 * @return an array of ParamTag containing all <code>&#64param</code> tagscorresponding to the type parameters of this method.
 * @since 1.5
 */
ParamTag[] typeParamTags();","/** 
 * Return the type parameter tags in this method.
 * @return an array of ParamTag containing all <code>&#64;param</code> tagscorresponding to the type parameters of this method.
 * @since 1.5
 */
ParamTag[] typeParamTags();"
79385,"/** 
 * Return the throws tags in this method.
 * @return an array of ThrowTag containing all <code>&#64exception</code>and <code>&#64throws</code> tags.
 */
ThrowsTag[] throwsTags();","/** 
 * Return the throws tags in this method.
 * @return an array of ThrowTag containing all <code>&#64;exception</code>and <code>&#64;throws</code> tags.
 */
ThrowsTag[] throwsTags();"
79386,"/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of kind ""Text"". Inline tags are represented as a   {@link SeeTag} of kind ""@link"".If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by paragraph and section terminating HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag} objects representing thefirst sentence of the comment
 */
Tag[] firstSentenceTags();","/** 
 * Return the first sentence of the comment as an array of tags. Includes inline tags (i.e. {&#64;link <i>reference</i>} tags)  but not block tags. Each section of plain text is represented as a   {@link Tag}of kind ""Text"". Inline tags are represented as a   {@link SeeTag} of kind ""@link"".If the locale is English language, the first sentence is determined by the rules described in the Java Language Specification (first version): &quot;This sentence ends at the first period that is followed by a blank, tab, or line terminator or at the first tagline.&quot;, in addition a line will be terminated by paragraph and section terminating HTML tags: &lt;p&gt;  &lt;/p&gt;  &lt;h1&gt; &lt;h2&gt;  &lt;h3&gt; &lt;h4&gt;  &lt;h5&gt;  &lt;h6&gt; &lt;hr&gt;  &lt;pre&gt;  or &lt;/pre&gt;. If the locale is not English, the sentence end will be determined by {@link BreakIterator#getSentenceInstance(Locale)}.
 * @return an array of {@link Tag} objects representing thefirst sentence of the comment
 */
Tag[] firstSentenceTags();"
79387,"/** 
 * Find the start position of a line.
 * @param line line number (beginning at 1)
 * @return     position of first character in line
 * @throws IndexOutOfBoundsException if <tt>lineNumber < 1</tt> if <tt>lineNumber > no. of lines</tt>
 */
long getStartPosition(long line);","/** 
 * Find the start position of a line.
 * @param line line number (beginning at 1)
 * @return     position of first character in line
 * @throws IndexOutOfBoundsException if  {@code lineNumber < 1}if   {@code lineNumber > no. of lines}
 */
long getStartPosition(long line);"
79388,"/** 
 * Print the heading in Html &lt;H2> format.
 * @param str The Header string.
 */
public void printIndexHeading(String str){
  h2();
  print(str);
  h2End();
}","/** 
 * Print the heading in Html   {@literal <H2>} format.
 * @param str The Header string.
 */
public void printIndexHeading(String str){
  h2();
  print(str);
  h2End();
}"
79389,"/** 
 * Suppose a piece of documentation has a relative link.  When you copy that documetation to another place such as the index or class-use page, that relative link will no longer work.  We should redirect those links so that they will work again. <p> Here is the algorithm used to fix the link: <p> &lt;relative link&gt; => docRoot + &lt;relative path to file&gt; + &lt;relative link&gt; <p> For example, suppose com.sun.javadoc.RootDoc has this link: &lt;a href=""package-summary.html""&gt;The package Page&lt;/a&gt; <p> If this link appeared in the index, we would redirect the link like this: &lt;a href=""./com/sun/javadoc/package-summary.html""&gt;The package Page&lt;/a&gt;
 * @param doc the Doc object whose documentation is being written.
 * @param text the text being written.
 * @return the text, with all the relative links redirected to work.
 */
private String redirectRelativeLinks(Doc doc,String text){
  if (doc == null || shouldNotRedirectRelativeLinks()) {
    return text;
  }
  String redirectPathFromRoot;
  if (doc instanceof ClassDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((ClassDoc)doc).containingPackage());
  }
 else   if (doc instanceof MemberDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((MemberDoc)doc).containingPackage());
  }
 else   if (doc instanceof PackageDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath((PackageDoc)doc);
  }
 else {
    return text;
  }
  if (!redirectPathFromRoot.endsWith(DirectoryManager.URL_FILE_SEPARATOR)) {
    redirectPathFromRoot+=DirectoryManager.URL_FILE_SEPARATOR;
  }
  int end, begin=text.toLowerCase().indexOf(""String_Node_Str"");
  if (begin >= 0) {
    StringBuffer textBuff=new StringBuffer(text);
    while (begin >= 0) {
      if (textBuff.length() > begin + 2 && !Character.isWhitespace(textBuff.charAt(begin + 2))) {
        begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
        continue;
      }
      begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
      end=textBuff.indexOf(""String_Node_Str"",begin + 1);
      if (begin == 0) {
        configuration.root.printWarning(doc.position(),configuration.getText(""String_Node_Str"",text));
        break;
      }
      if (end == -1) {
        break;
      }
      if (textBuff.substring(begin,end).indexOf(""String_Node_Str"") != -1) {
        begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
        end=textBuff.indexOf(""String_Node_Str"",begin + 1);
        if (begin == 0 || end == -1) {
          break;
        }
      }
      String relativeLink=textBuff.substring(begin,end);
      if (!(relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"")|| relativeLink.toLowerCase().startsWith(""String_Node_Str""))) {
        relativeLink=""String_Node_Str"" + (new DocRootTaglet()).getName() + ""String_Node_Str""+ redirectPathFromRoot+ relativeLink;
        textBuff.replace(begin,end,relativeLink);
      }
      begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
    }
    return textBuff.toString();
  }
  return text;
}","/** 
 * Suppose a piece of documentation has a relative link.  When you copy that documetation to another place such as the index or class-use page, that relative link will no longer work.  We should redirect those links so that they will work again. <p> Here is the algorithm used to fix the link: <p>  {@literal <relative link> => docRoot + <relative path to file> + <relative link> }<p> For example, suppose com.sun.javadoc.RootDoc has this link:  {@literal <a href=""package-summary.html"">The package Page</a> }<p> If this link appeared in the index, we would redirect the link like this:  {@literal <a href=""./com/sun/javadoc/package-summary.html"">The package Page</a>}
 * @param doc the Doc object whose documentation is being written.
 * @param text the text being written.
 * @return the text, with all the relative links redirected to work.
 */
private String redirectRelativeLinks(Doc doc,String text){
  if (doc == null || shouldNotRedirectRelativeLinks()) {
    return text;
  }
  String redirectPathFromRoot;
  if (doc instanceof ClassDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((ClassDoc)doc).containingPackage());
  }
 else   if (doc instanceof MemberDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath(((MemberDoc)doc).containingPackage());
  }
 else   if (doc instanceof PackageDoc) {
    redirectPathFromRoot=DirectoryManager.getDirectoryPath((PackageDoc)doc);
  }
 else {
    return text;
  }
  if (!redirectPathFromRoot.endsWith(DirectoryManager.URL_FILE_SEPARATOR)) {
    redirectPathFromRoot+=DirectoryManager.URL_FILE_SEPARATOR;
  }
  int end, begin=text.toLowerCase().indexOf(""String_Node_Str"");
  if (begin >= 0) {
    StringBuffer textBuff=new StringBuffer(text);
    while (begin >= 0) {
      if (textBuff.length() > begin + 2 && !Character.isWhitespace(textBuff.charAt(begin + 2))) {
        begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
        continue;
      }
      begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
      end=textBuff.indexOf(""String_Node_Str"",begin + 1);
      if (begin == 0) {
        configuration.root.printWarning(doc.position(),configuration.getText(""String_Node_Str"",text));
        break;
      }
      if (end == -1) {
        break;
      }
      if (textBuff.substring(begin,end).indexOf(""String_Node_Str"") != -1) {
        begin=textBuff.indexOf(""String_Node_Str"",begin) + 1;
        end=textBuff.indexOf(""String_Node_Str"",begin + 1);
        if (begin == 0 || end == -1) {
          break;
        }
      }
      String relativeLink=textBuff.substring(begin,end);
      if (!(relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"") || relativeLink.toLowerCase().startsWith(""String_Node_Str"")|| relativeLink.toLowerCase().startsWith(""String_Node_Str""))) {
        relativeLink=""String_Node_Str"" + (new DocRootTaglet()).getName() + ""String_Node_Str""+ redirectPathFromRoot+ relativeLink;
        textBuff.replace(begin,end,relativeLink);
      }
      begin=textBuff.toString().toLowerCase().indexOf(""String_Node_Str"",begin + 1);
    }
    return textBuff.toString();
  }
  return text;
}"
79390,"/** 
 * Handles the &lt;ClassDoc> tag.
 * @param node the XML element that specifies which components to document
 * @param contentTree the content tree to which the documentation will be added
 */
public void buildClassDoc(XMLNode node,Content contentTree) throws Exception {
  String key;
  if (isInterface) {
    key=""String_Node_Str"";
  }
 else   if (isEnum) {
    key=""String_Node_Str"";
  }
 else {
    key=""String_Node_Str"";
  }
  contentTree=writer.getHeader(configuration.getText(key) + ""String_Node_Str"" + classDoc.name());
  Content classContentTree=writer.getClassContentHeader();
  buildChildren(node,classContentTree);
  contentTree.addContent(classContentTree);
  writer.addFooter(contentTree);
  writer.printDocument(contentTree);
  writer.close();
  copyDocFiles();
}","/** 
 * Handles the   {@literal <ClassDoc>} tag.
 * @param node the XML element that specifies which components to document
 * @param contentTree the content tree to which the documentation will be added
 */
public void buildClassDoc(XMLNode node,Content contentTree) throws Exception {
  String key;
  if (isInterface) {
    key=""String_Node_Str"";
  }
 else   if (isEnum) {
    key=""String_Node_Str"";
  }
 else {
    key=""String_Node_Str"";
  }
  contentTree=writer.getHeader(configuration.getText(key) + ""String_Node_Str"" + classDoc.name());
  Content classContentTree=writer.getClassContentHeader();
  buildChildren(node,classContentTree);
  contentTree.addContent(classContentTree);
  writer.addFooter(contentTree);
  writer.printDocument(contentTree);
  writer.close();
  copyDocFiles();
}"
79391,"/** 
 * Enter a binary operation, as above but with two opcodes, which get encoded as (opcode1 << ByteCodeTags.preShift) + opcode2.
 * @param opcode1     First opcode.
 * @param opcode2     Second opcode.
 */
private void enterBinop(String name,Type left,Type right,Type res,int opcode1,int opcode2){
  enterBinop(name,left,right,res,(opcode1 << ByteCodes.preShift) | opcode2);
}","/** 
 * Enter a binary operation, as above but with two opcodes, which get encoded as  {@code (opcode1 << ByteCodeTags.preShift) + opcode2 }.
 * @param opcode1     First opcode.
 * @param opcode2     Second opcode.
 */
private void enterBinop(String name,Type left,Type right,Type res,int opcode1,int opcode2){
  enterBinop(name,left,right,res,(opcode1 << ByteCodes.preShift) | opcode2);
}"
79392,"/** 
 * A statement of the form <pre> for ( T v : arrayexpr ) stmt; </pre> (where arrayexpr is of an array type) gets translated to <pre> for ( { arraytype #arr = arrayexpr; int #len = array.length; int #i = 0; }; #i < #len; i$++ ) { T v = arr$[#i]; stmt; } </pre> where #arr, #len, and #i are freshly named synthetic local variables.
 */
private void visitArrayForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  VarSymbol arraycache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),tree.expr.type,currentMethodSym);
  JCStatement arraycachedef=make.VarDef(arraycache,tree.expr);
  VarSymbol lencache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCStatement lencachedef=make.VarDef(lencache,make.Select(make.Ident(arraycache),syms.lengthVar));
  VarSymbol index=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCVariableDecl indexdef=make.VarDef(index,make.Literal(INT,0));
  indexdef.init.type=indexdef.type=syms.intType.constType(0);
  List<JCStatement> loopinit=List.of(arraycachedef,lencachedef,indexdef);
  JCBinary cond=makeBinary(LT,make.Ident(index),make.Ident(lencache));
  JCExpressionStatement step=make.Exec(makeUnary(PREINC,make.Ident(index)));
  Type elemtype=types.elemtype(tree.expr.type);
  JCExpression loopvarinit=make.Indexed(make.Ident(arraycache),make.Ident(index)).setType(elemtype);
  JCVariableDecl loopvardef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,loopvarinit).setType(tree.var.type);
  loopvardef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(loopvardef,tree.body));
  result=translate(make.ForLoop(loopinit,cond,List.of(step),body));
  patchTargets(body,tree,result);
}","/** 
 * A statement of the form <pre> for ( T v : arrayexpr ) stmt; </pre> (where arrayexpr is of an array type) gets translated to <pre>  {@code}for (  arraytype #arr = arrayexpr; int #len = array.length; int #i = 0; }; #i < #len; i$++ ) { T v = arr$[#i]; stmt; } }</pre> where #arr, #len, and #i are freshly named synthetic local variables.
 */
private void visitArrayForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  VarSymbol arraycache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),tree.expr.type,currentMethodSym);
  JCStatement arraycachedef=make.VarDef(arraycache,tree.expr);
  VarSymbol lencache=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCStatement lencachedef=make.VarDef(lencache,make.Select(make.Ident(arraycache),syms.lengthVar));
  VarSymbol index=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),syms.intType,currentMethodSym);
  JCVariableDecl indexdef=make.VarDef(index,make.Literal(INT,0));
  indexdef.init.type=indexdef.type=syms.intType.constType(0);
  List<JCStatement> loopinit=List.of(arraycachedef,lencachedef,indexdef);
  JCBinary cond=makeBinary(LT,make.Ident(index),make.Ident(lencache));
  JCExpressionStatement step=make.Exec(makeUnary(PREINC,make.Ident(index)));
  Type elemtype=types.elemtype(tree.expr.type);
  JCExpression loopvarinit=make.Indexed(make.Ident(arraycache),make.Ident(index)).setType(elemtype);
  JCVariableDecl loopvardef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,loopvarinit).setType(tree.var.type);
  loopvardef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(loopvardef,tree.body));
  result=translate(make.ForLoop(loopinit,cond,List.of(step),body));
  patchTargets(body,tree,result);
}"
79393,"/** 
 * Construct a tree that represents the closest outer instance <C.this> such that the given symbol is a member of C.
 * @param pos           The source code position to be used for the tree.
 * @param sym           The accessed symbol.
 * @param preciseMatch  should we accept a type that is a subtype ofsym's owner, even if it doesn't contain sym due to hiding, overriding, or non-inheritance due to protection?
 */
JCExpression makeOwnerThis(DiagnosticPosition pos,Symbol sym,boolean preciseMatch){
  Symbol c=sym.owner;
  if (preciseMatch ? sym.isMemberOf(currentClass,types) : currentClass.isSubClass(sym.owner,types)) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOwnerThisN(pos,sym,preciseMatch);
  }
}","/** 
 * Construct a tree that represents the closest outer instance  {@code C.this} such that the given symbol is a member of C.
 * @param pos           The source code position to be used for the tree.
 * @param sym           The accessed symbol.
 * @param preciseMatch  should we accept a type that is a subtype ofsym's owner, even if it doesn't contain sym due to hiding, overriding, or non-inheritance due to protection?
 */
JCExpression makeOwnerThis(DiagnosticPosition pos,Symbol sym,boolean preciseMatch){
  Symbol c=sym.owner;
  if (preciseMatch ? sym.isMemberOf(currentClass,types) : currentClass.isSubClass(sym.owner,types)) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOwnerThisN(pos,sym,preciseMatch);
  }
}"
79394,"/** 
 * Construct a tree that represents the outer instance <C.this>. Never pick the current `this'.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeOuterThis(DiagnosticPosition pos,TypeSymbol c){
  List<VarSymbol> ots=outerThisStack;
  if (ots.isEmpty()) {
    log.error(pos,""String_Node_Str"",c);
    Assert.error();
    return makeNull();
  }
  VarSymbol ot=ots.head;
  JCExpression tree=access(make.at(pos).Ident(ot));
  TypeSymbol otc=ot.type.tsym;
  while (otc != c) {
    do {
      ots=ots.tail;
      if (ots.isEmpty()) {
        log.error(pos,""String_Node_Str"",c);
        Assert.error();
        return tree;
      }
      ot=ots.head;
    }
 while (ot.owner != otc);
    if (otc.owner.kind != PCK && !otc.hasOuterInstance()) {
      chk.earlyRefError(pos,c);
      Assert.error();
      return makeNull();
    }
    tree=access(make.at(pos).Select(tree,ot));
    otc=ot.type.tsym;
  }
  return tree;
}","/** 
 * Construct a tree that represents the outer instance  {@code C.this}. Never pick the current `this'.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeOuterThis(DiagnosticPosition pos,TypeSymbol c){
  List<VarSymbol> ots=outerThisStack;
  if (ots.isEmpty()) {
    log.error(pos,""String_Node_Str"",c);
    Assert.error();
    return makeNull();
  }
  VarSymbol ot=ots.head;
  JCExpression tree=access(make.at(pos).Ident(ot));
  TypeSymbol otc=ot.type.tsym;
  while (otc != c) {
    do {
      ots=ots.tail;
      if (ots.isEmpty()) {
        log.error(pos,""String_Node_Str"",c);
        Assert.error();
        return tree;
      }
      ot=ots.head;
    }
 while (ot.owner != otc);
    if (otc.owner.kind != PCK && !otc.hasOuterInstance()) {
      chk.earlyRefError(pos,c);
      Assert.error();
      return makeNull();
    }
    tree=access(make.at(pos).Select(tree,ot));
    otc=ot.type.tsym;
  }
  return tree;
}"
79395,"/** 
 * Return tree simulating the assignment <this.this$n = this$n>.
 */
JCStatement initOuterThis(int pos){
  VarSymbol rhs=outerThisStack.head;
  Assert.check(rhs.owner.kind == MTH);
  VarSymbol lhs=outerThisStack.tail.head;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}","/** 
 * Return tree simulating the assignment   {@code this.this$n = this$n}.
 */
JCStatement initOuterThis(int pos){
  VarSymbol rhs=outerThisStack.head;
  Assert.check(rhs.owner.kind == MTH);
  VarSymbol lhs=outerThisStack.tail.head;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}"
79396,"/** 
 * Construct a tree simulating the expression <C.this>.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeThis(DiagnosticPosition pos,TypeSymbol c){
  if (currentClass == c) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOuterThis(pos,c);
  }
}","/** 
 * Construct a tree simulating the expression   {@code C.this}.
 * @param pos           The source code position to be used for the tree.
 * @param c             The qualifier class.
 */
JCExpression makeThis(DiagnosticPosition pos,TypeSymbol c){
  if (currentClass == c) {
    return make.at(pos).This(c.erasure(types));
  }
 else {
    return makeOuterThis(pos,c);
  }
}"
79397,"/** 
 * A statement of the form <pre> for ( T v : coll ) stmt ; </pre> (where coll implements Iterable<? extends T>) gets translated to <pre> for ( Iterator<? extends T> #i = coll.iterator(); #i.hasNext(); ) { T v = (T) #i.next(); stmt; } </pre> where #i is a freshly named synthetic local variable.
 */
private void visitIterableForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  Type iteratorTarget=syms.objectType;
  Type iterableType=types.asSuper(types.upperBound(tree.expr.type),syms.iterableType.tsym);
  if (iterableType.getTypeArguments().nonEmpty())   iteratorTarget=types.erasure(iterableType.getTypeArguments().head);
  Type eType=tree.expr.type;
  tree.expr.type=types.erasure(eType);
  if (eType.tag == TYPEVAR && eType.getUpperBound().isCompound())   tree.expr=make.TypeCast(types.erasure(iterableType),tree.expr);
  Symbol iterator=lookupMethod(tree.expr.pos(),names.iterator,types.erasure(syms.iterableType),List.<Type>nil());
  VarSymbol itvar=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),types.erasure(iterator.type.getReturnType()),currentMethodSym);
  JCStatement init=make.VarDef(itvar,make.App(make.Select(tree.expr,iterator)));
  Symbol hasNext=lookupMethod(tree.expr.pos(),names.hasNext,itvar.type,List.<Type>nil());
  JCMethodInvocation cond=make.App(make.Select(make.Ident(itvar),hasNext));
  Symbol next=lookupMethod(tree.expr.pos(),names.next,itvar.type,List.<Type>nil());
  JCExpression vardefinit=make.App(make.Select(make.Ident(itvar),next));
  if (tree.var.type.isPrimitive())   vardefinit=make.TypeCast(types.upperBound(iteratorTarget),vardefinit);
 else   vardefinit=make.TypeCast(tree.var.type,vardefinit);
  JCVariableDecl indexDef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,vardefinit).setType(tree.var.type);
  indexDef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(indexDef,tree.body));
  body.endpos=TreeInfo.endPos(tree.body);
  result=translate(make.ForLoop(List.of(init),cond,List.<JCExpressionStatement>nil(),body));
  patchTargets(body,tree,result);
}","/** 
 * A statement of the form <pre> for ( T v : coll ) stmt ; </pre> (where coll implements   {@code Iterable<? extends T>}) gets translated to <pre>  {@code}for ( Iterator<? extends T> #i = coll.iterator(); #i.hasNext(); )  T v = (T) #i.next(); stmt; } }</pre> where #i is a freshly named synthetic local variable.
 */
private void visitIterableForeachLoop(JCEnhancedForLoop tree){
  make_at(tree.expr.pos());
  Type iteratorTarget=syms.objectType;
  Type iterableType=types.asSuper(types.upperBound(tree.expr.type),syms.iterableType.tsym);
  if (iterableType.getTypeArguments().nonEmpty())   iteratorTarget=types.erasure(iterableType.getTypeArguments().head);
  Type eType=tree.expr.type;
  tree.expr.type=types.erasure(eType);
  if (eType.tag == TYPEVAR && eType.getUpperBound().isCompound())   tree.expr=make.TypeCast(types.erasure(iterableType),tree.expr);
  Symbol iterator=lookupMethod(tree.expr.pos(),names.iterator,types.erasure(syms.iterableType),List.<Type>nil());
  VarSymbol itvar=new VarSymbol(0,names.fromString(""String_Node_Str"" + target.syntheticNameChar()),types.erasure(iterator.type.getReturnType()),currentMethodSym);
  JCStatement init=make.VarDef(itvar,make.App(make.Select(tree.expr,iterator)));
  Symbol hasNext=lookupMethod(tree.expr.pos(),names.hasNext,itvar.type,List.<Type>nil());
  JCMethodInvocation cond=make.App(make.Select(make.Ident(itvar),hasNext));
  Symbol next=lookupMethod(tree.expr.pos(),names.next,itvar.type,List.<Type>nil());
  JCExpression vardefinit=make.App(make.Select(make.Ident(itvar),next));
  if (tree.var.type.isPrimitive())   vardefinit=make.TypeCast(types.upperBound(iteratorTarget),vardefinit);
 else   vardefinit=make.TypeCast(tree.var.type,vardefinit);
  JCVariableDecl indexDef=(JCVariableDecl)make.VarDef(tree.var.mods,tree.var.name,tree.var.vartype,vardefinit).setType(tree.var.type);
  indexDef.sym=tree.var.sym;
  JCBlock body=make.Block(0,List.of(indexDef,tree.body));
  body.endpos=TreeInfo.endPos(tree.body);
  result=translate(make.ForLoop(List.of(init),cond,List.<JCExpressionStatement>nil(),body));
  patchTargets(body,tree,result);
}"
79398,"/** 
 * Return tree simulating the assignment <this.name = name>, where name is the name of a free variable.
 */
JCStatement initField(int pos,Name name){
  Scope.Entry e=proxies.lookup(name);
  Symbol rhs=e.sym;
  Assert.check(rhs.owner.kind == MTH);
  Symbol lhs=e.next().sym;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}","/** 
 * Return tree simulating the assignment   {@code this.name = name}, where name is the name of a free variable.
 */
JCStatement initField(int pos,Name name){
  Scope.Entry e=proxies.lookup(name);
  Symbol rhs=e.sym;
  Assert.check(rhs.owner.kind == MTH);
  Symbol lhs=e.next().sym;
  Assert.check(rhs.owner.owner == lhs.owner);
  make.at(pos);
  return make.Exec(make.Assign(make.Select(make.This(lhs.owner.erasure(types)),lhs),make.Ident(rhs)).setType(lhs.erasure(types)));
}"
79399,"/** 
 * A name designates an operator if it consists of a non-empty sequence of operator symbols +-~!/*%&|^<>=
 */
boolean isOperator(Name name){
  int i=0;
  while (i < name.getByteLength() && ""String_Node_Str"".indexOf(name.getByteAt(i)) >= 0)   i++;
  return i > 0 && i == name.getByteLength();
}","/** 
 * A name designates an operator if it consists of a non-empty sequence of operator symbols   {@literal +-~!/*%&|^<>= }
 */
boolean isOperator(Name name){
  int i=0;
  while (i < name.getByteLength() && ""String_Node_Str"".indexOf(name.getByteAt(i)) >= 0)   i++;
  return i > 0 && i == name.getByteLength();
}"
79400,"/** 
 * This method scans all the constructor symbol in a given class scope - assuming that the original scope contains a constructor of the kind: Foo(X x, Y y), where X,Y are class type-variables declared in Foo, a method check is executed against the modified constructor type: <X,Y>Foo<X,Y>(X x, Y y). This is crucial in order to enable diamond inference. The inferred return type of the synthetic constructor IS the inferred type for the diamond operator.
 */
private Symbol findDiamond(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,boolean allowBoxing,boolean useVarargs){
  Symbol bestSoFar=methodNotFound;
  for (Scope.Entry e=site.tsym.members().lookup(names.init); e.scope != null; e=e.next()) {
    if (e.sym.kind == MTH && (e.sym.flags_field & SYNTHETIC) == 0) {
      List<Type> oldParams=e.sym.type.tag == FORALL ? ((ForAll)e.sym.type).tvars : List.<Type>nil();
      Type constrType=new ForAll(site.tsym.type.getTypeArguments().appendList(oldParams),types.createMethodTypeWithReturn(e.sym.type.asMethodType(),site));
      bestSoFar=selectBest(env,site,argtypes,typeargtypes,new MethodSymbol(e.sym.flags(),names.init,constrType,site.tsym),bestSoFar,allowBoxing,useVarargs,false);
    }
  }
  return bestSoFar;
}","/** 
 * This method scans all the constructor symbol in a given class scope - assuming that the original scope contains a constructor of the kind:  {@code Foo(X x, Y y)}, where X,Y are class type-variables declared in Foo, a method check is executed against the modified constructor type:  {@code <X,Y>Foo<X,Y>(X x, Y y)}. This is crucial in order to enable diamond inference. The inferred return type of the synthetic constructor IS the inferred type for the diamond operator.
 */
private Symbol findDiamond(Env<AttrContext> env,Type site,List<Type> argtypes,List<Type> typeargtypes,boolean allowBoxing,boolean useVarargs){
  Symbol bestSoFar=methodNotFound;
  for (Scope.Entry e=site.tsym.members().lookup(names.init); e.scope != null; e=e.next()) {
    if (e.sym.kind == MTH && (e.sym.flags_field & SYNTHETIC) == 0) {
      List<Type> oldParams=e.sym.type.tag == FORALL ? ((ForAll)e.sym.type).tvars : List.<Type>nil();
      Type constrType=new ForAll(site.tsym.type.getTypeArguments().appendList(oldParams),types.createMethodTypeWithReturn(e.sym.type.asMethodType(),site));
      bestSoFar=selectBest(env,site,argtypes,typeargtypes,new MethodSymbol(e.sym.flags(),names.init,constrType,site.tsym),bestSoFar,allowBoxing,useVarargs,false);
    }
  }
  return bestSoFar;
}"
79401,"/** 
 * Source file positions in CRT are integers in the format: line-number << LINESHIFT + column-number
 */
private int encodePosition(int pos,Position.LineMap lineMap,Log log){
  int line=lineMap.getLineNumber(pos);
  int col=lineMap.getColumnNumber(pos);
  int new_pos=Position.encodePosition(line,col);
  if (crtDebug) {
    System.out.println(""String_Node_Str"" + line + ""String_Node_Str""+ col+ ""String_Node_Str""+ new_pos);
  }
  if (new_pos == Position.NOPOS)   log.warning(pos,""String_Node_Str"",line);
  return new_pos;
}","/** 
 * Source file positions in CRT are integers in the format:  {@literal line-number << LINESHIFT + column-number }
 */
private int encodePosition(int pos,Position.LineMap lineMap,Log log){
  int line=lineMap.getLineNumber(pos);
  int col=lineMap.getColumnNumber(pos);
  int new_pos=Position.encodePosition(line,col);
  if (crtDebug) {
    System.out.println(""String_Node_Str"" + line + ""String_Node_Str""+ col+ ""String_Node_Str""+ new_pos);
  }
  if (new_pos == Position.NOPOS)   log.warning(pos,""String_Node_Str"",line);
  return new_pos;
}"
79402,"public synchronized int getNumDeactivated() throws RemoteException {
  return (num_deactivated);
}","public synchronized int getNumDeactivated() throws RemoteException {
  return num_deactivated;
}"
79403,"public static void main(String[] args){
  Registry registry;
  System.err.println(""String_Node_Str"");
  TestLibrary.suggestSecurityManager(""String_Node_Str"");
  RMID rmid=null;
  try {
    RMID.removeLog();
    rmid=RMID.createRMID();
    rmid.start();
    final Properties p=new Properties();
    p.put(""String_Node_Str"",TestParams.defaultGroupPolicy);
    p.put(""String_Node_Str"",TestParams.defaultSecurityManager);
    Thread t=new Thread(){
      public void run(){
        try {
          System.err.println(""String_Node_Str"");
          ActivationGroupDesc groupDesc=new ActivationGroupDesc(p,null);
          ActivationSystem system=ActivationGroup.getSystem();
          ActivationGroupID groupID=system.registerGroup(groupDesc);
          ActivateMe[] obj=new ActivateMe[NUM_OBJECTS];
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            ActivationDesc desc=new ActivationDesc(groupID,""String_Node_Str"",null,null);
            System.err.println(""String_Node_Str"" + i);
            obj[i]=(ActivateMe)Activatable.register(desc);
            System.err.println(""String_Node_Str"" + i);
            obj[i].ping();
          }
          lastResortExitObj=obj[0];
          System.err.println(""String_Node_Str"");
          system.unregisterGroup(groupID);
          try {
            System.err.println(""String_Node_Str"");
            system.getActivationGroupDesc(groupID);
            error=""String_Node_Str"";
          }
 catch (          UnknownGroupException e) {
            System.err.println(""String_Node_Str"" + ""String_Node_Str"");
          }
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            obj[i].shutdown();
            obj[i]=null;
          }
          lastResortExitObj=null;
        }
 catch (        Exception e) {
          exception=e;
        }
        done=true;
      }
    }
;
    t.start();
    t.join(120000);
    if (exception != null) {
      TestLibrary.bomb(""String_Node_Str"",exception);
    }
 else     if (error != null) {
      TestLibrary.bomb(error,null);
    }
 else     if (!done) {
      TestLibrary.bomb(""String_Node_Str"",null);
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    TestLibrary.bomb(""String_Node_Str"",e);
  }
 finally {
    if (lastResortExitObj != null) {
      try {
        lastResortExitObj.justGoAway();
      }
 catch (      Exception munch) {
      }
    }
    try {
      registry=TestLibrary.createRegistryOnUnusedPort();
      registryPort=TestLibrary.getRegistryPort(registry);
      Callback robj=new Callback();
      registry.bind(""String_Node_Str"",robj);
      int maxwait=30;
      int nd=robj.getNumDeactivated();
      while ((nd < NUM_OBJECTS) && (maxwait > 0)) {
        System.err.println(""String_Node_Str"" + nd);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ie) {
        }
        maxwait--;
        nd=robj.getNumDeactivated();
      }
    }
 catch (    Exception ce) {
      System.err.println(""String_Node_Str"" + ce);
      ce.printStackTrace();
    }
    ActivationLibrary.rmidCleanup(rmid);
  }
}","public static void main(String[] args) throws RemoteException {
  System.err.println(""String_Node_Str"");
  TestLibrary.suggestSecurityManager(""String_Node_Str"");
  RMID rmid=null;
  Registry registry=TestLibrary.createRegistryOnUnusedPort();
  registryPort=TestLibrary.getRegistryPort(registry);
  Callback robj=new Callback();
  registry.rebind(""String_Node_Str"",robj);
  try {
    RMID.removeLog();
    rmid=RMID.createRMID();
    rmid.start();
    final Properties p=new Properties();
    p.put(""String_Node_Str"",TestParams.defaultGroupPolicy);
    p.put(""String_Node_Str"",TestParams.defaultSecurityManager);
    p.put(""String_Node_Str"",Integer.toString(registryPort));
    Thread t=new Thread(){
      public void run(){
        try {
          System.err.println(""String_Node_Str"");
          ActivationGroupDesc groupDesc=new ActivationGroupDesc(p,null);
          ActivationSystem system=ActivationGroup.getSystem();
          ActivationGroupID groupID=system.registerGroup(groupDesc);
          ActivateMe[] obj=new ActivateMe[NUM_OBJECTS];
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            ActivationDesc desc=new ActivationDesc(groupID,""String_Node_Str"",null,null);
            System.err.println(""String_Node_Str"" + i);
            obj[i]=(ActivateMe)Activatable.register(desc);
            System.err.println(""String_Node_Str"" + i);
            obj[i].ping();
          }
          lastResortExitObj=obj[0];
          System.err.println(""String_Node_Str"");
          system.unregisterGroup(groupID);
          try {
            System.err.println(""String_Node_Str"");
            system.getActivationGroupDesc(groupID);
            error=""String_Node_Str"";
          }
 catch (          UnknownGroupException e) {
            System.err.println(""String_Node_Str"" + ""String_Node_Str"");
          }
          for (int i=0; i < NUM_OBJECTS; i++) {
            System.err.println(""String_Node_Str"" + i);
            obj[i].shutdown();
            obj[i]=null;
          }
          lastResortExitObj=null;
        }
 catch (        Exception e) {
          exception=e;
        }
        done=true;
      }
    }
;
    t.start();
    t.join(120000);
    if (exception != null) {
      TestLibrary.bomb(""String_Node_Str"",exception);
    }
 else     if (error != null) {
      TestLibrary.bomb(error,null);
    }
 else     if (!done) {
      TestLibrary.bomb(""String_Node_Str"",null);
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    TestLibrary.bomb(""String_Node_Str"",e);
  }
 finally {
    if (lastResortExitObj != null) {
      try {
        lastResortExitObj.justGoAway();
      }
 catch (      Exception munch) {
      }
    }
    try {
      int maxwait=30;
      int nd=robj.getNumDeactivated();
      while ((nd < NUM_OBJECTS) && (maxwait > 0)) {
        System.err.println(""String_Node_Str"" + nd);
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ie) {
        }
        maxwait--;
        nd=robj.getNumDeactivated();
      }
    }
 catch (    Exception ce) {
      System.err.println(""String_Node_Str"" + ce);
      ce.printStackTrace();
    }
    ActivationLibrary.rmidCleanup(rmid);
  }
}"
79404,"public void inc() throws RemoteException {
  incNumDeactivated();
}","public synchronized void inc() throws RemoteException {
  num_deactivated++;
}"
79405,"public String[] bases(String repId){
  String[] results=null;
  if (bases == null)   bases=new Hashtable();
 else   results=(String[])bases.get(repId);
  if (results == null && connectedCodeBase()) {
    results=delegate.bases(repId);
    if (results != null)     bases.put(repId,results);
  }
  return results;
}","public synchronized String[] bases(String repId){
  String[] results=null;
  if (bases == null)   bases=new Hashtable();
 else   results=(String[])bases.get(repId);
  if (results == null && connectedCodeBase()) {
    results=delegate.bases(repId);
    if (results != null)     bases.put(repId,results);
  }
  return results;
}"
79406,"public FullValueDescription[] metas(String[] repIds){
  FullValueDescription[] results=new FullValueDescription[repIds.length];
  for (int i=0; i < results.length; i++)   results[i]=meta(repIds[i]);
  return results;
}","public synchronized FullValueDescription[] metas(String[] repIds){
  FullValueDescription[] results=new FullValueDescription[repIds.length];
  for (int i=0; i < results.length; i++)   results[i]=meta(repIds[i]);
  return results;
}"
79407,"private boolean connectedCodeBase(){
  if (delegate != null)   return true;
  if (conn.getCodeBaseIOR() == null) {
    if (conn.getBroker().transportDebugFlag)     conn.dprint(""String_Node_Str"" + conn);
    return false;
  }
synchronized (this) {
    if (delegate != null)     return true;
    delegate=(CodeBase)CachedCodeBase.iorToCodeBaseObjMap.get(conn.getCodeBaseIOR());
    if (delegate != null)     return true;
    delegate=CodeBaseHelper.narrow(getObjectFromIOR());
    CachedCodeBase.iorToCodeBaseObjMap.put(conn.getCodeBaseIOR(),delegate);
  }
  return true;
}","private synchronized boolean connectedCodeBase(){
  if (delegate != null)   return true;
  if (conn.getCodeBaseIOR() == null) {
    if (conn.getBroker().transportDebugFlag)     conn.dprint(""String_Node_Str"" + conn);
    return false;
  }
synchronized (iorMapLock) {
    if (delegate != null)     return true;
    delegate=CachedCodeBase.iorMap.get(conn.getCodeBaseIOR());
    if (delegate != null)     return true;
    delegate=CodeBaseHelper.narrow(getObjectFromIOR());
    CachedCodeBase.iorMap.put(conn.getCodeBaseIOR(),delegate);
  }
  return true;
}"
79408,"public FullValueDescription meta(String repId){
  FullValueDescription result=null;
  if (fvds == null)   fvds=new Hashtable();
 else   result=(FullValueDescription)fvds.get(repId);
  if (result == null && connectedCodeBase()) {
    result=delegate.meta(repId);
    if (result != null)     fvds.put(repId,result);
  }
  return result;
}","public synchronized FullValueDescription meta(String repId){
  FullValueDescription result=null;
  if (fvds == null)   fvds=new Hashtable();
 else   result=(FullValueDescription)fvds.get(repId);
  if (result == null && connectedCodeBase()) {
    result=delegate.meta(repId);
    if (result != null)     fvds.put(repId,result);
  }
  return result;
}"
79409,"public String implementation(String repId){
  String urlResult=null;
  if (implementations == null)   implementations=new Hashtable();
 else   urlResult=(String)implementations.get(repId);
  if (urlResult == null && connectedCodeBase()) {
    urlResult=delegate.implementation(repId);
    if (urlResult != null)     implementations.put(repId,urlResult);
  }
  return urlResult;
}","public synchronized String implementation(String repId){
  String urlResult=null;
  if (implementations == null)   implementations=new Hashtable();
 else   urlResult=(String)implementations.get(repId);
  if (urlResult == null && connectedCodeBase()) {
    urlResult=delegate.implementation(repId);
    if (urlResult != null)     implementations.put(repId,urlResult);
  }
  return urlResult;
}"
79410,"public String[] implementations(String[] repIds){
  String[] urlResults=new String[repIds.length];
  for (int i=0; i < urlResults.length; i++)   urlResults[i]=implementation(repIds[i]);
  return urlResults;
}","public synchronized String[] implementations(String[] repIds){
  String[] urlResults=new String[repIds.length];
  for (int i=0; i < urlResults.length; i++)   urlResults[i]=implementation(repIds[i]);
  return urlResults;
}"
79411,"private static void executeCommandForPid(String pid,String command) throws AttachNotSupportedException, IOException, UnsupportedEncodingException {
  VirtualMachine vm=VirtualMachine.attach(pid);
  HotSpotVirtualMachine hvm=(HotSpotVirtualMachine)vm;
  try (InputStream in=hvm.executeJCmd(command)){
    byte b[]=new byte[256];
    int n;
    do {
      n=in.read(b);
      if (n > 0) {
        String s=new String(b,0,n,""String_Node_Str"");
        System.out.print(s);
      }
    }
 while (n > 0);
  }
   vm.detach();
}","private static void executeCommandForPid(String pid,String command) throws AttachNotSupportedException, IOException, UnsupportedEncodingException {
  VirtualMachine vm=VirtualMachine.attach(pid);
  HotSpotVirtualMachine hvm=(HotSpotVirtualMachine)vm;
  String lines[]=command.split(""String_Node_Str"");
  for (  String line : lines) {
    try (InputStream in=hvm.executeJCmd(line)){
      byte b[]=new byte[256];
      int n;
      do {
        n=in.read(b);
        if (n > 0) {
          String s=new String(b,0,n,""String_Node_Str"");
          System.out.print(s);
        }
      }
 while (n > 0);
    }
   }
  vm.detach();
}"
79412,"protected void close(){
  if (fd != null || fd1 != null) {
    datagramSocketClose();
    fd=null;
    fd1=null;
  }
}","protected void close(){
  if (fd != null || fd1 != null) {
    datagramSocketClose();
    ResourceManager.afterUdpClose();
    fd=null;
    fd1=null;
  }
}"
79413,"public Log make(){
  return Bark.instance(context);
}","public Log make(Context c){
  return Bark.instance(c);
}"
79414,"/** 
 * Preregisters factories to create and use a Bark object for use as both a Log and a Bark.
 */
public static void preRegister(final Context context){
  context.put(barkKey,new Context.Factory<Bark>(){
    public Bark make(){
      return new Bark(context);
    }
  }
);
  context.put(Log.logKey,new Context.Factory<Log>(){
    public Log make(){
      return Bark.instance(context);
    }
  }
);
}","/** 
 * Preregisters factories to create and use a Bark object for use as both a Log and a Bark.
 */
public static void preRegister(Context context){
  context.put(barkKey,new Context.Factory<Bark>(){
    public Bark make(    Context c){
      return new Bark(c);
    }
  }
);
  context.put(Log.logKey,new Context.Factory<Log>(){
    public Log make(    Context c){
      return Bark.instance(c);
    }
  }
);
}"
79415,"/** 
 * Register that a compilation is about to start.
 */
void beginContext(final Context context){
  if (compilationInProgress)   throw new IllegalStateException(""String_Node_Str"");
  compilationInProgress=true;
  final JavaFileManager givenFileManager=context.get(JavaFileManager.class);
  context.put(JavaFileManager.class,(JavaFileManager)null);
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(){
      if (givenFileManager != null) {
        context.put(JavaFileManager.class,givenFileManager);
        return givenFileManager;
      }
 else {
        return new JavacFileManager(context,true,null);
      }
    }
  }
);
}","/** 
 * Register that a compilation is about to start.
 */
void beginContext(Context context){
  if (compilationInProgress)   throw new IllegalStateException(""String_Node_Str"");
  compilationInProgress=true;
  final JavaFileManager givenFileManager=context.get(JavaFileManager.class);
  context.put(JavaFileManager.class,(JavaFileManager)null);
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(    Context c){
      if (givenFileManager != null) {
        c.put(JavaFileManager.class,givenFileManager);
        return givenFileManager;
      }
 else {
        return new JavacFileManager(c,true,null);
      }
    }
  }
);
}"
79416,"public JavaFileManager make(){
  if (givenFileManager != null) {
    context.put(JavaFileManager.class,givenFileManager);
    return givenFileManager;
  }
 else {
    return new JavacFileManager(context,true,null);
  }
}","public JavaFileManager make(Context c){
  if (givenFileManager != null) {
    c.put(JavaFileManager.class,givenFileManager);
    return givenFileManager;
  }
 else {
    return new JavacFileManager(c,true,null);
  }
}"
79417,"public FSInfo make(){
  FSInfo instance=new CacheFSInfo();
  context.put(FSInfo.class,instance);
  return instance;
}","public FSInfo make(Context c){
  FSInfo instance=new CacheFSInfo();
  c.put(FSInfo.class,instance);
  return instance;
}"
79418,"/** 
 * Register a Context.Factory to create a singleton CacheFSInfo.
 */
public static void preRegister(final Context context){
  context.put(FSInfo.class,new Context.Factory<FSInfo>(){
    public FSInfo make(){
      FSInfo instance=new CacheFSInfo();
      context.put(FSInfo.class,instance);
      return instance;
    }
  }
);
}","/** 
 * Register a Context.Factory to create a CacheFSInfo.
 */
public static void preRegister(Context context){
  context.put(FSInfo.class,new Context.Factory<FSInfo>(){
    public FSInfo make(    Context c){
      FSInfo instance=new CacheFSInfo();
      c.put(FSInfo.class,instance);
      return instance;
    }
  }
);
}"
79419,"/** 
 * Register a Context.Factory to create a JavacFileManager.
 */
public static void preRegister(final Context context){
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(){
      return new JavacFileManager(context,true,null);
    }
  }
);
}","/** 
 * Register a Context.Factory to create a JavacFileManager.
 */
public static void preRegister(Context context){
  context.put(JavaFileManager.class,new Context.Factory<JavaFileManager>(){
    public JavaFileManager make(    Context c){
      return new JavacFileManager(c,true,null);
    }
  }
);
}"
79420,"public JavaFileManager make(){
  return new JavacFileManager(context,true,null);
}","public JavaFileManager make(Context c){
  return new JavacFileManager(c,true,null);
}"
79421,"/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(final Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.isSet(VERBOSE);
  sourceOutput=options.isSet(PRINTSOURCE);
  stubOutput=options.isSet(""String_Node_Str"");
  relax=options.isSet(""String_Node_Str"");
  printFlat=options.isSet(""String_Node_Str"");
  attrParseOnly=options.isSet(""String_Node_Str"");
  encoding=options.get(ENCODING);
  lineDebugInfo=options.isUnset(G_CUSTOM) || options.isSet(G_CUSTOM,""String_Node_Str"");
  genEndPos=options.isSet(XJCOV) || context.get(DiagnosticListener.class) != null;
  devVerbose=options.isSet(""String_Node_Str"");
  processPcks=options.isSet(""String_Node_Str"");
  werror=options.isSet(WERROR);
  if (source.compareTo(Source.DEFAULT) < 0) {
    if (options.isUnset(XLINT_CUSTOM,""String_Node_Str"" + LintCategory.OPTIONS.option)) {
      if (fileManager instanceof BaseFileManager) {
        if (((BaseFileManager)fileManager).isDefaultBootClassPath())         log.warning(LintCategory.OPTIONS,""String_Node_Str"",source.name);
      }
    }
  }
  verboseCompilePolicy=options.isSet(""String_Node_Str"");
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=options.isSet(""String_Node_Str"") ? names.fromString(options.get(""String_Node_Str"")) : null;
  shouldStopPolicy=options.isSet(""String_Node_Str"") ? CompileState.valueOf(options.get(""String_Node_Str"")) : null;
  if (options.isUnset(""String_Node_Str""))   log.setDiagnosticFormatter(RichDiagnosticFormatter.instance(context));
}","/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.isSet(VERBOSE);
  sourceOutput=options.isSet(PRINTSOURCE);
  stubOutput=options.isSet(""String_Node_Str"");
  relax=options.isSet(""String_Node_Str"");
  printFlat=options.isSet(""String_Node_Str"");
  attrParseOnly=options.isSet(""String_Node_Str"");
  encoding=options.get(ENCODING);
  lineDebugInfo=options.isUnset(G_CUSTOM) || options.isSet(G_CUSTOM,""String_Node_Str"");
  genEndPos=options.isSet(XJCOV) || context.get(DiagnosticListener.class) != null;
  devVerbose=options.isSet(""String_Node_Str"");
  processPcks=options.isSet(""String_Node_Str"");
  werror=options.isSet(WERROR);
  if (source.compareTo(Source.DEFAULT) < 0) {
    if (options.isUnset(XLINT_CUSTOM,""String_Node_Str"" + LintCategory.OPTIONS.option)) {
      if (fileManager instanceof BaseFileManager) {
        if (((BaseFileManager)fileManager).isDefaultBootClassPath())         log.warning(LintCategory.OPTIONS,""String_Node_Str"",source.name);
      }
    }
  }
  verboseCompilePolicy=options.isSet(""String_Node_Str"");
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=options.isSet(""String_Node_Str"") ? names.fromString(options.get(""String_Node_Str"")) : null;
  shouldStopPolicy=options.isSet(""String_Node_Str"") ? CompileState.valueOf(options.get(""String_Node_Str"")) : null;
  if (options.isUnset(""String_Node_Str""))   log.setDiagnosticFormatter(RichDiagnosticFormatter.instance(context));
}"
79422,"/** 
 * Get the context for the next round of processing. Important values are propogated from round to round; other values are implicitly reset.
 */
private Context nextContext(){
  Context next=new Context();
  Options options=Options.instance(context);
  Assert.checkNonNull(options);
  next.put(Options.optionsKey,options);
  PrintWriter out=context.get(Log.outKey);
  Assert.checkNonNull(out);
  next.put(Log.outKey,out);
  final boolean shareNames=true;
  if (shareNames) {
    Names names=Names.instance(context);
    Assert.checkNonNull(names);
    next.put(Names.namesKey,names);
  }
  DiagnosticListener<?> dl=context.get(DiagnosticListener.class);
  if (dl != null)   next.put(DiagnosticListener.class,dl);
  TaskListener tl=context.get(TaskListener.class);
  if (tl != null)   next.put(TaskListener.class,tl);
  FSInfo fsInfo=context.get(FSInfo.class);
  if (fsInfo != null)   next.put(FSInfo.class,fsInfo);
  JavaFileManager jfm=context.get(JavaFileManager.class);
  Assert.checkNonNull(jfm);
  next.put(JavaFileManager.class,jfm);
  if (jfm instanceof JavacFileManager) {
    ((JavacFileManager)jfm).setContext(next);
  }
  Names names=Names.instance(context);
  Assert.checkNonNull(names);
  next.put(Names.namesKey,names);
  Keywords keywords=Keywords.instance(context);
  Assert.checkNonNull(keywords);
  next.put(Keywords.keywordsKey,keywords);
  JavaCompiler oldCompiler=JavaCompiler.instance(context);
  JavaCompiler nextCompiler=JavaCompiler.instance(next);
  nextCompiler.initRound(oldCompiler);
  filer.newRound(next);
  messager.newRound(next);
  elementUtils.setContext(next);
  typeUtils.setContext(next);
  JavacTaskImpl task=context.get(JavacTaskImpl.class);
  if (task != null) {
    next.put(JavacTaskImpl.class,task);
    task.updateContext(next);
  }
  JavacTrees trees=context.get(JavacTrees.class);
  if (trees != null) {
    next.put(JavacTrees.class,trees);
    trees.updateContext(next);
  }
  context.clear();
  return next;
}","/** 
 * Get the context for the next round of processing. Important values are propogated from round to round; other values are implicitly reset.
 */
private Context nextContext(){
  Context next=new Context(context);
  Options options=Options.instance(context);
  Assert.checkNonNull(options);
  next.put(Options.optionsKey,options);
  PrintWriter out=context.get(Log.outKey);
  Assert.checkNonNull(out);
  next.put(Log.outKey,out);
  final boolean shareNames=true;
  if (shareNames) {
    Names names=Names.instance(context);
    Assert.checkNonNull(names);
    next.put(Names.namesKey,names);
  }
  DiagnosticListener<?> dl=context.get(DiagnosticListener.class);
  if (dl != null)   next.put(DiagnosticListener.class,dl);
  TaskListener tl=context.get(TaskListener.class);
  if (tl != null)   next.put(TaskListener.class,tl);
  FSInfo fsInfo=context.get(FSInfo.class);
  if (fsInfo != null)   next.put(FSInfo.class,fsInfo);
  JavaFileManager jfm=context.get(JavaFileManager.class);
  Assert.checkNonNull(jfm);
  next.put(JavaFileManager.class,jfm);
  if (jfm instanceof JavacFileManager) {
    ((JavacFileManager)jfm).setContext(next);
  }
  Names names=Names.instance(context);
  Assert.checkNonNull(names);
  next.put(Names.namesKey,names);
  Keywords keywords=Keywords.instance(context);
  Assert.checkNonNull(keywords);
  next.put(Keywords.keywordsKey,keywords);
  JavaCompiler oldCompiler=JavaCompiler.instance(context);
  JavaCompiler nextCompiler=JavaCompiler.instance(next);
  nextCompiler.initRound(oldCompiler);
  filer.newRound(next);
  messager.newRound(next);
  elementUtils.setContext(next);
  typeUtils.setContext(next);
  JavacTaskImpl task=context.get(JavacTaskImpl.class);
  if (task != null) {
    next.put(JavacTaskImpl.class,task);
    task.updateContext(next);
  }
  JavacTrees trees=context.get(JavacTrees.class);
  if (trees != null) {
    next.put(JavacTrees.class,trees);
    trees.updateContext(next);
  }
  context.clear();
  return next;
}"
79423,"public Context(){
}","public Context(Context prev){
  kt.putAll(prev.kt);
  ft.putAll(prev.ft);
  ht.putAll(prev.ft);
}"
79424,"public void clear(){
  ht=null;
  kt=null;
}","public void clear(){
  ht=null;
  kt=null;
  ft=null;
}"
79425,T make();,T make(Context c);
79426,"public ClassReader make(){
  return new JavadocClassReader(context);
}","public ClassReader make(Context c){
  return new JavadocClassReader(c);
}"
79427,"public static void preRegister(final Context context){
  context.put(classReaderKey,new Context.Factory<ClassReader>(){
    public ClassReader make(){
      return new JavadocClassReader(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(classReaderKey,new Context.Factory<ClassReader>(){
    public ClassReader make(    Context c){
      return new JavadocClassReader(c);
    }
  }
);
}"
79428,"public Enter make(){
  return new JavadocEnter(context);
}","public Enter make(Context c){
  return new JavadocEnter(c);
}"
79429,"public static void preRegister(final Context context){
  context.put(enterKey,new Context.Factory<Enter>(){
    public Enter make(){
      return new JavadocEnter(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(enterKey,new Context.Factory<Enter>(){
    public Enter make(    Context c){
      return new JavadocEnter(c);
    }
  }
);
}"
79430,"public MemberEnter make(){
  return new JavadocMemberEnter(context);
}","public MemberEnter make(Context c){
  return new JavadocMemberEnter(c);
}"
79431,"public static void preRegister(final Context context){
  context.put(memberEnterKey,new Context.Factory<MemberEnter>(){
    public MemberEnter make(){
      return new JavadocMemberEnter(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(memberEnterKey,new Context.Factory<MemberEnter>(){
    public MemberEnter make(    Context c){
      return new JavadocMemberEnter(c);
    }
  }
);
}"
79432,"public Todo make(){
  return new JavadocTodo(context);
}","public Todo make(Context c){
  return new JavadocTodo(c);
}"
79433,"public static void preRegister(final Context context){
  context.put(todoKey,new Context.Factory<Todo>(){
    public Todo make(){
      return new JavadocTodo(context);
    }
  }
);
}","public static void preRegister(Context context){
  context.put(todoKey,new Context.Factory<Todo>(){
    public Todo make(    Context c){
      return new JavadocTodo(c);
    }
  }
);
}"
79434,"public Log make(){
  return new Messager(context,programName,errWriter,warnWriter,noticeWriter);
}","public Log make(Context c){
  return new Messager(c,programName,errWriter,warnWriter,noticeWriter);
}"
79435,"public static void preRegister(final Context context,final String programName,final PrintWriter errWriter,final PrintWriter warnWriter,final PrintWriter noticeWriter){
  context.put(logKey,new Context.Factory<Log>(){
    public Log make(){
      return new Messager(context,programName,errWriter,warnWriter,noticeWriter);
    }
  }
);
}","public static void preRegister(Context context,final String programName,final PrintWriter errWriter,final PrintWriter warnWriter,final PrintWriter noticeWriter){
  context.put(logKey,new Context.Factory<Log>(){
    public Log make(    Context c){
      return new Messager(c,programName,errWriter,warnWriter,noticeWriter);
    }
  }
);
}"
79436,"public JavacMessages make(){
  return new ArgTypeMessages(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      return getKeyArgsString(key,args);
    }
  }
;
}","public JavacMessages make(Context c){
  return new ArgTypeMessages(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      return getKeyArgsString(key,args);
    }
  }
;
}"
79437,"static void preRegister(final Context c){
  c.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
    public JavacMessages make(){
      return new ArgTypeMessages(c){
        @Override public String getLocalizedString(        Locale l,        String key,        Object... args){
          return getKeyArgsString(key,args);
        }
      }
;
    }
  }
);
}","static void preRegister(Context context){
  context.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
    public JavacMessages make(    Context c){
      return new ArgTypeMessages(c){
        @Override public String getLocalizedString(        Locale l,        String key,        Object... args){
          return getKeyArgsString(key,args);
        }
      }
;
    }
  }
);
}"
79438,"public JavacMessages make(){
  return new MessageTracker(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      keys.add(key);
      return super.getLocalizedString(l,key,args);
    }
  }
;
}","public JavacMessages make(Context c){
  return new MessageTracker(c){
    @Override public String getLocalizedString(    Locale l,    String key,    Object... args){
      keys.add(key);
      return super.getLocalizedString(l,key,args);
    }
  }
;
}"
79439,"static void preRegister(final Context c,final Set<String> keys){
  if (keys != null) {
    c.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
      public JavacMessages make(){
        return new MessageTracker(c){
          @Override public String getLocalizedString(          Locale l,          String key,          Object... args){
            keys.add(key);
            return super.getLocalizedString(l,key,args);
          }
        }
;
      }
    }
);
  }
}","static void preRegister(Context c,final Set<String> keys){
  if (keys != null) {
    c.put(JavacMessages.messagesKey,new Context.Factory<JavacMessages>(){
      public JavacMessages make(      Context c){
        return new MessageTracker(c){
          @Override public String getLocalizedString(          Locale l,          String key,          Object... args){
            keys.add(key);
            return super.getLocalizedString(l,key,args);
          }
        }
;
      }
    }
);
  }
}"
79440,"public Entry next(){
  Entry e=super.shadowed;
  while (e.scope != null && (e.sym.name != sym.name || e.sym.owner != e.scope.owner))   e=e.shadowed;
  return e;
}","public Entry next(){
  Entry e=super.shadowed;
  while (isBogus())   e=e.shadowed;
  return e;
}"
79441,"protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
  for (int i=0; i < INITIAL_SIZE; i++)   table[i]=sentinel;
}","protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
}"
79442,"protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
}","protected Scope(Symbol owner,ScopeCounter scopeCounter){
  this(null,owner,new Entry[INITIAL_SIZE],scopeCounter);
  for (int i=0; i < INITIAL_SIZE; i++)   table[i]=sentinel;
}"
79443,"@Override public void write(int b) throws IOException {
  size++;
}","@Override public void write(int b){
  size++;
}"
79444,"public int byteLength(){
class SizeOutputStream extends OutputStream {
    @Override public void write(    int b) throws IOException {
      size++;
    }
    int size;
  }
  SizeOutputStream sizeOut=new SizeOutputStream();
  DataOutputStream out=new DataOutputStream(sizeOut);
  try {
    out.writeUTF(value);
  }
 catch (  IOException ignore) {
  }
  return 1 + sizeOut.size;
}","public int byteLength(){
class SizeOutputStream extends OutputStream {
    @Override public void write(    int b){
      size++;
    }
    int size;
  }
  SizeOutputStream sizeOut=new SizeOutputStream();
  DataOutputStream out=new DataOutputStream(sizeOut);
  try {
    out.writeUTF(value);
  }
 catch (  IOException ignore) {
  }
  return 1 + sizeOut.size;
}"
79445,"/** 
 * Constructor
 * @param context      Context for this javadoc instance.
 */
private DocEnv(Context context){
  context.put(docEnvKey,this);
  messager=Messager.instance0(context);
  syms=Symtab.instance(context);
  reader=JavadocClassReader.instance0(context);
  enter=JavadocEnter.instance0(context);
  attr=Attr.instance(context);
  names=Names.instance(context);
  externalizableSym=reader.enterClass(names.fromString(""String_Node_Str""));
  chk=Check.instance(context);
  types=Types.instance(context);
  fileManager=context.get(JavaFileManager.class);
  this.doclocale=new DocLocale(this,""String_Node_Str"",breakiterator);
}","/** 
 * Constructor
 * @param context      Context for this javadoc instance.
 */
private DocEnv(Context context){
  context.put(docEnvKey,this);
  messager=Messager.instance0(context);
  syms=Symtab.instance(context);
  reader=JavadocClassReader.instance0(context);
  enter=JavadocEnter.instance0(context);
  names=Names.instance(context);
  externalizableSym=reader.enterClass(names.fromString(""String_Node_Str""));
  chk=Check.instance(context);
  types=Types.instance(context);
  fileManager=context.get(JavaFileManager.class);
  this.doclocale=new DocLocale(this,""String_Node_Str"",breakiterator);
}"
79446,"/** 
 * Default class enter visitor method: do nothing.
 */
public void visitTree(JCTree tree){
  result=null;
}","/** 
 * Default class enter visitor method: do nothing.
 */
@Override public void visitTree(JCTree tree){
  result=null;
}"
79447,"public void visitClassDef(JCClassDecl tree){
  Symbol owner=env.info.scope.owner;
  Scope enclScope=enterScope(env);
  ClassSymbol c;
  if (owner.kind == PCK) {
    PackageSymbol packge=(PackageSymbol)owner;
    for (Symbol q=packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    c=reader.enterClass(tree.name,packge);
    packge.members().enterIfAbsent(c);
    if ((tree.mods.flags & PUBLIC) != 0 && !classNameMatchesFileName(c,env)) {
      log.error(tree.pos(),""String_Node_Str"",tree.name);
    }
  }
 else {
    if (!tree.name.isEmpty() && !chk.checkUniqueClassName(tree.pos(),tree.name,enclScope)) {
      result=null;
      return;
    }
    if (owner.kind == TYP) {
      c=reader.enterClass(tree.name,(TypeSymbol)owner);
      if ((owner.flags_field & INTERFACE) != 0) {
        tree.mods.flags|=PUBLIC | STATIC;
      }
    }
 else {
      c=reader.defineClass(tree.name,owner);
      c.flatname=chk.localClassName(c);
      if (!c.name.isEmpty())       chk.checkTransparentClass(tree.pos(),c,env.info.scope);
    }
  }
  tree.sym=c;
  if (chk.compiled.get(c.flatname) != null) {
    duplicateClass(tree.pos(),c);
    result=types.createErrorType(tree.name,(TypeSymbol)owner,Type.noType);
    tree.sym=(ClassSymbol)result.tsym;
    return;
  }
  chk.compiled.put(c.flatname,c);
  enclScope.enter(c);
  Env<AttrContext> localEnv=classEnv(tree,env);
  typeEnvs.put(c,localEnv);
  c.completer=memberEnter;
  c.flags_field=chk.checkFlags(tree.pos(),tree.mods.flags,c,tree);
  c.sourcefile=env.toplevel.sourcefile;
  c.members_field=new Scope(c);
  ClassType ct=(ClassType)c.type;
  if (owner.kind != PCK && (c.flags_field & STATIC) == 0) {
    Symbol owner1=owner;
    while ((owner1.kind & (VAR | MTH)) != 0 && (owner1.flags_field & STATIC) == 0) {
      owner1=owner1.owner;
    }
    if (owner1.kind == TYP) {
      ct.setEnclosingType(owner1.type);
    }
  }
  ct.typarams_field=classEnter(tree.typarams,localEnv);
  if (!c.isLocal() && uncompleted != null)   uncompleted.append(c);
  classEnter(tree.defs,localEnv);
  result=c.type;
}","@Override public void visitClassDef(JCClassDecl tree){
  Symbol owner=env.info.scope.owner;
  Scope enclScope=enterScope(env);
  ClassSymbol c;
  if (owner.kind == PCK) {
    PackageSymbol packge=(PackageSymbol)owner;
    for (Symbol q=packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    c=reader.enterClass(tree.name,packge);
    packge.members().enterIfAbsent(c);
    if ((tree.mods.flags & PUBLIC) != 0 && !classNameMatchesFileName(c,env)) {
      log.error(tree.pos(),""String_Node_Str"",tree.name);
    }
  }
 else {
    if (!tree.name.isEmpty() && !chk.checkUniqueClassName(tree.pos(),tree.name,enclScope)) {
      result=null;
      return;
    }
    if (owner.kind == TYP) {
      c=reader.enterClass(tree.name,(TypeSymbol)owner);
      if ((owner.flags_field & INTERFACE) != 0) {
        tree.mods.flags|=PUBLIC | STATIC;
      }
    }
 else {
      c=reader.defineClass(tree.name,owner);
      c.flatname=chk.localClassName(c);
      if (!c.name.isEmpty())       chk.checkTransparentClass(tree.pos(),c,env.info.scope);
    }
  }
  tree.sym=c;
  if (chk.compiled.get(c.flatname) != null) {
    duplicateClass(tree.pos(),c);
    result=types.createErrorType(tree.name,(TypeSymbol)owner,Type.noType);
    tree.sym=(ClassSymbol)result.tsym;
    return;
  }
  chk.compiled.put(c.flatname,c);
  enclScope.enter(c);
  Env<AttrContext> localEnv=classEnv(tree,env);
  typeEnvs.put(c,localEnv);
  c.completer=memberEnter;
  c.flags_field=chk.checkFlags(tree.pos(),tree.mods.flags,c,tree);
  c.sourcefile=env.toplevel.sourcefile;
  c.members_field=new Scope(c);
  ClassType ct=(ClassType)c.type;
  if (owner.kind != PCK && (c.flags_field & STATIC) == 0) {
    Symbol owner1=owner;
    while ((owner1.kind & (VAR | MTH)) != 0 && (owner1.flags_field & STATIC) == 0) {
      owner1=owner1.owner;
    }
    if (owner1.kind == TYP) {
      ct.setEnclosingType(owner1.type);
    }
  }
  ct.typarams_field=classEnter(tree.typarams,localEnv);
  if (!c.isLocal() && uncompleted != null)   uncompleted.append(c);
  classEnter(tree.defs,localEnv);
  result=c.type;
}"
79448,"public void visitTopLevel(JCCompilationUnit tree){
  JavaFileObject prev=log.useSource(tree.sourcefile);
  boolean addEnv=false;
  boolean isPkgInfo=tree.sourcefile.isNameCompatible(""String_Node_Str"",JavaFileObject.Kind.SOURCE);
  if (tree.pid != null) {
    tree.packge=reader.enterPackage(TreeInfo.fullName(tree.pid));
    if (tree.packageAnnotations.nonEmpty()) {
      if (isPkgInfo) {
        addEnv=true;
      }
 else {
        log.error(tree.packageAnnotations.head.pos(),""String_Node_Str"");
      }
    }
  }
 else {
    tree.packge=syms.unnamedPackage;
  }
  tree.packge.complete();
  Env<AttrContext> env=topLevelEnv(tree);
  if (isPkgInfo) {
    Env<AttrContext> env0=typeEnvs.get(tree.packge);
    if (env0 == null) {
      typeEnvs.put(tree.packge,env);
    }
 else {
      JCCompilationUnit tree0=env0.toplevel;
      if (!fileManager.isSameFile(tree.sourcefile,tree0.sourcefile)) {
        log.warning(tree.pid != null ? tree.pid.pos() : null,""String_Node_Str"",tree.packge);
        if (addEnv || (tree0.packageAnnotations.isEmpty() && tree.docComments != null && tree.docComments.get(tree) != null)) {
          typeEnvs.put(tree.packge,env);
        }
      }
    }
    for (Symbol q=tree.packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    Name name=names.package_info;
    ClassSymbol c=reader.enterClass(name,tree.packge);
    c.flatname=names.fromString(tree.packge + ""String_Node_Str"" + name);
    c.sourcefile=tree.sourcefile;
    c.completer=null;
    c.members_field=new Scope(c);
    tree.packge.package_info=c;
  }
  classEnter(tree.defs,env);
  if (addEnv) {
    todo.append(env);
  }
  log.useSource(prev);
  result=null;
}","@Override public void visitTopLevel(JCCompilationUnit tree){
  JavaFileObject prev=log.useSource(tree.sourcefile);
  boolean addEnv=false;
  boolean isPkgInfo=tree.sourcefile.isNameCompatible(""String_Node_Str"",JavaFileObject.Kind.SOURCE);
  if (tree.pid != null) {
    tree.packge=reader.enterPackage(TreeInfo.fullName(tree.pid));
    if (tree.packageAnnotations.nonEmpty()) {
      if (isPkgInfo) {
        addEnv=true;
      }
 else {
        log.error(tree.packageAnnotations.head.pos(),""String_Node_Str"");
      }
    }
  }
 else {
    tree.packge=syms.unnamedPackage;
  }
  tree.packge.complete();
  Env<AttrContext> topEnv=topLevelEnv(tree);
  if (isPkgInfo) {
    Env<AttrContext> env0=typeEnvs.get(tree.packge);
    if (env0 == null) {
      typeEnvs.put(tree.packge,topEnv);
    }
 else {
      JCCompilationUnit tree0=env0.toplevel;
      if (!fileManager.isSameFile(tree.sourcefile,tree0.sourcefile)) {
        log.warning(tree.pid != null ? tree.pid.pos() : null,""String_Node_Str"",tree.packge);
        if (addEnv || (tree0.packageAnnotations.isEmpty() && tree.docComments != null && tree.docComments.get(tree) != null)) {
          typeEnvs.put(tree.packge,topEnv);
        }
      }
    }
    for (Symbol q=tree.packge; q != null && q.kind == PCK; q=q.owner)     q.flags_field|=EXISTS;
    Name name=names.package_info;
    ClassSymbol c=reader.enterClass(name,tree.packge);
    c.flatname=names.fromString(tree.packge + ""String_Node_Str"" + name);
    c.sourcefile=tree.sourcefile;
    c.completer=null;
    c.members_field=new Scope(c);
    tree.packge.package_info=c;
  }
  classEnter(tree.defs,topEnv);
  if (addEnv) {
    todo.append(topEnv);
  }
  log.useSource(prev);
  result=null;
}"
79449,"/** 
 * Class enter visitor method for type parameters. Enter a symbol for type parameter in local scope, after checking that it is unique.
 */
public void visitTypeParameter(JCTypeParameter tree){
  TypeVar a=(tree.type != null) ? (TypeVar)tree.type : new TypeVar(tree.name,env.info.scope.owner,syms.botType);
  tree.type=a;
  if (chk.checkUnique(tree.pos(),a.tsym,env.info.scope)) {
    env.info.scope.enter(a.tsym);
  }
  result=a;
}","/** 
 * Class enter visitor method for type parameters. Enter a symbol for type parameter in local scope, after checking that it is unique.
 */
@Override public void visitTypeParameter(JCTypeParameter tree){
  TypeVar a=(tree.type != null) ? (TypeVar)tree.type : new TypeVar(tree.name,env.info.scope.owner,syms.botType);
  tree.type=a;
  if (chk.checkUnique(tree.pos(),a.tsym,env.info.scope)) {
    env.info.scope.enter(a.tsym);
  }
  result=a;
}"
79450,"/** 
 * Main method: enter one class from a list of toplevel trees and place the rest on uncompleted for later processing.
 * @param trees      The list of trees to be processed.
 * @param c          The class symbol to be processed.
 */
public void complete(List<JCCompilationUnit> trees,ClassSymbol c){
  annotate.enterStart();
  ListBuffer<ClassSymbol> prevUncompleted=uncompleted;
  if (memberEnter.completionEnabled)   uncompleted=new ListBuffer<ClassSymbol>();
  try {
    classEnter(trees,null);
    if (memberEnter.completionEnabled) {
      while (uncompleted.nonEmpty()) {
        ClassSymbol clazz=uncompleted.next();
        if (c == null || c == clazz || prevUncompleted == null)         clazz.complete();
 else         prevUncompleted.append(clazz);
      }
      for (      JCCompilationUnit tree : trees) {
        if (tree.starImportScope.elems == null) {
          JavaFileObject prev=log.useSource(tree.sourcefile);
          Env<AttrContext> env=typeEnvs.get(tree);
          if (env == null)           env=topLevelEnv(tree);
          memberEnter.memberEnter(tree,env);
          log.useSource(prev);
        }
      }
    }
  }
  finally {
    uncompleted=prevUncompleted;
    annotate.enterDone();
  }
}","/** 
 * Main method: enter one class from a list of toplevel trees and place the rest on uncompleted for later processing.
 * @param trees      The list of trees to be processed.
 * @param c          The class symbol to be processed.
 */
public void complete(List<JCCompilationUnit> trees,ClassSymbol c){
  annotate.enterStart();
  ListBuffer<ClassSymbol> prevUncompleted=uncompleted;
  if (memberEnter.completionEnabled)   uncompleted=new ListBuffer<ClassSymbol>();
  try {
    classEnter(trees,null);
    if (memberEnter.completionEnabled) {
      while (uncompleted.nonEmpty()) {
        ClassSymbol clazz=uncompleted.next();
        if (c == null || c == clazz || prevUncompleted == null)         clazz.complete();
 else         prevUncompleted.append(clazz);
      }
      for (      JCCompilationUnit tree : trees) {
        if (tree.starImportScope.elems == null) {
          JavaFileObject prev=log.useSource(tree.sourcefile);
          Env<AttrContext> topEnv=topLevelEnv(tree);
          memberEnter.memberEnter(tree,topEnv);
          log.useSource(prev);
        }
      }
    }
  }
  finally {
    uncompleted=prevUncompleted;
    annotate.enterDone();
  }
}"
79451,"public void visitNewArray(JCNewArray tree){
  tree.elemtype=translate(tree.elemtype,null);
  translate(tree.dims,syms.intType);
  tree.elems=translate(tree.elems,(tree.type == null) ? null : erasure(types.elemtype(tree.type)));
  tree.type=erasure(tree.type);
  result=tree;
}","public void visitNewArray(JCNewArray tree){
  tree.elemtype=translate(tree.elemtype,null);
  translate(tree.dims,syms.intType);
  if (tree.type != null) {
    tree.elems=translate(tree.elems,erasure(types.elemtype(tree.type)));
    tree.type=erasure(tree.type);
  }
 else {
    tree.elems=translate(tree.elems,null);
  }
  result=tree;
}"
79452,"/** 
 * A KindName representing a given symbol
 */
public static KindName kindName(Symbol sym){
switch (sym.getKind()) {
case PACKAGE:
    return KindName.PACKAGE;
case ENUM:
case ANNOTATION_TYPE:
case INTERFACE:
case CLASS:
  return KindName.CLASS;
case TYPE_PARAMETER:
return KindName.TYPEVAR;
case ENUM_CONSTANT:
case FIELD:
case PARAMETER:
case LOCAL_VARIABLE:
case EXCEPTION_PARAMETER:
return KindName.VAR;
case METHOD:
case CONSTRUCTOR:
case STATIC_INIT:
case INSTANCE_INIT:
return KindName.METHOD;
default :
if (sym.kind == VAL) return KindName.VAL;
 else throw new AssertionError(""String_Node_Str"" + sym.getKind());
}
}","/** 
 * A KindName representing a given symbol
 */
public static KindName kindName(Symbol sym){
switch (sym.getKind()) {
case PACKAGE:
    return KindName.PACKAGE;
case ENUM:
  return KindName.ENUM;
case ANNOTATION_TYPE:
case CLASS:
return KindName.CLASS;
case INTERFACE:
return KindName.INTERFACE;
case TYPE_PARAMETER:
return KindName.TYPEVAR;
case ENUM_CONSTANT:
case FIELD:
case PARAMETER:
case LOCAL_VARIABLE:
case EXCEPTION_PARAMETER:
return KindName.VAR;
case CONSTRUCTOR:
return KindName.CONSTRUCTOR;
case METHOD:
case STATIC_INIT:
case INSTANCE_INIT:
return KindName.METHOD;
default :
if (sym.kind == VAL) return KindName.VAL;
 else throw new AssertionError(""String_Node_Str"" + sym.getKind());
}
}"
79453,"/** 
 * The number of errors reported so far.
 */
public int errorCount(){
  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.errorCount();
 else   return log.nerrors;
}","/** 
 * The number of errors reported so far.
 */
public int errorCount(){
  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.errorCount();
 else {
    if (werror && log.nerrors == 0 && log.nwarnings > 0) {
      log.error(""String_Node_Str"");
    }
  }
  return log.nerrors;
}"
79454,"/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(final Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.get(""String_Node_Str"") != null;
  sourceOutput=options.get(""String_Node_Str"") != null;
  stubOutput=options.get(""String_Node_Str"") != null;
  relax=options.get(""String_Node_Str"") != null;
  printFlat=options.get(""String_Node_Str"") != null;
  attrParseOnly=options.get(""String_Node_Str"") != null;
  encoding=options.get(""String_Node_Str"");
  lineDebugInfo=options.get(""String_Node_Str"") == null || options.get(""String_Node_Str"") != null;
  genEndPos=options.get(""String_Node_Str"") != null || context.get(DiagnosticListener.class) != null;
  devVerbose=options.get(""String_Node_Str"") != null;
  processPcks=options.get(""String_Node_Str"") != null;
  verboseCompilePolicy=options.get(""String_Node_Str"") != null;
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=(options.get(""String_Node_Str"") != null) ? names.fromString(options.get(""String_Node_Str"")) : null;
}","/** 
 * Construct a new compiler using a shared context.
 */
public JavaCompiler(final Context context){
  this.context=context;
  context.put(compilerKey,this);
  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);
  names=Names.instance(context);
  log=Log.instance(context);
  diagFactory=JCDiagnostic.Factory.instance(context);
  reader=ClassReader.instance(context);
  make=TreeMaker.instance(context);
  writer=ClassWriter.instance(context);
  enter=Enter.instance(context);
  todo=Todo.instance(context);
  fileManager=context.get(JavaFileManager.class);
  parserFactory=ParserFactory.instance(context);
  try {
    syms=Symtab.instance(context);
  }
 catch (  CompletionFailure ex) {
    log.error(""String_Node_Str"",ex.sym,ex.getDetailValue());
    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();
  }
  source=Source.instance(context);
  attr=Attr.instance(context);
  chk=Check.instance(context);
  gen=Gen.instance(context);
  flow=Flow.instance(context);
  transTypes=TransTypes.instance(context);
  lower=Lower.instance(context);
  annotate=Annotate.instance(context);
  types=Types.instance(context);
  taskListener=context.get(TaskListener.class);
  reader.sourceCompleter=this;
  Options options=Options.instance(context);
  verbose=options.get(""String_Node_Str"") != null;
  sourceOutput=options.get(""String_Node_Str"") != null;
  stubOutput=options.get(""String_Node_Str"") != null;
  relax=options.get(""String_Node_Str"") != null;
  printFlat=options.get(""String_Node_Str"") != null;
  attrParseOnly=options.get(""String_Node_Str"") != null;
  encoding=options.get(""String_Node_Str"");
  lineDebugInfo=options.get(""String_Node_Str"") == null || options.get(""String_Node_Str"") != null;
  genEndPos=options.get(""String_Node_Str"") != null || context.get(DiagnosticListener.class) != null;
  devVerbose=options.get(""String_Node_Str"") != null;
  processPcks=options.get(""String_Node_Str"") != null;
  werror=options.get(""String_Node_Str"") != null;
  verboseCompilePolicy=options.get(""String_Node_Str"") != null;
  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY;
 else   compilePolicy=CompilePolicy.decode(options.get(""String_Node_Str""));
  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get(""String_Node_Str""));
  completionFailureName=(options.get(""String_Node_Str"") != null) ? names.fromString(options.get(""String_Node_Str"")) : null;
}"
79455,"/** 
 * Programmatic interface for main function.
 * @param args    The command line parameters.
 */
public int compile(String[] args,Context context,List<JavaFileObject> fileObjects,Iterable<? extends Processor> processors){
  if (options == null)   options=Options.instance(context);
  filenames=new ListBuffer<File>();
  classnames=new ListBuffer<String>();
  JavaCompiler comp=null;
  try {
    if (args.length == 0 && fileObjects.isEmpty()) {
      help();
      return EXIT_CMDERR;
    }
    List<File> files;
    try {
      files=processArgs(CommandLine.parse(args));
      if (files == null) {
        return EXIT_CMDERR;
      }
 else       if (files.isEmpty() && fileObjects.isEmpty() && classnames.isEmpty()) {
        if (options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null)         return EXIT_OK;
        error(""String_Node_Str"");
        return EXIT_CMDERR;
      }
    }
 catch (    java.io.FileNotFoundException e) {
      Log.printLines(out,ownName + ""String_Node_Str"" + getLocalizedString(""String_Node_Str"",e.getMessage()));
      return EXIT_SYSERR;
    }
    boolean forceStdOut=options.get(""String_Node_Str"") != null;
    if (forceStdOut) {
      out.flush();
      out=new PrintWriter(System.out,true);
    }
    context.put(Log.outKey,out);
    boolean batchMode=(options.get(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null);
    if (batchMode)     CacheFSInfo.preRegister(context);
    fileManager=context.get(JavaFileManager.class);
    comp=JavaCompiler.instance(context);
    if (comp == null)     return EXIT_SYSERR;
    Log log=Log.instance(context);
    if (!files.isEmpty()) {
      comp=JavaCompiler.instance(context);
      List<JavaFileObject> otherFiles=List.nil();
      JavacFileManager dfm=(JavacFileManager)fileManager;
      for (      JavaFileObject fo : dfm.getJavaFileObjectsFromFiles(files))       otherFiles=otherFiles.prepend(fo);
      for (      JavaFileObject fo : otherFiles)       fileObjects=fileObjects.prepend(fo);
    }
    comp.compile(fileObjects,classnames.toList(),processors);
    if (log.expectDiagKeys != null) {
      if (log.expectDiagKeys.size() == 0) {
        Log.printLines(log.noticeWriter,""String_Node_Str"");
        return EXIT_OK;
      }
 else {
        Log.printLines(log.noticeWriter,""String_Node_Str"" + log.expectDiagKeys);
        return EXIT_ERROR;
      }
    }
    if (comp.errorCount() != 0 || options.get(""String_Node_Str"") != null && comp.warningCount() != 0)     return EXIT_ERROR;
  }
 catch (  IOException ex) {
    ioMessage(ex);
    return EXIT_SYSERR;
  }
catch (  OutOfMemoryError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  StackOverflowError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  FatalError ex) {
    feMessage(ex);
    return EXIT_SYSERR;
  }
catch (  AnnotationProcessingError ex) {
    apMessage(ex);
    return EXIT_SYSERR;
  }
catch (  ClientCodeException ex) {
    throw new RuntimeException(ex.getCause());
  }
catch (  PropagatedException ex) {
    throw ex.getCause();
  }
catch (  Throwable ex) {
    if (comp == null || comp.errorCount() == 0 || options == null || options.get(""String_Node_Str"") != null)     bugMessage(ex);
    return EXIT_ABNORMAL;
  }
 finally {
    if (comp != null)     comp.close();
    filenames=null;
    options=null;
  }
  return EXIT_OK;
}","/** 
 * Programmatic interface for main function.
 * @param args    The command line parameters.
 */
public int compile(String[] args,Context context,List<JavaFileObject> fileObjects,Iterable<? extends Processor> processors){
  if (options == null)   options=Options.instance(context);
  filenames=new ListBuffer<File>();
  classnames=new ListBuffer<String>();
  JavaCompiler comp=null;
  try {
    if (args.length == 0 && fileObjects.isEmpty()) {
      help();
      return EXIT_CMDERR;
    }
    List<File> files;
    try {
      files=processArgs(CommandLine.parse(args));
      if (files == null) {
        return EXIT_CMDERR;
      }
 else       if (files.isEmpty() && fileObjects.isEmpty() && classnames.isEmpty()) {
        if (options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null || options.get(""String_Node_Str"") != null)         return EXIT_OK;
        error(""String_Node_Str"");
        return EXIT_CMDERR;
      }
    }
 catch (    java.io.FileNotFoundException e) {
      Log.printLines(out,ownName + ""String_Node_Str"" + getLocalizedString(""String_Node_Str"",e.getMessage()));
      return EXIT_SYSERR;
    }
    boolean forceStdOut=options.get(""String_Node_Str"") != null;
    if (forceStdOut) {
      out.flush();
      out=new PrintWriter(System.out,true);
    }
    context.put(Log.outKey,out);
    boolean batchMode=(options.get(""String_Node_Str"") == null && System.getProperty(""String_Node_Str"") == null);
    if (batchMode)     CacheFSInfo.preRegister(context);
    fileManager=context.get(JavaFileManager.class);
    comp=JavaCompiler.instance(context);
    if (comp == null)     return EXIT_SYSERR;
    Log log=Log.instance(context);
    if (!files.isEmpty()) {
      comp=JavaCompiler.instance(context);
      List<JavaFileObject> otherFiles=List.nil();
      JavacFileManager dfm=(JavacFileManager)fileManager;
      for (      JavaFileObject fo : dfm.getJavaFileObjectsFromFiles(files))       otherFiles=otherFiles.prepend(fo);
      for (      JavaFileObject fo : otherFiles)       fileObjects=fileObjects.prepend(fo);
    }
    comp.compile(fileObjects,classnames.toList(),processors);
    if (log.expectDiagKeys != null) {
      if (log.expectDiagKeys.size() == 0) {
        Log.printLines(log.noticeWriter,""String_Node_Str"");
        return EXIT_OK;
      }
 else {
        Log.printLines(log.noticeWriter,""String_Node_Str"" + log.expectDiagKeys);
        return EXIT_ERROR;
      }
    }
    if (comp.errorCount() != 0)     return EXIT_ERROR;
  }
 catch (  IOException ex) {
    ioMessage(ex);
    return EXIT_SYSERR;
  }
catch (  OutOfMemoryError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  StackOverflowError ex) {
    resourceMessage(ex);
    return EXIT_SYSERR;
  }
catch (  FatalError ex) {
    feMessage(ex);
    return EXIT_SYSERR;
  }
catch (  AnnotationProcessingError ex) {
    apMessage(ex);
    return EXIT_SYSERR;
  }
catch (  ClientCodeException ex) {
    throw new RuntimeException(ex.getCause());
  }
catch (  PropagatedException ex) {
    throw ex.getCause();
  }
catch (  Throwable ex) {
    if (comp == null || comp.errorCount() == 0 || options == null || options.get(""String_Node_Str"") != null)     bugMessage(ex);
    return EXIT_ABNORMAL;
  }
 finally {
    if (comp != null)     comp.close();
    filenames=null;
    options=null;
  }
  return EXIT_OK;
}"
79456,"/** 
 * Get all the recognized options.
 * @param helper an {@code OptionHelper} to help when processing options
 * @return an array of options
 */
public static Option[] getAll(final OptionHelper helper){
  return new Option[]{new Option(G,""String_Node_Str""),new Option(G_NONE,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
,new Option(G_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new XOption(XLINT,""String_Node_Str""),new XOption(XLINT_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,getXLintChoices()),new Option(NOWARN,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(VERBOSE,""String_Node_Str""),new Option(DEPRECATION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(CLASSPATH,""String_Node_Str"",""String_Node_Str""),new Option(CP,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(SOURCEPATH,""String_Node_Str"",""String_Node_Str""),new Option(BOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,option,arg);
    }
  }
,new XOption(XBOOTCLASSPATH_PREPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH_APPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(EXTDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_EXT_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(ENDORSEDDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_ENDORSED_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(PROC,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSOR,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSORPATH,""String_Node_Str"",""String_Node_Str""),new Option(D,""String_Node_Str"",""String_Node_Str""),new Option(S,""String_Node_Str"",""String_Node_Str""),new Option(IMPLICIT,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(ENCODING,""String_Node_Str"",""String_Node_Str""),new Option(SOURCE,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Source source=Source.lookup(operand);
      if (source == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(TARGET,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Target target=Target.lookup(operand);
      if (target == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(VERSION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printVersion();
      return super.process(options,option);
    }
  }
,new HiddenOption(FULLVERSION){
    @Override public boolean process(    Options options,    String option){
      helper.printFullVersion();
      return super.process(options,option);
    }
  }
,new Option(HELP,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printHelp();
      return super.process(options,option);
    }
  }
,new Option(A,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean matches(    String arg){
      return arg.startsWith(""String_Node_Str"");
    }
    @Override public boolean hasArg(){
      return false;
    }
    @Override public boolean process(    Options options,    String option){
      int argLength=option.length();
      if (argLength == 2) {
        helper.error(""String_Node_Str"");
        return true;
      }
      int sepIndex=option.indexOf('=');
      String key=option.substring(2,(sepIndex != -1 ? sepIndex : argLength));
      if (!JavacProcessingEnvironment.isValidOptionName(key)) {
        helper.error(""String_Node_Str"",option);
        return true;
      }
      return process(options,option,option);
    }
  }
,new Option(X,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printXhelp();
      return super.process(options,option);
    }
  }
,new Option(J,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean process(    Options options,    String option){
      throw new AssertionError(""String_Node_Str"");
    }
  }
,new HiddenOption(MOREINFO){
    @Override public boolean process(    Options options,    String option){
      Type.moreInfo=true;
      return super.process(options,option);
    }
  }
,new HiddenOption(WERROR),new HiddenOption(COMPLEXINFERENCE),new HiddenOption(PROMPT),new HiddenOption(DOE),new HiddenOption(PRINTSOURCE),new HiddenOption(WARNUNCHECKED){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new XOption(XMAXERRS,""String_Node_Str"",""String_Node_Str""),new XOption(XMAXWARNS,""String_Node_Str"",""String_Node_Str""),new XOption(XSTDOUT,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      try {
        helper.setOut(new PrintWriter(new FileWriter(arg),true));
      }
 catch (      java.io.IOException e) {
        helper.error(""String_Node_Str"",arg,e);
        return true;
      }
      return super.process(options,option,arg);
    }
  }
,new XOption(XPRINT,""String_Node_Str""),new XOption(XPRINTROUNDS,""String_Node_Str""),new XOption(XPRINTPROCESSORINFO,""String_Node_Str""),new XOption(XPREFER,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new HiddenOption(O),new HiddenOption(XJCOV),new HiddenOption(XD){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.startsWith(name.optionName);
    }
    @Override public boolean process(    Options options,    String option){
      s=s.substring(name.optionName.length());
      int eq=s.indexOf('=');
      String key=(eq < 0) ? s : s.substring(0,eq);
      String value=(eq < 0) ? s : s.substring(eq + 1);
      options.put(key,value);
      return false;
    }
  }
,new HiddenOption(SOURCEFILE){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.endsWith(""String_Node_Str"") || SourceVersion.isName(s);
    }
    @Override public boolean process(    Options options,    String option){
      if (s.endsWith(""String_Node_Str"")) {
        File f=new File(s);
        if (!f.exists()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        if (!f.isFile()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        helper.addFile(f);
      }
 else       helper.addClassName(s);
      return false;
    }
  }
};
}","/** 
 * Get all the recognized options.
 * @param helper an {@code OptionHelper} to help when processing options
 * @return an array of options
 */
public static Option[] getAll(final OptionHelper helper){
  return new Option[]{new Option(G,""String_Node_Str""),new Option(G_NONE,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
  }
,new Option(G_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new XOption(XLINT,""String_Node_Str""),new XOption(XLINT_CUSTOM,""String_Node_Str"",Option.ChoiceKind.ANYOF,getXLintChoices()),new Option(NOWARN,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(VERBOSE,""String_Node_Str""),new Option(DEPRECATION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new Option(CLASSPATH,""String_Node_Str"",""String_Node_Str""),new Option(CP,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(SOURCEPATH,""String_Node_Str"",""String_Node_Str""),new Option(BOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,option,arg);
    }
  }
,new XOption(XBOOTCLASSPATH_PREPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH_APPEND,""String_Node_Str"",""String_Node_Str""),new XOption(XBOOTCLASSPATH,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(EXTDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_EXT_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(ENDORSEDDIRS,""String_Node_Str"",""String_Node_Str""),new XOption(DJAVA_ENDORSED_DIRS,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      return super.process(options,""String_Node_Str"",arg);
    }
  }
,new Option(PROC,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSOR,""String_Node_Str"",""String_Node_Str""),new Option(PROCESSORPATH,""String_Node_Str"",""String_Node_Str""),new Option(D,""String_Node_Str"",""String_Node_Str""),new Option(S,""String_Node_Str"",""String_Node_Str""),new Option(IMPLICIT,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new Option(ENCODING,""String_Node_Str"",""String_Node_Str""),new Option(SOURCE,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Source source=Source.lookup(operand);
      if (source == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(TARGET,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String operand){
      Target target=Target.lookup(operand);
      if (target == null) {
        helper.error(""String_Node_Str"",operand);
        return true;
      }
      return super.process(options,option,operand);
    }
  }
,new Option(VERSION,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printVersion();
      return super.process(options,option);
    }
  }
,new HiddenOption(FULLVERSION){
    @Override public boolean process(    Options options,    String option){
      helper.printFullVersion();
      return super.process(options,option);
    }
  }
,new Option(HELP,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printHelp();
      return super.process(options,option);
    }
  }
,new Option(A,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean matches(    String arg){
      return arg.startsWith(""String_Node_Str"");
    }
    @Override public boolean hasArg(){
      return false;
    }
    @Override public boolean process(    Options options,    String option){
      int argLength=option.length();
      if (argLength == 2) {
        helper.error(""String_Node_Str"");
        return true;
      }
      int sepIndex=option.indexOf('=');
      String key=option.substring(2,(sepIndex != -1 ? sepIndex : argLength));
      if (!JavacProcessingEnvironment.isValidOptionName(key)) {
        helper.error(""String_Node_Str"",option);
        return true;
      }
      return process(options,option,option);
    }
  }
,new Option(X,""String_Node_Str""){
    @Override public boolean process(    Options options,    String option){
      helper.printXhelp();
      return super.process(options,option);
    }
  }
,new Option(J,""String_Node_Str"",""String_Node_Str""){
    @Override String helpSynopsis(){
      hasSuffix=true;
      return super.helpSynopsis();
    }
    @Override public boolean process(    Options options,    String option){
      throw new AssertionError(""String_Node_Str"");
    }
  }
,new HiddenOption(MOREINFO){
    @Override public boolean process(    Options options,    String option){
      Type.moreInfo=true;
      return super.process(options,option);
    }
  }
,new Option(WERROR,""String_Node_Str""),new HiddenOption(COMPLEXINFERENCE),new HiddenOption(PROMPT),new HiddenOption(DOE),new HiddenOption(PRINTSOURCE),new HiddenOption(WARNUNCHECKED){
    @Override public boolean process(    Options options,    String option){
      options.put(""String_Node_Str"",option);
      return false;
    }
  }
,new XOption(XMAXERRS,""String_Node_Str"",""String_Node_Str""),new XOption(XMAXWARNS,""String_Node_Str"",""String_Node_Str""),new XOption(XSTDOUT,""String_Node_Str"",""String_Node_Str""){
    @Override public boolean process(    Options options,    String option,    String arg){
      try {
        helper.setOut(new PrintWriter(new FileWriter(arg),true));
      }
 catch (      java.io.IOException e) {
        helper.error(""String_Node_Str"",arg,e);
        return true;
      }
      return super.process(options,option,arg);
    }
  }
,new XOption(XPRINT,""String_Node_Str""),new XOption(XPRINTROUNDS,""String_Node_Str""),new XOption(XPRINTPROCESSORINFO,""String_Node_Str""),new XOption(XPREFER,""String_Node_Str"",Option.ChoiceKind.ONEOF,""String_Node_Str"",""String_Node_Str""),new HiddenOption(O),new HiddenOption(XJCOV),new HiddenOption(XD){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.startsWith(name.optionName);
    }
    @Override public boolean process(    Options options,    String option){
      s=s.substring(name.optionName.length());
      int eq=s.indexOf('=');
      String key=(eq < 0) ? s : s.substring(0,eq);
      String value=(eq < 0) ? s : s.substring(eq + 1);
      options.put(key,value);
      return false;
    }
  }
,new HiddenOption(SOURCEFILE){
    String s;
    @Override public boolean matches(    String s){
      this.s=s;
      return s.endsWith(""String_Node_Str"") || SourceVersion.isName(s);
    }
    @Override public boolean process(    Options options,    String option){
      if (s.endsWith(""String_Node_Str"")) {
        File f=new File(s);
        if (!f.exists()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        if (!f.isFile()) {
          helper.error(""String_Node_Str"",f);
          return true;
        }
        helper.addFile(f);
      }
 else       helper.addClassName(s);
      return false;
    }
  }
};
}"
79457,"/** 
 * Initializes an APRep object.
 * @param encoding a single DER-encoded value.
 * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.
 * @exception IOException if an I/O error occurs while reading encoded data.
 * @exception KrbApErrException if the value read from the DER-encoded datastream does not match the pre-defined value.
 */
private void init(DerValue encoding) throws Asn1Exception, KrbApErrException, IOException {
  if (((encoding.getTag() & (byte)(0x1F)) != Krb5.KRB_AP_REP) || (encoding.isApplication() != true) || (encoding.isConstructed() != true))   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  DerValue der=encoding.getData().getDerValue();
  if (der.getTag() != DerValue.tag_Sequence)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  DerValue subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  pvno=subDer.getData().getBigInteger().intValue();
  if (pvno != Krb5.PVNO)   throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);
  subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x01)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  msgType=subDer.getData().getBigInteger().intValue();
  if (msgType != Krb5.KRB_AP_REP)   throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);
  encPart=EncryptedData.parse(der.getData(),(byte)0x02,false);
  if (der.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);
}","/** 
 * Initializes an APRep object.
 * @param encoding a single DER-encoded value.
 * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.
 * @exception IOException if an I/O error occurs while reading encoded data.
 * @exception KrbApErrException if the value read from the DER-encoded datastream does not match the pre-defined value.
 */
private void init(DerValue encoding) throws Asn1Exception, KrbApErrException, IOException {
  if (((encoding.getTag() & (byte)(0x1F)) != Krb5.KRB_AP_REP) || (encoding.isApplication() != true) || (encoding.isConstructed() != true)) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  DerValue der=encoding.getData().getDerValue();
  if (der.getTag() != DerValue.tag_Sequence) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  DerValue subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x00) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  pvno=subDer.getData().getBigInteger().intValue();
  if (pvno != Krb5.PVNO) {
    throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);
  }
  subDer=der.getData().getDerValue();
  if ((subDer.getTag() & (byte)0x1F) != (byte)0x01) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
  msgType=subDer.getData().getBigInteger().intValue();
  if (msgType != Krb5.KRB_AP_REP) {
    throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);
  }
  encPart=EncryptedData.parse(der.getData(),(byte)0x02,false);
  if (der.getData().available() > 0) {
    throw new Asn1Exception(Krb5.ASN1_BAD_ID);
  }
}"
79458,"@Override public void run(){
  popupWindow=new PopupWindow(popupView,width,height,focusable);
  if (belowView) {
    popupWindow.showAsDropDown(rootView);
  }
 else {
    popupWindow.showAtLocation(rootView,gravity,0,0);
  }
}","public void run(){
  if (belowView) {
    popupWindow.showAsDropDown(rootView);
  }
 else {
    popupWindow.showAtLocation(rootView,gravity,0,0);
  }
}"
79459,"/** 
 * This method create a new popup window Implemented runnable to delay in order to avoid bad window token exception This method must be called after setLayout focusable default value is false
 */
public void setPopupWindow(){
  final android.os.Handler handler=new android.os.Handler();
  final int width=LinearLayout.LayoutParams.MATCH_PARENT;
  final int height=LinearLayout.LayoutParams.WRAP_CONTENT;
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      popupWindow=new PopupWindow(popupView,width,height,focusable);
      if (belowView) {
        popupWindow.showAsDropDown(rootView);
      }
 else {
        popupWindow.showAtLocation(rootView,gravity,0,0);
      }
    }
  }
,delay);
}","/** 
 * This method create a new popup window Implemented runnable to delay in order to avoid bad window token exception This method must be called after setLayout focusable default value is false
 */
public void setPopupWindow(){
  final int width=LinearLayout.LayoutParams.MATCH_PARENT;
  final int height=LinearLayout.LayoutParams.WRAP_CONTENT;
  popupWindow=new PopupWindow(popupView,width,height,focusable);
  rootView.post(new Runnable(){
    public void run(){
      if (belowView) {
        popupWindow.showAsDropDown(rootView);
      }
 else {
        popupWindow.showAtLocation(rootView,gravity,0,0);
      }
    }
  }
);
}"
79460,"public Profile(String userId,String tenant,String email,Boolean isEmaildVerified,String name,String familyName,String givenName,Map<String,Object> claims){
  this.userId=userId;
  this.tenant=tenant;
  this.email=email;
  this.isEmaildVerified=isEmaildVerified;
  this.name=name;
  this.familyName=familyName;
  this.givenName=givenName;
  this.claims=claims;
}","/** 
 * Profile constructor.
 * @param userId of the user.
 * @param tenant of the user.
 * @param email of the user.
 * @param isEmaildVerified of the user.
 * @param name of the user.
 * @param familyName of the user.
 * @param givenName of the user.
 * @param claims  claims as key values.
 */
public Profile(String userId,String tenant,String email,Boolean isEmaildVerified,String name,String familyName,String givenName,Map<String,Object> claims){
  this.userId=userId;
  this.tenant=tenant;
  this.email=email;
  this.isEmaildVerified=isEmaildVerified;
  this.name=name;
  this.familyName=familyName;
  this.givenName=givenName;
  this.claims=claims;
}"
79461,"public static SigningKeyResolver defaultSigningKeyResolver(Optional<JWTKeyResolver> keyResolver){
  return new SigningKeyResolver(){
    private Key retreiveKey(    JwsHeader header,    Claims claims){
      if (!keyResolver.isPresent()) {
        return null;
      }
      SignatureAlgorithm algorithm=SignatureAlgorithm.forName(header.getAlgorithm());
      JWTKeyResolver actualResolver=keyResolver.get();
      Map<String,Object> allClaims=Stream.of(claims,(Map<String,Object>)header).map(Map::entrySet).flatMap(Collection::stream).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
      Optional<byte[]> keyBytes=actualResolver.resolve(allClaims);
      if (!keyBytes.isPresent()) {
        return null;
      }
      if (algorithm.isHmac()) {
        return new SecretKeySpec(keyBytes.get(),algorithm.getJcaName());
      }
      if (algorithm.isRsa() || algorithm.isEllipticCurve()) {
        try {
          return keyFactorySupplier.get(algorithm.getFamilyName()).get().generatePublic(new X509EncodedKeySpec(keyBytes.get()));
        }
 catch (        InvalidKeySpecException ex) {
          throw new RuntimeException(ex);
        }
      }
      throw new UnsupportedOperationException(""String_Node_Str"" + algorithm.getFamilyName() + ""String_Node_Str"");
    }
    @Override public Key resolveSigningKey(    JwsHeader header,    Claims claims){
      return retreiveKey(header,claims);
    }
    @Override public Key resolveSigningKey(    JwsHeader header,    String plaintext){
      throw new UnsupportedOperationException();
    }
  }
;
}","static SigningKeyResolver defaultSigningKeyResolver(Optional<JwtKeyResolver> keyResolver){
  return new SigningKeyResolver(){
    private Key retreiveKey(    JwsHeader header,    Claims claims){
      if (!keyResolver.isPresent()) {
        return null;
      }
      SignatureAlgorithm algorithm=SignatureAlgorithm.forName(header.getAlgorithm());
      JwtKeyResolver actualResolver=keyResolver.get();
      Map<String,Object> allClaims=Stream.of(claims,(Map<String,Object>)header).map(Map::entrySet).flatMap(Collection::stream).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
      Optional<byte[]> keyBytes=actualResolver.resolve(allClaims);
      if (!keyBytes.isPresent()) {
        return null;
      }
      if (algorithm.isHmac()) {
        return new SecretKeySpec(keyBytes.get(),algorithm.getJcaName());
      }
      if (algorithm.isRsa() || algorithm.isEllipticCurve()) {
        try {
          return keyFactorySupplier.get(algorithm.getFamilyName()).get().generatePublic(new X509EncodedKeySpec(keyBytes.get()));
        }
 catch (        InvalidKeySpecException ex) {
          throw new RuntimeException(ex);
        }
      }
      throw new UnsupportedOperationException(""String_Node_Str"" + algorithm.getFamilyName() + ""String_Node_Str"");
    }
    @Override public Key resolveSigningKey(    JwsHeader header,    Claims claims){
      return retreiveKey(header,claims);
    }
    @Override public Key resolveSigningKey(    JwsHeader header,    String plaintext){
      throw new UnsupportedOperationException();
    }
  }
;
}"
79462,"private Key retreiveKey(JwsHeader header,Claims claims){
  if (!keyResolver.isPresent()) {
    return null;
  }
  SignatureAlgorithm algorithm=SignatureAlgorithm.forName(header.getAlgorithm());
  JWTKeyResolver actualResolver=keyResolver.get();
  Map<String,Object> allClaims=Stream.of(claims,(Map<String,Object>)header).map(Map::entrySet).flatMap(Collection::stream).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
  Optional<byte[]> keyBytes=actualResolver.resolve(allClaims);
  if (!keyBytes.isPresent()) {
    return null;
  }
  if (algorithm.isHmac()) {
    return new SecretKeySpec(keyBytes.get(),algorithm.getJcaName());
  }
  if (algorithm.isRsa() || algorithm.isEllipticCurve()) {
    try {
      return keyFactorySupplier.get(algorithm.getFamilyName()).get().generatePublic(new X509EncodedKeySpec(keyBytes.get()));
    }
 catch (    InvalidKeySpecException ex) {
      throw new RuntimeException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + algorithm.getFamilyName() + ""String_Node_Str"");
}","private Key retreiveKey(JwsHeader header,Claims claims){
  if (!keyResolver.isPresent()) {
    return null;
  }
  SignatureAlgorithm algorithm=SignatureAlgorithm.forName(header.getAlgorithm());
  JwtKeyResolver actualResolver=keyResolver.get();
  Map<String,Object> allClaims=Stream.of(claims,(Map<String,Object>)header).map(Map::entrySet).flatMap(Collection::stream).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
  Optional<byte[]> keyBytes=actualResolver.resolve(allClaims);
  if (!keyBytes.isPresent()) {
    return null;
  }
  if (algorithm.isHmac()) {
    return new SecretKeySpec(keyBytes.get(),algorithm.getJcaName());
  }
  if (algorithm.isRsa() || algorithm.isEllipticCurve()) {
    try {
      return keyFactorySupplier.get(algorithm.getFamilyName()).get().generatePublic(new X509EncodedKeySpec(keyBytes.get()));
    }
 catch (    InvalidKeySpecException ex) {
      throw new RuntimeException(ex);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + algorithm.getFamilyName() + ""String_Node_Str"");
}"
79463,"private void connectToService(){
  serviceDisposable=activity.getSessionPublish().subscribe(service -> {
    if (course.getCurrentDay().getCurrentSentencePair() != null)     nextSentence(course.getCurrentDay().getCurrentSentencePair());
 else     sessionFinished(course.getCurrentDay());
    studySessionService=service;
    sentenceDisposable=studySessionService.sentenceObservable().subscribe(this::nextSentence);
    finishDisposable=studySessionService.finishObservable().subscribe(this::sessionFinished);
    setPaused(studySessionService.getPlaybackStatus() == StudySessionService.PlaybackStatus.PAUSED);
    if (!isPaused) {
      startTimer();
    }
    updateTime();
    updatePlayPauseImage();
  }
);
  activity.startSession(course.getCurrentDay());
}","private void connectToService(){
  serviceDisposable=activity.getSessionPublish().subscribe(service -> {
    if (course.getCurrentDay().getCurrentSentencePair() != null)     nextSentence(course.getCurrentDay().getCurrentSentencePair());
 else     sessionFinished(course.getCurrentDay());
    studySessionService=service;
    sentenceDisposable=studySessionService.sentenceObservable().subscribe(this::nextSentence);
    finishDisposable=studySessionService.finishObservable().subscribe(this::sessionFinished);
    setPaused(studySessionService.getPlaybackStatus() == null || studySessionService.getPlaybackStatus() == StudySessionService.PlaybackStatus.PAUSED);
    if (!isPaused) {
      startTimer();
    }
    updateTime();
    updatePlayPauseImage();
  }
);
  activity.startSession(course.getCurrentDay());
}"
79464,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent.getExtras() == null)   stopSelf();
  realm=Realm.getDefaultInstance();
  String id=new Utils.Storage(getApplicationContext()).getDayId();
  if (day == null) {
    day=realm.where(Day.class).equalTo(""String_Node_Str"",id).findFirst();
    if (day == null)     stopSelf();
  }
  if (!requestAudioFocus())   stopSelf();
  if (mediaPlayer == null) {
    mediaPlayer=new MediaPlayer();
    mediaPlayer.setOnCompletionListener(this);
    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    loadSentence();
  }
  if (mediaSessionManager == null) {
    initMediaSession();
  }
  handleIncomingActions(intent);
  return super.onStartCommand(intent,flags,startId);
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent.getExtras() == null)   stopSelf();
  realm=Realm.getDefaultInstance();
  String id=new Utils.Storage(getApplicationContext()).getDayId();
  if (day == null) {
    day=realm.where(Day.class).equalTo(""String_Node_Str"",id).findFirst();
    if (day == null)     stopSelf();
  }
  if (!requestAudioFocus())   stopSelf();
  if (mediaPlayer == null) {
    mediaPlayer=new MediaPlayer();
    mediaPlayer.setOnCompletionListener(this);
    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    loadSentence();
    play();
  }
  if (mediaSessionManager == null) {
    initMediaSession();
  }
  handleIncomingActions(intent);
  return super.onStartCommand(intent,flags,startId);
}"
79465,"@Override public void onTick(long millisUntilFinished){
  millisLeft=millisUntilFinished;
  updateTime();
}","@Override public void onTick(long millisUntilFinished){
  if (!isPaused) {
    millisLeft=millisUntilFinished;
    updateTime();
  }
}"
79466,"private void nextSentence(SentencePair sentencePair){
  sentencesLayout.setVisibility(View.VISIBLE);
  Sentence baseSentence=sentencePair.getBaseSentence();
  Sentence targetSentence=sentencePair.getTargetSentence();
  remainingRepsText.setText(String.format(Locale.getDefault(),""String_Node_Str"",course.getCurrentDay().getNumReviewsLeft()));
  millisLeft=course.getCurrentDay().getTimeLeft();
  if (countDownTimer != null)   countDownTimer.cancel();
  startTimer();
  updateTime();
  baseSentenceText.setText(baseSentence.getText());
  updateSentencePart(baseAlternateSentenceLayout,baseAlternateSentenceText,baseSentence.getAlternate());
  updateSentencePart(baseRomanizationLayout,baseRomanizationText,baseSentence.getRomanization());
  updateSentencePart(baseIpaLayout,baseIpaText,baseSentence.getIpa());
  targetSentenceText.setText(targetSentence.getText());
  updateSentencePart(targetAlternateSentenceLayout,targetAlternateSentenceText,targetSentence.getAlternate());
  updateSentencePart(targetRomanizationLayout,targetRomanizationText,targetSentence.getRomanization());
  updateSentencePart(targetIpaLayout,targetIpaText,targetSentence.getIpa());
}","private void nextSentence(SentencePair sentencePair){
  sentencesLayout.setVisibility(View.VISIBLE);
  Sentence baseSentence=sentencePair.getBaseSentence();
  Sentence targetSentence=sentencePair.getTargetSentence();
  remainingRepsText.setText(String.format(Locale.getDefault(),""String_Node_Str"",course.getCurrentDay().getNumReviewsLeft()));
  millisLeft=course.getCurrentDay().getTimeLeft();
  baseSentenceText.setText(baseSentence.getText());
  updateSentencePart(baseAlternateSentenceLayout,baseAlternateSentenceText,baseSentence.getAlternate());
  updateSentencePart(baseRomanizationLayout,baseRomanizationText,baseSentence.getRomanization());
  updateSentencePart(baseIpaLayout,baseIpaText,baseSentence.getIpa());
  targetSentenceText.setText(targetSentence.getText());
  updateSentencePart(targetAlternateSentenceLayout,targetAlternateSentenceText,targetSentence.getAlternate());
  updateSentencePart(targetRomanizationLayout,targetRomanizationText,targetSentence.getRomanization());
  updateSentencePart(targetIpaLayout,targetIpaText,targetSentence.getIpa());
}"
79467,"@Override public void onFinish(){
}","@Override public void onFinish(){
  Log.d(TAG,""String_Node_Str"" + this.toString());
}"
79468,"private void connectToService(){
  serviceDisposable=activity.getSessionPublish().subscribe(service -> {
    if (course.getCurrentDay().getCurrentSentencePair() != null)     nextSentence(course.getCurrentDay().getCurrentSentencePair());
    studySessionService=service;
    sentenceDisposable=studySessionService.sentenceObservable().subscribe(this::nextSentence);
    finishDisposable=studySessionService.finishObservable().subscribe(this::sessionFinished);
    updatePlayPauseImage();
  }
);
  activity.startSession(course.getCurrentDay());
}","private void connectToService(){
  serviceDisposable=activity.getSessionPublish().subscribe(service -> {
    if (course.getCurrentDay().getCurrentSentencePair() != null)     nextSentence(course.getCurrentDay().getCurrentSentencePair());
    studySessionService=service;
    sentenceDisposable=studySessionService.sentenceObservable().subscribe(this::nextSentence);
    finishDisposable=studySessionService.finishObservable().subscribe(this::sessionFinished);
    setPaused(studySessionService.getPlaybackStatus() == StudySessionService.PlaybackStatus.PAUSED);
    if (!isPaused) {
      startTimer();
    }
    updateTime();
    updatePlayPauseImage();
  }
);
  activity.startSession(course.getCurrentDay());
}"
79469,"private void startTimer(){
  millisLeft=millisLeft - millisLeft % 1000 - 1;
  updateTime();
  countDownTimer=new CountDownTimer(millisLeft,100){
    @Override public void onTick(    long millisUntilFinished){
      millisLeft=millisUntilFinished;
      updateTime();
    }
    @Override public void onFinish(){
    }
  }
.start();
}","private void startTimer(){
  millisLeft=millisLeft - millisLeft % 1000 - 1;
  updateTime();
  countDownTimer=new CountDownTimer(millisLeft,100){
    @Override public void onTick(    long millisUntilFinished){
      if (!isPaused) {
        millisLeft=millisUntilFinished;
        updateTime();
      }
    }
    @Override public void onFinish(){
      Log.d(TAG,""String_Node_Str"" + this.toString());
    }
  }
;
  setPaused(false);
  countDownTimer.start();
}"
79470,"private void playPause(View view){
  if (studySessionService != null) {
    if (studySessionService.getPlaybackStatus() == StudySessionService.PlaybackStatus.PLAYING) {
      studySessionService.pause();
      countDownTimer.cancel();
    }
 else {
      studySessionService.resume();
      startTimer();
    }
    updatePlayPauseImage();
  }
}","private void playPause(View view){
  if (studySessionService != null) {
    if (studySessionService.getPlaybackStatus() == StudySessionService.PlaybackStatus.PLAYING) {
      studySessionService.pause();
      setPaused(true);
      if (countDownTimer != null)       countDownTimer.cancel();
    }
 else {
      studySessionService.resume();
      startTimer();
    }
    updatePlayPauseImage();
  }
}"
79471,"@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_study_session,container,false);
  activity=(MainActivity)getActivity();
  String id=getArguments().getString(KEY_COURSE_ID);
  realm=Realm.getDefaultInstance();
  course=realm.where(Course.class).equalTo(""String_Node_Str"",id).findFirst();
  if (course.getCurrentDay() == null || course.getCurrentDay().isCompleted())   course.prepareNextDay(realm);
  remainingRepsText=view.findViewById(R.id.remainingRepsText);
  remainingTimeText=view.findViewById(R.id.remainingTimeText);
  playPauseImage=view.findViewById(R.id.playPauseImage);
  sentencesLayout=view.findViewById(R.id.sentencesLayout);
  baseLanguageCodeText=view.findViewById(R.id.baseLanguageCodeText);
  baseSentenceText=view.findViewById(R.id.baseSentenceText);
  baseAlternateSentenceText=view.findViewById(R.id.baseAlternateSentenceText);
  baseAlternateSentenceLayout=view.findViewById(R.id.baseAlternateSentenceLayout);
  baseRomanizationText=view.findViewById(R.id.baseRomanizationText);
  baseRomanizationLayout=view.findViewById(R.id.baseRomanizationLayout);
  baseIpaText=view.findViewById(R.id.baseIpaText);
  baseIpaLayout=view.findViewById(R.id.baseIpaLayout);
  targetLanguageCodeText=view.findViewById(R.id.targetLanguageCodeText);
  targetSentenceText=view.findViewById(R.id.targetSentenceText);
  targetAlternateSentenceText=view.findViewById(R.id.targetAlternateSentenceText);
  targetAlternateSentenceLayout=view.findViewById(R.id.targetAlternateSentenceLayout);
  targetRomanizationText=view.findViewById(R.id.targetRomanizationText);
  targetRomanizationLayout=view.findViewById(R.id.targetRomanizationLayout);
  targetIpaText=view.findViewById(R.id.targetIpaText);
  targetIpaLayout=view.findViewById(R.id.targetIpaLayout);
  baseLanguageCodeText.setText(course.getBaseLanguage().getLanguageId());
  targetLanguageCodeText.setText(course.getTargetLanguage().getLanguageId());
  TextView courseTitleLabel=view.findViewById(R.id.courseTitleText);
  courseTitleLabel.setText(course.getTitle());
  sentencesLayout.setVisibility(View.INVISIBLE);
  playPauseImage.setOnClickListener(this::playPause);
  return view;
}","@Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_study_session,container,false);
  activity=(MainActivity)getActivity();
  if (savedInstanceState != null) {
    isPaused=savedInstanceState.getBoolean(KEY_IS_PAUSED,true);
  }
 else {
    isPaused=true;
  }
  String id=getArguments().getString(KEY_COURSE_ID);
  realm=Realm.getDefaultInstance();
  course=realm.where(Course.class).equalTo(""String_Node_Str"",id).findFirst();
  if (course.getCurrentDay() == null || course.getCurrentDay().isCompleted())   course.prepareNextDay(realm);
  loadViews(view);
  baseLanguageCodeText.setText(course.getBaseLanguage().getLanguageId());
  targetLanguageCodeText.setText(course.getTargetLanguage().getLanguageId());
  TextView courseTitleLabel=view.findViewById(R.id.courseTitleText);
  courseTitleLabel.setText(course.getTitle());
  sentencesLayout.setVisibility(View.INVISIBLE);
  playPauseImage.setOnClickListener(this::playPause);
  return view;
}"
79472,"public void startSession(Day day){
  Utils.Storage storage=new Utils.Storage(this);
  storage.putDayId(day.getId());
  if (!isServiceBound) {
    Intent intent=new Intent(this,StudySessionService.class);
    startService(intent);
    bindService(intent,serviceConnection,Context.BIND_AUTO_CREATE);
  }
 else {
    Intent intent=new Intent(StudySessionService.BROADCAST_START_SESSION);
    sendBroadcast(intent);
  }
}","public void startSession(Day day){
  Utils.Storage storage=new Utils.Storage(this);
  storage.putDayId(day.getId());
  if (!isServiceBound) {
    Intent intent=new Intent(this,StudySessionService.class);
    startService(intent);
    bindService(intent,serviceConnection,Context.BIND_AUTO_CREATE);
  }
 else {
    Intent intent=new Intent(StudySessionService.BROADCAST_START_SESSION);
    sendBroadcast(intent);
    sessionPublish.onNext(studySessionService);
  }
}"
79473,"private void connectToService(){
  activity.startSession(course.getCurrentDay());
  serviceDisposable=activity.getSessionPublish().subscribe(service -> {
    nextSentence(course.getCurrentDay().getCurrentSentencePair());
    studySessionService=service;
    sentenceDisposable=studySessionService.sentenceObservable().subscribe(this::nextSentence);
    finishDisposable=studySessionService.finishObservable().subscribe(this::sessionFinished);
    updatePlayPauseImage();
  }
);
}","private void connectToService(){
  serviceDisposable=activity.getSessionPublish().subscribe(service -> {
    if (course.getCurrentDay().getCurrentSentencePair() != null)     nextSentence(course.getCurrentDay().getCurrentSentencePair());
    studySessionService=service;
    sentenceDisposable=studySessionService.sentenceObservable().subscribe(this::nextSentence);
    finishDisposable=studySessionService.finishObservable().subscribe(this::sessionFinished);
    updatePlayPauseImage();
  }
);
  activity.startSession(course.getCurrentDay());
}"
79474,"public Day prepareNextDay(Realm realm){
  if (currentDay != null && currentDay.isCompleted()) {
    realm.executeTransaction(r -> pastDays.add(currentDay));
  }
  realm.executeTransaction(r -> {
    Day day=r.createObject(Day.class,UUID.randomUUID().toString());
    for (    Schedule schedule : schedules) {
      RealmList<Integer> reviewPattern=schedule.getReviewPattern();
      int numSentences=schedule.getNumSentences();
      int sentenceIndex=schedule.getSentenceIndex();
      schedule.setSentenceIndex(sentenceIndex + numSentences);
      SentenceSet sentenceSet=new SentenceSet();
      sentenceSet.setBaseSentences(getSentences(sentenceIndex,numSentences,basePacks));
      sentenceSet.setTargetSentences(getSentences(sentenceIndex,numSentences,targetPacks));
      sentenceSet.setReviews(reviewPattern);
      sentenceSet.setFirstDay(true);
      sentenceSet.setOrder(schedule.getOrder());
      day.getSentenceSets().add(sentenceSet);
    }
    day.setCompleted(false);
    day.setPauseMillis(pauseMillis);
    if (currentDay != null)     day.getSentenceSets().addAll(currentDay.getSentenceSets());
    currentDay=day;
  }
);
  List<SentenceSet> emptySentenceSets=new ArrayList<>();
  for (  SentenceSet set : currentDay.getSentenceSets()) {
    if (!set.buildSentences(realm)) {
      emptySentenceSets.add(set);
    }
  }
  realm.executeTransaction(r -> currentDay.getSentenceSets().removeAll(emptySentenceSets));
  return currentDay;
}","public void prepareNextDay(Realm realm){
  if (currentDay != null && currentDay.isCompleted()) {
    realm.executeTransaction(r -> pastDays.add(currentDay));
  }
  realm.executeTransaction(r -> {
    Day day=r.createObject(Day.class,UUID.randomUUID().toString());
    for (    Schedule schedule : schedules) {
      RealmList<Integer> reviewPattern=schedule.getReviewPattern();
      int numSentences=schedule.getNumSentences();
      int sentenceIndex=schedule.getSentenceIndex();
      schedule.setSentenceIndex(sentenceIndex + numSentences);
      SentenceSet sentenceSet=new SentenceSet();
      sentenceSet.setBaseSentences(getSentences(sentenceIndex,numSentences,basePacks));
      sentenceSet.setTargetSentences(getSentences(sentenceIndex,numSentences,targetPacks));
      sentenceSet.setReviews(reviewPattern);
      sentenceSet.setFirstDay(true);
      sentenceSet.setOrder(schedule.getOrder());
      day.getSentenceSets().add(sentenceSet);
    }
    day.setCompleted(false);
    day.setPauseMillis(pauseMillis);
    if (currentDay != null)     day.getSentenceSets().addAll(currentDay.getSentenceSets());
    currentDay=day;
  }
);
  List<SentenceSet> emptySentenceSets=new ArrayList<>();
  for (  SentenceSet set : currentDay.getSentenceSets()) {
    if (!set.buildSentences(realm)) {
      emptySentenceSets.add(set);
    }
  }
  realm.executeTransaction(r -> currentDay.getSentenceSets().removeAll(emptySentenceSets));
}"
79475,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent.getExtras() == null)   stopSelf();
  realm=Realm.getDefaultInstance();
  String id=new Utils.Storage(getApplicationContext()).getDayId();
  if (day == null) {
    day=realm.where(Day.class).equalTo(""String_Node_Str"",id).findFirst();
    if (day == null)     stopSelf();
    day.resetReviews(realm);
  }
  if (!requestAudioFocus())   stopSelf();
  if (mediaPlayer == null) {
    mediaPlayer=new MediaPlayer();
    mediaPlayer.setOnCompletionListener(this);
    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    loadSentence();
  }
  if (mediaSessionManager == null) {
    initMediaSession();
  }
  handleIncomingActions(intent);
  return super.onStartCommand(intent,flags,startId);
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent.getExtras() == null)   stopSelf();
  realm=Realm.getDefaultInstance();
  String id=new Utils.Storage(getApplicationContext()).getDayId();
  if (day == null) {
    day=realm.where(Day.class).equalTo(""String_Node_Str"",id).findFirst();
    if (day == null)     stopSelf();
  }
  if (!requestAudioFocus())   stopSelf();
  if (mediaPlayer == null) {
    mediaPlayer=new MediaPlayer();
    mediaPlayer.setOnCompletionListener(this);
    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    loadSentence();
  }
  if (mediaSessionManager == null) {
    initMediaSession();
  }
  handleIncomingActions(intent);
  return super.onStartCommand(intent,flags,startId);
}"
79476,"@Override public void onReceive(Context context,Intent intent){
  String id=new Utils.Storage(getApplicationContext()).getDayId();
  day=realm.where(Day.class).equalTo(""String_Node_Str"",id).findFirst();
  if (day == null)   stopSelf();
  day.resetReviews(realm);
  stop();
  mediaPlayer.reset();
  if (!requestAudioFocus())   stopSelf();
  loadSentence();
  play();
}","@Override public void onReceive(Context context,Intent intent){
  String id=new Utils.Storage(getApplicationContext()).getDayId();
  day=realm.where(Day.class).equalTo(""String_Node_Str"",id).findFirst();
  if (day == null)   stopSelf();
  stop();
  mediaPlayer.reset();
  if (!requestAudioFocus())   stopSelf();
  loadSentence();
  play();
}"
79477,"private void extractAudio(){
  actionText.getResources().getString(R.string.extracting_sentence_audio);
}","private void extractAudio(){
  actionText.setText(getResources().getString(R.string.extracting_sentence_audio));
}"
79478,"private void readSentences(){
  actionText.getResources().getString(R.string.reading_sentences);
  counterText.setVisibility(View.GONE);
  dividerBarLabel.setVisibility(View.GONE);
  totalText.setVisibility(View.GONE);
}","private void readSentences(){
  actionText.setText(getResources().getString(R.string.reading_sentences));
  counterText.setVisibility(View.GONE);
  dividerBarLabel.setVisibility(View.GONE);
  totalText.setVisibility(View.GONE);
}"
79479,"@SuppressLint(""String_Node_Str"") @Override public void onViewCreated(@NonNull View view,@Nullable Bundle savedInstanceState){
  Uri uri=getArguments().getParcelable(EXTRA_URI);
  GLSImporter importer=new GLSImporter();
  importer.totalObservable().subscribe(total -> {
    if (getActivity() != null)     getActivity().runOnUiThread(() -> {
      totalText.setText(String.valueOf(total));
      progressBar.setMax(total);
    }
);
  }
);
  importer.progressObservable().subscribe(progress -> {
    if (getActivity() != null)     getActivity().runOnUiThread(() -> {
      counterText.setText(String.valueOf(progress));
      progressBar.setProgress(progress);
      if (curAction == ACTION_EXTRACTING_AUDIO && progressBar.getMax() == progress) {
        loadLanguageListFragment();
      }
    }
);
  }
);
  importer.fileNameSubject().subscribe(filename -> {
    fileNameText.setVisibility(View.VISIBLE);
    fileNameText.setText(filename);
  }
);
  importer.actionSubject().subscribe(actionId -> {
    if (getActivity() != null)     getActivity().runOnUiThread(() -> {
      curAction=actionId;
switch (actionId) {
case ACTION_OPENING_FILE:
        openFile();
      break;
case ACTION_COUNTING_SENTENCES:
    countSentences();
  break;
case ACTION_READING_SENTENCES:
readSentences();
break;
case ACTION_EXTRACTING_TEXT:
extractText();
break;
case ACTION_EXTRACTING_AUDIO:
extractAudio();
break;
case ACTION_EXIT:
loadLanguageListFragment();
break;
}
}
);
}
);
importer.importPack(getContext(),uri);
}","@SuppressLint(""String_Node_Str"") @Override public void onViewCreated(@NonNull View view,@Nullable Bundle savedInstanceState){
  Uri uri=getArguments().getParcelable(EXTRA_URI);
  GLSImporter importer=new GLSImporter();
  importer.totalObservable().subscribe(total -> {
    if (getActivity() != null)     getActivity().runOnUiThread(() -> {
      totalText.setText(String.valueOf(total));
      progressBar.setMax(total);
    }
);
  }
);
  importer.progressObservable().subscribe(progress -> {
    if (getActivity() != null)     getActivity().runOnUiThread(() -> {
      counterText.setText(String.valueOf(progress));
      progressBar.setProgress(progress);
      if (curAction == ACTION_EXTRACTING_AUDIO && progressBar.getMax() == progress) {
        loadLanguageListFragment();
      }
    }
);
  }
);
  importer.fileNameSubject().subscribe(filename -> {
    if (getActivity() != null)     getActivity().runOnUiThread(() -> {
      fileNameText.setVisibility(View.VISIBLE);
      fileNameText.setText(filename);
    }
);
  }
);
  importer.actionSubject().subscribe(actionId -> {
    if (getActivity() != null)     getActivity().runOnUiThread(() -> {
      curAction=actionId;
switch (actionId) {
case ACTION_OPENING_FILE:
        openFile();
      break;
case ACTION_COUNTING_SENTENCES:
    countSentences();
  break;
case ACTION_READING_SENTENCES:
readSentences();
break;
case ACTION_EXTRACTING_TEXT:
extractText();
break;
case ACTION_EXTRACTING_AUDIO:
extractAudio();
break;
case ACTION_EXIT:
loadLanguageListFragment();
break;
}
}
);
}
);
importer.importPack(getContext(),uri);
}"
79480,"public void createSentenceOrUpdate(Realm r,int index,String sentence,String ipa,String romanization,String uri){
  Sentence newSentence=getSentenceWithIndex(index);
  if (newSentence == null) {
    newSentence=r.createObject(Sentence.class,UUID.randomUUID().toString());
    sentences.add(newSentence);
  }
  newSentence.setIndex(index);
  if (sentence != null)   newSentence.setText(sentence);
  if (ipa != null)   newSentence.setIpa(ipa);
  if (romanization != null)   newSentence.setRomanization(romanization);
  if (uri != null)   newSentence.setUri(uri);
}","public void createSentenceOrUpdate(Realm realm,int index,String sentence,String ipa,String romanization,String uri){
  realm.executeTransaction(r -> {
    Sentence newSentence=getSentenceWithIndex(index);
    if (newSentence == null) {
      newSentence=r.createObject(Sentence.class,UUID.randomUUID().toString());
      sentences.add(newSentence);
    }
    newSentence.setIndex(index);
    if (sentence != null)     newSentence.setText(sentence);
    if (ipa != null)     newSentence.setIpa(ipa);
    if (romanization != null)     newSentence.setRomanization(romanization);
    if (uri != null)     newSentence.setUri(uri);
  }
);
}"
79481,"/** 
 * Counts the number of files in a pack and does some basic verification to ensure files are in order.
 */
private boolean countFiles(ZipInputStream zis,Realm realm) throws IOException {
  actionSubject.onNext(LanguageImportFragment.ACTION_COUNTING_SENTENCES);
  final byte[] buffer=new byte[BUFFER_SIZE];
  ZipEntry zipEntry;
  int numFiles=0;
  int bytesRead;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  String baseLanguage=""String_Node_Str"";
  String targetLanguage=""String_Node_Str"";
  String packName=""String_Node_Str"";
  while ((zipEntry=zis.getNextEntry()) != null) {
    if (zipEntry.getName().endsWith(""String_Node_Str"")) {
      packName=zipEntry.getName().split(""String_Node_Str"")[1];
      numFiles++;
      actionSubject.onNext(LanguageImportFragment.ACTION_COUNTING_SENTENCES);
      totalSubject.onNext(numFiles);
    }
 else     if (zipEntry.getName().endsWith(""String_Node_Str"")) {
      actionSubject.onNext(LanguageImportFragment.ACTION_READING_SENTENCES);
      String[] nameParts=zipEntry.getName().split(""String_Node_Str"");
      baseLanguage=nameParts[0].trim();
      targetLanguage=nameParts[1].trim();
      while ((bytesRead=zis.read(buffer,0,BUFFER_SIZE)) >= 0) {
        baos.write(buffer,0,bytesRead);
      }
    }
  }
  LanguageType baseType=LanguageData.getLanguageById(baseLanguage);
  LanguageType targetType=LanguageData.getLanguageById(targetLanguage);
  if (baseLanguage.length() < 2 || targetLanguage.length() < 2 || baseType == null || targetType == null)   return false;
  realm.beginTransaction();
  Language base=realm.where(Language.class).equalTo(""String_Node_Str"",baseLanguage).findFirst();
  if (base == null) {
    base=realm.createObject(Language.class,baseLanguage);
  }
  Pack basePack=base.getPack(packName);
  if (basePack == null) {
    basePack=realm.createObject(Pack.class,UUID.randomUUID().toString());
    basePack.setBook(packName);
    base.getPacks().add(basePack);
  }
  Language target=realm.where(Language.class).equalTo(""String_Node_Str"",targetLanguage).findFirst();
  if (target == null) {
    target=realm.createObject(Language.class,targetLanguage);
  }
  Pack targetPack=target.getPack(packName);
  if (targetPack == null) {
    targetPack=realm.createObject(Pack.class,UUID.randomUUID().toString());
    targetPack.setBook(packName);
    target.getPacks().add(targetPack);
  }
  realm.commitTransaction();
  actionSubject.onNext(LanguageImportFragment.ACTION_EXTRACTING_TEXT);
  progressSubject.onNext(0);
  totalSubject.onNext(numFiles / 2);
  String[] sentenceList=baos.toString(""String_Node_Str"").split(""String_Node_Str"");
  String[] sections=sentenceList[0].split(""String_Node_Str"");
  realm.beginTransaction();
  for (int i=1; i < sentenceList.length; i++) {
    progressSubject.onNext(i);
    String[] sentenceParts=sentenceList[i].split(""String_Node_Str"");
    int index=Integer.parseInt(sentenceParts[0]);
    String sentence=null;
    String translation=null;
    String ipa=null;
    String romanization=null;
    for (int j=0; j < sentenceParts.length; j++) {
      String value=sentenceParts[j];
switch (sections[j]) {
case ""String_Node_Str"":
        break;
case ""String_Node_Str"":
      sentence=value;
    break;
case ""String_Node_Str"":
  translation=value;
break;
case ""String_Node_Str"":
ipa=value;
break;
case ""String_Node_Str"":
romanization=value;
break;
}
}
targetPack.createSentenceOrUpdate(realm,index,translation,ipa,romanization,null);
basePack.createSentenceOrUpdate(realm,index,sentence,null,null,null);
}
realm.commitTransaction();
actionSubject.onNext(LanguageImportFragment.ACTION_EXTRACTING_AUDIO);
progressSubject.onNext(0);
totalSubject.onNext(numFiles);
return true;
}","/** 
 * Counts the number of files in a pack and does some basic verification to ensure files are in order.
 */
private boolean countFiles(ZipInputStream zis,Realm realm) throws IOException {
  actionSubject.onNext(LanguageImportFragment.ACTION_COUNTING_SENTENCES);
  final byte[] buffer=new byte[BUFFER_SIZE];
  ZipEntry zipEntry;
  int numFiles=0;
  int bytesRead;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  String baseLanguage=""String_Node_Str"";
  String targetLanguage=""String_Node_Str"";
  String packName=""String_Node_Str"";
  while ((zipEntry=zis.getNextEntry()) != null) {
    if (zipEntry.getName().endsWith(""String_Node_Str"")) {
      packName=zipEntry.getName().split(""String_Node_Str"")[1];
      numFiles++;
      actionSubject.onNext(LanguageImportFragment.ACTION_COUNTING_SENTENCES);
      totalSubject.onNext(numFiles);
    }
 else     if (zipEntry.getName().endsWith(""String_Node_Str"")) {
      actionSubject.onNext(LanguageImportFragment.ACTION_READING_SENTENCES);
      String[] nameParts=zipEntry.getName().split(""String_Node_Str"");
      baseLanguage=nameParts[0].trim();
      targetLanguage=nameParts[1].trim();
      while ((bytesRead=zis.read(buffer,0,BUFFER_SIZE)) >= 0) {
        baos.write(buffer,0,bytesRead);
      }
    }
  }
  LanguageType baseType=LanguageData.getLanguageById(baseLanguage);
  LanguageType targetType=LanguageData.getLanguageById(targetLanguage);
  if (baseLanguage.length() < 2 || targetLanguage.length() < 2 || baseType == null || targetType == null)   return false;
  realm.beginTransaction();
  Language base=realm.where(Language.class).equalTo(""String_Node_Str"",baseLanguage).findFirst();
  if (base == null) {
    base=realm.createObject(Language.class,baseLanguage);
  }
  Pack basePack=base.getPack(packName);
  if (basePack == null) {
    basePack=realm.createObject(Pack.class,UUID.randomUUID().toString());
    basePack.setBook(packName);
    base.getPacks().add(basePack);
  }
  Language target=realm.where(Language.class).equalTo(""String_Node_Str"",targetLanguage).findFirst();
  if (target == null) {
    target=realm.createObject(Language.class,targetLanguage);
  }
  Pack targetPack=target.getPack(packName);
  if (targetPack == null) {
    targetPack=realm.createObject(Pack.class,UUID.randomUUID().toString());
    targetPack.setBook(packName);
    target.getPacks().add(targetPack);
  }
  realm.commitTransaction();
  actionSubject.onNext(LanguageImportFragment.ACTION_EXTRACTING_TEXT);
  progressSubject.onNext(0);
  totalSubject.onNext(numFiles / 2);
  String[] sentenceList=baos.toString(""String_Node_Str"").split(""String_Node_Str"");
  String[] sections=sentenceList[0].split(""String_Node_Str"");
  for (int i=1; i < sentenceList.length; i++) {
    progressSubject.onNext(i);
    String[] sentenceParts=sentenceList[i].split(""String_Node_Str"");
    int index=Integer.parseInt(sentenceParts[0]);
    String sentence=null;
    String translation=null;
    String ipa=null;
    String romanization=null;
    for (int j=0; j < sentenceParts.length; j++) {
      String value=sentenceParts[j];
switch (sections[j]) {
case ""String_Node_Str"":
        break;
case ""String_Node_Str"":
      sentence=value;
    break;
case ""String_Node_Str"":
  translation=value;
break;
case ""String_Node_Str"":
ipa=value;
break;
case ""String_Node_Str"":
romanization=value;
break;
}
}
targetPack.createSentenceOrUpdate(realm,index,translation,ipa,romanization,null);
basePack.createSentenceOrUpdate(realm,index,sentence,null,null,null);
}
actionSubject.onNext(LanguageImportFragment.ACTION_EXTRACTING_AUDIO);
progressSubject.onNext(0);
totalSubject.onNext(numFiles);
return true;
}"
79482,"/** 
 * 判断当前页数是否小于等于最大页数
 * @param document
 * @param currentPage
 * @return
 */
private boolean hasPage(Document document,int currentPage){
  if (mTypeMaxPageMap == null) {
    mTypeMaxPageMap=new HashMap<>();
  }
  if (mTypeMaxPageMap.get(mCurrentUrl) != null) {
    return currentPage <= mTypeMaxPageMap.get(mCurrentUrl);
  }
  Elements elements=document.select(""String_Node_Str"");
  int maxPage=-1;
  for (  Element element : elements) {
    if (element.hasClass(""String_Node_Str"")) {
      continue;
    }
    String text=element.text();
    try {
      int page=Integer.parseInt(text);
      if (page > maxPage) {
        maxPage=page;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  mTypeMaxPageMap.put(mCurrentUrl,maxPage);
  return currentPage <= maxPage;
}","/** 
 * 判断当前页数是否小于等于最大页数
 * @param document
 * @param currentPage
 * @return
 */
private boolean hasPage(Document document,int currentPage){
  if (mTypeMaxPageMap == null) {
    mTypeMaxPageMap=new HashMap<>();
  }
  if (mTypeMaxPageMap.get(mCurrentUrl) != null) {
    return currentPage <= mTypeMaxPageMap.get(mCurrentUrl);
  }
  Elements elements=document.select(""String_Node_Str"");
  int maxPage=-1;
  for (  Element element : elements) {
    if (element.hasClass(""String_Node_Str"")) {
      continue;
    }
    String text=element.text();
    if (text.matches(""String_Node_Str"")) {
      continue;
    }
    try {
      int page=Integer.parseInt(text);
      if (page > maxPage) {
        maxPage=page;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  mTypeMaxPageMap.put(mCurrentUrl,maxPage);
  return currentPage <= maxPage;
}"
79483,"void tryEliminate(IRFunction func){
  List<BasicBlock> reversePreOrder=func.getReversePreOrder();
  for (  BasicBlock bb : reversePreOrder) {
    for (IRInstruction inst=bb.getLastInst(), prevInst; inst != null; inst=prevInst) {
      prevInst=inst.getPrevInst();
      if (inst instanceof IRBinaryOperation || inst instanceof IRComparison || inst instanceof IRLoad|| inst instanceof IRMove|| inst instanceof IRUnaryOperation|| inst instanceof IRHeapAlloc) {
        IRRegister dest=inst.getDefinedRegister();
        if (dest == null || !inst.liveOut.contains(dest)) {
          eliminationChanged=true;
          inst.remove();
        }
      }
    }
  }
  for (  IRRoot.ForRecord forRec : ir.forRecMap.values()) {
    if (forRec.processed)     continue;
    boolean lieOutsideInst=false;
    if (forRec.condBB == null || forRec.stepBB == null || forRec.bodyBB == null || forRec.afterBB == null)     continue;
    List<BasicBlock> bbList=new ArrayList<>();
    bbList.add(forRec.condBB);
    bbList.add(forRec.stepBB);
    bbList.add(forRec.bodyBB);
    bbList.add(forRec.afterBB);
    IRInstruction afterFirstInst=forRec.afterBB.getFirstInst();
    for (int i=0; i < 3; ++i) {
      for (IRInstruction inst=forRec.condBB.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          lieOutsideInst=true;
          continue;
        }
        if (inst.getDefinedRegister() != null) {
          if (afterFirstInst.liveIn.contains(inst.getDefinedRegister())) {
            lieOutsideInst=true;
          }
          continue;
        }
        if (inst instanceof IRStore) {
          lieOutsideInst=true;
          continue;
        }
        if (inst instanceof IRJump) {
          if (!bbList.contains(((IRJump)inst).getTargetBB()))           lieOutsideInst=true;
          continue;
        }
        if (inst instanceof IRBranch) {
          if (!bbList.contains(((IRBranch)inst).getThenBB()) || !bbList.contains(((IRBranch)inst).getElseBB()))           lieOutsideInst=true;
          continue;
        }
        if (inst instanceof IRReturn || inst instanceof IRPush || inst instanceof IRStore) {
          lieOutsideInst=true;
          continue;
        }
      }
    }
    if (!lieOutsideInst) {
      System.err.println(""String_Node_Str"");
      forRec.condBB.reInit();
      forRec.condBB.setJumpInst(new IRJump(forRec.condBB,forRec.afterBB));
      forRec.processed=true;
    }
  }
}","void tryEliminate(IRFunction func){
  List<BasicBlock> reversePreOrder=func.getReversePreOrder();
  for (  BasicBlock bb : reversePreOrder) {
    for (IRInstruction inst=bb.getLastInst(), prevInst; inst != null; inst=prevInst) {
      prevInst=inst.getPrevInst();
      if (inst instanceof IRBinaryOperation || inst instanceof IRComparison || inst instanceof IRLoad|| inst instanceof IRMove|| inst instanceof IRUnaryOperation|| inst instanceof IRHeapAlloc) {
        IRRegister dest=inst.getDefinedRegister();
        if (dest == null || !inst.liveOut.contains(dest)) {
          eliminationChanged=true;
          inst.remove();
        }
      }
    }
  }
  for (  IRRoot.ForRecord forRec : ir.forRecMap.values()) {
    if (forRec.processed)     continue;
    boolean lieOutsideInst=false;
    if (forRec.condBB == null || forRec.stepBB == null || forRec.bodyBB == null || forRec.afterBB == null)     continue;
    List<BasicBlock> bbList=new ArrayList<>();
    bbList.add(forRec.condBB);
    bbList.add(forRec.stepBB);
    bbList.add(forRec.bodyBB);
    bbList.add(forRec.afterBB);
    IRInstruction afterFirstInst=forRec.afterBB.getFirstInst();
    for (int i=0; i < 3; ++i) {
      for (IRInstruction inst=bbList.get(i).getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          lieOutsideInst=true;
          continue;
        }
        if (inst.getDefinedRegister() != null) {
          if (afterFirstInst.liveIn.contains(inst.getDefinedRegister())) {
            lieOutsideInst=true;
          }
          continue;
        }
        if (inst instanceof IRStore) {
          lieOutsideInst=true;
          continue;
        }
        if (inst instanceof IRJump) {
          if (!bbList.contains(((IRJump)inst).getTargetBB()))           lieOutsideInst=true;
          continue;
        }
        if (inst instanceof IRBranch) {
          if (!bbList.contains(((IRBranch)inst).getThenBB()) || !bbList.contains(((IRBranch)inst).getElseBB()))           lieOutsideInst=true;
          continue;
        }
        if (inst instanceof IRReturn || inst instanceof IRPush || inst instanceof IRStore) {
          lieOutsideInst=true;
          continue;
        }
      }
    }
    if (!lieOutsideInst) {
      forRec.condBB.reInit();
      forRec.condBB.setJumpInst(new IRJump(forRec.condBB,forRec.afterBB));
      forRec.processed=true;
    }
  }
}"
79484,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    List<BasicBlock> reversePreOrder=irFunction.getReversePreOrder();
    for (    BasicBlock bb : reversePreOrder) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        inst.liveIn=new HashSet<>();
        inst.liveOut=new HashSet<>();
      }
    }
    Set<VirtualRegister> liveIn=new HashSet<>();
    Set<VirtualRegister> liveOut=new HashSet<>();
    boolean converged=false;
    while (!converged) {
      converged=true;
      for (      BasicBlock bb : reversePreOrder) {
        for (IRInstruction inst=bb.getLastInst(); inst != null; inst=inst.getPrevInst()) {
          liveIn.clear();
          liveOut.clear();
          if (inst instanceof IRJumpInstruction) {
            if (inst instanceof IRJump) {
              liveOut.addAll(((IRJump)inst).getTargetBB().getFirstInst().liveIn);
            }
 else             if (inst instanceof IRBranch) {
              if (((IRBranch)inst).getThenBB().getFirstInst() == null) {
                System.err.println(""String_Node_Str"" + (((IRBranch)inst).getThenBB().getName()));
              }
              liveOut.addAll(((IRBranch)inst).getThenBB().getFirstInst().liveIn);
              liveOut.addAll(((IRBranch)inst).getElseBB().getFirstInst().liveIn);
            }
          }
 else {
            if (inst.getNextInst() != null)             liveOut.addAll(inst.getNextInst().liveIn);
          }
          liveIn.addAll(liveOut);
          IRRegister definedReg=inst.getDefinedRegister();
          if (definedReg instanceof VirtualRegister) {
            liveIn.remove(definedReg);
          }
          for (          IRRegister usedReg : inst.getUsedRegisters()) {
            if (usedReg instanceof VirtualRegister) {
              liveIn.add((VirtualRegister)usedReg);
            }
          }
          if (!inst.liveIn.equals(liveIn)) {
            converged=false;
            inst.liveIn.clear();
            inst.liveIn.addAll(liveIn);
          }
          if (!inst.liveOut.equals(liveOut)) {
            converged=false;
            inst.liveOut.clear();
            inst.liveOut.addAll(liveOut);
          }
        }
      }
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    List<BasicBlock> reversePreOrder=irFunction.getReversePreOrder();
    for (    BasicBlock bb : reversePreOrder) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        inst.liveIn=new HashSet<>();
        inst.liveOut=new HashSet<>();
      }
    }
    Set<VirtualRegister> liveIn=new HashSet<>();
    Set<VirtualRegister> liveOut=new HashSet<>();
    boolean converged=false;
    while (!converged) {
      converged=true;
      for (      BasicBlock bb : reversePreOrder) {
        for (IRInstruction inst=bb.getLastInst(); inst != null; inst=inst.getPrevInst()) {
          liveIn.clear();
          liveOut.clear();
          if (inst instanceof IRJumpInstruction) {
            if (inst instanceof IRJump) {
              liveOut.addAll(((IRJump)inst).getTargetBB().getFirstInst().liveIn);
            }
 else             if (inst instanceof IRBranch) {
              liveOut.addAll(((IRBranch)inst).getThenBB().getFirstInst().liveIn);
              liveOut.addAll(((IRBranch)inst).getElseBB().getFirstInst().liveIn);
            }
          }
 else {
            if (inst.getNextInst() != null)             liveOut.addAll(inst.getNextInst().liveIn);
          }
          liveIn.addAll(liveOut);
          IRRegister definedReg=inst.getDefinedRegister();
          if (definedReg instanceof VirtualRegister) {
            liveIn.remove(definedReg);
          }
          for (          IRRegister usedReg : inst.getUsedRegisters()) {
            if (usedReg instanceof VirtualRegister) {
              liveIn.add((VirtualRegister)usedReg);
            }
          }
          if (!inst.liveIn.equals(liveIn)) {
            converged=false;
            inst.liveIn.clear();
            inst.liveIn.addAll(liveIn);
          }
          if (!inst.liveOut.equals(liveOut)) {
            converged=false;
            inst.liveOut.clear();
            inst.liveOut.addAll(liveOut);
          }
        }
      }
    }
  }
}"
79485,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79486,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    funcInfoMap.put(irFunction,funcInfo);
    Map<IRRegister,IRRegister> renameMap=new HashMap<>();
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (isStaticLoadStore(inst))         continue;
        List<IRRegister> usedRegisters=inst.getUsedRegisters();
        if (!usedRegisters.isEmpty()) {
          renameMap.clear();
          for (          IRRegister reg : usedRegisters) {
            if (reg instanceof StaticData) {
              renameMap.put(reg,getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)reg));
            }
 else {
              renameMap.put(reg,reg);
            }
          }
          inst.setUsedRegisters(renameMap);
        }
        IRRegister definedRegister=inst.getDefinedRegister();
        if (definedRegister != null && definedRegister instanceof StaticData) {
          VirtualRegister vreg=getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)definedRegister);
          inst.setDefinedRegister(vreg);
          funcInfo.definedStaticData.add((StaticData)definedRegister);
        }
      }
    }
    BasicBlock startBB=irFunction.getStartBB();
    IRInstruction firtInst=startBB.getFirstInst();
    funcInfo.staticDataVregMap.forEach((staticData,virtualRegister) -> firtInst.prependInst(new IRLoad(startBB,virtualRegister,Configuration.getRegSize(),staticData,staticData instanceof StaticString)));
  }
  for (  IRFunction builtFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedStaticData.addAll(funcInfo.staticDataVregMap.keySet());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
      funcInfo.recursiveUsedStaticData.addAll(calleeFuncInfo.staticDataVregMap.keySet());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    Set<StaticData> usedStaticData=funcInfo.staticDataVregMap.keySet();
    if (usedStaticData.isEmpty())     continue;
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (!(inst instanceof IRFunctionCall))         continue;
        IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
        FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
        for (        StaticData staticData : funcInfo.definedStaticData) {
          if (calleeFuncInfo.recursiveUsedStaticData.contains(staticData)) {
            inst.prependInst(new IRStore(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
          }
        }
        if (calleeFuncInfo.definedStaticData.isEmpty())         continue;
        Set<StaticData> loadStaticDataSet=new HashSet<>();
        loadStaticDataSet.addAll(calleeFuncInfo.definedStaticData);
        loadStaticDataSet.retainAll(usedStaticData);
        for (        StaticData staticData : loadStaticDataSet) {
          inst.appendInst(new IRLoad(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData,staticData instanceof StaticString));
        }
      }
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    IRReturn retInst=irFunction.getRetInstList().get(0);
    for (    StaticData staticData : funcInfo.definedStaticData) {
      retInst.prependInst(new IRStore(retInst.getParentBB(),funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    funcInfoMap.put(irFunction,funcInfo);
    Map<IRRegister,IRRegister> renameMap=new HashMap<>();
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (isStaticLoadStore(inst))         continue;
        List<IRRegister> usedRegisters=inst.getUsedRegisters();
        if (!usedRegisters.isEmpty()) {
          renameMap.clear();
          for (          IRRegister reg : usedRegisters) {
            if (reg instanceof StaticData && !(reg instanceof StaticString)) {
              renameMap.put(reg,getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)reg));
            }
 else {
              renameMap.put(reg,reg);
            }
          }
          inst.setUsedRegisters(renameMap);
        }
        IRRegister definedRegister=inst.getDefinedRegister();
        if (definedRegister != null && definedRegister instanceof StaticData) {
          VirtualRegister vreg=getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)definedRegister);
          inst.setDefinedRegister(vreg);
          funcInfo.definedStaticData.add((StaticData)definedRegister);
        }
      }
    }
    BasicBlock startBB=irFunction.getStartBB();
    IRInstruction firtInst=startBB.getFirstInst();
    funcInfo.staticDataVregMap.forEach((staticData,virtualRegister) -> firtInst.prependInst(new IRLoad(startBB,virtualRegister,Configuration.getRegSize(),staticData,staticData instanceof StaticString)));
  }
  for (  IRFunction builtFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedStaticData.addAll(funcInfo.staticDataVregMap.keySet());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
      funcInfo.recursiveUsedStaticData.addAll(calleeFuncInfo.staticDataVregMap.keySet());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    Set<StaticData> usedStaticData=funcInfo.staticDataVregMap.keySet();
    if (usedStaticData.isEmpty())     continue;
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (!(inst instanceof IRFunctionCall))         continue;
        IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
        FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
        for (        StaticData staticData : funcInfo.definedStaticData) {
          if (staticData instanceof StaticString)           continue;
          if (calleeFuncInfo.recursiveUsedStaticData.contains(staticData)) {
            inst.prependInst(new IRStore(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
          }
        }
        if (calleeFuncInfo.definedStaticData.isEmpty())         continue;
        Set<StaticData> loadStaticDataSet=new HashSet<>();
        loadStaticDataSet.addAll(calleeFuncInfo.definedStaticData);
        loadStaticDataSet.retainAll(usedStaticData);
        for (        StaticData staticData : loadStaticDataSet) {
          if (staticData instanceof StaticString)           continue;
          inst.appendInst(new IRLoad(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData,staticData instanceof StaticString));
        }
      }
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    IRReturn retInst=irFunction.getRetInstList().get(0);
    for (    StaticData staticData : funcInfo.definedStaticData) {
      retInst.prependInst(new IRStore(retInst.getParentBB(),funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
    }
  }
}"
79487,"@Override public Node visitStringConst(EMxStarParser.StringConstContext ctx){
  return new StringConstExprNode(ctx.getText().substring(1,ctx.getText().length() - 1),Location.fromCtx(ctx));
}","@Override public Node visitStringConst(EMxStarParser.StringConstContext ctx){
  String str=ctx.getText();
  return new StringConstExprNode(unescape(str.substring(1,str.length() - 1)),Location.fromCtx(ctx));
}"
79488,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    funcInfoMap.put(irFunction,funcInfo);
    Map<IRRegister,IRRegister> renameMap=new HashMap<>();
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (isStaticLoadStore(inst))         continue;
        List<IRRegister> usedRegisters=inst.getUsedRegisters();
        if (!usedRegisters.isEmpty()) {
          renameMap.clear();
          for (          IRRegister reg : usedRegisters) {
            if (reg instanceof StaticData && !(reg instanceof StaticString)) {
              renameMap.put(reg,getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)reg));
            }
 else {
              renameMap.put(reg,reg);
            }
          }
          inst.setUsedRegisters(renameMap);
        }
        IRRegister definedRegister=inst.getDefinedRegister();
        if (definedRegister != null && definedRegister instanceof StaticData) {
          VirtualRegister vreg=getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)definedRegister);
          inst.setDefinedRegister(vreg);
          funcInfo.definedStaticData.add((StaticData)definedRegister);
        }
      }
    }
    BasicBlock startBB=irFunction.getStartBB();
    IRInstruction firtInst=startBB.getFirstInst();
    funcInfo.staticDataVregMap.forEach((staticData,virtualRegister) -> firtInst.prependInst(new IRLoad(startBB,virtualRegister,Configuration.getRegSize(),staticData,staticData instanceof StaticString)));
  }
  for (  IRFunction builtFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedStaticData.addAll(funcInfo.staticDataVregMap.keySet());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
      funcInfo.recursiveUsedStaticData.addAll(calleeFuncInfo.staticDataVregMap.keySet());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    Set<StaticData> usedStaticData=funcInfo.staticDataVregMap.keySet();
    if (usedStaticData.isEmpty())     continue;
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (!(inst instanceof IRFunctionCall))         continue;
        IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
        FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
        for (        StaticData staticData : funcInfo.definedStaticData) {
          if (staticData instanceof StaticString)           continue;
          if (calleeFuncInfo.recursiveUsedStaticData.contains(staticData)) {
            inst.prependInst(new IRStore(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
          }
        }
        if (calleeFuncInfo.definedStaticData.isEmpty())         continue;
        Set<StaticData> loadStaticDataSet=new HashSet<>();
        loadStaticDataSet.addAll(calleeFuncInfo.definedStaticData);
        loadStaticDataSet.retainAll(usedStaticData);
        for (        StaticData staticData : loadStaticDataSet) {
          if (staticData instanceof StaticString)           continue;
          inst.appendInst(new IRLoad(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData,staticData instanceof StaticString));
        }
      }
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    IRReturn retInst=irFunction.getRetInstList().get(0);
    for (    StaticData staticData : funcInfo.definedStaticData) {
      retInst.prependInst(new IRStore(retInst.getParentBB(),funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    funcInfoMap.put(irFunction,funcInfo);
    Map<IRRegister,IRRegister> renameMap=new HashMap<>();
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (isStaticLoadStore(inst))         continue;
        List<IRRegister> usedRegisters=inst.getUsedRegisters();
        if (!usedRegisters.isEmpty()) {
          renameMap.clear();
          for (          IRRegister reg : usedRegisters) {
            if (reg instanceof StaticData && !(reg instanceof StaticString)) {
              renameMap.put(reg,getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)reg));
            }
 else {
              renameMap.put(reg,reg);
            }
          }
          inst.setUsedRegisters(renameMap);
        }
        IRRegister definedRegister=inst.getDefinedRegister();
        if (definedRegister != null && definedRegister instanceof StaticData) {
          VirtualRegister vreg=getStaticDataVreg(funcInfo.staticDataVregMap,(StaticData)definedRegister);
          inst.setDefinedRegister(vreg);
          funcInfo.definedStaticData.add((StaticData)definedRegister);
        }
      }
    }
    BasicBlock startBB=irFunction.getStartBB();
    IRInstruction firtInst=startBB.getFirstInst();
    funcInfo.staticDataVregMap.forEach((staticData,virtualRegister) -> firtInst.prependInst(new IRLoad(startBB,virtualRegister,Configuration.getRegSize(),staticData,staticData instanceof StaticString)));
  }
  for (  IRFunction builtFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedStaticData.addAll(funcInfo.staticDataVregMap.keySet());
    funcInfo.recursiveDefinedStaticData.addAll(funcInfo.definedStaticData);
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
      funcInfo.recursiveUsedStaticData.addAll(calleeFuncInfo.staticDataVregMap.keySet());
      funcInfo.recursiveDefinedStaticData.addAll(calleeFuncInfo.definedStaticData);
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    Set<StaticData> usedStaticData=funcInfo.staticDataVregMap.keySet();
    if (usedStaticData.isEmpty())     continue;
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (!(inst instanceof IRFunctionCall))         continue;
        IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
        FuncInfo calleeFuncInfo=funcInfoMap.get(calleeFunc);
        for (        StaticData staticData : funcInfo.definedStaticData) {
          if (staticData instanceof StaticString)           continue;
          if (calleeFuncInfo.recursiveUsedStaticData.contains(staticData)) {
            inst.prependInst(new IRStore(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
          }
        }
        if (calleeFuncInfo.recursiveDefinedStaticData.isEmpty())         continue;
        Set<StaticData> loadStaticDataSet=new HashSet<>();
        loadStaticDataSet.addAll(calleeFuncInfo.recursiveDefinedStaticData);
        loadStaticDataSet.retainAll(usedStaticData);
        for (        StaticData staticData : loadStaticDataSet) {
          if (staticData instanceof StaticString)           continue;
          inst.appendInst(new IRLoad(bb,funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData,staticData instanceof StaticString));
        }
      }
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    IRReturn retInst=irFunction.getRetInstList().get(0);
    for (    StaticData staticData : funcInfo.definedStaticData) {
      retInst.prependInst(new IRStore(retInst.getParentBB(),funcInfo.staticDataVregMap.get(staticData),Configuration.getRegSize(),staticData));
    }
  }
}"
79489,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    List<BasicBlock> reversePreOrder=irFunction.getReversePreOrder();
    for (    BasicBlock bb : reversePreOrder) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        inst.liveIn=new HashSet<>();
        inst.liveOut=new HashSet<>();
      }
    }
    Set<VirtualRegister> liveIn=new HashSet<>();
    Set<VirtualRegister> liveOut=new HashSet<>();
    boolean converged=false;
    while (!converged) {
      converged=true;
      for (      BasicBlock bb : reversePreOrder) {
        for (IRInstruction inst=bb.getLastInst(); inst != null; inst=inst.getPrevInst()) {
          liveIn.clear();
          liveOut.clear();
          if (inst instanceof IRJumpInstruction) {
            if (inst instanceof IRJump) {
              liveOut.addAll(((IRJump)inst).getTargetBB().getFirstInst().liveIn);
            }
 else             if (inst instanceof IRBranch) {
              liveOut.addAll(((IRBranch)inst).getThenBB().getFirstInst().liveIn);
              liveOut.addAll(((IRBranch)inst).getElseBB().getFirstInst().liveIn);
            }
          }
 else {
            liveOut.addAll(inst.getNextInst().liveIn);
          }
          liveIn.addAll(liveOut);
          IRRegister definedReg=inst.getDefinedRegister();
          if (definedReg instanceof VirtualRegister) {
            liveIn.remove(definedReg);
          }
          for (          IRRegister usedReg : inst.getUsedRegisters()) {
            if (usedReg instanceof VirtualRegister) {
              liveIn.add((VirtualRegister)usedReg);
            }
          }
          if (!inst.liveIn.equals(liveIn)) {
            converged=false;
            inst.liveIn.clear();
            inst.liveIn.addAll(liveIn);
          }
          if (!inst.liveOut.equals(liveOut)) {
            converged=false;
            inst.liveOut.clear();
            inst.liveOut.addAll(liveOut);
          }
        }
      }
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    List<BasicBlock> reversePreOrder=irFunction.getReversePreOrder();
    for (    BasicBlock bb : reversePreOrder) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        inst.liveIn=new HashSet<>();
        inst.liveOut=new HashSet<>();
      }
    }
    Set<VirtualRegister> liveIn=new HashSet<>();
    Set<VirtualRegister> liveOut=new HashSet<>();
    boolean converged=false;
    while (!converged) {
      converged=true;
      for (      BasicBlock bb : reversePreOrder) {
        for (IRInstruction inst=bb.getLastInst(); inst != null; inst=inst.getPrevInst()) {
          liveIn.clear();
          liveOut.clear();
          if (inst instanceof IRJumpInstruction) {
            if (inst instanceof IRJump) {
              liveOut.addAll(((IRJump)inst).getTargetBB().getFirstInst().liveIn);
            }
 else             if (inst instanceof IRBranch) {
              liveOut.addAll(((IRBranch)inst).getThenBB().getFirstInst().liveIn);
              liveOut.addAll(((IRBranch)inst).getElseBB().getFirstInst().liveIn);
            }
          }
 else {
            if (inst.getNextInst() != null)             liveOut.addAll(inst.getNextInst().liveIn);
          }
          liveIn.addAll(liveOut);
          IRRegister definedReg=inst.getDefinedRegister();
          if (definedReg instanceof VirtualRegister) {
            liveIn.remove(definedReg);
          }
          for (          IRRegister usedReg : inst.getUsedRegisters()) {
            if (usedReg instanceof VirtualRegister) {
              liveIn.add((VirtualRegister)usedReg);
            }
          }
          if (!inst.liveIn.equals(liveIn)) {
            converged=false;
            inst.liveIn.clear();
            inst.liveIn.addAll(liveIn);
          }
          if (!inst.liveOut.equals(liveOut)) {
            converged=false;
            inst.liveOut.clear();
            inst.liveOut.addAll(liveOut);
          }
        }
      }
    }
  }
}"
79490,"private void processIRAssign(RegValue dest,int addrOffset,ExprNode rhs,int size,boolean needMemOp){
  if (rhs.getType() instanceof BoolType) {
    BasicBlock mergeBB=new BasicBlock(currentFunc,null);
    if (needMemOp) {
      rhs.getTrueBB().addInst(new IRStore(rhs.getTrueBB(),new IntImmediate(1),BoolType.getInstance().getVarSize(),dest,addrOffset));
      rhs.getFalseBB().addInst(new IRStore(rhs.getFalseBB(),new IntImmediate(0),BoolType.getInstance().getVarSize(),dest,addrOffset));
    }
 else {
      rhs.getTrueBB().addInst(new IRMove(rhs.getTrueBB(),(VirtualRegister)dest,new IntImmediate(1)));
      rhs.getFalseBB().addInst(new IRMove(rhs.getFalseBB(),(VirtualRegister)dest,new IntImmediate(0)));
    }
    rhs.getTrueBB().setJumpInst(new IRJump(rhs.getTrueBB(),mergeBB));
    rhs.getFalseBB().setJumpInst(new IRJump(rhs.getFalseBB(),mergeBB));
    currentBB=mergeBB;
  }
 else {
    if (needMemOp) {
      currentBB.addInst(new IRStore(currentBB,rhs.getRegValue(),rhs.getType().getVarSize(),dest,addrOffset));
    }
 else {
      currentBB.addInst(new IRMove(currentBB,(IRRegister)dest,rhs.getRegValue()));
    }
  }
}","private void processIRAssign(RegValue dest,int addrOffset,ExprNode rhs,int size,boolean needMemOp){
  if (rhs.getTrueBB() != null) {
    BasicBlock mergeBB=new BasicBlock(currentFunc,null);
    if (needMemOp) {
      rhs.getTrueBB().addInst(new IRStore(rhs.getTrueBB(),new IntImmediate(1),BoolType.getInstance().getVarSize(),dest,addrOffset));
      rhs.getFalseBB().addInst(new IRStore(rhs.getFalseBB(),new IntImmediate(0),BoolType.getInstance().getVarSize(),dest,addrOffset));
    }
 else {
      rhs.getTrueBB().addInst(new IRMove(rhs.getTrueBB(),(VirtualRegister)dest,new IntImmediate(1)));
      rhs.getFalseBB().addInst(new IRMove(rhs.getFalseBB(),(VirtualRegister)dest,new IntImmediate(0)));
    }
    if (!rhs.getTrueBB().isHasJumpInst())     rhs.getTrueBB().setJumpInst(new IRJump(rhs.getTrueBB(),mergeBB));
    if (!rhs.getFalseBB().isHasJumpInst())     rhs.getFalseBB().setJumpInst(new IRJump(rhs.getFalseBB(),mergeBB));
    currentBB=mergeBB;
  }
 else {
    if (needMemOp) {
      currentBB.addInst(new IRStore(currentBB,rhs.getRegValue(),rhs.getType().getVarSize(),dest,addrOffset));
    }
 else {
      currentBB.addInst(new IRMove(currentBB,(IRRegister)dest,rhs.getRegValue()));
    }
  }
}"
79491,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.usedCalleeSaveRegs.add(rbx);
    funcInfo.usedCalleeSaveRegs.add(rbp);
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.usedCalleeSaveRegs.add(rbx);
    funcInfo.usedCalleeSaveRegs.add(rbp);
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset+=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + calleeInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (calleeInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? calleeInfo.numExtraArgs + 1 : calleeInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79492,"public void compile() throws Exception {
  buildAST();
  if (astOutS != null)   new ASTPrinter(astOutS).visit(ast);
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  IRBuilder irBuilder=new IRBuilder(functionScopeScanner.getGlobalScope());
  irBuilder.visit(ast);
  IRRoot ir=irBuilder.getIR();
  new TwoRegOpTransformer(ir).run();
  if (Configuration.isEnableFunctionInline())   new FunctionInlineProcessor(ir).run();
  if (irOutS != null)   new IRPrinter(irOutS).visit(ir);
  new StaticDataProcessor(ir).run();
  new RegLivelinessAnalysis(ir).run();
  new RegisterPreprocessor(ir).run();
  new RegisterAllocator(ir,NASMRegisterSet.generalRegs).run();
  new NASMTransformer(ir).run();
  new NASMPrinter(nasmOutS).visit(ir);
}","public void compile() throws Exception {
  buildAST();
  if (astOutS != null)   new ASTPrinter(astOutS).visit(ast);
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  IRBuilder irBuilder=new IRBuilder(functionScopeScanner.getGlobalScope());
  irBuilder.visit(ast);
  IRRoot ir=irBuilder.getIR();
  new TwoRegOpTransformer(ir).run();
  if (Configuration.isEnableFunctionInline())   new FunctionInlineProcessor(ir).run();
  if (irOutS != null)   new IRPrinter(irOutS).visit(ir);
  new StaticDataProcessor(ir).run();
  new RegisterPreprocessor(ir).run();
  new RegLivelinessAnalysis(ir).run();
  new RegisterAllocator(ir,NASMRegisterSet.generalRegs).run();
  new NASMTransformer(ir).run();
  new NASMPrinter(nasmOutS).visit(ir);
}"
79493,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    List<BasicBlock> reversePreOrder=irFunction.getReversePreOrder();
    for (    BasicBlock bb : reversePreOrder) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        inst.liveIn=new HashSet<>();
        inst.liveOut=new HashSet<>();
      }
    }
    Set<VirtualRegister> liveIn=new HashSet<>();
    Set<VirtualRegister> liveOut=new HashSet<>();
    boolean converged=false;
    while (!converged) {
      converged=true;
      for (      BasicBlock bb : reversePreOrder) {
        for (IRInstruction inst=bb.getLastInst(); inst != null; inst=inst.getPrevInst()) {
          liveIn.clear();
          liveOut.clear();
          if (inst instanceof IRJumpInstruction) {
            if (inst instanceof IRJump) {
              liveOut.addAll(((IRJump)inst).getTargetBB().getFirstInst().liveIn);
            }
 else             if (inst instanceof IRBranch) {
              liveOut.addAll(((IRBranch)inst).getThenBB().getFirstInst().liveIn);
              liveOut.addAll(((IRBranch)inst).getElseBB().getFirstInst().liveIn);
            }
          }
 else {
            if (inst.getNextInst() != null)             liveOut.addAll(inst.getNextInst().liveIn);
          }
          liveIn.addAll(liveOut);
          IRRegister definedReg=inst.getDefinedRegister();
          if (definedReg instanceof VirtualRegister) {
            liveIn.remove(definedReg);
          }
          for (          IRRegister usedReg : inst.getUsedRegisters()) {
            if (usedReg instanceof VirtualRegister) {
              liveIn.add((VirtualRegister)usedReg);
            }
          }
          if (!inst.liveIn.equals(liveIn)) {
            converged=false;
            inst.liveIn.clear();
            inst.liveIn.addAll(liveIn);
          }
          if (!inst.liveOut.equals(liveOut)) {
            converged=false;
            inst.liveOut.clear();
            inst.liveOut.addAll(liveOut);
          }
        }
      }
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    List<BasicBlock> reversePreOrder=irFunction.getReversePreOrder();
    for (    BasicBlock bb : reversePreOrder) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        inst.liveIn=new HashSet<>();
        inst.liveOut=new HashSet<>();
      }
    }
    Set<VirtualRegister> liveIn=new HashSet<>();
    Set<VirtualRegister> liveOut=new HashSet<>();
    boolean converged=false;
    while (!converged) {
      converged=true;
      for (      BasicBlock bb : reversePreOrder) {
        for (IRInstruction inst=bb.getLastInst(); inst != null; inst=inst.getPrevInst()) {
          liveIn.clear();
          liveOut.clear();
          if (inst instanceof IRJumpInstruction) {
            if (inst instanceof IRJump) {
              liveOut.addAll(((IRJump)inst).getTargetBB().getFirstInst().liveIn);
            }
 else             if (inst instanceof IRBranch) {
              if (((IRBranch)inst).getThenBB().getFirstInst() == null) {
                System.err.println(""String_Node_Str"" + (((IRBranch)inst).getThenBB().getName()));
              }
              liveOut.addAll(((IRBranch)inst).getThenBB().getFirstInst().liveIn);
              liveOut.addAll(((IRBranch)inst).getElseBB().getFirstInst().liveIn);
            }
          }
 else {
            if (inst.getNextInst() != null)             liveOut.addAll(inst.getNextInst().liveIn);
          }
          liveIn.addAll(liveOut);
          IRRegister definedReg=inst.getDefinedRegister();
          if (definedReg instanceof VirtualRegister) {
            liveIn.remove(definedReg);
          }
          for (          IRRegister usedReg : inst.getUsedRegisters()) {
            if (usedReg instanceof VirtualRegister) {
              liveIn.add((VirtualRegister)usedReg);
            }
          }
          if (!inst.liveIn.equals(liveIn)) {
            converged=false;
            inst.liveIn.clear();
            inst.liveIn.addAll(liveIn);
          }
          if (!inst.liveOut.equals(liveOut)) {
            converged=false;
            inst.liveOut.clear();
            inst.liveOut.addAll(liveOut);
          }
        }
      }
    }
  }
}"
79494,"public void addInst(IRInstruction inst){
  if (hasJumpInst) {
    throw new CompilerError(""String_Node_Str"");
  }
  if (lastInst == null) {
    firstInst=lastInst=inst;
  }
 else {
    lastInst.linkNextInst(inst);
    lastInst=inst;
  }
}","public void addInst(IRInstruction inst){
  if (hasJumpInst) {
    throw new CompilerError(""String_Node_Str"");
  }
  if (firstInst == null) {
    firstInst=lastInst=inst;
  }
 else {
    lastInst.linkNextInst(inst);
    lastInst=inst;
  }
}"
79495,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),-i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          if (calleeFunc.isBuiltIn()) {
          }
 else {
            if (args.size() > 0)             inst.prependInst(new IRMove(inst.getParentBB(),rdi,args.get(0)));
            if (args.size() > 1)             inst.prependInst(new IRMove(inst.getParentBB(),rsi,args.get(1)));
            if (args.size() > 2)             inst.prependInst(new IRMove(inst.getParentBB(),rdx,args.get(2)));
            if (args.size() > 3)             inst.prependInst(new IRMove(inst.getParentBB(),rcx,args.get(3)));
            if (args.size() > 4)             inst.prependInst(new IRMove(inst.getParentBB(),r8,args.get(4)));
            if (args.size() > 5)             inst.prependInst(new IRMove(inst.getParentBB(),r9,args.get(5)));
            if (funcInfo.numExtraArgs % 2 == 1) {
              inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
            }
            for (int i=args.size() - 1; i > 5; --i) {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          if (funcInfo.numExtraArgs > 0) {
            int numPushArg=(funcInfo.numExtraArgs % 2 == 0) ? funcInfo.numExtraArgs : funcInfo.numExtraArgs + 1;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPush(inst.getParentBB(),preg));
            }
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if (calleeFunc.isBuiltIn()) {
          }
 else {
            if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
              extraPush=true;
              inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
            }
            for (int i=args.size() - 1; i > 5; --i) {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
            int bakOffset=0;
            for (int i=0; i < 6; ++i) {
              if (args.size() <= i)               break;
              if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
                PhysicalRegister preg=(PhysicalRegister)args.get(i);
                if (arg6BakOffsetMap.containsKey(preg)) {
                  arg6BakOffset.add(arg6BakOffsetMap.get(preg));
                }
 else {
                  arg6BakOffset.add(bakOffset);
                  arg6BakOffsetMap.put(preg,bakOffset);
                  inst.prependInst(new IRPush(inst.getParentBB(),preg));
                  ++bakOffset;
                }
              }
 else {
                arg6BakOffset.add(-1);
              }
            }
            for (int i=0; i < 6; ++i) {
              if (args.size() <= i)               break;
              if (arg6BakOffset.get(i) == -1) {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
 else {
                inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
              }
            }
            if (bakOffset > 0) {
              inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
            }
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79496,"public NASMRegister(String name,boolean isGeneral,boolean isCallerSave,boolean isCalleeSave){
  this.name=name;
  this.isGeneral=isGeneral;
  this.isCallerSave=isCallerSave;
  this.isCalleeSave=isCalleeSave;
}","public NASMRegister(String name,boolean isGeneral,boolean isCallerSave,boolean isCalleeSave,int arg6Idx){
  this.name=name;
  this.isGeneral=isGeneral;
  this.isCallerSave=isCallerSave;
  this.isCalleeSave=isCalleeSave;
  this.arg6Idx=arg6Idx;
}"
79497,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),-i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          if (calleeFunc.isBuiltIn()) {
          }
 else {
            if (args.size() > 0)             inst.prependInst(new IRMove(inst.getParentBB(),rdi,args.get(0)));
            if (args.size() > 1)             inst.prependInst(new IRMove(inst.getParentBB(),rsi,args.get(1)));
            if (args.size() > 2)             inst.prependInst(new IRMove(inst.getParentBB(),rdx,args.get(2)));
            if (args.size() > 3)             inst.prependInst(new IRMove(inst.getParentBB(),rcx,args.get(3)));
            if (args.size() > 4)             inst.prependInst(new IRMove(inst.getParentBB(),r8,args.get(4)));
            if (args.size() > 5)             inst.prependInst(new IRMove(inst.getParentBB(),r9,args.get(5)));
            if (funcInfo.numExtraArgs % 2 == 1) {
              inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
            }
            for (int i=args.size() - 1; i > 5; --i) {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          if (funcInfo.numExtraArgs > 0) {
            int numPushArg=(funcInfo.numExtraArgs % 2 == 0) ? funcInfo.numExtraArgs : funcInfo.numExtraArgs + 1;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPush(inst.getParentBB(),preg));
            }
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPush(inst.getParentBB(),preg));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
      IRReturn retInst=irFunction.getRetInstList().get(0);
      if (retInst.getRetValue() != null) {
        retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
      }
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),-i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          if (calleeFunc.isBuiltIn()) {
          }
 else {
            if (args.size() > 0)             inst.prependInst(new IRMove(inst.getParentBB(),rdi,args.get(0)));
            if (args.size() > 1)             inst.prependInst(new IRMove(inst.getParentBB(),rsi,args.get(1)));
            if (args.size() > 2)             inst.prependInst(new IRMove(inst.getParentBB(),rdx,args.get(2)));
            if (args.size() > 3)             inst.prependInst(new IRMove(inst.getParentBB(),rcx,args.get(3)));
            if (args.size() > 4)             inst.prependInst(new IRMove(inst.getParentBB(),r8,args.get(4)));
            if (args.size() > 5)             inst.prependInst(new IRMove(inst.getParentBB(),r9,args.get(5)));
            if (funcInfo.numExtraArgs % 2 == 1) {
              inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
            }
            for (int i=args.size() - 1; i > 5; --i) {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          if (funcInfo.numExtraArgs > 0) {
            int numPushArg=(funcInfo.numExtraArgs % 2 == 0) ? funcInfo.numExtraArgs : funcInfo.numExtraArgs + 1;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPush(inst.getParentBB(),preg));
            }
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79498,"private void putBuiltInFuncs(){
  putBuiltInFunc(scope,""String_Node_Str"",Collections.singletonList(new VarEntity(""String_Node_Str"",StringType.getInstance())),VoidType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",Collections.singletonList(new VarEntity(""String_Node_Str"",StringType.getInstance())),VoidType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",new ArrayList<>(),StringType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",new ArrayList<>(),IntType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",Collections.singletonList(new VarEntity(""String_Node_Str"",IntType.getInstance())),StringType.getInstance());
  String stringKey=Scope.classKey(Scope.STRING_CLASS_NAME);
  ClassEntity stringEntity=new ClassEntity(""String_Node_Str"",new ClassType(Scope.STRING_CLASS_NAME),scope);
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",new ArrayList<>(),IntType.getInstance());
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",Arrays.asList(new VarEntity(""String_Node_Str"",IntType.getInstance()),new VarEntity(""String_Node_Str"",IntType.getInstance())),StringType.getInstance());
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",new ArrayList<>(),IntType.getInstance());
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",Collections.singletonList(new VarEntity(""String_Node_Str"",IntType.getInstance())),IntType.getInstance());
  scope.putCheck(Scope.STRING_CLASS_NAME,stringKey,stringEntity);
  String arrayKey=Scope.classKey(Scope.ARRAY_CLASS_NAME);
  ClassEntity arrayEntity=new ClassEntity(""String_Node_Str"",new ClassType(Scope.ARRAY_CLASS_NAME),scope);
  putBuiltInFunc(arrayEntity.getScope(),""String_Node_Str"",new ArrayList<>(),IntType.getInstance());
  scope.putCheck(Scope.ARRAY_CLASS_NAME,arrayKey,arrayEntity);
}","private void putBuiltInFuncs(){
  putBuiltInFunc(scope,""String_Node_Str"",Collections.singletonList(new VarEntity(""String_Node_Str"",StringType.getInstance())),VoidType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",Collections.singletonList(new VarEntity(""String_Node_Str"",StringType.getInstance())),VoidType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",new ArrayList<>(),StringType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",new ArrayList<>(),IntType.getInstance());
  putBuiltInFunc(scope,""String_Node_Str"",Collections.singletonList(new VarEntity(""String_Node_Str"",IntType.getInstance())),StringType.getInstance());
  String stringKey=Scope.classKey(Scope.STRING_CLASS_NAME);
  ClassEntity stringEntity=new ClassEntity(Scope.STRING_CLASS_NAME,new ClassType(Scope.STRING_CLASS_NAME),scope);
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",Arrays.asList(new VarEntity(Scope.THIS_PARA_NAME,StringType.getInstance())),IntType.getInstance());
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",Arrays.asList(new VarEntity(Scope.THIS_PARA_NAME,StringType.getInstance()),new VarEntity(""String_Node_Str"",IntType.getInstance()),new VarEntity(""String_Node_Str"",IntType.getInstance())),StringType.getInstance());
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",Arrays.asList(new VarEntity(Scope.THIS_PARA_NAME,StringType.getInstance())),IntType.getInstance());
  putBuiltInFunc(stringEntity.getScope(),""String_Node_Str"",Arrays.asList(new VarEntity(Scope.THIS_PARA_NAME,StringType.getInstance()),new VarEntity(""String_Node_Str"",IntType.getInstance())),IntType.getInstance());
  scope.putCheck(Scope.STRING_CLASS_NAME,stringKey,stringEntity);
  String arrayKey=Scope.classKey(Scope.ARRAY_CLASS_NAME);
  ClassEntity arrayEntity=new ClassEntity(Scope.ARRAY_CLASS_NAME,new ClassType(Scope.ARRAY_CLASS_NAME),scope);
  putBuiltInFunc(arrayEntity.getScope(),""String_Node_Str"",Arrays.asList(new VarEntity(Scope.THIS_PARA_NAME,new ArrayType(null))),IntType.getInstance());
  scope.putCheck(Scope.ARRAY_CLASS_NAME,arrayKey,arrayEntity);
}"
79499,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.usedCalleeSaveRegs.add(rbx);
    funcInfo.usedCalleeSaveRegs.add(rbp);
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset+=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + calleeInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (calleeInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? calleeInfo.numExtraArgs + 1 : calleeInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.usedCalleeSaveRegs.add(rbx);
    funcInfo.usedCalleeSaveRegs.add(rbp);
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset+=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + calleeInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rbp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rbp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rbp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (calleeInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? calleeInfo.numExtraArgs + 1 : calleeInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79500,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    irFunction.setRecursiveCall(irFunction.calleeSet.contains(irFunction));
    FuncInfo funcInfo=new FuncInfo();
    funcInfo.recursiveCall=irFunction.isRecursiveCall();
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        ++funcInfo.numInst;
        if (inst instanceof IRFunctionCall) {
          FuncInfo calleeInfo=funcInfoMap.get(((IRFunctionCall)inst).getFunc());
          if (calleeInfo != null) {
            ++calleeInfo.numCalled;
          }
        }
      }
    }
  }
  List<BasicBlock> reversePostOrder=new ArrayList<>();
  List<String> unCalledFuncs=new ArrayList<>();
  boolean changed=true, thisFuncChanged;
  while (changed) {
    changed=false;
    unCalledFuncs.clear();
    for (    IRFunction irFunction : ir.getFuncs().values()) {
      FuncInfo funcInfo=funcInfoMap.get(irFunction);
      reversePostOrder.clear();
      reversePostOrder.addAll(irFunction.getReversePostOrder());
      thisFuncChanged=false;
      for (      BasicBlock bb : reversePostOrder) {
        for (IRInstruction inst=bb.getFirstInst(), nextInst; inst != null; inst=nextInst) {
          nextInst=inst.getNextInst();
          if (!(inst instanceof IRFunctionCall))           continue;
          FuncInfo calleeInfo=funcInfoMap.get(((IRFunctionCall)inst).getFunc());
          if (calleeInfo == null)           continue;
          if (calleeInfo.recursiveCall)           continue;
          if (calleeInfo.numInst > MAX_INLINE_INST || calleeInfo.numInst + funcInfo.numInst > MAX_FUNC_INST)           continue;
          nextInst=inlineFunctionCall((IRFunctionCall)inst);
          funcInfo.numInst+=calleeInfo.numInst;
          changed=true;
          thisFuncChanged=true;
          --calleeInfo.numCalled;
          if (calleeInfo.numCalled == 0) {
            unCalledFuncs.add(((IRFunctionCall)inst).getFunc().getName());
          }
        }
      }
      if (thisFuncChanged) {
        irFunction.calcReversePostOrder();
      }
    }
    for (    String funcName : unCalledFuncs) {
      ir.removeFunc(funcName);
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    irFunction.updateCalleeSet();
  }
  ir.updateCalleeSet();
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    irFunction.setRecursiveCall(irFunction.recursiveCalleeSet.contains(irFunction));
    FuncInfo funcInfo=new FuncInfo();
    funcInfo.recursiveCall=irFunction.isRecursiveCall();
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        ++funcInfo.numInst;
        if (inst instanceof IRFunctionCall) {
          FuncInfo calleeInfo=funcInfoMap.get(((IRFunctionCall)inst).getFunc());
          if (calleeInfo != null) {
            ++calleeInfo.numCalled;
          }
        }
      }
    }
  }
  List<BasicBlock> reversePostOrder=new ArrayList<>();
  List<String> unCalledFuncs=new ArrayList<>();
  boolean changed=true, thisFuncChanged;
  while (changed) {
    changed=false;
    unCalledFuncs.clear();
    for (    IRFunction irFunction : ir.getFuncs().values()) {
      FuncInfo funcInfo=funcInfoMap.get(irFunction);
      reversePostOrder.clear();
      reversePostOrder.addAll(irFunction.getReversePostOrder());
      thisFuncChanged=false;
      for (      BasicBlock bb : reversePostOrder) {
        for (IRInstruction inst=bb.getFirstInst(), nextInst; inst != null; inst=nextInst) {
          nextInst=inst.getNextInst();
          if (!(inst instanceof IRFunctionCall))           continue;
          FuncInfo calleeInfo=funcInfoMap.get(((IRFunctionCall)inst).getFunc());
          if (calleeInfo == null)           continue;
          if (calleeInfo.recursiveCall)           continue;
          if (calleeInfo.numInst > MAX_INLINE_INST || calleeInfo.numInst + funcInfo.numInst > MAX_FUNC_INST)           continue;
          nextInst=inlineFunctionCall((IRFunctionCall)inst);
          funcInfo.numInst+=calleeInfo.numInst;
          changed=true;
          thisFuncChanged=true;
          --calleeInfo.numCalled;
          if (calleeInfo.numCalled == 0) {
            unCalledFuncs.add(((IRFunctionCall)inst).getFunc().getName());
          }
        }
      }
      if (thisFuncChanged) {
        irFunction.calcReversePostOrder();
      }
    }
    for (    String funcName : unCalledFuncs) {
      ir.removeFunc(funcName);
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    irFunction.updateCalleeSet();
  }
  ir.updateCalleeSet();
}"
79501,"private void processCmpBinaryOp(BinaryExprNode node){
  if (node.getLhs().getType() instanceof StringType) {
    processStringBinaryOp(node);
    return;
  }
  node.getLhs().accept(this);
  node.getRhs().accept(this);
  RegValue lhs=node.getLhs().getRegValue(), rhs=node.getRhs().getRegValue(), tmp;
  boolean bothConst=lhs instanceof IntImmediate && rhs instanceof IntImmediate;
  int lhsImm=0, rhsImm=0;
  if (lhs instanceof IntImmediate)   lhsImm=((IntImmediate)lhs).getValue();
  if (rhs instanceof IntImmediate)   rhsImm=((IntImmediate)rhs).getValue();
  IRComparison.IRCmpOp op;
switch (node.getOp()) {
case GREATER:
    op=IRComparison.IRCmpOp.GREATER;
  if (bothConst) {
    if (lhsImm > rhsImm)     node.setRegValue(new IntImmediate(1));
 else     node.setRegValue(new IntImmediate(0));
    return;
  }
break;
case LESS:
op=IRComparison.IRCmpOp.LESS;
if (bothConst) {
if (lhsImm < rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
break;
case GREATER_EQUAL:
op=IRComparison.IRCmpOp.GREATER_EQUAL;
if (bothConst) {
if (lhsImm >= rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
break;
case LESS_EQUAL:
op=IRComparison.IRCmpOp.LESS_EQUAL;
if (bothConst) {
if (lhsImm <= rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
break;
case EQUAL:
op=IRComparison.IRCmpOp.EQUAL;
if (bothConst) {
if (lhsImm == rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
break;
case INEQUAL:
op=IRComparison.IRCmpOp.INEQUAL;
if (bothConst) {
if (lhsImm != rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
break;
default :
throw new CompilerError(""String_Node_Str"");
}
VirtualRegister vreg=new VirtualRegister(null);
currentBB.addInst(new IRComparison(currentBB,vreg,op,lhs,rhs));
if (node.getTrueBB() != null) {
currentBB.setJumpInst(new IRBranch(currentBB,vreg,node.getTrueBB(),node.getFalseBB()));
}
 else {
node.setRegValue(vreg);
}
}","private void processCmpBinaryOp(BinaryExprNode node){
  if (node.getLhs().getType() instanceof StringType) {
    processStringBinaryOp(node);
    return;
  }
  node.getLhs().accept(this);
  node.getRhs().accept(this);
  RegValue lhs=node.getLhs().getRegValue(), rhs=node.getRhs().getRegValue(), tmp;
  boolean bothConst=lhs instanceof IntImmediate && rhs instanceof IntImmediate;
  int lhsImm=0, rhsImm=0;
  if (lhs instanceof IntImmediate)   lhsImm=((IntImmediate)lhs).getValue();
  if (rhs instanceof IntImmediate)   rhsImm=((IntImmediate)rhs).getValue();
  IRComparison.IRCmpOp op;
switch (node.getOp()) {
case GREATER:
    op=IRComparison.IRCmpOp.GREATER;
  if (bothConst) {
    if (lhsImm > rhsImm)     node.setRegValue(new IntImmediate(1));
 else     node.setRegValue(new IntImmediate(0));
    return;
  }
if (lhs instanceof IntImmediate) {
  tmp=rhs;
  rhs=lhs;
  lhs=tmp;
  op=IRComparison.IRCmpOp.LESS;
}
break;
case LESS:
op=IRComparison.IRCmpOp.LESS;
if (bothConst) {
if (lhsImm < rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
if (lhs instanceof IntImmediate) {
tmp=rhs;
rhs=lhs;
lhs=tmp;
op=IRComparison.IRCmpOp.GREATER;
}
break;
case GREATER_EQUAL:
op=IRComparison.IRCmpOp.GREATER_EQUAL;
if (bothConst) {
if (lhsImm >= rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
if (lhs instanceof IntImmediate) {
tmp=rhs;
rhs=lhs;
lhs=tmp;
op=IRComparison.IRCmpOp.LESS_EQUAL;
}
break;
case LESS_EQUAL:
op=IRComparison.IRCmpOp.LESS_EQUAL;
if (bothConst) {
if (lhsImm <= rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
if (lhs instanceof IntImmediate) {
tmp=rhs;
rhs=lhs;
lhs=tmp;
op=IRComparison.IRCmpOp.GREATER_EQUAL;
}
break;
case EQUAL:
op=IRComparison.IRCmpOp.EQUAL;
if (bothConst) {
if (lhsImm == rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
if (lhs instanceof IntImmediate) {
tmp=rhs;
rhs=lhs;
lhs=tmp;
}
break;
case INEQUAL:
op=IRComparison.IRCmpOp.INEQUAL;
if (bothConst) {
if (lhsImm != rhsImm) node.setRegValue(new IntImmediate(1));
 else node.setRegValue(new IntImmediate(0));
return;
}
if (lhs instanceof IntImmediate) {
tmp=rhs;
rhs=lhs;
lhs=tmp;
}
break;
default :
throw new CompilerError(""String_Node_Str"");
}
VirtualRegister vreg=new VirtualRegister(null);
currentBB.addInst(new IRComparison(currentBB,vreg,op,lhs,rhs));
if (node.getTrueBB() != null) {
currentBB.setJumpInst(new IRBranch(currentBB,vreg,node.getTrueBB(),node.getFalseBB()));
}
 else {
node.setRegValue(vreg);
}
}"
79502,"public static void main(String[] args) throws Exception {
  String inFile=null, astOutFile=null, irOutFile=null, nasmOutFile=null;
  boolean isPrintHelp=false, isPrintVersion=false, isPrintConfig=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
switch (arg) {
case ""String_Node_Str"":
case ""String_Node_Str"":
      isPrintHelp=true;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  isPrintVersion=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
isPrintConfig=true;
break;
case ""String_Node_Str"":
if (i + 1 < args.length) nasmOutFile=args[++i];
 else errorArgs();
break;
default :
if (inFile == null) inFile=arg;
 else errorArgs();
}
}
if (isPrintVersion) printVersion();
if (isPrintHelp) printHelp();
if (isPrintConfig) printConfig();
irOutFile=""String_Node_Str"";
InputStream inS;
PrintStream astOutS, irOutS, nasmOutS;
if (inFile == null) inS=System.in;
 else inS=new FileInputStream(inFile);
if (astOutFile == null) astOutS=null;
 else astOutS=new PrintStream(new FileOutputStream(astOutFile));
if (irOutFile == null) irOutS=null;
 else irOutS=new PrintStream(new FileOutputStream(irOutFile));
if (nasmOutFile == null) nasmOutS=System.out;
 else nasmOutS=new PrintStream(new FileOutputStream(nasmOutFile));
Compiler compiler=new Compiler(inS,astOutS,irOutS,nasmOutS);
try {
compiler.compile();
}
 catch (Error e) {
System.err.println(e.getMessage());
System.exit(1);
}
LLIRInterpreter leLeIRInterpreter=new LLIRInterpreter(new FileInputStream(irOutFile),false);
leLeIRInterpreter.run();
System.out.println(""String_Node_Str"" + leLeIRInterpreter.getExitcode());
}","public static void main(String[] args) throws Exception {
  String inFile=null, astOutFile=null, irOutFile=null, nasmOutFile=null;
  boolean isPrintHelp=false, isPrintVersion=false, isPrintConfig=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
switch (arg) {
case ""String_Node_Str"":
case ""String_Node_Str"":
      isPrintHelp=true;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  isPrintVersion=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
isPrintConfig=true;
break;
case ""String_Node_Str"":
if (i + 1 < args.length) nasmOutFile=args[++i];
 else errorArgs();
break;
default :
if (inFile == null) inFile=arg;
 else errorArgs();
}
}
if (isPrintVersion) printVersion();
if (isPrintHelp) printHelp();
if (isPrintConfig) printConfig();
InputStream inS;
PrintStream astOutS, irOutS, nasmOutS;
if (inFile == null) inS=System.in;
 else inS=new FileInputStream(inFile);
if (astOutFile == null) astOutS=null;
 else astOutS=new PrintStream(new FileOutputStream(astOutFile));
if (irOutFile == null) irOutS=null;
 else irOutS=new PrintStream(new FileOutputStream(irOutFile));
if (nasmOutFile == null) nasmOutS=System.out;
 else nasmOutS=new PrintStream(new FileOutputStream(nasmOutFile));
Compiler compiler=new Compiler(inS,astOutS,irOutS,nasmOutS);
try {
compiler.compile();
}
 catch (Error e) {
System.err.println(e.getMessage());
System.exit(1);
}
}"
79503,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),-i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          if (calleeFunc.isBuiltIn()) {
          }
 else {
            if (args.size() > 0)             inst.prependInst(new IRMove(inst.getParentBB(),rdi,args.get(0)));
            if (args.size() > 1)             inst.prependInst(new IRMove(inst.getParentBB(),rsi,args.get(1)));
            if (args.size() > 2)             inst.prependInst(new IRMove(inst.getParentBB(),rdx,args.get(2)));
            if (args.size() > 3)             inst.prependInst(new IRMove(inst.getParentBB(),rcx,args.get(3)));
            if (args.size() > 4)             inst.prependInst(new IRMove(inst.getParentBB(),r8,args.get(4)));
            if (args.size() > 5)             inst.prependInst(new IRMove(inst.getParentBB(),r9,args.get(5)));
            for (int i=args.size() - 1; i > 5; --i) {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
            if (args.size() > 6 && (args.size() - 6) % 2 == 1) {
              inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
            }
          }
          if (funcInfo.numExtraArgs > 0) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numExtraArgs * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPush(inst.getParentBB(),preg));
            }
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPush(inst.getParentBB(),preg));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
      IRReturn retInst=irFunction.getRetInstList().get(0);
      if (retInst.getRetValue() != null) {
        retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
      }
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),-i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          if (calleeFunc.isBuiltIn()) {
          }
 else {
            if (args.size() > 0)             inst.prependInst(new IRMove(inst.getParentBB(),rdi,args.get(0)));
            if (args.size() > 1)             inst.prependInst(new IRMove(inst.getParentBB(),rsi,args.get(1)));
            if (args.size() > 2)             inst.prependInst(new IRMove(inst.getParentBB(),rdx,args.get(2)));
            if (args.size() > 3)             inst.prependInst(new IRMove(inst.getParentBB(),rcx,args.get(3)));
            if (args.size() > 4)             inst.prependInst(new IRMove(inst.getParentBB(),r8,args.get(4)));
            if (args.size() > 5)             inst.prependInst(new IRMove(inst.getParentBB(),r9,args.get(5)));
            if (funcInfo.numExtraArgs % 2 == 1) {
              inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
            }
            for (int i=args.size() - 1; i > 5; --i) {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          if (funcInfo.numExtraArgs > 0) {
            int numPushArg=(funcInfo.numExtraArgs % 2 == 0) ? funcInfo.numExtraArgs : funcInfo.numExtraArgs + 1;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPush(inst.getParentBB(),preg));
            }
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPush(inst.getParentBB(),preg));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
      IRReturn retInst=irFunction.getRetInstList().get(0);
      if (retInst.getRetValue() != null) {
        retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
      }
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79504,"private void processBuiltInFuncCall(FuncCallExprNode node,ExprNode thisExpr,FuncEntity funcEntity,String funcName){
  boolean wantAddrBak=wantAddr;
  wantAddr=false;
  ExprNode arg0, arg1;
  VirtualRegister vreg;
  IRFunction calleeFunc;
  List<RegValue> vArgs=new ArrayList<>();
  if (thisExpr != null) {
    thisExpr.accept(this);
  }
switch (funcName) {
case IRRoot.BUILTIN_PRINT_FUNC_NAME:
case IRRoot.BUILTIN_PRINTLN_FUNC_NAME:
    arg0=node.getArgs().get(0);
  processPrintFuncCall(arg0,funcName);
break;
case IRRoot.BUILTIN_GET_STRING_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_GET_STRING_FUNC_NAME);
vArgs.clear();
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_GET_INT_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_GET_INT_FUNC_NAME);
vArgs.clear();
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_TO_STRING_FUNC_NAME:
arg0=node.getArgs().get(0);
arg0.accept(this);
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_TO_STRING_FUNC_NAME);
vArgs.clear();
vArgs.add(arg0.getRegValue());
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_SUBSTRING_FUNC_NAME:
arg0=node.getArgs().get(0);
arg0.accept(this);
arg1=node.getArgs().get(1);
arg1.accept(this);
vreg=new VirtualRegister(""String_Node_Str"");
vArgs.clear();
vArgs.add(thisExpr.getRegValue());
vArgs.add(arg0.getRegValue());
vArgs.add(arg1.getRegValue());
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_STRING_SUBSTRING_FUNC_NAME);
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_PARSEINT_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_STRING_PARSEINT_FUNC_NAME);
vArgs.clear();
vArgs.add(thisExpr.getRegValue());
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_ORD_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_STRING_ORD_FUNC_NAME);
vArgs.clear();
vArgs.add(thisExpr.getRegValue());
arg0=node.getArgs().get(0);
arg0.accept(this);
vArgs.add(arg0.getRegValue());
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_LENGTH_FUNC_NAME:
case IRRoot.BUILTIN_ARRAY_SIZE_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
currentBB.addInst(new IRLoad(currentBB,vreg,Configuration.getRegSize(),thisExpr.getRegValue(),0));
node.setRegValue(vreg);
break;
default :
throw new CompilerError(""String_Node_Str"");
}
wantAddr=wantAddrBak;
}","private void processBuiltInFuncCall(FuncCallExprNode node,ExprNode thisExpr,FuncEntity funcEntity,String funcName){
  boolean wantAddrBak=wantAddr;
  wantAddr=false;
  ExprNode arg0, arg1;
  VirtualRegister vreg;
  IRFunction calleeFunc;
  List<RegValue> vArgs=new ArrayList<>();
switch (funcName) {
case IRRoot.BUILTIN_PRINT_FUNC_NAME:
case IRRoot.BUILTIN_PRINTLN_FUNC_NAME:
    arg0=node.getArgs().get(0);
  processPrintFuncCall(arg0,funcName);
break;
case IRRoot.BUILTIN_GET_STRING_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_GET_STRING_FUNC_NAME);
vArgs.clear();
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_GET_INT_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_GET_INT_FUNC_NAME);
vArgs.clear();
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_TO_STRING_FUNC_NAME:
arg0=node.getArgs().get(0);
arg0.accept(this);
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_TO_STRING_FUNC_NAME);
vArgs.clear();
vArgs.add(arg0.getRegValue());
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_SUBSTRING_FUNC_NAME:
arg0=node.getArgs().get(0);
arg0.accept(this);
arg1=node.getArgs().get(1);
arg1.accept(this);
vreg=new VirtualRegister(""String_Node_Str"");
vArgs.clear();
vArgs.add(thisExpr.getRegValue());
vArgs.add(arg0.getRegValue());
vArgs.add(arg1.getRegValue());
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_STRING_SUBSTRING_FUNC_NAME);
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_PARSEINT_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_STRING_PARSEINT_FUNC_NAME);
vArgs.clear();
vArgs.add(thisExpr.getRegValue());
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_ORD_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
calleeFunc=ir.getBuiltInFunc(IRRoot.BUILTIN_STRING_ORD_FUNC_NAME);
vArgs.clear();
vArgs.add(thisExpr.getRegValue());
arg0=node.getArgs().get(0);
arg0.accept(this);
vArgs.add(arg0.getRegValue());
currentBB.addInst(new IRFunctionCall(currentBB,calleeFunc,vArgs,vreg));
node.setRegValue(vreg);
break;
case IRRoot.BUILTIN_STRING_LENGTH_FUNC_NAME:
case IRRoot.BUILTIN_ARRAY_SIZE_FUNC_NAME:
vreg=new VirtualRegister(""String_Node_Str"");
currentBB.addInst(new IRLoad(currentBB,vreg,Configuration.getRegSize(),thisExpr.getRegValue(),0));
node.setRegValue(vreg);
break;
default :
throw new CompilerError(""String_Node_Str"");
}
wantAddr=wantAddrBak;
}"
79505,"private String sizeStr(int memSize){
  String sizeStr;
switch (memSize) {
case 1:
    sizeStr=""String_Node_Str"";
  break;
case 2:
sizeStr=""String_Node_Str"";
break;
case 4:
sizeStr=""String_Node_Str"";
break;
case 8:
sizeStr=""String_Node_Str"";
break;
default :
throw new CompilerError(""String_Node_Str"");
}
return sizeStr;
}","private String sizeStr(int memSize){
  String sizeStr;
switch (memSize) {
case 1:
    sizeStr=""String_Node_Str"";
  break;
case 2:
sizeStr=""String_Node_Str"";
break;
case 4:
sizeStr=""String_Node_Str"";
break;
case 8:
sizeStr=""String_Node_Str"";
break;
default :
throw new CompilerError(""String_Node_Str"" + memSize);
}
return sizeStr;
}"
79506,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.usedCalleeSaveRegs.add(rbx);
    funcInfo.usedCalleeSaveRegs.add(rbp);
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset+=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + calleeInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rbp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rbp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rbp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (calleeInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? calleeInfo.numExtraArgs + 1 : calleeInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.usedCalleeSaveRegs.add(rbx);
    funcInfo.usedCalleeSaveRegs.add(rbp);
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset+=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (preg.isArg6() && preg.getArg6Idx() < irFunction.getArgVRegList().size())             continue;
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + calleeInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rbp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rbp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (preg.isArg6() && preg.getArg6Idx() < irFunction.getArgVRegList().size())             continue;
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (calleeInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? calleeInfo.numExtraArgs + 1 : calleeInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79507,"public void compile() throws Exception {
  buildAST();
  if (astOutS != null)   new ASTPrinter(astOutS).visit(ast);
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  IRBuilder irBuilder=new IRBuilder(functionScopeScanner.getGlobalScope());
  irBuilder.visit(ast);
  IRRoot ir=irBuilder.getIR();
  new TwoRegOpTransformer(ir).run();
  if (Configuration.isEnableFunctionInline())   new FunctionInlineProcessor(ir).run();
  if (irOutS != null)   new IRPrinter(irOutS).visit(ir);
  new StaticDataProcessor(ir).run();
  new RegisterPreprocessor(ir).run();
  new RegLivelinessAnalysis(ir).run();
  new RegisterAllocator(ir,NASMRegisterSet.generalRegs).run();
  new NASMTransformer(ir).run();
  new NASMPrinter(nasmOutS).visit(ir);
}","public void compile() throws Exception {
  buildAST();
  if (astOutS != null)   new ASTPrinter(astOutS).visit(ast);
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  IRBuilder irBuilder=new IRBuilder(functionScopeScanner.getGlobalScope());
  irBuilder.visit(ast);
  IRRoot ir=irBuilder.getIR();
  System.err.println(""String_Node_Str"");
  new TwoRegOpTransformer(ir).run();
  System.err.println(""String_Node_Str"");
  if (Configuration.isEnableFunctionInline())   new FunctionInlineProcessor(ir).run();
  if (irOutS != null)   new IRPrinter(irOutS).visit(ir);
  new StaticDataProcessor(ir).run();
  System.err.println(""String_Node_Str"");
  new RegisterPreprocessor(ir).run();
  System.err.println(""String_Node_Str"");
  new RegLivelinessAnalysis(ir).run();
  System.err.println(""String_Node_Str"");
  new RegisterAllocator(ir,NASMRegisterSet.generalRegs).run();
  System.err.println(""String_Node_Str"");
  new NASMTransformer(ir).run();
  System.err.println(""String_Node_Str"");
  new NASMPrinter(nasmOutS).visit(ir);
}"
79508,"private void processIRAssign(RegValue dest,int addrOffset,ExprNode rhs,int size,boolean needMemOp){
  if (rhs.getTrueBB() != null) {
    BasicBlock mergeBB=new BasicBlock(currentFunc,null);
    if (needMemOp) {
      rhs.getTrueBB().addInst(new IRStore(rhs.getTrueBB(),new IntImmediate(1),BoolType.getInstance().getVarSize(),dest,addrOffset));
      rhs.getFalseBB().addInst(new IRStore(rhs.getFalseBB(),new IntImmediate(0),BoolType.getInstance().getVarSize(),dest,addrOffset));
    }
 else {
      rhs.getTrueBB().addInst(new IRMove(rhs.getTrueBB(),(VirtualRegister)dest,new IntImmediate(1)));
      rhs.getFalseBB().addInst(new IRMove(rhs.getFalseBB(),(VirtualRegister)dest,new IntImmediate(0)));
    }
    if (!rhs.getTrueBB().isHasJumpInst())     rhs.getTrueBB().setJumpInst(new IRJump(rhs.getTrueBB(),mergeBB));
    if (!rhs.getFalseBB().isHasJumpInst())     rhs.getFalseBB().setJumpInst(new IRJump(rhs.getFalseBB(),mergeBB));
    currentBB=mergeBB;
  }
 else {
    if (needMemOp) {
      currentBB.addInst(new IRStore(currentBB,rhs.getRegValue(),rhs.getType().getVarSize(),dest,addrOffset));
    }
 else {
      currentBB.addInst(new IRMove(currentBB,(IRRegister)dest,rhs.getRegValue()));
    }
  }
}","private void processIRAssign(RegValue dest,int addrOffset,ExprNode rhs,int size,boolean needMemOp){
  if (rhs.getTrueBB() != null) {
    BasicBlock mergeBB=new BasicBlock(currentFunc,null);
    if (needMemOp) {
      rhs.getTrueBB().addInst(new IRStore(rhs.getTrueBB(),new IntImmediate(1),Configuration.getRegSize(),dest,addrOffset));
      rhs.getFalseBB().addInst(new IRStore(rhs.getFalseBB(),new IntImmediate(0),Configuration.getRegSize(),dest,addrOffset));
    }
 else {
      rhs.getTrueBB().addInst(new IRMove(rhs.getTrueBB(),(VirtualRegister)dest,new IntImmediate(1)));
      rhs.getFalseBB().addInst(new IRMove(rhs.getFalseBB(),(VirtualRegister)dest,new IntImmediate(0)));
    }
    if (!rhs.getTrueBB().isHasJumpInst())     rhs.getTrueBB().setJumpInst(new IRJump(rhs.getTrueBB(),mergeBB));
    if (!rhs.getFalseBB().isHasJumpInst())     rhs.getFalseBB().setJumpInst(new IRJump(rhs.getFalseBB(),mergeBB));
    currentBB=mergeBB;
  }
 else {
    if (needMemOp) {
      currentBB.addInst(new IRStore(currentBB,rhs.getRegValue(),Configuration.getRegSize(),dest,addrOffset));
    }
 else {
      currentBB.addInst(new IRMove(currentBB,(IRRegister)dest,rhs.getRegValue()));
    }
  }
}"
79509,"private void processSelfIncDec(ExprNode expr,ExprNode node,boolean isSuffix,boolean isInc){
  boolean needMemOp=isMemoryAccess(expr);
  boolean bakWantAddr=wantAddr;
  wantAddr=false;
  expr.accept(this);
  if (isSuffix) {
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRMove(currentBB,vreg,expr.getRegValue()));
    node.setRegValue(vreg);
  }
 else {
    node.setRegValue(expr.getRegValue());
  }
  IntImmediate one=new IntImmediate(1);
  IRBinaryOperation.IRBinaryOp op=isInc ? IRBinaryOperation.IRBinaryOp.ADD : IRBinaryOperation.IRBinaryOp.SUB;
  if (needMemOp) {
    wantAddr=true;
    expr.accept(this);
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRBinaryOperation(currentBB,vreg,op,expr.getRegValue(),one));
    currentBB.addInst(new IRStore(currentBB,vreg,expr.getType().getVarSize(),expr.getAddrValue(),expr.getAddrOffset()));
    if (!isSuffix) {
      expr.setRegValue(vreg);
    }
  }
 else {
    currentBB.addInst(new IRBinaryOperation(currentBB,(IRRegister)expr.getRegValue(),op,expr.getRegValue(),one));
  }
  wantAddr=bakWantAddr;
}","private void processSelfIncDec(ExprNode expr,ExprNode node,boolean isSuffix,boolean isInc){
  boolean needMemOp=isMemoryAccess(expr);
  boolean bakWantAddr=wantAddr;
  wantAddr=false;
  expr.accept(this);
  if (isSuffix) {
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRMove(currentBB,vreg,expr.getRegValue()));
    node.setRegValue(vreg);
  }
 else {
    node.setRegValue(expr.getRegValue());
  }
  IntImmediate one=new IntImmediate(1);
  IRBinaryOperation.IRBinaryOp op=isInc ? IRBinaryOperation.IRBinaryOp.ADD : IRBinaryOperation.IRBinaryOp.SUB;
  if (needMemOp) {
    wantAddr=true;
    expr.accept(this);
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRBinaryOperation(currentBB,vreg,op,expr.getRegValue(),one));
    currentBB.addInst(new IRStore(currentBB,vreg,Configuration.getRegSize(),expr.getAddrValue(),expr.getAddrOffset()));
    if (!isSuffix) {
      expr.setRegValue(vreg);
    }
  }
 else {
    currentBB.addInst(new IRBinaryOperation(currentBB,(IRRegister)expr.getRegValue(),op,expr.getRegValue(),one));
  }
  wantAddr=bakWantAddr;
}"
79510,"public IRLoad(BasicBlock parentBB,IRRegister dest,int size,StaticData addr,boolean isLoadAddr){
  this(parentBB,dest,size,addr,0);
  this.isStaticData=true;
  this.isLoadAddr=isLoadAddr;
}","public IRLoad(BasicBlock parentBB,IRRegister dest,int size,StaticData addr,boolean isLoadAddr){
  this(parentBB,dest,size,addr,0);
  if (size == 0)   System.err.println(""String_Node_Str"");
  this.isStaticData=true;
  this.isLoadAddr=isLoadAddr;
}"
79511,"public IRStore(BasicBlock parentBB,RegValue value,int size,StaticData addr){
  this(parentBB,value,size,addr,0);
  this.isStaticData=true;
}","public IRStore(BasicBlock parentBB,RegValue value,int size,StaticData addr){
  this(parentBB,value,size,addr,0);
  if (size == 0)   System.err.println(""String_Node_Str"");
  this.isStaticData=true;
}"
79512,"private void processFuncArgs(IRFunction func){
  Map<IRRegister,IRRegister> argsMap=new HashMap<>();
  IRInstruction firtInst=func.getStartBB().getFirstInst();
  for (int i=0; i < func.getArgVRegList().size(); ++i) {
    VirtualRegister argVreg=func.getArgVRegList().get(i);
    StackSlot argSlot=new StackSlot(func,""String_Node_Str"" + i);
    func.getArgsStackSlotMap().put(argVreg,argSlot);
    if (i > 5)     firtInst.prependInst(new IRLoad(firtInst.getParentBB(),argVreg,Configuration.getRegSize(),argSlot,0));
  }
  if (func.getArgVRegList().size() > 0)   func.getArgVRegList().get(0).setForcedPhysicalRegister();
}","private void processFuncArgs(IRFunction func){
  IRInstruction firtInst=func.getStartBB().getFirstInst();
  for (int i=0; i < func.getArgVRegList().size(); ++i) {
    VirtualRegister argVreg=func.getArgVRegList().get(i);
    StackSlot argSlot=new StackSlot(func,""String_Node_Str"" + i);
    func.getArgsStackSlotMap().put(argVreg,argSlot);
    if (i > 5)     firtInst.prependInst(new IRLoad(firtInst.getParentBB(),argVreg,Configuration.getRegSize(),argSlot,0));
  }
  if (func.getArgVRegList().size() > 0)   func.getArgVRegList().get(0).setForcedPhysicalRegister(NASMRegisterSet.rdi);
  if (func.getArgVRegList().size() > 1)   func.getArgVRegList().get(1).setForcedPhysicalRegister(NASMRegisterSet.rsi);
  if (func.getArgVRegList().size() > 2)   func.getArgVRegList().get(2).setForcedPhysicalRegister(NASMRegisterSet.rdx);
  if (func.getArgVRegList().size() > 3)   func.getArgVRegList().get(3).setForcedPhysicalRegister(NASMRegisterSet.rcx);
  if (func.getArgVRegList().size() > 4)   func.getArgVRegList().get(4).setForcedPhysicalRegister(NASMRegisterSet.r8);
  if (func.getArgVRegList().size() > 5)   func.getArgVRegList().get(5).setForcedPhysicalRegister(NASMRegisterSet.r9);
}"
79513,"public void compile() throws Exception {
  System.out.println(""String_Node_Str"");
  buildAST();
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  IRBuilder irBuilder=new IRBuilder(functionScopeScanner.getGlobalScope());
  irBuilder.visit(ast);
  IRRoot ir=irBuilder.getIR();
  new TwoRegOpTransformer(ir).run();
  if (Configuration.isEnableFunctionInline()) {
    new FunctionInlineProcessor(ir).run();
  }
  new IRPrinter(outS).visit(ir);
  System.out.println(""String_Node_Str"");
  new StaticDataProcessor(ir).run();
  new RegLivelinessAnalysis(ir).run();
  new RegisterPreprocessor(ir).run();
  new RegisterAllocator(ir,NASMRegisterSet.generalRegs).run();
}","public void compile() throws Exception {
  System.out.println(""String_Node_Str"");
  buildAST();
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  IRBuilder irBuilder=new IRBuilder(functionScopeScanner.getGlobalScope());
  irBuilder.visit(ast);
  IRRoot ir=irBuilder.getIR();
  new TwoRegOpTransformer(ir).run();
  if (Configuration.isEnableFunctionInline()) {
    new FunctionInlineProcessor(ir).run();
  }
  new IRPrinter(outS).visit(ir);
  System.out.println(""String_Node_Str"");
  new StaticDataProcessor(ir).run();
  new RegLivelinessAnalysis(ir).run();
  new RegisterPreprocessor(ir).run();
}"
79514,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.usedCalleeSaveRegs.add(rbx);
    funcInfo.usedCalleeSaveRegs.add(rbp);
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    firstInst.prependInst(new IRMove(entryBB,rbp,rsp));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rbp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79515,"public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}","public void run(){
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=new FuncInfo();
    for (    PhysicalRegister preg : irFunction.getUsedPhysicalGeneralRegs()) {
      if (preg.isCalleeSave())       funcInfo.usedCalleeSaveRegs.add(preg);
      if (preg.isCallerSave())       funcInfo.usedCallerSaveRegs.add(preg);
    }
    funcInfo.numStackSlot=irFunction.getStackSlots().size();
    for (int i=0; i < funcInfo.numStackSlot; ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getStackSlots().get(i),i * Configuration.getRegSize());
    }
    if ((funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot) % 2 == 0) {
      ++funcInfo.numStackSlot;
    }
    funcInfo.numExtraArgs=irFunction.getArgVRegList().size() - 6;
    if (funcInfo.numExtraArgs < 0)     funcInfo.numExtraArgs=0;
    int extraArgOffset=-(funcInfo.usedCalleeSaveRegs.size() + funcInfo.numStackSlot + 1) * Configuration.getRegSize();
    for (int i=6; i < irFunction.getArgVRegList().size(); ++i) {
      funcInfo.stackSlotOffsetMap.put(irFunction.getArgsStackSlotMap().get(irFunction.getArgVRegList().get(i)),extraArgOffset);
      extraArgOffset-=Configuration.getRegSize();
    }
    funcInfoMap.put(irFunction,funcInfo);
  }
  for (  IRFunction builtinFunc : ir.getBuiltInFuncs().values()) {
    funcInfoMap.put(builtinFunc,new FuncInfo());
  }
  for (  IRFunction irFunction : funcInfoMap.keySet()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    funcInfo.recursiveUsedRegs.addAll(irFunction.getUsedPhysicalGeneralRegs());
    for (    IRFunction calleeFunc : irFunction.recursiveCalleeSet) {
      funcInfo.recursiveUsedRegs.addAll(calleeFunc.getUsedPhysicalGeneralRegs());
    }
  }
  for (  IRFunction irFunction : ir.getFuncs().values()) {
    FuncInfo funcInfo=funcInfoMap.get(irFunction);
    BasicBlock entryBB=irFunction.getStartBB();
    IRInstruction firstInst=entryBB.getFirstInst();
    for (    PhysicalRegister preg : funcInfo.usedCalleeSaveRegs) {
      firstInst.prependInst(new IRPush(entryBB,preg));
    }
    if (funcInfo.numStackSlot > 0)     firstInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.SUB,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (    BasicBlock bb : irFunction.getReversePostOrder()) {
      for (IRInstruction inst=bb.getFirstInst(); inst != null; inst=inst.getNextInst()) {
        if (inst instanceof IRFunctionCall) {
          IRFunction calleeFunc=((IRFunctionCall)inst).getFunc();
          FuncInfo calleeInfo=funcInfoMap.get(calleeFunc);
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              ++numPushCallerSave;
              inst.prependInst(new IRPush(inst.getParentBB(),preg));
            }
          }
          int numPushArg6Regs=irFunction.getArgVRegList().size() <= 6 ? irFunction.getArgVRegList().size() : 6;
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.prependInst(new IRPush(inst.getParentBB(),arg6.get(i)));
          }
          numPushCallerSave+=numPushArg6Regs;
          boolean extraPush=false;
          List<RegValue> args=((IRFunctionCall)inst).getArgs();
          List<Integer> arg6BakOffset=new ArrayList<>();
          Map<PhysicalRegister,Integer> arg6BakOffsetMap=new HashMap<>();
          if ((numPushCallerSave + funcInfo.numExtraArgs) % 2 == 1) {
            extraPush=true;
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          for (int i=args.size() - 1; i > 5; --i) {
            if (args.get(i) instanceof StackSlot) {
              inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
              inst.prependInst(new IRPush(inst.getParentBB(),rax));
            }
 else {
              inst.prependInst(new IRPush(inst.getParentBB(),args.get(i)));
            }
          }
          int bakOffset=0;
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (args.get(i) instanceof PhysicalRegister && ((PhysicalRegister)args.get(i)).isArg6() && ((PhysicalRegister)args.get(i)).getArg6Idx() < args.size()) {
              PhysicalRegister preg=(PhysicalRegister)args.get(i);
              if (arg6BakOffsetMap.containsKey(preg)) {
                arg6BakOffset.add(arg6BakOffsetMap.get(preg));
              }
 else {
                arg6BakOffset.add(bakOffset);
                arg6BakOffsetMap.put(preg,bakOffset);
                inst.prependInst(new IRPush(inst.getParentBB(),preg));
                ++bakOffset;
              }
            }
 else {
              arg6BakOffset.add(-1);
            }
          }
          for (int i=0; i < 6; ++i) {
            if (args.size() <= i)             break;
            if (arg6BakOffset.get(i) == -1) {
              if (args.get(i) instanceof StackSlot) {
                inst.prependInst(new IRLoad(inst.getParentBB(),rax,Configuration.getRegSize(),rsp,funcInfo.stackSlotOffsetMap.get(args.get(i))));
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),rax));
              }
 else {
                inst.prependInst(new IRMove(inst.getParentBB(),arg6.get(i),args.get(i)));
              }
            }
 else {
              inst.prependInst(new IRLoad(inst.getParentBB(),arg6.get(i),Configuration.getRegSize(),rsp,Configuration.getRegSize() * (bakOffset - arg6BakOffset.get(i) - 1)));
            }
          }
          if (bakOffset > 0) {
            inst.prependInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(bakOffset * Configuration.getRegSize())));
          }
          if (((IRFunctionCall)inst).getDest() != null) {
            inst.appendInst(new IRMove(inst.getParentBB(),((IRFunctionCall)inst).getDest(),rax));
          }
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            if (calleeInfo.recursiveUsedRegs.contains(preg)) {
              inst.appendInst(new IRPop(inst.getParentBB(),preg));
            }
          }
          for (int i=0; i < numPushArg6Regs; ++i) {
            inst.appendInst(new IRPop(inst.getParentBB(),arg6.get(i)));
          }
          if (funcInfo.numExtraArgs > 0 || extraPush) {
            int numPushArg=extraPush ? funcInfo.numExtraArgs + 1 : funcInfo.numExtraArgs;
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(numPushArg * Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRHeapAlloc) {
          int numPushCallerSave=0;
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            ++numPushCallerSave;
            inst.prependInst(new IRPush(inst.getParentBB(),preg));
          }
          inst.prependInst(new IRMove(inst.getParentBB(),rdi,((IRHeapAlloc)inst).getAllocSize()));
          if (numPushCallerSave % 2 == 1) {
            inst.prependInst(new IRPush(inst.getParentBB(),new IntImmediate(0)));
          }
          inst.appendInst(new IRMove(inst.getParentBB(),((IRHeapAlloc)inst).getDest(),rax));
          for (          PhysicalRegister preg : funcInfo.usedCallerSaveRegs) {
            inst.appendInst(new IRPop(inst.getParentBB(),preg));
          }
          if (numPushCallerSave % 2 == 1) {
            inst.appendInst(new IRBinaryOperation(inst.getParentBB(),rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(Configuration.getRegSize())));
          }
        }
 else         if (inst instanceof IRLoad) {
          if (((IRLoad)inst).getAddr() instanceof StackSlot) {
            ((IRLoad)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRLoad)inst).getAddr()));
            ((IRLoad)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRStore) {
          if (((IRStore)inst).getAddr() instanceof StackSlot) {
            ((IRStore)inst).setAddrOffset(funcInfo.stackSlotOffsetMap.get(((IRStore)inst).getAddr()));
            ((IRStore)inst).setAddr(rsp);
          }
        }
 else         if (inst instanceof IRMove) {
          if (((IRMove)inst).getLhs() == ((IRMove)inst).getRhs()) {
            inst.remove();
          }
        }
      }
    }
    IRReturn retInst=irFunction.getRetInstList().get(0);
    if (retInst.getRetValue() != null) {
      retInst.prependInst(new IRMove(retInst.getParentBB(),rax,retInst.getRetValue()));
    }
    BasicBlock exitBB=irFunction.getEndBB();
    IRInstruction lastInst=exitBB.getLastInst();
    if (funcInfo.numStackSlot > 0)     lastInst.prependInst(new IRBinaryOperation(entryBB,rsp,IRBinaryOperation.IRBinaryOp.ADD,rsp,new IntImmediate(funcInfo.numStackSlot * Configuration.getRegSize())));
    for (int i=funcInfo.usedCalleeSaveRegs.size() - 1; i >= 0; --i) {
      lastInst.prependInst(new IRPop(entryBB,funcInfo.usedCalleeSaveRegs.get(i)));
    }
  }
}"
79516,"public FuncEntity(FuncDeclNode node){
  super(node.getName(),new FunctionType(node.getName()));
  parameters=new ArrayList<>();
  for (  VarDeclNode paraDecl : node.getParameterList()) {
    parameters.add(new VarEntity(paraDecl));
  }
  returnType=node.getReturnType().getType();
  isConstruct=node.isConstruct();
}","public FuncEntity(FuncDeclNode node){
  super(node.getName(),new FunctionType(node.getName()));
  parameters=new ArrayList<>();
  for (  VarDeclNode paraDecl : node.getParameterList()) {
    parameters.add(new VarEntity(paraDecl));
  }
  if (node.getReturnType() == null)   returnType=null;
 else   returnType=node.getReturnType().getType();
  isConstruct=node.isConstruct();
}"
79517,"public ClassEntity(ClassDeclNode node,Scope parentScope){
  super(node.getName(),new ClassType(node.getName()));
  String key;
  Entity entity;
  for (  FuncDeclNode funcMemDecl : node.getFuncMember()) {
    key=Scope.funcKey(funcMemDecl.getName());
    entity=new FuncEntity(funcMemDecl);
    scope.putCheck(funcMemDecl.location(),funcMemDecl.getName(),key,entity);
  }
  scope=new Scope(parentScope);
}","public ClassEntity(ClassDeclNode node,Scope parentScope){
  super(node.getName(),new ClassType(node.getName()));
  String key;
  Entity entity;
  scope=new Scope(parentScope);
  for (  FuncDeclNode funcMemDecl : node.getFuncMember()) {
    key=Scope.funcKey(funcMemDecl.getName());
    entity=new FuncEntity(funcMemDecl);
    scope.putCheck(funcMemDecl.location(),funcMemDecl.getName(),key,entity);
  }
}"
79518,"public static void main(String[] args) throws Exception {
  String inFile=null, outFile=null;
  boolean isPrintHelp=false, isPrintVersion=false, isPrintConfig=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
switch (arg) {
case ""String_Node_Str"":
case ""String_Node_Str"":
      isPrintHelp=true;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  isPrintVersion=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
isPrintConfig=true;
break;
case ""String_Node_Str"":
if (i + 1 < args.length) outFile=args[++i];
 else errorArgs();
break;
default :
if (inFile == null) inFile=arg;
 else errorArgs();
}
}
if (isPrintVersion) printVersion();
if (isPrintHelp) printHelp();
if (isPrintConfig) printConfig();
InputStream inS;
PrintStream outS;
if (inFile == null) inS=System.in;
 else inS=new FileInputStream(inFile);
if (outFile == null) outS=System.out;
 else outS=new PrintStream(new FileOutputStream(outFile));
Compiler compiler=new Compiler(inS,outS);
try {
compiler.compile();
}
 catch (Error e) {
System.err.println(e.getMessage());
System.exit(1);
}
new LLIRInterpreter(new FileInputStream(outFile),false).run();
}","public static void main(String[] args) throws Exception {
  String inFile=null, outFile=null;
  boolean isPrintHelp=false, isPrintVersion=false, isPrintConfig=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
switch (arg) {
case ""String_Node_Str"":
case ""String_Node_Str"":
      isPrintHelp=true;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  isPrintVersion=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
isPrintConfig=true;
break;
case ""String_Node_Str"":
if (i + 1 < args.length) outFile=args[++i];
 else errorArgs();
break;
default :
if (inFile == null) inFile=arg;
 else errorArgs();
}
}
if (isPrintVersion) printVersion();
if (isPrintHelp) printHelp();
if (isPrintConfig) printConfig();
InputStream inS;
PrintStream outS;
if (inFile == null) inS=System.in;
 else inS=new FileInputStream(inFile);
if (outFile == null) outS=System.out;
 else outS=new PrintStream(new FileOutputStream(outFile));
Compiler compiler=new Compiler(inS,outS);
try {
compiler.compile();
}
 catch (Error e) {
System.err.println(e.getMessage());
System.exit(1);
}
LLIRInterpreter leLeIRInterpreter=new LLIRInterpreter(new FileInputStream(outFile),false);
leLeIRInterpreter.run();
System.out.println(""String_Node_Str"" + leLeIRInterpreter.getExitcode());
}"
79519,"private void processSelfIncDec(ExprNode expr,ExprNode node,boolean isSuffix,boolean isInc){
  boolean needMemOp=isMemoryAccess(expr);
  boolean bakWantAddr=wantAddr;
  wantAddr=false;
  expr.accept(this);
  if (isSuffix) {
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRMove(currentBB,vreg,expr.getRegValue()));
    node.setRegValue(vreg);
  }
 else {
    node.setRegValue(expr.getRegValue());
  }
  IntImmediate one=new IntImmediate(1);
  IRBinaryOperation.IRBinaryOp op=isInc ? IRBinaryOperation.IRBinaryOp.ADD : IRBinaryOperation.IRBinaryOp.SUB;
  if (needMemOp) {
    wantAddr=true;
    expr.accept(this);
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRBinaryOperation(currentBB,vreg,op,expr.getRegValue(),one));
    currentBB.addInst(new IRStore(currentBB,vreg,expr.getType().getVarSize(),expr.getAddrValue(),expr.getAddrOffset()));
    if (!isSuffix) {
      expr.setRegValue(vreg);
    }
  }
 else {
    currentBB.addInst(new IRBinaryOperation(currentBB,(IRRegister)expr.getRegValue(),op,expr.getAddrValue(),one));
  }
  wantAddr=bakWantAddr;
}","private void processSelfIncDec(ExprNode expr,ExprNode node,boolean isSuffix,boolean isInc){
  boolean needMemOp=isMemoryAccess(expr);
  boolean bakWantAddr=wantAddr;
  wantAddr=false;
  expr.accept(this);
  if (isSuffix) {
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRMove(currentBB,vreg,expr.getRegValue()));
    node.setRegValue(vreg);
  }
 else {
    node.setRegValue(expr.getRegValue());
  }
  IntImmediate one=new IntImmediate(1);
  IRBinaryOperation.IRBinaryOp op=isInc ? IRBinaryOperation.IRBinaryOp.ADD : IRBinaryOperation.IRBinaryOp.SUB;
  if (needMemOp) {
    wantAddr=true;
    expr.accept(this);
    VirtualRegister vreg=new VirtualRegister(null);
    currentBB.addInst(new IRBinaryOperation(currentBB,vreg,op,expr.getRegValue(),one));
    currentBB.addInst(new IRStore(currentBB,vreg,expr.getType().getVarSize(),expr.getAddrValue(),expr.getAddrOffset()));
    if (!isSuffix) {
      expr.setRegValue(vreg);
    }
  }
 else {
    currentBB.addInst(new IRBinaryOperation(currentBB,(IRRegister)expr.getRegValue(),op,expr.getRegValue(),one));
  }
  wantAddr=bakWantAddr;
}"
79520,"public void compile() throws Exception {
  System.out.println(""String_Node_Str"");
  buildAST();
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(globalScopePreScanner.getScope());
  functionScopeScanner.visit(ast);
  System.out.println(""String_Node_Str"");
}","public void compile() throws Exception {
  System.out.println(""String_Node_Str"");
  buildAST();
  ASTPrinter astPrinter=new ASTPrinter(outS);
  astPrinter.visit(ast);
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(globalScopePreScanner.getScope());
  functionScopeScanner.visit(ast);
  System.out.println(""String_Node_Str"");
}"
79521,"public ClassEntity(ClassDeclNode node,Scope parentScope){
  super(node.getName(),new ClassType(node.getName()));
  String key;
  FuncEntity entity;
  for (  FuncDeclNode funcMemDecl : node.getFuncMember()) {
    key=Scope.funcKey(funcMemDecl.getName());
    entity=new FuncEntity(funcMemDecl);
    if (!scope.put(key,entity))     throw new SemanticError(funcMemDecl.location(),String.format(""String_Node_Str"",funcMemDecl.getName()));
  }
  scope=new Scope(parentScope);
}","public ClassEntity(ClassDeclNode node,Scope parentScope){
  super(node.getName(),new ClassType(node.getName()));
  String key;
  Entity entity;
  for (  FuncDeclNode funcMemDecl : node.getFuncMember()) {
    key=Scope.funcKey(funcMemDecl.getName());
    entity=new FuncEntity(funcMemDecl);
    scope.putCheck(funcMemDecl.location(),funcMemDecl.getName(),key,entity);
  }
  scope=new Scope(parentScope);
}"
79522,"private boolean selfContainsExactKey(String key){
  return entityMap.containsKey(key);
}","public boolean selfContainsExactKey(String key){
  return entityMap.containsKey(key);
}"
79523,"public IRPrinter(PrintStream out){
  this.out=out;
  System.out.println(""String_Node_Str"");
}","public IRPrinter(PrintStream out){
  this.out=out;
}"
79524,"private void dfsPostOrder(BasicBlock bb){
  System.out.println(""String_Node_Str"" + bb.getName());
  if (dfsVisited.contains(bb))   return;
  for (  BasicBlock nextBB : bb.getNextBBSet()) {
    dfsPostOrder(nextBB);
  }
  reversePostOrder.add(bb);
}","private void dfsPostOrder(BasicBlock bb){
  if (dfsVisited.contains(bb))   return;
  dfsVisited.add(bb);
  for (  BasicBlock nextBB : bb.getNextBBSet()) {
    dfsPostOrder(nextBB);
  }
  reversePostOrder.add(bb);
}"
79525,"public List<BasicBlock> getReversePostOrder(){
  System.out.println(""String_Node_Str"");
  if (reversePostOrder != null)   return reversePostOrder;
  reversePostOrder=new ArrayList<>();
  dfsVisited=new HashSet<>();
  dfsPostOrder(startBB);
  System.out.println(""String_Node_Str"");
  dfsVisited=null;
  for (int i=0; i < reversePostOrder.size(); ++i) {
    reversePostOrder.get(i).setPostOrderIdx(i);
  }
  Collections.reverse(reversePostOrder);
  return reversePostOrder;
}","public List<BasicBlock> getReversePostOrder(){
  if (reversePostOrder != null)   return reversePostOrder;
  reversePostOrder=new ArrayList<>();
  dfsVisited=new HashSet<>();
  dfsPostOrder(startBB);
  dfsVisited=null;
  for (int i=0; i < reversePostOrder.size(); ++i) {
    reversePostOrder.get(i).setPostOrderIdx(i);
  }
  Collections.reverse(reversePostOrder);
  return reversePostOrder;
}"
79526,"private void processIRAssign(RegValue dest,int addrOffset,ExprNode rhs,int size,boolean needMemOp){
  if (rhs.getType() instanceof BoolType) {
    BasicBlock mergeBB=new BasicBlock(currentFunc,null);
    if (needMemOp) {
      rhs.getTrueBB().addInst(new IRStore(rhs.getTrueBB(),new IntImmediate(1),BoolType.getInstance().getVarSize(),dest,addrOffset));
      rhs.getFalseBB().addInst(new IRStore(rhs.getFalseBB(),new IntImmediate(0),BoolType.getInstance().getVarSize(),dest,addrOffset));
    }
 else {
      rhs.getTrueBB().addInst(new IRMove(rhs.getTrueBB(),(VirtualRegister)dest,new IntImmediate(1)));
      rhs.getFalseBB().addInst(new IRMove(rhs.getFalseBB(),(VirtualRegister)dest,new IntImmediate(0)));
    }
    rhs.getTrueBB().addInst(new IRJump(rhs.getTrueBB(),mergeBB));
    rhs.getFalseBB().addInst(new IRJump(rhs.getFalseBB(),mergeBB));
  }
 else {
    if (needMemOp) {
      currentBB.addInst(new IRStore(currentBB,rhs.getRegValue(),rhs.getType().getVarSize(),dest,addrOffset));
    }
 else {
      currentBB.addInst(new IRMove(currentBB,(IRRegister)dest,rhs.getRegValue()));
    }
  }
}","private void processIRAssign(RegValue dest,int addrOffset,ExprNode rhs,int size,boolean needMemOp){
  if (rhs.getType() instanceof BoolType) {
    BasicBlock mergeBB=new BasicBlock(currentFunc,null);
    if (needMemOp) {
      rhs.getTrueBB().addInst(new IRStore(rhs.getTrueBB(),new IntImmediate(1),BoolType.getInstance().getVarSize(),dest,addrOffset));
      rhs.getFalseBB().addInst(new IRStore(rhs.getFalseBB(),new IntImmediate(0),BoolType.getInstance().getVarSize(),dest,addrOffset));
    }
 else {
      rhs.getTrueBB().addInst(new IRMove(rhs.getTrueBB(),(VirtualRegister)dest,new IntImmediate(1)));
      rhs.getFalseBB().addInst(new IRMove(rhs.getFalseBB(),(VirtualRegister)dest,new IntImmediate(0)));
    }
    rhs.getTrueBB().setJumpInst(new IRJump(rhs.getTrueBB(),mergeBB));
    rhs.getFalseBB().setJumpInst(new IRJump(rhs.getFalseBB(),mergeBB));
    currentBB=mergeBB;
  }
 else {
    if (needMemOp) {
      currentBB.addInst(new IRStore(currentBB,rhs.getRegValue(),rhs.getType().getVarSize(),dest,addrOffset));
    }
 else {
      currentBB.addInst(new IRMove(currentBB,(IRRegister)dest,rhs.getRegValue()));
    }
  }
}"
79527,"private void processLogicalBinaryOp(BinaryExprNode node){
  if (node.getOp() == BinaryExprNode.BinaryOps.LOGIC_AND) {
    node.getLhs().setTrueBB(new BasicBlock(currentFunc,""String_Node_Str""));
    node.getLhs().setFalseBB(node.getFalseBB());
    node.getLhs().accept(this);
    currentBB=node.getLhs().getTrueBB();
  }
 else   if (node.getOp() == BinaryExprNode.BinaryOps.LOGIC_OR) {
    node.getLhs().setTrueBB(node.getTrueBB());
    node.getRhs().setFalseBB(new BasicBlock(currentFunc,""String_Node_Str""));
    node.getLhs().accept(this);
    currentBB=node.getLhs().getFalseBB();
  }
 else {
    throw new CompilerError(""String_Node_Str"");
  }
  node.getRhs().setTrueBB(node.getTrueBB());
  node.getRhs().setFalseBB(node.getFalseBB());
  node.getRhs().accept(this);
}","private void processLogicalBinaryOp(BinaryExprNode node){
  if (node.getOp() == BinaryExprNode.BinaryOps.LOGIC_AND) {
    node.getLhs().setTrueBB(new BasicBlock(currentFunc,""String_Node_Str""));
    node.getLhs().setFalseBB(node.getFalseBB());
    node.getLhs().accept(this);
    currentBB=node.getLhs().getTrueBB();
  }
 else   if (node.getOp() == BinaryExprNode.BinaryOps.LOGIC_OR) {
    node.getLhs().setTrueBB(node.getTrueBB());
    node.getLhs().setFalseBB(new BasicBlock(currentFunc,""String_Node_Str""));
    node.getLhs().accept(this);
    currentBB=node.getLhs().getFalseBB();
  }
 else {
    throw new CompilerError(""String_Node_Str"");
  }
  node.getRhs().setTrueBB(node.getTrueBB());
  node.getRhs().setFalseBB(node.getFalseBB());
  node.getRhs().accept(this);
}"
79528,"public void addNextBB(BasicBlock bb){
  if (bb != null) {
    nextBBSet.add(bb);
  }
  bb.addPrevBB(this);
}","public void addNextBB(BasicBlock bb){
  nextBBSet.add(bb);
  if (bb != null) {
    bb.addPrevBB(this);
  }
}"
79529,"public void compile() throws Exception {
  System.out.println(""String_Node_Str"");
  buildAST();
  ASTPrinter astPrinter=new ASTPrinter(outS);
  astPrinter.visit(ast);
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  System.out.println(""String_Node_Str"");
}","public void compile() throws Exception {
  System.out.println(""String_Node_Str"");
  buildAST();
  ASTPrinter astPrinter=new ASTPrinter(outS);
  astPrinter.visit(ast);
  GlobalScopePreScanner globalScopePreScanner=new GlobalScopePreScanner();
  globalScopePreScanner.visit(ast);
  ClassVarMemberScanner classVarMemberScanner=new ClassVarMemberScanner(globalScopePreScanner.getScope());
  classVarMemberScanner.visit(ast);
  FunctionScopeScanner functionScopeScanner=new FunctionScopeScanner(classVarMemberScanner.getGlobalScope());
  functionScopeScanner.visit(ast);
  IRBuilder irBuilder=new IRBuilder(functionScopeScanner.getGlobalScope());
  irBuilder.visit(ast);
  System.out.println(""String_Node_Str"");
}"
79530,"@Override public Node visitAssignExpr(EMxStarParser.AssignExprContext ctx){
  ExprNode lhs=(ExprNode)visit(ctx.lhs);
  ExprNode rhs=(ExprNode)visit(ctx.rhs);
  if (rhs instanceof NewExprNode && ((NewExprNode)rhs).getDims() != null && ((NewExprNode)rhs).getDims().size() > 1) {
    Location loc=Location.fromCtx(ctx);
    Type newTypeNow=((NewExprNode)rhs).getNewType().getType();
    return expandMultiArray(lhs,rhs,0,newTypeNow,loc);
  }
  return new AssignExprNode(lhs,rhs,Location.fromCtx(ctx));
}","@Override public Node visitAssignExpr(EMxStarParser.AssignExprContext ctx){
  ExprNode lhs=(ExprNode)visit(ctx.lhs);
  ExprNode rhs=(ExprNode)visit(ctx.rhs);
  return new AssignExprNode(lhs,rhs,Location.fromCtx(ctx));
}"
79531,"private FuncDeclNode makeInitFunc(){
  List<Node> stmts=new ArrayList<>();
  for (  GlobalVarInit init : globalInitList) {
    IdentifierExprNode lhs=new IdentifierExprNode(init.getName(),null);
    AssignExprNode assignExpr=new AssignExprNode(lhs,init.getInitExpr(),null);
    stmts.add(new ExprStmtNode(assignExpr,null));
  }
  BlockStmtNode body=new BlockStmtNode(stmts,null);
  TypeNode retType=new TypeNode(VoidType.getInstance(),null);
  FuncDeclNode funcNode=new FuncDeclNode(retType,INIT_FUNC_NAME,new ArrayList<>(),body,null);
  globalScope.put(Scope.funcKey(INIT_FUNC_NAME),new FuncEntity(funcNode));
  return funcNode;
}","private FuncDeclNode makeInitFunc(){
  List<Node> stmts=new ArrayList<>();
  for (  GlobalVarInit init : globalInitList) {
    IdentifierExprNode lhs=new IdentifierExprNode(init.getName(),null);
    AssignExprNode assignExpr=new AssignExprNode(lhs,init.getInitExpr(),null);
    stmts.add(new ExprStmtNode(assignExpr,null));
  }
  BlockStmtNode body=new BlockStmtNode(stmts,null);
  body.initScope(globalScope);
  TypeNode retType=new TypeNode(VoidType.getInstance(),null);
  FuncDeclNode funcNode=new FuncDeclNode(retType,INIT_FUNC_NAME,new ArrayList<>(),body,null);
  FuncEntity funcEntity=new FuncEntity(funcNode);
  globalScope.put(Scope.funcKey(INIT_FUNC_NAME),funcEntity);
  IRFunction newIRFunc=new IRFunction(funcEntity);
  ir.addFunc(newIRFunc);
  return funcNode;
}"
79532,"private boolean isMemoryAccess(ExprNode node){
  return node instanceof SubscriptExprNode || node instanceof MemberAccessExprNode;
}","private boolean isMemoryAccess(ExprNode node){
  return node instanceof SubscriptExprNode || node instanceof MemberAccessExprNode || (node instanceof IdentifierExprNode && checkIdentiferThisMemberAccess((IdentifierExprNode)node));
}"
79533,"public static void main(String[] args) throws Exception {
  String inFile=null, outFile=null;
  boolean isPrintHelp=false, isPrintVersion=false, isPrintConfig=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
switch (arg) {
case ""String_Node_Str"":
case ""String_Node_Str"":
      isPrintHelp=true;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  isPrintVersion=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
isPrintConfig=true;
break;
case ""String_Node_Str"":
if (i + 1 < args.length) outFile=args[++i];
 else errorArgs();
break;
default :
if (inFile == null) inFile=arg;
 else errorArgs();
}
}
if (isPrintVersion) printVersion();
if (isPrintHelp) printHelp();
if (isPrintConfig) printConfig();
InputStream inS;
PrintStream outS;
if (inFile == null) inS=System.in;
 else inS=new FileInputStream(inFile);
if (outFile == null) outS=System.out;
 else outS=new PrintStream(new FileOutputStream(outFile));
Compiler compiler=new Compiler(inS,outS);
try {
compiler.run();
}
 catch (Error e) {
System.err.println(e.getMessage());
System.exit(1);
}
}","public static void main(String[] args) throws Exception {
  String inFile=null, outFile=null;
  boolean isPrintHelp=false, isPrintVersion=false, isPrintConfig=false;
  for (int i=0; i < args.length; ++i) {
    String arg=args[i];
switch (arg) {
case ""String_Node_Str"":
case ""String_Node_Str"":
      isPrintHelp=true;
    break;
case ""String_Node_Str"":
case ""String_Node_Str"":
  isPrintVersion=true;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
isPrintConfig=true;
break;
case ""String_Node_Str"":
if (i + 1 < args.length) outFile=args[++i];
 else errorArgs();
break;
default :
if (inFile == null) inFile=arg;
 else errorArgs();
}
}
if (isPrintVersion) printVersion();
if (isPrintHelp) printHelp();
if (isPrintConfig) printConfig();
InputStream inS;
PrintStream outS;
if (inFile == null) inS=System.in;
 else inS=new FileInputStream(inFile);
if (outFile == null) outS=System.out;
 else outS=new PrintStream(new FileOutputStream(outFile));
Compiler compiler=new Compiler(inS,outS);
try {
compiler.compile();
}
 catch (Error e) {
System.err.println(e.getMessage());
System.exit(1);
}
}"
79534,"@Override public Node visitNonArrayTypeType(EMxStarParser.NonArrayTypeTypeContext ctx){
  if (ctx.Identifier() != null)   return new TypeNode(new ClassType(ctx.Identifier().getText()),Location.fromCtx(ctx));
  Type type;
  if (ctx.Int() != null)   type=IntType.getInstance();
 else   if (ctx.Bool() != null)   type=BoolType.getInstance();
 else   if (ctx.String() != null)   type=VoidType.getInstance();
 else   if (ctx.Identifier() != null)   type=new ClassType(ctx.Identifier().getText());
 else   throw new CompilerError(Location.fromCtx(ctx),""String_Node_Str"");
  return new TypeNode(type,Location.fromCtx(ctx));
}","@Override public Node visitNonArrayTypeType(EMxStarParser.NonArrayTypeTypeContext ctx){
  if (ctx.Identifier() != null)   return new TypeNode(new ClassType(ctx.Identifier().getText()),Location.fromCtx(ctx));
  Type type;
  if (ctx.Int() != null)   type=IntType.getInstance();
 else   if (ctx.Bool() != null)   type=BoolType.getInstance();
 else   if (ctx.String() != null)   type=StringType.getInstance();
 else   if (ctx.Identifier() != null)   type=new ClassType(ctx.Identifier().getText());
 else   throw new CompilerError(Location.fromCtx(ctx),""String_Node_Str"");
  return new TypeNode(type,Location.fromCtx(ctx));
}"
79535,"@Override public Node visitBlock(EMxStarParser.BlockContext ctx){
  List<Node> stmtsAndVarDecls=new ArrayList<>();
  if (ctx.blockStatement() != null) {
    for (    ParserRuleContext blockStatement : ctx.blockStatement()) {
      Node node=visit(blockStatement);
      if (node != null)       stmtsAndVarDecls.add(node);
    }
  }
  return new BlockStmtNode(stmtsAndVarDecls,Location.fromCtx(ctx));
}","@Override public Node visitBlock(EMxStarParser.BlockContext ctx){
  List<Node> stmtsAndVarDecls=new ArrayList<>();
  if (ctx.blockStatement() != null) {
    for (    ParserRuleContext blockStatement : ctx.blockStatement()) {
      Node node=visit(blockStatement);
      if (node != null) {
        if (node instanceof VarDeclListNode)         stmtsAndVarDecls.addAll(((VarDeclListNode)node).getDecls());
 else         stmtsAndVarDecls.add(node);
      }
    }
  }
  return new BlockStmtNode(stmtsAndVarDecls,Location.fromCtx(ctx));
}"
79536,"@Override public void onStockFetched(Stock stock){
  if (swipeRefreshLayout != null)   swipeRefreshLayout.setRefreshing(false);
  if (stock != null) {
    stockTrackingBinding.setStock(stock);
    currentStock=stock;
    Timber.d(""String_Node_Str"");
  }
 else {
    Timber.d(""String_Node_Str"");
  }
}","@Override public void onStockFetched(Stock stock){
  if (swipeRefreshLayout != null)   swipeRefreshLayout.setRefreshing(false);
  if (stock != null) {
    stockTrackingBinding.setStock(stock);
    currentStock=stock;
  }
}"
79537,"@Override public void unsubscribe(){
  compositeSubscription.clear();
}","@Override public void unsubscribe(){
  Timber.d(""String_Node_Str"");
  compositeSubscription.clear();
}"
79538,"public void fetchstock(String stockName,boolean inBackground){
  if (!inBackground)   stockView.showLoading();
  compositeSubscription.add(stockDataRepository.getStock(stockName).subscribeOn(AndroidSchedulers.mainThread()).subscribe(stock -> {
    stockView.onStockFetched(stock);
  }
,throwable -> {
    throwable.printStackTrace();
  }
));
}","public void fetchstock(String stockName,boolean inBackground){
  if (fetchSubsciption != null) {
    compositeSubscription.remove(fetchSubsciption);
  }
  if (!inBackground)   stockView.showLoading();
  fetchSubsciption=stockDataRepository.getStock(stockName).observeOn(AndroidSchedulers.mainThread(),true).subscribe(stock -> {
    stockView.onStockFetched(stock);
  }
,e -> {
    if (e instanceof IOException && !NetworkUtils.isInternetOn(StockTrackerApp.getContext())) {
      stockView.showError(StringUtils.getString(R.string.no_internet));
    }
 else     stockView.showError(StringUtils.getString(R.string.something_went_wrong));
  }
);
  compositeSubscription.add(fetchSubsciption);
}"
79539,"@Override public Observable<Stock> getStock(String stockName){
  return RetrofitService.getInstance().getStockData(RestApi.FUNCTION.TIME_SERIES_DAILY,stockName,RestApi.INTERVAL.MIN_15.getValue(),RestApi.OUTPUT_SIZE.COMPACT,API_KEY).map(stockApiResponse -> getStockFromStockApiResponse(stockApiResponse));
}","@Override public Observable<Stock> getStock(String stockName){
  return RetrofitService.getInstance().getStockData(RestApi.FUNCTION.TIME_SERIES_DAILY,stockName,RestApi.INTERVAL.MIN_15.getValue(),RestApi.OUTPUT_SIZE.COMPACT,API_KEY).map(stockApiResponse -> getStockFromStockApiResponse(stockApiResponse)).subscribeOn(Schedulers.io());
}"
79540,"@Override protected void onPause(){
  super.onPause();
  scheduleStockSyncService(this,60 * 60,60 * 60 * 2);
}","@Override protected void onPause(){
  super.onPause();
  FirebaseHelper.scheduleStockSyncService(this,60 * 60,60 * 60 * 2);
}"
79541,"private void removeFocusAndCloseKeyboard(){
  stockEditText.requestFocus();
  InputMethodManager imm=(InputMethodManager)getContext().getSystemService(Activity.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(stockEditText.getRootView().getWindowToken(),0);
}","private void removeFocusAndCloseKeyboard(){
  stockEditText.requestFocus();
  InputMethodManager imm=(InputMethodManager)getContext().getSystemService(INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(stockEditText.getWindowToken(),0);
}"
79542,"private void focusEditTextAndOpenKeyboard(){
  getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
  InputMethodManager imm=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);
  stockEditText.requestFocus();
  stockEditText.performClick();
}","private void focusEditTextAndOpenKeyboard(){
  getDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
}"
79543,"@Override public void setupDialog(Dialog dialog,int style){
  super.setupDialog(dialog,style);
  mView=View.inflate(getContext(),R.layout.fragment_stock_selector,null);
  dialog.setContentView(mView);
  ButterKnife.bind(this,mView);
  focusEditTextAndOpenKeyboard();
  stockEditText.setOnFocusChangeListener(new MyFocusChangeListener());
  CoordinatorLayout.LayoutParams params=(CoordinatorLayout.LayoutParams)((View)mView.getParent()).getLayoutParams();
  CoordinatorLayout.Behavior behavior=params.getBehavior();
  if (behavior != null && behavior instanceof BottomSheetBehavior) {
    ((BottomSheetBehavior)behavior).setBottomSheetCallback(mBottomSheetBehaviorCallback);
  }
  ButterKnife.bind(this,mView);
}","@Override public void setupDialog(Dialog dialog,int style){
  super.setupDialog(dialog,style);
  mView=View.inflate(getContext(),R.layout.fragment_stock_selector,null);
  dialog.setContentView(mView);
  ButterKnife.bind(this,mView);
  focusEditTextAndOpenKeyboard();
  CoordinatorLayout.LayoutParams params=(CoordinatorLayout.LayoutParams)((View)mView.getParent()).getLayoutParams();
  CoordinatorLayout.Behavior behavior=params.getBehavior();
  if (behavior != null && behavior instanceof BottomSheetBehavior) {
    ((BottomSheetBehavior)behavior).setBottomSheetCallback(mBottomSheetBehaviorCallback);
  }
  ButterKnife.bind(this,mView);
}"
79544,"private void drawGraph(Stock stock){
  if (stock.getHistoricalData() == null) {
    return;
  }
  lineChart.setVisibility(View.VISIBLE);
  int index=stock.getHistoricalData().size() - 1;
  Entry[] entries=new Entry[index + 1];
  HashMap<Integer,String> xAxisValueToTextMap=new HashMap<>();
  String key=stock.getLastUpdatedDate();
  while (index >= 0) {
    if (stock.getHistoricalData().containsKey(key)) {
      entries[index]=new Entry(index,stock.getHistoricalData().get(key).floatValue());
      xAxisValueToTextMap.put(index,key);
      index--;
    }
    Date date=DateUtils.convertStringToDate(key);
    date.setTime(date.getTime() - 2);
    key=DateUtils.convertDateToString(date);
  }
  Description description=new Description();
  description.setText(StringUtils.getString(R.string.stock_history));
  lineChart.setDescription(description);
  LineDataSet lineDataSet=new LineDataSet(Arrays.asList(entries),StringUtils.getString(R.string.stock_price));
  lineChart.getAxisRight().setEnabled(false);
  lineChart.getXAxis().setValueFormatter((value,axis) -> {
    Timber.d(""String_Node_Str"" + value + ""String_Node_Str""+ xAxisValueToTextMap.get((int)value));
    return xAxisValueToTextMap.get((int)value);
  }
);
  lineDataSet.setMode(LineDataSet.Mode.CUBIC_BEZIER);
  lineDataSet.setCubicIntensity(0.2f);
  lineDataSet.setDrawCircles(false);
  lineDataSet.setLineWidth(1.8f);
  lineDataSet.setCircleRadius(4f);
  lineDataSet.setCircleColor(Color.WHITE);
  lineDataSet.setHighLightColor(Color.rgb(244,117,117));
  lineDataSet.setColor(Color.WHITE);
  lineDataSet.setFillColor(Color.WHITE);
  lineDataSet.setFillAlpha(100);
  lineDataSet.setDrawHorizontalHighlightIndicator(false);
  lineDataSet.setFillFormatter(new IFillFormatter(){
    @Override public float getFillLinePosition(    ILineDataSet dataSet,    LineDataProvider dataProvider){
      return -10;
    }
  }
);
  LineData data=new LineData(lineDataSet);
  data.setValueTextSize(9f);
  data.setDrawValues(false);
  lineChart.setData(data);
  lineChart.setMaxVisibleValueCount(10);
  lineChart.setVisibleXRangeMaximum(10);
  lineChart.moveViewToX(100);
  lineChart.setScaleX(1);
  lineDataSet.setColor(ContextCompat.getColor(StockTrackerApp.getContext(),R.color.colorPrimary));
}","private void drawGraph(Stock stock){
  if (stock.getHistoricalData() == null || stock.getHistoricalData().size() == 0 || lineChart == null) {
    return;
  }
  lineChart.setVisibility(View.VISIBLE);
  int index=stock.getHistoricalData().size() - 1;
  Entry[] entries=new Entry[index + 1];
  HashMap<Integer,String> xAxisValueToTextMap=new HashMap<>();
  String key=stock.getLastUpdatedDate();
  while (index >= 0) {
    if (stock.getHistoricalData().containsKey(key)) {
      entries[index]=new Entry(index,stock.getHistoricalData().get(key).floatValue());
      xAxisValueToTextMap.put(index,key);
      index--;
    }
    Date date=DateUtils.convertStringToDate(key);
    date.setTime(date.getTime() - 2);
    key=DateUtils.convertDateToString(date);
  }
  Description description=new Description();
  description.setText(StringUtils.getString(R.string.stock_history));
  lineChart.setDescription(description);
  LineDataSet lineDataSet=new LineDataSet(Arrays.asList(entries),StringUtils.getString(R.string.stock_price));
  lineChart.getAxisRight().setEnabled(false);
  lineChart.getXAxis().setValueFormatter((value,axis) -> {
    Timber.d(""String_Node_Str"" + value + ""String_Node_Str""+ xAxisValueToTextMap.get((int)value));
    return xAxisValueToTextMap.get((int)value);
  }
);
  lineDataSet.setMode(LineDataSet.Mode.CUBIC_BEZIER);
  lineDataSet.setCubicIntensity(0.2f);
  lineDataSet.setDrawCircles(false);
  lineDataSet.setLineWidth(1.8f);
  lineDataSet.setCircleRadius(4f);
  lineDataSet.setCircleColor(Color.WHITE);
  lineDataSet.setHighLightColor(Color.rgb(244,117,117));
  lineDataSet.setColor(Color.WHITE);
  lineDataSet.setFillColor(Color.WHITE);
  lineDataSet.setFillAlpha(100);
  lineDataSet.setDrawHorizontalHighlightIndicator(false);
  lineDataSet.setFillFormatter(new IFillFormatter(){
    @Override public float getFillLinePosition(    ILineDataSet dataSet,    LineDataProvider dataProvider){
      return -10;
    }
  }
);
  LineData data=new LineData(lineDataSet);
  data.setValueTextSize(9f);
  data.setDrawValues(false);
  lineChart.setData(data);
  lineChart.setMaxVisibleValueCount(10);
  lineChart.setVisibleXRangeMaximum(10);
  lineChart.moveViewToX(100);
  lineChart.setScaleX(1);
  lineDataSet.setColor(ContextCompat.getColor(StockTrackerApp.getContext(),R.color.holo_orange_dark));
  lineDataSet.setFillColor(ContextCompat.getColor(StockTrackerApp.getContext(),R.color.holo_orange_dark));
}"
79545,"@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  swipeRefreshLayout.setOnRefreshListener(() -> {
    swipeRefreshLayout.setRefreshing(true);
    stockPresenter.fetchstock(currentStockName,true,true);
  }
);
  if (currentStock == null)   stockPresenter.fetchstock(currentStockName,false,false);
 else {
    onStockFetched(currentStock);
  }
  EventBus.getInstance().toObserverable().subscribe(o -> {
    if (o instanceof StockSelectorFragment.StockSymbolWrapper) {
      String stockName=((StockSelectorFragment.StockSymbolWrapper)o).stockName;
      SharedPreferencesHelper.setLastViewedStock(stockName);
      currentStockName=stockName;
      currentStock=null;
      stockTrackingBinding.setStock(null);
      stockPresenter.fetchstock(((StockSelectorFragment.StockSymbolWrapper)o).stockName,false,false);
    }
  }
,throwable -> throwable.printStackTrace());
}","@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  swipeRefreshLayout.setOnRefreshListener(() -> {
    swipeRefreshLayout.setRefreshing(true);
    stockPresenter.fetchstock(currentStockName,true,true);
  }
);
  if (currentStock == null)   stockPresenter.fetchstock(currentStockName,false,false);
 else {
    onStockFetched(currentStock);
  }
  EventBus.getInstance().toObserverable().subscribe(o -> {
    if (o instanceof StockSelectorFragment.StockSymbolWrapper) {
      String stockName=((StockSelectorFragment.StockSymbolWrapper)o).stockName;
      stockPresenter.fetchstock(stockName,false,false);
    }
  }
,throwable -> throwable.printStackTrace());
}"
79546,"@Override public void showError(String message){
  swipeRefreshLayout.setRefreshing(false);
  if (currentStock == null) {
    stockTrackingBinding.setShowRetry(true);
    stockTrackingBinding.setRetryMessage(message);
  }
 else {
    Toast.makeText(StockTrackerApp.getContext(),message,Toast.LENGTH_SHORT).show();
  }
}","@Override public void showError(String message){
  if (swipeRefreshLayout != null)   swipeRefreshLayout.setRefreshing(false);
  if (currentStock == null) {
    stockTrackingBinding.setShowRetry(true);
    stockTrackingBinding.setRetryMessage(message);
  }
 else {
    Toast.makeText(StockTrackerApp.getContext(),message,Toast.LENGTH_SHORT).show();
  }
}"
79547,"@Override public void onStockFetched(Stock stock){
  if (swipeRefreshLayout != null)   swipeRefreshLayout.setRefreshing(false);
  stockTrackingBinding.setShowRetry(false);
  if (stock != null) {
    if (!stock.isValidStock()) {
      showError(StringUtils.getString(R.string.invalid_stock));
      openStockSelector();
      return;
    }
    Timber.d(""String_Node_Str"");
    stockTrackingBinding.setStock(stock);
    currentStock=stock;
    drawGraph(stock);
  }
}","@Override public void onStockFetched(Stock stock){
  if (swipeRefreshLayout != null)   swipeRefreshLayout.setRefreshing(false);
  stockTrackingBinding.setShowRetry(false);
  if (stock != null) {
    if (!stock.isValidStock()) {
      showError(StringUtils.getString(R.string.invalid_stock));
      stockPresenter.unsubscribe();
      openStockSelector();
      return;
    }
    Timber.d(""String_Node_Str"");
    stockTrackingBinding.setStock(stock);
    currentStock=stock;
    currentStockName=stock.getStockName();
    SharedPreferencesHelper.setLastViewedStock(currentStockName);
    drawGraph(stock);
  }
}"
79548,"@Override public void destroy(){
  unsubscribe();
}","@Override public void destroy(){
  unsubscribe();
  stockView=null;
}"
79549,"private Stock getStockFromStockApiResponse(StockApiResponse stockApiResponse){
  Stock stock=new Stock();
  if (stockApiResponse.getErrorMessage() != null) {
    stock.setValidStock(false);
    return stock;
  }
  stock.setValidStock(true);
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  stock.setCurrentPrice(Double.valueOf(df.format(stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getClose())));
  stock.setClosed(!isMarkedOpen());
  stock.setOpeningPrice(Double.valueOf(df.format((stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getOpen()))));
  stock.setChangeInPrice(Double.valueOf(df.format(getChangeInPrice(stock.getCurrentPrice(),stockApiResponse))));
  stock.setIntradayLowPrice(Double.valueOf(df.format((stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getLow()))));
  stock.setIntradayHighPrice(Double.valueOf(df.format(stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getHigh())));
  stock.setStockName(stockApiResponse.getMetaData()._2Symbol);
  stock.setLastUpdatedDate(stockApiResponse.getMetaData()._3LastRefreshed);
  HashMap<String,Double> stockDatePriceMap=new HashMap<>();
  for (  String key : stockApiResponse.getTimeSeries15min().keySet())   stockDatePriceMap.put(key,stockApiResponse.getTimeSeries15min().get(key).getClose());
  stock.setHistoricalData(stockDatePriceMap);
  return stock;
}","public static Stock getStockFromStockApiResponse(StockApiResponse stockApiResponse){
  Stock stock=new Stock();
  if (stockApiResponse.getErrorMessage() != null) {
    stock.setValidStock(false);
    return stock;
  }
  stock.setValidStock(true);
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  stock.setCurrentPrice(Double.valueOf(df.format(stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getClose())));
  stock.setClosed(!DateUtils.isMarkedOpen());
  stock.setOpeningPrice(Double.valueOf(df.format((stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getOpen()))));
  stock.setChangeInPrice(Double.valueOf(df.format(getChangeInPrice(stock.getCurrentPrice(),stockApiResponse))));
  stock.setIntradayLowPrice(Double.valueOf(df.format((stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getLow()))));
  stock.setIntradayHighPrice(Double.valueOf(df.format(stockApiResponse.getTimeSeries15min().get(stockApiResponse.getMetaData()._3LastRefreshed).getHigh())));
  stock.setStockName(stockApiResponse.getMetaData()._2Symbol);
  stock.setLastUpdatedDate(stockApiResponse.getMetaData()._3LastRefreshed);
  HashMap<String,Double> stockDatePriceMap=new HashMap<>();
  for (  String key : stockApiResponse.getTimeSeries15min().keySet())   stockDatePriceMap.put(key,stockApiResponse.getTimeSeries15min().get(key).getClose());
  stock.setHistoricalData(stockDatePriceMap);
  return stock;
}"
79550,"private double getChangeInPrice(double currentPrice,StockApiResponse stockApiResponse){
  Date todayDate=DateUtils.convertStringToDate(stockApiResponse.getMetaData()._3LastRefreshed);
  todayDate.setTime(todayDate.getTime() - 2);
  if (!stockApiResponse.getTimeSeries15min().containsKey(DateUtils.convertDateToString(todayDate)))   return 0d;
  return currentPrice - stockApiResponse.getTimeSeries15min().get(DateUtils.convertDateToString(todayDate)).getClose();
}","private static double getChangeInPrice(double currentPrice,StockApiResponse stockApiResponse){
  Date todayDate=DateUtils.convertStringToDate(stockApiResponse.getMetaData()._3LastRefreshed);
  todayDate.setTime(todayDate.getTime() - 2);
  if (!stockApiResponse.getTimeSeries15min().containsKey(DateUtils.convertDateToString(todayDate)))   return 0d;
  return currentPrice - stockApiResponse.getTimeSeries15min().get(DateUtils.convertDateToString(todayDate)).getClose();
}"
79551,"public HashMap<String,String> getHeaders(){
  return params;
}","public static HashMap<String,String> getHeaders(){
  return params;
}"
79552,"public static boolean loadPatreonData(){
  String jsonCode;
  try {
    jsonCode=new String(Files.readAllBytes(Paths.get(""String_Node_Str"")));
  }
 catch (  IOException e) {
    defLog.error(""String_Node_Str"",e);
    return false;
  }
  patreonData=new JSONObject(jsonCode);
  TLongSet ids=new TLongHashSet();
  for (  Object iter : patreonData.getJSONArray(""String_Node_Str"")) {
    ids.add(iter instanceof Long ? (Long)iter : Long.parseUnsignedLong((String)iter));
  }
  patronIds=ids;
  return true;
}","public static boolean loadPatreonData(){
  String jsonCode;
  try {
    jsonCode=new String(Files.readAllBytes(Paths.get(""String_Node_Str"")));
  }
 catch (  NoSuchFileException ignored) {
    return true;
  }
catch (  IOException e) {
    defLog.error(""String_Node_Str"",e);
    return false;
  }
  patreonData=new JSONObject(jsonCode);
  TLongSet ids=new TLongHashSet();
  for (  Object iter : patreonData.getJSONArray(""String_Node_Str"")) {
    ids.add(iter instanceof Long ? (Long)iter : Long.parseUnsignedLong((String)iter));
  }
  patronIds=ids;
  return true;
}"
79553,"private void leaveCmdPreview(Context ctx){
  onGuildMemberLeave(new GuildMemberLeaveEvent(ctx.jda,ctx.event.getResponseNumber(),ctx.guild,ctx.member));
}","private void leaveCmdPreview(Context ctx){
  onGuildMemberLeave(new GuildMemberLeaveEvent(ctx.jda,ctx.event.getResponseNumber(),ctx.member));
}"
79554,"private void welcomeCmdPreview(Context ctx){
  onGuildMemberJoin(new GuildMemberJoinEvent(ctx.jda,ctx.event.getResponseNumber(),ctx.guild,ctx.member));
}","private void welcomeCmdPreview(Context ctx){
  onGuildMemberJoin(new GuildMemberJoinEvent(ctx.jda,ctx.event.getResponseNumber(),ctx.member));
}"
79555,"@Override public void onResponse(Call call,Response response) throws IOException {
  JSONObject resp=new JSONObject(response.body().string());
  if (resp.optBoolean(""String_Node_Str"",false)) {
    logger.error(""String_Node_Str"",resp.optString(""String_Node_Str"",""String_Node_Str""));
    channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
  }
  String toSend;
  if (respPrefix == null)   toSend=resp.getString(""String_Node_Str"");
 else   toSend=respPrefix + resp.getString(""String_Node_Str"");
  channel.sendMessage(toSend).queue();
}","@Override public void onResponse(Call call,Response response) throws IOException {
  JSONObject resp=new JSONObject(response.body().string());
  if (!resp.optBoolean(""String_Node_Str"",false)) {
    logger.error(""String_Node_Str"",resp.optString(""String_Node_Str"",""String_Node_Str""));
    channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  String toSend;
  if (respPrefix == null)   toSend=resp.getString(""String_Node_Str"");
 else   toSend=respPrefix + resp.getString(""String_Node_Str"");
  channel.sendMessage(toSend).queue();
}"
79556,"public void chatengineResponse(MessageChannel channel,long sessionID,String query,String respPrefix){
  String reqDest=getConfig().optString(""String_Node_Str"",null);
  if (reqDest == null) {
    channel.sendMessage(""String_Node_Str"").queue();
    return;
  }
  channel.sendTyping().queue();
  http.newCall(new Request.Builder().post(RequestBody.create(JSON_MEDIA_TYPE,new JSONObject().put(""String_Node_Str"",sessionID).put(""String_Node_Str"",query).toString())).url(reqDest).header(""String_Node_Str"",getKeys().optString(""String_Node_Str"")).build()).enqueue(new okhttp3.Callback(){
    @Override public void onFailure(    Call call,    IOException e){
      logger.error(""String_Node_Str"",e);
      channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      JSONObject resp=new JSONObject(response.body().string());
      if (resp.optBoolean(""String_Node_Str"",false)) {
        logger.error(""String_Node_Str"",resp.optString(""String_Node_Str"",""String_Node_Str""));
        channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
      }
      String toSend;
      if (respPrefix == null)       toSend=resp.getString(""String_Node_Str"");
 else       toSend=respPrefix + resp.getString(""String_Node_Str"");
      channel.sendMessage(toSend).queue();
    }
  }
);
}","public void chatengineResponse(MessageChannel channel,String sessionID,String query,String respPrefix){
  String reqDest=getConfig().optString(""String_Node_Str"",null);
  if (reqDest == null) {
    channel.sendMessage(""String_Node_Str"").queue();
    return;
  }
  channel.sendTyping().queue();
  http.newCall(new Request.Builder().post(RequestBody.create(JSON_MEDIA_TYPE,new JSONObject().put(""String_Node_Str"",sessionID).put(""String_Node_Str"",query).toString())).url(reqDest).header(""String_Node_Str"",getKeys().optString(""String_Node_Str"")).build()).enqueue(new okhttp3.Callback(){
    @Override public void onFailure(    Call call,    IOException e){
      logger.error(""String_Node_Str"",e);
      channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      JSONObject resp=new JSONObject(response.body().string());
      if (!resp.optBoolean(""String_Node_Str"",false)) {
        logger.error(""String_Node_Str"",resp.optString(""String_Node_Str"",""String_Node_Str""));
        channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
        return;
      }
      String toSend;
      if (respPrefix == null)       toSend=resp.getString(""String_Node_Str"");
 else       toSend=respPrefix + resp.getString(""String_Node_Str"");
      channel.sendMessage(toSend).queue();
    }
  }
);
}"
79557,"@Override public void onMessageReceived(MessageReceivedEvent event){
  final JDA jda=event.getJDA();
  final User author=event.getAuthor();
  if (author.isBot())   return;
  if (author.getIdLong() == jda.getSelfUser().getIdLong())   return;
  final Message message=event.getMessage();
  final String prefix;
  if (message.getGuild() == null) {
    prefix=shardUtil.getPrefixStore().getDefaultPrefix();
  }
 else {
    prefix=shardUtil.getPrefixStore().getPrefix(message.getGuild().getIdLong());
  }
  final String content=message.getRawContent();
  final MessageChannel channel=event.getChannel();
  if (content.startsWith(prefix)) {
    String[] split=content.substring(prefix.length()).split(""String_Node_Str"");
    List<String> args=new ArrayList<>(split.length - 1);
    for (int i=1; i < split.length; i++)     args.add(split[i]);
    String cmdName=split[0].toLowerCase();
    if (commands.containsKey(cmdName)) {
      Command command=commands.get(cmdName);
      try {
        command.invoke(this,event,args,prefix,cmdName);
      }
 catch (      IllegalAccessException e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        if (cause == null) {
          logger.error(""String_Node_Str"",cmdName,e);
          channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
        }
 else         if (cause instanceof PassException) {
        }
 else         if (cause instanceof PermissionError) {
          channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName,Strings.smartJoin(((PermissionError)cause).getFriendlyPerms(),""String_Node_Str""))).queue();
        }
 else         if (cause instanceof PermissionException) {
          try {
            channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"" + ((PermissionException)cause).getPermission().getName()+ ""String_Node_Str"").queue();
          }
 catch (          PermissionException ignored) {
          }
        }
 else {
          logger.error(""String_Node_Str"",cmdName,cause);
          channel.sendMessage(format(Emotes.getFailure() + ""String_Node_Str"",prefix,cmdName,vagueTrace(cause))).queue();
          if (command.reportErrors)           reportErrorToOwner(cause,message,command);
        }
      }
catch (      PermissionError e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName,Strings.smartJoin(e.getFriendlyPerms(),""String_Node_Str""))).queue();
      }
catch (      GuildOnlyError e) {
        channel.sendMessage(""String_Node_Str"").queue();
      }
catch (      CheckFailure e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName)).queue();
      }
catch (      Exception e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
      }
      try {
        shardUtil.getCommandCalls().get(command.name).incrementAndGet();
      }
 catch (      NullPointerException ignored) {
        shardUtil.getCommandCalls().put(command.name,new AtomicInteger(1));
      }
    }
  }
 else   if (message.isMentioned(jda.getSelfUser())) {
    String mention=message.getGuild() == null ? jda.getSelfUser().getAsMention() : message.getGuild().getSelfMember().getAsMention();
    if (content.startsWith(mention) || content.startsWith(""String_Node_Str"")) {
      String request=Strings.renderMessage(message,message.getGuild(),message.getRawContent().replaceFirst(""String_Node_Str"",""String_Node_Str""));
      if (request.equalsIgnoreCase(""String_Node_Str"")) {
        channel.sendMessage(""String_Node_Str"" + prefix + ""String_Node_Str"").queue();
      }
 else       if (request.length() > 0) {
        chatengineResponse(channel,author.getIdLong(),request,null);
      }
 else {
        String tag=Cog.getTag(jda.getSelfUser());
        channel.sendMessage(""String_Node_Str"" + tag + ""String_Node_Str""+ tag+ ""String_Node_Str"").queue();
      }
    }
 else     if (channel instanceof PrivateChannel) {
      String request=message.getContent();
      chatengineResponse(channel,author.getIdLong(),request,""String_Node_Str"");
    }
  }
}","@Override public void onMessageReceived(MessageReceivedEvent event){
  final JDA jda=event.getJDA();
  final User author=event.getAuthor();
  if (author.isBot())   return;
  if (author.getIdLong() == jda.getSelfUser().getIdLong())   return;
  final Message message=event.getMessage();
  final String prefix;
  if (message.getGuild() == null) {
    prefix=shardUtil.getPrefixStore().getDefaultPrefix();
  }
 else {
    prefix=shardUtil.getPrefixStore().getPrefix(message.getGuild().getIdLong());
  }
  final String content=message.getRawContent();
  final MessageChannel channel=event.getChannel();
  if (content.startsWith(prefix)) {
    String[] split=content.substring(prefix.length()).split(""String_Node_Str"");
    List<String> args=new ArrayList<>(split.length - 1);
    for (int i=1; i < split.length; i++)     args.add(split[i]);
    String cmdName=split[0].toLowerCase();
    if (commands.containsKey(cmdName)) {
      Command command=commands.get(cmdName);
      try {
        command.invoke(this,event,args,prefix,cmdName);
      }
 catch (      IllegalAccessException e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        if (cause == null) {
          logger.error(""String_Node_Str"",cmdName,e);
          channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
        }
 else         if (cause instanceof PassException) {
        }
 else         if (cause instanceof PermissionError) {
          channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName,Strings.smartJoin(((PermissionError)cause).getFriendlyPerms(),""String_Node_Str""))).queue();
        }
 else         if (cause instanceof PermissionException) {
          try {
            channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"" + ((PermissionException)cause).getPermission().getName()+ ""String_Node_Str"").queue();
          }
 catch (          PermissionException ignored) {
          }
        }
 else {
          logger.error(""String_Node_Str"",cmdName,cause);
          channel.sendMessage(format(Emotes.getFailure() + ""String_Node_Str"",prefix,cmdName,vagueTrace(cause))).queue();
          if (command.reportErrors)           reportErrorToOwner(cause,message,command);
        }
      }
catch (      PermissionError e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName,Strings.smartJoin(e.getFriendlyPerms(),""String_Node_Str""))).queue();
      }
catch (      GuildOnlyError e) {
        channel.sendMessage(""String_Node_Str"").queue();
      }
catch (      CheckFailure e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName)).queue();
      }
catch (      Exception e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
      }
      try {
        shardUtil.getCommandCalls().get(command.name).incrementAndGet();
      }
 catch (      NullPointerException ignored) {
        shardUtil.getCommandCalls().put(command.name,new AtomicInteger(1));
      }
    }
  }
 else   if (message.isMentioned(jda.getSelfUser())) {
    String mention=message.getGuild() == null ? jda.getSelfUser().getAsMention() : message.getGuild().getSelfMember().getAsMention();
    if (content.startsWith(mention) || content.startsWith(""String_Node_Str"")) {
      String request=Strings.renderMessage(message,message.getGuild(),message.getRawContent().replaceFirst(""String_Node_Str"",""String_Node_Str""));
      if (request.equalsIgnoreCase(""String_Node_Str"")) {
        channel.sendMessage(""String_Node_Str"" + prefix + ""String_Node_Str"").queue();
      }
 else       if (request.length() > 0) {
        chatengineResponse(channel,""String_Node_Str"" + author.getId(),request,null);
      }
 else {
        String tag=Cog.getTag(jda.getSelfUser());
        channel.sendMessage(""String_Node_Str"" + tag + ""String_Node_Str""+ tag+ ""String_Node_Str"").queue();
      }
    }
 else     if (channel instanceof PrivateChannel) {
      String request=message.getContent();
      chatengineResponse(channel,""String_Node_Str"" + author.getId(),request,""String_Node_Str"");
    }
  }
}"
79558,"private void answerQuestion(byte answer){
  try {
    JSONObject json=new JSONObject(client.newCall(new Request.Builder().get().url(Strings.buildQueryUrl(ANSWER_URL,""String_Node_Str"",session,""String_Node_Str"",signature,""String_Node_Str"",str(stepInfo.getStepNum()),""String_Node_Str"",Byte.toString(answer))).build()).execute().body().string());
    stepInfo=new StepInfo(json);
    if (stepInfo.getProgression() > 90) {
      presentGuess();
    }
 else {
      presentNextQuestion();
    }
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}","private void answerQuestion(byte answer){
  try {
    JSONObject json=new JSONObject(client.newCall(new Request.Builder().get().url(Strings.buildQueryUrl(ANSWER_URL,""String_Node_Str"",session,""String_Node_Str"",signature,""String_Node_Str"",str(stepInfo.getStepNum()),""String_Node_Str"",Byte.toString(answer))).build()).execute().body().string());
    try {
      stepInfo=new StepInfo(json);
    }
 catch (    JSONException ignored) {
      emb.setImage(null).clearFields().addField(""String_Node_Str"",""String_Node_Str"",false);
      onFinish.run();
    }
    if (stepInfo.getProgression() > 90) {
      presentGuess();
    }
 else {
      presentNextQuestion();
    }
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
}"
79559,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases=""String_Node_Str"") public void cmdAkinator(Context ctx){
  if (ctx.channel instanceof TextChannel && !ctx.member.hasPermission((Channel)ctx.channel,Permission.MESSAGE_ADD_REACTION,Permission.MESSAGE_EMBED_LINKS)) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  AkinatorGame game;
  try {
    game=new AkinatorGame(ctx);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases=""String_Node_Str"") public void cmdAkinator(Context ctx){
  if (ctx.channel instanceof TextChannel && !ctx.member.hasPermission((Channel)ctx.channel,Permission.MESSAGE_ADD_REACTION,Permission.MESSAGE_EMBED_LINKS)) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  try {
    new AkinatorGame(ctx);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
  }
catch (  JSONException ignored) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
  }
}"
79560,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},perms={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdPurge(Context ctx){
  if (bot.isSelfbot()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (ctx.rawArgs.length() < 1) {
    ctx.send(PURGE_NO_PARAMS).queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  Matcher matcher;
  String args=ctx.rawArgs;
  String regex=null;
  List<String> substrings=new LinkedList<>();
  TLongList userIds=new TLongLinkedList();
  int limit=0;
  TextChannel channel=ctx.event.getTextChannel();
  args=match(PURGE_QUOTE_PATTERN,args,m -> {
    substrings.add(m.group(1).toLowerCase().trim());
  }
);
  matcher=PURGE_REGEX_PATTERN.matcher(args);
  if (matcher.find())   regex=matcher.group(1);
  args=match(PURGE_MENTION_PATTERN,args,m -> {
    userIds.add(MiscUtil.parseSnowflake(m.group(1)));
  }
);
  matcher=PURGE_NUM_PATTERN.matcher(args);
  if (matcher.find()) {
    try {
      limit=Integer.parseInt(matcher.group(1).trim());
    }
 catch (    NumberFormatException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  args=args.replaceAll(PURGE_NUM_PATTERN.pattern(),""String_Node_Str"");
  if (limit > 800) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  boolean bots=args.contains(""String_Node_Str"");
  boolean embeds=args.contains(""String_Node_Str"");
  boolean links=args.contains(""String_Node_Str"");
  boolean attachments=args.contains(""String_Node_Str"");
  boolean none=substrings.isEmpty() && regex == null && userIds.isEmpty() && !bots && !embeds && !links && !attachments;
  String twoWeekWarn=""String_Node_Str"";
  OffsetDateTime maxAge=ctx.message.getCreationTime().minusWeeks(2).plusMinutes(1);
  List<Message> toDelete=new LinkedList<>();
  for (  Message msg : channel.getIterableHistory()) {
    if (toDelete.size() >= limit)     break;
    if (msg.getIdLong() == ctx.message.getIdLong())     continue;
    if (msg.getCreationTime().isBefore(maxAge)) {
      twoWeekWarn=""String_Node_Str"";
      break;
    }
    if (none || userIds.contains(msg.getAuthor().getIdLong()) || (bots && msg.getAuthor().isBot())|| (embeds && !msg.getEmbeds().isEmpty())|| (attachments && !msg.getAttachments().isEmpty())|| (links && PURGE_LINK_PATTERN.matcher(msg.getRawContent()).find())) {
      toDelete.add(msg);
      continue;
    }
    if (substrings.stream().anyMatch(ss -> msg.getRawContent().toLowerCase().contains(ss))) {
      toDelete.add(msg);
      continue;
    }
    try {
      if (regex != null && msg.getRawContent().matches(regex))       toDelete.add(msg);
    }
 catch (    PatternSyntaxException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  if (toDelete.isEmpty()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (toDelete.size() == 1) {
    toDelete.get(0).delete().reason(""String_Node_Str"").complete();
  }
 else   if (toDelete.size() <= 100) {
    channel.deleteMessages(toDelete).complete();
  }
 else {
    for (int i=0; i <= toDelete.size(); i+=99) {
      List<Message> list=toDelete.subList(i,Math.min(i + 99,toDelete.size()));
      if (list.isEmpty())       break;
      channel.deleteMessages(list).complete();
    }
  }
  ctx.send(Emotes.getSuccess() + ""String_Node_Str"" + toDelete.size()+ ""String_Node_Str""+ twoWeekWarn).queue(msg -> {
    msg.delete().queueAfter(2,TimeUnit.SECONDS,null,exp -> {
      if (exp instanceof ErrorResponseException) {
        if (((ErrorResponseException)exp).getErrorCode() != 10008) {
          RestAction.DEFAULT_FAILURE.accept(exp);
        }
      }
    }
);
    ctx.message.addReaction(""String_Node_Str"").queue();
  }
);
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},perms={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdPurge(Context ctx){
  if (bot.isSelfbot()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (ctx.rawArgs.length() < 1) {
    ctx.send(PURGE_NO_PARAMS).queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  Matcher matcher;
  String args=ctx.rawArgs;
  String regex=null;
  List<String> substrings=new LinkedList<>();
  TLongList userIds=new TLongLinkedList();
  int limit=0;
  TextChannel channel=ctx.event.getTextChannel();
  args=match(PURGE_QUOTE_PATTERN,args,m -> {
    substrings.add(m.group(1).toLowerCase().trim());
  }
);
  matcher=PURGE_REGEX_PATTERN.matcher(args);
  if (matcher.find())   regex=matcher.group(1);
  args=match(PURGE_MENTION_PATTERN,args,m -> {
    userIds.add(MiscUtil.parseSnowflake(m.group(1)));
  }
);
  matcher=PURGE_NUM_PATTERN.matcher(args);
  if (matcher.find()) {
    try {
      limit=Integer.parseInt(matcher.group(1).trim());
    }
 catch (    NumberFormatException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  args=args.replaceAll(PURGE_NUM_PATTERN.pattern(),""String_Node_Str"");
  if (limit > 800) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  boolean bots=args.contains(""String_Node_Str"");
  boolean embeds=args.contains(""String_Node_Str"");
  boolean links=args.contains(""String_Node_Str"");
  boolean attachments=args.contains(""String_Node_Str"");
  boolean none=substrings.isEmpty() && regex == null && userIds.isEmpty() && !bots && !embeds && !links && !attachments;
  String twoWeekWarn=""String_Node_Str"";
  OffsetDateTime maxAge=ctx.message.getCreationTime().minusWeeks(2).plusMinutes(1);
  List<Message> toDelete=new LinkedList<>();
  for (  Message msg : channel.getIterableHistory()) {
    if (toDelete.size() >= limit)     break;
    if (msg.getIdLong() == ctx.message.getIdLong())     continue;
    if (msg.getCreationTime().isBefore(maxAge)) {
      twoWeekWarn=""String_Node_Str"";
      break;
    }
    if (none || userIds.contains(msg.getAuthor().getIdLong()) || (bots && msg.getAuthor().isBot())|| (embeds && !msg.getEmbeds().isEmpty())|| (attachments && !msg.getAttachments().isEmpty())|| (links && PURGE_LINK_PATTERN.matcher(msg.getRawContent()).find())) {
      toDelete.add(msg);
      continue;
    }
    if (substrings.stream().anyMatch(ss -> msg.getRawContent().toLowerCase().contains(ss))) {
      toDelete.add(msg);
      continue;
    }
    try {
      if (regex != null && msg.getRawContent().matches(regex))       toDelete.add(msg);
    }
 catch (    PatternSyntaxException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  if (toDelete.isEmpty()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (toDelete.size() == 1) {
    toDelete.get(0).delete().reason(""String_Node_Str"").complete();
  }
 else   if (toDelete.size() <= 100) {
    channel.deleteMessages(toDelete).complete();
  }
 else {
    for (int i=0; i <= toDelete.size(); i+=99) {
      List<Message> list=toDelete.subList(i,Math.min(i + 99,toDelete.size()));
      if (list.isEmpty())       break;
      if (list.size() == 1)       toDelete.get(0).delete().reason(""String_Node_Str"").complete();
 else       channel.deleteMessages(list).complete();
    }
  }
  ctx.send(Emotes.getSuccess() + ""String_Node_Str"" + toDelete.size()+ ""String_Node_Str""+ twoWeekWarn).queue(msg -> {
    msg.delete().queueAfter(2,TimeUnit.SECONDS,null,exp -> {
      if (exp instanceof ErrorResponseException) {
        if (((ErrorResponseException)exp).getErrorCode() != 10008) {
          RestAction.DEFAULT_FAILURE.accept(exp);
        }
      }
    }
);
    ctx.message.addReaction(""String_Node_Str"").queue();
  }
);
}"
79561,"@Override public void onTrackStart(AudioPlayer player,AudioTrack track){
  current=track;
  if (track.getUserData() != null) {
    AudioTrackInfo info=track.getInfo();
    track.getUserData(ExtraTrackInfo.class).textChannel.sendMessage(""String_Node_Str"" + mentionClean(info.title) + ""String_Node_Str""+ Bot.formatDuration(info.length / 1000L)+ ""String_Node_Str"").queue();
  }
}","@Override public void onTrackStart(AudioPlayer player,AudioTrack track){
  try {
    current=track;
    if (track.getUserData() != null) {
      AudioTrackInfo info=track.getInfo();
      track.getUserData(ExtraTrackInfo.class).textChannel.sendMessage(""String_Node_Str"" + mentionClean(info.title) + ""String_Node_Str""+ Bot.formatDuration(info.length / 1000L)+ ""String_Node_Str"").queue();
    }
  }
 catch (  PermissionException ignored) {
  }
}"
79562,"@Override public void onTrackStuck(AudioPlayer player,AudioTrack track,long thresholdMs){
  if (track.getUserData() != null) {
    track.getUserData(ExtraTrackInfo.class).textChannel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
  }
  track.stop();
  nextTrack();
}","@Override public void onTrackStuck(AudioPlayer player,AudioTrack track,long thresholdMs){
  if (track.getUserData() != null) {
    try {
      track.getUserData(ExtraTrackInfo.class).textChannel.sendMessage(Emotes.getFailure() + ""String_Node_Str"").queue();
    }
 catch (    PermissionException ignored) {
    }
  }
  track.stop();
  nextTrack();
}"
79563,"@Override public void onTrackException(AudioPlayer player,AudioTrack track,FriendlyException exception){
  if (track.getUserData() != null) {
    track.getUserData(ExtraTrackInfo.class).textChannel.sendMessage(""String_Node_Str"" + exception.getMessage()).queue();
  }
}","@Override public void onTrackException(AudioPlayer player,AudioTrack track,FriendlyException exception){
  if (track.getUserData() != null) {
    try {
      track.getUserData(ExtraTrackInfo.class).textChannel.sendMessage(""String_Node_Str"" + exception.getMessage()).queue();
    }
 catch (    PermissionException ignored) {
    }
  }
}"
79564,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void cmdGuildInfo(Context ctx){
  String roleText=ctx.guild.getRoles().stream().filter(r -> !r.isPublicRole()).map(Role::getAsMention).collect(Collectors.joining(""String_Node_Str""));
  if (roleText.length() > 1024) {
    roleText=roleText.substring(0,1024).replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (roleText.length() < 1) {
    roleText=""String_Node_Str"";
  }
  TObjectIntMap<MemberStatus> statusMap=new TObjectIntHashMap<>();
  for (  Member member : ctx.guild.getMembers()) {
    MemberStatus status=MemberStatus.from(member);
    statusMap.adjustOrPutValue(status,1,1);
  }
  StringBuilder membersText=new StringBuilder();
  statusMap.forEachEntry((k,v) -> {
    membersText.append(Emotes.getStatusWithText(k)).append(':').append(' ').append(v).append('\n');
    return true;
  }
);
  membersText.append(Emotes.getPlus()).append(""String_Node_Str"").append(ctx.guild.getMembers().size() - 1);
  EmbedBuilder emb=new EmbedBuilder().setColor(val(ctx.guild.getSelfMember().getColor()).or(Color.WHITE)).setAuthor(ctx.guild.getName(),null,val(ctx.guild.getIconUrl()).or(ctx.jda.getSelfUser().getEffectiveAvatarUrl())).setFooter(ctx.guild.getSelfMember().getEffectiveName(),ctx.jda.getSelfUser().getEffectiveAvatarUrl()).setTimestamp(Instant.now()).addField(""String_Node_Str"",ctx.guild.getId(),true).addField(""String_Node_Str"",str(ctx.guild.getTextChannels().size() + ctx.guild.getVoiceChannels().size()),true).addField(""String_Node_Str"" + ctx.guild.getRoles().size() + ')',roleText,true).addField(""String_Node_Str"",str(ctx.guild.getEmotes().size()),true).addField(""String_Node_Str"",ctx.guild.getRegion().getName(),true).addField(""String_Node_Str"",ctx.guild.getOwner().getAsMention(),true).addField(""String_Node_Str"",ctx.guild.getPublicChannel().getAsMention(),true).addField(""String_Node_Str"",ctx.guild.getRequiredMFALevel().getKey() == 1 ? ""String_Node_Str"" : ""String_Node_Str"",true).addField(""String_Node_Str"",ctx.guild.getExplicitContentLevel().getDescription(),true).addField(""String_Node_Str"",WordUtils.capitalize(ctx.guild.getVerificationLevel().name().toLowerCase().replace('_',' ')),true).addField(""String_Node_Str"",membersText.toString(),true).setThumbnail(ctx.guild.getIconUrl());
  ctx.send(emb.build()).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void cmdGuildInfo(Context ctx){
  String roleText=ctx.guild.getRoles().stream().filter(r -> !r.isPublicRole()).map(Role::getAsMention).collect(Collectors.joining(""String_Node_Str""));
  if (roleText.length() > 1024) {
    roleText=roleText.substring(0,1024).replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (roleText.length() < 1) {
    roleText=""String_Node_Str"";
  }
  TObjectIntMap<MemberStatus> statusMap=new TObjectIntHashMap<>();
  for (  Member member : ctx.guild.getMembers()) {
    MemberStatus status=MemberStatus.from(member);
    statusMap.adjustOrPutValue(status,1,1);
  }
  StringBuilder membersText=new StringBuilder();
  statusMap.forEachEntry((k,v) -> {
    membersText.append(Emotes.getStatusWithText(k)).append(':').append(' ').append(v).append('\n');
    return true;
  }
);
  membersText.append(Emotes.getPlus()).append(""String_Node_Str"").append(ctx.guild.getMembers().size() - 1);
  EmbedBuilder emb=new EmbedBuilder().setColor(val(ctx.guild.getSelfMember().getColor()).or(Color.WHITE)).setAuthor(ctx.guild.getName(),null,val(ctx.guild.getIconUrl()).or(ctx.jda.getSelfUser().getEffectiveAvatarUrl())).setFooter(""String_Node_Str"",ctx.guild.getIconUrl()).setTimestamp(ctx.guild.getCreationTime()).addField(""String_Node_Str"",ctx.guild.getId(),true).addField(""String_Node_Str"",str(ctx.guild.getTextChannels().size() + ctx.guild.getVoiceChannels().size()),true).addField(""String_Node_Str"" + ctx.guild.getRoles().size() + ')',roleText,true).addField(""String_Node_Str"",str(ctx.guild.getEmotes().size()),true).addField(""String_Node_Str"",ctx.guild.getRegion().getName(),true).addField(""String_Node_Str"",ctx.guild.getOwner().getAsMention(),true).addField(""String_Node_Str"",ctx.guild.getPublicChannel() == null ? ""String_Node_Str"" : ctx.guild.getPublicChannel().getAsMention(),true).addField(""String_Node_Str"",ctx.guild.getRequiredMFALevel().getKey() == 1 ? ""String_Node_Str"" : ""String_Node_Str"",true).addField(""String_Node_Str"",ctx.guild.getExplicitContentLevel().getDescription(),true).addField(""String_Node_Str"",WordUtils.capitalize(ctx.guild.getVerificationLevel().name().toLowerCase().replace('_',' ')),true).addField(""String_Node_Str"",membersText.toString(),true).setThumbnail(ctx.guild.getIconUrl());
  ctx.send(emb.build()).queue();
}"
79565,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void cmdInfo(Context ctx){
  ShardUtil shardUtil=bot.getShardUtil();
  EmbedBuilder emb=newEmbedWithAuthor(ctx,""String_Node_Str"").setColor(randomColor()).setDescription(""String_Node_Str"").addField(""String_Node_Str"",str(shardUtil.getGuildCount()),true).addField(""String_Node_Str"",bot.formatUptime(),true).addField(""String_Node_Str"",str(shardUtil.getRequestCount()),true).addField(""String_Node_Str"",str(Thread.activeCount()),true).addField(""String_Node_Str"",Bot.formatMemory(),true).addField(""String_Node_Str"",format(""String_Node_Str"",(int)Math.ceil(systemBean.getProcessCpuLoad() * 100),(int)Math.ceil(systemBean.getSystemCpuLoad() * 100)),true).addField(""String_Node_Str"",((Supplier<String>)() -> {
    double load=systemBean.getSystemLoadAverage();
    if (load == -1.0d)     return ""String_Node_Str"";
 else     return str(load);
  }
).get(),true).addField(""String_Node_Str"",str(shardUtil.getUserCount()),true).addField(""String_Node_Str"",str(shardUtil.getChannelCount()),true).addField(""String_Node_Str"",str(new HashSet<>(bot.commands.values()).size()),true).addField(""String_Node_Str"",str(shardUtil.getTrackCount()),true).addField(""String_Node_Str"",shardUtil.getStreamCount() + ""String_Node_Str"",true).addField(""String_Node_Str"",INFO_LINKS.replace(""String_Node_Str"",ctx.jda.asBot().getInviteUrl(PERMS_NEEDED)),false).setFooter(""String_Node_Str"" + bot.getShardNum(),null).setTimestamp(Instant.now());
  ctx.send(emb.build()).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public void cmdInfo(Context ctx){
  ShardUtil shardUtil=bot.getShardUtil();
  EmbedBuilder emb=newEmbedWithAuthor(ctx,""String_Node_Str"").setColor(randomColor()).setDescription(Emotes.getCredits() + ""String_Node_Str"").addField(""String_Node_Str"",str(shardUtil.getGuildCount()),true).addField(""String_Node_Str"",bot.formatUptime(),true).addField(""String_Node_Str"",str(shardUtil.getRequestCount()),true).addField(""String_Node_Str"",str(Thread.activeCount()),true).addField(""String_Node_Str"",Bot.formatMemory(),true).addField(""String_Node_Str"",format(""String_Node_Str"",(int)Math.ceil(systemBean.getProcessCpuLoad() * 100),(int)Math.ceil(systemBean.getSystemCpuLoad() * 100)),true).addField(""String_Node_Str"",((Supplier<String>)() -> {
    double load=systemBean.getSystemLoadAverage();
    if (load == -1.0d)     return ""String_Node_Str"";
 else     return str(load);
  }
).get(),true).addField(""String_Node_Str"",str(shardUtil.getUserCount()),true).addField(""String_Node_Str"",str(shardUtil.getChannelCount()),true).addField(""String_Node_Str"",str(new HashSet<>(bot.commands.values()).size()),true).addField(""String_Node_Str"",str(shardUtil.getTrackCount()),true).addField(""String_Node_Str"",shardUtil.getStreamCount() + ""String_Node_Str"",true).addField(""String_Node_Str"",INFO_LINKS.replace(""String_Node_Str"",ctx.jda.asBot().getInviteUrl(PERMS_NEEDED)),false).setFooter(""String_Node_Str"" + bot.getShardNum(),null).setTimestamp(Instant.now());
  ctx.send(emb.build()).queue();
}"
79566,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",perms={""String_Node_Str""},hidden=true,aliases={""String_Node_Str""},thread=true) public void cmdPatReload(Context ctx){
  boolean success=Bot.loadPatreonData();
  if (success) {
    ctx.send(Emotes.getSuccess() + ""String_Node_Str"");
  }
 else {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"");
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",perms={""String_Node_Str""},hidden=true,aliases={""String_Node_Str""},thread=true) public void cmdPatReload(Context ctx){
  boolean success=Bot.loadPatreonData();
  if (success) {
    ctx.send(Emotes.getSuccess() + ""String_Node_Str"").queue();
  }
 else {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
  }
}"
79567,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""}) public void cmdSupporters(Context ctx){
  if (!(Bot.patreonData.has(""String_Node_Str"") && Bot.patreonData.has(""String_Node_Str""))) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  EmbedBuilder emb=newEmbedWithAuthor(ctx).setColor(randomColor()).setDescription(""String_Node_Str"").setFooter(""String_Node_Str"",null);
  StringBuilder randBuilder=new StringBuilder();
  StringBuilder alwaysBuilder=new StringBuilder();
  List<Object> randList=Bot.patreonData.getJSONArray(""String_Node_Str"").toList();
  Collections.shuffle(randList);
  for (int i=0; i < randList.size() && i < 10; i++) {
    randBuilder.append(""String_Node_Str"").append((String)randList.get(i)).append('\n');
  }
  emb.addField(""String_Node_Str"",randBuilder.toString(),false);
  for (  Object name : Bot.patreonData.getJSONArray(""String_Node_Str"")) {
    alwaysBuilder.append(""String_Node_Str"").append((String)name).append('\n');
  }
  emb.addField(""String_Node_Str"",alwaysBuilder.toString(),false);
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""}) public void cmdSupporters(Context ctx){
  if (!(Bot.patreonData.has(""String_Node_Str"") && Bot.patreonData.has(""String_Node_Str""))) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  EmbedBuilder emb=newEmbedWithAuthor(ctx).setColor(randomColor()).setDescription(""String_Node_Str"").setFooter(""String_Node_Str"",null);
  StringBuilder randBuilder=new StringBuilder();
  StringBuilder alwaysBuilder=new StringBuilder();
  List<Object> randList=Bot.patreonData.getJSONArray(""String_Node_Str"").toList();
  Collections.shuffle(randList);
  for (int i=0; i < randList.size() && i < 10; i++) {
    randBuilder.append(""String_Node_Str"").append((String)randList.get(i)).append('\n');
  }
  emb.addField(""String_Node_Str"",randBuilder.toString(),false);
  for (  Object name : Bot.patreonData.getJSONArray(""String_Node_Str"")) {
    alwaysBuilder.append(""String_Node_Str"").append((String)name).append('\n');
  }
  emb.addField(""String_Node_Str"",alwaysBuilder.toString(),false);
  ctx.send(emb.build()).queue();
}"
79568,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},perms={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdPurge(Context ctx){
  if (bot.isSelfbot()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (ctx.rawArgs.length() < 1) {
    ctx.send(PURGE_NO_PARAMS).queue();
    return;
  }
  if (!ctx.guild.getSelfMember().hasPermission((Channel)ctx.channel,Permission.MESSAGE_MANAGE)) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  Matcher matcher;
  String args=ctx.rawArgs;
  String regex=null;
  List<String> substrings=new LinkedList<>();
  TLongList userIds=new TLongLinkedList();
  int limit=0;
  TextChannel channel=ctx.event.getTextChannel();
  args=match(PURGE_QUOTE_PATTERN,args,m -> {
    substrings.add(m.group(1).toLowerCase().trim());
  }
);
  matcher=PURGE_REGEX_PATTERN.matcher(args);
  if (matcher.find())   regex=matcher.group(1);
  args=match(PURGE_MENTION_PATTERN,args,m -> {
    userIds.add(MiscUtil.parseSnowflake(m.group(1)));
  }
);
  matcher=PURGE_NUM_PATTERN.matcher(args);
  if (matcher.find()) {
    try {
      limit=Integer.parseInt(matcher.group(1).trim());
    }
 catch (    NumberFormatException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  args=args.replaceAll(PURGE_NUM_PATTERN.pattern(),""String_Node_Str"");
  if (limit > 500 || limit < 2) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  boolean bots=args.contains(""String_Node_Str"");
  boolean embeds=args.contains(""String_Node_Str"");
  boolean links=args.contains(""String_Node_Str"");
  boolean attachments=args.contains(""String_Node_Str"");
  boolean none=substrings.isEmpty() && regex == null && userIds.isEmpty() && !bots && !embeds && !links && !attachments;
  String twoWeekWarn=""String_Node_Str"";
  OffsetDateTime maxAge=ctx.message.getCreationTime().minusWeeks(2).plusMinutes(1);
  List<Message> toDelete=new LinkedList<>();
  for (  Message msg : channel.getIterableHistory()) {
    if (toDelete.size() >= limit)     break;
    if (msg.getIdLong() == ctx.message.getIdLong())     continue;
    if (msg.getCreationTime().isBefore(maxAge)) {
      twoWeekWarn=""String_Node_Str"";
      break;
    }
    if (none || userIds.contains(msg.getAuthor().getIdLong()) || (bots && msg.getAuthor().isBot())|| (embeds && !msg.getEmbeds().isEmpty())|| (attachments && !msg.getAttachments().isEmpty())|| (links && PURGE_LINK_PATTERN.matcher(msg.getRawContent()).find())) {
      toDelete.add(msg);
      continue;
    }
    if (substrings.stream().anyMatch(ss -> msg.getRawContent().contains(ss))) {
      toDelete.add(msg);
      continue;
    }
    try {
      if (regex != null && msg.getRawContent().matches(regex))       toDelete.add(msg);
    }
 catch (    PatternSyntaxException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  if (toDelete.isEmpty()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
 else   if (toDelete.size() < 2) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (toDelete.size() <= 100) {
    channel.deleteMessages(toDelete).complete();
  }
 else {
    for (int i=0; i <= toDelete.size(); i+=100) {
      List<Message> list=toDelete.subList(i,Math.min(i + 100,toDelete.size()));
      if (list.isEmpty())       break;
      channel.deleteMessages(list).complete();
    }
  }
  ctx.send(Emotes.getSuccess() + ""String_Node_Str"" + toDelete.size()+ ""String_Node_Str""+ twoWeekWarn).queue(msg -> {
    msg.delete().queueAfter(2,TimeUnit.SECONDS);
    ctx.message.addReaction(""String_Node_Str"").queue();
  }
);
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},perms={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdPurge(Context ctx){
  if (bot.isSelfbot()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (ctx.rawArgs.length() < 1) {
    ctx.send(PURGE_NO_PARAMS).queue();
    return;
  }
  if (!ctx.guild.getSelfMember().hasPermission((Channel)ctx.channel,Permission.MESSAGE_MANAGE)) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  Matcher matcher;
  String args=ctx.rawArgs;
  String regex=null;
  List<String> substrings=new LinkedList<>();
  TLongList userIds=new TLongLinkedList();
  int limit=0;
  TextChannel channel=ctx.event.getTextChannel();
  args=match(PURGE_QUOTE_PATTERN,args,m -> {
    substrings.add(m.group(1).toLowerCase().trim());
  }
);
  matcher=PURGE_REGEX_PATTERN.matcher(args);
  if (matcher.find())   regex=matcher.group(1);
  args=match(PURGE_MENTION_PATTERN,args,m -> {
    userIds.add(MiscUtil.parseSnowflake(m.group(1)));
  }
);
  matcher=PURGE_NUM_PATTERN.matcher(args);
  if (matcher.find()) {
    try {
      limit=Integer.parseInt(matcher.group(1).trim());
    }
 catch (    NumberFormatException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  args=args.replaceAll(PURGE_NUM_PATTERN.pattern(),""String_Node_Str"");
  if (limit > 500 || limit < 2) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  boolean bots=args.contains(""String_Node_Str"");
  boolean embeds=args.contains(""String_Node_Str"");
  boolean links=args.contains(""String_Node_Str"");
  boolean attachments=args.contains(""String_Node_Str"");
  boolean none=substrings.isEmpty() && regex == null && userIds.isEmpty() && !bots && !embeds && !links && !attachments;
  String twoWeekWarn=""String_Node_Str"";
  OffsetDateTime maxAge=ctx.message.getCreationTime().minusWeeks(2).plusMinutes(1);
  List<Message> toDelete=new LinkedList<>();
  for (  Message msg : channel.getIterableHistory()) {
    if (toDelete.size() >= limit)     break;
    if (msg.getIdLong() == ctx.message.getIdLong())     continue;
    if (msg.getCreationTime().isBefore(maxAge)) {
      twoWeekWarn=""String_Node_Str"";
      break;
    }
    if (none || userIds.contains(msg.getAuthor().getIdLong()) || (bots && msg.getAuthor().isBot())|| (embeds && !msg.getEmbeds().isEmpty())|| (attachments && !msg.getAttachments().isEmpty())|| (links && PURGE_LINK_PATTERN.matcher(msg.getRawContent()).find())) {
      toDelete.add(msg);
      continue;
    }
    if (substrings.stream().anyMatch(ss -> msg.getRawContent().contains(ss))) {
      toDelete.add(msg);
      continue;
    }
    try {
      if (regex != null && msg.getRawContent().matches(regex))       toDelete.add(msg);
    }
 catch (    PatternSyntaxException e) {
      ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
      return;
    }
  }
  if (toDelete.isEmpty()) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
 else   if (toDelete.size() < 2) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  if (toDelete.size() <= 100) {
    channel.deleteMessages(toDelete).complete();
  }
 else {
    for (int i=0; i <= toDelete.size(); i+=99) {
      List<Message> list=toDelete.subList(i,Math.min(i + 99,toDelete.size()));
      if (list.isEmpty())       break;
      channel.deleteMessages(list).complete();
    }
  }
  ctx.send(Emotes.getSuccess() + ""String_Node_Str"" + toDelete.size()+ ""String_Node_Str""+ twoWeekWarn).queue(msg -> {
    msg.delete().queueAfter(2,TimeUnit.SECONDS);
    ctx.message.addReaction(""String_Node_Str"").queue();
  }
);
}"
79569,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str""},thread=true) public void cmdGoogle(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  final String query=String.join(""String_Node_Str"",ctx.args);
  String key=bot.getKeys().optString(""String_Node_Str"");
  if (key == null) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    bot.logger.error(""String_Node_Str"",e);
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  try {
    ctx.send(cache.get(format(API_URL_BASE,key,encodedQuery))).queue();
  }
 catch (  ExecutionException e) {
    logger.error(""String_Node_Str"",e.getCause());
    ctx.send(FAILED_EMBED).queue();
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str""},thread=true) public void cmdGoogle(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  final String query=String.join(""String_Node_Str"",ctx.args);
  String key=bot.getKeys().optString(""String_Node_Str"");
  if (key == null) {
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    bot.logger.error(""String_Node_Str"",e);
    ctx.send(Emotes.getFailure() + ""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  try {
    ctx.send(cache.get(format(API_URL_BASE,key,encodedQuery))).queue();
  }
 catch (  ExecutionException|UncheckedExecutionException e) {
    logger.error(""String_Node_Str"",e.getCause());
    ctx.send(FAILED_EMBED).queue();
  }
}"
79570,"private void quoteCmdList(Context ctx) throws SQLException {
  List<Quote> quotes=dao.queryBuilder().orderBy(""String_Node_Str"",true).query();
  if (quotes.size() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String[] renderedQuotes=new String[quotes.size()];
  for (int i=0; i < quotes.size(); i++)   renderedQuotes[i]=quotes.get(i).render();
  String name;
  Color color;
  if (ctx.guild == null) {
    color=Color.BLUE;
    name=ctx.author.getName();
  }
 else {
    color=val(ctx.member.getColor()).or(Color.RED);
    name=ctx.member.getEffectiveName();
  }
  PaginatorBuilder builder=new PaginatorBuilder().setColumns(1).useNumberedItems(false).setItemsPerPage(12).waitOnSinglePage(false).showPageNumbers(true).setColor(color).setText(""String_Node_Str"").setItems(renderedQuotes).setFinalAction(msg -> {
    msg.editMessage(new MessageBuilder().append(""String_Node_Str"").setEmbed(new EmbedBuilder().setColor(color).setAuthor(name,null,ctx.author.getEffectiveAvatarUrl()).setFooter(""String_Node_Str"",null).build()).build()).queue();
    try {
      msg.clearReactions().queue();
    }
 catch (    PermissionException ignored) {
    }
  }
).setEventWaiter(bot.getEventWaiter()).setTimeout(2,TimeUnit.MINUTES).addUsers(ctx.author);
  builder.build().paginate(ctx.channel,1);
}","private void quoteCmdList(Context ctx) throws SQLException {
  List<Quote> quotes=dao.queryBuilder().orderBy(""String_Node_Str"",true).query();
  if (quotes.size() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String[] renderedQuotes=new String[quotes.size()];
  for (int i=0; i < quotes.size(); i++)   renderedQuotes[i]=quotes.get(i).render();
  int page=1;
  if (ctx.args.size() > 1) {
    if (ctx.args.get(1).matches(""String_Node_Str"")) {
      int wantedPage=Integer.parseInt(ctx.args.get(1));
      int max=(int)Math.ceil(renderedQuotes.length / 12);
      if (wantedPage > max) {
        ctx.send(""String_Node_Str"" + max + ""String_Node_Str"").queue();
        return;
      }
 else {
        page=wantedPage;
      }
    }
  }
  String name;
  Color color;
  if (ctx.guild == null) {
    color=Color.BLUE;
    name=ctx.author.getName();
  }
 else {
    color=val(ctx.member.getColor()).or(Color.RED);
    name=ctx.member.getEffectiveName();
  }
  PaginatorBuilder builder=new PaginatorBuilder().setColumns(1).useNumberedItems(false).setItemsPerPage(12).waitOnSinglePage(false).showPageNumbers(true).setColor(color).setText(""String_Node_Str"").setItems(renderedQuotes).setFinalAction(msg -> {
    msg.editMessage(new MessageBuilder().append(""String_Node_Str"").setEmbed(new EmbedBuilder().setColor(color).setAuthor(name,null,ctx.author.getEffectiveAvatarUrl()).setFooter(""String_Node_Str"",null).build()).build()).queue();
    try {
      msg.clearReactions().queue();
    }
 catch (    PermissionException ignored) {
    }
  }
).setEventWaiter(bot.getEventWaiter()).setTimeout(2,TimeUnit.MINUTES).addUsers(ctx.author);
  builder.build().paginate(ctx.channel,page);
}"
79571,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases={""String_Node_Str""}) public void cmdInvite(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(ctx.jda.asBot().getInviteUrl(PERMS_NEEDED)).queue();
  }
 else {
    if (!ctx.rawArgs.matches(""String_Node_Str"")) {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
    ctx.send(format(""String_Node_Str"",ctx.rawArgs)).queue();
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",aliases={""String_Node_Str""}) public void cmdInvite(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send('<' + ctx.jda.asBot().getInviteUrl(PERMS_NEEDED) + '>').queue();
  }
 else {
    if (!ctx.rawArgs.matches(""String_Node_Str"")) {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
    ctx.send(format(""String_Node_Str"",ctx.rawArgs)).queue();
  }
}"
79572,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"") public void cmdCharlie(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(Emotes.getFailure() + ' ' + ""String_Node_Str"").queue();
    return;
  }
  String question=ctx.rawArgs.endsWith(""String_Node_Str"") ? ctx.rawArgs : ctx.rawArgs + ""String_Node_Str"";
  ctx.send(format(""String_Node_Str"",question,(randint(0,1) == 1 ? ""String_Node_Str"" : ""String_Node_Str""))).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"") public void cmdCharlie(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String question=ctx.rawArgs.endsWith(""String_Node_Str"") ? ctx.rawArgs : ctx.rawArgs + ""String_Node_Str"";
  ctx.send(format(""String_Node_Str"",question,(randint(0,1) == 1 ? ""String_Node_Str"" : ""String_Node_Str""))).queue();
}"
79573,"@Override public MessageEmbed load(String key) throws UnirestException {
  JSONObject resp=Unirest.get(key).asJson().getBody().getObject();
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setTitle(""String_Node_Str"").setAuthor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (resp.has(""String_Node_Str"")) {
    JSONArray items=resp.getJSONArray(""String_Node_Str"");
    if (items.length() > 0) {
      JSONObject result=items.getJSONObject(0);
      emb.setTitle(result.getString(""String_Node_Str"")).setDescription(result.getString(""String_Node_Str"")).addField(""String_Node_Str"",result.getString(""String_Node_Str""),false);
      try {
        JSONObject meta=result.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"").getJSONObject(0);
        if (meta.has(""String_Node_Str"")) {
          if (meta.has(""String_Node_Str"")) {
            if (meta.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
              emb.setImage(meta.getString(""String_Node_Str""));
            }
 else {
              emb.setThumbnail(meta.getString(""String_Node_Str""));
            }
          }
 else {
            emb.setThumbnail(meta.getString(""String_Node_Str""));
          }
        }
 else         if (meta.has(""String_Node_Str"")) {
          emb.setThumbnail(meta.getString(""String_Node_Str""));
        }
      }
 catch (      JSONException ignored) {
      }
    }
 else {
      emb.setDescription(""String_Node_Str"");
    }
  }
 else   if (resp.has(""String_Node_Str"")) {
    logger.error(""String_Node_Str"",resp.getJSONObject(""String_Node_Str""));
    emb.setDescription(Emotes.getFailure() + ' ' + ""String_Node_Str"");
  }
 else   if (resp.has(""String_Node_Str"") && resp.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"") < 1) {
    emb.setDescription(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"",resp);
    emb.setDescription(Emotes.getFailure() + ' ' + ""String_Node_Str"");
  }
  return emb.build();
}","@Override public MessageEmbed load(String key) throws UnirestException {
  JSONObject resp=Unirest.get(key).asJson().getBody().getObject();
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setTitle(""String_Node_Str"").setAuthor(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (resp.has(""String_Node_Str"")) {
    JSONArray items=resp.getJSONArray(""String_Node_Str"");
    if (items.length() > 0) {
      JSONObject result=items.getJSONObject(0);
      emb.setTitle(result.getString(""String_Node_Str"")).setDescription(result.getString(""String_Node_Str"")).addField(""String_Node_Str"",result.getString(""String_Node_Str""),false);
      try {
        JSONObject meta=result.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"").getJSONObject(0);
        if (meta.has(""String_Node_Str"")) {
          if (meta.has(""String_Node_Str"")) {
            if (meta.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
              emb.setImage(meta.getString(""String_Node_Str""));
            }
 else {
              emb.setThumbnail(meta.getString(""String_Node_Str""));
            }
          }
 else {
            emb.setThumbnail(meta.getString(""String_Node_Str""));
          }
        }
 else         if (meta.has(""String_Node_Str"")) {
          emb.setThumbnail(meta.getString(""String_Node_Str""));
        }
      }
 catch (      JSONException ignored) {
      }
    }
 else {
      emb.setDescription(""String_Node_Str"");
    }
  }
 else   if (resp.has(""String_Node_Str"")) {
    logger.error(""String_Node_Str"",resp.getJSONObject(""String_Node_Str""));
    emb.setDescription(""String_Node_Str"");
  }
 else   if (resp.has(""String_Node_Str"") && resp.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"") < 1) {
    emb.setDescription(""String_Node_Str"");
  }
 else {
    logger.info(""String_Node_Str"",resp);
    emb.setDescription(""String_Node_Str"");
  }
  return emb.build();
}"
79574,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str""},thread=true) public void cmdGoogle(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(Emotes.getFailure() + ' ' + ""String_Node_Str"").queue();
    return;
  }
  final String query=String.join(""String_Node_Str"",ctx.args);
  String key=bot.getKeys().optString(""String_Node_Str"");
  if (key == null) {
    ctx.send(Emotes.getFailure() + ' ' + ""String_Node_Str"").queue();
    return;
  }
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    bot.logger.error(""String_Node_Str"",e);
    ctx.send(Emotes.getFailure() + ' ' + ""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  try {
    ctx.send(cache.get(format(API_URL_BASE,key,encodedQuery))).queue();
  }
 catch (  ExecutionException e) {
    logger.error(""String_Node_Str"",e.getCause());
    ctx.send(FAILED_EMBED).queue();
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str""},thread=true) public void cmdGoogle(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(Emotes.getFailure() + ' ' + ""String_Node_Str"").queue();
    return;
  }
  final String query=String.join(""String_Node_Str"",ctx.args);
  String key=bot.getKeys().optString(""String_Node_Str"");
  if (key == null) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    bot.logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  try {
    ctx.send(cache.get(format(API_URL_BASE,key,encodedQuery))).queue();
  }
 catch (  ExecutionException e) {
    logger.error(""String_Node_Str"",e.getCause());
    ctx.send(FAILED_EMBED).queue();
  }
}"
79575,"@Override public void onMessageReceived(MessageReceivedEvent event){
  final JDA jda=event.getJDA();
  final User author=event.getAuthor();
  if (author.isBot())   return;
  if (author.getIdLong() == jda.getSelfUser().getIdLong())   return;
  final Message message=event.getMessage();
  final String prefix;
  if (message.getGuild() == null) {
    prefix=shardUtil.getPrefixStore().getDefaultPrefix();
  }
 else {
    prefix=shardUtil.getPrefixStore().getPrefix(message.getGuild().getIdLong());
  }
  final String content=message.getRawContent();
  final MessageChannel channel=event.getChannel();
  if (content.startsWith(prefix)) {
    String[] split=content.substring(prefix.length()).split(""String_Node_Str"");
    List<String> args=new ArrayList<>(split.length - 1);
    for (int i=1; i < split.length; i++)     args.add(split[i]);
    String cmdName=split[0].toLowerCase();
    if (commands.containsKey(cmdName)) {
      Command command=commands.get(cmdName);
      try {
        command.invoke(this,event,args,prefix,cmdName);
      }
 catch (      IllegalAccessException e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(""String_Node_Str"").queue();
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        if (cause == null) {
          logger.error(""String_Node_Str"",cmdName,e);
          channel.sendMessage(""String_Node_Str"").queue();
        }
 else         if (cause instanceof PassException) {
        }
 else {
          logger.error(""String_Node_Str"",cmdName,cause);
          channel.sendMessage(format(""String_Node_Str"",prefix,cmdName,vagueTrace(cause))).queue();
          if (command.reportErrors)           reportErrorToOwner(cause,message,command);
        }
      }
catch (      PermissionError e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName,Strings.smartJoin(command.getFriendlyPerms(),""String_Node_Str""))).queue();
      }
catch (      GuildOnlyError e) {
        channel.sendMessage(""String_Node_Str"").queue();
      }
catch (      CheckFailure e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName)).queue();
      }
catch (      Exception e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(""String_Node_Str"").queue();
      }
      if (commandCalls.containsKey(command.name)) {
        commandCalls.get(command.name).incrementAndGet();
      }
 else {
        commandCalls.put(command.name,new AtomicInteger(1));
      }
    }
  }
 else {
    String mention=message.getGuild() == null ? jda.getSelfUser().getAsMention() : message.getGuild().getSelfMember().getAsMention();
    if (content.startsWith(mention)) {
      if (content.substring(mention.length()).trim().equalsIgnoreCase(""String_Node_Str"")) {
        channel.sendMessage(""String_Node_Str"" + prefix + ""String_Node_Str"").queue();
      }
 else {
        channel.sendMessage(""String_Node_Str"" + Cog.getTag(jda.getSelfUser()) + ""String_Node_Str"").queue();
      }
    }
  }
}","@Override public void onMessageReceived(MessageReceivedEvent event){
  final JDA jda=event.getJDA();
  final User author=event.getAuthor();
  if (author.isBot())   return;
  if (author.getIdLong() == jda.getSelfUser().getIdLong())   return;
  final Message message=event.getMessage();
  final String prefix;
  if (message.getGuild() == null) {
    prefix=shardUtil.getPrefixStore().getDefaultPrefix();
  }
 else {
    prefix=shardUtil.getPrefixStore().getPrefix(message.getGuild().getIdLong());
  }
  final String content=message.getRawContent();
  final MessageChannel channel=event.getChannel();
  if (content.startsWith(prefix)) {
    String[] split=content.substring(prefix.length()).split(""String_Node_Str"");
    List<String> args=new ArrayList<>(split.length - 1);
    for (int i=1; i < split.length; i++)     args.add(split[i]);
    String cmdName=split[0].toLowerCase();
    if (commands.containsKey(cmdName)) {
      Command command=commands.get(cmdName);
      try {
        command.invoke(this,event,args,prefix,cmdName);
      }
 catch (      IllegalAccessException e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(""String_Node_Str"").queue();
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        if (cause == null) {
          logger.error(""String_Node_Str"",cmdName,e);
          channel.sendMessage(""String_Node_Str"").queue();
        }
 else         if (cause instanceof PassException) {
        }
 else         if (cause instanceof PermissionError) {
          channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName,Strings.smartJoin(((PermissionError)cause).getFriendlyPerms(),""String_Node_Str""))).queue();
        }
 else         if (cause instanceof PermissionException) {
          channel.sendMessage(""String_Node_Str"" + ((PermissionException)cause).getPermission().getName() + ""String_Node_Str"").queue();
        }
 else {
          logger.error(""String_Node_Str"",cmdName,cause);
          channel.sendMessage(format(""String_Node_Str"",prefix,cmdName,vagueTrace(cause))).queue();
          if (command.reportErrors)           reportErrorToOwner(cause,message,command);
        }
      }
catch (      PermissionError e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName,Strings.smartJoin(e.getFriendlyPerms(),""String_Node_Str""))).queue();
      }
catch (      GuildOnlyError e) {
        channel.sendMessage(""String_Node_Str"").queue();
      }
catch (      CheckFailure e) {
        channel.sendMessage(format(""String_Node_Str"",author.getAsMention(),prefix,cmdName)).queue();
      }
catch (      Exception e) {
        logger.error(""String_Node_Str"",cmdName,e);
        channel.sendMessage(""String_Node_Str"").queue();
      }
      if (commandCalls.containsKey(command.name)) {
        commandCalls.get(command.name).incrementAndGet();
      }
 else {
        commandCalls.put(command.name,new AtomicInteger(1));
      }
    }
  }
 else {
    String mention=message.getGuild() == null ? jda.getSelfUser().getAsMention() : message.getGuild().getSelfMember().getAsMention();
    if (content.startsWith(mention)) {
      if (content.substring(mention.length()).trim().equalsIgnoreCase(""String_Node_Str"")) {
        channel.sendMessage(""String_Node_Str"" + prefix + ""String_Node_Str"").queue();
      }
 else {
        channel.sendMessage(""String_Node_Str"" + Cog.getTag(jda.getSelfUser()) + ""String_Node_Str"").queue();
      }
    }
  }
}"
79576,"public void invoke(Bot bot,MessageReceivedEvent event,List<String> args,String prefix,String invoker) throws IllegalAccessException, InvocationTargetException, CheckFailure {
  Context ctx=new Context(bot,event,args,prefix,invoker);
  runChecks(ctx);
  if (needThread) {
    Runnable task=() -> {
      try {
        func.invoke(cog,ctx);
      }
 catch (      IllegalAccessException e) {
        bot.logger.error(""String_Node_Str"",invoker,e);
        event.getChannel().sendMessage(""String_Node_Str"").queue();
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        if (cause == null) {
          bot.logger.error(""String_Node_Str"",invoker,e);
          event.getChannel().sendMessage(""String_Node_Str"").queue();
        }
 else         if (cause instanceof PassException) {
        }
 else {
          bot.logger.error(""String_Node_Str"",invoker,cause);
          event.getChannel().sendMessage(format(""String_Node_Str"",prefix,invoker,bot.vagueTrace(cause))).queue();
          if (reportErrors)           bot.reportErrorToOwner(cause,event.getMessage(),this);
        }
      }
catch (      PermissionError e) {
        event.getChannel().sendMessage(format(""String_Node_Str"",event.getAuthor().getAsMention(),prefix,invoker,Strings.smartJoin(permsRequired,""String_Node_Str""))).queue();
      }
catch (      GuildOnlyError e) {
        event.getChannel().sendMessage(""String_Node_Str"").queue();
      }
catch (      CheckFailure e) {
        event.getChannel().sendMessage(format(""String_Node_Str"",event.getAuthor().getAsMention(),prefix,invoker)).queue();
      }
catch (      Exception e) {
        bot.logger.error(""String_Node_Str"",invoker,e);
        event.getChannel().sendMessage(format(""String_Node_Str"",prefix,invoker,e.toString())).queue();
      }
    }
;
    if (bot.threadExecutor.getActiveCount() >= bot.threadExecutor.getMaximumPoolSize()) {
      event.getChannel().sendMessage(""String_Node_Str"").queue();
    }
    bot.threadExecutor.execute(task);
  }
 else {
    func.invoke(cog,ctx);
  }
}","public void invoke(Bot bot,MessageReceivedEvent event,List<String> args,String prefix,String invoker) throws IllegalAccessException, InvocationTargetException, CheckFailure {
  Context ctx=new Context(bot,event,args,prefix,invoker);
  runChecks(ctx);
  if (needThread) {
    Runnable task=() -> {
      try {
        func.invoke(cog,ctx);
      }
 catch (      IllegalAccessException e) {
        bot.logger.error(""String_Node_Str"",invoker,e);
        event.getChannel().sendMessage(""String_Node_Str"").queue();
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        if (cause == null) {
          bot.logger.error(""String_Node_Str"",invoker,e);
          event.getChannel().sendMessage(""String_Node_Str"").queue();
        }
 else         if (cause instanceof PassException) {
        }
 else         if (cause instanceof PermissionError) {
          event.getChannel().sendMessage(format(""String_Node_Str"",event.getAuthor().getAsMention(),prefix,invoker,Strings.smartJoin(((PermissionError)cause).getFriendlyPerms(),""String_Node_Str""))).queue();
        }
 else         if (cause instanceof PermissionException) {
          event.getChannel().sendMessage(""String_Node_Str"" + ((PermissionException)cause).getPermission().getName() + ""String_Node_Str"").queue();
        }
 else {
          bot.logger.error(""String_Node_Str"",invoker,cause);
          event.getChannel().sendMessage(format(""String_Node_Str"",prefix,invoker,bot.vagueTrace(cause))).queue();
          if (reportErrors)           bot.reportErrorToOwner(cause,event.getMessage(),this);
        }
      }
catch (      PermissionError e) {
        event.getChannel().sendMessage(format(""String_Node_Str"",event.getAuthor().getAsMention(),prefix,invoker,Strings.smartJoin(e.getFriendlyPerms(),""String_Node_Str""))).queue();
      }
catch (      GuildOnlyError e) {
        event.getChannel().sendMessage(""String_Node_Str"").queue();
      }
catch (      CheckFailure e) {
        event.getChannel().sendMessage(format(""String_Node_Str"",event.getAuthor().getAsMention(),prefix,invoker)).queue();
      }
catch (      Exception e) {
        bot.logger.error(""String_Node_Str"",invoker,e);
        event.getChannel().sendMessage(format(""String_Node_Str"",prefix,invoker,e.toString())).queue();
      }
    }
;
    if (bot.threadExecutor.getActiveCount() >= bot.threadExecutor.getMaximumPoolSize()) {
      event.getChannel().sendMessage(""String_Node_Str"").queue();
    }
    bot.threadExecutor.execute(task);
  }
 else {
    func.invoke(cog,ctx);
  }
}"
79577,"public static void checkPerms(Context ctx,String[] permsRequired){
  if (!Permissions.check(permsRequired,ctx))   throw new PermissionError(""String_Node_Str"");
}","public static void checkPerms(Context ctx,String[] permsRequired){
  if (!Permissions.check(permsRequired,ctx))   throw new PermissionError(""String_Node_Str"").setPerms(permsRequired);
}"
79578,"ShardUtil(int shardCount,JSONObject config){
  this.shardCount=shardCount;
  this.config=config;
  try {
    dbConn=new JdbcPooledConnectionSource(""String_Node_Str"" + config.optString(""String_Node_Str"",""String_Node_Str""),config.optString(""String_Node_Str"",null),config.optString(""String_Node_Str"",null));
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
    logger.warn(""String_Node_Str"");
    try {
      dbConn=new JdbcConnectionSource(""String_Node_Str"");
    }
 catch (    SQLException ex) {
      logger.error(""String_Node_Str"",ex);
      System.exit(-1);
    }
  }
  try {
    TableUtils.createTableIfNotExists(dbConn,BotAdmin.class);
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    adminDao=DaoManager.createDao(dbConn,BotAdmin.class);
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    TableUtils.createTableIfNotExists(dbConn,GuildPrefix.class);
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    Dao<GuildPrefix,Long> dao=DaoManager.createDao(dbConn,GuildPrefix.class);
    prefixStore=new PrefixStore(dao,config.optString(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    try {
      dbConn.close();
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
));
}","ShardUtil(int shardCount,JSONObject config){
  this.shardCount=shardCount;
  this.config=config;
  try {
    dbConn=new JdbcPooledConnectionSource(""String_Node_Str"" + config.optString(""String_Node_Str"",""String_Node_Str""),config.optString(""String_Node_Str"",null),config.optString(""String_Node_Str"",null));
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"",e);
    logger.warn(""String_Node_Str"");
    try {
      dbConn=new JdbcConnectionSource(""String_Node_Str"");
    }
 catch (    SQLException ex) {
      logger.error(""String_Node_Str"",ex);
      System.exit(-1);
    }
  }
  if (config.optString(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    DatabaseConnection tempConn=null;
    try {
      tempConn=dbConn.getReadWriteConnection(null);
      tempConn.executeStatement(""String_Node_Str"",DatabaseConnection.DEFAULT_RESULT_FLAGS);
    }
 catch (    SQLException e) {
      logger.warn(""String_Node_Str"",e);
    }
 finally {
      try {
        if (tempConn != null)         tempConn.close();
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"",e);
      }
    }
  }
  try {
    TableUtils.createTableIfNotExists(dbConn,BotAdmin.class);
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    adminDao=DaoManager.createDao(dbConn,BotAdmin.class);
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    TableUtils.createTableIfNotExists(dbConn,GuildPrefix.class);
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  try {
    Dao<GuildPrefix,Long> dao=DaoManager.createDao(dbConn,GuildPrefix.class);
    prefixStore=new PrefixStore(dao,config.optString(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
  Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    try {
      dbConn.close();
    }
 catch (    IOException e) {
      logger.warn(""String_Node_Str"",e);
    }
  }
));
}"
79579,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str""},thread=true) public void cmdGoogle(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  final String query=String.join(""String_Node_Str"",ctx.args);
  String key=bot.getKeys().optString(""String_Node_Str"");
  if (key == null) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    bot.logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  try {
    ctx.send(cache.get(format(API_URL_BASE,key,encodedQuery))).queue();
  }
 catch (  ExecutionException e) {
    logger.error(""String_Node_Str"",e.getCause());
    ctx.send(FAILED_EMBED).queue();
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str""},thread=true) public void cmdGoogle(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  final String query=String.join(""String_Node_Str"",ctx.args);
  String key=bot.getKeys().optString(""String_Node_Str"");
  if (key == null) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    bot.logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  try {
    ctx.send(cache.get(format(API_URL_BASE,key,encodedQuery))).queue();
  }
 catch (  ExecutionException e) {
    logger.error(""String_Node_Str"",e.getCause());
    ctx.send(FAILED_EMBED).queue();
  }
}"
79580,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},perms={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdPurge(Context ctx){
  if (bot.isSelfbot()) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  if (ctx.rawArgs.length() < 1) {
    ctx.send(PURGE_NO_PARAMS).queue();
    return;
  }
  if (!ctx.guild.getSelfMember().hasPermission((Channel)ctx.channel,Permission.MESSAGE_MANAGE)) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  Matcher matcher;
  String args=ctx.rawArgs;
  String regex=null;
  List<String> substrings=new LinkedList<>();
  List<Long> userIds=new LinkedList<>();
  int limit=0;
  TextChannel channel=ctx.event.getTextChannel();
  args=match(PURGE_QUOTE_PATTERN,args,m -> {
    substrings.add(m.group(1).toLowerCase().trim());
  }
);
  matcher=PURGE_REGEX_PATTERN.matcher(args);
  if (matcher.find())   regex=matcher.group(1);
  args=match(PURGE_MENTION_PATTERN,args,m -> {
    userIds.add(MiscUtil.parseSnowflake(m.group(1)));
  }
);
  matcher=PURGE_NUM_PATTERN.matcher(args);
  if (matcher.find()) {
    try {
      limit=Integer.parseInt(matcher.group(1).trim());
    }
 catch (    NumberFormatException e) {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  args=args.replaceAll(PURGE_NUM_PATTERN.pattern(),""String_Node_Str"");
  if (limit > 500 || limit < 2) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  boolean bots=args.contains(""String_Node_Str"");
  boolean embeds=args.contains(""String_Node_Str"");
  boolean links=args.contains(""String_Node_Str"");
  boolean attachments=args.contains(""String_Node_Str"");
  boolean none=substrings.isEmpty() && regex == null && userIds.isEmpty() && !bots && !embeds && !links && !attachments;
  String twoWeekWarn=""String_Node_Str"";
  OffsetDateTime maxAge=ctx.message.getCreationTime().minusWeeks(2).plusMinutes(1);
  List<Message> toDelete=new LinkedList<>();
  for (  Message msg : channel.getIterableHistory()) {
    if (toDelete.size() >= limit)     break;
    if (msg.getIdLong() == ctx.message.getIdLong())     continue;
    if (msg.getCreationTime().isBefore(maxAge)) {
      twoWeekWarn=""String_Node_Str"";
      break;
    }
    if (none || userIds.contains(msg.getAuthor().getIdLong()) || (bots && msg.getAuthor().isBot())|| (embeds && !msg.getEmbeds().isEmpty())|| (attachments && !msg.getAttachments().isEmpty())|| (links && PURGE_LINK_PATTERN.matcher(msg.getRawContent()).find())) {
      toDelete.add(msg);
      continue;
    }
    if (substrings.stream().anyMatch(ss -> msg.getRawContent().contains(ss))) {
      toDelete.add(msg);
      continue;
    }
    try {
      if (regex != null && msg.getRawContent().matches(regex))       toDelete.add(msg);
    }
 catch (    PatternSyntaxException e) {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  if (toDelete.isEmpty()) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
 else   if (toDelete.size() < 2) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  if (toDelete.size() <= 100) {
    channel.deleteMessages(toDelete).complete();
  }
 else {
    for (int i=0; i <= toDelete.size(); i+=100) {
      channel.deleteMessages(toDelete.subList(i,Math.min(i + 100,toDelete.size()))).complete();
    }
  }
  ctx.send(""String_Node_Str"" + toDelete.size() + ""String_Node_Str""+ twoWeekWarn).queue(msg -> {
    msg.delete().queueAfter(2,TimeUnit.SECONDS);
    ctx.message.addReaction(""String_Node_Str"").queue();
  }
);
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},perms={""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdPurge(Context ctx){
  if (bot.isSelfbot()) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  if (ctx.rawArgs.length() < 1) {
    ctx.send(PURGE_NO_PARAMS).queue();
    return;
  }
  if (!ctx.guild.getSelfMember().hasPermission((Channel)ctx.channel,Permission.MESSAGE_MANAGE)) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  Matcher matcher;
  String args=ctx.rawArgs;
  String regex=null;
  List<String> substrings=new LinkedList<>();
  List<Long> userIds=new LinkedList<>();
  int limit=0;
  TextChannel channel=ctx.event.getTextChannel();
  args=match(PURGE_QUOTE_PATTERN,args,m -> {
    substrings.add(m.group(1).toLowerCase().trim());
  }
);
  matcher=PURGE_REGEX_PATTERN.matcher(args);
  if (matcher.find())   regex=matcher.group(1);
  args=match(PURGE_MENTION_PATTERN,args,m -> {
    userIds.add(MiscUtil.parseSnowflake(m.group(1)));
  }
);
  matcher=PURGE_NUM_PATTERN.matcher(args);
  if (matcher.find()) {
    try {
      limit=Integer.parseInt(matcher.group(1).trim());
    }
 catch (    NumberFormatException e) {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  args=args.replaceAll(PURGE_NUM_PATTERN.pattern(),""String_Node_Str"");
  if (limit > 500 || limit < 2) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  boolean bots=args.contains(""String_Node_Str"");
  boolean embeds=args.contains(""String_Node_Str"");
  boolean links=args.contains(""String_Node_Str"");
  boolean attachments=args.contains(""String_Node_Str"");
  boolean none=substrings.isEmpty() && regex == null && userIds.isEmpty() && !bots && !embeds && !links && !attachments;
  String twoWeekWarn=""String_Node_Str"";
  OffsetDateTime maxAge=ctx.message.getCreationTime().minusWeeks(2).plusMinutes(1);
  List<Message> toDelete=new LinkedList<>();
  for (  Message msg : channel.getIterableHistory()) {
    if (toDelete.size() >= limit)     break;
    if (msg.getIdLong() == ctx.message.getIdLong())     continue;
    if (msg.getCreationTime().isBefore(maxAge)) {
      twoWeekWarn=""String_Node_Str"";
      break;
    }
    if (none || userIds.contains(msg.getAuthor().getIdLong()) || (bots && msg.getAuthor().isBot())|| (embeds && !msg.getEmbeds().isEmpty())|| (attachments && !msg.getAttachments().isEmpty())|| (links && PURGE_LINK_PATTERN.matcher(msg.getRawContent()).find())) {
      toDelete.add(msg);
      continue;
    }
    if (substrings.stream().anyMatch(ss -> msg.getRawContent().contains(ss))) {
      toDelete.add(msg);
      continue;
    }
    try {
      if (regex != null && msg.getRawContent().matches(regex))       toDelete.add(msg);
    }
 catch (    PatternSyntaxException e) {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  if (toDelete.isEmpty()) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
 else   if (toDelete.size() < 2) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  if (toDelete.size() <= 100) {
    channel.deleteMessages(toDelete).complete();
  }
 else {
    for (int i=0; i <= toDelete.size(); i+=100) {
      List<Message> list=toDelete.subList(i,Math.min(i + 100,toDelete.size()));
      if (list.isEmpty())       break;
      channel.deleteMessages(list).complete();
    }
  }
  ctx.send(""String_Node_Str"" + toDelete.size() + ""String_Node_Str""+ twoWeekWarn).queue(msg -> {
    msg.delete().queueAfter(2,TimeUnit.SECONDS);
    ctx.message.addReaction(""String_Node_Str"").queue();
  }
);
}"
79581,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",guildOnly=true) public void cmdPlay(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  if (ctx.guild.getSelfMember().getVoiceState().getChannel() == null) {
    summon(ctx);
  }
 else   if (ctx.guild.getSelfMember().getVoiceState().getChannel().getIdLong() != ctx.member.getVoiceState().getChannel().getIdLong()) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  AudioState state=getAudioState(ctx.guild);
  if (state.scheduler.queue.size() >= 10) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  final String term=String.join(""String_Node_Str"",ctx.args);
  ctx.message.addReaction(""String_Node_Str"").queue();
  playerManager.loadItem(term,new TrackLoadHandler(ctx,state,playerManager,term));
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",guildOnly=true) public void cmdPlay(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  try {
    if (ctx.guild.getSelfMember().getVoiceState().getChannel() == null) {
      summon(ctx);
    }
 else     if (ctx.guild.getSelfMember().getVoiceState().getChannel().getIdLong() != ctx.member.getVoiceState().getChannel().getIdLong()) {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 catch (  NullPointerException e) {
    logger.warn(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  AudioState state=getAudioState(ctx.guild);
  if (state.scheduler.queue.size() >= 10) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  final String term=String.join(""String_Node_Str"",ctx.args);
  ctx.message.addReaction(""String_Node_Str"").queue();
  playerManager.loadItem(term,new TrackLoadHandler(ctx,state,playerManager,term));
}"
79582,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void command(Context ctx){
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  if (ctx.rawArgs.length() < 1) {
    url.append(randint(1,ENTRY_COUNT));
  }
 else {
    if (ctx.rawArgs.matches(""String_Node_Str"")) {
      int requested=Integer.parseInt(ctx.rawArgs);
      if (requested >= 1 && requested <= ENTRY_COUNT)       url.append(requested);
 else {
        ctx.send(""String_Node_Str"").queue();
        return;
      }
    }
 else     if (ctx.rawArgs.matches(""String_Node_Str"")) {
      String pokemonName=StringUtils.remove(ctx.rawArgs.toLowerCase().replace(' ','-'),'.');
      url.append(pokemonName);
    }
 else {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  url.append('/');
  ctx.channel.sendTyping().queue();
  Pokemon pokemon;
  try {
    pokemon=pokeCache.get(url.toString());
  }
 catch (  ExecutionException container) {
    Throwable e=container.getCause();
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String descUrl=BASE_URI + Arrays.stream(pokemon.getDescriptions()).sorted(Collections.reverseOrder(Comparator.comparingInt(d -> Integer.parseInt(StringUtils.split(d.name,'_')[2])))).findFirst().orElse(new Description()).resourceUri;
  String desc;
  try {
    desc=descCache.get(descUrl);
  }
 catch (  ExecutionException container) {
    Throwable e=container.getCause();
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String imageUrl=format(""String_Node_Str"",pokemon.getNationalId());
  String stats=new StringBuilder().append(""String_Node_Str"").append(pokemon.getHp()).append('\n').append(""String_Node_Str"").append(pokemon.getAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getDefense()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialDefense()).toString();
  String evoString=Arrays.stream(pokemon.getEvolutions()).map(e -> WordUtils.capitalizeFully(e.to.replace('-',' '))).distinct().collect(Collectors.joining(""String_Node_Str""));
  float height=pokemon.getHeight() / 10.0f;
  double heightInches=height / .3048 % 1 * 12;
  float weight=pokemon.getWeight() / 10.0f;
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(""String_Node_Str"" + pokemon.getNationalId() + ""String_Node_Str""+ WordUtils.capitalizeFully(pokemon.getName().replace('-',' ')),null,imageUrl).setDescription(desc).addField(""String_Node_Str"",stats,true).addField(""String_Node_Str"",format(""String_Node_Str"",height,Math.floor(heightInches / 12),heightInches % 12),true).addField(""String_Node_Str"",format(""String_Node_Str"",weight,weight * 2.2),true).addField(""String_Node_Str"",str(pokemon.getSpeed()),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getAbilities()).map(a -> WordUtils.capitalizeFully(a.name.replace('-',' '))).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getTypes()).map(t -> WordUtils.capitalizeFully(t.name)).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",str(pokemon.getExp()),true).addField(""String_Node_Str"",str(pokemon.getHappiness()),true).addField(""String_Node_Str"",""String_Node_Str"".equals(evoString) ? ""String_Node_Str"" : evoString,true).addField(""String_Node_Str"",pokemon.getSpecies().equals(""String_Node_Str"") ? ""String_Node_Str"" : pokemon.getSpecies(),true).setImage(imageUrl);
  ctx.send(emb.build()).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void command(Context ctx){
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  if (ctx.rawArgs.length() < 1) {
    url.append(randint(1,ENTRY_COUNT));
  }
 else {
    if (ctx.rawArgs.matches(""String_Node_Str"")) {
      int requested=Integer.parseInt(ctx.rawArgs);
      if (requested >= 1 && requested <= ENTRY_COUNT)       url.append(requested);
 else {
        ctx.send(""String_Node_Str"").queue();
        return;
      }
    }
 else     if (ctx.rawArgs.matches(""String_Node_Str"")) {
      String pokemonName=StringUtils.remove(ctx.rawArgs.toLowerCase().replace(' ','-'),'.');
      url.append(pokemonName);
    }
 else {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  url.append('/');
  ctx.channel.sendTyping().queue();
  Pokemon pokemon;
  try {
    pokemon=pokeCache.get(url.toString());
  }
 catch (  ExecutionException|CacheLoader.InvalidCacheLoadException container) {
    Throwable e=container.getCause();
    logger.warn(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String descUrl=BASE_URI + Arrays.stream(pokemon.getDescriptions()).sorted(Collections.reverseOrder(Comparator.comparingInt(d -> Integer.parseInt(StringUtils.split(d.name,'_')[2])))).findFirst().orElse(new Description()).resourceUri;
  String desc;
  try {
    desc=descCache.get(descUrl);
  }
 catch (  ExecutionException|CacheLoader.InvalidCacheLoadException container) {
    Throwable e=container.getCause();
    logger.warn(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String imageUrl=format(""String_Node_Str"",pokemon.getNationalId());
  String stats=new StringBuilder().append(""String_Node_Str"").append(pokemon.getHp()).append('\n').append(""String_Node_Str"").append(pokemon.getAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getDefense()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialDefense()).toString();
  String evoString=Arrays.stream(pokemon.getEvolutions()).map(e -> WordUtils.capitalizeFully(e.to.replace('-',' '))).distinct().collect(Collectors.joining(""String_Node_Str""));
  float height=pokemon.getHeight() / 10.0f;
  double heightInches=height / .3048 % 1 * 12;
  float weight=pokemon.getWeight() / 10.0f;
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(""String_Node_Str"" + pokemon.getNationalId() + ""String_Node_Str""+ WordUtils.capitalizeFully(pokemon.getName().replace('-',' ')),null,imageUrl).setDescription(desc).addField(""String_Node_Str"",stats,true).addField(""String_Node_Str"",format(""String_Node_Str"",height,Math.floor(heightInches / 12),heightInches % 12),true).addField(""String_Node_Str"",format(""String_Node_Str"",weight,weight * 2.2),true).addField(""String_Node_Str"",str(pokemon.getSpeed()),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getAbilities()).map(a -> WordUtils.capitalizeFully(a.name.replace('-',' '))).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getTypes()).map(t -> WordUtils.capitalizeFully(t.name)).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",str(pokemon.getExp()),true).addField(""String_Node_Str"",str(pokemon.getHappiness()),true).addField(""String_Node_Str"",""String_Node_Str"".equals(evoString) ? ""String_Node_Str"" : evoString,true).addField(""String_Node_Str"",pokemon.getSpecies().equals(""String_Node_Str"") ? ""String_Node_Str"" : pokemon.getSpecies(),true).setImage(imageUrl);
  ctx.send(emb.build()).queue();
}"
79583,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",perms={""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdRepl(Context ctx){
  if (ctx.args.size() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String prefix=""String_Node_Str"";
  String language=ctx.args.get(0);
  ScriptEngineManager man=new ScriptEngineManager();
  if (language.equalsIgnoreCase(""String_Node_Str"")) {
    List<ScriptEngineFactory> factories=man.getEngineFactories();
    List<String> langs=new ArrayList<>();
    for (    ScriptEngineFactory factory : factories) {
      langs.add(format(""String_Node_Str"",factory.getEngineName(),factory.getEngineVersion(),factory.getLanguageName(),factory.getLanguageVersion()));
    }
    ctx.send(""String_Node_Str"" + StringUtils.join(langs,""String_Node_Str"")).queue();
    return;
  }
  ScriptEngine engine=man.getEngineByName(language.toLowerCase());
  if (engine == null) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  if (replSessions.contains(ctx.channel.getIdLong())) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  replSessions.add(ctx.channel.getIdLong());
  engine.put(""String_Node_Str"",ctx);
  engine.put(""String_Node_Str"",ctx);
  engine.put(""String_Node_Str"",ctx.bot);
  engine.put(""String_Node_Str"",null);
  engine.put(""String_Node_Str"",ctx.jda);
  engine.put(""String_Node_Str"",ctx.message);
  engine.put(""String_Node_Str"",ctx.author);
  engine.put(""String_Node_Str"",ctx.channel);
  engine.put(""String_Node_Str"",ctx.guild);
  engine.put(""String_Node_Str"",""String_Node_Str"");
  engine.put(""String_Node_Str"",ctx.message);
  ctx.send(""String_Node_Str"" + prefix).queue();
  while (true) {
    Message response=bot.waitForMessage(0,msg -> msg.getAuthor().getIdLong() == ctx.author.getIdLong() && msg.getChannel().getIdLong() == ctx.channel.getIdLong() && msg.getRawContent().startsWith(prefix));
    engine.put(""String_Node_Str"",response);
    engine.put(""String_Node_Str"",response);
    String cleaned=cleanupCode(response.getRawContent());
    if (stringExists(cleaned,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      ctx.send(""String_Node_Str"").queue();
      replSessions.remove(ctx.channel.getIdLong());
      break;
    }
    Object result;
    try {
      if (language.equals(""String_Node_Str""))       result=GROOVY_PRE_INJECT + engine.eval(cleaned);
 else       result=engine.eval(cleaned);
    }
 catch (    ScriptException e) {
      result=e.getCause();
      if (result instanceof ScriptException) {
        result=((ScriptException)result).getCause();
      }
    }
catch (    Throwable e) {
      logger.warn(""String_Node_Str"",e);
      result=bot.renderStackTrace(e);
    }
    if (result instanceof RestAction)     result=((RestAction)result).complete();
    engine.put(""String_Node_Str"",result);
    if (result != null) {
      try {
        ctx.send(""String_Node_Str"" + result.toString() + ""String_Node_Str"").queue();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"",e);
        try {
          ctx.send(""String_Node_Str"" + bot.renderStackTrace(e) + ""String_Node_Str"").queue();
        }
 catch (        Exception ex) {
          logger.error(""String_Node_Str"",ex);
        }
      }
    }
 else {
      response.addReaction(""String_Node_Str"").queue();
    }
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",perms={""String_Node_Str""},usage=""String_Node_Str"",thread=true) public void cmdRepl(Context ctx){
  if (ctx.args.size() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String prefix=""String_Node_Str"";
  String language=ctx.args.get(0);
  ScriptEngineManager man=new ScriptEngineManager();
  if (language.equalsIgnoreCase(""String_Node_Str"")) {
    List<ScriptEngineFactory> factories=man.getEngineFactories();
    List<String> langs=new ArrayList<>();
    for (    ScriptEngineFactory factory : factories) {
      langs.add(format(""String_Node_Str"",factory.getEngineName(),factory.getEngineVersion(),factory.getLanguageName(),factory.getLanguageVersion()));
    }
    ctx.send(""String_Node_Str"" + StringUtils.join(langs,""String_Node_Str"")).queue();
    return;
  }
  ScriptEngine engine=man.getEngineByName(language.toLowerCase());
  if (engine == null) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  if (replSessions.contains(ctx.channel.getIdLong())) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  replSessions.add(ctx.channel.getIdLong());
  engine.put(""String_Node_Str"",ctx);
  engine.put(""String_Node_Str"",ctx);
  engine.put(""String_Node_Str"",ctx.bot);
  engine.put(""String_Node_Str"",null);
  engine.put(""String_Node_Str"",ctx.jda);
  engine.put(""String_Node_Str"",ctx.message);
  engine.put(""String_Node_Str"",ctx.author);
  engine.put(""String_Node_Str"",ctx.channel);
  engine.put(""String_Node_Str"",ctx.guild);
  engine.put(""String_Node_Str"",""String_Node_Str"");
  engine.put(""String_Node_Str"",ctx.message);
  ctx.send(""String_Node_Str"" + prefix).queue();
  while (true) {
    Message response=bot.waitForMessage(0,msg -> msg.getAuthor().getIdLong() == ctx.author.getIdLong() && msg.getChannel().getIdLong() == ctx.channel.getIdLong() && msg.getRawContent().startsWith(prefix));
    engine.put(""String_Node_Str"",response);
    engine.put(""String_Node_Str"",response);
    String cleaned=cleanupCode(response.getRawContent());
    if (stringExists(cleaned,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      ctx.send(""String_Node_Str"").queue();
      replSessions.remove(ctx.channel.getIdLong());
      break;
    }
    Object result;
    try {
      if (language.equals(""String_Node_Str""))       result=GROOVY_PRE_INJECT + engine.eval(cleaned);
 else       result=engine.eval(cleaned);
    }
 catch (    ScriptException e) {
      result=e.getCause();
      if (result instanceof ScriptException) {
        result=((ScriptException)result).getCause();
      }
    }
catch (    Throwable e) {
      logger.warn(""String_Node_Str"",e);
      result=Bot.renderStackTrace(e);
    }
    if (result instanceof RestAction)     result=((RestAction)result).complete();
    engine.put(""String_Node_Str"",result);
    if (result != null) {
      try {
        String strResult;
        if (language.equals(""String_Node_Str""))         strResult=result.toString().substring(GROOVY_PRE_INJECT.length());
 else         strResult=result.toString();
        ctx.send(""String_Node_Str"" + strResult + ""String_Node_Str"").queue();
      }
 catch (      Exception e) {
        logger.warn(""String_Node_Str"",e);
        try {
          ctx.send(""String_Node_Str"" + bot.renderStackTrace(e) + ""String_Node_Str"").queue();
        }
 catch (        Exception ex) {
          logger.error(""String_Node_Str"",ex);
        }
      }
    }
 else {
      response.addReaction(""String_Node_Str"").queue();
    }
  }
}"
79584,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""},thread=true) public void cmdUser(Context ctx) throws UnsupportedEncodingException {
  User user;
  if (ctx.rawArgs.matches(""String_Node_Str""))   user=ctx.message.getMentionedUsers().get(0);
 else   if (ctx.rawArgs.matches(""String_Node_Str""))   user=ctx.jda.retrieveUserById(Long.parseUnsignedLong(ctx.rawArgs)).complete();
 else   if (ctx.rawArgs.matches(""String_Node_Str"")) {
    Collection<User> users;
switch (ctx.channel.getType()) {
case TEXT:
      users=ctx.guild.getMembers().stream().map(m -> m.getUser()).collect(Collectors.toList());
    break;
case PRIVATE:
  users=Arrays.asList(ctx.author,ctx.jda.getSelfUser());
break;
case GROUP:
users=((Group)ctx.channel).getUsers();
break;
default :
users=Collections.singletonList(ctx.jda.getSelfUser());
break;
}
user=users.stream().filter(u -> getTag(u).contentEquals(ctx.rawArgs)).findFirst().orElse(null);
}
 else if (ctx.rawArgs.length() < 1) user=ctx.author;
 else user=null;
if (user == null) {
ctx.send(NO_USER).queue();
return;
}
EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(getTag(user),user.getEffectiveAvatarUrl(),user.getEffectiveAvatarUrl()).setThumbnail(user.getEffectiveAvatarUrl()).addField(""String_Node_Str"",user.getId(),true).addField(""String_Node_Str"",user.getCreationTime().toString(),true).addField(""String_Node_Str"",user.isBot() ? ""String_Node_Str"" : ""String_Node_Str"",true);
if (ctx.guild != null) {
Member member=ctx.guild.getMember(user);
if (member != null) {
if (member.getNickname() != null) emb.addField(""String_Node_Str"",member.getNickname(),true);
String status;
if (member.getGame() == null) status=WordUtils.capitalizeFully(member.getOnlineStatus().name().replace('_',' '));
 else {
Game game=member.getGame();
if (game.getType() == Game.GameType.TWITCH) {
status=""String_Node_Str"" + game.getName() + ""String_Node_Str""+ game.getUrl()+ ""String_Node_Str"";
}
 else {
status=""String_Node_Str"" + game.getName() + ""String_Node_Str""+ URLEncoder.encode(game.getName(),""String_Node_Str"")+ ')';
}
}
emb.setColor(member.getColor()).addField(""String_Node_Str"",status,true).addField(""String_Node_Str"",member.getRoles().stream().map(r -> r.getName()).collect(Collectors.joining(""String_Node_Str"")),true);
}
}
ctx.send(emb.build()).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""},thread=true) public void cmdUser(Context ctx) throws UnsupportedEncodingException {
  User user;
  if (ctx.rawArgs.matches(""String_Node_Str""))   user=ctx.message.getMentionedUsers().get(0);
 else   if (ctx.rawArgs.matches(""String_Node_Str""))   user=ctx.jda.retrieveUserById(Long.parseUnsignedLong(ctx.rawArgs)).complete();
 else   if (ctx.rawArgs.matches(""String_Node_Str"")) {
    Collection<User> users;
switch (ctx.channel.getType()) {
case TEXT:
      users=ctx.guild.getMembers().stream().map(m -> m.getUser()).collect(Collectors.toList());
    break;
case PRIVATE:
  users=Arrays.asList(ctx.author,ctx.jda.getSelfUser());
break;
case GROUP:
users=((Group)ctx.channel).getUsers();
break;
default :
users=Collections.singletonList(ctx.jda.getSelfUser());
break;
}
user=users.stream().filter(u -> getTag(u).contentEquals(ctx.rawArgs)).findFirst().orElse(null);
}
 else if (ctx.rawArgs.length() < 1) user=ctx.author;
 else user=null;
if (user == null) {
ctx.send(NO_USER).queue();
return;
}
EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(getTag(user),user.getEffectiveAvatarUrl(),user.getEffectiveAvatarUrl()).setThumbnail(user.getEffectiveAvatarUrl()).addField(""String_Node_Str"",user.getId(),true).addField(""String_Node_Str"",Date.from(user.getCreationTime().toInstant()).toString(),true).addField(""String_Node_Str"",user.isBot() ? ""String_Node_Str"" : ""String_Node_Str"",true);
if (ctx.guild != null) {
Member member=ctx.guild.getMember(user);
if (member != null) {
if (member.getNickname() != null) emb.addField(""String_Node_Str"",member.getNickname(),true);
String status;
if (member.getGame() == null) status=WordUtils.capitalizeFully(member.getOnlineStatus().name().replace('_',' '));
 else {
Game game=member.getGame();
if (game.getType() == Game.GameType.TWITCH) {
status=""String_Node_Str"" + game.getName() + ""String_Node_Str""+ game.getUrl()+ ""String_Node_Str"";
}
 else {
status=""String_Node_Str"" + game.getName() + ""String_Node_Str""+ URLEncoder.encode(game.getName(),""String_Node_Str"")+ ')';
}
}
emb.setColor(member.getColor()).addField(""String_Node_Str"",status,true).addField(""String_Node_Str"",member.getRoles().stream().map(r -> r.getName()).collect(Collectors.joining(""String_Node_Str"")),true);
}
}
ctx.send(emb.build()).queue();
}"
79585,"@Cooldown(scope=BucketType.USER,delay=5) @Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""},thread=true) public void cmdMineServer(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  int port=25565;
  String[] portSplit=StringUtils.split(ctx.rawArgs,':');
  String server=portSplit[0].replace(""String_Node_Str"",""String_Node_Str"");
  if (portSplit.length > 1) {
    try {
      port=Integer.parseInt(portSplit[1]);
    }
 catch (    NumberFormatException ignored) {
    }
  }
  if (server.indexOf((int)'.') == -1 || ctx.rawArgs.indexOf((int)' ') != -1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  JSONObject data;
  logger.info(""String_Node_Str"",server,port);
  try {
    data=new MinecraftPing().getPing(new MinecraftPingOptions().setHostname(server).setPort(port).setTimeout(5000));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String desc;
  String serverType=""String_Node_Str"";
  Object dataDesc=data.get(""String_Node_Str"");
  JSONObject dataPlayers=data.getJSONObject(""String_Node_Str"");
  if (dataDesc instanceof JSONObject) {
    JSONObject descObj=(JSONObject)dataDesc;
    if (descObj.optString(""String_Node_Str"",""String_Node_Str"").length() > 0) {
      desc=descObj.getString(""String_Node_Str"");
    }
 else {
      desc=MinecraftUtil.decodeJsonText(descObj);
    }
  }
 else   if (dataDesc instanceof String) {
    desc=(String)dataDesc;
  }
 else {
    desc=dataDesc.toString();
  }
  desc=desc.replaceAll(MC_COLOR_PATTERN,""String_Node_Str"");
  EmbedBuilder emb=new EmbedBuilder().setTitle(server + ':' + port).setDescription(desc).setColor(randomColor()).setFooter(getEffectiveName(ctx),ctx.jda.getSelfUser().getEffectiveAvatarUrl()).addField(""String_Node_Str"",dataPlayers.getInt(""String_Node_Str"") + ""String_Node_Str"" + dataPlayers.getInt(""String_Node_Str""),true);
  if (val(dataPlayers.optJSONArray(""String_Node_Str"")).or(EMPTY_JSON_ARRAY).length() > 0) {
    String content=smartJoin(StreamUtils.asStream(dataPlayers.getJSONArray(""String_Node_Str"").iterator()).map(elem -> ((JSONObject)elem).getString(""String_Node_Str"")).collect(Collectors.toList())).replaceAll(MC_COLOR_PATTERN,""String_Node_Str"");
    if (content.length() <= MessageEmbed.VALUE_MAX_LENGTH) {
      emb.addField(""String_Node_Str"",content,true);
    }
 else {
      for (      String page : embedFieldPages(content)) {
        emb.addField(""String_Node_Str"",page,true);
      }
    }
  }
  emb.addField(""String_Node_Str"",data.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"").replaceAll(MC_COLOR_PATTERN,""String_Node_Str""),true);
  emb.addField(""String_Node_Str"",data.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),true);
  if (data.has(""String_Node_Str"")) {
    JSONObject modinfo=data.getJSONObject(""String_Node_Str"");
    if (modinfo.has(""String_Node_Str"") && modinfo.getJSONArray(""String_Node_Str"").length() > 0) {
      String content=smartJoin(StreamUtils.asStream(modinfo.getJSONArray(""String_Node_Str"").iterator()).map(elem -> {
        JSONObject mod=(JSONObject)elem;
        return WordUtils.capitalize(mod.getString(""String_Node_Str"")) + ' ' + mod.getString(""String_Node_Str"");
      }
).collect(Collectors.toList()));
      if (content.length() <= 1024) {
        emb.addField(""String_Node_Str"",content,true);
      }
 else {
        for (        String page : embedFieldPages(content)) {
          emb.addField(""String_Node_Str"",page,true);
        }
      }
    }
    if (modinfo.has(""String_Node_Str"")) {
      String type=modinfo.getString(""String_Node_Str"");
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        serverType=""String_Node_Str"";
      }
 else {
        serverType=WordUtils.capitalize(type);
      }
    }
  }
  emb.addField(""String_Node_Str"",serverType,true);
  emb.addField(""String_Node_Str"",format(""String_Node_Str"",data.getInt(""String_Node_Str"")),true);
  ctx.send(emb.build()).queue();
}","@Cooldown(scope=BucketType.USER,delay=5) @Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""},thread=true) public void cmdMineServer(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  int port=25565;
  String[] portSplit=StringUtils.split(ctx.rawArgs,':');
  String server=portSplit[0].replace(""String_Node_Str"",""String_Node_Str"");
  if (portSplit.length > 1) {
    try {
      port=Integer.parseInt(portSplit[1]);
    }
 catch (    NumberFormatException ignored) {
    }
  }
  if (server.indexOf((int)'.') == -1 || ctx.rawArgs.indexOf((int)' ') != -1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  JSONObject data;
  logger.info(""String_Node_Str"",server,port);
  try {
    data=new MinecraftPing().getPing(new MinecraftPingOptions().setHostname(server).setPort(port).setTimeout(5000));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  String desc;
  String serverType=""String_Node_Str"";
  Object dataDesc=data.get(""String_Node_Str"");
  JSONObject dataPlayers=data.getJSONObject(""String_Node_Str"");
  if (dataDesc instanceof JSONObject) {
    JSONObject descObj=(JSONObject)dataDesc;
    if (descObj.optString(""String_Node_Str"",""String_Node_Str"").length() > 0) {
      desc=descObj.getString(""String_Node_Str"");
    }
 else {
      desc=MinecraftUtil.decodeJsonText(descObj);
    }
  }
 else   if (dataDesc instanceof String) {
    desc=(String)dataDesc;
  }
 else {
    desc=dataDesc.toString();
  }
  desc=desc.replaceAll(MC_COLOR_PATTERN,""String_Node_Str"");
  EmbedBuilder emb=new EmbedBuilder().setTitle(server + ':' + port).setDescription(desc).setColor(randomColor()).setFooter(getEffectiveName(ctx),ctx.jda.getSelfUser().getEffectiveAvatarUrl()).addField(""String_Node_Str"",dataPlayers.getInt(""String_Node_Str"") + ""String_Node_Str"" + dataPlayers.getInt(""String_Node_Str""),true);
  if (val(dataPlayers.optJSONArray(""String_Node_Str"")).or(EMPTY_JSON_ARRAY).length() > 0) {
    String content=smartJoin(StreamUtils.asStream(dataPlayers.getJSONArray(""String_Node_Str"").iterator()).map(elem -> ((JSONObject)elem).getString(""String_Node_Str"")).collect(Collectors.toList())).replaceAll(MC_COLOR_PATTERN,""String_Node_Str"");
    if (content.length() <= MessageEmbed.VALUE_MAX_LENGTH) {
      emb.addField(""String_Node_Str"",content,true);
    }
 else {
      for (      String page : embedFieldPages(content)) {
        emb.addField(""String_Node_Str"",page,true);
      }
    }
  }
  emb.addField(""String_Node_Str"",data.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"").replaceAll(MC_COLOR_PATTERN,""String_Node_Str""),true);
  emb.addField(""String_Node_Str"",str(data.getJSONObject(""String_Node_Str"").getInt(""String_Node_Str"")),true);
  if (data.has(""String_Node_Str"")) {
    JSONObject modinfo=data.getJSONObject(""String_Node_Str"");
    if (modinfo.has(""String_Node_Str"") && modinfo.getJSONArray(""String_Node_Str"").length() > 0) {
      String content=smartJoin(StreamUtils.asStream(modinfo.getJSONArray(""String_Node_Str"").iterator()).map(elem -> {
        JSONObject mod=(JSONObject)elem;
        return WordUtils.capitalize(mod.getString(""String_Node_Str"")) + ' ' + mod.getString(""String_Node_Str"");
      }
).collect(Collectors.toList()));
      if (content.length() <= 1024) {
        emb.addField(""String_Node_Str"",content,true);
      }
 else {
        for (        String page : embedFieldPages(content)) {
          emb.addField(""String_Node_Str"",page,true);
        }
      }
    }
    if (modinfo.has(""String_Node_Str"")) {
      String type=modinfo.getString(""String_Node_Str"");
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        serverType=""String_Node_Str"";
      }
 else {
        serverType=WordUtils.capitalize(type);
      }
    }
  }
  emb.addField(""String_Node_Str"",serverType,true);
  emb.addField(""String_Node_Str"",format(""String_Node_Str"",data.getInt(""String_Node_Str"")),true);
  ctx.send(emb.build()).queue();
}"
79586,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true) public void cmdXkcd(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  String first=ctx.args.get(0);
  String second=""String_Node_Str"";
  try {
    second=ctx.args.get(1);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  String comicTitle;
  String comicUrl;
  String comicDesc;
  int comicNum;
  if (first.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      comicNum=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if (first.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      comicNum=randint(1,Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"") + 1);
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if ((first.equalsIgnoreCase(""String_Node_Str"") && second.matches(""String_Node_Str"")) || first.matches(""String_Node_Str"")) {
    try {
      int max=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
      int requested;
      try {
        requested=Integer.parseInt(first);
      }
 catch (      NumberFormatException e) {
        requested=Integer.parseInt(second);
      }
      if (requested > 0 && requested <= max) {
        comicNum=requested;
      }
 else {
        ctx.send(""String_Node_Str"" + max + '.').queue();
        return;
      }
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  try {
    JSONObject resp=Unirest.get(""String_Node_Str"" + comicNum + ""String_Node_Str"").asJson().getBody().getObject();
    comicTitle=resp.getString(""String_Node_Str"");
    comicDesc=resp.getString(""String_Node_Str"");
    comicUrl=resp.getString(""String_Node_Str"");
  }
 catch (  UnirestException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(comicTitle,""String_Node_Str"" + comicNum,null).setImage(comicUrl).setFooter(comicDesc,null);
  ctx.send(emb.build()).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true) public void cmdXkcd(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  String first=ctx.args.get(0);
  String second=""String_Node_Str"";
  try {
    second=ctx.args.get(1);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  String comicTitle;
  String comicUrl;
  String comicDesc;
  int comicNum;
  if (first.equalsIgnoreCase(""String_Node_Str"")) {
    ctx.channel.sendTyping().queue();
    try {
      comicNum=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if (first.equalsIgnoreCase(""String_Node_Str"")) {
    ctx.channel.sendTyping().queue();
    try {
      comicNum=randint(1,Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"") + 1);
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if ((first.equalsIgnoreCase(""String_Node_Str"") && second.matches(""String_Node_Str"")) || first.matches(""String_Node_Str"")) {
    ctx.channel.sendTyping().queue();
    try {
      int max=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
      int requested;
      try {
        requested=Integer.parseInt(first);
      }
 catch (      NumberFormatException e) {
        requested=Integer.parseInt(second);
      }
      if (requested > 0 && requested <= max) {
        comicNum=requested;
      }
 else {
        ctx.send(""String_Node_Str"" + max + '.').queue();
        return;
      }
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  try {
    JSONObject resp=Unirest.get(""String_Node_Str"" + comicNum + ""String_Node_Str"").asJson().getBody().getObject();
    comicTitle=resp.getString(""String_Node_Str"");
    comicDesc=resp.getString(""String_Node_Str"");
    comicUrl=resp.getString(""String_Node_Str"");
  }
 catch (  UnirestException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(comicTitle,""String_Node_Str"" + comicNum,null).setImage(comicUrl).setFooter(comicDesc,null);
  ctx.send(emb.build()).queue();
}"
79587,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"") public void cmdMeme(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  JSONObject json=new JSONObject();
  int template=61579;
  String topText;
  String bottomText;
  if (ctx.rawArgs.contains(""String_Node_Str"")) {
    final int sepIndex=ctx.rawArgs.indexOf('|');
    topText=ctx.rawArgs.substring(0,sepIndex).trim();
    bottomText=ctx.rawArgs.substring(sepIndex + 1).trim();
  }
 else {
    String[] results=ArrayUtils.subarray(StringUtils.split(WordUtils.wrap(ctx.rawArgs.replace(""String_Node_Str"",""String_Node_Str""),ctx.rawArgs.length() / 2,""String_Node_Str"",true,""String_Node_Str""),'\n'),0,2);
    topText=results[0];
    bottomText=results[1];
  }
  json.put(""String_Node_Str"",template);
  try {
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
  }
 catch (  JSONException none) {
    json.put(""String_Node_Str"",""String_Node_Str"");
    json.put(""String_Node_Str"",""String_Node_Str"");
  }
  json.put(""String_Node_Str"",topText);
  json.put(""String_Node_Str"",bottomText);
  logger.info(""String_Node_Str"",json);
  Unirest.post(""String_Node_Str"").body(json).asJsonAsync(new Callback<JsonNode>(){
    @Override public void completed(    HttpResponse<JsonNode> response){
      JSONObject resp=response.getBody().getObject();
      logger.info(resp);
      if (resp.getBoolean(""String_Node_Str"")) {
        ctx.send(new EmbedBuilder().setColor(randomColor()).setImage(resp.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"")).build()).queue();
      }
 else {
        ctx.send(""String_Node_Str"" + resp.getString(""String_Node_Str"") + '`').queue();
      }
    }
    @Override public void failed(    UnirestException e){
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    }
    @Override public void cancelled(){
      ctx.send(""String_Node_Str"").queue();
    }
  }
);
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"") public void cmdMeme(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  ctx.channel.sendTyping().queue();
  JSONObject json=new JSONObject();
  int template=61579;
  String topText;
  String bottomText;
  if (ctx.rawArgs.contains(""String_Node_Str"")) {
    final int sepIndex=ctx.rawArgs.indexOf('|');
    topText=ctx.rawArgs.substring(0,sepIndex).trim();
    bottomText=ctx.rawArgs.substring(sepIndex + 1).trim();
  }
 else {
    String[] results=ArrayUtils.subarray(StringUtils.split(WordUtils.wrap(ctx.rawArgs.replace(""String_Node_Str"",""String_Node_Str""),ctx.rawArgs.length() / 2,""String_Node_Str"",true,""String_Node_Str""),'\n'),0,2);
    topText=results[0];
    bottomText=results[1];
  }
  json.put(""String_Node_Str"",template);
  try {
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
  }
 catch (  JSONException none) {
    json.put(""String_Node_Str"",""String_Node_Str"");
    json.put(""String_Node_Str"",""String_Node_Str"");
  }
  json.put(""String_Node_Str"",topText);
  json.put(""String_Node_Str"",bottomText);
  logger.info(""String_Node_Str"",json);
  Unirest.post(""String_Node_Str"").body(json).asJsonAsync(new Callback<JsonNode>(){
    @Override public void completed(    HttpResponse<JsonNode> response){
      JSONObject resp=response.getBody().getObject();
      logger.info(resp);
      if (resp.getBoolean(""String_Node_Str"")) {
        ctx.send(new EmbedBuilder().setColor(randomColor()).setImage(resp.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"")).build()).queue();
      }
 else {
        ctx.send(""String_Node_Str"" + resp.getString(""String_Node_Str"") + '`').queue();
      }
    }
    @Override public void failed(    UnirestException e){
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    }
    @Override public void cancelled(){
      ctx.send(""String_Node_Str"").queue();
    }
  }
);
}"
79588,"protected String formatMessage(String msg,Guild guild,Member member,String def){
  return Strings.replace(msg.replace(""String_Node_Str"",def),SUB_REGEX,m -> {
    return Strings.createMap().map(""String_Node_Str"",member::getAsMention).map(""String_Node_Str"",member::getEffectiveName).map(""String_Node_Str"",() -> getTag(member.getUser())).map(""String_Node_Str"",() -> member.getUser().getDiscriminator()).map(""String_Node_Str"",() -> member.getUser().getId()).map(""String_Node_Str"",guild::getName).map(""String_Node_Str"",guild::getIconUrl).map(""String_Node_Str"",guild::getId).map(""String_Node_Str"",() -> guild.getOwner().getEffectiveName()).map(""String_Node_Str"",member::getAsMention).map(""String_Node_Str"",member::getAsMention).map(""String_Node_Str"",() -> new Date().toString()).map(""String_Node_Str"",() -> new Date().toString()).map(""String_Node_Str"",guild::getName).map(""String_Node_Str"",() -> bot.getShardUtil().getPrefixStore().getPrefix(guild.getIdLong())).map(""String_Node_Str"",""String_Node_Str"").exec(m);
  }
);
}","private String formatMessage(String msg,Guild guild,Member member,String def){
  return Strings.replace(msg.replace(""String_Node_Str"",def),SUB_REGEX,m -> {
    return Strings.createMap().map(""String_Node_Str"",member::getAsMention).map(""String_Node_Str"",member::getEffectiveName).map(""String_Node_Str"",() -> getTag(member.getUser())).map(""String_Node_Str"",member.getUser()::getDiscriminator).map(""String_Node_Str"",member.getUser()::getId).map(""String_Node_Str"",guild::getName).map(""String_Node_Str"",guild::getIconUrl).map(""String_Node_Str"",guild::getId).map(""String_Node_Str"",guild.getOwner()::getEffectiveName).map(""String_Node_Str"",member::getAsMention).map(""String_Node_Str"",member::getAsMention).map(""String_Node_Str"",() -> new Date().toString()).map(""String_Node_Str"",() -> new Date().toString()).map(""String_Node_Str"",guild::getName).map(""String_Node_Str"",() -> bot.getShardUtil().getPrefixStore().getPrefix(guild.getIdLong())).map(""String_Node_Str"",""String_Node_Str"").exec(m);
  }
);
}"
79589,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},thread=true,perms={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void welcomeControl(Context ctx) throws SQLException {
  if (ctx.rawArgs.length() < 1) {
    ctx.send(NO_COMMAND).queue();
    return;
  }
  String invoked=ctx.args.get(0);
  try {
    if (invoked.equals(""String_Node_Str""))     welcomeCmdStatus(ctx);
 else     if (invoked.equals(""String_Node_Str""))     welcomeCmdShow(ctx);
 else     if (invoked.equals(""String_Node_Str""))     welcomeCmdSet(ctx);
 else     if (invoked.equals(""String_Node_Str""))     welcomeCmdToggle(ctx);
 else     ctx.send(NO_COMMAND).queue();
  }
 catch (  NullPointerException e) {
    logger.warn(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    try {
      messageDao.createOrUpdate(new GuildWelcomeMessages(ctx.guild.getIdLong(),""String_Node_Str"",""String_Node_Str"",true,true));
    }
 catch (    SQLException ex) {
      logger.error(""String_Node_Str"",ex);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
    ctx.send(""String_Node_Str"").queue();
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},thread=true,perms={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void welcomeControl(Context ctx) throws SQLException {
  if (ctx.rawArgs.length() < 1) {
    ctx.send(NO_COMMAND).queue();
    return;
  }
  String invoked=ctx.args.get(0);
  try {
    if (invoked.equals(""String_Node_Str""))     welcomeCmdStatus(ctx);
 else     if (invoked.equals(""String_Node_Str""))     welcomeCmdShow(ctx);
 else     if (invoked.equals(""String_Node_Str""))     welcomeCmdSet(ctx);
 else     if (invoked.equals(""String_Node_Str""))     welcomeCmdToggle(ctx);
 else     if (invoked.equals(""String_Node_Str""))     allCmdHelp(ctx);
 else     ctx.send(NO_COMMAND).queue();
  }
 catch (  NullPointerException e) {
    logger.warn(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    try {
      messageDao.createOrUpdate(new GuildWelcomeMessages(ctx.guild.getIdLong(),""String_Node_Str"",""String_Node_Str"",true,true));
    }
 catch (    SQLException ex) {
      logger.error(""String_Node_Str"",ex);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
    ctx.send(""String_Node_Str"").queue();
  }
}"
79590,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},thread=true,perms={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void leaveControl(Context ctx) throws SQLException {
  if (ctx.rawArgs.length() < 1) {
    ctx.send(NO_COMMAND).queue();
    return;
  }
  String invoked=ctx.args.get(0);
  try {
    if (invoked.equals(""String_Node_Str""))     leaveCmdStatus(ctx);
 else     if (invoked.equals(""String_Node_Str""))     leaveCmdShow(ctx);
 else     if (invoked.equals(""String_Node_Str""))     leaveCmdSet(ctx);
 else     if (invoked.equals(""String_Node_Str""))     leaveCmdToggle(ctx);
 else     ctx.send(NO_COMMAND).queue();
  }
 catch (  NullPointerException e) {
    logger.warn(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    try {
      messageDao.createOrUpdate(new GuildWelcomeMessages(ctx.guild.getIdLong(),""String_Node_Str"",""String_Node_Str"",true,true));
    }
 catch (    SQLException ex) {
      logger.error(""String_Node_Str"",ex);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
    ctx.send(""String_Node_Str"").queue();
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",guildOnly=true,aliases={""String_Node_Str"",""String_Node_Str""},thread=true,perms={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void leaveControl(Context ctx) throws SQLException {
  if (ctx.rawArgs.length() < 1) {
    ctx.send(NO_COMMAND).queue();
    return;
  }
  String invoked=ctx.args.get(0);
  try {
    if (invoked.equals(""String_Node_Str""))     leaveCmdStatus(ctx);
 else     if (invoked.equals(""String_Node_Str""))     leaveCmdShow(ctx);
 else     if (invoked.equals(""String_Node_Str""))     leaveCmdSet(ctx);
 else     if (invoked.equals(""String_Node_Str""))     leaveCmdToggle(ctx);
 else     if (invoked.equals(""String_Node_Str""))     allCmdHelp(ctx);
 else     ctx.send(NO_COMMAND).queue();
  }
 catch (  NullPointerException e) {
    logger.warn(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    try {
      messageDao.createOrUpdate(new GuildWelcomeMessages(ctx.guild.getIdLong(),""String_Node_Str"",""String_Node_Str"",true,true));
    }
 catch (    SQLException ex) {
      logger.error(""String_Node_Str"",ex);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
    ctx.send(""String_Node_Str"").queue();
  }
}"
79591,"@EventHandler(event=GuildMemberJoinEvent.class,threaded=true) public void onGuildMemberJoin(GuildMemberJoinEvent event){
  if (event.getMember().getUser().getIdLong() == bot.getJda().getSelfUser().getIdLong())   return;
  if (!event.getGuild().isAvailable())   return;
  try {
    GuildWelcomeMessages queryResult=messageDao.queryForId(event.getGuild().getIdLong());
    if (queryResult == null || !queryResult.isWelcomeEnabled())     return;
    String msg=formatMessage(queryResult.getWelcome(),event.getGuild(),event.getMember(),DEFAULT_WELCOME);
    event.getGuild().getPublicChannel().sendMessage(Context.truncate(msg)).queue();
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
}","@EventHandler(event=GuildMemberJoinEvent.class,threaded=true) public void onGuildMemberJoin(GuildMemberJoinEvent event){
  if (event.getMember().getUser().getIdLong() == bot.getJda().getSelfUser().getIdLong())   return;
  if (!event.getGuild().isAvailable())   return;
  try {
    GuildWelcomeMessages queryResult=messageDao.queryForId(event.getGuild().getIdLong());
    if (queryResult == null) {
      try {
        queryResult=initGuild(event.getGuild());
      }
 catch (      SQLException ex) {
        logger.error(""String_Node_Str"",ex);
        return;
      }
    }
    if (!queryResult.isWelcomeEnabled())     return;
    String msg=formatMessage(queryResult.getWelcome(),event.getGuild(),event.getMember(),DEFAULT_WELCOME);
    event.getGuild().getPublicChannel().sendMessage(Context.truncate(msg)).queue();
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
}"
79592,"@EventHandler(event=GuildMemberLeaveEvent.class,threaded=true) public void onGuildMemberLeave(GuildMemberLeaveEvent event){
  if (event.getMember().getUser().getIdLong() == bot.getJda().getSelfUser().getIdLong())   return;
  if (!event.getGuild().isAvailable())   return;
  try {
    GuildWelcomeMessages queryResult=messageDao.queryForId(event.getGuild().getIdLong());
    if (queryResult == null || !queryResult.isLeaveEnabled())     return;
    String msg=formatMessage(queryResult.getLeave(),event.getGuild(),event.getMember(),DEFAULT_LEAVE);
    event.getGuild().getPublicChannel().sendMessage(Context.truncate(msg)).queue();
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
}","@EventHandler(event=GuildMemberLeaveEvent.class,threaded=true) public void onGuildMemberLeave(GuildMemberLeaveEvent event){
  if (event.getMember().getUser().getIdLong() == bot.getJda().getSelfUser().getIdLong())   return;
  if (!event.getGuild().isAvailable())   return;
  try {
    GuildWelcomeMessages queryResult=messageDao.queryForId(event.getGuild().getIdLong());
    if (queryResult == null) {
      try {
        queryResult=initGuild(event.getGuild());
      }
 catch (      SQLException ex) {
        logger.error(""String_Node_Str"",ex);
        return;
      }
    }
    if (!queryResult.isLeaveEnabled())     return;
    String msg=formatMessage(queryResult.getLeave(),event.getGuild(),event.getMember(),DEFAULT_LEAVE);
    event.getGuild().getPublicChannel().sendMessage(Context.truncate(msg)).queue();
  }
 catch (  SQLException e) {
    logger.warn(""String_Node_Str"",e);
  }
}"
79593,"public static String replace(String input,Pattern regex,StringReplacerCallback callback){
  StringBuffer result=new StringBuffer();
  Matcher matcher=regex.matcher(input);
  while (matcher.find()) {
    result.append(callback.replace(matcher.group(1)));
  }
  matcher.appendTail(result);
  return result.toString();
}","public static String replace(String input,Pattern regex,StringReplacerCallback callback){
  StringBuffer result=new StringBuffer();
  Matcher matcher=regex.matcher(input);
  while (matcher.find()) {
    String rep=callback.replace(matcher.group(1));
    matcher.appendReplacement(result,Matcher.quoteReplacement(rep));
  }
  matcher.appendTail(result);
  return result.toString();
}"
79594,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""},thread=true) public void cmdHelp(Context ctx){
  int charLimit=ctx.jda.getSelfUser().isBot() ? MessageEmbed.EMBED_MAX_LENGTH_BOT : MessageEmbed.EMBED_MAX_LENGTH_CLIENT;
  boolean sendPublic=false;
  if (ctx.invoker.startsWith(""String_Node_Str"")) {
    if (ctx.author.getIdLong() == bot.owner.getIdLong()) {
      sendPublic=true;
    }
  }
  List<MessageEmbed> pages=new ArrayList<>();
  Map<String,List<String>> fields=new HashMap<>();
  EmbedBuilder emb=new EmbedBuilder().setAuthor(""String_Node_Str"",null,ctx.jda.getSelfUser().getEffectiveAvatarUrl()).setColor(randomColor());
  if (ctx.args.size() < 1) {
    for (    com.khronodragon.bluestone.Command cmd : new HashSet<>(bot.commands.values())) {
      if (!cmd.hidden) {
        String cName=cmd.cog.getCosmeticName();
        String entry=""String_Node_Str"" + cmd.name + ""String_Node_Str""+ cmd.description+ '*';
        if (fields.containsKey(cName)) {
          fields.get(cName).add(entry);
        }
 else {
          final LinkedList<String> newList=new LinkedList<>();
          newList.add(entry);
          fields.put(cName,newList);
        }
      }
    }
  }
 else {
    for (    String item : ctx.args.subList(0,Math.min(24,ctx.args.size()))) {
      String litem=item.toLowerCase();
      boolean done=false;
      if (bot.cogs.containsKey(item)) {
        Cog cog=bot.cogs.get(item);
        for (        com.khronodragon.bluestone.Command cmd : new HashSet<>(bot.commands.values())) {
          if (cmd.cog == cog && !cmd.hidden) {
            String cName=cmd.cog.getCosmeticName();
            String entry=""String_Node_Str"" + cmd.name + ""String_Node_Str""+ cmd.description+ '*';
            if (fields.containsKey(cName)) {
              fields.get(cName).add(entry);
            }
 else {
              final LinkedList<String> newList=new LinkedList<>();
              newList.add(entry);
              fields.put(cName,newList);
            }
          }
        }
        done=true;
      }
      if (bot.commands.containsKey(litem)) {
        com.khronodragon.bluestone.Command cmd=bot.commands.get(litem);
        StringBuilder field=new StringBuilder(""String_Node_Str"");
        if (cmd.aliases.length < 1) {
          field.append(cmd.name);
        }
 else {
          field.append(ctx.prefix).append(String.join(""String_Node_Str"",cmd.aliases));
        }
        field.append(' ').append(cmd.usage).append(""String_Node_Str"").append(cmd.description);
        fields.put(litem,Collections.singletonList(field.toString()));
        done=true;
      }
      if (!done) {
        fields.put(item,Collections.singletonList(""String_Node_Str""));
      }
    }
  }
  int chars=embedAuthorChars(ctx);
  for (  String cog : fields.keySet()) {
    List<String> field=fields.get(cog);
    String content=String.join(""String_Node_Str"",field);
    if (content.length() < 1) {
      content=""String_Node_Str"";
    }
    int preLen=content.length() + cog.length();
    if (chars + preLen > charLimit) {
      pages.add(emb.build());
      emb=newEmbedWithAuthor(ctx).setColor(randomColor());
      chars=embedAuthorChars(ctx);
    }
    if (content.length() <= MessageEmbed.VALUE_MAX_LENGTH) {
      emb.addField(cog,content,false);
    }
 else {
      Paginator pager=new Paginator(1024);
      field.stream().forEach(s -> pager.addLine(s));
      for (      String page : pager.getPages()) {
        emb.addField(cog,page,true);
      }
    }
    chars+=preLen;
  }
  pages.add(emb.build());
  MessageDestination destination=MessageDestination.AUTHOR;
  if (sendPublic || bot.isSelfbot()) {
    destination=MessageDestination.CHANNEL;
  }
 else {
    if (pages.size() < 2 && pages.get(0).getLength() < 1012) {
      destination=MessageDestination.CHANNEL;
    }
  }
  MessageChannel channel=destination.getChannel(ctx);
  for (  MessageEmbed page : pages) {
    channel.sendMessage(page).queue();
  }
  if (destination == MessageDestination.AUTHOR && ctx.guild != null) {
    ctx.send(""String_Node_Str"").queue();
  }
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",aliases={""String_Node_Str"",""String_Node_Str""},thread=true) public void cmdHelp(Context ctx){
  int charLimit=ctx.jda.getSelfUser().isBot() ? MessageEmbed.EMBED_MAX_LENGTH_BOT : MessageEmbed.EMBED_MAX_LENGTH_CLIENT;
  boolean sendPublic=false;
  if (ctx.invoker.startsWith(""String_Node_Str"") && ctx.author.getIdLong() == bot.owner.getIdLong()) {
    sendPublic=true;
  }
  List<MessageEmbed> pages=new ArrayList<>();
  Map<String,List<String>> fields=new HashMap<>();
  EmbedBuilder emb=new EmbedBuilder().setAuthor(""String_Node_Str"",null,ctx.jda.getSelfUser().getEffectiveAvatarUrl()).setColor(randomColor());
  if (ctx.args.size() < 1) {
    for (    com.khronodragon.bluestone.Command cmd : new HashSet<>(bot.commands.values())) {
      if (!cmd.hidden) {
        String cName=cmd.cog.getCosmeticName();
        String entry=""String_Node_Str"" + cmd.name + ""String_Node_Str""+ cmd.description+ '*';
        if (fields.containsKey(cName)) {
          fields.get(cName).add(entry);
        }
 else {
          final LinkedList<String> newList=new LinkedList<>();
          newList.add(entry);
          fields.put(cName,newList);
        }
      }
    }
  }
 else {
    for (    String item : ctx.args.subList(0,Math.min(24,ctx.args.size()))) {
      String litem=item.toLowerCase();
      boolean done=false;
      if (bot.cogs.containsKey(item)) {
        Cog cog=bot.cogs.get(item);
        for (        com.khronodragon.bluestone.Command cmd : new HashSet<>(bot.commands.values())) {
          if (cmd.cog == cog && !cmd.hidden) {
            String cName=cmd.cog.getCosmeticName();
            String entry=""String_Node_Str"" + cmd.name + ""String_Node_Str""+ cmd.description+ '*';
            if (fields.containsKey(cName)) {
              fields.get(cName).add(entry);
            }
 else {
              final LinkedList<String> newList=new LinkedList<>();
              newList.add(entry);
              fields.put(cName,newList);
            }
          }
        }
        done=true;
      }
      if (bot.commands.containsKey(litem)) {
        com.khronodragon.bluestone.Command cmd=bot.commands.get(litem);
        StringBuilder field=new StringBuilder(""String_Node_Str"");
        if (cmd.aliases.length < 1) {
          field.append(cmd.name);
        }
 else {
          field.append(ctx.prefix).append(String.join(""String_Node_Str"",cmd.aliases));
        }
        field.append(' ').append(cmd.usage).append(""String_Node_Str"").append(cmd.description);
        fields.put(litem,Collections.singletonList(field.toString()));
        done=true;
      }
      if (!done) {
        fields.put(item,Collections.singletonList(""String_Node_Str""));
      }
    }
  }
  int chars=embedAuthorChars(ctx);
  for (  String cog : fields.keySet()) {
    List<String> field=fields.get(cog);
    String content=String.join(""String_Node_Str"",field);
    if (content.length() < 1) {
      content=""String_Node_Str"";
    }
    int preLen=content.length() + cog.length();
    if (chars + preLen > charLimit) {
      pages.add(emb.build());
      emb=newEmbedWithAuthor(ctx).setColor(randomColor());
      chars=embedAuthorChars(ctx);
    }
    if (content.length() <= MessageEmbed.VALUE_MAX_LENGTH) {
      emb.addField(cog,content,false);
    }
 else {
      Paginator pager=new Paginator(1024);
      field.stream().forEach(s -> pager.addLine(s));
      for (      String page : pager.getPages()) {
        emb.addField(cog,page,true);
      }
    }
    chars+=preLen;
  }
  pages.add(emb.build());
  MessageDestination destination=MessageDestination.AUTHOR;
  if (sendPublic || bot.isSelfbot()) {
    destination=MessageDestination.CHANNEL;
  }
 else {
    if (pages.size() < 2 && pages.get(0).getLength() < 1012) {
      destination=MessageDestination.CHANNEL;
    }
  }
  MessageChannel channel=destination.getChannel(ctx);
  for (  MessageEmbed page : pages) {
    channel.sendMessage(page).queue();
  }
  if (destination == MessageDestination.AUTHOR && ctx.guild != null) {
    ctx.send(""String_Node_Str"").queue();
  }
}"
79595,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void command(Context ctx){
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  if (ctx.rawArgs.length() < 1) {
    url.append(randint(1,ENTRY_COUNT));
  }
 else {
    if (ctx.rawArgs.matches(""String_Node_Str"")) {
      int requested=Integer.parseInt(ctx.rawArgs);
      if (requested >= 1 && requested <= ENTRY_COUNT)       url.append(requested);
 else {
        ctx.send(""String_Node_Str"").queue();
        return;
      }
    }
 else     if (ctx.rawArgs.matches(""String_Node_Str"")) {
      String pokemonName=StringUtils.remove(ctx.rawArgs.toLowerCase().replace(' ','-'),'.');
      url.append(pokemonName);
    }
 else {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  url.append('/');
  ctx.channel.sendTyping().queue();
  Pokemon pokemon;
  try {
    pokemon=pokeCache.get(url.toString());
  }
 catch (  ExecutionException container) {
    Throwable e=container.getCause();
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String descUrl=BASE_URI + Arrays.stream(pokemon.getDescriptions()).sorted(Collections.reverseOrder(Comparator.comparingInt(d -> Integer.parseInt(StringUtils.split(d.name,'_')[2])))).findFirst().orElse(new Description()).resourceUri;
  String desc;
  try {
    desc=descCache.get(descUrl);
  }
 catch (  ExecutionException container) {
    Throwable e=container.getCause();
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String imageUrl=format(""String_Node_Str"",pokemon.getNationalId());
  String stats=new StringBuilder().append(""String_Node_Str"").append(pokemon.getHp()).append('\n').append(""String_Node_Str"").append(pokemon.getAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getDefense()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialDefense()).toString();
  String evoString=Arrays.stream(pokemon.getEvolutions()).map(e -> WordUtils.capitalizeFully(e.to.replace('-',' '))).distinct().collect(Collectors.joining(""String_Node_Str""));
  float height=pokemon.getHeight() / 10.0f;
  double heightInches=height / .3048 % 1 * 12;
  float weight=pokemon.getWeight() / 10.0f;
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(""String_Node_Str"" + pokemon.getNationalId() + ""String_Node_Str""+ WordUtils.capitalizeFully(pokemon.getName().replace('-',' ')),null,imageUrl).setDescription(desc).addField(""String_Node_Str"",stats,true).addField(""String_Node_Str"",format(""String_Node_Str"",height,Math.floor(heightInches / 12),heightInches % 12),true).addField(""String_Node_Str"",format(""String_Node_Str"",weight,weight * 2.2),true).addField(""String_Node_Str"",str(pokemon.getSpeed()),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getAbilities()).map(a -> WordUtils.capitalizeFully(a.name.replace('-',' '))).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getTypes()).map(t -> WordUtils.capitalizeFully(t.name)).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",str(pokemon.getExp()),true).addField(""String_Node_Str"",str(pokemon.getHappiness()),true).addField(""String_Node_Str"",evoString.equals(""String_Node_Str"") ? ""String_Node_Str"" : evoString,true).addField(""String_Node_Str"",pokemon.getSpecies().equals(""String_Node_Str"") ? ""String_Node_Str"" : pokemon.getSpecies(),true).setImage(imageUrl);
  ctx.send(emb.build()).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true,aliases={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},usage=""String_Node_Str"") public void command(Context ctx){
  StringBuilder url=new StringBuilder(""String_Node_Str"");
  if (ctx.rawArgs.length() < 1) {
    url.append(randint(1,ENTRY_COUNT));
  }
 else {
    if (ctx.rawArgs.matches(""String_Node_Str"")) {
      int requested=Integer.parseInt(ctx.rawArgs);
      if (requested >= 1 && requested <= ENTRY_COUNT)       url.append(requested);
 else {
        ctx.send(""String_Node_Str"").queue();
        return;
      }
    }
 else     if (ctx.rawArgs.matches(""String_Node_Str"")) {
      String pokemonName=StringUtils.remove(ctx.rawArgs.toLowerCase().replace(' ','-'),'.');
      url.append(pokemonName);
    }
 else {
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
  url.append('/');
  ctx.channel.sendTyping().queue();
  Pokemon pokemon;
  try {
    pokemon=pokeCache.get(url.toString());
  }
 catch (  ExecutionException container) {
    Throwable e=container.getCause();
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String descUrl=BASE_URI + Arrays.stream(pokemon.getDescriptions()).sorted(Collections.reverseOrder(Comparator.comparingInt(d -> Integer.parseInt(StringUtils.split(d.name,'_')[2])))).findFirst().orElse(new Description()).resourceUri;
  String desc;
  try {
    desc=descCache.get(descUrl);
  }
 catch (  ExecutionException container) {
    Throwable e=container.getCause();
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    return;
  }
  String imageUrl=format(""String_Node_Str"",pokemon.getNationalId());
  String stats=new StringBuilder().append(""String_Node_Str"").append(pokemon.getHp()).append('\n').append(""String_Node_Str"").append(pokemon.getAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getDefense()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialAttack()).append('\n').append(""String_Node_Str"").append(pokemon.getSpecialDefense()).toString();
  String evoString=Arrays.stream(pokemon.getEvolutions()).map(e -> WordUtils.capitalizeFully(e.to.replace('-',' '))).distinct().collect(Collectors.joining(""String_Node_Str""));
  float height=pokemon.getHeight() / 10.0f;
  double heightInches=height / .3048 % 1 * 12;
  float weight=pokemon.getWeight() / 10.0f;
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(""String_Node_Str"" + pokemon.getNationalId() + ""String_Node_Str""+ WordUtils.capitalizeFully(pokemon.getName().replace('-',' ')),null,imageUrl).setDescription(desc).addField(""String_Node_Str"",stats,true).addField(""String_Node_Str"",format(""String_Node_Str"",height,Math.floor(heightInches / 12),heightInches % 12),true).addField(""String_Node_Str"",format(""String_Node_Str"",weight,weight * 2.2),true).addField(""String_Node_Str"",str(pokemon.getSpeed()),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getAbilities()).map(a -> WordUtils.capitalizeFully(a.name.replace('-',' '))).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",Arrays.stream(pokemon.getTypes()).map(t -> WordUtils.capitalizeFully(t.name)).collect(Collectors.joining(""String_Node_Str"")),true).addField(""String_Node_Str"",str(pokemon.getExp()),true).addField(""String_Node_Str"",str(pokemon.getHappiness()),true).addField(""String_Node_Str"",""String_Node_Str"".equals(evoString) ? ""String_Node_Str"" : evoString,true).addField(""String_Node_Str"",pokemon.getSpecies().equals(""String_Node_Str"") ? ""String_Node_Str"" : pokemon.getSpecies(),true).setImage(imageUrl);
  ctx.send(emb.build()).queue();
}"
79596,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true) public void cmdXkcd(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  String first=ctx.args.get(0);
  String second=""String_Node_Str"";
  try {
    second=ctx.args.get(1);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  String comicTitle, comicUrl, comicDesc;
  int comicNum;
  if (first.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      comicNum=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if (first.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      comicNum=randint(1,Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"") + 1);
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if ((first.equalsIgnoreCase(""String_Node_Str"") && second.matches(""String_Node_Str"")) || first.matches(""String_Node_Str"")) {
    try {
      int max=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
      int requested;
      try {
        requested=Integer.parseInt(first);
      }
 catch (      NumberFormatException e) {
        requested=Integer.parseInt(second);
      }
      if (requested > 0 && requested <= max) {
        comicNum=requested;
      }
 else {
        ctx.send(""String_Node_Str"" + max + '.').queue();
        return;
      }
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  try {
    JSONObject resp=Unirest.get(""String_Node_Str"" + comicNum + ""String_Node_Str"").asJson().getBody().getObject();
    comicTitle=resp.getString(""String_Node_Str"");
    comicDesc=resp.getString(""String_Node_Str"");
    comicUrl=resp.getString(""String_Node_Str"");
  }
 catch (  UnirestException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(comicTitle,""String_Node_Str"" + comicNum,null).setImage(comicUrl).setFooter(comicDesc,null);
  ctx.send(emb.build()).queue();
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",thread=true) public void cmdXkcd(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  String first=ctx.args.get(0);
  String second=""String_Node_Str"";
  try {
    second=ctx.args.get(1);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  String comicTitle;
  String comicUrl;
  String comicDesc;
  int comicNum;
  if (first.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      comicNum=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if (first.equalsIgnoreCase(""String_Node_Str"")) {
    try {
      comicNum=randint(1,Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"") + 1);
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else   if ((first.equalsIgnoreCase(""String_Node_Str"") && second.matches(""String_Node_Str"")) || first.matches(""String_Node_Str"")) {
    try {
      int max=Unirest.get(""String_Node_Str"").asJson().getBody().getObject().getInt(""String_Node_Str"");
      int requested;
      try {
        requested=Integer.parseInt(first);
      }
 catch (      NumberFormatException e) {
        requested=Integer.parseInt(second);
      }
      if (requested > 0 && requested <= max) {
        comicNum=requested;
      }
 else {
        ctx.send(""String_Node_Str"" + max + '.').queue();
        return;
      }
    }
 catch (    UnirestException e) {
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"").queue();
      return;
    }
  }
 else {
    ctx.send(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").queue();
    return;
  }
  try {
    JSONObject resp=Unirest.get(""String_Node_Str"" + comicNum + ""String_Node_Str"").asJson().getBody().getObject();
    comicTitle=resp.getString(""String_Node_Str"");
    comicDesc=resp.getString(""String_Node_Str"");
    comicUrl=resp.getString(""String_Node_Str"");
  }
 catch (  UnirestException e) {
    logger.error(""String_Node_Str"",e);
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  EmbedBuilder emb=new EmbedBuilder().setColor(randomColor()).setAuthor(comicTitle,""String_Node_Str"" + comicNum,null).setImage(comicUrl).setFooter(comicDesc,null);
  ctx.send(emb.build()).queue();
}"
79597,"@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"") public void cmdMeme(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  JSONObject json=new JSONObject();
  int template=61579;
  String topText, bottomText;
  if (ctx.rawArgs.contains(""String_Node_Str"")) {
    final int sepIndex=ctx.rawArgs.indexOf('|');
    topText=ctx.rawArgs.substring(0,sepIndex).trim();
    bottomText=ctx.rawArgs.substring(sepIndex + 1).trim();
  }
 else {
    String[] results=ArrayUtils.subarray(StringUtils.split(WordUtils.wrap(ctx.rawArgs.replace(""String_Node_Str"",""String_Node_Str""),ctx.rawArgs.length() / 2,""String_Node_Str"",true,""String_Node_Str""),'\n'),0,2);
    topText=results[0];
    bottomText=results[1];
  }
  json.put(""String_Node_Str"",template);
  try {
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
  }
 catch (  JSONException none) {
    json.put(""String_Node_Str"",""String_Node_Str"");
    json.put(""String_Node_Str"",""String_Node_Str"");
  }
  json.put(""String_Node_Str"",topText);
  json.put(""String_Node_Str"",bottomText);
  logger.info(""String_Node_Str"",json);
  Unirest.post(""String_Node_Str"").body(json).asJsonAsync(new Callback<JsonNode>(){
    @Override public void completed(    HttpResponse<JsonNode> response){
      JSONObject resp=response.getBody().getObject();
      logger.info(resp);
      if (resp.getBoolean(""String_Node_Str"")) {
        ctx.send(new EmbedBuilder().setColor(randomColor()).setImage(resp.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"")).build()).queue();
      }
 else {
        ctx.send(""String_Node_Str"" + resp.getString(""String_Node_Str"") + '`').queue();
      }
    }
    @Override public void failed(    UnirestException e){
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    }
    @Override public void cancelled(){
      ctx.send(""String_Node_Str"").queue();
    }
  }
);
}","@Command(name=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"") public void cmdMeme(Context ctx){
  if (ctx.rawArgs.length() < 1) {
    ctx.send(""String_Node_Str"").queue();
    return;
  }
  JSONObject json=new JSONObject();
  int template=61579;
  String topText;
  String bottomText;
  if (ctx.rawArgs.contains(""String_Node_Str"")) {
    final int sepIndex=ctx.rawArgs.indexOf('|');
    topText=ctx.rawArgs.substring(0,sepIndex).trim();
    bottomText=ctx.rawArgs.substring(sepIndex + 1).trim();
  }
 else {
    String[] results=ArrayUtils.subarray(StringUtils.split(WordUtils.wrap(ctx.rawArgs.replace(""String_Node_Str"",""String_Node_Str""),ctx.rawArgs.length() / 2,""String_Node_Str"",true,""String_Node_Str""),'\n'),0,2);
    topText=results[0];
    bottomText=results[1];
  }
  json.put(""String_Node_Str"",template);
  try {
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
    json.put(""String_Node_Str"",bot.getKeys().getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
  }
 catch (  JSONException none) {
    json.put(""String_Node_Str"",""String_Node_Str"");
    json.put(""String_Node_Str"",""String_Node_Str"");
  }
  json.put(""String_Node_Str"",topText);
  json.put(""String_Node_Str"",bottomText);
  logger.info(""String_Node_Str"",json);
  Unirest.post(""String_Node_Str"").body(json).asJsonAsync(new Callback<JsonNode>(){
    @Override public void completed(    HttpResponse<JsonNode> response){
      JSONObject resp=response.getBody().getObject();
      logger.info(resp);
      if (resp.getBoolean(""String_Node_Str"")) {
        ctx.send(new EmbedBuilder().setColor(randomColor()).setImage(resp.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"")).build()).queue();
      }
 else {
        ctx.send(""String_Node_Str"" + resp.getString(""String_Node_Str"") + '`').queue();
      }
    }
    @Override public void failed(    UnirestException e){
      logger.error(""String_Node_Str"",e);
      ctx.send(""String_Node_Str"" + e.getMessage() + '`').queue();
    }
    @Override public void cancelled(){
      ctx.send(""String_Node_Str"").queue();
    }
  }
);
}"
79598,"public PrimitiveIterator.OfInt chars(){
class CodePointIterator implements PrimitiveIterator.OfInt {
    int cur=0;
    @Override public void forEachRemaining(    IntConsumer block){
      final int length=length();
      int i=cur;
      try {
        while (i < length) {
          char c1=data.charAt(i++);
          if (!Character.isHighSurrogate(c1) || i >= length) {
            block.accept(c1);
          }
 else {
            char c2=data.charAt(i);
            if (Character.isLowSurrogate(c2)) {
              i++;
              block.accept(Character.toCodePoint(c1,c2));
            }
 else {
              block.accept(c1);
            }
          }
        }
      }
  finally {
        cur=i;
      }
    }
    public boolean hasNext(){
      return cur < data.length();
    }
    public int nextInt(){
      final int length=data.length();
      if (cur >= length) {
        throw new NoSuchElementException();
      }
      char c1=data.charAt(cur++);
      if (Character.isHighSurrogate(c1) && cur < length) {
        char c2=data.charAt(cur);
        if (Character.isLowSurrogate(c2)) {
          cur++;
          return Character.toCodePoint(c1,c2);
        }
      }
      return c1;
    }
  }
  return new CodePointIterator();
}","public PrimitiveIterator.OfInt chars(){
class CodePointIterator implements PrimitiveIterator.OfInt {
    private int cur=0;
    @Override public void forEachRemaining(    IntConsumer block){
      final int length=length();
      int i=cur;
      try {
        while (i < length) {
          char c1=data.charAt(i++);
          if (!Character.isHighSurrogate(c1) || i >= length) {
            block.accept(c1);
          }
 else {
            char c2=data.charAt(i);
            if (Character.isLowSurrogate(c2)) {
              i++;
              block.accept(Character.toCodePoint(c1,c2));
            }
 else {
              block.accept(c1);
            }
          }
        }
      }
  finally {
        cur=i;
      }
    }
    public boolean hasNext(){
      return cur < data.length();
    }
    public int nextInt(){
      final int length=data.length();
      if (cur >= length) {
        throw new NoSuchElementException();
      }
      char c1=data.charAt(cur++);
      if (Character.isHighSurrogate(c1) && cur < length) {
        char c2=data.charAt(cur);
        if (Character.isLowSurrogate(c2)) {
          cur++;
          return Character.toCodePoint(c1,c2);
        }
      }
      return c1;
    }
  }
  return new CodePointIterator();
}"
79599,"@Provides @Named(AuthenticatorOathServiceFactory.FACTORY_NAME) @Inject AuthenticatorDeviceServiceFactory<AuthenticatorOathService> getAuthenticatorOathServiceFactory(@Named(""String_Node_Str"") Debug debug,@Named(AuthenticatorOathService.SERVICE_NAME) ServiceConfigManager serviceConfigManager){
  return new AuthenticatorDeviceServiceFactory<>(debug,serviceConfigManager,new AuthenticatorOathServiceFactory());
}","@Provides @Named(AuthenticatorOathServiceFactory.FACTORY_NAME) @Inject @Singleton AuthenticatorDeviceServiceFactory<AuthenticatorOathService> getAuthenticatorOathServiceFactory(@Named(""String_Node_Str"") Debug debug,@Named(AuthenticatorOathService.SERVICE_NAME) ServiceConfigManager serviceConfigManager){
  return new AuthenticatorDeviceServiceFactory<>(debug,serviceConfigManager,new AuthenticatorOathServiceFactory());
}"
79600,"@Provides @Named(AuthenticatorPushServiceFactory.FACTORY_NAME) @Inject AuthenticatorDeviceServiceFactory<AuthenticatorPushService> getAuthenticatorPushServiceFactory(@Named(""String_Node_Str"") Debug debug,@Named(AuthenticatorPushService.SERVICE_NAME) ServiceConfigManager serviceConfigManager){
  return new AuthenticatorDeviceServiceFactory<>(debug,serviceConfigManager,new AuthenticatorPushServiceFactory());
}","@Provides @Named(AuthenticatorPushServiceFactory.FACTORY_NAME) @Inject @Singleton AuthenticatorDeviceServiceFactory<AuthenticatorPushService> getAuthenticatorPushServiceFactory(@Named(""String_Node_Str"") Debug debug,@Named(AuthenticatorPushService.SERVICE_NAME) ServiceConfigManager serviceConfigManager){
  return new AuthenticatorDeviceServiceFactory<>(debug,serviceConfigManager,new AuthenticatorPushServiceFactory());
}"
79601,"/** 
 * Converts a serialised string back into a JSON device profile.
 * @param value the value to parse back into a JSON device profile.
 * @return the JSON device profile.
 * @throws IllegalArgumentException if the value cannot be parsed as a string.
 */
JsonValue stringToDeviceProfile(String value);","/** 
 * Converts a serialised string back into a JSON device profile.
 * @param value the value to parse back into a JSON device profile.
 * @return the JSON device profile.
 * @throws IllegalArgumentException if the value cannot be parsed as a string.
 * @throws JsonException if the value cannot be parsed as Json.
 */
JsonValue stringToDeviceProfile(String value);"
79602,"/** 
 * Gets a user's device profiles. The returned profiles must be stored in JSON format.
 * @param username User whose profiles to return.
 * @param realm Realm in which we are operating.
 * @return A list of device profiles.
 * @throws InternalServerErrorException If there is a problem retrieving the device profiles.
 */
public List<JsonValue> getDeviceProfiles(String username,String realm) throws InternalServerErrorException {
  List<JsonValue> devices=new ArrayList<>();
  final AMIdentity identity=getIdentity(username,realm);
  try {
    final DeviceService deviceService=serviceFactory.create(realm);
    final String attrName=deviceService.getConfigStorageAttributeName();
    final DeviceSerialisation deviceSerialisation=deviceService.getDeviceSerialisationStrategy();
    Set<String> set=(Set<String>)identity.getAttribute(attrName);
    for (    String profile : set) {
      devices.add(deviceSerialisation.stringToDeviceProfile(profile));
    }
    return devices;
  }
 catch (  SSOException|IdRepoException|SMSException e) {
    throw new InternalServerErrorException(e.getMessage(),e);
  }
}","/** 
 * Gets a user's device profiles. The returned profiles must be stored in JSON format.
 * @param username User whose profiles to return.
 * @param realm Realm in which we are operating.
 * @return A list of device profiles.
 * @throws InternalServerErrorException If there is a problem retrieving the device profiles.
 */
public List<JsonValue> getDeviceProfiles(String username,String realm) throws InternalServerErrorException {
  List<JsonValue> devices=new ArrayList<>();
  final AMIdentity identity=getIdentity(username,realm);
  try {
    final DeviceService deviceService=serviceFactory.create(realm);
    final String attrName=deviceService.getConfigStorageAttributeName();
    final DeviceSerialisation deviceSerialisation=deviceService.getDeviceSerialisationStrategy();
    Set<String> set=(Set<String>)identity.getAttribute(attrName);
    for (    String profile : set) {
      try {
        devices.add(deviceSerialisation.stringToDeviceProfile(profile));
      }
 catch (      JsonException jve) {
      }
    }
    return devices;
  }
 catch (  SSOException|IdRepoException|SMSException e) {
    throw new InternalServerErrorException(e.getMessage(),e);
  }
}"
79603,"/** 
 * Construct a new OathDevicesDao.
 * @param serviceFactory Factory used to retrieve the Push Service for this dao.
 */
public OathDevicesDao(AuthenticatorDeviceServiceFactory<AuthenticatorOathService> serviceFactory){
  super(serviceFactory);
}","/** 
 * Construct a new OathDevicesDao.
 * @param serviceFactory Factory used to retrieve the Push Service for this dao.
 */
@Inject public OathDevicesDao(@Named(FACTORY_NAME) AuthenticatorDeviceServiceFactory<AuthenticatorOathService> serviceFactory){
  super(serviceFactory);
}"
79604,"/** 
 * Construct a new PushDevicesDao.
 * @param serviceFactory Factory used to retrieve the Push Service for this dao.
 */
public PushDevicesDao(AuthenticatorDeviceServiceFactory<AuthenticatorPushService> serviceFactory){
  super(serviceFactory);
}","/** 
 * Construct a new PushDevicesDao.
 * @param serviceFactory Factory used to retrieve the Push Service for this dao.
 */
@Inject public PushDevicesDao(@Named(AuthenticatorPushServiceFactory.FACTORY_NAME) AuthenticatorDeviceServiceFactory<AuthenticatorPushService> serviceFactory){
  super(serviceFactory);
}"
79605,"/** 
 * Generates a new AuthenticatorDeviceServiceFactory, configuring a listener on the provided ServiceConfigManager to listen to changes in its settings.
 * @param debug For writing debug messages.
 * @param serviceConfigManager To communicate with the data store.
 */
public AuthenticatorDeviceServiceFactory(Debug debug,ServiceConfigManager serviceConfigManager,DeviceServiceFactory<T> factory){
  this.debug=debug;
  this.factory=factory;
  this.serviceConfigManager=serviceConfigManager;
  if (serviceConfigManager != null) {
    serviceConfigManager.addListener(new AuthenticatorDeviceServiceFactoryServiceListener());
  }
}","/** 
 * Generates a new AuthenticatorDeviceServiceFactory, configuring a listener on the provided ServiceConfigManager to listen to changes in its settings.
 * @param debug For writing debug messages.
 * @param serviceConfigManager To communicate with the data store.
 * @param factory For producing DeviceServices.
 */
public AuthenticatorDeviceServiceFactory(Debug debug,ServiceConfigManager serviceConfigManager,DeviceServiceFactory<T> factory){
  this.debug=debug;
  this.factory=factory;
  this.serviceConfigManager=serviceConfigManager;
  if (serviceConfigManager != null) {
    serviceConfigManager.addListener(new AuthenticatorDeviceServiceFactoryServiceListener());
  }
}"
79606,"private int waitingChecks() throws AuthLoginException {
  try {
    Boolean ctsValue=checkCTS(messageId);
    if (ctsValue != null) {
      pushService.getMessageDispatcher(realm).forget(messageId);
      coreTokenService.deleteAsync(messageId);
      if (ctsValue) {
        storeUsername(amIdentityPrincipal.getName());
        return ISAuthConstants.LOGIN_SUCCEED;
      }
 else {
        throw failedAsLoginException();
      }
    }
  }
 catch (  CoreTokenException e) {
    DEBUG.warning(""String_Node_Str"",e);
  }
catch (  PushNotificationException e) {
    DEBUG.error(""String_Node_Str"",e);
    throw failedAsLoginException();
  }
  setPollbackTimePeriod(pollingWaitAssistant.getWaitPeriod());
  pollingWaitAssistant.resetWait();
  return STATE_WAIT_FOR_RESPONSE_FROM_QR_SCAN;
}","private int waitingChecks() throws AuthLoginException {
  try {
    Boolean ctsValue=checkCTS(messageId);
    if (ctsValue != null) {
      pushService.getMessageDispatcher(realm).forget(messageId);
      coreTokenService.deleteAsync(messageId);
      if (ctsValue) {
        return finaliseSuccess();
      }
 else {
        throw failedAsLoginException();
      }
    }
  }
 catch (  CoreTokenException e) {
    DEBUG.warning(""String_Node_Str"",e);
  }
catch (  PushNotificationException e) {
    DEBUG.error(""String_Node_Str"",e);
    throw failedAsLoginException();
  }
  setPollbackTimePeriod(pollingWaitAssistant.getWaitPeriod());
  pollingWaitAssistant.resetWait();
  return STATE_WAIT_FOR_RESPONSE_FROM_QR_SCAN;
}"
79607,"private int completeChecks() throws AuthLoginException {
  try {
    coreTokenService.deleteAsync(messageId);
  }
 catch (  CoreTokenException e) {
    DEBUG.warning(""String_Node_Str"",e);
  }
  saveDeviceDetailsUnderUserAccount();
  return STATE_CONFIRMATION;
}","private int completeChecks() throws AuthLoginException {
  try {
    coreTokenService.deleteAsync(messageId);
  }
 catch (  CoreTokenException e) {
    DEBUG.warning(""String_Node_Str"",e);
  }
  return finaliseSuccess();
}"
79608,"@Override public String getRegServiceLocation(){
  return ROUTE + ""String_Node_Str"";
}","@Override public String getRegServiceLocation(){
  return (realm.endsWith(""String_Node_Str"") ? realm : realm + ""String_Node_Str"") + ROUTE + ""String_Node_Str"";
}"
79609,"@Override public String getAuthServiceLocation(){
  return ROUTE + ""String_Node_Str"";
}","@Override public String getAuthServiceLocation(){
  return (realm.endsWith(""String_Node_Str"") ? realm : realm + ""String_Node_Str"") + ROUTE + ""String_Node_Str"";
}"
79610,"/** 
 * Default constructor sets the debug for passing into produced delegates.
 */
public SnsHttpDelegateFactory(){
  messageResourceFactory=InjectorHolder.getInstance(SnsMessageResourceFactory.class);
  pushMessageConverter=InjectorHolder.getInstance(SnsPushMessageConverter.class);
  router=InjectorHolder.getInstance(KEY);
}","/** 
 * Default constructor sets the debug for passing into produced delegates.
 */
public SnsHttpDelegateFactory(){
  pushMessageConverter=InjectorHolder.getInstance(SnsPushMessageConverter.class);
  snsMessageResource=InjectorHolder.getInstance(SnsMessageResource.class);
  router=InjectorHolder.getInstance(KEY);
}"
79611,"@Override public SnsHttpDelegate produceDelegateFor(PushNotificationServiceConfig config,String realm,MessageDispatcher messageDispatcher) throws PushNotificationException {
  AmazonSNSClient service=new SnsClientFactory().produce(config);
  SnsMessageResource messageResource=messageResourceFactory.produce(messageDispatcher);
  return new SnsHttpDelegate(service,config,router,messageResource,pushMessageConverter,realm,messageDispatcher);
}","@Override public SnsHttpDelegate produceDelegateFor(PushNotificationServiceConfig config,String realm,MessageDispatcher messageDispatcher) throws PushNotificationException {
  AmazonSNSClient service=new SnsClientFactory().produce(config);
  return new SnsHttpDelegate(service,config,router,snsMessageResource,pushMessageConverter,realm,messageDispatcher);
}"
79612,"private Promise<ActionResponse,ResourceException> handle(Context context,ActionRequest actionRequest){
  Reject.ifFalse(context.containsContext(RealmContext.class));
  final JsonValue actionContent=actionRequest.getContent();
  String realm=context.asContext(RealmContext.class).getResolvedRealm();
  JsonValue messageIdLoc=actionContent.get(MESSAGE_ID_JSON_POINTER);
  String messageId;
  if (messageIdLoc == null) {
    debug.warning(""String_Node_Str"",realm);
    return RestUtils.generateBadRequestException();
  }
 else {
    messageId=messageIdLoc.asString();
  }
  try {
    messageDispatcher.handle(messageId,actionContent);
  }
 catch (  NotFoundException e) {
    debug.warning(""String_Node_Str"",messageId,realm,e);
    try {
      attemptFromCTS(messageId,actionContent);
    }
 catch (    IllegalAccessException|InstantiationException|ClassNotFoundException|CoreTokenException|NotFoundException ex) {
      debug.warning(""String_Node_Str"",messageId,ex);
      return RestUtils.generateBadRequestException();
    }
  }
catch (  PredicateNotMetException e) {
    debug.warning(""String_Node_Str"",messageId,realm,e);
    return RestUtils.generateBadRequestException();
  }
  return newResultPromise(newActionResponse(json(object())));
}","private Promise<ActionResponse,ResourceException> handle(Context context,ActionRequest actionRequest){
  Reject.ifFalse(context.containsContext(RealmContext.class));
  final JsonValue actionContent=actionRequest.getContent();
  String realm=context.asContext(RealmContext.class).getResolvedRealm();
  JsonValue messageIdLoc=actionContent.get(MESSAGE_ID_JSON_POINTER);
  String messageId;
  if (messageIdLoc == null) {
    debug.warning(""String_Node_Str"",realm);
    return RestUtils.generateBadRequestException();
  }
 else {
    messageId=messageIdLoc.asString();
  }
  try {
    pushNotificationService.getMessageDispatcher(realm).handle(messageId,actionContent);
  }
 catch (  NotFoundException|PushNotificationException e) {
    debug.warning(""String_Node_Str"",messageId,realm,e);
    try {
      attemptFromCTS(messageId,actionContent);
    }
 catch (    IllegalAccessException|InstantiationException|ClassNotFoundException|CoreTokenException|NotFoundException ex) {
      debug.warning(""String_Node_Str"",messageId,ex);
      return RestUtils.generateBadRequestException();
    }
  }
catch (  PredicateNotMetException e) {
    debug.warning(""String_Node_Str"",messageId,realm,e);
    return RestUtils.generateBadRequestException();
  }
  return newResultPromise(newActionResponse(json(object())));
}"
79613,"/** 
 * Generate a new SnsMessageResource using the provided MessageDispatcher.
 * @param coreTokenService A copy of the core token services - messages are dropped on to this for use in clusteredenvironments.
 * @param messageDispatcher Used to deliver messages received at this endpoint to their appropriate locationswithin OpenAM.
 * @param jsonSerialisation Used to perform the serialisation necessary for inserting tokens into the CTS.
 * @param debug For writing out debug messages.
 */
public SnsMessageResource(CTSPersistentStore coreTokenService,MessageDispatcher messageDispatcher,JSONSerialisation jsonSerialisation,@Named(""String_Node_Str"") Debug debug){
  this.messageDispatcher=messageDispatcher;
  this.jsonSerialisation=jsonSerialisation;
  this.debug=debug;
  this.coreTokenService=coreTokenService;
}","/** 
 * Generate a new SnsMessageResource using the provided MessageDispatcher.
 * @param coreTokenService A copy of the core token services - messages are dropped on to this for use in clusteredenvironments.
 * @param pushNotificationService Used to get the message dispatcher, usde to deliver messages received at thisendpoint to their appropriate locations within OpenAM.
 * @param jsonSerialisation Used to perform the serialisation necessary for inserting tokens into the CTS.
 * @param debug For writing out debug messages.
 */
@Inject public SnsMessageResource(CTSPersistentStore coreTokenService,PushNotificationService pushNotificationService,JSONSerialisation jsonSerialisation,@Named(""String_Node_Str"") Debug debug){
  this.pushNotificationService=pushNotificationService;
  this.jsonSerialisation=jsonSerialisation;
  this.debug=debug;
  this.coreTokenService=coreTokenService;
}"
79614,"/** 
 * SnsMessageResourceFactory to provude SnsMessageResources with the appropriate resources.
 * @param coreTokenService The CTS instance to utilise.
 * @param jsonSerialisation For serializing down to the CTS.
 * @param debug For logging purposes.
 */
@Inject public SnsMessageResourceFactory(CTSPersistentStore coreTokenService,JSONSerialisation jsonSerialisation,@Named(""String_Node_Str"") Debug debug){
  this.coreTokenService=coreTokenService;
  this.jsonSerialisation=jsonSerialisation;
  this.debug=debug;
}","/** 
 * SnsMessageResourceFactory to provude SnsMessageResources with the appropriate resources.
 * @param coreTokenService The CTS instance to utilise.
 * @param jsonSerialisation For serializing down to the CTS.
 * @param debug For logging purposes.
 * @param pushNotificationService for retrieving the appropriate message dispatcher for this realm.
 */
@Inject public SnsMessageResourceFactory(CTSPersistentStore coreTokenService,JSONSerialisation jsonSerialisation,@Named(""String_Node_Str"") Debug debug,PushNotificationService pushNotificationService){
  this.coreTokenService=coreTokenService;
  this.jsonSerialisation=jsonSerialisation;
  this.pushNotificationService=pushNotificationService;
  this.debug=debug;
}"
79615,"/** 
 * Generates a new SnsMessageResource.
 * @param messageDispatcher The MessageDispatcher which backs this message resource.
 * @return a new SnsMessageResource.
 */
public SnsMessageResource produce(MessageDispatcher messageDispatcher){
  return new SnsMessageResource(coreTokenService,messageDispatcher,jsonSerialisation,debug);
}","/** 
 * Generates a new SnsMessageResource.
 * @return a new SnsMessageResource.
 */
public SnsMessageResource produce(){
  return new SnsMessageResource(coreTokenService,pushNotificationService,jsonSerialisation,debug);
}"
79616,"@BeforeMethod public void theSetUp(){
  mockDispatcher=mock(MessageDispatcher.class);
  Debug mockDebug=mock(Debug.class);
  mockCTS=mock(CTSPersistentStore.class);
  JSONSerialisation mockSerialisation=mock(JSONSerialisation.class);
  messageResource=new SnsMessageResource(mockCTS,mockDispatcher,mockSerialisation,mockDebug);
}","@BeforeMethod public void theSetUp(){
  mockService=mock(PushNotificationService.class);
  Debug mockDebug=mock(Debug.class);
  mockCTS=mock(CTSPersistentStore.class);
  mockDispatcher=mock(MessageDispatcher.class);
  try {
    given(mockService.getMessageDispatcher(anyString())).willReturn(mockDispatcher);
  }
 catch (  PushNotificationException e) {
  }
  JSONSerialisation mockSerialisation=mock(JSONSerialisation.class);
  messageResource=new SnsMessageResource(mockCTS,mockService,mockSerialisation,mockDebug);
}"
79617,"/** 
 * Returns the <code>AuthnRequest</code> from HttpServletRequest
 */
private static AuthnRequest getAuthnRequest(HttpServletRequest request,boolean isFromECP,String binding){
  if (isFromECP) {
    try {
      SOAPMessage msg=SOAPCommunicator.getInstance().getSOAPMessage(request);
      Element elem=SOAPCommunicator.getInstance().getSamlpElement(msg,SAML2Constants.AUTHNREQUEST);
      return ProtocolFactory.getInstance().createAuthnRequest(elem);
    }
 catch (    Exception ex) {
      SAML2Utils.debug.error(""String_Node_Str"",ex);
    }
    return null;
  }
 else {
    String samlRequest=request.getParameter(SAML2Constants.SAML_REQUEST);
    if (samlRequest == null) {
      SAML2Utils.debug.error(""String_Node_Str"");
      return null;
    }
    if (binding.equals(SAML2Constants.HTTP_REDIRECT)) {
      SAML2Utils.debug.message(""String_Node_Str"",samlRequest);
      return getAuthnRequest(samlRequest);
    }
 else     if (binding.equals(SAML2Constants.HTTP_POST)) {
      ByteArrayInputStream bis=null;
      AuthnRequest authnRequest=null;
      try {
        byte[] raw=Base64.decode(samlRequest);
        if (raw != null) {
          bis=new ByteArrayInputStream(raw);
          Document doc=XMLUtils.toDOMDocument(bis,SAML2Utils.debug);
          if (doc != null) {
            SAML2Utils.debug.message(""String_Node_Str"",XMLUtils.print(doc.getDocumentElement()));
            authnRequest=ProtocolFactory.getInstance().createAuthnRequest(doc.getDocumentElement());
          }
 else {
            SAML2Utils.debug.error(""String_Node_Str"" + samlRequest);
          }
        }
      }
 catch (      Exception ex) {
        SAML2Utils.debug.error(""String_Node_Str"",ex);
        return null;
      }
 finally {
        IOUtils.closeIfNotNull(bis);
      }
      return authnRequest;
    }
    return null;
  }
}","/** 
 * Returns the <code>AuthnRequest</code> from HttpServletRequest
 */
private static AuthnRequest getAuthnRequest(HttpServletRequest request,boolean isFromECP,String binding){
  if (isFromECP) {
    try {
      SOAPMessage msg=SOAPCommunicator.getInstance().getSOAPMessage(request);
      Element elem=SOAPCommunicator.getInstance().getSamlpElement(msg,SAML2Constants.AUTHNREQUEST);
      return ProtocolFactory.getInstance().createAuthnRequest(elem);
    }
 catch (    Exception ex) {
      SAML2Utils.debug.error(""String_Node_Str"",ex);
    }
    return null;
  }
 else {
    String samlRequest=request.getParameter(SAML2Constants.SAML_REQUEST);
    if (samlRequest == null) {
      SAML2Utils.debug.error(""String_Node_Str"");
      return null;
    }
    if (binding.equals(SAML2Constants.HTTP_REDIRECT)) {
      SAML2Utils.debug.message(""String_Node_Str"",samlRequest);
      return getAuthnRequest(samlRequest);
    }
 else     if (binding.equals(SAML2Constants.HTTP_POST)) {
      ByteArrayInputStream bis=null;
      AuthnRequest authnRequest=null;
      try {
        byte[] raw=Base64.decode(samlRequest);
        if (raw != null) {
          bis=new ByteArrayInputStream(raw);
          Document doc=XMLUtils.toDOMDocument(bis,SAML2Utils.debug);
          if (doc != null) {
            SAML2Utils.debug.message(""String_Node_Str"" + ""String_Node_Str"",XMLUtils.print(doc.getDocumentElement()));
            authnRequest=ProtocolFactory.getInstance().createAuthnRequest(doc.getDocumentElement());
          }
 else {
            SAML2Utils.debug.error(""String_Node_Str"" + ""String_Node_Str"" + samlRequest);
          }
        }
      }
 catch (      Exception ex) {
        SAML2Utils.debug.error(""String_Node_Str"",ex);
        return null;
      }
 finally {
        IOUtils.closeIfNotNull(bis);
      }
      return authnRequest;
    }
    return null;
  }
}"
79618,"/** 
 * {@inheritDoc}
 */
public AccessToken handle(OAuth2Request request,ClientRegistration clientRegistration,OAuth2ProviderSettings providerSettings) throws RedirectUriMismatchException, InvalidClientException, InvalidRequestException, InvalidCodeException, InvalidGrantException, ServerException, NotFoundException {
  for (  final AuthorizationCodeRequestValidator requestValidator : requestValidators) {
    requestValidator.validateRequest(request,clientRegistration);
  }
  final String code=request.getParameter(OAuth2Constants.Params.CODE);
  final String redirectUri=request.getParameter(OAuth2Constants.Params.REDIRECT_URI);
  final AuthorizationCode authorizationCode=tokenStore.readAuthorizationCode(request,code);
  if (authorizationCode == null) {
    logger.error(""String_Node_Str"" + code);
    throw new InvalidRequestException(""String_Node_Str"");
  }
  final String codeVerifier=request.getParameter(OAuth2Constants.Custom.CODE_VERIFIER);
  if (providerSettings.isCodeVerifierRequired()) {
    if (codeVerifier == null) {
      String message=""String_Node_Str"";
      throw new InvalidRequestException(message);
    }
  }
  AccessToken accessToken;
  Set<String> authorizationScope;
synchronized (code.intern()) {
    if (authorizationCode.isIssued()) {
      String clientId=authorizationCode.getClientId();
      String userName=authorizationCode.getResourceOwnerId();
      String authGrantId=authorizationCode.getAuthGrantId();
      tokenInvalidator.invalidateTokens(request,clientId,userName,authGrantId);
      logger.error(""String_Node_Str"" + code);
      throw new InvalidGrantException();
    }
    if (!authorizationCode.getRedirectUri().equalsIgnoreCase(redirectUri)) {
      logger.error(""String_Node_Str"" + code + ""String_Node_Str""+ authorizationCode.getRedirectUri()+ ""String_Node_Str""+ redirectUri);
      throw new InvalidGrantException();
    }
    if (!authorizationCode.getClientId().equalsIgnoreCase(clientRegistration.getClientId())) {
      logger.error(""String_Node_Str"" + code + ""String_Node_Str""+ authorizationCode.getClientId()+ ""String_Node_Str""+ clientRegistration.getClientId());
      throw new InvalidGrantException();
    }
    if (authorizationCode.isExpired()) {
      logger.error(""String_Node_Str"" + code);
      throw new InvalidCodeException(""String_Node_Str"");
    }
    if (providerSettings.isCodeVerifierRequired()) {
      checkCodeVerifier(authorizationCode,codeVerifier);
    }
    final String grantType=request.getParameter(OAuth2Constants.Params.GRANT_TYPE);
    authorizationScope=authorizationCode.getScope();
    final String resourceOwnerId=authorizationCode.getResourceOwnerId();
    final String validatedClaims=providerSettings.validateRequestedClaims(authorizationCode.getStringProperty(OAuth2Constants.Custom.CLAIMS));
    accessToken=accessTokenGenerator.generateAccessToken(providerSettings,grantType,clientRegistration.getClientId(),resourceOwnerId,redirectUri,authorizationScope,validatedClaims,code,authorizationCode.getNonce(),request);
    authorizationCode.setIssued();
    tokenStore.updateAuthorizationCode(request,authorizationCode);
  }
  final String nonce=authorizationCode.getNonce();
  accessToken.addExtraData(OAuth2Constants.Custom.NONCE,nonce);
  accessToken.addExtraData(OAuth2Constants.Custom.SSO_TOKEN_ID,authorizationCode.getSessionId());
  providerSettings.additionalDataToReturnFromTokenEndpoint(accessToken,request);
  accessToken.addExtraData(OAuth2Constants.Custom.SSO_TOKEN_ID,null);
  if (authorizationScope != null && !authorizationScope.isEmpty()) {
    accessToken.addExtraData(OAuth2Constants.Params.SCOPE,joinScope(authorizationScope));
  }
  return accessToken;
}","/** 
 * {@inheritDoc}
 */
public AccessToken handle(OAuth2Request request,ClientRegistration clientRegistration,OAuth2ProviderSettings providerSettings) throws RedirectUriMismatchException, InvalidClientException, InvalidRequestException, InvalidCodeException, InvalidGrantException, ServerException, NotFoundException {
  for (  final AuthorizationCodeRequestValidator requestValidator : requestValidators) {
    requestValidator.validateRequest(request,clientRegistration);
  }
  final String code=request.getParameter(OAuth2Constants.Params.CODE);
  final String redirectUri=request.getParameter(OAuth2Constants.Params.REDIRECT_URI);
  final AuthorizationCode authorizationCode=tokenStore.readAuthorizationCode(request,code);
  if (authorizationCode == null) {
    logger.error(""String_Node_Str"" + code);
    throw new InvalidRequestException(""String_Node_Str"");
  }
  final String codeVerifier=request.getParameter(OAuth2Constants.Custom.CODE_VERIFIER);
  if (providerSettings.isCodeVerifierRequired()) {
    if (codeVerifier == null) {
      String message=""String_Node_Str"";
      throw new InvalidRequestException(message);
    }
  }
  AccessToken accessToken;
  Set<String> authorizationScope;
synchronized (code.intern()) {
    if (authorizationCode.isIssued()) {
      String clientId=authorizationCode.getClientId();
      String userName=authorizationCode.getResourceOwnerId();
      String authGrantId=authorizationCode.getAuthGrantId();
      tokenInvalidator.invalidateTokens(request,clientId,userName,authGrantId);
      logger.error(""String_Node_Str"" + code);
      throw new InvalidGrantException();
    }
    if (!authorizationCode.getRedirectUri().equalsIgnoreCase(redirectUri)) {
      logger.error(""String_Node_Str"" + code + ""String_Node_Str""+ authorizationCode.getRedirectUri()+ ""String_Node_Str""+ redirectUri);
      throw new InvalidGrantException();
    }
    if (!authorizationCode.getClientId().equalsIgnoreCase(clientRegistration.getClientId())) {
      logger.error(""String_Node_Str"" + code + ""String_Node_Str""+ authorizationCode.getClientId()+ ""String_Node_Str""+ clientRegistration.getClientId());
      throw new InvalidGrantException();
    }
    if (authorizationCode.isExpired()) {
      logger.error(""String_Node_Str"" + code);
      throw new InvalidGrantException(""String_Node_Str"");
    }
    if (providerSettings.isCodeVerifierRequired()) {
      checkCodeVerifier(authorizationCode,codeVerifier);
    }
    final String grantType=request.getParameter(OAuth2Constants.Params.GRANT_TYPE);
    authorizationScope=authorizationCode.getScope();
    final String resourceOwnerId=authorizationCode.getResourceOwnerId();
    final String validatedClaims=providerSettings.validateRequestedClaims(authorizationCode.getStringProperty(OAuth2Constants.Custom.CLAIMS));
    accessToken=accessTokenGenerator.generateAccessToken(providerSettings,grantType,clientRegistration.getClientId(),resourceOwnerId,redirectUri,authorizationScope,validatedClaims,code,authorizationCode.getNonce(),request);
    authorizationCode.setIssued();
    tokenStore.updateAuthorizationCode(request,authorizationCode);
  }
  final String nonce=authorizationCode.getNonce();
  accessToken.addExtraData(OAuth2Constants.Custom.NONCE,nonce);
  accessToken.addExtraData(OAuth2Constants.Custom.SSO_TOKEN_ID,authorizationCode.getSessionId());
  providerSettings.additionalDataToReturnFromTokenEndpoint(accessToken,request);
  accessToken.addExtraData(OAuth2Constants.Custom.SSO_TOKEN_ID,null);
  if (authorizationScope != null && !authorizationScope.isEmpty()) {
    accessToken.addExtraData(OAuth2Constants.Params.SCOPE,joinScope(authorizationScope));
  }
  return accessToken;
}"
79619,"/** 
 * Returns tokens from Principals of a subject returns a Set of tokens TODO - DN to Universal ID?
 * @param subject Principals of a subject associated with<code>SSOToken</code>
 * @return set of  <code>SSOToken</code> associated with subject
 */
Set<String> getTokenFromPrincipal(Subject subject){
  Set<Principal> principal=subject.getPrincipals();
  Set<String> tokenSet=new HashSet<String>();
  StringBuilder pList=new StringBuilder();
  Iterator<Principal> p=principal.iterator();
  while (p.hasNext()) {
    this.token=(p.next()).getName();
    if (this.token != null && !containsToken(pList,token)) {
      pList.append(this.token).append(""String_Node_Str"");
      String tmpDN=DNUtils.normalizeDN(this.token);
      if (tmpDN != null) {
        this.userDN=tmpDN;
        this.token=DNUtils.DNtoName(this.token);
      }
 else       if (tmpDN == null && this.userDN == null) {
        this.userDN=this.token;
      }
    }
    if (!tokenSet.contains(this.token)) {
      tokenSet.add(this.token);
    }
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + this.token);
    }
  }
  principalList=pList.toString();
  if (principalList != null) {
    principalList=principalList.substring(0,principalList.length() - 1);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + principalList);
  }
  return tokenSet;
}","/** 
 * Returns tokens from Principals of a subject returns a Set of tokens TODO - DN to Universal ID?
 * @param subject Principals of a subject associated with<code>SSOToken</code>
 * @return set of  <code>SSOToken</code> associated with subject
 */
Set<String> getTokenFromPrincipal(Subject subject){
  Set<String> tokenSet=new HashSet<>();
  List<String> principalNames=new ArrayList<>(subject.getPrincipals().size());
  for (  Principal p : subject.getPrincipals()) {
    token=p.getName();
    if (token != null && !principalNames.contains(token)) {
      principalNames.add(token);
      if (LDAPUtils.isDN(token)) {
        userDN=token;
        token=DNUtils.DNtoName(token);
      }
 else       if (!LDAPUtils.isDN(token) && userDN == null) {
        userDN=token;
      }
    }
    if (!tokenSet.contains(token)) {
      tokenSet.add(token);
    }
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + this.token);
    }
  }
  principalList=Joiner.on('|').join(principalNames);
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + principalList);
  }
  return tokenSet;
}"
79620,"@Override public String getSessionId(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public String getSessionId(){
  return null;
}"
79621,"public Map<String,Object> getTokenInfo(){
  JwtClaimsSet claimsSet=jwt.getClaimsSet();
  Map<String,Object> tokenInfo=new HashMap<>();
  for (  String key : claimsSet.keys()) {
    tokenInfo.put(key,claimsSet.get(key).getObject());
  }
  return tokenInfo;
}","public Map<String,Object> getTokenInfo(){
  JwtClaimsSet claimsSet=jwt.getClaimsSet();
  Map<String,Object> tokenInfo=new HashMap<>();
  for (  String key : claimsSet.keys()) {
    tokenInfo.put(key,claimsSet.get(key).getObject());
  }
  tokenInfo.put(getTokenName(),jwtString);
  return tokenInfo;
}"
79622,"/** 
 * Gets the name of the parameters in the current request
 * @return    The parameter names in the request
 */
public abstract Set<String> getParameterNames();","/** 
 * Gets the name of the parameters in the current request
 * @return The parameter names in the request
 */
public abstract Set<String> getParameterNames();"
79623,"/** 
 * Gets the name of the parameters in the current request
 * @return The parameter names in the request
 */
@Override public Set<String> getParameterNames(){
  if (request.getMethod().equals(Method.GET)) {
    return request.getResourceRef().getQueryAsForm().getNames();
  }
 else   if (request.getMethod().equals(Method.POST)) {
    if (request.getEntity() != null) {
      if (MediaType.APPLICATION_WWW_FORM.equals(request.getEntity().getMediaType())) {
        Form form=new Form(request.getEntity());
        request.setEntity(form.getWebRepresentation());
        return form.getNames();
      }
 else       if (MediaType.APPLICATION_JSON.equals(request.getEntity().getMediaType())) {
        return getBody().keys();
      }
    }
  }
  return null;
}","/** 
 * Gets the name of the parameters in the current request
 * @return The parameter names in the request
 */
@Override public Set<String> getParameterNames(){
  if (request.getMethod().equals(Method.GET)) {
    return request.getResourceRef().getQueryAsForm().getNames();
  }
 else   if (request.getMethod().equals(Method.POST)) {
    if (request.getEntity() != null) {
      if (MediaType.APPLICATION_WWW_FORM.equals(request.getEntity().getMediaType())) {
        Form form=new Form(request.getEntity());
        request.setEntity(form.getWebRepresentation());
        return form.getNames();
      }
 else       if (MediaType.APPLICATION_JSON.equals(request.getEntity().getMediaType())) {
        return getBody().keys();
      }
    }
  }
  return Collections.emptySet();
}"
79624,"@Test public void shouldReturnParameterNamesWithGET(){
  setQueryParam(request);
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  Set<String> parameterNames=requestUnderTest.getParameterNames();
  assertEquals(parameterNames,new HashSet<String>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
}","@Test public void shouldReturnParameterNamesWithGET(){
  setQueryParam(request);
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  Set<String> parameterNames=requestUnderTest.getParameterNames();
  assertThat(parameterNames).containsOnly(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
79625,"@Test public void shouldReturnZeroAsQueryParamCountWhenParamNotPresent(){
  setQueryParam(request);
  int result=requestUnderTest.getParameterCount(""String_Node_Str"");
  assertEquals(result,0);
}","@Test public void shouldReturnZeroAsQueryParamCountWhenParamNotPresent(){
  setQueryParam(request);
  int result=requestUnderTest.getParameterCount(""String_Node_Str"");
  assertThat(result).isEqualTo(0);
}"
79626,"@Test public void shouldReturnParameterNamesWithPOST(){
  Map<String,String> bodyParams=new HashMap<String,String>();
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  final JacksonRepresentation<Map> representation=new JacksonRepresentation<Map>(bodyParams);
  request.setEntity(representation);
  Set<String> parameterNames=requestUnderTest.getParameterNames();
  assertEquals(parameterNames,new HashSet<String>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
}","@Test public void shouldReturnParameterNamesWithPOST(){
  Map<String,String> bodyParams=new HashMap<String,String>();
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  bodyParams.put(""String_Node_Str"",""String_Node_Str"");
  final JacksonRepresentation<Map> representation=new JacksonRepresentation<Map>(bodyParams);
  request.setEntity(representation);
  Set<String> parameterNames=requestUnderTest.getParameterNames();
  assertThat(parameterNames).containsOnly(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
79627,"@Test public void shouldReturnOneAsQueryParamCount(){
  setQueryParam(request);
  int result=requestUnderTest.getParameterCount(""String_Node_Str"");
  assertEquals(result,1);
}","@Test public void shouldReturnOneAsQueryParamCount(){
  setQueryParam(request);
  int result=requestUnderTest.getParameterCount(""String_Node_Str"");
  assertThat(result).isEqualTo(1);
}"
79628,"@Test public void shouldReturnTwoAsQueryParamCountWhenParamSetTwice(){
  setQueryParam(request);
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  int result=requestUnderTest.getParameterCount(""String_Node_Str"");
  assertEquals(result,2);
}","@Test public void shouldReturnTwoAsQueryParamCountWhenParamSetTwice(){
  setQueryParam(request);
  request.getResourceRef().addQueryParameter(""String_Node_Str"",""String_Node_Str"");
  int result=requestUnderTest.getParameterCount(""String_Node_Str"");
  assertThat(result).isEqualTo(2);
}"
79629,"/** 
 * Sends the request to the original Auth server and receives the result data.
 * @param request HttpServletRequest to be sent
 * @param response HttpServletResponse to be received
 * @param cookieURL URL of the original authentication server to beconnected
 * @return HashMap of the result data from the original server's response
 */
public static Map<String,Object> sendAuthRequestToOrigServer(HttpServletRequest request,HttpServletResponse response,String cookieURL){
  Map<String,Object> origRequestData=new HashMap<String,Object>();
  if (utilDebug.messageEnabled()) {
    StringBuilder message=new StringBuilder();
    Enumeration<String> requestHeaders=request.getHeaderNames();
    while (requestHeaders.hasMoreElements()) {
      String name=requestHeaders.nextElement();
      Enumeration value=(Enumeration)request.getHeaders(name);
      message.append(""String_Node_Str"").append(name).append(""String_Node_Str"").append(value).append(""String_Node_Str"");
    }
    utilDebug.message(message.toString());
  }
  HttpURLConnection conn=null;
  OutputStream out=null;
  String strCookies=null;
  URL authURL=null;
  try {
    String queryString=request.getQueryString();
    if (queryString != null) {
      authURL=new URL(cookieURL + ""String_Node_Str"" + queryString);
    }
 else {
      authURL=new URL(cookieURL);
    }
    if (utilDebug.messageEnabled()) {
      utilDebug.message(""String_Node_Str"" + authURL);
    }
    conn=HttpURLConnectionManager.getConnection(authURL);
    conn.setUseCaches(useCache);
    conn.setFollowRedirects(false);
    conn.setInstanceFollowRedirects(false);
    conn.setRequestProperty(ISAuthConstants.ACCEPT_LANG_HEADER,request.getHeader(ISAuthConstants.ACCEPT_LANG_HEADER));
    conn.setRequestProperty(""String_Node_Str"",request.getHeader(""String_Node_Str""));
    List<Cookie> cookies=removeLocalLoadBalancingCookie(asList(request.getCookies()));
    strCookies=getCookiesString(cookies);
    if (strCookies != null) {
      if (utilDebug.messageEnabled()) {
        utilDebug.message(""String_Node_Str"" + strCookies);
      }
      conn.setRequestProperty(""String_Node_Str"",strCookies);
    }
    utilDebug.message(""String_Node_Str"");
    copyRequestHeaders(request,conn);
    if (request.getMethod().equals(""String_Node_Str"")) {
      conn.connect();
    }
 else {
      Map<String,Set<String>> queryParams=new HashMap<String,Set<String>>();
      if (queryString != null) {
        for (        String param : queryString.split(""String_Node_Str"")) {
          int idx=param.indexOf('=');
          if (idx != -1) {
            String paramName=param.substring(0,idx);
            String paramValue=param.substring(idx + 1);
            Set<String> values=queryParams.get(paramName);
            if (values == null) {
              values=new HashSet<String>();
              queryParams.put(paramName,values);
            }
            values.add(paramValue);
          }
        }
      }
      conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      Map<String,String[]> params=request.getParameterMap();
      Map<String,Set<String>> postParams=new HashMap<String,Set<String>>();
      for (      Map.Entry<String,String[]> entry : params.entrySet()) {
        if (queryParams.containsKey(entry.getKey())) {
        }
 else {
          postParams.put(entry.getKey(),new HashSet<String>(asList(entry.getValue())));
        }
      }
      String postData=getFormData(postParams);
      if (utilDebug.messageEnabled()) {
        utilDebug.message(""String_Node_Str"" + postData);
      }
      if (postData.trim().length() > 0) {
        conn.setDoOutput(true);
        conn.setRequestMethod(""String_Node_Str"");
        out=conn.getOutputStream();
        PrintWriter pw=new PrintWriter(out);
        pw.print(postData);
        pw.flush();
        pw.close();
      }
    }
    utilDebug.message(""String_Node_Str"");
    if (utilDebug.messageEnabled()) {
      utilDebug.message(""String_Node_Str"",conn.getResponseCode(),conn.getResponseMessage());
    }
    if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
      StringBuilder in_buf=new StringBuilder();
      BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream(),""String_Node_Str""));
      int len;
      char[] buf=new char[1024];
      while ((len=in.read(buf,0,buf.length)) != -1) {
        in_buf.append(buf,0,len);
      }
      String in_string=in_buf.toString();
      if (utilDebug.messageEnabled()) {
        utilDebug.message(""String_Node_Str"" + in_string);
      }
      origRequestData.put(""String_Node_Str"",in_string);
    }
 else {
      utilDebug.warning(""String_Node_Str"");
    }
    String client_type=conn.getHeaderField(""String_Node_Str"");
    if (client_type != null) {
      origRequestData.put(""String_Node_Str"",client_type);
    }
    String redirect_url=conn.getHeaderField(""String_Node_Str"");
    if (redirect_url != null) {
      try {
        URL gotoURL=new URL(redirect_url);
        if (isSameServer(authURL,gotoURL)) {
          if (utilDebug.messageEnabled()) {
            utilDebug.message(""String_Node_Str"");
          }
          String path=gotoURL.getPath();
          String query=gotoURL.getQuery();
          redirect_url=(path != null ? path : ""String_Node_Str"") + (query != null ? ""String_Node_Str"" + gotoURL.getQuery() : ""String_Node_Str"");
        }
        if (utilDebug.messageEnabled()) {
          utilDebug.message(""String_Node_Str"" + redirect_url);
        }
        origRequestData.put(""String_Node_Str"",redirect_url);
      }
 catch (      MalformedURLException murle) {
        origRequestData.put(""String_Node_Str"",redirect_url);
      }
    }
    String content_type=conn.getHeaderField(""String_Node_Str"");
    if (content_type != null) {
      origRequestData.put(""String_Node_Str"",content_type);
    }
    origRequestData.put(""String_Node_Str"",conn.getResponseCode());
    copyResponseHeaders(conn.getHeaderFields(),response);
  }
 catch (  IOException ioe) {
    origRequestData.put(""String_Node_Str"",ioe);
  }
catch (  Exception e) {
    if (utilDebug.warningEnabled()) {
      utilDebug.warning(""String_Node_Str"",e);
    }
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ioe) {
        if (utilDebug.messageEnabled()) {
          utilDebug.message(""String_Node_Str"",ioe);
        }
      }
    }
  }
  return origRequestData;
}","/** 
 * Sends the request to the original Auth server and receives the result data.
 * @param request HttpServletRequest to be sent
 * @param response HttpServletResponse to be received
 * @param cookieURL URL of the original authentication server to beconnected
 * @return HashMap of the result data from the original server's response
 */
public static Map<String,Object> sendAuthRequestToOrigServer(HttpServletRequest request,HttpServletResponse response,String cookieURL){
  Map<String,Object> origRequestData=new HashMap<String,Object>();
  if (utilDebug.messageEnabled()) {
    StringBuilder message=new StringBuilder();
    Enumeration<String> requestHeaders=request.getHeaderNames();
    while (requestHeaders.hasMoreElements()) {
      String name=requestHeaders.nextElement();
      Enumeration value=(Enumeration)request.getHeaders(name);
      message.append(""String_Node_Str"").append(name).append(""String_Node_Str"").append(value).append(""String_Node_Str"");
    }
    utilDebug.message(message.toString());
  }
  HttpURLConnection conn=null;
  OutputStream out=null;
  String strCookies=null;
  URL authURL=null;
  try {
    String queryString=request.getQueryString();
    if (queryString != null) {
      authURL=new URL(cookieURL + ""String_Node_Str"" + queryString);
    }
 else {
      authURL=new URL(cookieURL);
    }
    if (utilDebug.messageEnabled()) {
      utilDebug.message(""String_Node_Str"" + authURL);
    }
    conn=HttpURLConnectionManager.getConnection(authURL);
    conn.setUseCaches(useCache);
    conn.setFollowRedirects(false);
    conn.setInstanceFollowRedirects(false);
    conn.setRequestProperty(ISAuthConstants.ACCEPT_LANG_HEADER,request.getHeader(ISAuthConstants.ACCEPT_LANG_HEADER));
    conn.setRequestProperty(""String_Node_Str"",request.getHeader(""String_Node_Str""));
    List<Cookie> cookies=removeLocalLoadBalancingCookie(asList(request.getCookies()));
    strCookies=getCookiesString(cookies);
    if (strCookies != null) {
      if (utilDebug.messageEnabled()) {
        utilDebug.message(""String_Node_Str"" + strCookies);
      }
      conn.setRequestProperty(""String_Node_Str"",strCookies);
    }
    utilDebug.message(""String_Node_Str"");
    copyRequestHeaders(request,conn);
    if (request.getMethod().equals(""String_Node_Str"")) {
      conn.connect();
    }
 else {
      Map<String,Set<String>> queryParams=new HashMap<String,Set<String>>();
      if (queryString != null) {
        for (        String param : queryString.split(""String_Node_Str"")) {
          int idx=param.indexOf('=');
          if (idx != -1) {
            String paramName=param.substring(0,idx);
            String paramValue=param.substring(idx + 1);
            Set<String> values=queryParams.get(paramName);
            if (values == null) {
              values=new HashSet<String>();
              queryParams.put(paramName,values);
            }
            values.add(paramValue);
          }
        }
      }
      conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      Map<String,String[]> params=request.getParameterMap();
      Map<String,Set<String>> postParams=new HashMap<String,Set<String>>();
      for (      Map.Entry<String,String[]> entry : params.entrySet()) {
        if (queryParams.containsKey(entry.getKey())) {
        }
 else {
          Set<String> values=new HashSet<String>();
          for (          String value : entry.getValue()) {
            values.add(getCharDecodedField(value,""String_Node_Str""));
          }
          postParams.put(entry.getKey(),values);
        }
      }
      String postData=getFormData(postParams);
      if (utilDebug.messageEnabled()) {
        utilDebug.message(""String_Node_Str"" + postData);
      }
      if (postData.trim().length() > 0) {
        conn.setDoOutput(true);
        conn.setRequestMethod(""String_Node_Str"");
        out=conn.getOutputStream();
        PrintWriter pw=new PrintWriter(out);
        pw.print(postData);
        pw.flush();
        pw.close();
      }
    }
    utilDebug.message(""String_Node_Str"");
    if (utilDebug.messageEnabled()) {
      utilDebug.message(""String_Node_Str"",conn.getResponseCode(),conn.getResponseMessage());
    }
    if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
      StringBuilder in_buf=new StringBuilder();
      BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream(),""String_Node_Str""));
      int len;
      char[] buf=new char[1024];
      while ((len=in.read(buf,0,buf.length)) != -1) {
        in_buf.append(buf,0,len);
      }
      String in_string=in_buf.toString();
      if (utilDebug.messageEnabled()) {
        utilDebug.message(""String_Node_Str"" + in_string);
      }
      origRequestData.put(""String_Node_Str"",in_string);
    }
 else {
      utilDebug.warning(""String_Node_Str"");
    }
    String client_type=conn.getHeaderField(""String_Node_Str"");
    if (client_type != null) {
      origRequestData.put(""String_Node_Str"",client_type);
    }
    String redirect_url=conn.getHeaderField(""String_Node_Str"");
    if (redirect_url != null) {
      try {
        URL gotoURL=new URL(redirect_url);
        if (isSameServer(authURL,gotoURL)) {
          if (utilDebug.messageEnabled()) {
            utilDebug.message(""String_Node_Str"");
          }
          String path=gotoURL.getPath();
          String query=gotoURL.getQuery();
          redirect_url=(path != null ? path : ""String_Node_Str"") + (query != null ? ""String_Node_Str"" + gotoURL.getQuery() : ""String_Node_Str"");
        }
        if (utilDebug.messageEnabled()) {
          utilDebug.message(""String_Node_Str"" + redirect_url);
        }
        origRequestData.put(""String_Node_Str"",redirect_url);
      }
 catch (      MalformedURLException murle) {
        origRequestData.put(""String_Node_Str"",redirect_url);
      }
    }
    String content_type=conn.getHeaderField(""String_Node_Str"");
    if (content_type != null) {
      origRequestData.put(""String_Node_Str"",content_type);
    }
    origRequestData.put(""String_Node_Str"",conn.getResponseCode());
    copyResponseHeaders(conn.getHeaderFields(),response);
  }
 catch (  IOException ioe) {
    origRequestData.put(""String_Node_Str"",ioe);
  }
catch (  Exception e) {
    if (utilDebug.warningEnabled()) {
      utilDebug.warning(""String_Node_Str"",e);
    }
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ioe) {
        if (utilDebug.messageEnabled()) {
          utilDebug.message(""String_Node_Str"",ioe);
        }
      }
    }
  }
  return origRequestData;
}"
79630,"@Override public Promise<ResourceResponse,ResourceException> readInstance(Context serverContext,ReadRequest readRequest){
  Map<String,String> uriVariables=getUriTemplateVariables(serverContext);
  final String tabName=getTabName(uriVariables);
  if (tabName == null) {
    return new BadRequestException(""String_Node_Str"").asPromise();
  }
  final String serverName=getServerName(uriVariables);
  if (serverName == null) {
    return new BadRequestException(""String_Node_Str"").asPromise();
  }
  try {
    ServiceConfigManager scm=getServiceConfigManager(serverContext);
    ServiceConfig serverConfigs=getServerConfigs(scm);
    Properties defaultAttributes=getAttributes(serverConfigs.getSubConfig(SERVER_DEFAULT_NAME));
    final ServiceConfig serverConfig=serverConfigs.getSubConfig(serverName);
    if (serverConfig == null) {
      return new BadRequestException(""String_Node_Str"" + serverName).asPromise();
    }
    Properties serverSpecificAttributes=getAttributes(serverConfig);
    Map<String,Object> defaultSection=new HashMap<>();
    JsonValue result=json(object());
    final boolean isServerDefault=serverName.equalsIgnoreCase(SERVER_DEFAULT_NAME);
    if (!isServerDefault) {
      result.put(""String_Node_Str"",defaultSection);
    }
    List<String> attributeNamesForTab;
    if (tabName.equalsIgnoreCase(DIRECTORY_CONFIGURATION_TAB_NAME)) {
      final String serverConfigXml=getServerConfigXml(serverConfig);
      if (serverConfigXml != null) {
        InputStream resourceStream=new StringInputStream(serverConfigXml);
        Document serverXml=dBuilder.parse(resourceStream);
        XPath xPath=XPathFactory.newInstance().newXPath();
        final String baseExpression=""String_Node_Str"";
        String minConnections=(String)xPath.compile(baseExpression + ""String_Node_Str"" + DSConfigMgr.MIN_CONN_POOL).evaluate(serverXml,XPathConstants.STRING);
        String maxConnections=(String)xPath.compile(baseExpression + ""String_Node_Str"" + DSConfigMgr.MAX_CONN_POOL).evaluate(serverXml,XPathConstants.STRING);
        String dirDN=(String)xPath.compile(baseExpression + ""String_Node_Str"").evaluate(serverXml,XPathConstants.STRING);
        String directoryPassword=(String)xPath.compile(baseExpression + ""String_Node_Str"").evaluate(serverXml,XPathConstants.STRING);
        result.put(""String_Node_Str"",minConnections);
        result.put(""String_Node_Str"",maxConnections);
        result.put(""String_Node_Str"",dirDN);
        result.put(""String_Node_Str"",directoryPassword);
        NodeList serverNames=(NodeList)xPath.compile(baseExpression + ""String_Node_Str"").evaluate(serverXml,XPathConstants.NODESET);
        for (int i=0; i < serverNames.getLength(); i++) {
          final String directoryServerName=serverNames.item(i).getNodeValue();
          final String serverExpression=baseExpression + ""String_Node_Str"" + directoryServerName+ ""String_Node_Str"";
          String hostExpression=serverExpression + ""String_Node_Str"";
          String portExpression=serverExpression + ""String_Node_Str"";
          String typeExpression=serverExpression + ""String_Node_Str"";
          NodeList serverAttributes=(NodeList)xPath.compile(hostExpression + ""String_Node_Str"" + portExpression+ ""String_Node_Str""+ typeExpression).evaluate(serverXml,XPathConstants.NODESET);
          for (int a=0; a < serverAttributes.getLength(); a++) {
            final Node serverAttribute=serverAttributes.item(a);
            result.addPermissive(new JsonPointer(""String_Node_Str"" + directoryServerName + ""String_Node_Str""+ serverAttribute.getNodeName()),serverAttribute.getNodeValue());
          }
        }
      }
    }
 else {
      if (tabName.equalsIgnoreCase(ADVANCED_TAB_NAME)) {
        attributeNamesForTab=getAdvancedTabAttributeNames(serverConfig);
      }
 else {
        attributeNamesForTab=getDefaultValueNames(tabName);
      }
      Map<String,String> attributeNamesToSections=getAttributeNamesToSections(tabName);
      for (      String attributeName : attributeNamesForTab) {
        final Object defaultAttribute=getValue(defaultAttributes,attributeName);
        final String sectionName=attributeNamesToSections.get(attributeName);
        if (defaultAttribute != null) {
          defaultSection.put(sectionName + ""String_Node_Str"" + attributeName,defaultAttribute);
        }
        final Object serverSpecificAttribute=getValue(serverSpecificAttributes,attributeName);
        if (serverSpecificAttribute != null) {
          result.putPermissive(new JsonPointer(sectionName + ""String_Node_Str"" + attributeName),serverSpecificAttribute);
        }
      }
    }
    return newResultPromise(newResourceResponse(serverName + ""String_Node_Str"" + tabName,String.valueOf(result.hashCode()),result));
  }
 catch (  SMSException|SSOException|ParserConfigurationException|SAXException|IOException|XPathExpressionException e) {
    logger.error(""String_Node_Str"" + tabName,e);
  }
  return new BadRequestException(""String_Node_Str"" + tabName).asPromise();
}","@Override public Promise<ResourceResponse,ResourceException> readInstance(Context serverContext,ReadRequest readRequest){
  Map<String,String> uriVariables=getUriTemplateVariables(serverContext);
  final String tabName=getTabName(uriVariables);
  if (tabName == null) {
    return new BadRequestException(""String_Node_Str"").asPromise();
  }
  final String serverName=getServerName(uriVariables);
  if (serverName == null) {
    return new BadRequestException(""String_Node_Str"").asPromise();
  }
  try {
    ServiceConfigManager scm=getServiceConfigManager(serverContext);
    ServiceConfig serverConfigs=getServerConfigs(scm);
    Properties defaultAttributes=getAttributes(serverConfigs.getSubConfig(SERVER_DEFAULT_NAME));
    final ServiceConfig serverConfig=serverConfigs.getSubConfig(serverName);
    if (serverConfig == null) {
      return new BadRequestException(""String_Node_Str"" + serverName).asPromise();
    }
    Properties serverSpecificAttributes=getAttributes(serverConfig);
    Map<String,Object> defaultSection=new HashMap<>();
    JsonValue result=json(object());
    final boolean isServerDefault=serverName.equalsIgnoreCase(SERVER_DEFAULT_NAME);
    if (!isServerDefault) {
      result.put(""String_Node_Str"",defaultSection);
    }
    List<String> attributeNamesForTab;
    if (tabName.equalsIgnoreCase(DIRECTORY_CONFIGURATION_TAB_NAME)) {
      final String serverConfigXml=getServerConfigXml(serverConfig);
      if (serverConfigXml != null) {
        InputStream resourceStream=new StringInputStream(serverConfigXml);
        Document serverXml=dBuilder.parse(resourceStream);
        XPath xPath=XPathFactory.newInstance().newXPath();
        final String baseExpression=""String_Node_Str"";
        String minConnections=(String)xPath.compile(baseExpression + ""String_Node_Str"" + DSConfigMgr.MIN_CONN_POOL).evaluate(serverXml,XPathConstants.STRING);
        String maxConnections=(String)xPath.compile(baseExpression + ""String_Node_Str"" + DSConfigMgr.MAX_CONN_POOL).evaluate(serverXml,XPathConstants.STRING);
        String dirDN=(String)xPath.compile(baseExpression + ""String_Node_Str"").evaluate(serverXml,XPathConstants.STRING);
        String directoryPassword=(String)xPath.compile(baseExpression + ""String_Node_Str"").evaluate(serverXml,XPathConstants.STRING);
        result.put(""String_Node_Str"",minConnections);
        result.put(""String_Node_Str"",maxConnections);
        result.put(""String_Node_Str"",dirDN);
        result.put(""String_Node_Str"",directoryPassword);
        NodeList serverNames=(NodeList)xPath.compile(baseExpression + ""String_Node_Str"").evaluate(serverXml,XPathConstants.NODESET);
        for (int i=0; i < serverNames.getLength(); i++) {
          final String directoryServerName=serverNames.item(i).getNodeValue();
          final String serverExpression=baseExpression + ""String_Node_Str"" + directoryServerName+ ""String_Node_Str"";
          String hostExpression=serverExpression + ""String_Node_Str"";
          String portExpression=serverExpression + ""String_Node_Str"";
          String typeExpression=serverExpression + ""String_Node_Str"";
          NodeList serverAttributes=(NodeList)xPath.compile(hostExpression + ""String_Node_Str"" + portExpression+ ""String_Node_Str""+ typeExpression).evaluate(serverXml,XPathConstants.NODESET);
          for (int a=0; a < serverAttributes.getLength(); a++) {
            final Node serverAttribute=serverAttributes.item(a);
            result.addPermissive(new JsonPointer(""String_Node_Str"" + directoryServerName + ""String_Node_Str""+ serverAttribute.getNodeName()),serverAttribute.getNodeValue());
          }
        }
      }
    }
 else {
      if (tabName.equalsIgnoreCase(ADVANCED_TAB_NAME)) {
        attributeNamesForTab=getAdvancedTabAttributeNames(serverConfig);
      }
 else {
        attributeNamesForTab=getDefaultValueNames(tabName);
      }
      Map<String,String> attributeNamesToSections=getAttributeNamesToSections(tabName);
      for (      String attributeName : attributeNamesForTab) {
        final String defaultAttribute=(String)defaultAttributes.get(attributeName);
        final String sectionName=tabName.equals(ADVANCED_TAB_NAME) ? ""String_Node_Str"" : attributeNamesToSections.get(attributeName);
        String attributePath=sectionName == null ? ""String_Node_Str"" : sectionName + ""String_Node_Str"";
        if (defaultAttribute != null) {
          defaultSection.put(attributePath + attributeName,(String)defaultAttributes.get(attributeName));
        }
        final String serverSpecificAttribute=(String)serverSpecificAttributes.get(attributeName);
        if (serverSpecificAttribute != null) {
          result.putPermissive(new JsonPointer(attributePath + attributeName),serverSpecificAttribute);
        }
      }
    }
    return newResultPromise(newResourceResponse(serverName + ""String_Node_Str"" + tabName,String.valueOf(result.hashCode()),result));
  }
 catch (  SMSException|SSOException|ParserConfigurationException|SAXException|IOException|XPathExpressionException e) {
    logger.error(""String_Node_Str"" + tabName,e);
  }
  return new BadRequestException(""String_Node_Str"" + tabName).asPromise();
}"
79631,"private Object getValue(Properties attributes,String attributeName){
  final String type=getType(attributeName);
  if (type != null && type.equals(""String_Node_Str"")) {
    return new Integer((String)attributes.get(attributeName));
  }
 else {
    return attributes.get(attributeName);
  }
}","private Object getValue(Properties attributes,String attributeName){
  final String type=getType(attributeName);
  final String value=(String)attributes.get(attributeName);
  if (type != null && type.equals(""String_Node_Str"") && !value.isEmpty()) {
    return new Integer(value);
  }
 else {
    return value;
  }
}"
79632,"@Override public void addResourceRoutes(ResourceRouter rootRouter,ResourceRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(REALMS).authorizeWith(PrivilegeAuthzModule.class).toCollection(RealmResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.ORGANIZATION));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).through(RealmContextFilter.class).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.GLOBAL));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toSingleton(SmsServerPropertiesResource.class);
}","@Override public void addResourceRoutes(ResourceRouter rootRouter,ResourceRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(REALMS).authorizeWith(PrivilegeAuthzModule.class).toCollection(RealmResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.ORGANIZATION));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.GLOBAL));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toSingleton(SmsServerPropertiesResource.class);
}"
79633,"@Override public void addResourceRoutes(ResourceRouter rootRouter,ResourceRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(REALMS).authorizeWith(PrivilegeAuthzModule.class).toCollection(RealmResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.ORGANIZATION));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).through(RealmContextFilter.class).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.GLOBAL));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toSingleton(SmsServerPropertiesResource.class);
}","@Override public void addResourceRoutes(ResourceRouter rootRouter,ResourceRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(REALMS).authorizeWith(PrivilegeAuthzModule.class).toCollection(RealmResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.ORGANIZATION));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).toRequestHandler(STARTS_WITH,smsRequestHandlerFactory.create(SchemaType.GLOBAL));
  rootRouter.route(""String_Node_Str"").auditAs(CONFIG).authorizeWith(PrivilegeAuthzModule.class).toSingleton(SmsServerPropertiesResource.class);
}"
79634,"public boolean handleResource(ResourceResponse resource){
  response.add(resource.getContent());
  return true;
}","public boolean handleResource(ResourceResponse resource){
  response.add(resource.getContent().getObject());
  return true;
}"
79635,"@Override public Set<HttpRoute> get(){
  rootRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptActions(""String_Node_Str"")).auditAs(OAUTH).toCollection(TokenResource.class);
  rootRouter.route(""String_Node_Str"").authenticateWith(ssoToken()).auditAs(OAUTH).authorizeWith(AdminOnlyAuthzModule.class).toCollection(ClientResource.class);
  return Collections.singleton(HttpRoute.newHttpRoute(STARTS_WITH,""String_Node_Str"",newHttpHandler(rootRouter.getRouter())));
}","@Override public Set<HttpRoute> get(){
  rootRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptActions(""String_Node_Str"")).auditAs(OAUTH).toCollection(TokenResource.class);
  rootRouter.route(""String_Node_Str"").authenticateWith(ssoToken()).auditAs(OAUTH).authorizeWith(AdminOnlyAuthzModule.class).toCollection(ClientResource.class);
  return Collections.singleton(HttpRoute.newHttpRoute(STARTS_WITH,""String_Node_Str"",Handlers.chainOf(newHttpHandler(rootRouter.getRouter()),authenticationFilter)));
}"
79636,"/** 
 * Handles create site request.
 * @param event Request invocation event
 */
public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {
  ServerSiteModel model=(ServerSiteModel)getModel();
  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);
  String name=(String)getDisplayFieldValue(TF_NAME);
  name=name.trim();
  String url=(String)getDisplayFieldValue(TF_URL);
  url=url.trim();
  if ((name.length() > 0) && (url.length() > 0)) {
    try {
      model.createSite(name,url);
      backTrail();
      ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);
      passPgSessionMap(vb);
      vb.forwardTo(getRequestContext());
    }
 catch (    AMConsoleException e) {
      setInlineAlertMessage(CCAlert.TYPE_ERROR,""String_Node_Str"",e.getMessage());
      forwardTo();
    }
  }
 else {
    setInlineAlertMessage(CCAlert.TYPE_ERROR,""String_Node_Str"",""String_Node_Str"");
    forwardTo();
  }
}","/** 
 * Handles create site request.
 * @param event Request invocation event
 */
public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {
  ServerSiteModel model=(ServerSiteModel)getModel();
  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);
  String name=(String)getDisplayFieldValue(TF_NAME);
  name=name.trim();
  String url=(String)getDisplayFieldValue(TF_URL);
  url=url.trim();
  if ((name.length() > 0) && (url.length() > 0)) {
    try {
      model.createSite(name,url);
      backTrail();
      ServerSiteViewBean vb=(ServerSiteViewBean)getViewBean(ServerSiteViewBean.class);
      passPgSessionMap(vb);
      vb.forwardTo(getRequestContext());
    }
 catch (    AMConsoleException e) {
      setInlineAlertMessage(CCAlert.TYPE_ERROR,""String_Node_Str"",e.getMessage());
      forwardTo();
    }
  }
 else {
    setInlineAlertMessage(CCAlert.TYPE_ERROR,""String_Node_Str"",model.getLocalizedString(""String_Node_Str""));
    forwardTo();
  }
}"
79637,"@DataProvider(name=""String_Node_Str"") public Object[][] getRelativeCases(){
  return new Object[][]{{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",false}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] getRelativeCases(){
  return new Object[][]{{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"",true},{""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",true},{""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",false}};
}"
79638,"private void auditAccessMessage(AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,LogRecord record,String realm){
  if (!auditEventPublisher.isAuditing(realm,AuditConstants.ACCESS_TOPIC,EventName.AM_ACCESS_ATTEMPT)) {
    return;
  }
  AgentLogParser logParser=new AgentLogParser();
  LogExtracts logExtracts=logParser.tryParse(record.getMessage());
  if (logExtracts == null) {
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Map<String,String> info=record.getLogInfoMap();
  String clientIp=info.get(LogConstants.IP_ADDR);
  if (StringUtils.isEmpty(clientIp)) {
    clientIp=info.get(LogConstants.HOST_NAME);
  }
  String contextId=info.get(LogConstants.CONTEXT_ID);
  String clientId=info.get(LogConstants.LOGIN_ID);
  String resourceUrl=logExtracts.getResourceUrl();
  int queryStringIndex=resourceUrl.indexOf('?');
  String queryString=queryStringIndex > -1 ? resourceUrl.substring(queryStringIndex) : ""String_Node_Str"";
  String path=resourceUrl.replace(queryString,""String_Node_Str"");
  Map<String,List<String>> queryParameters=AMAuditEventBuilderUtils.getQueryParametersAsMap(queryString);
  AuditEvent auditEvent=auditEventFactory.accessEvent(realm).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(Component.POLICY_AGENT).userId(clientId).httpRequest(hasSecureScheme(resourceUrl),""String_Node_Str"",path,queryParameters,Collections.<String,List<String>>emptyMap()).request(""String_Node_Str"",""String_Node_Str"").client(clientIp).trackingId(contextId).response(logExtracts.getStatus(),logExtracts.getStatusCode(),-1,MILLISECONDS).toEvent();
  auditEventPublisher.tryPublish(AuditConstants.ACCESS_TOPIC,auditEvent);
}","private void auditAccessMessage(AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,LogRecord record,String realm){
  AgentLogParser logParser=new AgentLogParser();
  LogExtracts logExtracts=logParser.tryParse(record.getMessage());
  if (logExtracts == null) {
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Map<String,String> info=record.getLogInfoMap();
  String clientIp=info.get(LogConstants.IP_ADDR);
  if (StringUtils.isEmpty(clientIp)) {
    clientIp=info.get(LogConstants.HOST_NAME);
  }
  String contextId=info.get(LogConstants.CONTEXT_ID);
  String clientId=info.get(LogConstants.LOGIN_ID);
  String resourceUrl=logExtracts.getResourceUrl();
  int queryStringIndex=resourceUrl.indexOf('?');
  String queryString=queryStringIndex > -1 ? resourceUrl.substring(queryStringIndex) : ""String_Node_Str"";
  String path=resourceUrl.replace(queryString,""String_Node_Str"");
  Map<String,List<String>> queryParameters=AMAuditEventBuilderUtils.getQueryParametersAsMap(queryString);
  AuditEvent auditEvent=auditEventFactory.accessEvent(realm).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(Component.POLICY_AGENT).userId(clientId).httpRequest(hasSecureScheme(resourceUrl),""String_Node_Str"",path,queryParameters,Collections.<String,List<String>>emptyMap()).request(""String_Node_Str"",""String_Node_Str"").client(clientIp).trackingId(contextId).response(logExtracts.getStatus(),logExtracts.getStatusCode(),-1,MILLISECONDS).toEvent();
  auditEventPublisher.tryPublish(AuditConstants.ACCESS_TOPIC,auditEvent);
}"
79639,"public static void changePassword(Context serverContext,String realm,String username,String oldPassword,String newPassword) throws ResourceException {
  try {
    SSOToken token=serverContext.asContext(SSOTokenContext.class).getCallerSSOToken();
    AMIdentity userIdentity=new AMIdentity(token,username,IdType.USER,realm,null);
    userIdentity.changePassword(oldPassword,newPassword);
  }
 catch (  SSOException ssoe) {
    debug.warning(""String_Node_Str"" + ""String_Node_Str"" + username,ssoe);
    throw new PermanentException(401,""String_Node_Str"",ssoe);
  }
catch (  IdRepoException ire) {
    if (IdRepoBundle.ACCESS_DENIED.equals(ire.getErrorCode())) {
      throw new ForbiddenException(""String_Node_Str"");
    }
 else {
      debug.warning(""String_Node_Str"" + ""String_Node_Str"" + username,ire);
      throw new InternalServerErrorException(""String_Node_Str"",ire);
    }
  }
}","public static void changePassword(Context serverContext,String realm,String username,String oldPassword,String newPassword) throws ResourceException {
  try {
    SSOToken token=serverContext.asContext(SSOTokenContext.class).getCallerSSOToken();
    AMIdentity userIdentity=new AMIdentity(token,username,IdType.USER,realm,null);
    userIdentity.changePassword(oldPassword,newPassword);
  }
 catch (  SSOException ssoe) {
    debug.warning(""String_Node_Str"" + ""String_Node_Str"" + username,ssoe);
    throw new PermanentException(401,""String_Node_Str"",ssoe);
  }
catch (  IdRepoException ire) {
    if (IdRepoBundle.ACCESS_DENIED.equals(ire.getErrorCode())) {
      throw new ForbiddenException(""String_Node_Str"");
    }
 else     if (LDAPConstants.LDAP_INVALID_CREDENTIALS.equals(ire.getLDAPErrorCode())) {
      throw ResourceException.newResourceException(401,""String_Node_Str"");
    }
 else {
      debug.warning(""String_Node_Str"" + ""String_Node_Str"" + username,ire);
      throw new InternalServerErrorException(""String_Node_Str"",ire);
    }
  }
}"
79640,"/** 
 * Validates attributes for create or modify operation. 
 * @param attrMap attributes map to be validated.
 * @param idOp operaton which is ethier <code>IdOperation.CREATE</code> or<code>IdOperation.EDIT</code>
 * @throws IdRepoException If attributes can't be validated or there arerepository related error conditions.
 */
public void validateAttributes(Map<String,Set<String>> attrMap,IdOperation idOp) throws IdRepoException ;","/** 
 * Validates attributes for create or modify operation. 
 * @param attrMap attributes map to be validated.
 * @param idOp operation which is either <code>IdOperation.CREATE</code> or<code>IdOperation.EDIT</code>
 * @throws IdRepoException If attributes can't be validated or there arerepository related error conditions.
 */
void validateAttributes(Map<String,Set<String>> attrMap,IdOperation idOp) throws IdRepoException ;"
79641,"/** 
 * Initialization paramters as configred for a given plugin.
 * @param configParams configuration parameters
 */
public void initialize(Map<String,Set<String>> configParams);","/** 
 * Initialization parameters as configured for a given plugin.
 * @param configParams configuration parameters
 */
void initialize(Map<String,Set<String>> configParams);"
79642,"/** 
 * Validates attributes for create or modify operation. 
 * @param attrMap attributes map to be validated.
 * @param idOp operaton which is ethier <code>IdOperation.CREATE</code> or<code>IdOperation.EDIT</code>
 * @throws IdRepoException If attributes can't be validated or there arerepository related error conditions.
 */
public void validateAttributes(Map<String,Set<String>> attrMap,IdOperation idOp) throws IdRepoException {
  if (minPasswordLength == 0) {
    return;
  }
  attrMap=new CaseInsensitiveHashMap(attrMap);
  if (!attrMap.containsKey(ATTR_USER_PASSWORD)) {
    if (idOp.equals(IdOperation.CREATE)) {
      Object[] args={""String_Node_Str"" + minPasswordLength};
      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",args);
    }
  }
 else {
    Set<String> values=attrMap.get(ATTR_USER_PASSWORD);
    if ((values == null) || (values.isEmpty())) {
      Object[] args={""String_Node_Str"" + minPasswordLength};
      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",args);
    }
 else {
      String password=values.iterator().next();
      if (password.length() < minPasswordLength) {
        Object[] args={""String_Node_Str"" + minPasswordLength};
        throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",args);
      }
    }
  }
}","@Override public void validateAttributes(Map<String,Set<String>> attrMap,IdOperation idOp) throws IdRepoException {
  if (minPasswordLength == 0) {
    return;
  }
  attrMap=new CaseInsensitiveHashMap(attrMap);
  if (!attrMap.containsKey(ATTR_USER_PASSWORD)) {
    if (idOp.equals(IdOperation.CREATE)) {
      Object[] args={""String_Node_Str"" + minPasswordLength};
      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",args);
    }
  }
 else {
    Set<String> values=attrMap.get(ATTR_USER_PASSWORD);
    if ((values == null) || (values.isEmpty())) {
      Object[] args={""String_Node_Str"" + minPasswordLength};
      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",args);
    }
 else {
      String password=values.iterator().next();
      if (password.length() < minPasswordLength) {
        Object[] args={""String_Node_Str"" + minPasswordLength};
        throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",args);
      }
    }
  }
}"
79643,"/** 
 * Initialization paramters as configred for a given plugin.
 * @param configParams configuration parameters
 */
public void initialize(Map<String,Set<String>> configParams){
  if ((configParams == null) || configParams.isEmpty()) {
    return;
  }
  for (  String name : configParams.keySet()) {
    if (name.equals(PROP_MIN_PASSWORD_LENGTH)) {
      Set<String> values=configParams.get(name);
      if ((values != null) && (!values.isEmpty())) {
        String value=values.iterator().next();
        try {
          minPasswordLength=Integer.parseInt(value);
          if (minPasswordLength < 0) {
            minPasswordLength=0;
          }
        }
 catch (        NumberFormatException nfe) {
          if (debug.warningEnabled()) {
            debug.warning(""String_Node_Str"" + ""String_Node_Str"",nfe);
          }
        }
      }
    }
  }
}","@Override public void initialize(Map<String,Set<String>> configParams){
  if ((configParams == null) || configParams.isEmpty()) {
    return;
  }
  for (  String name : configParams.keySet()) {
    if (name.equals(PROP_MIN_PASSWORD_LENGTH)) {
      Set<String> values=configParams.get(name);
      if ((values != null) && (!values.isEmpty())) {
        String value=values.iterator().next();
        try {
          minPasswordLength=Integer.parseInt(value);
          if (minPasswordLength < 0) {
            minPasswordLength=0;
          }
        }
 catch (        NumberFormatException nfe) {
          if (debug.warningEnabled()) {
            debug.warning(""String_Node_Str"" + ""String_Node_Str"",nfe);
          }
        }
      }
    }
  }
}"
79644,"/** 
 * Updates an   {@code AMIdentity} in the identity repository with thedetails specified in  {@code identity}.
 * @param identity The updated identity details.
 * @param admin The admin token.
 * @throws ResourceException If a problem occurs.
 */
public void update(IdentityDetails identity,SSOToken admin) throws ResourceException {
  String idName=identity.getName();
  String idType=identity.getType();
  String realm=identity.getRealm();
  if (StringUtils.isEmpty(idName)) {
    throw new BadRequestException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(idType)) {
    idType=""String_Node_Str"";
  }
  if (realm == null) {
    realm=""String_Node_Str"";
  }
  try {
    IdType objectIdType=getIdType(idType);
    AMIdentityRepository repo=getRepo(admin,realm);
    if (!isOperationSupported(repo,objectIdType,IdOperation.EDIT)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    AMIdentity amIdentity=getAMIdentity(admin,repo,idType,idName);
    if (amIdentity == null) {
      String msg=""String_Node_Str"" + idName + ""String_Node_Str""+ idType+ ""String_Node_Str"";
      throw new NotFoundException(msg);
    }
    if (isSpecialUser(amIdentity)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    Map<String,Set<String>> attrs=asMap(identity.getAttributes());
    if (attrs != null && !attrs.isEmpty()) {
      Map<String,Set<String>> idAttrs=new HashMap<>();
      Set<String> removeAttrs=new HashSet<>();
      for (      Map.Entry<String,Set<String>> entry : attrs.entrySet()) {
        String attrName=entry.getKey();
        Set<String> attrValues=entry.getValue();
        if (attrValues != null && !attrValues.isEmpty()) {
          idAttrs.put(attrName,attrValues);
        }
 else {
          removeAttrs.add(attrName);
        }
      }
      boolean storeNeeded=false;
      if (!idAttrs.isEmpty()) {
        amIdentity.setAttributes(idAttrs);
        storeNeeded=true;
      }
      if (!removeAttrs.isEmpty()) {
        amIdentity.removeAttributes(removeAttrs);
        storeNeeded=true;
      }
      if (storeNeeded) {
        amIdentity.store();
      }
    }
    if (IdType.USER.equals(objectIdType)) {
      Set<String> roles=asSet(identity.getRoleList());
      if (!roles.isEmpty()) {
        setMemberships(repo,amIdentity,roles,IdType.ROLE);
      }
      Set<String> groups=asSet(identity.getGroupList());
      if (!groups.isEmpty()) {
        setMemberships(repo,amIdentity,groups,IdType.GROUP);
      }
    }
    if (IdType.GROUP.equals(objectIdType) || IdType.ROLE.equals(objectIdType)) {
      Set<String> members=asSet(identity.getMemberList());
      if (!members.isEmpty()) {
        setMembers(repo,amIdentity,members,IdType.USER);
      }
    }
  }
 catch (  IdRepoException ex) {
    debug.error(""String_Node_Str"",ex);
    if (LDAPConstants.CONSTRAINT_VIOLATED_ERROR.equals(ex.getErrorCode())) {
      throw new InternalServerErrorException(ex.getConstraintViolationDetails());
    }
    throw convertToResourceException(idServicesErrorHandler.handleError(ex));
  }
catch (  SSOException ex) {
    debug.error(""String_Node_Str"",ex);
    throw new BadRequestException(ex.getMessage());
  }
catch (  ObjectNotFound e) {
    debug.error(""String_Node_Str"",e);
    throw new NotFoundException(e.getMessage());
  }
}","/** 
 * Updates an   {@code AMIdentity} in the identity repository with thedetails specified in  {@code identity}.
 * @param identity The updated identity details.
 * @param admin The admin token.
 * @throws ResourceException If a problem occurs.
 */
public void update(IdentityDetails identity,SSOToken admin) throws ResourceException {
  String idName=identity.getName();
  String idType=identity.getType();
  String realm=identity.getRealm();
  if (StringUtils.isEmpty(idName)) {
    throw new BadRequestException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(idType)) {
    idType=""String_Node_Str"";
  }
  if (realm == null) {
    realm=""String_Node_Str"";
  }
  try {
    IdType objectIdType=getIdType(idType);
    AMIdentityRepository repo=getRepo(admin,realm);
    if (!isOperationSupported(repo,objectIdType,IdOperation.EDIT)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    AMIdentity amIdentity=getAMIdentity(admin,repo,idType,idName);
    if (amIdentity == null) {
      String msg=""String_Node_Str"" + idName + ""String_Node_Str""+ idType+ ""String_Node_Str"";
      throw new NotFoundException(msg);
    }
    if (isSpecialUser(amIdentity)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    Map<String,Set<String>> attrs=asMap(identity.getAttributes());
    if (attrs != null && !attrs.isEmpty()) {
      Map<String,Set<String>> idAttrs=new HashMap<>();
      Set<String> removeAttrs=new HashSet<>();
      for (      Map.Entry<String,Set<String>> entry : attrs.entrySet()) {
        String attrName=entry.getKey();
        Set<String> attrValues=entry.getValue();
        if (attrValues != null && !attrValues.isEmpty()) {
          idAttrs.put(attrName,attrValues);
        }
 else {
          removeAttrs.add(attrName);
        }
      }
      boolean storeNeeded=false;
      if (!idAttrs.isEmpty()) {
        amIdentity.setAttributes(idAttrs);
        storeNeeded=true;
      }
      if (!removeAttrs.isEmpty()) {
        amIdentity.removeAttributes(removeAttrs);
        storeNeeded=true;
      }
      if (storeNeeded) {
        amIdentity.store();
      }
    }
    if (IdType.USER.equals(objectIdType)) {
      Set<String> roles=asSet(identity.getRoleList());
      if (!roles.isEmpty()) {
        setMemberships(repo,amIdentity,roles,IdType.ROLE);
      }
      Set<String> groups=asSet(identity.getGroupList());
      if (!groups.isEmpty()) {
        setMemberships(repo,amIdentity,groups,IdType.GROUP);
      }
    }
    if (IdType.GROUP.equals(objectIdType) || IdType.ROLE.equals(objectIdType)) {
      Set<String> members=asSet(identity.getMemberList());
      if (!members.isEmpty()) {
        setMembers(repo,amIdentity,members,IdType.USER);
      }
    }
  }
 catch (  IdRepoException ex) {
    debug.error(""String_Node_Str"",ex);
    if (LDAPConstants.CONSTRAINT_VIOLATED_ERROR.equals(ex.getErrorCode())) {
      throw new InternalServerErrorException(ex.getConstraintViolationDetails());
    }
    if (LDAPConstants.LDAP_INVALID_SYNTAX.equals(ex.getLDAPErrorCode())) {
      throw new BadRequestException(""String_Node_Str"");
    }
    throw convertToResourceException(idServicesErrorHandler.handleError(ex));
  }
catch (  SSOException ex) {
    debug.error(""String_Node_Str"",ex);
    throw new BadRequestException(ex.getMessage());
  }
catch (  ObjectNotFound e) {
    debug.error(""String_Node_Str"",e);
    throw new NotFoundException(e.getMessage());
  }
}"
79645,"/** 
 * Updates an   {@code AMIdentity} in the identity repository with thedetails specified in  {@code identity}.
 * @param identity The updated identity details.
 * @param admin The admin token.
 * @throws ResourceException If a problem occurs.
 */
public void update(IdentityDetails identity,SSOToken admin) throws ResourceException {
  String idName=identity.getName();
  String idType=identity.getType();
  String realm=identity.getRealm();
  if (StringUtils.isEmpty(idName)) {
    throw new BadRequestException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(idType)) {
    idType=""String_Node_Str"";
  }
  if (realm == null) {
    realm=""String_Node_Str"";
  }
  try {
    IdType objectIdType=getIdType(idType);
    AMIdentityRepository repo=getRepo(admin,realm);
    if (!isOperationSupported(repo,objectIdType,IdOperation.EDIT)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    AMIdentity amIdentity=getAMIdentity(admin,repo,idType,idName);
    if (amIdentity == null) {
      String msg=""String_Node_Str"" + idName + ""String_Node_Str""+ idType+ ""String_Node_Str"";
      throw new NotFoundException(msg);
    }
    if (isSpecialUser(amIdentity)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    Map<String,Set<String>> attrs=asMap(identity.getAttributes());
    if (attrs != null && !attrs.isEmpty()) {
      Map<String,Set<String>> idAttrs=new HashMap<>();
      Set<String> removeAttrs=new HashSet<>();
      for (      Map.Entry<String,Set<String>> entry : attrs.entrySet()) {
        String attrName=entry.getKey();
        Set<String> attrValues=entry.getValue();
        if (attrValues != null && !attrValues.isEmpty()) {
          idAttrs.put(attrName,attrValues);
        }
 else {
          removeAttrs.add(attrName);
        }
      }
      boolean storeNeeded=false;
      if (!idAttrs.isEmpty()) {
        amIdentity.setAttributes(idAttrs);
        storeNeeded=true;
      }
      if (!removeAttrs.isEmpty()) {
        amIdentity.removeAttributes(removeAttrs);
        storeNeeded=true;
      }
      if (storeNeeded) {
        amIdentity.store();
      }
    }
    if (IdType.USER.equals(objectIdType)) {
      Set<String> roles=asSet(identity.getRoleList());
      if (!roles.isEmpty()) {
        setMemberships(repo,amIdentity,roles,IdType.ROLE);
      }
      Set<String> groups=asSet(identity.getGroupList());
      if (!groups.isEmpty()) {
        setMemberships(repo,amIdentity,groups,IdType.GROUP);
      }
    }
    if (IdType.GROUP.equals(objectIdType) || IdType.ROLE.equals(objectIdType)) {
      Set<String> members=asSet(identity.getMemberList());
      if (!members.isEmpty()) {
        setMembers(repo,amIdentity,members,IdType.USER);
      }
    }
  }
 catch (  IdRepoException ex) {
    debug.error(""String_Node_Str"",ex);
    if (LDAPConstants.CONSTRAINT_VIOLATED_ERROR.equals(ex.getErrorCode())) {
      throw new InternalServerErrorException(ex.getConstraintViolationDetails());
    }
    if (LDAPConstants.LDAP_INVALID_SYNTAX.equals(ex.getLDAPErrorCode())) {
      throw new BadRequestException(""String_Node_Str"");
    }
    throw convertToResourceException(idServicesErrorHandler.handleError(ex));
  }
catch (  SSOException ex) {
    debug.error(""String_Node_Str"",ex);
    throw new BadRequestException(ex.getMessage());
  }
catch (  ObjectNotFound e) {
    debug.error(""String_Node_Str"",e);
    throw new NotFoundException(e.getMessage());
  }
}","/** 
 * Updates an   {@code AMIdentity} in the identity repository with thedetails specified in  {@code identity}.
 * @param identity The updated identity details.
 * @param admin The admin token.
 * @throws ResourceException If a problem occurs.
 */
public void update(IdentityDetails identity,SSOToken admin) throws ResourceException {
  String idName=identity.getName();
  String idType=identity.getType();
  String realm=identity.getRealm();
  if (StringUtils.isEmpty(idName)) {
    throw new BadRequestException(""String_Node_Str"");
  }
  if (StringUtils.isEmpty(idType)) {
    idType=""String_Node_Str"";
  }
  if (realm == null) {
    realm=""String_Node_Str"";
  }
  try {
    IdType objectIdType=getIdType(idType);
    AMIdentityRepository repo=getRepo(admin,realm);
    if (!isOperationSupported(repo,objectIdType,IdOperation.EDIT)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    AMIdentity amIdentity=getAMIdentity(admin,repo,idType,idName);
    if (amIdentity == null) {
      String msg=""String_Node_Str"" + idName + ""String_Node_Str""+ idType+ ""String_Node_Str"";
      throw new NotFoundException(msg);
    }
    if (isSpecialUser(amIdentity)) {
      throw new ForbiddenException(""String_Node_Str"");
    }
    Map<String,Set<String>> attrs=asMap(identity.getAttributes());
    if (attrs != null && !attrs.isEmpty()) {
      Map<String,Set<String>> idAttrs=new HashMap<>();
      Set<String> removeAttrs=new HashSet<>();
      for (      Map.Entry<String,Set<String>> entry : attrs.entrySet()) {
        String attrName=entry.getKey();
        Set<String> attrValues=entry.getValue();
        if (attrValues != null && !attrValues.isEmpty()) {
          idAttrs.put(attrName,attrValues);
        }
 else {
          removeAttrs.add(attrName);
        }
      }
      boolean storeNeeded=false;
      if (!idAttrs.isEmpty()) {
        amIdentity.setAttributes(idAttrs);
        storeNeeded=true;
      }
      if (!removeAttrs.isEmpty()) {
        amIdentity.removeAttributes(removeAttrs);
        storeNeeded=true;
      }
      if (storeNeeded) {
        amIdentity.store();
      }
    }
    if (IdType.USER.equals(objectIdType)) {
      Set<String> roles=asSet(identity.getRoleList());
      if (!roles.isEmpty()) {
        setMemberships(repo,amIdentity,roles,IdType.ROLE);
      }
      Set<String> groups=asSet(identity.getGroupList());
      if (!groups.isEmpty()) {
        setMemberships(repo,amIdentity,groups,IdType.GROUP);
      }
    }
    if (IdType.GROUP.equals(objectIdType) || IdType.ROLE.equals(objectIdType)) {
      Set<String> members=asSet(identity.getMemberList());
      if (!members.isEmpty()) {
        setMembers(repo,amIdentity,members,IdType.USER);
      }
    }
  }
 catch (  IdRepoException ex) {
    debug.error(""String_Node_Str"",ex);
    if (LDAPConstants.CONSTRAINT_VIOLATED_ERROR.equals(ex.getErrorCode())) {
      throw new InternalServerErrorException(ex.getConstraintViolationDetails());
    }
 else     if (LDAPConstants.LDAP_INVALID_SYNTAX.equals(ex.getLDAPErrorCode())) {
      throw new BadRequestException(""String_Node_Str"");
    }
 else     if (LDAPConstants.ILLEGAL_ARGS_ERROR.equals(ex.getErrorCode())) {
      throw new BadRequestException(ex);
    }
    throw convertToResourceException(idServicesErrorHandler.handleError(ex));
  }
catch (  SSOException ex) {
    debug.error(""String_Node_Str"",ex);
    throw new BadRequestException(ex.getMessage());
  }
catch (  ObjectNotFound e) {
    debug.error(""String_Node_Str"",e);
    throw new NotFoundException(e.getMessage());
  }
}"
79646,"public int process(Callback[] callbacks,int state) throws LoginException {
  OAuthUtil.debugMessage(""String_Node_Str"" + state);
  HttpServletRequest request=getHttpServletRequest();
  HttpServletResponse response=getHttpServletResponse();
  if (request == null) {
    OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
    return ISAuthConstants.LOGIN_IGNORE;
  }
  String code=request.getParameter(PARAM_CODE);
  if (code != null) {
    OAuthUtil.debugMessage(""String_Node_Str"" + code);
    state=GET_OAUTH_TOKEN_STATE;
  }
  proxyURL=config.getProxyURL();
switch (state) {
case ISAuthConstants.LOGIN_START:
{
      config.validateConfiguration();
      serverName=request.getServerName();
      StringBuilder originalUrl=new StringBuilder();
      String requestedQuery=request.getQueryString();
      String realm=null;
      String authCookieName=AuthUtils.getAuthCookieName();
      final XUIState xuiState=InjectorHolder.getInstance(XUIState.class);
      if (xuiState.isXUIEnabled()) {
        originalUrl.append(request.getContextPath());
        if (requestedQuery != null && !requestedQuery.contains(""String_Node_Str"")) {
          realm=request.getParameter(""String_Node_Str"");
        }
      }
 else {
        originalUrl.append(request.getRequestURI());
      }
      if (StringUtils.isNotEmpty(realm)) {
        originalUrl.append(""String_Node_Str"").append(URLEncDec.encode(realm));
      }
      if (requestedQuery != null) {
        if (requestedQuery.endsWith(authCookieName + ""String_Node_Str"")) {
          requestedQuery=requestedQuery.substring(0,requestedQuery.length() - authCookieName.length() - 1);
        }
        originalUrl.append(originalUrl.indexOf(""String_Node_Str"") == -1 ? '?' : '&');
        originalUrl.append(requestedQuery);
      }
      Set<String> domains=AuthClientUtils.getCookieDomains();
      String ProviderLogoutURL=config.getLogoutServiceUrl();
      String csrfStateTokenId=RandomStringUtils.randomAlphanumeric(32);
      String csrfState=createAuthorizationState();
      Token csrfStateToken=new Token(csrfStateTokenId,TokenType.GENERIC);
      csrfStateToken.setAttribute(CoreTokenField.STRING_ONE,csrfState);
      csrfStateToken.setAttribute(CoreTokenField.STRING_TWO,getCodeVerifier(config.getCodeChallengeMethod()));
      try {
        ctsStore.create(csrfStateToken);
      }
 catch (      CoreTokenException e) {
        OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
        throw new AuthLoginException(""String_Node_Str"" + ""String_Node_Str"",e);
      }
      for (      String domain : domains) {
        CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(COOKIE_PROXY_URL,proxyURL,""String_Node_Str"",domain));
        CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(COOKIE_ORIG_URL,originalUrl.toString(),""String_Node_Str"",domain));
        CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(NONCE_TOKEN_ID,csrfStateTokenId,""String_Node_Str"",domain));
        if (ProviderLogoutURL != null && !ProviderLogoutURL.isEmpty()) {
          CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(COOKIE_LOGOUT_URL,ProviderLogoutURL,""String_Node_Str"",domain));
        }
      }
      setUserSessionProperty(ISAuthConstants.FULL_LOGIN_URL,originalUrl.toString());
      setUserSessionProperty(SESSION_LOGOUT_BEHAVIOUR,config.getLogoutBhaviour());
      String authServiceUrl=config.getAuthServiceUrl(proxyURL,csrfState,getCodeVerifier(config.getCodeChallengeMethod()),config.getCodeChallengeMethod());
      OAuthUtil.debugMessage(""String_Node_Str"" + authServiceUrl);
      Callback[] callbacks1=getCallback(2);
      RedirectCallback rc=(RedirectCallback)callbacks1[0];
      RedirectCallback rcNew=new RedirectCallback(authServiceUrl,null,""String_Node_Str"",rc.getStatusParameter(),rc.getRedirectBackUrlCookieName());
      replaceCallback(2,0,rcNew);
      return GET_OAUTH_TOKEN_STATE;
    }
case GET_OAUTH_TOKEN_STATE:
{
    final String csrfState;
    if (request.getParameter(""String_Node_Str"") != null) {
      final JsonValue jval=JsonValueBuilder.toJsonValue(request.getParameter(""String_Node_Str""));
      csrfState=jval.get(""String_Node_Str"").asString();
      code=jval.get(PARAM_CODE).asString();
    }
 else {
      csrfState=request.getParameter(""String_Node_Str"");
      code=request.getParameter(PARAM_CODE);
    }
    if (csrfState == null) {
      OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
    }
    try {
      Token csrfStateToken=ctsStore.read(OAuthUtil.findCookie(request,NONCE_TOKEN_ID));
      ctsStore.deleteAsync(csrfStateToken);
      String expectedCsrfState=csrfStateToken.getValue(CoreTokenField.STRING_ONE);
      if (!expectedCsrfState.equals(csrfState)) {
        OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
        throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
      }
      if (code == null || code.isEmpty()) {
        OAuthUtil.debugMessage(""String_Node_Str"");
        return ISAuthConstants.LOGIN_START;
      }
      validateInput(""String_Node_Str"",code,""String_Node_Str"",512,false);
      OAuthUtil.debugMessage(""String_Node_Str"" + code);
      final String codeVerifier=csrfStateToken.getValue(CoreTokenField.STRING_TWO);
      String tokenSvcResponse=getContent(config.getTokenServiceUrl(code,proxyURL,codeVerifier),null);
      OAuthUtil.debugMessage(""String_Node_Str"" + tokenSvcResponse);
      JwtClaimsSet jwtClaims=null;
      String idToken=null;
      if (config.isOpenIDConnect()) {
        idToken=extractToken(ID_TOKEN,tokenSvcResponse);
        JwtHandler jwtHandler=new JwtHandler(jwtHandlerConfig);
        try {
          jwtClaims=jwtHandler.validateJwt(idToken);
        }
 catch (        RuntimeException|AuthLoginException e) {
          debug.warning(""String_Node_Str"",e);
          throw e;
        }
        if (!JwtHandler.isIntendedForAudience(config.getClientId(),jwtClaims)) {
          OAuthUtil.debugError(""String_Node_Str"");
          throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
        }
      }
      String token=extractToken(PARAM_ACCESS_TOKEN,tokenSvcResponse);
      setUserSessionProperty(SESSION_OAUTH_TOKEN,token);
      String profileSvcResponse=null;
      if (StringUtils.isNotEmpty(config.getProfileServiceUrl())) {
        profileSvcResponse=getContent(config.getProfileServiceUrl(),""String_Node_Str"" + token);
        OAuthUtil.debugMessage(""String_Node_Str"" + profileSvcResponse);
      }
      String realm=getRequestOrg();
      if (realm == null) {
        realm=""String_Node_Str"";
      }
      AccountProvider accountProvider=instantiateAccountProvider();
      AttributeMapper accountAttributeMapper=instantiateAccountMapper();
      Map<String,Set<String>> userNames=getAttributes(profileSvcResponse,config.getAccountMapperConfig(),accountAttributeMapper,jwtClaims);
      String user=null;
      if (!userNames.isEmpty()) {
        user=getUser(realm,accountProvider,userNames);
      }
      if (user == null && !config.getCreateAccountFlag()) {
        authenticatedUser=getDynamicUser(userNames);
        if (authenticatedUser != null) {
          if (config.getSaveAttributesToSessionFlag()) {
            Map<String,Set<String>> attributes=getAttributesMap(profileSvcResponse,jwtClaims);
            saveAttributes(attributes);
          }
          OAuthUtil.debugMessage(""String_Node_Str"" + ""String_Node_Str"" + authenticatedUser);
          storeUsernamePasswd(authenticatedUser,null);
          return ISAuthConstants.LOGIN_SUCCEED;
        }
 else {
          throw new AuthLoginException(""String_Node_Str"");
        }
      }
      if (user == null && config.getCreateAccountFlag()) {
        if (config.getPromptPasswordFlag()) {
          setUserSessionProperty(PROFILE_SERVICE_RESPONSE,profileSvcResponse);
          if (config.isOpenIDConnect()) {
            setUserSessionProperty(OPENID_TOKEN,idToken);
          }
          return SET_PASSWORD_STATE;
        }
 else {
          authenticatedUser=provisionAccountNow(accountProvider,realm,profileSvcResponse,getRandomData(),jwtClaims);
          if (authenticatedUser != null) {
            OAuthUtil.debugMessage(""String_Node_Str"" + authenticatedUser);
            storeUsernamePasswd(authenticatedUser,null);
            return ISAuthConstants.LOGIN_SUCCEED;
          }
 else {
            return ISAuthConstants.LOGIN_IGNORE;
          }
        }
      }
      if (user != null) {
        authenticatedUser=user;
        OAuthUtil.debugMessage(""String_Node_Str"" + ""String_Node_Str"" + authenticatedUser);
        if (config.getSaveAttributesToSessionFlag()) {
          Map<String,Set<String>> attributes=getAttributesMap(profileSvcResponse,jwtClaims);
          saveAttributes(attributes);
        }
        storeUsernamePasswd(authenticatedUser,null);
        return ISAuthConstants.LOGIN_SUCCEED;
      }
    }
 catch (    JSONException je) {
      OAuthUtil.debugError(""String_Node_Str"" + je.getMessage());
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,je);
    }
catch (    SSOException ssoe) {
      OAuthUtil.debugError(""String_Node_Str"" + ssoe.getMessage());
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,ssoe);
    }
catch (    IdRepoException ire) {
      OAuthUtil.debugError(""String_Node_Str"" + ire.getMessage());
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,ire);
    }
catch (    CoreTokenException e) {
      OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,e);
    }
    break;
  }
case SET_PASSWORD_STATE:
{
  if (!config.getCreateAccountFlag()) {
    return ISAuthConstants.LOGIN_IGNORE;
  }
  userPassword=request.getParameter(PARAM_TOKEN1);
  validateInput(PARAM_TOKEN1,userPassword,""String_Node_Str"",512,false);
  String userPassword2=request.getParameter(PARAM_TOKEN2);
  validateInput(PARAM_TOKEN2,userPassword2,""String_Node_Str"",512,false);
  if (!userPassword.equals(userPassword2)) {
    OAuthUtil.debugWarning(""String_Node_Str"");
    return SET_PASSWORD_STATE;
  }
  String terms=request.getParameter(""String_Node_Str"");
  if (!terms.equalsIgnoreCase(""String_Node_Str"")) {
    return SET_PASSWORD_STATE;
  }
  String profileSvcResponse=getUserSessionProperty(""String_Node_Str"");
  data=getRandomData();
  String mail=getMail(profileSvcResponse,config.getMailAttribute());
  OAuthUtil.debugMessage(""String_Node_Str"" + mail);
  try {
    OAuthUtil.sendEmail(config.getEmailFrom(),mail,data,config.getSMTPConfig(),bundle,proxyURL);
  }
 catch (  NoEmailSentException ex) {
    OAuthUtil.debugError(""String_Node_Str"",ex);
    throw new AuthLoginException(""String_Node_Str"" + ""String_Node_Str"");
  }
  OAuthUtil.debugMessage(""String_Node_Str"" + data);
  return CREATE_USER_STATE;
}
case CREATE_USER_STATE:
{
String activation=request.getParameter(PARAM_ACTIVATION);
validateInput(PARAM_ACTIVATION,activation,""String_Node_Str"",512,false);
OAuthUtil.debugMessage(""String_Node_Str"" + activation);
if (activation == null || activation.isEmpty() || !activation.trim().equals(data.trim())) {
  return CREATE_USER_STATE;
}
String profileSvcResponse=getUserSessionProperty(PROFILE_SERVICE_RESPONSE);
String idToken=getUserSessionProperty(ID_TOKEN);
String realm=getRequestOrg();
if (realm == null) {
  realm=""String_Node_Str"";
}
OAuthUtil.debugMessage(""String_Node_Str"" + profileSvcResponse);
AccountProvider accountProvider=instantiateAccountProvider();
JwtClaimsSet jwtClaims=null;
if (idToken != null) {
  jwtClaims=new JwtHandler(jwtHandlerConfig).getJwtClaims(idToken);
}
authenticatedUser=provisionAccountNow(accountProvider,realm,profileSvcResponse,userPassword,jwtClaims);
if (authenticatedUser != null) {
  OAuthUtil.debugMessage(""String_Node_Str"" + authenticatedUser);
  storeUsernamePasswd(authenticatedUser,null);
  return ISAuthConstants.LOGIN_SUCCEED;
}
 else {
  return ISAuthConstants.LOGIN_IGNORE;
}
}
default :
{
OAuthUtil.debugError(""String_Node_Str"");
return ISAuthConstants.LOGIN_IGNORE;
}
}
throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
}","public int process(Callback[] callbacks,int state) throws LoginException {
  OAuthUtil.debugMessage(""String_Node_Str"" + state);
  HttpServletRequest request=getHttpServletRequest();
  HttpServletResponse response=getHttpServletResponse();
  if (request == null) {
    OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
    return ISAuthConstants.LOGIN_IGNORE;
  }
  String code=request.getParameter(PARAM_CODE);
  if (code != null) {
    OAuthUtil.debugMessage(""String_Node_Str"" + code);
    state=GET_OAUTH_TOKEN_STATE;
  }
  proxyURL=config.getProxyURL();
switch (state) {
case ISAuthConstants.LOGIN_START:
{
      config.validateConfiguration();
      serverName=request.getServerName();
      StringBuilder originalUrl=new StringBuilder();
      String requestedQuery=request.getQueryString();
      String realm=null;
      String authCookieName=AuthUtils.getAuthCookieName();
      final XUIState xuiState=InjectorHolder.getInstance(XUIState.class);
      if (xuiState.isXUIEnabled()) {
        originalUrl.append(request.getContextPath());
        if (requestedQuery != null && !requestedQuery.contains(""String_Node_Str"")) {
          realm=request.getParameter(""String_Node_Str"");
        }
      }
 else {
        originalUrl.append(request.getRequestURI());
      }
      if (StringUtils.isNotEmpty(realm)) {
        originalUrl.append(""String_Node_Str"").append(URLEncDec.encode(realm));
      }
      if (requestedQuery != null) {
        if (requestedQuery.endsWith(authCookieName + ""String_Node_Str"")) {
          requestedQuery=requestedQuery.substring(0,requestedQuery.length() - authCookieName.length() - 1);
        }
        originalUrl.append(originalUrl.indexOf(""String_Node_Str"") == -1 ? '?' : '&');
        originalUrl.append(requestedQuery);
      }
      Set<String> domains=AuthClientUtils.getCookieDomains();
      String ProviderLogoutURL=config.getLogoutServiceUrl();
      String csrfStateTokenId=RandomStringUtils.randomAlphanumeric(32);
      String csrfState=createAuthorizationState();
      Token csrfStateToken=new Token(csrfStateTokenId,TokenType.GENERIC);
      csrfStateToken.setAttribute(CoreTokenField.STRING_ONE,csrfState);
      csrfStateToken.setAttribute(CoreTokenField.STRING_TWO,getCodeVerifier(config.getCodeChallengeMethod()));
      try {
        ctsStore.create(csrfStateToken);
      }
 catch (      CoreTokenException e) {
        OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
        throw new AuthLoginException(""String_Node_Str"" + ""String_Node_Str"",e);
      }
      for (      String domain : domains) {
        CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(COOKIE_PROXY_URL,proxyURL,""String_Node_Str"",domain));
        CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(COOKIE_ORIG_URL,originalUrl.toString(),""String_Node_Str"",domain));
        CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(NONCE_TOKEN_ID,csrfStateTokenId,""String_Node_Str"",domain));
        if (ProviderLogoutURL != null && !ProviderLogoutURL.isEmpty()) {
          CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(COOKIE_LOGOUT_URL,ProviderLogoutURL,""String_Node_Str"",domain));
        }
      }
      setUserSessionProperty(ISAuthConstants.FULL_LOGIN_URL,originalUrl.toString());
      setUserSessionProperty(SESSION_LOGOUT_BEHAVIOUR,config.getLogoutBhaviour());
      String authServiceUrl=config.getAuthServiceUrl(proxyURL,csrfState,getCodeVerifier(config.getCodeChallengeMethod()),config.getCodeChallengeMethod());
      OAuthUtil.debugMessage(""String_Node_Str"" + authServiceUrl);
      Callback[] callbacks1=getCallback(2);
      RedirectCallback rc=(RedirectCallback)callbacks1[0];
      RedirectCallback rcNew=new RedirectCallback(authServiceUrl,null,""String_Node_Str"",rc.getStatusParameter(),rc.getRedirectBackUrlCookieName());
      rcNew.setTrackingCookie(true);
      replaceCallback(2,0,rcNew);
      return GET_OAUTH_TOKEN_STATE;
    }
case GET_OAUTH_TOKEN_STATE:
{
    final String csrfState;
    if (request.getParameter(""String_Node_Str"") != null) {
      final JsonValue jval=JsonValueBuilder.toJsonValue(request.getParameter(""String_Node_Str""));
      csrfState=jval.get(""String_Node_Str"").asString();
      code=jval.get(PARAM_CODE).asString();
    }
 else {
      csrfState=request.getParameter(""String_Node_Str"");
      code=request.getParameter(PARAM_CODE);
    }
    if (csrfState == null) {
      OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
    }
    try {
      Token csrfStateToken=ctsStore.read(OAuthUtil.findCookie(request,NONCE_TOKEN_ID));
      ctsStore.deleteAsync(csrfStateToken);
      String expectedCsrfState=csrfStateToken.getValue(CoreTokenField.STRING_ONE);
      if (!expectedCsrfState.equals(csrfState)) {
        OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
        throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
      }
      if (code == null || code.isEmpty()) {
        OAuthUtil.debugMessage(""String_Node_Str"");
        return ISAuthConstants.LOGIN_START;
      }
      validateInput(""String_Node_Str"",code,""String_Node_Str"",512,false);
      OAuthUtil.debugMessage(""String_Node_Str"" + code);
      final String codeVerifier=csrfStateToken.getValue(CoreTokenField.STRING_TWO);
      String tokenSvcResponse=getContent(config.getTokenServiceUrl(code,proxyURL,codeVerifier),null);
      OAuthUtil.debugMessage(""String_Node_Str"" + tokenSvcResponse);
      JwtClaimsSet jwtClaims=null;
      String idToken=null;
      if (config.isOpenIDConnect()) {
        idToken=extractToken(ID_TOKEN,tokenSvcResponse);
        JwtHandler jwtHandler=new JwtHandler(jwtHandlerConfig);
        try {
          jwtClaims=jwtHandler.validateJwt(idToken);
        }
 catch (        RuntimeException|AuthLoginException e) {
          debug.warning(""String_Node_Str"",e);
          throw e;
        }
        if (!JwtHandler.isIntendedForAudience(config.getClientId(),jwtClaims)) {
          OAuthUtil.debugError(""String_Node_Str"");
          throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
        }
      }
      String token=extractToken(PARAM_ACCESS_TOKEN,tokenSvcResponse);
      setUserSessionProperty(SESSION_OAUTH_TOKEN,token);
      String profileSvcResponse=null;
      if (StringUtils.isNotEmpty(config.getProfileServiceUrl())) {
        profileSvcResponse=getContent(config.getProfileServiceUrl(),""String_Node_Str"" + token);
        OAuthUtil.debugMessage(""String_Node_Str"" + profileSvcResponse);
      }
      String realm=getRequestOrg();
      if (realm == null) {
        realm=""String_Node_Str"";
      }
      AccountProvider accountProvider=instantiateAccountProvider();
      AttributeMapper accountAttributeMapper=instantiateAccountMapper();
      Map<String,Set<String>> userNames=getAttributes(profileSvcResponse,config.getAccountMapperConfig(),accountAttributeMapper,jwtClaims);
      String user=null;
      if (!userNames.isEmpty()) {
        user=getUser(realm,accountProvider,userNames);
      }
      if (user == null && !config.getCreateAccountFlag()) {
        authenticatedUser=getDynamicUser(userNames);
        if (authenticatedUser != null) {
          if (config.getSaveAttributesToSessionFlag()) {
            Map<String,Set<String>> attributes=getAttributesMap(profileSvcResponse,jwtClaims);
            saveAttributes(attributes);
          }
          OAuthUtil.debugMessage(""String_Node_Str"" + ""String_Node_Str"" + authenticatedUser);
          storeUsernamePasswd(authenticatedUser,null);
          return ISAuthConstants.LOGIN_SUCCEED;
        }
 else {
          throw new AuthLoginException(""String_Node_Str"");
        }
      }
      if (user == null && config.getCreateAccountFlag()) {
        if (config.getPromptPasswordFlag()) {
          setUserSessionProperty(PROFILE_SERVICE_RESPONSE,profileSvcResponse);
          if (config.isOpenIDConnect()) {
            setUserSessionProperty(OPENID_TOKEN,idToken);
          }
          return SET_PASSWORD_STATE;
        }
 else {
          authenticatedUser=provisionAccountNow(accountProvider,realm,profileSvcResponse,getRandomData(),jwtClaims);
          if (authenticatedUser != null) {
            OAuthUtil.debugMessage(""String_Node_Str"" + authenticatedUser);
            storeUsernamePasswd(authenticatedUser,null);
            return ISAuthConstants.LOGIN_SUCCEED;
          }
 else {
            return ISAuthConstants.LOGIN_IGNORE;
          }
        }
      }
      if (user != null) {
        authenticatedUser=user;
        OAuthUtil.debugMessage(""String_Node_Str"" + ""String_Node_Str"" + authenticatedUser);
        if (config.getSaveAttributesToSessionFlag()) {
          Map<String,Set<String>> attributes=getAttributesMap(profileSvcResponse,jwtClaims);
          saveAttributes(attributes);
        }
        storeUsernamePasswd(authenticatedUser,null);
        return ISAuthConstants.LOGIN_SUCCEED;
      }
    }
 catch (    JSONException je) {
      OAuthUtil.debugError(""String_Node_Str"" + je.getMessage());
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,je);
    }
catch (    SSOException ssoe) {
      OAuthUtil.debugError(""String_Node_Str"" + ssoe.getMessage());
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,ssoe);
    }
catch (    IdRepoException ire) {
      OAuthUtil.debugError(""String_Node_Str"" + ire.getMessage());
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,ire);
    }
catch (    CoreTokenException e) {
      OAuthUtil.debugError(""String_Node_Str"" + ""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null,e);
    }
    break;
  }
case SET_PASSWORD_STATE:
{
  if (!config.getCreateAccountFlag()) {
    return ISAuthConstants.LOGIN_IGNORE;
  }
  userPassword=request.getParameter(PARAM_TOKEN1);
  validateInput(PARAM_TOKEN1,userPassword,""String_Node_Str"",512,false);
  String userPassword2=request.getParameter(PARAM_TOKEN2);
  validateInput(PARAM_TOKEN2,userPassword2,""String_Node_Str"",512,false);
  if (!userPassword.equals(userPassword2)) {
    OAuthUtil.debugWarning(""String_Node_Str"");
    return SET_PASSWORD_STATE;
  }
  String terms=request.getParameter(""String_Node_Str"");
  if (!terms.equalsIgnoreCase(""String_Node_Str"")) {
    return SET_PASSWORD_STATE;
  }
  String profileSvcResponse=getUserSessionProperty(""String_Node_Str"");
  data=getRandomData();
  String mail=getMail(profileSvcResponse,config.getMailAttribute());
  OAuthUtil.debugMessage(""String_Node_Str"" + mail);
  try {
    OAuthUtil.sendEmail(config.getEmailFrom(),mail,data,config.getSMTPConfig(),bundle,proxyURL);
  }
 catch (  NoEmailSentException ex) {
    OAuthUtil.debugError(""String_Node_Str"",ex);
    throw new AuthLoginException(""String_Node_Str"" + ""String_Node_Str"");
  }
  OAuthUtil.debugMessage(""String_Node_Str"" + data);
  return CREATE_USER_STATE;
}
case CREATE_USER_STATE:
{
String activation=request.getParameter(PARAM_ACTIVATION);
validateInput(PARAM_ACTIVATION,activation,""String_Node_Str"",512,false);
OAuthUtil.debugMessage(""String_Node_Str"" + activation);
if (activation == null || activation.isEmpty() || !activation.trim().equals(data.trim())) {
  return CREATE_USER_STATE;
}
String profileSvcResponse=getUserSessionProperty(PROFILE_SERVICE_RESPONSE);
String idToken=getUserSessionProperty(ID_TOKEN);
String realm=getRequestOrg();
if (realm == null) {
  realm=""String_Node_Str"";
}
OAuthUtil.debugMessage(""String_Node_Str"" + profileSvcResponse);
AccountProvider accountProvider=instantiateAccountProvider();
JwtClaimsSet jwtClaims=null;
if (idToken != null) {
  jwtClaims=new JwtHandler(jwtHandlerConfig).getJwtClaims(idToken);
}
authenticatedUser=provisionAccountNow(accountProvider,realm,profileSvcResponse,userPassword,jwtClaims);
if (authenticatedUser != null) {
  OAuthUtil.debugMessage(""String_Node_Str"" + authenticatedUser);
  storeUsernamePasswd(authenticatedUser,null);
  return ISAuthConstants.LOGIN_SUCCEED;
}
 else {
  return ISAuthConstants.LOGIN_IGNORE;
}
}
default :
{
OAuthUtil.debugError(""String_Node_Str"");
return ISAuthConstants.LOGIN_IGNORE;
}
}
throw new AuthLoginException(BUNDLE_NAME,""String_Node_Str"",null);
}"
79647,"/** 
 * Generates the redirect from SAML2 auth module to IDP as GET.
 */
private void configureGetRedirectCallback(final String redirectUrl,RedirectCallback redirectCallback) throws AuthLoginException {
  final RedirectCallback rcNew=new RedirectCallback(redirectUrl,null,""String_Node_Str"",redirectCallback.getStatusParameter(),redirectCallback.getRedirectBackUrlCookieName());
  Map<String,String> redirectData=rcNew.getRedirectData();
  if (null == redirectData) {
    redirectData=new HashMap<>();
  }
  rcNew.setRedirectData(redirectData);
  replaceCallback(REDIRECT,REDIRECT_CALLBACK,rcNew);
}","/** 
 * Generates the redirect from SAML2 auth module to IDP as GET.
 */
private void configureGetRedirectCallback(final String redirectUrl,RedirectCallback redirectCallback) throws AuthLoginException {
  final RedirectCallback rcNew=new RedirectCallback(redirectUrl,null,""String_Node_Str"",redirectCallback.getStatusParameter(),redirectCallback.getRedirectBackUrlCookieName());
  Map<String,String> redirectData=rcNew.getRedirectData();
  rcNew.setRedirectData(redirectData);
  rcNew.setTrackingCookie(true);
  replaceCallback(REDIRECT,REDIRECT_CALLBACK,rcNew);
}"
79648,"/** 
 * Generates the redirect from SAML2 auth module to IDP as POST.
 */
private void configurePostRedirectCallback(final String postMsg,final String ssoURL,final RedirectCallback redirectCallback) throws AuthLoginException {
  final Map<String,String> postData=new HashMap<>();
  postData.put(SAML2Constants.SAML_REQUEST,postMsg);
  final RedirectCallback rcNew=new RedirectCallback(ssoURL,postData,""String_Node_Str"",redirectCallback.getStatusParameter(),redirectCallback.getRedirectBackUrlCookieName());
  replaceCallback(REDIRECT,REDIRECT_CALLBACK,rcNew);
}","/** 
 * Generates the redirect from SAML2 auth module to IDP as POST.
 */
private void configurePostRedirectCallback(final String postMsg,final String ssoURL,final RedirectCallback redirectCallback) throws AuthLoginException {
  final Map<String,String> postData=new HashMap<>();
  postData.put(SAML2Constants.SAML_REQUEST,postMsg);
  final RedirectCallback rcNew=new RedirectCallback(ssoURL,postData,""String_Node_Str"",redirectCallback.getStatusParameter(),redirectCallback.getRedirectBackUrlCookieName());
  rcNew.setTrackingCookie(true);
  replaceCallback(REDIRECT,REDIRECT_CALLBACK,rcNew);
}"
79649,"/** 
 * Converts the   {@code RedirectCallback} into a JSON representation.{@inheritDoc}
 */
public JsonValue convertToJson(RedirectCallback callback,int index) throws RestAuthException {
  JsonValue callbacksJson=json(array(createOutputField(""String_Node_Str"",callback.getRedirectUrl()),createOutputField(""String_Node_Str"",callback.getMethod())));
  JsonValue jsonValue=json(object(field(""String_Node_Str"",CALLBACK_NAME),field(""String_Node_Str"",callbacksJson.getObject())));
  if (callback.getRedirectData() != null) {
    callbacksJson.add(createOutputField(""String_Node_Str"",callback.getRedirectData()));
  }
  return jsonValue;
}","/** 
 * Converts the   {@code RedirectCallback} into a JSON representation.{@inheritDoc}
 */
public JsonValue convertToJson(RedirectCallback callback,int index) throws RestAuthException {
  JsonValue callbacksJson=json(array(createOutputField(""String_Node_Str"",callback.getRedirectUrl()),createOutputField(""String_Node_Str"",callback.getMethod()),createOutputField(""String_Node_Str"",callback.getTrackingCookie())));
  JsonValue jsonValue=json(object(field(""String_Node_Str"",CALLBACK_NAME),field(""String_Node_Str"",callbacksJson.getObject())));
  if (callback.getRedirectData() != null) {
    callbacksJson.add(createOutputField(""String_Node_Str"",callback.getRedirectData()));
  }
  return jsonValue;
}"
79650,"@Test public void shouldSerialiseToJsonCorrectly() throws Exception {
  RedirectCallback redirectCallback=mock(RedirectCallback.class);
  final Map<String,String> redirectData=Collections.singletonMap(""String_Node_Str"",""String_Node_Str"");
  given(redirectCallback.getRedirectUrl()).willReturn(""String_Node_Str"");
  given(redirectCallback.getMethod()).willReturn(""String_Node_Str"");
  given(redirectCallback.getRedirectData()).willReturn(redirectData);
  String json=JsonValueBuilder.getObjectMapper().writeValueAsString(restAuthRedirectCallbackHandler.convertToJson(redirectCallback,1).getObject());
  JsonValue parsed=JsonValueBuilder.toJsonValue(json);
  assertThat(parsed).stringAt(""String_Node_Str"").isEqualTo(""String_Node_Str"");
  assertThat(parsed).hasArray(""String_Node_Str"").hasSize(3);
  assertThat(parsed).hasObject(""String_Node_Str"").containsExactly(entry(""String_Node_Str"",""String_Node_Str""),entry(""String_Node_Str"",""String_Node_Str""));
  assertThat(parsed).hasObject(""String_Node_Str"").containsExactly(entry(""String_Node_Str"",""String_Node_Str""),entry(""String_Node_Str"",""String_Node_Str""));
  assertThat(parsed).hasObject(""String_Node_Str"").containsExactly(entry(""String_Node_Str"",""String_Node_Str""),entry(""String_Node_Str"",redirectData));
}","@Test public void shouldSerialiseToJsonCorrectly() throws Exception {
  RedirectCallback redirectCallback=mock(RedirectCallback.class);
  final Map<String,String> redirectData=Collections.singletonMap(""String_Node_Str"",""String_Node_Str"");
  given(redirectCallback.getRedirectUrl()).willReturn(""String_Node_Str"");
  given(redirectCallback.getMethod()).willReturn(""String_Node_Str"");
  given(redirectCallback.getRedirectData()).willReturn(redirectData);
  String json=JsonValueBuilder.getObjectMapper().writeValueAsString(restAuthRedirectCallbackHandler.convertToJson(redirectCallback,1).getObject());
  JsonValue parsed=JsonValueBuilder.toJsonValue(json);
  assertThat(parsed).stringAt(""String_Node_Str"").isEqualTo(""String_Node_Str"");
  assertThat(parsed).hasArray(""String_Node_Str"").hasSize(4);
  assertThat(parsed).hasObject(""String_Node_Str"").containsExactly(entry(""String_Node_Str"",""String_Node_Str""),entry(""String_Node_Str"",""String_Node_Str""));
  assertThat(parsed).hasObject(""String_Node_Str"").containsExactly(entry(""String_Node_Str"",""String_Node_Str""),entry(""String_Node_Str"",""String_Node_Str""));
  assertThat(parsed).hasObject(""String_Node_Str"").containsExactly(entry(""String_Node_Str"",""String_Node_Str""),entry(""String_Node_Str"",false));
  assertThat(parsed).hasObject(""String_Node_Str"").containsExactly(entry(""String_Node_Str"",""String_Node_Str""),entry(""String_Node_Str"",redirectData));
}"
79651,"@Test public void shouldFailConvertToJson() throws RestAuthException {
  RedirectCallback redirectCallback=mock(RedirectCallback.class);
  given(redirectCallback.getRedirectUrl()).willReturn(""String_Node_Str"");
  given(redirectCallback.getMethod()).willReturn(""String_Node_Str"");
  given(redirectCallback.getRedirectData()).willReturn(Collections.<String,String>emptyMap());
  JsonValue json=restAuthRedirectCallbackHandler.convertToJson(redirectCallback,1);
  assertThat(json.asMap()).hasSize(2);
  assertThat(json.get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").asList()).hasSize(3);
  assertThat(json.get(""String_Node_Str"").get(0).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(0).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(1).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(1).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(2).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(2).get(""String_Node_Str"").asMap()).hasSize(0);
}","@Test public void shouldFailConvertToJson() throws RestAuthException {
  RedirectCallback redirectCallback=mock(RedirectCallback.class);
  given(redirectCallback.getRedirectUrl()).willReturn(""String_Node_Str"");
  given(redirectCallback.getMethod()).willReturn(""String_Node_Str"");
  given(redirectCallback.getRedirectData()).willReturn(Collections.<String,String>emptyMap());
  JsonValue json=restAuthRedirectCallbackHandler.convertToJson(redirectCallback,1);
  assertThat(json.asMap()).hasSize(2);
  assertThat(json.get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").asList()).hasSize(4);
  assertThat(json.get(""String_Node_Str"").get(0).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(0).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(1).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(1).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(2).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(2).get(""String_Node_Str"").asBoolean()).isEqualTo(false);
  assertThat(json.get(""String_Node_Str"").get(3).get(""String_Node_Str"").asString()).isEqualTo(""String_Node_Str"");
  assertThat(json.get(""String_Node_Str"").get(3).get(""String_Node_Str"").asMap()).hasSize(0);
}"
79652,"public void handleRedirectCallback(HttpServletRequest request,HttpServletResponse response,RedirectCallback redirectCallback,String loginURL) throws IOException {
  setRedirectCallbackCookie(request,response,redirectCallback,loginURL);
  String qString=AuthClientUtils.getQueryStrFromParameters(redirectCallback.getRedirectData());
  StringBuilder redirectUrl=new StringBuilder(redirectCallback.getRedirectUrl());
  if (qString != null && qString.length() != 0) {
    redirectUrl.append(qString);
  }
  String rUrl=redirectUrl.toString();
  if (rUrl.startsWith(""String_Node_Str"")) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"" + rUrl + ""String_Node_Str""+ AuthClientUtils.getServiceURI());
    }
    response.sendRedirect(AuthClientUtils.getServiceURI() + rUrl);
  }
 else {
    if (redirectCallback.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
      request.setAttribute(""String_Node_Str"",redirectCallback.getRedirectData());
      request.setAttribute(""String_Node_Str"",redirectCallback.getRedirectUrl());
      try {
        request.getRequestDispatcher(FORWARDING_PLACE).forward(request,response);
      }
 catch (      ServletException e) {
        if (debug.warningEnabled()) {
          debug.warning(""String_Node_Str"" + e.toString());
        }
        throw new RedirectException(""String_Node_Str"",e);
      }
    }
 else {
      response.sendRedirect(rUrl);
    }
  }
}","public void handleRedirectCallback(HttpServletRequest request,HttpServletResponse response,RedirectCallback redirectCallback,String loginURL) throws IOException {
  setRedirectCallbackCookie(request,response,redirectCallback,loginURL);
  String qString=AuthClientUtils.getQueryStrFromParameters(redirectCallback.getRedirectData());
  StringBuilder redirectUrl=new StringBuilder(redirectCallback.getRedirectUrl());
  if (qString != null && qString.length() != 0) {
    redirectUrl.append(qString);
  }
  String rUrl=redirectUrl.toString();
  if (rUrl.startsWith(""String_Node_Str"")) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"" + rUrl + ""String_Node_Str""+ AuthClientUtils.getServiceURI());
    }
    response.sendRedirect(AuthClientUtils.getServiceURI() + rUrl);
  }
 else {
    if (redirectCallback.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
      Map<String,String> dataMap=redirectCallback.getRedirectData();
      if (dataMap == null) {
        dataMap=new HashMap<>();
      }
      request.setAttribute(""String_Node_Str"",dataMap);
      request.setAttribute(""String_Node_Str"",redirectCallback.getRedirectUrl());
      try {
        request.getRequestDispatcher(FORWARDING_PLACE).forward(request,response);
      }
 catch (      ServletException e) {
        if (debug.warningEnabled()) {
          debug.warning(""String_Node_Str"" + e.toString());
        }
        throw new RedirectException(""String_Node_Str"",e);
      }
    }
 else {
      response.sendRedirect(rUrl);
    }
  }
}"
79653,"private Privilege parsePrivilege(String providedName,JsonValue jsonValue) throws EntitlementException {
  try {
    JsonPolicy policy=MAPPER.readValue(jsonValue.toString(),JsonPolicy.class);
    Privilege privilege=policy.asPrivilege();
    if (isBlank(privilege.getName())) {
      privilege.setName(providedName);
    }
    if (isBlank(privilege.getName())) {
      throw new EntitlementException(EntitlementException.MISSING_PRIVILEGE_NAME);
    }
    if (privilege.getCondition() != null) {
      privilege.getCondition().validate();
    }
    return privilege;
  }
 catch (  UnrecognizedPropertyException ex) {
    throw new EntitlementException(EntitlementException.INVALID_VALUE,new Object[]{ex.getUnrecognizedPropertyName()});
  }
catch (  JsonMappingException ex) {
    throw new EntitlementException(EntitlementException.INVALID_JSON,ex,ex.getCause().getMessage());
  }
catch (  IOException e) {
    throw new EntitlementException(EntitlementException.UNABLE_TO_CREATE_POLICY,e);
  }
}","private Privilege parsePrivilege(String providedName,JsonValue jsonValue) throws EntitlementException {
  try {
    JsonPolicy policy=MAPPER.readValue(jsonValue.toString(),JsonPolicy.class);
    Privilege privilege=policy.asPrivilege();
    if (isBlank(privilege.getName())) {
      privilege.setName(providedName);
    }
    if (isBlank(privilege.getName())) {
      throw new EntitlementException(EntitlementException.MISSING_PRIVILEGE_NAME);
    }
    if (privilege.getCondition() != null) {
      privilege.getCondition().validate();
    }
    return privilege;
  }
 catch (  UnrecognizedPropertyException ex) {
    throw new EntitlementException(EntitlementException.INVALID_VALUE,new Object[]{ex.getUnrecognizedPropertyName()});
  }
catch (  JsonMappingException ex) {
    throw new EntitlementException(EntitlementException.INVALID_JSON,ex,ex.getMessage());
  }
catch (  IOException e) {
    throw new EntitlementException(EntitlementException.UNABLE_TO_CREATE_POLICY,e);
  }
}"
79654,"@Override public void init(javax.security.auth.Subject subject,Map sharedState,Map options){
  for (  Object key : options.keySet()) {
    String keyStr=(String)key;
    if (OPTIONS_MAP.containsKey(keyStr) && CollectionHelper.getMapAttr(options,keyStr) != null) {
      if (((String)key).equalsIgnoreCase(BINDING)) {
        String bindingTmp=CollectionHelper.getMapAttr(options,keyStr);
        params.put(OPTIONS_MAP.get(keyStr),Collections.singletonList(bindingTmp.substring(bindingTmp.lastIndexOf(""String_Node_Str"") + 1)));
      }
 else {
        params.put(OPTIONS_MAP.get(keyStr),Collections.singletonList(CollectionHelper.getMapAttr(options,keyStr)));
      }
    }
  }
  nameIDFormat=CollectionHelper.getMapAttr(options,NAME_ID_FORMAT);
  entityName=CollectionHelper.getMapAttr(options,ENTITY_NAME);
  metaAlias=CollectionHelper.getMapAttr(options,META_ALIAS);
  reqBinding=CollectionHelper.getMapAttr(options,REQ_BINDING);
  localChain=CollectionHelper.getMapAttr(options,LOCAL_CHAIN);
  singleLogoutEnabled=CollectionHelper.getBooleanMapAttr(options,SLO_ENABLED,false);
  sloRelayState=CollectionHelper.getMapAttr(options,SLO_RELAY_STATE);
  metaManager=SAML2Utils.getSAML2MetaManager();
  realm=DNMapper.orgNameToRealmName(getRequestOrg());
  bundle=amCache.getResBundle(BUNDLE_NAME,getLoginLocale());
  String authLevel=CollectionHelper.getMapAttr(options,AUTHLEVEL);
  if (authLevel != null) {
    try {
      setAuthLevel(Integer.parseInt(authLevel));
    }
 catch (    Exception e) {
      DEBUG.error(""String_Node_Str"",authLevel,e);
    }
  }
}","@Override public void init(javax.security.auth.Subject subject,Map sharedState,Map options){
  for (  Object key : options.keySet()) {
    String keyStr=(String)key;
    if (OPTIONS_MAP.containsKey(keyStr) && CollectionHelper.getMapAttr(options,keyStr) != null) {
      if (((String)key).equalsIgnoreCase(BINDING)) {
        String bindingTmp=CollectionHelper.getMapAttr(options,keyStr);
        params.put(OPTIONS_MAP.get(keyStr),Collections.singletonList(bindingTmp.substring(bindingTmp.lastIndexOf(""String_Node_Str"") + 1)));
      }
 else {
        params.put(OPTIONS_MAP.get(keyStr),Collections.singletonList(CollectionHelper.getMapAttr(options,keyStr)));
      }
    }
  }
  nameIDFormat=CollectionHelper.getMapAttr(options,NAME_ID_FORMAT);
  entityName=CollectionHelper.getMapAttr(options,ENTITY_NAME);
  metaAlias=CollectionHelper.getMapAttr(options,META_ALIAS);
  reqBinding=CollectionHelper.getMapAttr(options,REQ_BINDING);
  binding=CollectionHelper.getMapAttr(options,BINDING);
  localChain=CollectionHelper.getMapAttr(options,LOCAL_CHAIN);
  singleLogoutEnabled=CollectionHelper.getBooleanMapAttr(options,SLO_ENABLED,false);
  sloRelayState=CollectionHelper.getMapAttr(options,SLO_RELAY_STATE);
  metaManager=SAML2Utils.getSAML2MetaManager();
  realm=DNMapper.orgNameToRealmName(getRequestOrg());
  bundle=amCache.getResBundle(BUNDLE_NAME,getLoginLocale());
  String authLevel=CollectionHelper.getMapAttr(options,AUTHLEVEL);
  if (authLevel != null) {
    try {
      setAuthLevel(Integer.parseInt(authLevel));
    }
 catch (    Exception e) {
      DEBUG.error(""String_Node_Str"",authLevel,e);
    }
  }
}"
79655,"/** 
 * ""Inspired"" by the OAuth2 module. We use this cookie to remind us exactly where we are when returning from a remote server as we currently cannot trust the RedirectCallback's authentication framework equiv.
 */
private void setCookiesForRedirects(final HttpServletRequest request,final HttpServletResponse response){
  final Set<String> domains=AuthClientUtils.getCookieDomains();
  final StringBuilder originalUrl=new StringBuilder();
  final XUIState xuiState=InjectorHolder.getInstance(XUIState.class);
  final String requestedQuery=request.getQueryString();
  if (xuiState.isXUIEnabled()) {
    originalUrl.append(request.getContextPath());
  }
 else {
    originalUrl.append(request.getRequestURI());
  }
  if (StringUtils.isNotEmpty(realm)) {
    originalUrl.append(""String_Node_Str"").append(URLEncDec.encode(realm));
  }
  if (requestedQuery != null) {
    originalUrl.append(originalUrl.indexOf(""String_Node_Str"") == -1 ? '?' : '&');
    originalUrl.append(requestedQuery);
  }
  for (  String domain : domains) {
    CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(Constants.AM_LOCATION_COOKIE,originalUrl.toString(),""String_Node_Str"",domain));
  }
}","/** 
 * ""Inspired"" by the OAuth2 module. We use this cookie to remind us exactly where we are when returning from a remote server as we currently cannot trust the RedirectCallback's authentication framework equiv.
 */
private void setCookiesForRedirects(final HttpServletRequest request,final HttpServletResponse response){
  final Set<String> domains=AuthClientUtils.getCookieDomains();
  final StringBuilder originalUrl=new StringBuilder();
  final String requestedQuery=request.getQueryString();
  final XUIState xuiState=InjectorHolder.getInstance(XUIState.class);
  if (xuiState.isXUIEnabled()) {
    originalUrl.append(request.getContextPath());
  }
 else {
    originalUrl.append(request.getRequestURI());
  }
  if (StringUtils.isNotEmpty(realm)) {
    originalUrl.append(""String_Node_Str"").append(URLEncDec.encode(realm));
  }
  if (requestedQuery != null) {
    originalUrl.append(originalUrl.indexOf(""String_Node_Str"") == -1 ? '?' : '&');
    originalUrl.append(requestedQuery);
  }
  for (  String domain : domains) {
    CookieUtils.addCookieToResponse(response,CookieUtils.newCookie(Constants.AM_LOCATION_COOKIE,originalUrl.toString(),""String_Node_Str"",domain));
  }
}"
79656,"/** 
 * Adds information necessary for the session to be federated completely (if attributes are being drawn in, and to configure ready for SLO).
 */
private void setSessionProperties(Assertion assertion,NameID nameId,String userName) throws AuthLoginException, SAML2Exception {
  setUserSessionProperty(SAML2Constants.SINGLE_LOGOUT,String.valueOf(singleLogoutEnabled));
  if (singleLogoutEnabled) {
    setUserSessionProperty(SAML2Constants.RELAY_STATE,sloRelayState);
  }
  setUserSessionProperty(SAML2Constants.SESSION_INDEX,sessionIndex);
  setUserSessionProperty(SAML2Constants.IDPENTITYID,entityName);
  setUserSessionProperty(SAML2Constants.SPENTITYID,SPSSOFederate.getSPEntityId(metaAlias));
  setUserSessionProperty(SAML2Constants.METAALIAS,metaAlias);
  setUserSessionProperty(SAML2Constants.REQ_BINDING,reqBinding);
  setUserSessionProperty(SAML2Constants.NAMEID,nameId.toXMLString(true,true));
  setUserSessionProperty(Constants.IS_TRANSIENT,Boolean.toString(isTransient));
  setUserSessionProperty(Constants.REQUEST_ID,respInfo.getResponse().getInResponseTo());
  setAttributeProperties(assertion,userName);
}","/** 
 * Adds information necessary for the session to be federated completely (if attributes are being drawn in, and to configure ready for SLO).
 */
private void setSessionProperties(Assertion assertion,NameID nameId,String userName) throws AuthLoginException, SAML2Exception {
  setUserSessionProperty(SAML2Constants.SINGLE_LOGOUT,String.valueOf(singleLogoutEnabled));
  if (singleLogoutEnabled) {
    setUserSessionProperty(SAML2Constants.RELAY_STATE,sloRelayState);
  }
  setUserSessionProperty(SAML2Constants.SESSION_INDEX,sessionIndex);
  setUserSessionProperty(SAML2Constants.IDPENTITYID,entityName);
  setUserSessionProperty(SAML2Constants.SPENTITYID,SPSSOFederate.getSPEntityId(metaAlias));
  setUserSessionProperty(SAML2Constants.METAALIAS,metaAlias);
  setUserSessionProperty(SAML2Constants.REQ_BINDING,reqBinding);
  setUserSessionProperty(SAML2Constants.NAMEID,nameId.toXMLString(true,true));
  setUserSessionProperty(Constants.IS_TRANSIENT,Boolean.toString(isTransient));
  setUserSessionProperty(Constants.REQUEST_ID,respInfo.getResponse().getInResponseTo());
  setUserSessionProperty(SAML2Constants.BINDING,binding);
  setUserSessionProperty(Constants.CACHE_KEY,storageKey);
}"
79657,"/** 
 * Once we're back from the ACS, we need to validate that we have not errored during the proxying process. Then we detect if we need to perform a local linking authentication chain, or if the user is already locally linked, we need to look up the already-linked username.
 */
private int handleReturnFromRedirect(final int state,final HttpServletRequest request,final String spName,final HttpServletResponse response) throws AuthLoginException {
  removeCookiesForRedirects(response);
  if (Boolean.parseBoolean(request.getParameter(SAML2Proxy.ERROR_PARAM_KEY))) {
    return handleRedirectError(request);
  }
  final String key;
  if (request.getParameter(""String_Node_Str"") != null) {
    key=JsonValueBuilder.toJsonValue(request.getParameter(""String_Node_Str"")).get(""String_Node_Str"").asString();
  }
 else {
    key=request.getParameter(SAML2Proxy.RESPONSE_KEY);
  }
  final String username;
  final SAML2ResponseData data;
  if (SAML2FailoverUtils.isSAML2FailoverEnabled() && !StringUtils.isBlank(key)) {
    try {
      data=(SAML2ResponseData)SAML2FailoverUtils.retrieveSAML2Token(key);
    }
 catch (    SAML2TokenRepositoryException e) {
      return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"",e);
    }
  }
 else   if (!StringUtils.isBlank(key)) {
    data=(SAML2ResponseData)SAML2Store.getTokenFromStore(key);
  }
 else {
    return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"" + ""String_Node_Str"");
  }
  assertionSubject=data.getSubject();
  authnAssertion=data.getAssertion();
  sessionIndex=data.getSessionIndex();
  respInfo=data.getResponseInfo();
  try {
    username=SPACSUtils.getPrincipalWithoutLogin(assertionSubject,authnAssertion,realm,spName,metaManager,entityName);
    if (username != null) {
      principal=new SAML2Principal(username);
      return success(authnAssertion,getNameId(),username);
    }
  }
 catch (  SAML2Exception e) {
    return processError(e,null,""String_Node_Str"");
  }
  if (StringUtils.isBlank(localChain)) {
    return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"" + ""String_Node_Str"");
  }
  authenticationContext=new AuthContext(realm);
  authenticationContext.login(AuthContext.IndexType.SERVICE,localChain,null,null,null,null);
  return injectCallbacks(null,state);
}","/** 
 * Once we're back from the ACS, we need to validate that we have not errored during the proxying process. Then we detect if we need to perform a local linking authentication chain, or if the user is already locally linked, we need to look up the already-linked username.
 */
private int handleReturnFromRedirect(final int state,final HttpServletRequest request,final String spName,final HttpServletResponse response) throws AuthLoginException {
  removeCookiesForRedirects(response);
  if (Boolean.parseBoolean(request.getParameter(SAML2Proxy.ERROR_PARAM_KEY))) {
    return handleRedirectError(request);
  }
  final String key;
  if (request.getParameter(""String_Node_Str"") != null) {
    key=JsonValueBuilder.toJsonValue(request.getParameter(""String_Node_Str"")).get(""String_Node_Str"").asString();
  }
 else {
    key=request.getParameter(SAML2Proxy.RESPONSE_KEY);
  }
  final String username;
  SAML2ResponseData data=null;
  if (!StringUtils.isBlank(key)) {
    data=(SAML2ResponseData)SAML2Store.getTokenFromStore(key);
  }
  if (data == null && SAML2FailoverUtils.isSAML2FailoverEnabled() && !StringUtils.isBlank(key)) {
    try {
      data=(SAML2ResponseData)SAML2FailoverUtils.retrieveSAML2Token(key);
    }
 catch (    SAML2TokenRepositoryException e) {
      return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"",e);
    }
  }
  if (data == null) {
    return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"" + ""String_Node_Str"");
  }
  storageKey=key;
  assertionSubject=data.getSubject();
  authnAssertion=data.getAssertion();
  sessionIndex=data.getSessionIndex();
  respInfo=data.getResponseInfo();
  try {
    username=SPACSUtils.getPrincipalWithoutLogin(assertionSubject,authnAssertion,realm,spName,metaManager,entityName,storageKey);
    if (username != null) {
      principal=new SAML2Principal(username);
      return success(authnAssertion,getNameId(),username);
    }
  }
 catch (  SAML2Exception e) {
    return processError(e,null,""String_Node_Str"");
  }
  if (StringUtils.isBlank(localChain)) {
    return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"" + ""String_Node_Str"");
  }
  authenticationContext=new AuthContext(realm);
  authenticationContext.login(AuthContext.IndexType.SERVICE,localChain,null,null,null,null);
  return injectCallbacks(null,state);
}"
79658,"/** 
 * Sets the auth module's logged-in username via storeUsernamePasswd, triggers call to add information necessary for SLO (if configured) and returns success.
 */
private int success(Assertion assertion,NameID nameId,String userName) throws AuthLoginException, SAML2Exception {
  setSessionProperties(assertion,nameId,userName);
  DEBUG.message(""String_Node_Str"",getPrincipal().getName());
  storeUsernamePasswd(DNUtils.DNtoName(getPrincipal().getName()),null);
  return ISAuthConstants.LOGIN_SUCCEED;
}","/** 
 * Sets the auth module's logged-in username via storeUsernamePasswd, triggers call to add information necessary for SLO (if configured) and returns success.
 */
private int success(Assertion assertion,NameID nameId,String userName) throws AuthLoginException, SAML2Exception {
  setSessionProperties(assertion,nameId,userName);
  setSessionAttributes(assertion,userName);
  DEBUG.message(""String_Node_Str"",getPrincipal().getName());
  storeUsernamePasswd(DNUtils.DNtoName(getPrincipal().getName()),null);
  return ISAuthConstants.LOGIN_SUCCEED;
}"
79659,"/** 
 * Performs similar to SPSSOFederate.initiateAuthnRequest by returning to the next auth stage with a redirect (either GET or POST depending on the config) which triggers remote IdP authentication.
 */
private int initiateSAMLLoginAtIDP(final HttpServletResponse response,final HttpServletRequest request) throws SAML2Exception, AuthLoginException {
  if (reqBinding == null) {
    reqBinding=SAML2Constants.HTTP_REDIRECT;
  }
  final String spEntityID=SPSSOFederate.getSPEntityId(metaAlias);
  final IDPSSODescriptorElement idpsso=SPSSOFederate.getIDPSSOForAuthnReq(realm,entityName);
  final SPSSODescriptorElement spsso=SPSSOFederate.getSPSSOForAuthnReq(realm,spEntityID);
  if (idpsso == null || spsso == null) {
    return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"",bundle.getString(""String_Node_Str""));
  }
  final String ssoURL=SPSSOFederate.getSSOURL(idpsso.getSingleSignOnService(),reqBinding);
  final List extensionsList=SPSSOFederate.getExtensionsList(spEntityID,realm);
  final Map<String,Collection<String>> spConfigAttrsMap=SPSSOFederate.getAttrsMapForAuthnReq(realm,spEntityID);
  final AuthnRequest authnRequest=SPSSOFederate.createAuthnRequest(realm,spEntityID,params,spConfigAttrsMap,extensionsList,spsso,idpsso,ssoURL,false);
  final AuthnRequestInfo reqInfo=new AuthnRequestInfo(request,response,realm,spEntityID,null,authnRequest,null,params);
synchronized (SPCache.requestHash) {
    SPCache.requestHash.put(authnRequest.getID(),reqInfo);
  }
  saveAuthnRequestIfFailoverEnabled(authnRequest,reqInfo);
  final Callback[] nextCallbacks=getCallback(REDIRECT);
  final RedirectCallback redirectCallback=(RedirectCallback)nextCallbacks[0];
  setCookiesForRedirects(request,response);
  if (SAML2Constants.HTTP_POST.equals(reqBinding)) {
    final String postMsg=SPSSOFederate.getPostBindingMsg(idpsso,spsso,spConfigAttrsMap,authnRequest);
    configurePostRedirectCallback(postMsg,ssoURL,redirectCallback);
  }
 else {
    final String authReqXMLString=authnRequest.toXMLString(true,true);
    final String redirectUrl=SPSSOFederate.getRedirect(authReqXMLString,null,ssoURL,idpsso,spsso,spConfigAttrsMap);
    configureGetRedirectCallback(redirectUrl,redirectCallback);
  }
  return REDIRECT;
}","/** 
 * Performs similar to SPSSOFederate.initiateAuthnRequest by returning to the next auth stage with a redirect (either GET or POST depending on the config) which triggers remote IdP authentication.
 */
private int initiateSAMLLoginAtIDP(final HttpServletResponse response,final HttpServletRequest request) throws SAML2Exception, AuthLoginException {
  if (reqBinding == null) {
    reqBinding=SAML2Constants.HTTP_REDIRECT;
  }
  final String spEntityID=SPSSOFederate.getSPEntityId(metaAlias);
  final IDPSSODescriptorElement idpsso=SPSSOFederate.getIDPSSOForAuthnReq(realm,entityName);
  final SPSSODescriptorElement spsso=SPSSOFederate.getSPSSOForAuthnReq(realm,spEntityID);
  if (idpsso == null || spsso == null) {
    return processError(bundle.getString(""String_Node_Str""),""String_Node_Str"",bundle.getString(""String_Node_Str""));
  }
  final String ssoURL=SPSSOFederate.getSSOURL(idpsso.getSingleSignOnService(),reqBinding);
  final List extensionsList=SPSSOFederate.getExtensionsList(spEntityID,realm);
  final Map<String,Collection<String>> spConfigAttrsMap=SPSSOFederate.getAttrsMapForAuthnReq(realm,spEntityID);
  authnRequest=SPSSOFederate.createAuthnRequest(realm,spEntityID,params,spConfigAttrsMap,extensionsList,spsso,idpsso,ssoURL,false);
  final AuthnRequestInfo reqInfo=new AuthnRequestInfo(request,response,realm,spEntityID,null,authnRequest,null,params);
synchronized (SPCache.requestHash) {
    SPCache.requestHash.put(authnRequest.getID(),reqInfo);
  }
  saveAuthnRequest(authnRequest,reqInfo);
  final Callback[] nextCallbacks=getCallback(REDIRECT);
  final RedirectCallback redirectCallback=(RedirectCallback)nextCallbacks[0];
  setCookiesForRedirects(request,response);
  if (SAML2Constants.HTTP_POST.equals(reqBinding)) {
    final String postMsg=SPSSOFederate.getPostBindingMsg(idpsso,spsso,spConfigAttrsMap,authnRequest);
    configurePostRedirectCallback(postMsg,ssoURL,redirectCallback);
  }
 else {
    final String authReqXMLString=authnRequest.toXMLString(true,true);
    final String redirectUrl=SPSSOFederate.getRedirect(authReqXMLString,null,ssoURL,idpsso,spsso,spConfigAttrsMap);
    configureGetRedirectCallback(redirectUrl,redirectCallback);
  }
  return REDIRECT;
}"
79660,"/** 
 * If enabled, performs the first-stage of SLO - by recording the currently logged in user. The information relating to a remote user is stored alongside their local information, and upon active-logout is used to trigger a call to the IdP requesting their logout.
 * @param requestParamsMap map containing <code>HttpServletRequest</code>parameters
 * @param request <code>HttpServletRequest</code> object.
 * @param response <code>HttpServletResponse</code> object.
 * @param ssoToken authenticated user's single sign token.
 */
@Override public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken){
  try {
    final String metaAlias=ssoToken.getProperty(SAML2Constants.METAALIAS);
    final String sessionIndex=ssoToken.getProperty(SAML2Constants.SESSION_INDEX);
    final String spEntityId=ssoToken.getProperty(SAML2Constants.SPENTITYID);
    final String idpEntityId=ssoToken.getProperty(SAML2Constants.IDPENTITYID);
    final String nameIdXML=ssoToken.getProperty(SAML2Constants.NAMEID);
    final NameID nameId=new NameIDImplWithoutSPNameQualifier(nameIdXML);
    final boolean isTransient=Boolean.parseBoolean(ssoToken.getProperty(Constants.IS_TRANSIENT));
    final String requestId=ssoToken.getProperty(Constants.REQUEST_ID);
    final NameIDInfo info=new NameIDInfo(spEntityId,idpEntityId,nameId,SAML2Constants.SP_ROLE,false);
    final String ssOutEnabled=ssoToken.getProperty(SAML2Constants.SINGLE_LOGOUT);
    if (Boolean.parseBoolean(ssOutEnabled)) {
      setupSingleLogOut(ssoToken,metaAlias,sessionIndex,spEntityId,idpEntityId,nameId);
    }
    configureIdpInitSLO(ssoToken,sessionIndex,metaAlias,info,isTransient,requestId);
    clearSession(ssoToken);
  }
 catch (  SAML2Exception|SessionException|SSOException e) {
    DEBUG.warning(""String_Node_Str"");
  }
}","/** 
 * If enabled, performs the first-stage of SLO - by recording the currently logged in user. The information relating to a remote user is stored alongside their local information, and upon active-logout is used to trigger a call to the IdP requesting their logout.
 * @param requestParamsMap map containing <code>HttpServletRequest</code>parameters
 * @param request <code>HttpServletRequest</code> object.
 * @param response <code>HttpServletResponse</code> object.
 * @param ssoToken authenticated user's single sign token.
 */
@Override public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken){
  try {
    final String metaAlias=ssoToken.getProperty(SAML2Constants.METAALIAS);
    final String sessionIndex=ssoToken.getProperty(SAML2Constants.SESSION_INDEX);
    final String spEntityId=ssoToken.getProperty(SAML2Constants.SPENTITYID);
    final String idpEntityId=ssoToken.getProperty(SAML2Constants.IDPENTITYID);
    final String nameIdXML=ssoToken.getProperty(SAML2Constants.NAMEID);
    final NameID nameId=new NameIDImplWithoutSPNameQualifier(nameIdXML);
    final boolean isTransient=Boolean.parseBoolean(ssoToken.getProperty(Constants.IS_TRANSIENT));
    final String requestId=ssoToken.getProperty(Constants.REQUEST_ID);
    final SessionProvider sessionProvider=SessionManager.getProvider();
    final NameIDInfo info=new NameIDInfo(spEntityId,idpEntityId,nameId,SAML2Constants.SP_ROLE,false);
    final String ssOutEnabled=ssoToken.getProperty(SAML2Constants.SINGLE_LOGOUT);
    final String cacheKey=ssoToken.getProperty(Constants.CACHE_KEY);
    final String realm=DNMapper.orgNameToRealmName(ssoToken.getProperty(com.sun.identity.shared.Constants.ORGANIZATION));
    SAML2ResponseData data=(SAML2ResponseData)SAML2Store.getTokenFromStore(cacheKey);
    if (data == null && SAML2FailoverUtils.isSAML2FailoverEnabled()) {
      data=(SAML2ResponseData)SAML2FailoverUtils.retrieveSAML2Token(cacheKey);
    }
 else {
      throw new SAML2Exception(""String_Node_Str"");
    }
    if (Boolean.parseBoolean(ssOutEnabled)) {
      setupSingleLogOut(ssoToken,metaAlias,sessionIndex,spEntityId,idpEntityId,nameId);
    }
    configureIdpInitSLO(sessionProvider,ssoToken,sessionIndex,metaAlias,info,isTransient,requestId);
    configurePostSSO(spEntityId,realm,request,response,ssoToken,sessionProvider,data.getResponseInfo(),cacheKey);
    clearSession(ssoToken);
  }
 catch (  SAML2Exception|SessionException|SSOException|SAML2TokenRepositoryException e) {
    DEBUG.warning(""String_Node_Str"",e);
  }
}"
79661,"@Override public void onLogout(HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {
  try {
    final String ssOutEnabled=ssoToken.getProperty(SAML2Constants.SINGLE_LOGOUT);
    if (Boolean.parseBoolean(ssOutEnabled)) {
      request.setAttribute(AMPostAuthProcessInterface.POST_PROCESS_LOGOUT_URL,ssoToken.getProperty(SLO_SESSION_LOCATION) + ssoToken.getProperty(SLO_SESSION_REFERENCE));
      ssoToken.setProperty(AMPostAuthProcessInterface.POST_PROCESS_LOGOUT_URL,ssoToken.getProperty(SLO_SESSION_LOCATION) + ESAPI.encoder().encodeForURL(ssoToken.getProperty(SLO_SESSION_REFERENCE)));
    }
  }
 catch (  EncodingException|SSOException e) {
    DEBUG.warning(""String_Node_Str"");
  }
}","@Override public void onLogout(HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {
  try {
    final String ssOutEnabled=ssoToken.getProperty(SAML2Constants.SINGLE_LOGOUT);
    if (Boolean.parseBoolean(ssOutEnabled)) {
      final XUIState xuiState=InjectorHolder.getInstance(XUIState.class);
      final StringBuilder logoutLocation=new StringBuilder();
      logoutLocation.append(ssoToken.getProperty(SLO_SESSION_LOCATION));
      if (xuiState.isXUIEnabled()) {
        logoutLocation.append(ESAPI.encoder().encodeForURL(ssoToken.getProperty(SLO_SESSION_REFERENCE)));
      }
 else {
        logoutLocation.append(ssoToken.getProperty(SLO_SESSION_REFERENCE));
      }
      request.setAttribute(AMPostAuthProcessInterface.POST_PROCESS_LOGOUT_URL,logoutLocation.toString());
    }
  }
 catch (  EncodingException|SSOException e) {
    DEBUG.warning(""String_Node_Str"",e);
  }
}"
79662,"private void configureIdpInitSLO(SSOToken session,String sessionIndex,String metaAlias,NameIDInfo info,boolean isTransient,String requestID) throws SessionException, SAML2Exception, SSOException {
  SessionProvider sessionProvider=SessionManager.getProvider();
  SPACSUtils.saveInfoInMemory(sessionProvider,session,sessionIndex,metaAlias,info,IDPProxyUtil.isIDPProxyEnabled(requestID),isTransient);
}","private void configureIdpInitSLO(SessionProvider sessionProvider,SSOToken session,String sessionIndex,String metaAlias,NameIDInfo info,boolean isTransient,String requestID) throws SessionException, SAML2Exception, SSOException {
  SPACSUtils.saveInfoInMemory(sessionProvider,session,sessionIndex,metaAlias,info,IDPProxyUtil.isIDPProxyEnabled(requestID),isTransient);
}"
79663,"/** 
 * Clears the session of all the temp data we passed to set up SLO.
 */
private void clearSession(SSOToken ssoToken) throws SSOException {
  ssoToken.setProperty(SAML2Constants.RELAY_STATE,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.SESSION_INDEX,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.IDPENTITYID,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.SPENTITYID,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.METAALIAS,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.REQ_BINDING,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.NAMEID,""String_Node_Str"");
  ssoToken.setProperty(Constants.IS_TRANSIENT,""String_Node_Str"");
  ssoToken.setProperty(Constants.REQUEST_ID,""String_Node_Str"");
}","/** 
 * Clears the session of all the temp data we passed to set up SLO.
 */
private void clearSession(SSOToken ssoToken) throws SSOException {
  ssoToken.setProperty(SAML2Constants.RELAY_STATE,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.SESSION_INDEX,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.IDPENTITYID,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.SPENTITYID,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.METAALIAS,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.REQ_BINDING,""String_Node_Str"");
  ssoToken.setProperty(SAML2Constants.NAMEID,""String_Node_Str"");
  ssoToken.setProperty(Constants.IS_TRANSIENT,""String_Node_Str"");
  ssoToken.setProperty(Constants.REQUEST_ID,""String_Node_Str"");
  ssoToken.setProperty(Constants.CACHE_KEY,""String_Node_Str"");
}"
79664,"/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jacksonAuditor(String... fields){
  return new RestletBodyAuditor<Map<String,Object>>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        if (((JacksonRepresentation)representation).getObject() instanceof Map) {
          return extractValues((Map<String,Object>)((JacksonRepresentation)representation).getObject());
        }
        return json(object());
      }
 catch (      IOException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    Map<String,Object> object) throws AuditException {
      return object.get(field);
    }
  }
;
}","/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jacksonAuditor(String... fields){
  return new RestletBodyAuditor<Map<String,Object>>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        if (!representation.isEmpty() && ((JacksonRepresentation)representation).getObject() instanceof Map) {
          return extractValues((Map<String,Object>)((JacksonRepresentation)representation).getObject());
        }
        return json(object());
      }
 catch (      IOException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    Map<String,Object> object) throws AuditException {
      return object.get(field);
    }
  }
;
}"
79665,"@Override protected void configure(){
  bind(ResourceTypeConfiguration.class).to(ResourceTypeConfigurationImpl.class);
  bind(ResourceTypeService.class).to(ResourceTypeServiceImpl.class);
  bind(ConstraintValidator.class).to(ConstraintValidatorImpl.class);
  install(new FactoryModuleBuilder().implement(ApplicationService.class,ApplicationServiceImpl.class).build(ApplicationServiceFactory.class));
}","@Override protected void configure(){
  bind(ResourceTypeConfiguration.class).to(ResourceTypeConfigurationImpl.class);
  bind(ResourceTypeService.class).to(ResourceTypeServiceImpl.class);
  bind(ConstraintValidator.class).to(ConstraintValidatorImpl.class);
  install(new FactoryModuleBuilder().implement(ApplicationService.class,ApplicationServiceImpl.class).build(ApplicationServiceFactory.class));
  bind(SessionCache.class).toInstance(SessionCache.getInstance());
}"
79666,"/** 
 * Entry point to the engine.
 */
public static void main(String[] argv){
  boolean bBootstrapped=true;
  importSvcCmd=(argv.length > 0) && argv[0].equals(IMPORT_SVC_CMD);
  if (importSvcCmd) {
    try {
      initSys=new InitializeSystem();
    }
 catch (    FileNotFoundException ex) {
      System.err.println(""String_Node_Str"" + ex.getMessage());
      System.exit(1);
    }
catch (    IOException ex) {
      System.err.println(""String_Node_Str"" + ex.getMessage());
    }
catch (    LDAPServiceException ex) {
      System.err.println(""String_Node_Str"" + ex.getMessage());
    }
  }
 else {
    try {
      Bootstrap.load();
      AdminTokenAction.getInstance().authenticationInitialized();
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    ConfiguratorException ex) {
      bBootstrapped=false;
      if ((argv.length > 0) && !argv[0].equals(CLIConstants.PREFIX_ARGUMENT_LONG + CLIConstants.ARGUMENT_VERSION) && !argv[0].equals(CLIConstants.PREFIX_ARGUMENT_SHORT + CLIConstants.SHORT_ARGUMENT_VERSION)) {
        System.err.println(ex.getL10NMessage(Locale.getDefault()));
        System.exit(1);
      }
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + e.getMessage());
      System.exit(1);
    }
    if (bBootstrapped) {
      if (VersionCheck.isVersionValid() == 1) {
        System.exit(1);
      }
    }
  }
  if (bBootstrapped) {
    debugger=Debug.getInstance(""String_Node_Str"");
    getIsInstallTime();
    Crypt.checkCaller();
  }
  new CommandManager(argv);
}","/** 
 * Entry point to the engine.
 */
public static void main(String[] argv){
  boolean bBootstrapped=true;
  importSvcCmd=(argv.length > 0) && argv[0].equals(IMPORT_SVC_CMD);
  if (importSvcCmd) {
    try {
      initSys=new InitializeSystem();
    }
 catch (    FileNotFoundException ex) {
      System.err.println(""String_Node_Str"" + ex.getMessage());
      System.exit(1);
    }
catch (    IOException ex) {
      System.err.println(""String_Node_Str"" + ex.getMessage());
    }
catch (    LDAPServiceException ex) {
      System.err.println(""String_Node_Str"" + ex.getMessage());
    }
  }
 else {
    try {
      InjectorConfiguration.setGuiceModuleLoader(new CliGuiceModuleLoader());
      Bootstrap.load();
      AdminTokenAction.getInstance().authenticationInitialized();
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    ConfiguratorException ex) {
      bBootstrapped=false;
      if ((argv.length > 0) && !argv[0].equals(CLIConstants.PREFIX_ARGUMENT_LONG + CLIConstants.ARGUMENT_VERSION) && !argv[0].equals(CLIConstants.PREFIX_ARGUMENT_SHORT + CLIConstants.SHORT_ARGUMENT_VERSION)) {
        System.err.println(ex.getL10NMessage(Locale.getDefault()));
        System.exit(1);
      }
    }
catch (    Exception e) {
      System.err.println(""String_Node_Str"" + e.getMessage());
      System.exit(1);
    }
    if (bBootstrapped) {
      if (VersionCheck.isVersionValid() == 1) {
        System.exit(1);
      }
    }
  }
  if (bBootstrapped) {
    debugger=Debug.getInstance(""String_Node_Str"");
    getIsInstallTime();
    Crypt.checkCaller();
  }
  new CommandManager(argv);
}"
79667,"/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jacksonAuditor(String... fields){
  return new RestletBodyAuditor<Map<String,Object>>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        return extractValues((Map<String,Object>)((JacksonRepresentation)representation).getObject());
      }
 catch (      IOException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    Map<String,Object> object) throws AuditException {
      return object.get(field);
    }
  }
;
}","/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jacksonAuditor(String... fields){
  return new RestletBodyAuditor<Map<String,Object>>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        return extractValues((Map<String,Object>)(new JacksonRepresentation(representation).getObject()));
      }
 catch (      IOException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    Map<String,Object> object) throws AuditException {
      return object.get(field);
    }
  }
;
}"
79668,"/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jsonAuditor(String... fields){
  return new RestletBodyAuditor<JSONObject>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        return extractValues(((JsonRepresentation)representation).getJsonObject());
      }
 catch (      JSONException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    JSONObject object) throws AuditException {
      return object.opt(field);
    }
  }
;
}","/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jsonAuditor(String... fields){
  return new RestletBodyAuditor<JSONObject>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        return extractValues(new JsonRepresentation(representation).getJsonObject());
      }
 catch (      IOException|JSONException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    JSONObject object) throws AuditException {
      return object.opt(field);
    }
  }
;
}"
79669,"/** 
 * Handles POST requests to the OpenId Connect client registration endpoint for creating OpenId Connect client registrations.
 * @param entity The representation of the client registration details.
 * @return The representation of the client registration details as created in the store.
 * @throws OAuth2RestletException If an error occurs whilst processing the client registration.
 */
@Post public Representation createClient(Representation entity) throws OAuth2RestletException {
  final OAuth2Request request=requestFactory.create(getRequest());
  final ChallengeResponse authHeader=getRequest().getChallengeResponse();
  final String accessToken=authHeader != null ? authHeader.getRawValue() : null;
  try {
    final String deploymentUrl=getRequest().getHostRef().toString() + ""String_Node_Str"" + getRequest().getResourceRef().getSegments().get(0);
    final JsonValue registration=clientRegistrationService.createRegistration(accessToken,deploymentUrl,request);
    setStatus(Status.SUCCESS_CREATED);
    return new JsonRepresentation(registration.asMap());
  }
 catch (  OAuth2Exception e) {
    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);
  }
}","/** 
 * Handles POST requests to the OpenId Connect client registration endpoint for creating OpenId Connect client registrations.
 * @param entity The representation of the client registration details.
 * @return The representation of the client registration details as created in the store.
 * @throws OAuth2RestletException If an error occurs whilst processing the client registration.
 */
@Post public Representation createClient(Representation entity) throws OAuth2RestletException {
  final OAuth2Request request=requestFactory.create(getRequest());
  final ChallengeResponse authHeader=getRequest().getChallengeResponse();
  final String accessToken=authHeader != null ? authHeader.getRawValue() : null;
  try {
    final String deploymentUrl=getRequest().getHostRef().toString() + ""String_Node_Str"" + getRequest().getResourceRef().getSegments().get(0);
    final JsonValue registration=clientRegistrationService.createRegistration(accessToken,deploymentUrl,request);
    setStatus(Status.SUCCESS_CREATED);
    return new JacksonRepresentation(registration.asMap());
  }
 catch (  OAuth2Exception e) {
    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);
  }
}"
79670,"/** 
 * Handles GET requests to the OpenId Connect client registration endpoint for retrieving OpenId Connect client registrations.
 * @return The representation of the client registration details.
 * @throws OAuth2RestletException If an error occurs whilst retrieving the client registration.
 */
@Get public Representation getClient() throws OAuth2RestletException {
  final OAuth2Request request=requestFactory.create(getRequest());
  final String clientId=request.getParameter(OAuth2Constants.OAuth2Client.CLIENT_ID);
  final String accessToken=getRequest().getChallengeResponse().getRawValue();
  try {
    final JsonValue registration=clientRegistrationService.getRegistration(clientId,accessToken,request);
    return new JsonRepresentation(registration.asMap());
  }
 catch (  OAuth2Exception e) {
    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);
  }
}","/** 
 * Handles GET requests to the OpenId Connect client registration endpoint for retrieving OpenId Connect client registrations.
 * @return The representation of the client registration details.
 * @throws OAuth2RestletException If an error occurs whilst retrieving the client registration.
 */
@Get public Representation getClient() throws OAuth2RestletException {
  final OAuth2Request request=requestFactory.create(getRequest());
  final String clientId=request.getParameter(OAuth2Constants.OAuth2Client.CLIENT_ID);
  final String accessToken=getRequest().getChallengeResponse().getRawValue();
  try {
    final JsonValue registration=clientRegistrationService.getRegistration(clientId,accessToken,request);
    return new JacksonRepresentation(registration.asMap());
  }
 catch (  OAuth2Exception e) {
    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);
  }
}"
79671,"/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jacksonAuditor(String... fields){
  return new RestletBodyAuditor<Map<String,Object>>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        return extractValues((Map<String,Object>)(new JacksonRepresentation(representation).getObject()));
      }
 catch (      IOException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    Map<String,Object> object) throws AuditException {
      return object.get(field);
    }
  }
;
}","/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jacksonAuditor(String... fields){
  return new RestletBodyAuditor<Map<String,Object>>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        if (((JacksonRepresentation)representation).getObject() instanceof Map) {
          return extractValues((Map<String,Object>)((JacksonRepresentation)representation).getObject());
        }
        return json(object());
      }
 catch (      IOException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    Map<String,Object> object) throws AuditException {
      return object.get(field);
    }
  }
;
}"
79672,"/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jsonAuditor(String... fields){
  return new RestletBodyAuditor<JSONObject>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        return extractValues(new JsonRepresentation(representation).getJsonObject());
      }
 catch (      IOException|JSONException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    JSONObject object) throws AuditException {
      return object.opt(field);
    }
  }
;
}","/** 
 * Create a body auditor for JSON bodies.
 * @param fields The fields that should be captured if they exist.
 * @return The auditor object.
 */
public static RestletBodyAuditor jsonAuditor(String... fields){
  return new RestletBodyAuditor<JSONObject>(fields){
    @Override public JsonValue apply(    Representation representation) throws AuditException {
      try {
        boolean isBufferingRepresentation=(representation instanceof BufferingRepresentation);
        boolean isEmptyBufferingRepresentation=isBufferingRepresentation && ((BufferingRepresentation)representation).getWrappedRepresentation().isEmpty();
        if (isEmptyBufferingRepresentation || (!isBufferingRepresentation && representation.isEmpty())) {
          return json(object());
        }
        return extractValues(new JsonRepresentation(representation).getJsonObject());
      }
 catch (      IOException|JSONException e) {
        throw new AuditException(""String_Node_Str"",e);
      }
    }
    @Override Object getValue(    String field,    JSONObject object) throws AuditException {
      return object.opt(field);
    }
  }
;
}"
79673,"/** 
 * Adds and removes labels on the updated resource set, creating the label if required and deleting labels which are no longer used.
 * @param resourceSet The updated resource set.
 */
void updateLabelsForExistingResourceSet(ResourceSetDescription resourceSet){
  JsonValue newLabels=resourceSet.getDescription().get(OAuth2Constants.ResourceSets.LABELS);
  if (newLabels.isNull()) {
    newLabels=json(array());
  }
  Collection<String> addedLabels=newLabels.asSet(String.class);
  try {
    Set<ResourceSetLabel> labels=labelsStore.forResourceSet(resourceSet.getRealm(),resourceSet.getResourceOwnerId(),resourceSet.getId(),true);
    Collection<String> removedLabels=new HashSet<>();
    for (    ResourceSetLabel label : labels) {
      String labelName=label.getName().substring(label.getName().lastIndexOf(""String_Node_Str"") + 1);
      if (!addedLabels.remove(labelName)) {
        removedLabels.add(labelName);
      }
    }
    updateLabels(resourceSet,addedLabels,removedLabels);
  }
 catch (  ResourceException e) {
    logger.error(""String_Node_Str"",resourceSet.getId(),e);
  }
}","/** 
 * Adds and removes labels on the updated resource set, creating the label if required and deleting labels which are no longer used.
 * @param resourceSet The updated resource set.
 */
void updateLabelsForExistingResourceSet(ResourceSetDescription resourceSet){
  JsonValue newLabels=resourceSet.getDescription().get(OAuth2Constants.ResourceSets.LABELS);
  if (newLabels.isNull()) {
    newLabels=json(array());
  }
  Collection<String> addedLabels=new HashSet<>(newLabels.asSet(String.class));
  try {
    Set<ResourceSetLabel> labels=labelsStore.forResourceSet(resourceSet.getRealm(),resourceSet.getResourceOwnerId(),resourceSet.getId(),true);
    Collection<String> removedLabels=new HashSet<>();
    for (    ResourceSetLabel label : labels) {
      String labelName=label.getName().substring(label.getName().lastIndexOf(""String_Node_Str"") + 1);
      if (!addedLabels.remove(labelName)) {
        removedLabels.add(labelName);
      }
    }
    updateLabels(resourceSet,addedLabels,removedLabels);
  }
 catch (  ResourceException e) {
    logger.error(""String_Node_Str"",resourceSet.getId(),e);
  }
}"
79674,"private Representation readResourceSet(String resourceSetId) throws NotFoundException, ServerException {
  ResourceSetStore store=providerSettingsFactory.get(requestFactory.create(getRequest())).getResourceSetStore();
  return createJsonResponse(store.read(resourceSetId),true,true);
}","private Representation readResourceSet(String resourceSetId) throws NotFoundException, ServerException {
  ResourceSetStore store=providerSettingsFactory.get(requestFactory.create(getRequest())).getResourceSetStore();
  ResourceSetDescription resourceSetDescription=store.read(resourceSetId);
  Set<String> labels=new HashSet<String>();
  try {
    Set<ResourceSetLabel> labelSet=umaLabelsStore.forResourceSet(resourceSetDescription.getRealm(),resourceSetDescription.getResourceOwnerId(),resourceSetDescription.getId(),false);
    for (    ResourceSetLabel label : labelSet) {
      labels.add(label.getName());
    }
  }
 catch (  org.forgerock.json.resource.ResourceException e) {
    throw new ServerException(e);
  }
  resourceSetDescription.getDescription().put(""String_Node_Str"",labels);
  return createJsonResponse(resourceSetDescription,true,true);
}"
79675,"/** 
 * <p>Creates or updates a resource set description.</p> <p>If the request contains a If-Match header an update is performed, otherwise a create is performed.</p> <p>An update will replace the current description of the resource set with the contents of the request body.</p>
 * @param entity The new resource set description.
 * @return A JSON object containing the authorization server's unique id for the resource set and, optionally,a policy uri.
 * @throws NotFoundException If the requested resource set description does not exist.
 * @throws ServerException When an error occurs during creating or updating.
 * @throws BadRequestException If the request JSON is invalid.
 */
@Post public Representation createResourceSet(JsonRepresentation entity) throws NotFoundException, ServerException, BadRequestException {
  ResourceSetDescription resourceSetDescription=new ResourceSetDescription(null,getClientId(),getResourceOwnerId(),validator.validate(toMap(entity)));
  OAuth2Request oAuth2Request=requestFactory.create(getRequest());
  ResourceSetStore store=providerSettingsFactory.get(oAuth2Request).getResourceSetStore();
  QueryFilter<String> query=QueryFilter.and(QueryFilter.equalTo(ResourceSetTokenField.NAME,resourceSetDescription.getName()),QueryFilter.equalTo(ResourceSetTokenField.CLIENT_ID,getClientId()),QueryFilter.equalTo(ResourceSetTokenField.RESOURCE_OWNER_ID,getResourceOwnerId()));
  if (!store.query(query).isEmpty()) {
    getResponse().setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    Map<String,Object> response=new HashMap<String,Object>();
    response.put(OAuth2Constants.Params.ERROR,Status.CLIENT_ERROR_BAD_REQUEST.getReasonPhrase());
    response.put(OAuth2Constants.Params.ERROR_DESCRIPTION,""String_Node_Str"" + resourceSetDescription.getName() + ""String_Node_Str"");
    return new JsonRepresentation(response);
  }
  JsonValue labels=resourceSetDescription.getDescription().get(OAuth2Constants.ResourceSets.LABELS);
  resourceSetDescription.getDescription().remove(OAuth2Constants.ResourceSets.LABELS);
  for (  ResourceRegistrationFilter filter : extensionFilterManager.getFilters(ResourceRegistrationFilter.class)) {
    filter.beforeResourceRegistration(resourceSetDescription);
  }
  store.create(oAuth2Request,resourceSetDescription);
  resourceSetDescription.getDescription().add(OAuth2Constants.ResourceSets.LABELS,labels);
  labelRegistration.updateLabelsForNewResourceSet(resourceSetDescription);
  for (  ResourceRegistrationFilter filter : extensionFilterManager.getFilters(ResourceRegistrationFilter.class)) {
    filter.afterResourceRegistration(resourceSetDescription);
  }
  for (  ResourceSetRegistrationListener listener : listeners) {
    listener.resourceSetCreated(oAuth2Request.<String>getParameter(""String_Node_Str""),resourceSetDescription);
  }
  getResponse().setStatus(Status.SUCCESS_CREATED);
  return createJsonResponse(resourceSetDescription,false,true);
}","/** 
 * <p>Creates or updates a resource set description.</p> <p>If the request contains a If-Match header an update is performed, otherwise a create is performed.</p> <p>An update will replace the current description of the resource set with the contents of the request body.</p>
 * @param entity The new resource set description.
 * @return A JSON object containing the authorization server's unique id for the resource set and, optionally,a policy uri.
 * @throws NotFoundException If the requested resource set description does not exist.
 * @throws ServerException When an error occurs during creating or updating.
 * @throws BadRequestException If the request JSON is invalid.
 */
@Post public Representation createResourceSet(JsonRepresentation entity) throws NotFoundException, ServerException, BadRequestException {
  ResourceSetDescription resourceSetDescription=new ResourceSetDescription(null,getClientId(),getResourceOwnerId(),validator.validate(toMap(entity)));
  OAuth2Request oAuth2Request=requestFactory.create(getRequest());
  ResourceSetStore store=providerSettingsFactory.get(oAuth2Request).getResourceSetStore();
  QueryFilter<String> query=QueryFilter.and(QueryFilter.equalTo(ResourceSetTokenField.NAME,resourceSetDescription.getName()),QueryFilter.equalTo(ResourceSetTokenField.CLIENT_ID,getClientId()),QueryFilter.equalTo(ResourceSetTokenField.RESOURCE_OWNER_ID,getResourceOwnerId()));
  if (!store.query(query).isEmpty()) {
    getResponse().setStatus(Status.CLIENT_ERROR_BAD_REQUEST);
    Map<String,Object> response=new HashMap<String,Object>();
    response.put(OAuth2Constants.Params.ERROR,Status.CLIENT_ERROR_BAD_REQUEST.getReasonPhrase());
    response.put(OAuth2Constants.Params.ERROR_DESCRIPTION,""String_Node_Str"" + resourceSetDescription.getName() + ""String_Node_Str"");
    return new JsonRepresentation(response);
  }
  JsonValue labels=resourceSetDescription.getDescription().get(OAuth2Constants.ResourceSets.LABELS);
  resourceSetDescription.getDescription().remove(OAuth2Constants.ResourceSets.LABELS);
  for (  ResourceRegistrationFilter filter : extensionFilterManager.getFilters(ResourceRegistrationFilter.class)) {
    filter.beforeResourceRegistration(resourceSetDescription);
  }
  store.create(oAuth2Request,resourceSetDescription);
  if (labels.isNotNull()) {
    resourceSetDescription.getDescription().add(OAuth2Constants.ResourceSets.LABELS,labels.asSet());
  }
  labelRegistration.updateLabelsForNewResourceSet(resourceSetDescription);
  for (  ResourceRegistrationFilter filter : extensionFilterManager.getFilters(ResourceRegistrationFilter.class)) {
    filter.afterResourceRegistration(resourceSetDescription);
  }
  for (  ResourceSetRegistrationListener listener : listeners) {
    listener.resourceSetCreated(oAuth2Request.<String>getParameter(""String_Node_Str""),resourceSetDescription);
  }
  getResponse().setStatus(Status.SUCCESS_CREATED);
  return createJsonResponse(resourceSetDescription,false,true);
}"
79676,"private Tag generateETag(ResourceSetDescription resourceSetDescription){
  return new Tag(Integer.toString(resourceSetDescription.hashCode()),true);
}","private Tag generateETag(ResourceSetDescription resourceSetDescription){
  int hashCode=resourceSetDescription.hashCode();
  JsonValue description=resourceSetDescription.getDescription();
  if (!description.isDefined(OAuth2Constants.ResourceSets.LABELS)) {
    description.put(OAuth2Constants.ResourceSets.LABELS,null);
    hashCode=resourceSetDescription.hashCode();
    description.remove(OAuth2Constants.ResourceSets.LABELS);
  }
  return new Tag(Integer.toString(hashCode),true);
}"
79677,"@Put public Representation updateResourceSet(JsonRepresentation entity) throws NotFoundException, ServerException, BadRequestException {
  if (!isConditionalRequest()) {
    throw new ResourceException(512,""String_Node_Str"",""String_Node_Str"",null);
  }
  final Map<String,Object> resourceSetDescriptionAttributes=validator.validate(toMap(entity));
  final String resourceSetId=getResourceSetId();
  ResourceSetStore store=providerSettingsFactory.get(requestFactory.create(getRequest())).getResourceSetStore();
  ResourceSetDescription resourceSetDescription=store.read(resourceSetId).update(resourceSetDescriptionAttributes);
  JsonValue labels=resourceSetDescription.getDescription().get(OAuth2Constants.ResourceSets.LABELS);
  resourceSetDescription.getDescription().remove(OAuth2Constants.ResourceSets.LABELS);
  store.update(resourceSetDescription);
  resourceSetDescription.getDescription().add(OAuth2Constants.ResourceSets.LABELS,labels);
  labelRegistration.updateLabelsForExistingResourceSet(resourceSetDescription);
  return createJsonResponse(resourceSetDescription,false,true);
}","@Put public Representation updateResourceSet(JsonRepresentation entity) throws NotFoundException, ServerException, BadRequestException {
  if (!isConditionalRequest()) {
    throw new ResourceException(512,""String_Node_Str"",""String_Node_Str"",null);
  }
  final Map<String,Object> resourceSetDescriptionAttributes=validator.validate(toMap(entity));
  final String resourceSetId=getResourceSetId();
  ResourceSetStore store=providerSettingsFactory.get(requestFactory.create(getRequest())).getResourceSetStore();
  ResourceSetDescription resourceSetDescription=store.read(resourceSetId).update(resourceSetDescriptionAttributes);
  JsonValue labels=resourceSetDescription.getDescription().get(OAuth2Constants.ResourceSets.LABELS);
  resourceSetDescription.getDescription().remove(OAuth2Constants.ResourceSets.LABELS);
  store.update(resourceSetDescription);
  if (labels.isNotNull()) {
    resourceSetDescription.getDescription().add(OAuth2Constants.ResourceSets.LABELS,labels.asSet());
  }
 else {
    resourceSetDescription.getDescription().add(OAuth2Constants.ResourceSets.LABELS,new HashSet<String>());
  }
  labelRegistration.updateLabelsForExistingResourceSet(resourceSetDescription);
  return createJsonResponse(resourceSetDescription,false,true);
}"
79678,"/** 
 * Construct a new ResourceSetRegistrationEndpoint instance.
 * @param providerSettingsFactory An instance of the {@link OAuth2ProviderSettingsFactory}.
 * @param validator An instance of the {@link ResourceSetDescriptionValidator}.
 * @param requestFactory An instance of the OAuth2RequestFactory.
 * @param listeners A {@code Set} of {@code ResourceSetRegistrationListener}s.
 * @param labelRegistration An instance of the {@code ResourceSetLabelRegistration}.
 * @param extensionFilterManager An instance of the {@code ExtensionFilterManager}.
 * @param exceptionHandler An instance of the {@code ExceptionHandler}.
 */
@Inject public ResourceSetRegistrationEndpoint(OAuth2ProviderSettingsFactory providerSettingsFactory,ResourceSetDescriptionValidator validator,OAuth2RequestFactory<Request> requestFactory,Set<ResourceSetRegistrationListener> listeners,ResourceSetLabelRegistration labelRegistration,ExtensionFilterManager extensionFilterManager,ExceptionHandler exceptionHandler){
  this.providerSettingsFactory=providerSettingsFactory;
  this.validator=validator;
  this.requestFactory=requestFactory;
  this.listeners=listeners;
  this.labelRegistration=labelRegistration;
  this.extensionFilterManager=extensionFilterManager;
  this.exceptionHandler=exceptionHandler;
}","/** 
 * Construct a new ResourceSetRegistrationEndpoint instance.
 * @param providerSettingsFactory An instance of the {@link OAuth2ProviderSettingsFactory}.
 * @param validator An instance of the {@link ResourceSetDescriptionValidator}.
 * @param requestFactory An instance of the OAuth2RequestFactory.
 * @param listeners A {@code Set} of {@code ResourceSetRegistrationListener}s.
 * @param labelRegistration An instance of the {@code ResourceSetLabelRegistration}.
 * @param extensionFilterManager An instance of the {@code ExtensionFilterManager}.
 * @param exceptionHandler An instance of the {@code ExceptionHandler}.
 * @param umaLabelsStore An instance of the Uma Label Store
 */
@Inject public ResourceSetRegistrationEndpoint(OAuth2ProviderSettingsFactory providerSettingsFactory,ResourceSetDescriptionValidator validator,OAuth2RequestFactory<Request> requestFactory,Set<ResourceSetRegistrationListener> listeners,ResourceSetLabelRegistration labelRegistration,ExtensionFilterManager extensionFilterManager,ExceptionHandler exceptionHandler,UmaLabelsStore umaLabelsStore){
  this.providerSettingsFactory=providerSettingsFactory;
  this.validator=validator;
  this.requestFactory=requestFactory;
  this.listeners=listeners;
  this.labelRegistration=labelRegistration;
  this.extensionFilterManager=extensionFilterManager;
  this.exceptionHandler=exceptionHandler;
  this.umaLabelsStore=umaLabelsStore;
}"
79679,"@BeforeMethod @SuppressWarnings(""String_Node_Str"") public void setup() throws ServerException, InvalidGrantException, NotFoundException {
  store=mock(ResourceSetStore.class);
  validator=mock(ResourceSetDescriptionValidator.class);
  OAuth2RequestFactory<Request> requestFactory=mock(OAuth2RequestFactory.class);
  Set<ResourceSetRegistrationListener> listeners=new HashSet<ResourceSetRegistrationListener>();
  listener=mock(ResourceSetRegistrationListener.class);
  listeners.add(listener);
  labelRegistration=mock(ResourceSetLabelRegistration.class);
  ExtensionFilterManager extensionFilterManager=mock(ExtensionFilterManager.class);
  resourceRegistrationFilter=mock(ResourceRegistrationFilter.class);
  given(extensionFilterManager.getFilters(ResourceRegistrationFilter.class)).willReturn(Collections.singletonList(resourceRegistrationFilter));
  OAuth2ProviderSettingsFactory providerSettingsFactory=mock(OAuth2ProviderSettingsFactory.class);
  OAuth2ProviderSettings providerSettings=mock(OAuth2ProviderSettings.class);
  given(providerSettingsFactory.get(Matchers.<OAuth2Request>anyObject())).willReturn(providerSettings);
  given(providerSettings.getResourceSetStore()).willReturn(store);
  ExceptionHandler exceptionHandler=mock(ExceptionHandler.class);
  endpoint=spy(new ResourceSetRegistrationEndpoint(providerSettingsFactory,validator,requestFactory,listeners,labelRegistration,extensionFilterManager,exceptionHandler));
  Request request=mock(Request.class);
  ChallengeResponse challengeResponse=new ChallengeResponse(ChallengeScheme.HTTP_BASIC);
  challengeResponse.setRawValue(""String_Node_Str"");
  given(request.getChallengeResponse()).willReturn(challengeResponse);
  given(endpoint.getRequest()).willReturn(request);
  AccessToken accessToken=mock(AccessToken.class);
  given(accessToken.getClientId()).willReturn(""String_Node_Str"");
  given(accessToken.getResourceOwnerId()).willReturn(""String_Node_Str"");
  response=mock(Response.class);
  given(endpoint.getResponse()).willReturn(response);
  OAuth2Request oAuth2Request=mock(OAuth2Request.class);
  given(requestFactory.create(Matchers.<Request>anyObject())).willReturn(oAuth2Request);
  given(oAuth2Request.getToken(AccessToken.class)).willReturn(accessToken);
}","@BeforeMethod @SuppressWarnings(""String_Node_Str"") public void setup() throws ServerException, InvalidGrantException, NotFoundException {
  store=mock(ResourceSetStore.class);
  validator=mock(ResourceSetDescriptionValidator.class);
  OAuth2RequestFactory<Request> requestFactory=mock(OAuth2RequestFactory.class);
  Set<ResourceSetRegistrationListener> listeners=new HashSet<ResourceSetRegistrationListener>();
  listener=mock(ResourceSetRegistrationListener.class);
  listeners.add(listener);
  labelRegistration=mock(ResourceSetLabelRegistration.class);
  ExtensionFilterManager extensionFilterManager=mock(ExtensionFilterManager.class);
  resourceRegistrationFilter=mock(ResourceRegistrationFilter.class);
  given(extensionFilterManager.getFilters(ResourceRegistrationFilter.class)).willReturn(Collections.singletonList(resourceRegistrationFilter));
  OAuth2ProviderSettingsFactory providerSettingsFactory=mock(OAuth2ProviderSettingsFactory.class);
  OAuth2ProviderSettings providerSettings=mock(OAuth2ProviderSettings.class);
  given(providerSettingsFactory.get(Matchers.<OAuth2Request>anyObject())).willReturn(providerSettings);
  given(providerSettings.getResourceSetStore()).willReturn(store);
  ExceptionHandler exceptionHandler=mock(ExceptionHandler.class);
  UmaLabelsStore umaLabelsStore=mock(UmaLabelsStore.class);
  endpoint=spy(new ResourceSetRegistrationEndpoint(providerSettingsFactory,validator,requestFactory,listeners,labelRegistration,extensionFilterManager,exceptionHandler,umaLabelsStore));
  Request request=mock(Request.class);
  ChallengeResponse challengeResponse=new ChallengeResponse(ChallengeScheme.HTTP_BASIC);
  challengeResponse.setRawValue(""String_Node_Str"");
  given(request.getChallengeResponse()).willReturn(challengeResponse);
  given(endpoint.getRequest()).willReturn(request);
  AccessToken accessToken=mock(AccessToken.class);
  given(accessToken.getClientId()).willReturn(""String_Node_Str"");
  given(accessToken.getResourceOwnerId()).willReturn(""String_Node_Str"");
  response=mock(Response.class);
  given(endpoint.getResponse()).willReturn(response);
  OAuth2Request oAuth2Request=mock(OAuth2Request.class);
  given(requestFactory.create(Matchers.<Request>anyObject())).willReturn(oAuth2Request);
  given(oAuth2Request.getToken(AccessToken.class)).willReturn(accessToken);
}"
79680,"/** 
 * Gets and processes the Single <code>LogoutResponse</code> from IDP, destroys the local session, checks response's issuer and inResponseTo.
 * @param request the HttpServletRequest.
 * @param response the HttpServletResponse.
 * @param samlResponse <code>LogoutResponse</code> in theXML string format.
 * @param relayState the target URL on successful<code>LogoutResponse</code>.
 * @throws SAML2Exception if error processing<code>LogoutResponse</code>.
 * @throws SessionException if error processing<code>LogoutResponse</code>.
 */
public static Map<String,String> processLogoutResponse(HttpServletRequest request,HttpServletResponse response,String samlResponse,String relayState) throws SAML2Exception, SessionException {
  String method=""String_Node_Str"";
  if (debug.messageEnabled()) {
    debug.message(method + ""String_Node_Str"" + samlResponse);
    debug.message(method + ""String_Node_Str"" + relayState);
  }
  String rmethod=request.getMethod();
  String binding=SAML2Constants.HTTP_REDIRECT;
  if (rmethod.equals(""String_Node_Str"")) {
    binding=SAML2Constants.HTTP_POST;
  }
  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());
  if ((SPCache.isFedlet) && ((metaAlias == null) || (metaAlias.length() == 0))) {
    List spMetaAliases=sm.getAllHostedServiceProviderMetaAliases(""String_Node_Str"");
    if ((spMetaAliases != null) && !spMetaAliases.isEmpty()) {
      metaAlias=(String)spMetaAliases.get(0);
    }
  }
  if ((metaAlias == null) || (metaAlias.length() == 0)) {
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));
  String spEntityID=sm.getEntityByMetaAlias(metaAlias);
  if (!SAML2Utils.isSPProfileBindingSupported(realm,spEntityID,SAML2Constants.SLO_SERVICE,binding)) {
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  SAML2Utils.validateRelayStateURL(realm,spEntityID,relayState,SAML2Constants.SP_ROLE);
  LogoutResponse logoutRes=null;
  if (rmethod.equals(""String_Node_Str"")) {
    logoutRes=LogoutUtil.getLogoutResponseFromPost(samlResponse,response);
  }
 else   if (rmethod.equals(""String_Node_Str"")) {
    String decodedStr=SAML2Utils.decodeFromRedirect(samlResponse);
    if (decodedStr == null) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
    logoutRes=ProtocolFactory.getInstance().createLogoutResponse(decodedStr);
  }
  if (logoutRes == null) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"");
    }
    return null;
  }
  String idpEntityID=logoutRes.getIssuer().getValue();
  Issuer resIssuer=logoutRes.getIssuer();
  String inResponseTo=logoutRes.getInResponseTo();
  LogoutRequest logoutReq=(LogoutRequest)SPCache.logoutRequestIDHash.remove(inResponseTo);
  if (logoutReq == null && SAML2FailoverUtils.isSAML2FailoverEnabled()) {
    try {
      logoutReq=(LogoutRequest)SAML2FailoverUtils.retrieveSAML2Token(inResponseTo);
    }
 catch (    SAML2TokenRepositoryException e) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
  }
 else {
    logoutReq=(LogoutRequest)SAML2Store.getTokenFromStore(inResponseTo);
  }
  String userId=null;
  if (!SPCache.isFedlet) {
    userId=preSingleLogoutProcess(spEntityID,realm,request,response,null,logoutReq,logoutRes,binding);
  }
  SAML2Utils.verifyResponseIssuer(realm,spEntityID,resIssuer,inResponseTo);
  boolean needToVerify=SAML2Utils.getWantLogoutResponseSigned(realm,spEntityID,SAML2Constants.SP_ROLE);
  if (debug.messageEnabled()) {
    debug.message(method + ""String_Node_Str"" + metaAlias);
    debug.message(method + ""String_Node_Str"" + realm);
    debug.message(method + ""String_Node_Str"" + idpEntityID);
    debug.message(method + ""String_Node_Str"" + spEntityID);
  }
  Map<String,String> infoMap=new HashMap<String,String>();
  infoMap.put(""String_Node_Str"",spEntityID);
  infoMap.put(SAML2Constants.REALM,realm);
  if (needToVerify) {
    boolean valid=false;
    if (rmethod.equals(""String_Node_Str"")) {
      String queryString=request.getQueryString();
      valid=SAML2Utils.verifyQueryString(queryString,realm,SAML2Constants.SP_ROLE,idpEntityID);
    }
 else {
      valid=LogoutUtil.verifySLOResponse(logoutRes,realm,idpEntityID,spEntityID,SAML2Constants.SP_ROLE);
    }
    if (!valid) {
      debug.error(""String_Node_Str"" + ""String_Node_Str"");
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
    SPSSODescriptorElement spsso=sm.getSPSSODescriptor(realm,spEntityID);
    String loc=getSLOResponseLocationOrLocation(spsso,binding);
    if (!SAML2Utils.verifyDestination(logoutRes.getDestination(),loc)) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
  }
  if (inResponseTo == null || inResponseTo.length() == 0) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"");
    }
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  if (logoutReq != null) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"");
    }
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  infoMap.put(""String_Node_Str"",inResponseTo);
  infoMap.put(SAML2Constants.RELAY_STATE,relayState);
  try {
    Object session=sessionProvider.getSession(request);
    if ((session != null) && sessionProvider.isValid(session)) {
      sessionProvider.invalidateSession(session,request,response);
    }
  }
 catch (  SessionException se) {
    debug.message(""String_Node_Str"" + se.getMessage());
  }
  if (!SPCache.isFedlet) {
    if (isSuccess(logoutRes)) {
      postSingleLogoutSuccess(spEntityID,realm,request,response,userId,logoutReq,logoutRes,binding);
    }
 else {
      throw new SAML2Exception(SAML2Utils.BUNDLE_NAME,""String_Node_Str"",null);
    }
  }
 else {
    FedletAdapter fedletAdapter=SAML2Utils.getFedletAdapterClass(spEntityID,realm);
    if (fedletAdapter != null) {
      if (isSuccess(logoutRes)) {
        fedletAdapter.onFedletSLOSuccess(request,response,logoutReq,logoutRes,spEntityID,idpEntityID,binding);
      }
 else {
        fedletAdapter.onFedletSLOFailure(request,response,logoutReq,logoutRes,spEntityID,idpEntityID,binding);
        throw new SAML2Exception(SAML2Utils.BUNDLE_NAME,""String_Node_Str"",null);
      }
    }
  }
  return infoMap;
}","/** 
 * Gets and processes the Single <code>LogoutResponse</code> from IDP, destroys the local session, checks response's issuer and inResponseTo.
 * @param request the HttpServletRequest.
 * @param response the HttpServletResponse.
 * @param samlResponse <code>LogoutResponse</code> in theXML string format.
 * @param relayState the target URL on successful<code>LogoutResponse</code>.
 * @throws SAML2Exception if error processing<code>LogoutResponse</code>.
 * @throws SessionException if error processing<code>LogoutResponse</code>.
 */
public static Map<String,String> processLogoutResponse(HttpServletRequest request,HttpServletResponse response,String samlResponse,String relayState) throws SAML2Exception, SessionException {
  String method=""String_Node_Str"";
  if (debug.messageEnabled()) {
    debug.message(method + ""String_Node_Str"" + samlResponse);
    debug.message(method + ""String_Node_Str"" + relayState);
  }
  String rmethod=request.getMethod();
  String binding=SAML2Constants.HTTP_REDIRECT;
  if (rmethod.equals(""String_Node_Str"")) {
    binding=SAML2Constants.HTTP_POST;
  }
  String metaAlias=SAML2MetaUtils.getMetaAliasByUri(request.getRequestURI());
  if ((SPCache.isFedlet) && ((metaAlias == null) || (metaAlias.length() == 0))) {
    List spMetaAliases=sm.getAllHostedServiceProviderMetaAliases(""String_Node_Str"");
    if ((spMetaAliases != null) && !spMetaAliases.isEmpty()) {
      metaAlias=(String)spMetaAliases.get(0);
    }
  }
  if ((metaAlias == null) || (metaAlias.length() == 0)) {
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));
  String spEntityID=sm.getEntityByMetaAlias(metaAlias);
  if (!SAML2Utils.isSPProfileBindingSupported(realm,spEntityID,SAML2Constants.SLO_SERVICE,binding)) {
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  SAML2Utils.validateRelayStateURL(realm,spEntityID,relayState,SAML2Constants.SP_ROLE);
  LogoutResponse logoutRes=null;
  if (rmethod.equals(""String_Node_Str"")) {
    logoutRes=LogoutUtil.getLogoutResponseFromPost(samlResponse,response);
  }
 else   if (rmethod.equals(""String_Node_Str"")) {
    String decodedStr=SAML2Utils.decodeFromRedirect(samlResponse);
    if (decodedStr == null) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
    logoutRes=ProtocolFactory.getInstance().createLogoutResponse(decodedStr);
  }
  if (logoutRes == null) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"");
    }
    return null;
  }
  String idpEntityID=logoutRes.getIssuer().getValue();
  Issuer resIssuer=logoutRes.getIssuer();
  String inResponseTo=logoutRes.getInResponseTo();
  LogoutRequest logoutReq=(LogoutRequest)SPCache.logoutRequestIDHash.remove(inResponseTo);
  if (logoutReq == null) {
    logoutReq=(LogoutRequest)SAML2Store.getTokenFromStore(inResponseTo);
  }
  if (logoutReq == null && SAML2FailoverUtils.isSAML2FailoverEnabled()) {
    try {
      logoutReq=(LogoutRequest)SAML2FailoverUtils.retrieveSAML2Token(inResponseTo);
    }
 catch (    SAML2TokenRepositoryException e) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
  }
  String userId=null;
  if (!SPCache.isFedlet) {
    userId=preSingleLogoutProcess(spEntityID,realm,request,response,null,logoutReq,logoutRes,binding);
  }
  SAML2Utils.verifyResponseIssuer(realm,spEntityID,resIssuer,inResponseTo);
  boolean needToVerify=SAML2Utils.getWantLogoutResponseSigned(realm,spEntityID,SAML2Constants.SP_ROLE);
  if (debug.messageEnabled()) {
    debug.message(method + ""String_Node_Str"" + metaAlias);
    debug.message(method + ""String_Node_Str"" + realm);
    debug.message(method + ""String_Node_Str"" + idpEntityID);
    debug.message(method + ""String_Node_Str"" + spEntityID);
  }
  Map<String,String> infoMap=new HashMap<String,String>();
  infoMap.put(""String_Node_Str"",spEntityID);
  infoMap.put(SAML2Constants.REALM,realm);
  if (needToVerify) {
    boolean valid=false;
    if (rmethod.equals(""String_Node_Str"")) {
      String queryString=request.getQueryString();
      valid=SAML2Utils.verifyQueryString(queryString,realm,SAML2Constants.SP_ROLE,idpEntityID);
    }
 else {
      valid=LogoutUtil.verifySLOResponse(logoutRes,realm,idpEntityID,spEntityID,SAML2Constants.SP_ROLE);
    }
    if (!valid) {
      debug.error(""String_Node_Str"" + ""String_Node_Str"");
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
    SPSSODescriptorElement spsso=sm.getSPSSODescriptor(realm,spEntityID);
    String loc=getSLOResponseLocationOrLocation(spsso,binding);
    if (!SAML2Utils.verifyDestination(logoutRes.getDestination(),loc)) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
  }
  if (inResponseTo == null || inResponseTo.length() == 0) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"");
    }
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  if (logoutReq != null) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + ""String_Node_Str"");
    }
    throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
  }
  infoMap.put(""String_Node_Str"",inResponseTo);
  infoMap.put(SAML2Constants.RELAY_STATE,relayState);
  try {
    Object session=sessionProvider.getSession(request);
    if ((session != null) && sessionProvider.isValid(session)) {
      sessionProvider.invalidateSession(session,request,response);
    }
  }
 catch (  SessionException se) {
    debug.message(""String_Node_Str"" + se.getMessage());
  }
  if (!SPCache.isFedlet) {
    if (isSuccess(logoutRes)) {
      postSingleLogoutSuccess(spEntityID,realm,request,response,userId,logoutReq,logoutRes,binding);
    }
 else {
      throw new SAML2Exception(SAML2Utils.BUNDLE_NAME,""String_Node_Str"",null);
    }
  }
 else {
    FedletAdapter fedletAdapter=SAML2Utils.getFedletAdapterClass(spEntityID,realm);
    if (fedletAdapter != null) {
      if (isSuccess(logoutRes)) {
        fedletAdapter.onFedletSLOSuccess(request,response,logoutReq,logoutRes,spEntityID,idpEntityID,binding);
      }
 else {
        fedletAdapter.onFedletSLOFailure(request,response,logoutReq,logoutRes,spEntityID,idpEntityID,binding);
        throw new SAML2Exception(SAML2Utils.BUNDLE_NAME,""String_Node_Str"",null);
      }
    }
  }
  return infoMap;
}"
79681,"/** 
 * Lets through any request which is coming from a verifiable administrator.
 */
protected Promise<AuthorizationResult,ResourceException> authorize(Context context){
  try {
    String userId=getUserId(context);
    if (isSuperUser(userId)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId + ""String_Node_Str"");
      }
      return Promises.newResultPromise(AuthorizationResult.accessPermitted());
    }
 else {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId);
      }
      return Promises.newResultPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
    }
  }
 catch (  ResourceException e) {
    return e.asPromise();
  }
}","/** 
 * Lets through any request which is coming from a verifiable administrator.
 */
protected Promise<AuthorizationResult,ResourceException> authorize(Context context){
  try {
    String userId=getUserId(context);
    if (isSuperUser(userId)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId + ""String_Node_Str"");
      }
      return Promises.newResultPromise(AuthorizationResult.accessPermitted());
    }
 else {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId);
      }
      return Promises.newResultPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
    }
  }
 catch (  ForbiddenException e) {
    return Promises.newResultPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
  }
catch (  ResourceException re) {
    return re.asPromise();
  }
}"
79682,"/** 
 * Given the calling context and the privilege definition attempts to authorise the calling subject.
 * @param context the server context
 * @param definition the privilege definition
 * @return the authorisation result
 */
private Promise<AuthorizationResult,ResourceException> evaluate(final Context context,final PrivilegeDefinition definition){
  final String realm=(context.containsContext(RealmContext.class)) ? context.asContext(RealmContext.class).getResolvedRealm() : ""String_Node_Str"";
  final SubjectContext subjectContext=context.asContext(SubjectContext.class);
  final UriRouterContext routerContext=context.asContext(UriRouterContext.class);
  final Set<String> actions=transformSet(definition.getActions(),ACTION_TO_STRING_MAPPER);
  try {
    final DelegationPermission permissionRequest=permissionFactory.newInstance(realm,REST,VERSION,routerContext.getMatchedUri(),definition.getCommonVerb(),actions,Collections.<String,String>emptyMap());
    if (evaluator.isAllowed(subjectContext.getCallerSSOToken(),permissionRequest,Collections.<String,Set<String>>emptyMap())) {
      return Promises.newResultPromise(AuthorizationResult.accessPermitted());
    }
  }
 catch (  DelegationException dE) {
    return new InternalServerErrorException(""String_Node_Str"",dE).asPromise();
  }
catch (  SSOException ssoE) {
    return new InternalServerErrorException(""String_Node_Str"",ssoE).asPromise();
  }
  return Promises.newResultPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
}","/** 
 * Given the calling context and the privilege definition attempts to authorise the calling subject.
 * @param context the server context
 * @param definition the privilege definition
 * @return the authorisation result
 */
private Promise<AuthorizationResult,ResourceException> evaluate(final Context context,final PrivilegeDefinition definition){
  final String realm=(context.containsContext(RealmContext.class)) ? context.asContext(RealmContext.class).getResolvedRealm() : ""String_Node_Str"";
  final SubjectContext subjectContext=context.asContext(SubjectContext.class);
  final UriRouterContext routerContext=context.asContext(UriRouterContext.class);
  final Set<String> actions=transformSet(definition.getActions(),ACTION_TO_STRING_MAPPER);
  try {
    final DelegationPermission permissionRequest=permissionFactory.newInstance(realm,REST,VERSION,routerContext.getMatchedUri(),definition.getCommonVerb(),actions,Collections.<String,String>emptyMap());
    if (evaluator.isAllowed(subjectContext.getCallerSSOToken(),permissionRequest,Collections.<String,Set<String>>emptyMap())) {
      return Promises.newResultPromise(AuthorizationResult.accessPermitted());
    }
  }
 catch (  DelegationException dE) {
    return new InternalServerErrorException(""String_Node_Str"",dE).asPromise();
  }
catch (  SSOException ssoE) {
    return Promises.newResultPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
  }
  return Promises.newResultPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
}"
79683,"@Test(expectedExceptions=ResourceException.class) public void shouldErrorInvalidContext() throws SSOException, ResourceException, InterruptedException {
  SSOTokenContext mockSSOTokenContext=mock(SSOTokenContext.class);
  SSOToken mockSSOToken=mock(SSOToken.class);
  given(mockSSOTokenContext.getCallerSSOToken()).willReturn(mockSSOToken);
  given(mockSSOToken.getProperty(Constants.UNIVERSAL_IDENTIFIER)).willThrow(new SSOException(""String_Node_Str""));
  Promise<AuthorizationResult,ResourceException> result=testModule.authorize(mockSSOTokenContext);
  result.getOrThrow();
}","@Test public void shouldErrorInvalidContext() throws SSOException, ResourceException, InterruptedException, ExecutionException {
  SSOTokenContext mockSSOTokenContext=mock(SSOTokenContext.class);
  SSOToken mockSSOToken=mock(SSOToken.class);
  given(mockSSOTokenContext.getCallerSSOToken()).willReturn(mockSSOToken);
  given(mockSSOToken.getProperty(Constants.UNIVERSAL_IDENTIFIER)).willThrow(new SSOException(""String_Node_Str""));
  Promise<AuthorizationResult,ResourceException> result=testModule.authorize(mockSSOTokenContext);
  assertFalse(result.get().isAuthorized());
}"
79684,"private boolean auditAuthenticationEvent(String description,String transactionId,String authentication,String realmName,long time,Map<String,String> contexts,List<?> entries){
  boolean couldHandleEvent=true;
  AMAuthenticationAuditEventBuilder builder=authenticationAuditor.authenticationEvent();
  builder.transactionId(transactionId).authentication(authentication).timestamp(time).component(AuditConstants.Component.AUTHENTICATION);
  if (StringUtils.isNotEmpty(description)) {
    builder.eventName(description);
  }
  if (StringUtils.isNotEmpty(realmName)) {
    builder.realm(realmName);
  }
  if (contexts != null && !contexts.isEmpty()) {
    builder.contexts(contexts);
  }
  if (entries != null && !entries.isEmpty()) {
    builder.entries(entries);
  }
  try {
    authenticationAuditor.publish(builder.toEvent());
  }
 catch (  AuditException e) {
    couldHandleEvent=false;
  }
  return couldHandleEvent;
}","private boolean auditAuthenticationEvent(String description,String transactionId,String authentication,String realmName,long time,Map<String,String> contexts,List<Entry> entries){
  boolean couldHandleEvent=true;
  AMAuthenticationAuditEventBuilder builder=authenticationAuditor.authenticationEvent();
  builder.transactionId(transactionId).authentication(authentication).timestamp(time).component(AuditConstants.Component.AUTHENTICATION);
  if (StringUtils.isNotEmpty(description)) {
    builder.eventName(description);
  }
  if (StringUtils.isNotEmpty(realmName)) {
    builder.realm(realmName);
  }
  if (contexts != null && !contexts.isEmpty()) {
    builder.contexts(contexts);
  }
  if (entries != null && !entries.isEmpty()) {
    List<Map<String,Object>> list=new ArrayList<>();
    for (    Entry entry : entries) {
      Map<String,Object> map=new HashMap<>();
      map.put(""String_Node_Str"",entry.getModuleId());
      map.put(""String_Node_Str"",entry.getResult());
      map.put(""String_Node_Str"",entry.getInfo());
      list.add(map);
    }
    builder.entries(list);
  }
  try {
    authenticationAuditor.publish(builder.toEvent());
  }
 catch (  AuditException e) {
    couldHandleEvent=false;
  }
  return couldHandleEvent;
}"
79685,"/** 
 * Audit an event generated from a legacy context. Depending upon the configuration the user has chosen, the event may be audited, or silently ignored. Note that if an event is for a topic which is not being audited, true may still be returned, which would indicate that the event was handled successfully (not sent anywhere, respecting the configuration) and there were no errors. A return value of true does not mean that the event was actually logged, only that no error occurred in the attempt to log it. To find out if a specific topic is being audited, use  {@link LegacyAuthenticationEventAuditor#isAuditing(java.lang.String,java.lang.String)}.
 * @param eventName The description of the event which occurred (see {@code AuthenticationLogMessageIDs.xml}'name' attribute of each logmessage element.
 * @param eventDescription The description of the event which occurred (see {@code AuthenticationLogMessageIDs.xml}'description' attribute of each logmessage element. Cannot be null.
 * @param transactionId The transaction id for the audit event. Cannot be null.
 * @param authentication The authentication details for the audit event. Cannot be null.
 * @param realmName The realm name for the audit event. May be null.
 * @param time The time the audit event occurred. May be null.
 * @param contexts Any contexts for the audit event. May be null.
 * @param entries Any extra information for the audit event. May be null.
 * @return true if the event was handled, false if there was some sort of problem.
 */
public boolean audit(String eventName,String eventDescription,String transactionId,String authentication,String realmName,long time,Map<String,String> contexts,List<?> entries){
  Reject.ifNull(transactionId,""String_Node_Str"");
  Reject.ifNull(authentication,""String_Node_Str"");
  Reject.ifNull(eventDescription,""String_Node_Str"");
  boolean isActivityEvent=false;
  boolean isAuthenticationEvent=true;
  if (StringUtils.isNotEmpty(eventName)) {
    if (""String_Node_Str"".equals(eventName)) {
      isActivityEvent=true;
      isAuthenticationEvent=false;
    }
  }
  if (isAuthenticationEvent) {
    return auditAuthenticationEvent(eventDescription,transactionId,authentication,realmName,time,contexts,entries);
  }
  if (isActivityEvent) {
    return auditActivityEvent(eventDescription,transactionId,authentication,realmName,time,contexts);
  }
  return false;
}","/** 
 * Audit an event generated from a legacy context. Depending upon the configuration the user has chosen, the event may be audited, or silently ignored. Note that if an event is for a topic which is not being audited, true may still be returned, which would indicate that the event was handled successfully (not sent anywhere, respecting the configuration) and there were no errors. A return value of true does not mean that the event was actually logged, only that no error occurred in the attempt to log it. To find out if a specific topic is being audited, use  {@link LegacyAuthenticationEventAuditor#isAuditing(java.lang.String,java.lang.String)}.
 * @param eventName The description of the event which occurred (see {@code AuthenticationLogMessageIDs.xml}'name' attribute of each logmessage element.
 * @param eventDescription The description of the event which occurred (see {@code AuthenticationLogMessageIDs.xml}'description' attribute of each logmessage element. Cannot be null.
 * @param transactionId The transaction id for the audit event. Cannot be null.
 * @param authentication The authentication details for the audit event. Cannot be null.
 * @param realmName The realm name for the audit event. May be null.
 * @param time The time the audit event occurred. May be null.
 * @param contexts Any contexts for the audit event. May be null.
 * @param entries Any extra information for the audit event. May be null.
 * @return true if the event was handled, false if there was some sort of problem.
 */
public boolean audit(String eventName,String eventDescription,String transactionId,String authentication,String realmName,long time,Map<String,String> contexts,List<Entry> entries){
  Reject.ifNull(transactionId,""String_Node_Str"");
  Reject.ifNull(authentication,""String_Node_Str"");
  Reject.ifNull(eventDescription,""String_Node_Str"");
  boolean isActivityEvent=false;
  boolean isAuthenticationEvent=true;
  if (StringUtils.isNotEmpty(eventName)) {
    if (""String_Node_Str"".equals(eventName)) {
      isActivityEvent=true;
      isAuthenticationEvent=false;
    }
  }
  if (isAuthenticationEvent) {
    return auditAuthenticationEvent(eventDescription,transactionId,authentication,realmName,time,contexts,entries);
  }
  if (isActivityEvent) {
    return auditActivityEvent(eventDescription,transactionId,authentication,realmName,time,contexts);
  }
  return false;
}"
79686,"/** 
 * Writes a log record.
 * @param s Array of data information for the log record.
 * @param type Type of log either <code>LOG_ERROR</code> or<code>LOG_ACCESS</code>.
 * @param messageName Message ID for the log record.
 * @param ssoProperties Single Sign On Properties to be written to thelog record. If this is <code>null</code>, properties will be retrieved from administrator Single Sign On Token.
 */
public void logIt(String[] s,int type,String messageName,Hashtable ssoProperties){
  if (logStatus && (s != null)) {
    try {
      LogMessageProviderBase provider=(LogMessageProviderBase)MessageProviderFactory.getProvider(""String_Node_Str"");
      if (auditor == null) {
        auditor=InjectorHolder.getInstance(LegacyAuthenticationEventAuditor.class);
      }
      CoreWrapper cw=new CoreWrapper();
      String orgName=(String)ssoProperties.get(""String_Node_Str"");
      String realmName=cw.convertOrgNameToRealmName(orgName);
      if (auditor.isAuditing(realmName)) {
        if (!auditor.isLogoutEvent(messageName)) {
          String userName=(String)ssoProperties.get(""String_Node_Str"");
          String description=provider.getAllHashMessageIDs().get(messageName).getDescription();
          String contextID=(String)ssoProperties.get(""String_Node_Str"");
          String LoginIDSid=(String)ssoProperties.get(""String_Node_Str"");
          long time=Calendar.getInstance().getTimeInMillis();
          Map<String,String> contexts=null;
          if (StringUtils.isNotEmpty(contextID)) {
            contexts=new HashMap<>();
            contexts.put(AUTH.toString(),contextID);
          }
          if (StringUtils.isNotEmpty(LoginIDSid)) {
            InternalSession session=AuthD.getSession(new SessionID(LoginIDSid));
            String sessionContext=null;
            if (session != null) {
              sessionContext=session.getProperty(Constants.AM_CTX_ID);
              contexts.put(SESSION.toString(),sessionContext);
            }
          }
          AMIdentity identity=cw.getIdentity(userName,realmName);
          String authentication=null;
          if (identity != null) {
            authentication=identity.getUniversalId();
          }
          String moduleName=(String)ssoProperties.get(""String_Node_Str"");
          List<?> entries=null;
          if (StringUtils.isNotEmpty(moduleName)) {
            Map<String,String> info=new HashMap<>();
            String ip=(String)ssoProperties.get(""String_Node_Str"");
            if (StringUtils.isNotEmpty(ip)) {
              info=Collections.singletonMap(""String_Node_Str"",ip);
            }
            Map<String,Object> map=new HashMap<>();
            map.put(""String_Node_Str"",moduleName);
            map.put(""String_Node_Str"",description);
            description=AM_LOGIN_CHAIN_COMPLETED.toString();
            map.put(""String_Node_Str"",info);
            entries=Collections.singletonList(map);
          }
          auditor.audit(messageName,description,AuditRequestContext.getTransactionIdValue(),authentication,realmName,time,contexts,entries);
        }
      }
      com.sun.identity.log.LogRecord lr=null;
      SSOToken ssot=AccessController.doPrivileged(AdminTokenAction.getInstance());
      if (ssoProperties == null) {
        lr=provider.createLogRecord(messageName,s,ssot);
      }
 else {
        lr=provider.createLogRecord(messageName,s,ssoProperties);
      }
      com.sun.identity.log.Logger logger;
switch (type) {
case LOG_ACCESS:
        logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
      logger.log(lr,ssot);
    break;
case LOG_ERROR:
  logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
default :
logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
}
}
 catch (IOException ex) {
ex.printStackTrace();
debug.error(""String_Node_Str"" + ex.getMessage());
}
}
}","/** 
 * Writes a log record.
 * @param s Array of data information for the log record.
 * @param type Type of log either <code>LOG_ERROR</code> or<code>LOG_ACCESS</code>.
 * @param messageName Message ID for the log record.
 * @param ssoProperties Single Sign On Properties to be written to thelog record. If this is <code>null</code>, properties will be retrieved from administrator Single Sign On Token.
 */
public void logIt(String[] s,int type,String messageName,Hashtable ssoProperties){
  if (logStatus && (s != null)) {
    try {
      LogMessageProviderBase provider=(LogMessageProviderBase)MessageProviderFactory.getProvider(""String_Node_Str"");
      if (auditor == null) {
        auditor=InjectorHolder.getInstance(LegacyAuthenticationEventAuditor.class);
      }
      CoreWrapper cw=new CoreWrapper();
      String orgName=(String)ssoProperties.get(""String_Node_Str"");
      String realmName=cw.convertOrgNameToRealmName(orgName);
      if (auditor.isAuditing(realmName)) {
        if (!auditor.isLogoutEvent(messageName)) {
          String userName=(String)ssoProperties.get(""String_Node_Str"");
          String description=provider.getAllHashMessageIDs().get(messageName).getDescription();
          String contextID=(String)ssoProperties.get(""String_Node_Str"");
          String LoginIDSid=(String)ssoProperties.get(""String_Node_Str"");
          long time=Calendar.getInstance().getTimeInMillis();
          Map<String,String> contexts=null;
          if (StringUtils.isNotEmpty(contextID)) {
            contexts=new HashMap<>();
            contexts.put(AUTH.toString(),contextID);
          }
          if (StringUtils.isNotEmpty(LoginIDSid)) {
            InternalSession session=AuthD.getSession(new SessionID(LoginIDSid));
            String sessionContext=null;
            if (session != null) {
              sessionContext=session.getProperty(Constants.AM_CTX_ID);
              contexts.put(SESSION.toString(),sessionContext);
            }
          }
          AMIdentity identity=cw.getIdentity(userName,realmName);
          String authentication=null;
          if (identity != null) {
            authentication=identity.getUniversalId();
          }
          String moduleName=(String)ssoProperties.get(""String_Node_Str"");
          List<Entry> entries=null;
          if (StringUtils.isNotEmpty(moduleName)) {
            Map<String,String> info=null;
            String ip=(String)ssoProperties.get(""String_Node_Str"");
            if (StringUtils.isNotEmpty(ip)) {
              info=Collections.singletonMap(""String_Node_Str"",ip);
            }
            Entry entry=new Entry();
            entry.setModuleId(moduleName);
            entry.setResult(description);
            description=AM_LOGIN_CHAIN_COMPLETED.toString();
            if (info != null) {
              entry.setInfo(info);
            }
            entries=Collections.singletonList(entry);
          }
          auditor.audit(messageName,description,AuditRequestContext.getTransactionIdValue(),authentication,realmName,time,contexts,entries);
        }
      }
      com.sun.identity.log.LogRecord lr=null;
      SSOToken ssot=AccessController.doPrivileged(AdminTokenAction.getInstance());
      if (ssoProperties == null) {
        lr=provider.createLogRecord(messageName,s,ssot);
      }
 else {
        lr=provider.createLogRecord(messageName,s,ssoProperties);
      }
      com.sun.identity.log.Logger logger;
switch (type) {
case LOG_ACCESS:
        logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
      logger.log(lr,ssot);
    break;
case LOG_ERROR:
  logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
default :
logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
}
}
 catch (IOException ex) {
ex.printStackTrace();
debug.error(""String_Node_Str"" + ex.getMessage());
}
}
}"
79687,"/** 
 * Log Logout status 
 */
public void logLogout(SSOToken ssot){
  try {
    String logLogout=bundle.getString(""String_Node_Str"");
    List<String> dataList=new ArrayList<String>();
    dataList.add(logLogout);
    StringBuilder messageId=new StringBuilder();
    messageId.append(""String_Node_Str"");
    String indexType=ssot.getProperty(ISAuthConstants.INDEX_TYPE);
    if (indexType != null) {
      messageId.append(""String_Node_Str"").append(indexType.toUpperCase());
      dataList.add(indexType);
      if (indexType.equals(AuthContext.IndexType.USER.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.PRINCIPAL));
      }
 else       if (indexType.equals(AuthContext.IndexType.ROLE.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.ROLE));
      }
 else       if (indexType.equals(AuthContext.IndexType.SERVICE.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.SERVICE));
      }
 else       if (indexType.equals(AuthContext.IndexType.LEVEL.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.AUTH_LEVEL));
      }
 else       if (indexType.equals(AuthContext.IndexType.MODULE_INSTANCE.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.AUTH_TYPE));
      }
    }
    Hashtable<String,String> props=new Hashtable<String,String>();
    String client=ssot.getProperty(ISAuthConstants.HOST);
    if (client != null) {
      props.put(LogConstants.IP_ADDR,client);
    }
    String userDN=ssot.getProperty(ISAuthConstants.PRINCIPAL);
    if (userDN != null) {
      props.put(LogConstants.LOGIN_ID,userDN);
    }
    String orgDN=ssot.getProperty(ISAuthConstants.ORGANIZATION);
    if (orgDN != null) {
      props.put(LogConstants.DOMAIN,orgDN);
    }
    String authMethName=ssot.getProperty(ISAuthConstants.AUTH_TYPE);
    if (authMethName != null) {
      props.put(LogConstants.MODULE_NAME,authMethName);
    }
    String contextId=null;
    contextId=ssot.getProperty(Constants.AM_CTX_ID);
    if (contextId != null) {
      props.put(LogConstants.CONTEXT_ID,contextId);
    }
    props.put(LogConstants.LOGIN_ID_SID,ssot.getTokenID().toString());
    String[] data=dataList.toArray(new String[dataList.size()]);
    if (auditor == null) {
      auditor=InjectorHolder.getInstance(LegacyAuthenticationEventAuditor.class);
    }
    CoreWrapper cw=new CoreWrapper();
    String realmName=cw.convertOrgNameToRealmName(orgDN);
    if (auditor.isAuditing(realmName,AuditConstants.AUTHENTICATION_TOPIC)) {
      String messageName=messageId.toString();
      LogMessageProviderBase provider=null;
      if (logStatus) {
        try {
          provider=(LogMessageProviderBase)MessageProviderFactory.getProvider(""String_Node_Str"");
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      String description=""String_Node_Str"";
      if (provider != null) {
        description=provider.getAllHashMessageIDs().get(messageName).getDescription();
      }
      long time=Calendar.getInstance().getTimeInMillis();
      Map<String,String> contexts=null;
      if (StringUtils.isNotEmpty(contextId)) {
        contexts=new HashMap<>();
        contexts.put(AuditConstants.Context.SESSION.toString(),contextId);
      }
      AMIdentity identity=cw.getIdentity(userDN,realmName);
      String authentication=null;
      if (identity != null) {
        authentication=identity.getUniversalId();
      }
      List<?> entries;
      Map<String,String> info=new HashMap<>();
      if (StringUtils.isNotEmpty(client)) {
        info=Collections.singletonMap(""String_Node_Str"",client);
      }
      Map<String,Object> map=new HashMap<>();
      map.put(""String_Node_Str"",authMethName);
      map.put(""String_Node_Str"",description);
      map.put(""String_Node_Str"",info);
      entries=Collections.singletonList(map);
      auditor.audit(messageName,AM_LOGOUT.toString(),AuditRequestContext.getTransactionIdValue(),authentication,realmName,time,contexts,entries);
    }
    this.logIt(data,LOG_ACCESS,messageId.toString(),props);
  }
 catch (  SSOException ssoExp) {
    debug.error(""String_Node_Str"",ssoExp);
  }
catch (  Exception e) {
    debug.error(""String_Node_Str"",e);
  }
}","/** 
 * Log Logout status 
 */
public void logLogout(SSOToken ssot){
  try {
    String logLogout=bundle.getString(""String_Node_Str"");
    List<String> dataList=new ArrayList<String>();
    dataList.add(logLogout);
    StringBuilder messageId=new StringBuilder();
    messageId.append(""String_Node_Str"");
    String indexType=ssot.getProperty(ISAuthConstants.INDEX_TYPE);
    if (indexType != null) {
      messageId.append(""String_Node_Str"").append(indexType.toUpperCase());
      dataList.add(indexType);
      if (indexType.equals(AuthContext.IndexType.USER.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.PRINCIPAL));
      }
 else       if (indexType.equals(AuthContext.IndexType.ROLE.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.ROLE));
      }
 else       if (indexType.equals(AuthContext.IndexType.SERVICE.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.SERVICE));
      }
 else       if (indexType.equals(AuthContext.IndexType.LEVEL.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.AUTH_LEVEL));
      }
 else       if (indexType.equals(AuthContext.IndexType.MODULE_INSTANCE.toString())) {
        dataList.add(ssot.getProperty(ISAuthConstants.AUTH_TYPE));
      }
    }
    Hashtable<String,String> props=new Hashtable<String,String>();
    String client=ssot.getProperty(ISAuthConstants.HOST);
    if (client != null) {
      props.put(LogConstants.IP_ADDR,client);
    }
    String userDN=ssot.getProperty(ISAuthConstants.PRINCIPAL);
    if (userDN != null) {
      props.put(LogConstants.LOGIN_ID,userDN);
    }
    String orgDN=ssot.getProperty(ISAuthConstants.ORGANIZATION);
    if (orgDN != null) {
      props.put(LogConstants.DOMAIN,orgDN);
    }
    String authMethName=ssot.getProperty(ISAuthConstants.AUTH_TYPE);
    if (authMethName != null) {
      props.put(LogConstants.MODULE_NAME,authMethName);
    }
    String contextId=null;
    contextId=ssot.getProperty(Constants.AM_CTX_ID);
    if (contextId != null) {
      props.put(LogConstants.CONTEXT_ID,contextId);
    }
    props.put(LogConstants.LOGIN_ID_SID,ssot.getTokenID().toString());
    String[] data=dataList.toArray(new String[dataList.size()]);
    if (auditor == null) {
      auditor=InjectorHolder.getInstance(LegacyAuthenticationEventAuditor.class);
    }
    CoreWrapper cw=new CoreWrapper();
    String realmName=cw.convertOrgNameToRealmName(orgDN);
    if (auditor.isAuditing(realmName,AuditConstants.AUTHENTICATION_TOPIC)) {
      String messageName=messageId.toString();
      LogMessageProviderBase provider=null;
      if (logStatus) {
        try {
          provider=(LogMessageProviderBase)MessageProviderFactory.getProvider(""String_Node_Str"");
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      String description=""String_Node_Str"";
      if (provider != null) {
        description=provider.getAllHashMessageIDs().get(messageName).getDescription();
      }
      long time=Calendar.getInstance().getTimeInMillis();
      Map<String,String> contexts=null;
      if (StringUtils.isNotEmpty(contextId)) {
        contexts=new HashMap<>();
        contexts.put(AuditConstants.Context.SESSION.toString(),contextId);
      }
      AMIdentity identity=cw.getIdentity(userDN,realmName);
      String authentication=null;
      if (identity != null) {
        authentication=identity.getUniversalId();
      }
      List<Entry> entries;
      Map<String,String> info=new HashMap<>();
      if (StringUtils.isNotEmpty(client)) {
        info=Collections.singletonMap(""String_Node_Str"",client);
      }
      Entry entry=new Entry();
      entry.setModuleId(authMethName);
      entry.setResult(description);
      entry.setInfo(info);
      entries=Collections.singletonList(entry);
      auditor.audit(messageName,AM_LOGOUT.toString(),AuditRequestContext.getTransactionIdValue(),authentication,realmName,time,contexts,entries);
    }
    this.logIt(data,LOG_ACCESS,messageId.toString(),props);
  }
 catch (  SSOException ssoExp) {
    debug.error(""String_Node_Str"",ssoExp);
  }
catch (  Exception e) {
    debug.error(""String_Node_Str"",e);
  }
}"
79688,"/** 
 * Set the result.
 * @param result The result.
 */
public void setResult(EventOutcome result){
  this.entry.put(RESULT_KEY,result);
}","/** 
 * Set the result.
 * @param result The result.
 */
public void setResult(AuthenticationAuditEventBuilder.Status result){
  this.entry.put(RESULT_KEY,result);
}"
79689,"/** 
 * Get the result.
 * @return The result.
 */
public EventOutcome getResult(){
  return (EventOutcome)this.entry.get(RESULT_KEY);
}","/** 
 * Get the result.
 * @return The result.
 */
public AuthenticationAuditEventBuilder.Status getResult(){
  return (AuthenticationAuditEventBuilder.Status)this.entry.get(RESULT_KEY);
}"
79690,"/** 
 * Writes a log record.
 * @param s Array of data information for the log record.
 * @param type Type of log either <code>LOG_ERROR</code> or<code>LOG_ACCESS</code>.
 * @param messageName Message ID for the log record.
 * @param ssoProperties Single Sign On Properties to be written to thelog record. If this is <code>null</code>, properties will be retrieved from administrator Single Sign On Token.
 */
public void logIt(String[] s,int type,String messageName,Hashtable ssoProperties){
  LogMessageProviderBase provider=null;
  if (logStatus && (s != null)) {
    try {
      provider=(LogMessageProviderBase)MessageProviderFactory.getProvider(""String_Node_Str"");
      com.sun.identity.log.LogRecord lr=null;
      SSOToken ssot=AccessController.doPrivileged(AdminTokenAction.getInstance());
      if (ssoProperties == null) {
        lr=provider.createLogRecord(messageName,s,ssot);
      }
 else {
        lr=provider.createLogRecord(messageName,s,ssoProperties);
      }
      com.sun.identity.log.Logger logger;
switch (type) {
case LOG_ACCESS:
        logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
      logger.log(lr,ssot);
    break;
case LOG_ERROR:
  logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
default :
logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
}
}
 catch (IOException ex) {
ex.printStackTrace();
debug.error(""String_Node_Str"" + ex.getMessage());
}
}
initializeAuditor();
String orgName=(String)ssoProperties.get(""String_Node_Str"");
String realmName=DNMapper.orgNameToRealmName(orgName);
boolean isAuditing=false;
if (isAuthenticationOnlyEvent(messageName)) {
if (auditor.isAuditing(realmName,AuditConstants.AUTHENTICATION_TOPIC)) {
isAuditing=true;
}
}
if (isActivityOnlyEvent(messageName)) {
if (auditor.isAuditing(realmName,AuditConstants.ACTIVITY_TOPIC)) {
isAuditing=true;
}
}
if (isAuditing) {
if (!auditor.isLogoutEvent(messageName)) {
String description=null;
if (provider != null) {
description=provider.getAllHashMessageIDs().get(messageName).getDescription();
}
String userName=(String)ssoProperties.get(""String_Node_Str"");
String contextID=(String)ssoProperties.get(LogConstants.CONTEXT_ID);
String LoginIDSid=(String)ssoProperties.get(LogConstants.LOGIN_ID_SID);
Set<String> trackingIds=null;
if (StringUtils.isNotEmpty(contextID)) {
trackingIds=new HashSet<>();
trackingIds.add(contextID);
}
if (StringUtils.isNotEmpty(LoginIDSid)) {
InternalSession session=AuthD.getSession(new SessionID(LoginIDSid));
String sessionContext;
if (session != null) {
if (trackingIds == null) {
trackingIds=new HashSet<>();
}
sessionContext=session.getProperty(Constants.AM_CTX_ID);
trackingIds.add(sessionContext);
}
}
AMIdentity identity=IdUtils.getIdentity(userName,realmName);
String authentication=null;
String principal;
if (identity != null) {
authentication=identity.getUniversalId();
if (contextID != null) {
principal=getPrincipalFromUniversalId(identity.getName());
}
 else {
principal=identity.getName();
}
}
 else {
principal=userName;
}
String moduleName=(String)ssoProperties.get(""String_Node_Str"");
AuthenticationAuditEventBuilder.Status result=null;
List<AuthenticationAuditEntry> entries=null;
if (StringUtils.isNotEmpty(moduleName)) {
Map<String,String> info=null;
String ip=(String)ssoProperties.get(LogConstants.IP_ADDR);
if (StringUtils.isNotEmpty(ip)) {
info=new HashMap<>();
info.put(IP_ADDRESS.toString(),ip);
}
if (StringUtils.isNotEmpty(description)) {
if (info == null) {
info=new HashMap<>();
}
info.put(EVENT_DATA.toString(),description);
}
AuthenticationAuditEntry authenticationAuditEntry=new AuthenticationAuditEntry();
authenticationAuditEntry.setModuleId(moduleName);
messageName=AM_LOGIN_CHAIN_COMPLETED.toString();
if (info != null) {
authenticationAuditEntry.setInfo(info);
}
entries=Collections.singletonList(authenticationAuditEntry);
if (contextID == null) {
result=FAILED;
}
 else {
result=SUCCESSFUL;
}
}
auditor.audit(messageName,AuditRequestContext.getTransactionIdValue(),authentication,principal,realmName,trackingIds,entries,result);
}
}
}","/** 
 * Writes a log record.
 * @param s Array of data information for the log record.
 * @param type Type of log either <code>LOG_ERROR</code> or<code>LOG_ACCESS</code>.
 * @param messageName Message ID for the log record.
 * @param ssoProperties Single Sign On Properties to be written to thelog record. If this is <code>null</code>, properties will be retrieved from administrator Single Sign On Token.
 */
public void logIt(String[] s,int type,String messageName,Hashtable ssoProperties){
  LogMessageProviderBase provider=null;
  if (logStatus && (s != null)) {
    try {
      provider=(LogMessageProviderBase)MessageProviderFactory.getProvider(""String_Node_Str"");
      com.sun.identity.log.LogRecord lr=null;
      SSOToken ssot=AccessController.doPrivileged(AdminTokenAction.getInstance());
      if (ssoProperties == null) {
        lr=provider.createLogRecord(messageName,s,ssot);
      }
 else {
        lr=provider.createLogRecord(messageName,s,ssoProperties);
      }
      com.sun.identity.log.Logger logger;
switch (type) {
case LOG_ACCESS:
        logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
      logger.log(lr,ssot);
    break;
case LOG_ERROR:
  logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
default :
logger=(com.sun.identity.log.Logger)Logger.getLogger(""String_Node_Str"");
logger.log(lr,ssot);
break;
}
}
 catch (IOException ex) {
ex.printStackTrace();
debug.error(""String_Node_Str"" + ex.getMessage());
}
}
initializeAuditor();
String orgName=(String)ssoProperties.get(""String_Node_Str"");
String realmName=DNMapper.orgNameToRealmName(orgName);
boolean isAuditing=false;
if (isAuthenticationOnlyEvent(messageName)) {
if (auditor.isAuditing(realmName,AuditConstants.AUTHENTICATION_TOPIC)) {
isAuditing=true;
}
}
if (isActivityOnlyEvent(messageName)) {
if (auditor.isAuditing(realmName,AuditConstants.ACTIVITY_TOPIC)) {
isAuditing=true;
}
}
if (isAuditing) {
if (!auditor.isLogoutEvent(messageName)) {
String description=null;
if (provider != null) {
description=provider.getAllHashMessageIDs().get(messageName).getDescription();
}
String userName=(String)ssoProperties.get(""String_Node_Str"");
String contextID=(String)ssoProperties.get(LogConstants.CONTEXT_ID);
String LoginIDSid=(String)ssoProperties.get(LogConstants.LOGIN_ID_SID);
Set<String> trackingIds=null;
if (StringUtils.isNotEmpty(contextID)) {
trackingIds=new HashSet<>();
trackingIds.add(contextID);
}
if (StringUtils.isNotEmpty(LoginIDSid)) {
InternalSession session=AuthD.getSession(new SessionID(LoginIDSid));
String sessionContext;
if (session != null) {
if (trackingIds == null) {
trackingIds=new HashSet<>();
}
sessionContext=session.getProperty(Constants.AM_CTX_ID);
trackingIds.add(sessionContext);
}
}
AMIdentity identity=null;
if (StringUtils.isNotEmpty(userName) && StringUtils.isNotEmpty(realmName)) {
identity=IdUtils.getIdentity(userName,realmName);
}
String authentication=null;
String principal;
if (identity != null) {
authentication=identity.getUniversalId();
if (contextID != null) {
principal=getPrincipalFromUniversalId(identity.getName());
}
 else {
principal=identity.getName();
}
}
 else {
principal=userName;
}
String moduleName=(String)ssoProperties.get(""String_Node_Str"");
AuthenticationAuditEventBuilder.Status result=null;
List<AuthenticationAuditEntry> entries=null;
if (StringUtils.isNotEmpty(moduleName)) {
Map<String,String> info=null;
String ip=(String)ssoProperties.get(LogConstants.IP_ADDR);
if (StringUtils.isNotEmpty(ip)) {
info=new HashMap<>();
info.put(IP_ADDRESS.toString(),ip);
}
if (StringUtils.isNotEmpty(description)) {
if (info == null) {
info=new HashMap<>();
}
info.put(EVENT_DATA.toString(),description);
}
AuthenticationAuditEntry authenticationAuditEntry=new AuthenticationAuditEntry();
authenticationAuditEntry.setModuleId(moduleName);
messageName=AM_LOGIN_CHAIN_COMPLETED.toString();
if (info != null) {
authenticationAuditEntry.setInfo(info);
}
entries=Collections.singletonList(authenticationAuditEntry);
if (contextID == null) {
result=FAILED;
}
 else {
result=SUCCESSFUL;
}
}
auditor.audit(messageName,AuditRequestContext.getTransactionIdValue(),authentication,principal,realmName,trackingIds,entries,result);
}
}
}"
79691,"public static Map<String,Set<String>> getEmptySMSAttributeState(){
  HashMap<String,Set<String>> emptyAttributeMap=new HashMap<>();
  emptyAttributeMap.put(NAME_ID_FORMAT,Collections.<String>emptySet());
  emptyAttributeMap.put(ATTRIBUTE_MAP,Collections.<String>emptySet());
  emptyAttributeMap.put(TOKEN_LIFETIME,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_CONDITIONS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_SUBJECT_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_ATTRIBUTE_STATEMENTS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_AUTHENTICATION_STATEMENTS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_AUTHZ_DECISION_STATEMENTS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_ATTRIBUTE_MAPPER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_AUTHN_CONTEXT_MAPPER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(SIGN_ASSERTION,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPT_ATTRIBUTES,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPT_NAME_ID,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPT_ASSERTION,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPTION_ALGORITHM,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPTION_ALGORITHM_STRENGTH,Collections.<String>emptySet());
  emptyAttributeMap.put(KEYSTORE_FILE_NAME,Collections.<String>emptySet());
  emptyAttributeMap.put(KEYSTORE_PASSWORD,Collections.<String>emptySet());
  emptyAttributeMap.put(SP_ENTITY_ID,Collections.<String>emptySet());
  emptyAttributeMap.put(SP_ACS_URL,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPTION_KEY_ALIAS,Collections.<String>emptySet());
  emptyAttributeMap.put(SIGNATURE_KEY_ALIAS,Collections.<String>emptySet());
  emptyAttributeMap.put(SIGNATURE_KEY_PASSWORD,Collections.<String>emptySet());
  return emptyAttributeMap;
}","public static Map<String,Set<String>> getEmptySMSAttributeState(){
  HashMap<String,Set<String>> emptyAttributeMap=new HashMap<>();
  emptyAttributeMap.put(NAME_ID_FORMAT,Collections.<String>emptySet());
  emptyAttributeMap.put(ATTRIBUTE_MAP,Collections.<String>emptySet());
  emptyAttributeMap.put(TOKEN_LIFETIME,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_CONDITIONS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_SUBJECT_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_ATTRIBUTE_STATEMENTS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_AUTHENTICATION_STATEMENTS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_AUTHZ_DECISION_STATEMENTS_PROVIDER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_ATTRIBUTE_MAPPER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(CUSTOM_AUTHN_CONTEXT_MAPPER_CLASS,Collections.<String>emptySet());
  emptyAttributeMap.put(SIGN_ASSERTION,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPT_ATTRIBUTES,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPT_NAME_ID,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPT_ASSERTION,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPTION_ALGORITHM,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPTION_ALGORITHM_STRENGTH,Collections.<String>emptySet());
  emptyAttributeMap.put(KEYSTORE_FILE_NAME,Collections.<String>emptySet());
  emptyAttributeMap.put(KEYSTORE_PASSWORD,Collections.<String>emptySet());
  emptyAttributeMap.put(SP_ENTITY_ID,Collections.<String>emptySet());
  emptyAttributeMap.put(SP_ACS_URL,Collections.<String>emptySet());
  emptyAttributeMap.put(ENCRYPTION_KEY_ALIAS,Collections.<String>emptySet());
  emptyAttributeMap.put(SIGNATURE_KEY_ALIAS,Collections.<String>emptySet());
  emptyAttributeMap.put(SIGNATURE_KEY_PASSWORD,Collections.<String>emptySet());
  emptyAttributeMap.put(ISSUER_NAME,Collections.<String>emptySet());
  return emptyAttributeMap;
}"
79692,"/** 
 * For token transformations with x509 certificates as an input token type, a client's identity can only be asserted via x509 certificates presented via two-way-tls. This certificate can be obtained via the attribute referenced by the javax.servlet.request.X509Certificate key (if the container is deployed with two-way-tls), or from the header referenced by offloadedTlsClientCertKey, in case OpenAM is deployed behind infrastructure which performs tls-offloading. This method will consult header value if configured for this rest-sts instance, and if not configured, the ClientInfoContxt will be consulted, which contains the state corresponding to the javax.servlet.request.X509Certificate attribute. An exception will be thrown if the client cert cannot be obtained.
 * @param context The Context instance corresponding to this invocation
 * @throws org.forgerock.openam.sts.TokenMarshalException if the client's X509 token cannot be obtained from thejavax.servlet.request.X509Certificate attribute, or from the header referenced by the offloadedTlsClientCertKey value.
 * @return a RestTokenTransformValidatorParameters instance with a X509Certificate[] generic type.
 */
private RestTokenTransformValidatorParameters<X509Certificate[]> buildX509CertTokenTransformValidatorParameters(Context context) throws TokenMarshalException {
  X509Certificate[] certificates;
  if (!""String_Node_Str"".equals(offloadedTlsClientCertKey)) {
    String clientIpAddress=ClientUtils.getClientIPAddress(context);
    if (!tlsOffloadEngineHosts.contains(clientIpAddress) && !tlsOffloadEngineHosts.contains(ANY_HOST)) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"" + offloadedTlsClientCertKey + ""String_Node_Str""+ ""String_Node_Str""+ clientIpAddress+ ""String_Node_Str""+ tlsOffloadEngineHosts);
      throw new TokenMarshalException(ResourceException.BAD_REQUEST,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    certificates=pullClientCertFromHeader(context.asContext(HttpContext.class));
  }
 else {
    certificates=pullClientCertFromRequestAttribute(context.asContext(ClientContext.class));
  }
  if (certificates != null) {
    return marshalX509CertIntoTokenValidatorParameters(certificates);
  }
 else {
    if (!""String_Node_Str"".equals(offloadedTlsClientCertKey)) {
      throw new TokenMarshalException(ResourceException.BAD_REQUEST,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      throw new TokenMarshalException(ResourceException.BAD_REQUEST,""String_Node_Str"" + ""String_Node_Str"" + offloadedTlsClientCertKey + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
}","/** 
 * For token transformations with x509 certificates as an input token type, a client's identity can only be asserted via x509 certificates presented via two-way-tls. This certificate can be obtained via the attribute referenced by the javax.servlet.request.X509Certificate key (if the container is deployed with two-way-tls), or from the header referenced by offloadedTlsClientCertKey, in case OpenAM is deployed behind infrastructure which performs tls-offloading. This method will consult header value if configured for this rest-sts instance, and if not configured, the ClientInfoContxt will be consulted, which contains the state corresponding to the javax.servlet.request.X509Certificate attribute. An exception will be thrown if the client cert cannot be obtained.
 * @param context The Context instance corresponding to this invocation
 * @throws org.forgerock.openam.sts.TokenMarshalException if the client's X509 token cannot be obtained from thejavax.servlet.request.X509Certificate attribute, or from the header referenced by the offloadedTlsClientCertKey value.
 * @return a RestTokenTransformValidatorParameters instance with a X509Certificate[] generic type.
 */
private RestTokenTransformValidatorParameters<X509Certificate[]> buildX509CertTokenTransformValidatorParameters(Context context) throws TokenMarshalException {
  X509Certificate[] certificates;
  if (!""String_Node_Str"".equals(offloadedTlsClientCertKey)) {
    String clientIpAddress=ClientUtils.getClientIPAddress(context);
    if (!tlsOffloadEngineHosts.contains(clientIpAddress) && !tlsOffloadEngineHosts.contains(ANY_HOST)) {
      logger.error(""String_Node_Str"" + ""String_Node_Str"" + offloadedTlsClientCertKey + ""String_Node_Str""+ ""String_Node_Str""+ clientIpAddress+ ""String_Node_Str""+ tlsOffloadEngineHosts);
      throw new TokenMarshalException(ResourceException.BAD_REQUEST,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    certificates=pullClientCertFromHeader(context.asContext(HttpContext.class));
  }
 else {
    certificates=pullClientCertFromRequestAttribute(context.asContext(ClientContext.class));
  }
  if (!ArrayUtils.isEmpty(certificates)) {
    return marshalX509CertIntoTokenValidatorParameters(certificates);
  }
 else {
    if (""String_Node_Str"".equals(offloadedTlsClientCertKey)) {
      throw new TokenMarshalException(ResourceException.BAD_REQUEST,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      throw new TokenMarshalException(ResourceException.BAD_REQUEST,""String_Node_Str"" + ""String_Node_Str"" + offloadedTlsClientCertKey + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
}"
79693,"/** 
 * Handles both initial and subsequent RESTful calls from clients submitting Callbacks for the authentication process to continue. This is determined by checking if the POST body is empty or not. If it is empty then this is initiating the authentication process otherwise it is a subsequent call submitting Callbacks. Initiating authentication request using the query parameters from the URL starts the login process and either returns an SSOToken on successful authentication or a number of Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate. Using the body of the POST request the method continues the login process, submitting the given Callbacks and then either returns an SSOToken on successful authentication or a number of additional Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate.
 * @param context The request context.
 * @param httpRequest The HTTP request.
 * @return A Json Representation of the response body. The response will contain either a JSON object containing theSSOToken id from a successful authentication, a JSON object containing a number of Callbacks for the client to complete and return or a JSON object containing an exception message.
 * @throws ResourceException If there is an error processing the authentication request.
 */
@Post public Response authenticate(@Contextual Context context,@Contextual Request httpRequest){
  if (!isSupportedMediaType(httpRequest)) {
    if (DEBUG.errorEnabled()) {
      DEBUG.error(""String_Node_Str"" + ContentTypeHeader.valueOf(httpRequest).getType());
    }
    return handleErrorResponse(httpRequest,Status.UNSUPPORTED_MEDIA_TYPE,null);
  }
  final HttpServletRequest request=getHttpServletRequest(context);
  final HttpServletResponse response=getHttpServletResponse(context);
  Form urlQueryString=getUrlQueryString(httpRequest);
  final String sessionUpgradeSSOTokenId=urlQueryString.getFirst(""String_Node_Str"");
  try {
    JsonValue jsonContent;
    try {
      jsonContent=getJsonContent(httpRequest);
    }
 catch (    IOException e) {
      DEBUG.message(""String_Node_Str"",e);
      return handleErrorResponse(httpRequest,Status.BAD_REQUEST,e);
    }
    JsonValue jsonResponse;
    if (jsonContent != null && jsonContent.size() > 0) {
      jsonResponse=restAuthenticationHandler.continueAuthentication(request,response,jsonContent,sessionUpgradeSSOTokenId);
    }
 else {
      final String authIndexType=urlQueryString.getFirst(""String_Node_Str"");
      final String authIndexValue=urlQueryString.getFirst(""String_Node_Str"");
      jsonResponse=restAuthenticationHandler.initiateAuthentication(request,response,authIndexType,authIndexValue,sessionUpgradeSSOTokenId);
    }
    return createResponse(jsonResponse);
  }
 catch (  RestAuthResponseException e) {
    DEBUG.message(""String_Node_Str"",e);
    return handleErrorResponse(httpRequest,Status.valueOf(e.getStatusCode()),e);
  }
catch (  RestAuthException e) {
    DEBUG.message(""String_Node_Str"",e);
    return handleErrorResponse(httpRequest,Status.UNAUTHORIZED,e);
  }
catch (  IOException e) {
    DEBUG.error(""String_Node_Str"",e);
    return handleErrorResponse(httpRequest,Status.INTERNAL_SERVER_ERROR,e);
  }
}","/** 
 * Handles both initial and subsequent RESTful calls from clients submitting Callbacks for the authentication process to continue. This is determined by checking if the POST body is empty or not. If it is empty then this is initiating the authentication process otherwise it is a subsequent call submitting Callbacks. Initiating authentication request using the query parameters from the URL starts the login process and either returns an SSOToken on successful authentication or a number of Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate. Using the body of the POST request the method continues the login process, submitting the given Callbacks and then either returns an SSOToken on successful authentication or a number of additional Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate.
 * @param context The request context.
 * @param httpRequest The HTTP request.
 * @return A Json Representation of the response body. The response will contain either a JSON object containing theSSOToken id from a successful authentication, a JSON object containing a number of Callbacks for the client to complete and return or a JSON object containing an exception message.
 * @throws ResourceException If there is an error processing the authentication request.
 */
@Post public Response authenticate(@Contextual Context context,@Contextual Request httpRequest){
  if (!isSupportedMediaType(httpRequest)) {
    if (DEBUG.errorEnabled()) {
      DEBUG.error(""String_Node_Str"" + ContentTypeHeader.valueOf(httpRequest).getType());
    }
    return handleErrorResponse(httpRequest,Status.UNSUPPORTED_MEDIA_TYPE,null);
  }
  final HttpServletRequest request=getHttpServletRequest(context);
  final HttpServletResponse response=getHttpServletResponse(context);
  Form urlQueryString=getUrlQueryString(httpRequest);
  final String sessionUpgradeSSOTokenId=urlQueryString.getFirst(""String_Node_Str"");
  try {
    JsonValue jsonContent;
    try {
      jsonContent=getJsonContent(httpRequest);
    }
 catch (    IOException e) {
      DEBUG.message(""String_Node_Str"",e);
      return handleErrorResponse(httpRequest,Status.BAD_REQUEST,e);
    }
    JsonValue jsonResponse;
    if (jsonContent != null && jsonContent.size() > 0) {
      jsonResponse=restAuthenticationHandler.continueAuthentication(request,response,jsonContent,sessionUpgradeSSOTokenId);
    }
 else {
      final String authIndexType=urlQueryString.getFirst(""String_Node_Str"");
      final String authIndexValue=urlQueryString.getFirst(""String_Node_Str"");
      jsonResponse=restAuthenticationHandler.initiateAuthentication(request,response,authIndexType,authIndexValue,sessionUpgradeSSOTokenId);
    }
    return createResponse(jsonResponse);
  }
 catch (  RestAuthResponseException e) {
    DEBUG.message(""String_Node_Str"",e);
    return handleErrorResponse(httpRequest,Status.valueOf(e.getStatusCode()),e);
  }
catch (  RestAuthException e) {
    DEBUG.message(""String_Node_Str"",e);
    return handleErrorResponse(httpRequest,Status.valueOf(e.getStatusCode()),e);
  }
catch (  IOException e) {
    DEBUG.error(""String_Node_Str"",e);
    return handleErrorResponse(httpRequest,Status.INTERNAL_SERVER_ERROR,e);
  }
}"
79694,"private String getCodeVerifier(String codeChallengeMethod) throws LoginException {
  String codeVerifier=Base64url.encode(RandomStringUtils.randomAlphanumeric(96).getBytes());
  if (SHA_256_DISPLAY_NAME.equals(codeChallengeMethod)) {
    try {
      return Base64url.encode(MessageDigest.getInstance(""String_Node_Str"").digest(codeVerifier.getBytes(StandardCharsets.US_ASCII)));
    }
 catch (    NoSuchAlgorithmException e) {
      throw new LoginException(""String_Node_Str"");
    }
  }
 else {
    return codeVerifier;
  }
}","private String getCodeVerifier(String codeChallengeMethod) throws LoginException {
  String codeVerifier=Base64url.encode(RandomStringUtils.randomAlphanumeric(96).getBytes());
  if (OAuth2Constants.Custom.CODE_CHALLENGE_METHOD_S_256.equals(codeChallengeMethod)) {
    try {
      return Base64url.encode(MessageDigest.getInstance(""String_Node_Str"").digest(codeVerifier.getBytes(StandardCharsets.US_ASCII)));
    }
 catch (    NoSuchAlgorithmException e) {
      throw new LoginException(""String_Node_Str"");
    }
  }
 else {
    return codeVerifier;
  }
}"
79695,"@Override protected String getContextIdForAccessAttempt(Request request){
  try {
    String jsonString=request.getEntity().getString();
    if (isNotEmpty(jsonString)) {
      JsonValue jsonValue=toJsonValue(jsonString);
      if (jsonValue.isDefined(AUTH_ID)) {
        populateContextFromAuthId(jsonValue.get(AUTH_ID).asString());
      }
    }
    return super.getContextIdForAccessAttempt(request);
  }
 catch (  IOException e) {
    return ""String_Node_Str"";
  }
}","protected String getContextIdForAccessAttempt(Request request){
  try {
    String jsonString=request.getEntity().getString();
    if (isNotEmpty(jsonString)) {
      JsonValue jsonValue=toJsonValue(jsonString);
      if (jsonValue.isDefined(AUTH_ID)) {
        populateContextFromAuthId(jsonValue.get(AUTH_ID).asString());
      }
    }
  }
 catch (  IOException e) {
    return ""String_Node_Str"";
  }
  return null;
}"
79696,"@Override protected String getContextIdForAccessOutcome(Response response){
  String contextId=super.getContextIdForAccessOutcome(response);
  if (isNotEmpty(contextId)) {
    return contextId;
  }
  String tokenId=AuditRequestContext.getProperty(TOKEN_ID);
  String sessionId=AuditRequestContext.getProperty(SESSION_ID);
  String authId=AuditRequestContext.getProperty(AUTH_ID);
  if (isNotEmpty(tokenId)) {
    populateContextFromTokenId(tokenId);
  }
 else   if (isNotEmpty(sessionId)) {
    AuditRequestContext.putProperty(CONTEXT_ID,getContextIdFromSessionId(sessionId));
  }
 else   if (isNotEmpty(authId)) {
    populateContextFromAuthId(authId);
  }
  return super.getContextIdForAccessOutcome(response);
}","protected String getContextIdForAccessOutcome(Response response){
  String tokenId=AuditRequestContext.getProperty(TOKEN_ID);
  String sessionId=AuditRequestContext.getProperty(SESSION_ID);
  String authId=AuditRequestContext.getProperty(AUTH_ID);
  if (isNotEmpty(tokenId)) {
    populateContextFromTokenId(tokenId);
  }
 else   if (isNotEmpty(sessionId)) {
  }
 else   if (isNotEmpty(authId)) {
    populateContextFromAuthId(authId);
  }
  return null;
}"
79697,"private void populateContextFromAuthId(String authId){
  try {
    String sessionId=authIdHelper.reconstructAuthId(authId).getClaimsSet().getClaim(SESSION_ID,String.class);
    if (isEmpty(sessionId)) {
      return;
    }
    String contextId=getContextIdFromSessionId(sessionId);
    if (isNotEmpty(contextId)) {
      AuditRequestContext.putProperty(CONTEXT_ID,contextId);
    }
  }
 catch (  RestAuthException e) {
    debug.warning(""String_Node_Str"");
  }
}","private void populateContextFromAuthId(String authId){
  try {
    String sessionId=authIdHelper.reconstructAuthId(authId).getClaimsSet().getClaim(SESSION_ID,String.class);
    if (isEmpty(sessionId)) {
      return;
    }
    String contextId=getContextIdFromSessionId(sessionId);
    if (isNotEmpty(contextId)) {
    }
  }
 catch (  RestAuthException e) {
    debug.warning(""String_Node_Str"");
  }
}"
79698,"private void populateContextFromTokenId(String tokenId){
  try {
    SSOToken token=SSOTokenManager.getInstance().createSSOToken(tokenId);
    AuditRequestContext.putProperty(USER_ID,getUserId(token));
    AuditRequestContext.putProperty(CONTEXT_ID,getContextIdFromSSOToken(token));
  }
 catch (  SSOException e) {
    debug.warning(""String_Node_Str"");
  }
}","private void populateContextFromTokenId(String tokenId){
  try {
    SSOToken token=SSOTokenManager.getInstance().createSSOToken(tokenId);
    AuditRequestContext.putProperty(USER_ID,getUserId(token));
  }
 catch (  SSOException e) {
    debug.warning(""String_Node_Str"");
  }
}"
79699,"private void auditAccessSuccess(Request request,Response response){
  if (auditEventPublisher.isAuditing(ACCESS_TOPIC)) {
    long endTime=System.currentTimeMillis();
    AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent().timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component).authentication(getUserIdForAccessOutcome(response)).contextId(getContextIdForAccessOutcome(response)).response(""String_Node_Str"",endTime - request.getDate().getTime());
    addHttpData(request,builder);
    auditEventPublisher.tryPublish(ACCESS_TOPIC,builder.toEvent());
  }
}","private void auditAccessSuccess(Request request,Response response){
}"
79700,"private void addHttpData(Request request,AMAccessAuditEventBuilder builder){
  HttpServletRequest servletRequest=getRequest(request);
  if (servletRequest != null) {
    builder.forHttpServletRequest(servletRequest);
  }
}","private void addHttpData(Request request,AMAccessAuditEventBuilder builder){
}"
79701,"/** 
 * Retrieve the context ID for an access attempt.
 * @param request the restlet request
 * @return the context ID
 */
protected String getContextIdForAccessAttempt(Request request){
  return AuditRequestContext.getProperty(CONTEXT_ID);
}","/** 
 * Retrieve the context ID for an access attempt.
 * @param request the restlet request
 * @return the context ID
 */
protected String getContextIdForAccessAttempt(Request request){
  return null;
}"
79702,"/** 
 * Retrieve the user ID for an access outcome.
 * @param response the restlet response
 * @return the user ID
 */
protected String getUserIdForAccessOutcome(Response response){
  String userId=AuditRequestContext.getProperty(USER_ID);
  return userId == null ? ""String_Node_Str"" : userId;
}","/** 
 * Retrieve the user ID for an access outcome.
 * @param response the restlet response
 * @return the user ID
 */
protected String getUserIdForAccessOutcome(Response response){
  return null;
}"
79703,"@Override protected void afterHandle(Request request,Response response){
  super.afterHandle(request,response);
  if (response.getStatus().isError()) {
    auditAccessFailure(request,response);
  }
 else {
    auditAccessSuccess(request,response);
  }
}","@Override protected void afterHandle(Request request,Response response){
}"
79704,"/** 
 * Retrieve the Context ID for an access outcome.
 * @param response the restlet response
 * @return the context ID
 */
protected String getContextIdForAccessOutcome(Response response){
  return AuditRequestContext.getProperty(CONTEXT_ID);
}","/** 
 * Retrieve the Context ID for an access outcome.
 * @param response the restlet response
 * @return the context ID
 */
protected String getContextIdForAccessOutcome(Response response){
  return null;
}"
79705,"private void auditAccessFailure(Request request,Response response){
  if (auditEventPublisher.isAuditing(ACCESS_TOPIC)) {
    long endTime=System.currentTimeMillis();
    AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent().timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component).authentication(getUserIdForAccessOutcome(response)).contextId(getContextIdForAccessOutcome(response)).responseWithMessage(""String_Node_Str"" + response.getStatus().getCode(),endTime - request.getDate().getTime(),response.getStatus().getDescription());
    addHttpData(request,builder);
    auditEventPublisher.tryPublish(ACCESS_TOPIC,builder.toEvent());
  }
}","private void auditAccessFailure(Request request,Response response){
}"
79706,"/** 
 * Retrieve the user ID for an access attempt.
 * @param request the restlet request
 * @return the user ID
 */
protected String getUserIdForAccessAttempt(Request request){
  String userId=AuditRequestContext.getProperty(USER_ID);
  return userId == null ? ""String_Node_Str"" : userId;
}","/** 
 * Retrieve the user ID for an access attempt.
 * @param request the restlet request
 * @return the user ID
 */
protected String getUserIdForAccessAttempt(Request request){
  return null;
}"
79707,"@Override protected int beforeHandle(Request request,Response response){
  try {
    Representation representation=request.getEntity();
    if (representation.isTransient()) {
      request.setEntity(new BufferingRepresentation(request.getEntity()));
    }
    auditAccessAttempt(request);
  }
 catch (  AuditException e) {
    response.setStatus(Status.SERVER_ERROR_INTERNAL,e);
    return STOP;
  }
  return CONTINUE;
}","@Override protected int beforeHandle(Request request,Response response){
  return 0;
}"
79708,"private void auditAccessAttempt(Request request) throws AuditException {
  if (auditEventPublisher.isAuditing(ACCESS_TOPIC)) {
    AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent().timestamp(request.getDate().getTime()).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_ATTEMPT).component(component).authentication(getUserIdForAccessAttempt(request)).contextId(getContextIdForAccessAttempt(request));
    addHttpData(request,builder);
    auditEventPublisher.publish(ACCESS_TOPIC,builder.toEvent());
  }
}","private void auditAccessAttempt(Request request) throws AuditException {
}"
79709,"/** 
 * {@inheritDoc}
 */
@Override protected String getContextIdForAccessAttempt(Request request){
  String contextId=super.getContextIdForAccessAttempt(request);
  if (contextId != null) {
    return contextId;
  }
  AccessToken accessToken=retrieveAccessToken(request);
  contextId=generateContextID(accessToken);
  AuditRequestContext.putProperty(CONTEXT_ID,contextId);
  return contextId;
}","/** 
 * {@inheritDoc}
 */
@Override protected String getContextIdForAccessAttempt(Request request){
  return null;
}"
79710,"@Test public void shouldHandleAuditException() throws AuditException {
  Request request=mock(Request.class);
  Response response=new Response(request);
  Representation representation=mock(Representation.class);
  when(request.getEntity()).thenReturn(representation);
  when(request.getDate()).thenReturn(new Date());
  when(representation.isTransient()).thenReturn(false);
  AuditRequestContext.putProperty(USER_ID,""String_Node_Str"");
  AuditRequestContext.putProperty(CONTEXT_ID,""String_Node_Str"");
  when(eventPublisher.isAuditing(anyString())).thenReturn(true);
  when(eventPublisher.isSuppressExceptions()).thenReturn(false);
  doThrow(AuditException.class).when(eventPublisher).publish(anyString(),any(AuditEvent.class));
  auditFilter.handle(request,response);
  verify(restlet,never()).handle(any(Request.class),any(Response.class));
  assertThat(response.getStatus()).isEqualTo(Status.SERVER_ERROR_INTERNAL);
}","@Test public void shouldHandleAuditException() throws AuditException {
  Request request=mock(Request.class);
  Response response=new Response(request);
  Representation representation=mock(Representation.class);
  when(request.getEntity()).thenReturn(representation);
  when(request.getDate()).thenReturn(new Date());
  when(representation.isTransient()).thenReturn(false);
  AuditRequestContext.putProperty(USER_ID,""String_Node_Str"");
  when(eventPublisher.isAuditing(anyString())).thenReturn(true);
  when(eventPublisher.isSuppressExceptions()).thenReturn(false);
  doThrow(AuditException.class).when(eventPublisher).publish(anyString(),any(AuditEvent.class));
  auditFilter.handle(request,response);
  verify(restlet,never()).handle(any(Request.class),any(Response.class));
  assertThat(response.getStatus()).isEqualTo(Status.SERVER_ERROR_INTERNAL);
}"
79711,"/** 
 * @return
 */
public static Map<String,String> getAllAvailableContexts(){
  Map<String,String> map=new HashMap<>();
  for (  AuditConstants.Context context : AuditConstants.Context.values()) {
    String contextKey=context.toString();
    String contextValue=AuditRequestContext.getProperty(contextKey);
    if (StringUtils.isNotEmpty(contextValue)) {
      map.put(contextKey,contextValue);
    }
  }
  return map;
}","/** 
 * Get all available   {@link AuditConstants.Context} values from the possible list of{@link AuditConstants.Context} values, from the {@link AuditRequestContext}.
 * @return All the available {@link AuditConstants.Context} values.
 */
public static Map<String,String> getAllAvailableContexts(){
  Map<String,String> map=new HashMap<>();
  for (  AuditConstants.Context context : AuditConstants.Context.values()) {
    String contextKey=context.toString();
    String contextValue=AuditRequestContext.getProperty(contextKey);
    if (StringUtils.isNotEmpty(contextValue)) {
      map.put(contextKey,contextValue);
    }
  }
  return map;
}"
79712,"public void auditActivity(InternalSession session,EventName eventName){
  if (auditEventPublisher.isAuditing(ACTIVITY_TOPIC)) {
    String contextId=session.getProperty(Constants.AM_CTX_ID);
    AuditEvent auditEvent=auditEventFactory.activityEvent().transactionId(AuditRequestContext.getTransactionIdValue()).eventName(eventName).component(Component.SESSION).authentication(session.getProperty(Constants.UNIVERSAL_IDENTIFIER)).contextId(Context.SESSION,contextId).runAs(getUserId(getAdminToken())).resourceOperation(contextId,""String_Node_Str"",getCrudType(eventName)).toEvent();
    auditEventPublisher.tryPublish(ACTIVITY_TOPIC,auditEvent);
  }
}","public void auditActivity(InternalSession session,EventName eventName){
  if (auditEventPublisher.isAuditing(ACTIVITY_TOPIC)) {
    String contextId=session.getProperty(Constants.AM_CTX_ID);
    AuditEvent auditEvent=auditEventFactory.activityEvent().transactionId(AuditRequestContext.getTransactionIdValue()).eventName(eventName).component(Component.SESSION).authentication(session.getProperty(Constants.UNIVERSAL_IDENTIFIER)).context(Context.SESSION,contextId).runAs(getUserId(getAdminToken())).resourceOperation(contextId,""String_Node_Str"",getCrudType(eventName)).toEvent();
    auditEventPublisher.tryPublish(ACTIVITY_TOPIC,auditEvent);
  }
}"
79713,"@Override public void addRoutes(RestRouter rootRouter,RestRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(DASHBOARD).toCollection(DashboardResource.class);
  realmRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptRead()).auditAs(SERVER_INFO).forVersion(1,1).toCollection(ServerInfoResource.class);
  realmRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptActions(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).auditAs(USERS).forVersion(1,2).toCollection(Key.get(IdentityResourceV1.class,Names.named(""String_Node_Str""))).forVersion(2,1).toCollection(Key.get(IdentityResourceV2.class,Names.named(""String_Node_Str"")));
  realmRouter.route(""String_Node_Str"").auditAs(GROUPS).forVersion(1,2).toCollection(Key.get(IdentityResourceV1.class,Names.named(""String_Node_Str""))).forVersion(2,1).toCollection(Key.get(IdentityResourceV2.class,Names.named(""String_Node_Str"")));
  realmRouter.route(""String_Node_Str"").auditAs(POLICY_AGENT).authorizeWith(ResourceOwnerOrSuperUserAuthzModule.class).forVersion(1,2).toCollection(Key.get(IdentityResourceV1.class,Names.named(""String_Node_Str""))).forVersion(2,1).toCollection(Key.get(IdentityResourceV2.class,Names.named(""String_Node_Str"")));
  realmRouter.route(""String_Node_Str"").auditAs(DEVICES).toCollection(TrustedDevicesResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(DEVICES).authorizeWith(ResourceOwnerOrSuperUserAuthzModule.class).toCollection(OathDevicesResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(BATCH).authorizeWith(AdminOnlyAuthzModule.class).toCollection(BatchResource.class);
  realmRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptActions(""String_Node_Str"")).auditAs(SESSION).authorizeWith(SessionResourceAuthzModule.class).forVersion(1,1).toCollection(SessionResource.class);
  rootRouter.route(""String_Node_Str"").auditAs(CTS).authorizeWith(CoreTokenResourceAuthzModule.class).toCollection(CoreTokenResource.class);
  rootRouter.route(RecordConstants.RECORD_REST_ENDPOINT).auditAs(RECORD).authorizeWith(AdminOnlyAuthzModule.class).toCollection(RecordResource.class);
}","@Override public void addRoutes(RestRouter rootRouter,RestRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(DASHBOARD).toCollection(DashboardResource.class);
  realmRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptRead()).auditAs(SERVER_INFO).forVersion(1,1).toCollection(ServerInfoResource.class);
  realmRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptActions(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).auditAs(USERS).forVersion(1,2).toCollection(Key.get(IdentityResourceV1.class,Names.named(""String_Node_Str""))).forVersion(2,1).toCollection(Key.get(IdentityResourceV2.class,Names.named(""String_Node_Str"")));
  realmRouter.route(""String_Node_Str"").auditAs(GROUPS).forVersion(1,2).toCollection(Key.get(IdentityResourceV1.class,Names.named(""String_Node_Str""))).forVersion(2,1).toCollection(Key.get(IdentityResourceV2.class,Names.named(""String_Node_Str"")));
  realmRouter.route(""String_Node_Str"").auditAs(POLICY_AGENT).forVersion(1,2).toCollection(Key.get(IdentityResourceV1.class,Names.named(""String_Node_Str""))).forVersion(2,1).toCollection(Key.get(IdentityResourceV2.class,Names.named(""String_Node_Str"")));
  realmRouter.route(""String_Node_Str"").auditAs(DEVICES).toCollection(TrustedDevicesResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(DEVICES).authorizeWith(ResourceOwnerOrSuperUserAuthzModule.class).toCollection(OathDevicesResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(BATCH).authorizeWith(AdminOnlyAuthzModule.class).toCollection(BatchResource.class);
  realmRouter.route(""String_Node_Str"").authenticateWith(ssoToken().exceptActions(""String_Node_Str"")).auditAs(SESSION).authorizeWith(SessionResourceAuthzModule.class).forVersion(1,1).toCollection(SessionResource.class);
  rootRouter.route(""String_Node_Str"").auditAs(CTS).authorizeWith(CoreTokenResourceAuthzModule.class).toCollection(CoreTokenResource.class);
  rootRouter.route(RecordConstants.RECORD_REST_ENDPOINT).auditAs(RECORD).authorizeWith(AdminOnlyAuthzModule.class).toCollection(RecordResource.class);
}"
79714,"/** 
 * Gets the instance of the OAuth2ProviderSettings.
 * @param realm The realm.
 * @param req The request that can be used to obtain the base deployment url.
 * @return The OAuth2ProviderSettings instance.
 */
OAuth2ProviderSettings get(String realm,HttpServletRequest req) throws NotFoundException ;","/** 
 * Gets the instance of the OAuth2ProviderSettings.
 * @param realm The realm.
 * @param context The context that can be used to obtain the base deployment url.
 * @return The OAuth2ProviderSettings instance.
 */
OAuth2ProviderSettings get(String realm,Context context) throws NotFoundException ;"
79715,"/** 
 * Cache each provider settings on the realm it was created for.  {@inheritDoc}
 */
public OAuth2ProviderSettings get(String realm,HttpServletRequest req) throws NotFoundException {
  String baseDeploymentUri=baseURLProviderFactory.get(realm).getURL(req);
synchronized (providerSettingsMap) {
    OAuth2ProviderSettings providerSettings=providerSettingsMap.get(realm);
    if (providerSettings == null) {
      ResourceSetStore resourceSetStore=resourceSetStoreFactory.create(realm);
      providerSettings=new OpenAMOAuth2ProviderSettings(realm,baseDeploymentUri,resourceSetStore,cookieExtractor);
      if (providerSettings.exists()) {
        providerSettingsMap.put(realm,providerSettings);
      }
 else {
        throw new NotFoundException(""String_Node_Str"" + realm);
      }
    }
    return providerSettings;
  }
}","@Override public OAuth2ProviderSettings get(String realm,Context context) throws NotFoundException {
  Reject.ifNull(realm,""String_Node_Str"");
  Reject.ifNull(context,""String_Node_Str"");
  String baseDeploymentUri=baseURLProviderFactory.get(realm).getURL(context.asContext(HttpContext.class));
  return getProviderSettings(realm,baseDeploymentUri);
}"
79716,"@Override public void addRoutes(RestRouter rootRouter,RestRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(OAUTH2).authorizeWith(ResourceOwnerOrSuperUserAuthzModule.class).through(UmaEnabledFilter.class).toCollection(ResourceSetResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(OAUTH2).authorizeWith(ResourceOwnerOrSuperUserAuthzModule.class).toCollection(UmaLabelResource.class);
}","@Override public void addRoutes(RestRouter rootRouter,RestRouter realmRouter){
  realmRouter.route(""String_Node_Str"").auditAs(OAUTH2).authorizeWith(ResourceOwnerOrSuperUserAuthzModule.class).through(UmaEnabledFilter.class).toCollection(ResourceSetResource.class);
  realmRouter.route(""String_Node_Str"").auditAs(OAUTH2).authorizeWith(ResourceOwnerOrSuperUserAuthzModule.class).through(UmaEnabledFilter.class).toCollection(UmaLabelResource.class);
}"
79717,"public void setResourceSetQuery(org.forgerock.util.query.QueryFilter<String> query){
  setFirstQuery(query);
}","/** 
 * Set the resource set query.
 * @param query The query.
 */
public void setResourceSetQuery(org.forgerock.util.query.QueryFilter<String> query){
  setFirstQuery(query);
}"
79718,"public QueryFilter getPolicyQuery(){
  return getSecondQuery();
}","/** 
 * Get the policy query.
 * @return The query.
 */
public QueryFilter<JsonPointer> getPolicyQuery(){
  return getSecondQuery();
}"
79719,"public org.forgerock.util.query.QueryFilter<String> getResourceSetQuery(){
  return getFirstQuery();
}","/** 
 * Get the resource set query.
 * @return The query.
 */
public org.forgerock.util.query.QueryFilter<String> getResourceSetQuery(){
  return getFirstQuery();
}"
79720,"public void setPolicyQuery(QueryFilter query){
  setSecondQuery(query);
}","/** 
 * Set the policy query.
 * @param query The query.
 */
public void setPolicyQuery(QueryFilter<JsonPointer> query){
  setSecondQuery(query);
}"
79721,"private Promise<Void,ResourceException> enabled(Context serverContext){
  try {
    final String realm=ServerContextUtils.getRealm(serverContext);
    UmaProviderSettings settings=umaProviderSettingsFactory.get(RequestHolder.get(),realm);
    if (settings.isEnabled()) {
      return newResultPromise(null);
    }
  }
 catch (  NotFoundException ignore) {
  }
  return newExceptionPromise(newNotSupportedException(""String_Node_Str""));
}","private Promise<Void,ResourceException> enabled(Context serverContext){
  try {
    final String realm=ServerContextUtils.getRealm(serverContext);
    UmaProviderSettings settings=umaProviderSettingsFactory.get(serverContext,realm);
    if (settings.isEnabled()) {
      return newResultPromise(null);
    }
  }
 catch (  NotFoundException ignore) {
  }
  return newExceptionPromise(newNotSupportedException(""String_Node_Str""));
}"
79722,"@Test public void nameQueryShouldBeSupported() throws Exception {
  Context context=mock(Context.class);
  QueryRequest request=mock(QueryRequest.class);
  given(request.getFields()).willReturn(Arrays.asList(new JsonPointer(""String_Node_Str"")));
  QueryResourceHandler handler=mock(QueryResourceHandler.class);
  ResourceSetDescription resourceSet=mock(ResourceSetDescription.class);
  QueryFilter<JsonPointer> queryFilter=QueryFilter.and(QueryFilter.equalTo(new JsonPointer(""String_Node_Str""),""String_Node_Str""),QueryFilter.equalTo(new JsonPointer(""String_Node_Str""),""String_Node_Str""),QueryFilter.equalTo(new JsonPointer(""String_Node_Str""),""String_Node_Str""));
  Promise<Collection<ResourceSetDescription>,ResourceException> resourceSetsPromise=Promises.newResultPromise((Collection<ResourceSetDescription>)asSet(resourceSet));
  given(contextHelper.getRealm(context)).willReturn(""String_Node_Str"");
  given(contextHelper.getUserId(context)).willReturn(""String_Node_Str"");
  given(request.getQueryFilter()).willReturn(queryFilter);
  given(resourceSetService.getResourceSets(eq(context),eq(""String_Node_Str""),Matchers.<ResourceSetWithPolicyQuery>anyObject(),eq(""String_Node_Str""),eq(false))).willReturn(resourceSetsPromise);
  Promise<QueryResponse,ResourceException> promise=resource.queryCollection(context,request,handler);
  ArgumentCaptor<ResourceSetWithPolicyQuery> queryCaptor=ArgumentCaptor.forClass(ResourceSetWithPolicyQuery.class);
  verify(resourceSetService).getResourceSets(eq(context),eq(""String_Node_Str""),queryCaptor.capture(),eq(""String_Node_Str""),eq(false));
  assertThat(queryCaptor.getValue().getOperator()).isEqualTo(AggregateQuery.Operator.AND);
  assertThat(queryCaptor.getValue().getPolicyQuery()).isEqualTo(QueryFilter.equalTo(""String_Node_Str"",""String_Node_Str""));
  assertThat(queryCaptor.getValue().getResourceSetQuery()).isEqualTo(QueryFilter.and(QueryFilter.equalTo(""String_Node_Str"",""String_Node_Str""),QueryFilter.equalTo(""String_Node_Str"",""String_Node_Str"")));
  assertThat(promise).succeeded().withObject().isNotNull();
}","@Test public void nameQueryShouldBeSupported() throws Exception {
  Context context=mock(Context.class);
  QueryRequest request=mock(QueryRequest.class);
  given(request.getFields()).willReturn(Arrays.asList(new JsonPointer(""String_Node_Str"")));
  QueryResourceHandler handler=mock(QueryResourceHandler.class);
  ResourceSetDescription resourceSet=mock(ResourceSetDescription.class);
  QueryFilter<JsonPointer> queryFilter=QueryFilter.and(QueryFilter.equalTo(new JsonPointer(""String_Node_Str""),""String_Node_Str""),QueryFilter.equalTo(new JsonPointer(""String_Node_Str""),""String_Node_Str""),QueryFilter.equalTo(new JsonPointer(""String_Node_Str""),""String_Node_Str""));
  Promise<Collection<ResourceSetDescription>,ResourceException> resourceSetsPromise=Promises.newResultPromise((Collection<ResourceSetDescription>)asSet(resourceSet));
  given(contextHelper.getRealm(context)).willReturn(""String_Node_Str"");
  given(contextHelper.getUserId(context)).willReturn(""String_Node_Str"");
  given(request.getQueryFilter()).willReturn(queryFilter);
  given(resourceSetService.getResourceSets(eq(context),eq(""String_Node_Str""),Matchers.<ResourceSetWithPolicyQuery>anyObject(),eq(""String_Node_Str""),eq(false))).willReturn(resourceSetsPromise);
  Promise<QueryResponse,ResourceException> promise=resource.queryCollection(context,request,handler);
  ArgumentCaptor<ResourceSetWithPolicyQuery> queryCaptor=ArgumentCaptor.forClass(ResourceSetWithPolicyQuery.class);
  verify(resourceSetService).getResourceSets(eq(context),eq(""String_Node_Str""),queryCaptor.capture(),eq(""String_Node_Str""),eq(false));
  assertThat(queryCaptor.getValue().getOperator()).isEqualTo(AggregateQuery.Operator.AND);
  assertThat(queryCaptor.getValue().getPolicyQuery()).isEqualTo(QueryFilter.equalTo(new JsonPointer(""String_Node_Str""),""String_Node_Str""));
  assertThat(queryCaptor.getValue().getResourceSetQuery()).isEqualTo(QueryFilter.and(QueryFilter.equalTo(""String_Node_Str"",""String_Node_Str""),QueryFilter.equalTo(""String_Node_Str"",""String_Node_Str"")));
  assertThat(promise).succeeded().withObject().isNotNull();
}"
79723,"@Test public void getResourceSetsShouldReturnEmptySetWhenNoResourceSetsExist() throws Exception {
  String realm=""String_Node_Str"";
  Context context=mockContext(realm);
  ResourceSetWithPolicyQuery query=new ResourceSetWithPolicyQuery();
  String resourceOwnerId=""String_Node_Str"";
  boolean augmentWithPolicies=false;
  QueryFilter<String> resourceSetQuery=mock(QueryFilter.class);
  QueryFilter policyQuery=QueryFilter.alwaysFalse();
  Set<ResourceSetDescription> queriedResourceSets=new HashSet<>();
  Collection<UmaPolicy> queriedPolicies=new HashSet<>();
  Pair<QueryResponse,Collection<UmaPolicy>> queriedPoliciesPair=Pair.of(newQueryResponse(),queriedPolicies);
  Promise<Pair<QueryResponse,Collection<UmaPolicy>>,ResourceException> queriedPoliciesPromise=Promises.newResultPromise(queriedPoliciesPair);
  query.setResourceSetQuery(resourceSetQuery);
  query.setPolicyQuery(policyQuery);
  given(resourceSetStore.query(any(QueryFilter.class))).willReturn(queriedResourceSets);
  given(policyService.queryPolicies(eq(context),Matchers.<QueryRequest>anyObject())).willReturn(queriedPoliciesPromise);
  mockResourceOwnerIdentity(resourceOwnerId,realm);
  mockPolicyEvaluator(""String_Node_Str"");
  mockFilteredResourceSetsQueryVisitor(resourceSetQuery,queriedResourceSets);
  Collection<ResourceSetDescription> resourceSets=service.getResourceSets(context,realm,query,resourceOwnerId,augmentWithPolicies).getOrThrowUninterruptibly();
  assertThat(resourceSets).isEmpty();
}","@Test public void getResourceSetsShouldReturnEmptySetWhenNoResourceSetsExist() throws Exception {
  String realm=""String_Node_Str"";
  Context context=mockContext(realm);
  ResourceSetWithPolicyQuery query=new ResourceSetWithPolicyQuery();
  String resourceOwnerId=""String_Node_Str"";
  boolean augmentWithPolicies=false;
  QueryFilter<String> resourceSetQuery=mock(QueryFilter.class);
  QueryFilter<JsonPointer> policyQuery=QueryFilter.alwaysFalse();
  Set<ResourceSetDescription> queriedResourceSets=new HashSet<>();
  Collection<UmaPolicy> queriedPolicies=new HashSet<>();
  Pair<QueryResponse,Collection<UmaPolicy>> queriedPoliciesPair=Pair.of(newQueryResponse(),queriedPolicies);
  Promise<Pair<QueryResponse,Collection<UmaPolicy>>,ResourceException> queriedPoliciesPromise=Promises.newResultPromise(queriedPoliciesPair);
  query.setResourceSetQuery(resourceSetQuery);
  query.setPolicyQuery(policyQuery);
  given(resourceSetStore.query(any(QueryFilter.class))).willReturn(queriedResourceSets);
  given(policyService.queryPolicies(eq(context),Matchers.<QueryRequest>anyObject())).willReturn(queriedPoliciesPromise);
  mockResourceOwnerIdentity(resourceOwnerId,realm);
  mockPolicyEvaluator(""String_Node_Str"");
  mockFilteredResourceSetsQueryVisitor(resourceSetQuery,queriedResourceSets);
  Collection<ResourceSetDescription> resourceSets=service.getResourceSets(context,realm,query,resourceOwnerId,augmentWithPolicies).getOrThrowUninterruptibly();
  assertThat(resourceSets).isEmpty();
}"
79724,"@BeforeClass public static void setupFactories() throws Exception {
  notYetConfiguredFactory=mock(UmaProviderSettingsFactory.class);
  given(notYetConfiguredFactory.get(any(HttpServletRequest.class),anyString())).willThrow(NotFoundException.class);
  UmaProviderSettings notEnabled=mock(UmaProviderSettings.class);
  given(notEnabled.isEnabled()).willReturn(false);
  notEnabledFactory=mock(UmaProviderSettingsFactory.class);
  given(notEnabledFactory.get(any(HttpServletRequest.class),anyString())).willReturn(notEnabled);
  UmaProviderSettings enabled=mock(UmaProviderSettings.class);
  given(enabled.isEnabled()).willReturn(true);
  enabledFactory=mock(UmaProviderSettingsFactory.class);
  given(enabledFactory.get(any(HttpServletRequest.class),anyString())).willReturn(enabled);
}","@BeforeClass public static void setupFactories() throws Exception {
  notYetConfiguredFactory=mock(UmaProviderSettingsFactory.class);
  given(notYetConfiguredFactory.get(any(Context.class),anyString())).willThrow(NotFoundException.class);
  UmaProviderSettings notEnabled=mock(UmaProviderSettings.class);
  given(notEnabled.isEnabled()).willReturn(false);
  notEnabledFactory=mock(UmaProviderSettingsFactory.class);
  given(notEnabledFactory.get(any(Context.class),anyString())).willReturn(notEnabled);
  UmaProviderSettings enabled=mock(UmaProviderSettings.class);
  given(enabled.isEnabled()).willReturn(true);
  enabledFactory=mock(UmaProviderSettingsFactory.class);
  given(enabledFactory.get(any(Context.class),anyString())).willReturn(enabled);
}"
79725,"@BeforeMethod public void setup() throws Exception {
  MockitoAnnotations.initMocks(this);
  context=new InternalContext(new RealmContext(new RootContext()));
  requestHandler=mock(RequestHandler.class);
  when(requestHandler.handleAction(any(Context.class),any(ActionRequest.class))).thenReturn(promise(newActionResponse(null)));
  when(requestHandler.handleCreate(any(Context.class),any(CreateRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handleDelete(any(Context.class),any(DeleteRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handlePatch(any(Context.class),any(PatchRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handleQuery(any(Context.class),any(QueryRequest.class),any(QueryResourceHandler.class))).thenReturn(promise(newQueryResponse()));
  when(requestHandler.handleRead(any(Context.class),any(ReadRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handleUpdate(any(Context.class),any(UpdateRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  RequestHolder.set(mock(HttpServletRequest.class));
}","@BeforeMethod public void setup() throws Exception {
  MockitoAnnotations.initMocks(this);
  context=new InternalContext(new RealmContext(new RootContext()));
  requestHandler=mock(RequestHandler.class);
  when(requestHandler.handleAction(any(Context.class),any(ActionRequest.class))).thenReturn(promise(newActionResponse(null)));
  when(requestHandler.handleCreate(any(Context.class),any(CreateRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handleDelete(any(Context.class),any(DeleteRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handlePatch(any(Context.class),any(PatchRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handleQuery(any(Context.class),any(QueryRequest.class),any(QueryResourceHandler.class))).thenReturn(promise(newQueryResponse()));
  when(requestHandler.handleRead(any(Context.class),any(ReadRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
  when(requestHandler.handleUpdate(any(Context.class),any(UpdateRequest.class))).thenReturn(promise(newResourceResponse(null,null,null)));
}"
79726,"/** 
 * <p>Gets the instance of the UmaProviderSettings.</p> <p>Cache each provider settings on the realm it was created for.</p>
 * @param request The request instance from which the base URL can be deduced.
 * @param realm The realm.
 * @return The OAuth2ProviderSettings instance.
 */
public UmaProviderSettings get(HttpServletRequest request,String realm) throws NotFoundException {
synchronized (providerSettingsMap) {
    UmaProviderSettingsImpl providerSettings=providerSettingsMap.get(realm);
    if (providerSettings == null) {
      OAuth2ProviderSettings oAuth2ProviderSettings=oAuth2ProviderSettingsFactory.get(realm,request);
      String baseUrlPattern=baseURLProviderFactory.get(realm).getURL(request);
      UmaTokenStore tokenStore=tokenStoreFactory.create(realm);
      providerSettings=new UmaProviderSettingsImpl(realm,baseUrlPattern,tokenStore,oAuth2ProviderSettings);
      providerSettingsMap.put(realm,providerSettings);
    }
    return providerSettings;
  }
}","/** 
 * <p>Gets the instance of the UmaProviderSettings.</p> <p>Cache each provider settings on the realm it was created for.</p>
 * @param context The context instance from which the base URL can be deduced.
 * @param realm The realm.
 * @return The OAuth2ProviderSettings instance.
 */
public UmaProviderSettings get(Context context,String realm) throws NotFoundException {
synchronized (providerSettingsMap) {
    UmaProviderSettingsImpl providerSettings=providerSettingsMap.get(realm);
    if (providerSettings == null) {
      OAuth2ProviderSettings oAuth2ProviderSettings=oAuth2ProviderSettingsFactory.get(realm,context);
      String baseUrlPattern=baseURLProviderFactory.get(realm).getURL(context.asContext(HttpContext.class));
      providerSettings=getUmaProviderSettings(realm,oAuth2ProviderSettings,baseUrlPattern);
    }
    return providerSettings;
  }
}"
79727,"@Provides @Singleton Iterator<HttpRouteProvider> getHttpRouteProviders(){
  return ServiceLoader.load(HttpRouteProvider.class).iterator();
}","@Provides @Singleton Iterable<HttpRouteProvider> getHttpRouteProviders(){
  return ServiceLoader.load(HttpRouteProvider.class);
}"
79728,"Handler getHandler(){
  return handler.get();
}","Handler getHandler(){
  return new Handler(){
    @Override public Promise<Response,NeverThrowsException> handle(    Context context,    Request request){
      return handler.get().handle(context,request);
    }
  }
;
}"
79729,"AuthenticationFilter(CrestAuthenticationFilter authenticationFilter,AuthenticationModule authenticationModule){
  this.authenticationFilter=authenticationFilter;
  this.authenticationModule=authenticationModule;
}","AuthenticationFilter(Filter authenticationFilter,AuthenticationModule authenticationModule){
  this.authenticationFilter=authenticationFilter;
  this.authenticationModule=authenticationModule;
}"
79730,"@BeforeClass public void setupMocks(){
  restletXACMLServiceServlet=mock(RestletServiceServlet.class);
  restletOAuth2ServiceServlet=mock(RestletServiceServlet.class);
  restletUMAServiceServlet=mock(RestletServiceServlet.class);
}","@BeforeClass public void setupMocks(){
  restletXACMLServiceServlet=mock(RestletServiceServlet.class);
  restletOAuth2ServiceServlet=mock(RestletServiceServlet.class);
  restletUMAServiceServlet=mock(RestletServiceServlet.class);
  restletXACMLHttpServlet=mock(HttpServlet.class);
  authenticationFilter=mock(Filter.class);
}"
79731,"@Test(dataProvider=""String_Node_Str"") public void shouldHandleRequestWithRestletServlet(String path,RestletServiceServlet servlet) throws Exception {
  HttpServletRequest request=mock(HttpServletRequest.class);
  HttpServletResponse response=mock(HttpServletResponse.class);
  given(request.getServletPath()).willReturn(path);
  restEndpointServlet.service(request,response);
  verify(servlet).service(Matchers.<HttpServletRequest>anyObject(),eq(response));
  for (  RestletServiceServlet s : Arrays.asList(restletXACMLServiceServlet,restletOAuth2ServiceServlet,restletUMAServiceServlet)) {
    if (s != servlet) {
      verifyZeroInteractions(s);
    }
  }
}","@Test(dataProvider=""String_Node_Str"",enabled=false) public void shouldHandleRequestWithRestletServlet(String path,HttpServlet servlet) throws Exception {
  HttpServletRequest request=mock(HttpServletRequest.class);
  HttpServletResponse response=mock(HttpServletResponse.class);
  given(request.getHeaderNames()).willReturn(Collections.enumeration(Collections.emptySet()));
  given(request.getAttributeNames()).willReturn(Collections.enumeration(Collections.emptySet()));
  given(request.getServletPath()).willReturn(path);
  restEndpointServlet.init();
  restEndpointServlet.service(request,response);
  verify(servlet).service(Matchers.<HttpServletRequest>anyObject(),eq(response));
  for (  HttpServlet s : Arrays.asList(restletXACMLHttpServlet,restletOAuth2ServiceServlet,restletUMAServiceServlet)) {
    if (s != servlet) {
      verifyZeroInteractions(s);
    }
  }
}"
79732,"@DataProvider(name=""String_Node_Str"") public Object[][] restletPathData(){
  return new Object[][]{{""String_Node_Str"",restletXACMLServiceServlet},{""String_Node_Str"",restletOAuth2ServiceServlet},{""String_Node_Str"",restletUMAServiceServlet}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] restletPathData(){
  return new Object[][]{{""String_Node_Str"",restletXACMLHttpServlet},{""String_Node_Str"",restletOAuth2ServiceServlet},{""String_Node_Str"",restletUMAServiceServlet}};
}"
79733,"@BeforeMethod public void setUp(){
  reset(restletXACMLServiceServlet);
  reset(restletOAuth2ServiceServlet);
  reset(restletUMAServiceServlet);
  restEndpointServlet=new RestEndpointServlet(restletXACMLServiceServlet,restletOAuth2ServiceServlet,restletUMAServiceServlet);
}","@BeforeMethod public void setUp(){
  reset(restletXACMLServiceServlet,restletOAuth2ServiceServlet,restletUMAServiceServlet,restletXACMLHttpServlet,authenticationFilter);
  restEndpointServlet=new RestEndpointServlet(restletXACMLServiceServlet,restletOAuth2ServiceServlet,restletUMAServiceServlet,restletXACMLHttpServlet,authenticationFilter);
}"
79734,"private Promise<Collection<ResourceSetDescription>,ResourceException> getPolicies(final ServerContext context,QueryRequest policyQuery,final String resourceOwnerId,final Set<ResourceSetDescription> resourceSets,final boolean augmentWithPolicies,final ResourceSetWithPolicyQuery query){
  return policyService.queryPolicies(context,policyQuery).thenAsync(new AsyncFunction<Pair<QueryResult,Collection<UmaPolicy>>,Collection<ResourceSetDescription>,ResourceException>(){
    @Override public Promise<Collection<ResourceSetDescription>,ResourceException> apply(    final Pair<QueryResult,Collection<UmaPolicy>> result){
      final Set<ResourceSetDescription> filteredResourceSets=new HashSet<>();
      try {
        String realm=context.asContext(RealmContext.class).getResolvedRealm();
        Subject subject=createSubject(resourceOwnerId,realm);
        Evaluator evaluator=umaProviderSettingsFactory.get(realm).getPolicyEvaluator(subject);
        for (        UmaPolicy sharedPolicy : result.getSecond()) {
          String sharedResourceName=sharedPolicy.getResourceSet().getName();
          List<Entitlement> entitlements=evaluator.evaluate(realm,subject,sharedResourceName,null,false);
          if (!entitlements.isEmpty()) {
            resourceSets.add(sharedPolicy.getResourceSet());
          }
        }
        filteredResourceSets.addAll(query.getResourceSetQuery().accept(new QueryFilterVisitor<Set<ResourceSetDescription>,Set<ResourceSetDescription>,String>(){
          @Override public Set<ResourceSetDescription> visitAndFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          List<org.forgerock.util.query.QueryFilter<String>> list){
            for (            org.forgerock.util.query.QueryFilter<String> filter : list) {
              resourceSetDescriptions.retainAll(filter.accept(this,resourceSetDescriptions));
            }
            return resourceSetDescriptions;
          }
          @Override public Set<ResourceSetDescription> visitBooleanLiteralFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          boolean value){
            if (value) {
              return resourceSetDescriptions;
            }
 else {
              return Collections.EMPTY_SET;
            }
          }
          @Override public Set<ResourceSetDescription> visitContainsFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String fieldName,          Object value){
            Set<ResourceSetDescription> results=new HashSet<>();
            for (            ResourceSetDescription resourceSetDescription : resourceSetDescriptions) {
              if (fieldName.equals(""String_Node_Str"")) {
                if (resourceSetDescription.getName().toLowerCase().contains(((String)value).toLowerCase())) {
                  results.add(resourceSetDescription);
                }
              }
            }
            return results;
          }
          @Override public Set<ResourceSetDescription> visitEqualsFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String fieldName,          Object value){
            Set<ResourceSetDescription> results=new HashSet<>();
            for (            ResourceSetDescription resourceSetDescription : resourceSetDescriptions) {
              if (fieldName.equals(ResourceSetTokenField.RESOURCE_OWNER_ID)) {
                if (resourceSetDescription.getResourceOwnerId().equals(value)) {
                  results.add(resourceSetDescription);
                }
              }
 else               if (fieldName.equals(ResourceSetTokenField.RESOURCE_SET_ID)) {
                if (resourceSetDescription.getId().equals(value)) {
                  results.add(resourceSetDescription);
                }
              }
            }
            return results;
          }
          @Override public Set<ResourceSetDescription> visitExtendedMatchFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          String s2,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitGreaterThanFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitGreaterThanOrEqualToFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitLessThanFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitLessThanOrEqualToFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitNotFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          org.forgerock.util.query.QueryFilter<String> queryFilter){
            Set<ResourceSetDescription> excludedResourceSets=queryFilter.accept(this,resourceSetDescriptions);
            resourceSetDescriptions.removeAll(excludedResourceSets);
            return resourceSetDescriptions;
          }
          @Override public Set<ResourceSetDescription> visitOrFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          List<org.forgerock.util.query.QueryFilter<String>> list){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitPresentFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitStartsWithFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
        }
,resourceSets));
        return Promises.newResultPromise((Collection<ResourceSetDescription>)filteredResourceSets);
      }
 catch (      EntitlementException e) {
        return Promises.newExceptionPromise((ResourceException)new InternalServerErrorException(e));
      }
    }
  }
);
}","private Promise<Collection<ResourceSetDescription>,ResourceException> getPolicies(final ServerContext context,QueryRequest policyQuery,final String resourceOwnerId,final Set<ResourceSetDescription> resourceSets,final boolean augmentWithPolicies,final ResourceSetWithPolicyQuery query){
  return policyService.queryPolicies(context,policyQuery).thenAsync(new AsyncFunction<Pair<QueryResult,Collection<UmaPolicy>>,Collection<ResourceSetDescription>,ResourceException>(){
    @Override public Promise<Collection<ResourceSetDescription>,ResourceException> apply(    final Pair<QueryResult,Collection<UmaPolicy>> result){
      final Set<ResourceSetDescription> filteredResourceSets=new HashSet<>();
      try {
        String realm=context.asContext(RealmContext.class).getResolvedRealm();
        Subject subject=createSubject(resourceOwnerId,realm);
        Evaluator evaluator=umaProviderSettingsFactory.get(realm).getPolicyEvaluator(subject);
        for (        UmaPolicy sharedPolicy : result.getSecond()) {
          if (!containsResourceSet(resourceSets,sharedPolicy.getResourceSet())) {
            String sharedResourceName=sharedPolicy.getResourceSet().getName();
            List<Entitlement> entitlements=evaluator.evaluate(realm,subject,sharedResourceName,null,false);
            if (!entitlements.isEmpty()) {
              resourceSets.add(sharedPolicy.getResourceSet());
            }
          }
        }
        filteredResourceSets.addAll(query.getResourceSetQuery().accept(new QueryFilterVisitor<Set<ResourceSetDescription>,Set<ResourceSetDescription>,String>(){
          @Override public Set<ResourceSetDescription> visitAndFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          List<org.forgerock.util.query.QueryFilter<String>> list){
            for (            org.forgerock.util.query.QueryFilter<String> filter : list) {
              resourceSetDescriptions.retainAll(filter.accept(this,resourceSetDescriptions));
            }
            return resourceSetDescriptions;
          }
          @Override public Set<ResourceSetDescription> visitBooleanLiteralFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          boolean value){
            if (value) {
              return resourceSetDescriptions;
            }
 else {
              return Collections.EMPTY_SET;
            }
          }
          @Override public Set<ResourceSetDescription> visitContainsFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String fieldName,          Object value){
            Set<ResourceSetDescription> results=new HashSet<>();
            for (            ResourceSetDescription resourceSetDescription : resourceSetDescriptions) {
              if (fieldName.equals(""String_Node_Str"")) {
                if (resourceSetDescription.getName().toLowerCase().contains(((String)value).toLowerCase())) {
                  results.add(resourceSetDescription);
                }
              }
            }
            return results;
          }
          @Override public Set<ResourceSetDescription> visitEqualsFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String fieldName,          Object value){
            Set<ResourceSetDescription> results=new HashSet<>();
            for (            ResourceSetDescription resourceSetDescription : resourceSetDescriptions) {
              if (fieldName.equals(ResourceSetTokenField.RESOURCE_OWNER_ID)) {
                if (resourceSetDescription.getResourceOwnerId().equals(value)) {
                  results.add(resourceSetDescription);
                }
              }
 else               if (fieldName.equals(ResourceSetTokenField.RESOURCE_SET_ID)) {
                if (resourceSetDescription.getId().equals(value)) {
                  results.add(resourceSetDescription);
                }
              }
            }
            return results;
          }
          @Override public Set<ResourceSetDescription> visitExtendedMatchFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          String s2,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitGreaterThanFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitGreaterThanOrEqualToFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitLessThanFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitLessThanOrEqualToFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitNotFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          org.forgerock.util.query.QueryFilter<String> queryFilter){
            Set<ResourceSetDescription> excludedResourceSets=queryFilter.accept(this,resourceSetDescriptions);
            resourceSetDescriptions.removeAll(excludedResourceSets);
            return resourceSetDescriptions;
          }
          @Override public Set<ResourceSetDescription> visitOrFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          List<org.forgerock.util.query.QueryFilter<String>> list){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitPresentFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
          @Override public Set<ResourceSetDescription> visitStartsWithFilter(          Set<ResourceSetDescription> resourceSetDescriptions,          String s,          Object o){
            throw new UnsupportedOperationException(""String_Node_Str"");
          }
        }
,resourceSets));
        return Promises.newResultPromise((Collection<ResourceSetDescription>)filteredResourceSets);
      }
 catch (      EntitlementException e) {
        return Promises.newExceptionPromise((ResourceException)new InternalServerErrorException(e));
      }
    }
  }
);
}"
79735,"/** 
 * @return the value of the default CTS root suffix
 */
@VisibleForTesting DN getDefaultRootSuffix(){
  return defaultRootSuffix;
}","/** 
 * @return the value of the default CTS root suffix
 */
public DN getDefaultRootSuffix(){
  return defaultRootSuffix;
}"
79736,"/** 
 * Performs the upgrade by traversing through the candidate LDIF files and tries to process them. If embedded configuration store is used the indexes are also rebuilt as part of the upgrade. That will make sure that the newly created indexes are all operational.
 * @throws UpgradeException If there was an error while processing the LDIF files.
 */
public void upgrade() throws UpgradeException {
  Connection conn=null;
  try {
    conn=connFactory.create();
    for (    Upgrader upgrader : upgraders) {
      processLDIF(conn,upgrader.getLDIFPath());
    }
  }
 catch (  DataLayerException ere) {
    DEBUG.error(""String_Node_Str"",ere);
    throw new UpgradeException(ere);
  }
 finally {
    IOUtils.closeIfNotNull(conn);
  }
  if (EmbeddedOpenDS.isStarted()) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"");
    }
    Map<String,String> rebuildIndexData=new HashMap<String,String>(2);
    rebuildIndexData.put(SetupConstants.CONFIG_VAR_BASE_DIR,baseDir);
    rebuildIndexData.put(SetupConstants.CONFIG_VAR_ROOT_SUFFIX,baseDN);
    try {
      EmbeddedOpenDS.rebuildIndex(rebuildIndexData);
    }
 catch (    Exception ex) {
      throw new UpgradeException(ex);
    }
  }
}","/** 
 * Performs the upgrade by traversing through the candidate LDIF files and tries to process them. If embedded configuration store is used the indexes are also rebuilt as part of the upgrade. That will make sure that the newly created indexes are all operational.
 * @throws UpgradeException If there was an error while processing the LDIF files.
 */
public void upgrade() throws UpgradeException {
  Connection conn=null;
  try {
    conn=connFactory.create();
    for (    Upgrader upgrader : upgraders) {
      processLDIF(conn,upgrader.getLDIFPath());
    }
  }
 catch (  DataLayerException ere) {
    DEBUG.error(""String_Node_Str"",ere);
    throw new UpgradeException(ere);
  }
 finally {
    IOUtils.closeIfNotNull(conn);
  }
  if (isEmbedded) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"");
    }
    Map<String,String> rebuildIndexData=new HashMap<String,String>(2);
    rebuildIndexData.put(SetupConstants.CONFIG_VAR_BASE_DIR,baseDir);
    rebuildIndexData.put(SetupConstants.CONFIG_VAR_ROOT_SUFFIX,baseDN);
    try {
      EmbeddedOpenDS.rebuildIndex(rebuildIndexData);
    }
 catch (    Exception ex) {
      throw new UpgradeException(ex);
    }
  }
}"
79737,"/** 
 * This constructor will initialize the different directory content upgraders and ensures that each of them are actually applicable. At the end this upgrader will have a list of   {@link Upgrader}s that needs to be executed.
 * @param baseDir The base directory of OpenAM (where the configuration can be found).
 * @param baseDN The base DN of the configuration store.
 * @throws UpgradeException If there was a problem while checking if a given Upgrader is applicable.
 */
public DirectoryContentUpgrader(String baseDir,String baseDN) throws UpgradeException {
  this.baseDir=baseDir;
  this.baseDN=baseDN;
  Key<ConnectionFactory> key=Key.get(ConnectionFactory.class,DataLayer.Types.typed(ConnectionType.DATA_LAYER));
  connFactory=InjectorHolder.getInstance(key);
  upgraders.add(new AddCTSSchema());
  upgraders.add(new CreateCTSContainer());
  if (EmbeddedOpenDS.isStarted()) {
    upgraders.add(new CreateCTSIndexes());
    upgraders.add(new AddDashboardSchema());
    upgraders.add(new AddDevicePrintSchema());
    upgraders.add(new AddUmaAuditSchema());
    upgraders.add(new AddResourceSetsSchema());
    upgraders.add(new AddUmaPendingRequestsSchema());
    upgraders.add(new AddOATHDeviceSchema());
    upgraders.add(new OATH2FASchema());
  }
  Connection conn=null;
  try {
    conn=connFactory.create();
    Schema schema=null;
    try {
      schema=Schema.readSchemaForEntry(conn,DN.valueOf(baseDN)).asStrictSchema();
    }
 catch (    ErrorResultException ere) {
      DEBUG.error(""String_Node_Str"",ere);
    }
    Iterator<Upgrader> it=upgraders.iterator();
    while (it.hasNext()) {
      if (!it.next().isUpgradeNecessary(conn,schema)) {
        it.remove();
      }
    }
  }
 catch (  DataLayerException ere) {
    DEBUG.error(""String_Node_Str"",ere);
    throw new UpgradeException(ere);
  }
 finally {
    IOUtils.closeIfNotNull(conn);
  }
}","/** 
 * This constructor will initialize the different directory content upgraders and ensures that each of them are actually applicable. At the end this upgrader will have a list of   {@link Upgrader}s that needs to be executed.
 * @param baseDir The base directory of OpenAM (where the configuration can be found).
 * @param baseDN The base DN of the configuration store.
 * @throws UpgradeException If there was a problem while checking if a given Upgrader is applicable.
 */
public DirectoryContentUpgrader(String baseDir,String baseDN) throws UpgradeException {
  this.baseDir=baseDir;
  this.baseDN=baseDN;
  isEmbedded=EmbeddedOpenDS.isStarted();
  ctsConfig=InjectorHolder.getInstance(CTSDataLayerConfiguration.class);
  Key<ConnectionFactory> key=Key.get(ConnectionFactory.class,DataLayer.Types.typed(ConnectionType.DATA_LAYER));
  connFactory=InjectorHolder.getInstance(key);
  upgraders.add(new AddCTSSchema());
  upgraders.add(new CreateCTSContainer());
  if (isEmbedded) {
    upgraders.add(new CreateCTSIndexes());
    upgraders.add(new AddDashboardSchema());
    upgraders.add(new AddDevicePrintSchema());
    upgraders.add(new AddUmaAuditSchema());
    upgraders.add(new AddResourceSetsSchema());
    upgraders.add(new AddUmaPendingRequestsSchema());
    upgraders.add(new AddOATHDeviceSchema());
    upgraders.add(new OATH2FASchema());
  }
  Connection conn=null;
  try {
    conn=connFactory.create();
    Schema schema=null;
    try {
      schema=Schema.readSchemaForEntry(conn,DN.valueOf(baseDN)).asStrictSchema();
    }
 catch (    ErrorResultException ere) {
      DEBUG.error(""String_Node_Str"",ere);
    }
    Iterator<Upgrader> it=upgraders.iterator();
    while (it.hasNext()) {
      if (!it.next().isUpgradeNecessary(conn,schema)) {
        it.remove();
      }
    }
  }
 catch (  DataLayerException ere) {
    DEBUG.error(""String_Node_Str"",ere);
    throw new UpgradeException(ere);
  }
 finally {
    IOUtils.closeIfNotNull(conn);
  }
}"
79738,"private JsonValue parseOptions(String options){
  if (options == null) {
    return json(""String_Node_Str"");
  }
  if (KEY_VALUE_PAIR_REGEX.matcher(options).matches()) {
    JsonValue optionsValue=json(object());
    for (    String pair : options.split(""String_Node_Str"")) {
      String[] keyValue=pair.trim().split(""String_Node_Str"");
      if (keyValue.length != 2) {
        return json(options);
      }
      optionsValue.add(keyValue[0],keyValue[1]);
    }
    return optionsValue;
  }
 else {
    return json(options);
  }
}","private JsonValue parseOptions(String options){
  if (options == null || options.isEmpty()) {
    return json(object());
  }
  if (KEY_VALUE_PAIR_REGEX.matcher(options).matches()) {
    JsonValue optionsValue=json(object());
    for (    String pair : options.split(""String_Node_Str"")) {
      String[] keyValue=pair.trim().split(""String_Node_Str"");
      if (keyValue.length != 2) {
        return json(options);
      }
      optionsValue.add(keyValue[0],keyValue[1]);
    }
    return optionsValue;
  }
 else {
    return json(options);
  }
}"
79739,"private JsonValue transformRequestBody(JsonValue body) throws InternalServerErrorException {
  if (body.isDefined(""String_Node_Str"")) {
    try {
      List<AuthConfigurationEntry> entries=new ArrayList<>();
      for (      JsonValue entry : body.get(""String_Node_Str"")) {
        String module=entry.get(""String_Node_Str"").asString();
        String criteria=entry.get(""String_Node_Str"").asString();
        String options;
        if (entry.get(""String_Node_Str"").isString()) {
          options=entry.get(""String_Node_Str"").asString();
        }
 else {
          StringBuilder optionsBuilder=new StringBuilder();
          for (          Map.Entry<String,String> option : entry.get(""String_Node_Str"").asMap(String.class).entrySet()) {
            optionsBuilder.append(option.getKey()).append(""String_Node_Str"").append(option.getValue()).append(""String_Node_Str"");
          }
          options=optionsBuilder.substring(0,optionsBuilder.length() - 1);
        }
        entries.add(new AuthConfigurationEntry(module,criteria,options));
      }
      body.put(""String_Node_Str"",AMAuthConfigUtils.authConfigurationEntryToXMLString(entries));
    }
 catch (    AMConfigurationException e) {
      throw new InternalServerErrorException(""String_Node_Str"",e);
    }
  }
  return body;
}","private JsonValue transformRequestBody(JsonValue body) throws InternalServerErrorException {
  if (body.isDefined(""String_Node_Str"")) {
    try {
      List<AuthConfigurationEntry> entries=new ArrayList<>();
      for (      JsonValue entry : body.get(""String_Node_Str"")) {
        String module=entry.get(""String_Node_Str"").asString();
        String criteria=entry.get(""String_Node_Str"").asString();
        String options=getOptions(entry);
        entries.add(new AuthConfigurationEntry(module,criteria,options));
      }
      body.put(""String_Node_Str"",AMAuthConfigUtils.authConfigurationEntryToXMLString(entries));
    }
 catch (    AMConfigurationException e) {
      throw new InternalServerErrorException(""String_Node_Str"",e);
    }
  }
  return body;
}"
79740,"/** 
 * Populate the map containing the headers keys and values based on the   {@link FilterConfig}.   {@inheritDoc}
 */
@Override public void init(FilterConfig config) throws ServletException {
  if (config != null) {
    Enumeration<String> initParams=config.getInitParameterNames();
    while (initParams.hasMoreElements()) {
      String headerKey=initParams.nextElement();
      headerKeyValues.put(headerKey,config.getInitParameter(headerKey));
    }
  }
}","/** 
 * Initializes the filter based on the   {@link FilterConfig}. The ""excludes"" init parameter is used to prevent the filter from setting the headers when accessing certain URIs. Any other init parameter specified in web.xml will be handled as a headername-headervalue pair that should be added to the HttpServletResponse.  {@inheritDoc}
 */
@Override public void init(FilterConfig config) throws ServletException {
  if (config != null) {
    contextPathLength=config.getServletContext().getContextPath().length();
    Enumeration<String> initParams=config.getInitParameterNames();
    while (initParams.hasMoreElements()) {
      String key=initParams.nextElement();
      String value=config.getInitParameter(key);
      if (EXCLUDES.equals(key)) {
        excludes.addAll(Arrays.asList(value.split(""String_Node_Str"")));
      }
 else {
        headerKeyValues.put(key,value);
      }
    }
  }
}"
79741,"/** 
 * Set HTTP Headers based on the values in the filterConfig init-parameters.  {@inheritDoc}
 */
@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  HttpServletResponse httpServletResponse=(HttpServletResponse)servletResponse;
  HttpServletRequest httpServleRequest=(HttpServletRequest)servletRequest;
  for (  Map.Entry<String,String> entry : headerKeyValues.entrySet()) {
    httpServletResponse.addHeader(entry.getKey(),entry.getValue());
  }
  filterChain.doFilter(httpServleRequest,httpServletResponse);
}","/** 
 * Set HTTP Headers based on the values in the filterConfig init-parameters.  {@inheritDoc}
 */
@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  HttpServletRequest httpServletRequest=(HttpServletRequest)servletRequest;
  HttpServletResponse httpServletResponse=(HttpServletResponse)servletResponse;
  if (!excludes.contains(httpServletRequest.getRequestURI().substring(contextPathLength))) {
    for (    Map.Entry<String,String> entry : headerKeyValues.entrySet()) {
      httpServletResponse.addHeader(entry.getKey(),entry.getValue());
    }
  }
  filterChain.doFilter(httpServletRequest,httpServletResponse);
}"
79742,"/** 
 * Initialises the JwtSessionModule for use by the Post Authentication Process.
 * @param requestParamsMap {@inheritDoc}
 * @param request {@inheritDoc}
 * @param response {@inheritDoc}
 * @param ssoToken {@inheritDoc}
 * @return {@inheritDoc}
 * @throws AuthenticationException {@inheritDoc}
 */
@Override protected Map<String,Object> initialize(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {
  try {
    final String tokenIdleTime=ssoToken.getProperty(JwtSessionModule.TOKEN_IDLE_TIME_CLAIM_KEY);
    final String maxTokenLife=ssoToken.getProperty(JwtSessionModule.MAX_TOKEN_LIFE_KEY);
    final boolean enforceClientIP=Boolean.parseBoolean(ssoToken.getProperty(ENFORCE_CLIENT_IP_SETTING_KEY));
    final String realm=ssoToken.getProperty(SSO_TOKEN_ORGANIZATION_PROPERTY_KEY);
    boolean secureCookie=Boolean.parseBoolean(ssoToken.getProperty(SECURE_COOKIE_KEY));
    boolean httpOnlyCookie=Boolean.parseBoolean(ssoToken.getProperty(HTTP_ONLY_COOKIE_KEY));
    String cookieName=ssoToken.getProperty(COOKIE_NAME_KEY);
    Collection<String> cookieDomains=Arrays.asList(ssoToken.getProperty(COOKIE_DOMAINS_KEY).split(""String_Node_Str""));
    return initialize(tokenIdleTime,maxTokenLife,enforceClientIP,realm,secureCookie,httpOnlyCookie,cookieName,cookieDomains);
  }
 catch (  SSOException e) {
    DEBUG.error(""String_Node_Str"",e);
    throw new AuthenticationException(e.getLocalizedMessage());
  }
catch (  SMSException e) {
    DEBUG.error(""String_Node_Str"",e);
    throw new AuthenticationException(e.getLocalizedMessage());
  }
}","/** 
 * Initialises the JwtSessionModule for use by the Post Authentication Process.
 * @param requestParamsMap {@inheritDoc}
 * @param request {@inheritDoc}
 * @param response {@inheritDoc}
 * @param ssoToken {@inheritDoc}
 * @return {@inheritDoc}
 * @throws AuthenticationException {@inheritDoc}
 */
@Override protected Map<String,Object> initialize(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {
  try {
    final String tokenIdleTime=ssoToken.getProperty(JwtSessionModule.TOKEN_IDLE_TIME_CLAIM_KEY);
    final String maxTokenLife=ssoToken.getProperty(JwtSessionModule.MAX_TOKEN_LIFE_KEY);
    final boolean enforceClientIP=Boolean.parseBoolean(ssoToken.getProperty(ENFORCE_CLIENT_IP_SETTING_KEY));
    final String realm=ssoToken.getProperty(SSO_TOKEN_ORGANIZATION_PROPERTY_KEY);
    boolean secureCookie=Boolean.parseBoolean(ssoToken.getProperty(SECURE_COOKIE_KEY));
    boolean httpOnlyCookie=Boolean.parseBoolean(ssoToken.getProperty(HTTP_ONLY_COOKIE_KEY));
    String cookieName=ssoToken.getProperty(COOKIE_NAME_KEY);
    String cookieDomainsString=ssoToken.getProperty(COOKIE_DOMAINS_KEY);
    Collection<String> cookieDomains;
    if (cookieDomainsString.isEmpty()) {
      cookieDomains=Collections.singleton(null);
    }
 else {
      cookieDomains=Arrays.asList(cookieDomainsString.split(""String_Node_Str""));
    }
    return initialize(tokenIdleTime,maxTokenLife,enforceClientIP,realm,secureCookie,httpOnlyCookie,cookieName,cookieDomains);
  }
 catch (  SSOException e) {
    DEBUG.error(""String_Node_Str"",e);
    throw new AuthenticationException(e.getLocalizedMessage());
  }
catch (  SMSException e) {
    DEBUG.error(""String_Node_Str"",e);
    throw new AuthenticationException(e.getLocalizedMessage());
  }
}"
79743,"public Set getAssignedServices(SSOToken token,IdType type,String name,Map mapOfServiceNamesAndOCs,String amOrgName,String amsdkDN) throws IdRepoException, SSOException {
  IdRepoException origEx=null;
  checkPermission(token,amOrgName,name,null,IdOperation.READ,type);
  Set configuredPluginClasses=idrepoCache.getIdRepoPlugins(amOrgName,IdOperation.SERVICE,type);
  if ((configuredPluginClasses == null) || configuredPluginClasses.isEmpty()) {
    if (ServiceManager.getBaseDN().equalsIgnoreCase(amOrgName) && (type.equals(IdType.REALM))) {
      return (configuredPluginClasses);
    }
 else {
      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",null);
    }
  }
  Iterator it=configuredPluginClasses.iterator();
  int noOfSuccess=configuredPluginClasses.size();
  IdRepo idRepo=null;
  Set resultsSet=new HashSet();
  while (it.hasNext()) {
    IdRepo repo=(IdRepo)it.next();
    try {
      Set services=null;
      if (repo.getClass().getName().equals(IdConstants.AMSDK_PLUGIN) && amsdkDN != null) {
        services=repo.getAssignedServices(token,type,amsdkDN,mapOfServiceNamesAndOCs);
      }
 else {
        services=repo.getAssignedServices(token,type,name,mapOfServiceNamesAndOCs);
      }
      if (services != null && !services.isEmpty()) {
        resultsSet.addAll(services);
      }
    }
 catch (    IdRepoUnsupportedOpException ide) {
      if (idRepo != null && DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
catch (    IdRepoFatalException idf) {
      DEBUG.error(""String_Node_Str"" + ""String_Node_Str"",idf);
      throw idf;
    }
catch (    IdRepoException ide) {
      if (idRepo != null && DEBUG.warningEnabled()) {
        DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + idRepo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
  }
  if (noOfSuccess == 0) {
    if (DEBUG.warningEnabled()) {
      DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + type.getName() + ""String_Node_Str""+ name+ ""String_Node_Str"",origEx);
    }
    throw origEx;
  }
 else {
    return resultsSet;
  }
}","public Set<String> getAssignedServices(SSOToken token,IdType type,String name,Map mapOfServiceNamesAndOCs,String amOrgName,String amsdkDN) throws IdRepoException, SSOException {
  IdRepoException origEx=null;
  checkPermission(token,amOrgName,name,null,IdOperation.READ,type);
  Set<IdRepo> configuredPluginClasses=idrepoCache.getIdRepoPlugins(amOrgName,IdOperation.SERVICE,type);
  if (configuredPluginClasses == null || configuredPluginClasses.isEmpty()) {
    if (type.equals(IdType.REALM)) {
      return Collections.emptySet();
    }
  }
  int noOfSuccess=configuredPluginClasses.size();
  Set<String> resultsSet=new HashSet<String>();
  for (  IdRepo repo : configuredPluginClasses) {
    try {
      Set<String> services;
      if (repo.getClass().getName().equals(IdConstants.AMSDK_PLUGIN) && amsdkDN != null) {
        services=repo.getAssignedServices(token,type,amsdkDN,mapOfServiceNamesAndOCs);
      }
 else {
        services=repo.getAssignedServices(token,type,name,mapOfServiceNamesAndOCs);
      }
      if (services != null && !services.isEmpty()) {
        resultsSet.addAll(services);
      }
    }
 catch (    IdRepoUnsupportedOpException ide) {
      if (DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=origEx == null ? ide : origEx;
    }
catch (    IdRepoFatalException idf) {
      DEBUG.error(""String_Node_Str"",idf);
      throw idf;
    }
catch (    IdRepoException ide) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
  }
  if (noOfSuccess == 0) {
    if (DEBUG.warningEnabled()) {
      DEBUG.warning(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ name+ ""String_Node_Str"",origEx);
    }
    throw origEx;
  }
 else {
    return resultsSet;
  }
}"
79744,"public Set getAssignedServices(SSOToken token,IdType type,String name,Map mapOfServiceNamesAndOCs,String amOrgName,String amsdkDN) throws IdRepoException, SSOException {
  IdRepoException origEx=null;
  checkPermission(token,amOrgName,name,null,IdOperation.READ,type);
  Set configuredPluginClasses=idrepoCache.getIdRepoPlugins(amOrgName,IdOperation.SERVICE,type);
  if ((configuredPluginClasses == null) || configuredPluginClasses.isEmpty()) {
    if (ServiceManager.getBaseDN().equalsIgnoreCase(amOrgName) && (type.equals(IdType.REALM))) {
      return (configuredPluginClasses);
    }
 else {
      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",null);
    }
  }
  Iterator it=configuredPluginClasses.iterator();
  int noOfSuccess=configuredPluginClasses.size();
  IdRepo idRepo=null;
  Set resultsSet=new HashSet();
  while (it.hasNext()) {
    IdRepo repo=(IdRepo)it.next();
    try {
      Set services=null;
      if (repo.getClass().getName().equals(IdConstants.AMSDK_PLUGIN) && amsdkDN != null) {
        services=repo.getAssignedServices(token,type,amsdkDN,mapOfServiceNamesAndOCs);
      }
 else {
        services=repo.getAssignedServices(token,type,name,mapOfServiceNamesAndOCs);
      }
      if (services != null && !services.isEmpty()) {
        resultsSet.addAll(services);
      }
    }
 catch (    IdRepoUnsupportedOpException ide) {
      if (idRepo != null && DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
catch (    IdRepoFatalException idf) {
      DEBUG.error(""String_Node_Str"" + ""String_Node_Str"",idf);
      throw idf;
    }
catch (    IdRepoException ide) {
      if (idRepo != null && DEBUG.warningEnabled()) {
        DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + idRepo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
  }
  if (noOfSuccess == 0) {
    if (DEBUG.warningEnabled()) {
      DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + type.getName() + ""String_Node_Str""+ name+ ""String_Node_Str"",origEx);
    }
    throw origEx;
  }
 else {
    return resultsSet;
  }
}","public Set<String> getAssignedServices(SSOToken token,IdType type,String name,Map mapOfServiceNamesAndOCs,String amOrgName,String amsdkDN) throws IdRepoException, SSOException {
  IdRepoException origEx=null;
  checkPermission(token,amOrgName,name,null,IdOperation.READ,type);
  Set<IdRepo> configuredPluginClasses=idrepoCache.getIdRepoPlugins(amOrgName,IdOperation.SERVICE,type);
  if (configuredPluginClasses == null || configuredPluginClasses.isEmpty()) {
    if (type.equals(IdType.REALM)) {
      return Collections.emptySet();
    }
  }
  int noOfSuccess=configuredPluginClasses.size();
  Set<String> resultsSet=new HashSet<String>();
  for (  IdRepo repo : configuredPluginClasses) {
    try {
      Set<String> services;
      if (repo.getClass().getName().equals(IdConstants.AMSDK_PLUGIN) && amsdkDN != null) {
        services=repo.getAssignedServices(token,type,amsdkDN,mapOfServiceNamesAndOCs);
      }
 else {
        services=repo.getAssignedServices(token,type,name,mapOfServiceNamesAndOCs);
      }
      if (services != null && !services.isEmpty()) {
        resultsSet.addAll(services);
      }
    }
 catch (    IdRepoUnsupportedOpException ide) {
      if (DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=origEx == null ? ide : origEx;
    }
catch (    IdRepoFatalException idf) {
      DEBUG.error(""String_Node_Str"",idf);
      throw idf;
    }
catch (    IdRepoException ide) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
  }
  if (noOfSuccess == 0) {
    if (DEBUG.warningEnabled()) {
      DEBUG.warning(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ name+ ""String_Node_Str"",origEx);
    }
    throw origEx;
  }
 else {
    return resultsSet;
  }
}"
79745,"public Set getAssignedServices(SSOToken token,IdType type,String name,Map mapOfServiceNamesAndOCs,String amOrgName,String amsdkDN) throws IdRepoException, SSOException {
  IdRepoException origEx=null;
  checkPermission(token,amOrgName,name,null,IdOperation.READ,type);
  Set configuredPluginClasses=idrepoCache.getIdRepoPlugins(amOrgName,IdOperation.SERVICE,type);
  if ((configuredPluginClasses == null) || configuredPluginClasses.isEmpty()) {
    if (ServiceManager.getBaseDN().equalsIgnoreCase(amOrgName) && (type.equals(IdType.REALM))) {
      return (configuredPluginClasses);
    }
 else {
      throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,""String_Node_Str"",null);
    }
  }
  Iterator it=configuredPluginClasses.iterator();
  int noOfSuccess=configuredPluginClasses.size();
  IdRepo idRepo=null;
  Set resultsSet=new HashSet();
  while (it.hasNext()) {
    IdRepo repo=(IdRepo)it.next();
    try {
      Set services=null;
      if (repo.getClass().getName().equals(IdConstants.AMSDK_PLUGIN) && amsdkDN != null) {
        services=repo.getAssignedServices(token,type,amsdkDN,mapOfServiceNamesAndOCs);
      }
 else {
        services=repo.getAssignedServices(token,type,name,mapOfServiceNamesAndOCs);
      }
      if (services != null && !services.isEmpty()) {
        resultsSet.addAll(services);
      }
    }
 catch (    IdRepoUnsupportedOpException ide) {
      if (idRepo != null && DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
catch (    IdRepoFatalException idf) {
      DEBUG.error(""String_Node_Str"" + ""String_Node_Str"",idf);
      throw idf;
    }
catch (    IdRepoException ide) {
      if (idRepo != null && DEBUG.warningEnabled()) {
        DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + idRepo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
  }
  if (noOfSuccess == 0) {
    if (DEBUG.warningEnabled()) {
      DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + type.getName() + ""String_Node_Str""+ name+ ""String_Node_Str"",origEx);
    }
    throw origEx;
  }
 else {
    return resultsSet;
  }
}","public Set<String> getAssignedServices(SSOToken token,IdType type,String name,Map mapOfServiceNamesAndOCs,String amOrgName,String amsdkDN) throws IdRepoException, SSOException {
  IdRepoException origEx=null;
  checkPermission(token,amOrgName,name,null,IdOperation.READ,type);
  Set<IdRepo> configuredPluginClasses=idrepoCache.getIdRepoPlugins(amOrgName,IdOperation.SERVICE,type);
  if (configuredPluginClasses == null || configuredPluginClasses.isEmpty()) {
    if (type.equals(IdType.REALM)) {
      return Collections.emptySet();
    }
  }
  int noOfSuccess=configuredPluginClasses.size();
  Set<String> resultsSet=new HashSet<String>();
  for (  IdRepo repo : configuredPluginClasses) {
    try {
      Set<String> services;
      if (repo.getClass().getName().equals(IdConstants.AMSDK_PLUGIN) && amsdkDN != null) {
        services=repo.getAssignedServices(token,type,amsdkDN,mapOfServiceNamesAndOCs);
      }
 else {
        services=repo.getAssignedServices(token,type,name,mapOfServiceNamesAndOCs);
      }
      if (services != null && !services.isEmpty()) {
        resultsSet.addAll(services);
      }
    }
 catch (    IdRepoUnsupportedOpException ide) {
      if (DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=origEx == null ? ide : origEx;
    }
catch (    IdRepoFatalException idf) {
      DEBUG.error(""String_Node_Str"",idf);
      throw idf;
    }
catch (    IdRepoException ide) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""String_Node_Str"" + ""String_Node_Str"" + repo.getClass().getName() + ""String_Node_Str""+ ide.getMessage());
      }
      noOfSuccess--;
      origEx=(origEx == null) ? ide : origEx;
    }
  }
  if (noOfSuccess == 0) {
    if (DEBUG.warningEnabled()) {
      DEBUG.warning(""String_Node_Str"" + type.getName() + ""String_Node_Str""+ name+ ""String_Node_Str"",origEx);
    }
    throw origEx;
  }
 else {
    return resultsSet;
  }
}"
79746,"void updateSessionForFailover(){
  if (!isNoSession() || stateless) {
    return;
  }
  getSession().setIsISStored(true);
}","void updateSessionForFailover(){
  if (stateless || isNoSession()) {
    return;
  }
  getSession().setIsISStored(true);
}"
79747,"private static String getResponseLocation(SingleLogoutServiceElement endpoint){
  String location=endpoint.getResponseLocation();
  if (location == null) {
    location=endpoint.getLocation();
  }
  return location;
}","private static String getResponseLocation(SingleLogoutServiceElement endpoint){
  String location=endpoint.getResponseLocation();
  if (StringUtils.isBlank(location)) {
    location=endpoint.getLocation();
  }
  return location;
}"
79748,"private static String getResponseLocation(SingleLogoutServiceElement endpoint){
  String location=endpoint.getResponseLocation();
  if (location == null) {
    location=endpoint.getLocation();
  }
  return location;
}","private static String getResponseLocation(SingleLogoutServiceElement endpoint){
  String location=endpoint.getResponseLocation();
  if (StringUtils.isBlank(location)) {
    location=endpoint.getLocation();
  }
  return location;
}"
79749,"@Test public void rotationInDSTDateOctober() throws Exception {
  Calendar calDSTOctober=Calendar.getInstance();
  calDSTOctober.set(Calendar.YEAR,2015);
  calDSTOctober.set(Calendar.MONTH,Calendar.OCTOBER);
  calDSTOctober.set(Calendar.DAY_OF_MONTH,26);
  calDSTOctober.set(Calendar.HOUR_OF_DAY,1);
  calDSTOctober.set(Calendar.MINUTE,58);
  calDSTOctober.set(Calendar.SECOND,0);
  calDSTOctober.set(Calendar.MILLISECOND,0);
  long fakeInitTime=calDSTOctober.getTimeInMillis();
  System.out.println(TimeZone.getDefault().getDisplayName());
  System.out.println(TimeZone.getDefault().getID());
  System.out.println(""String_Node_Str"" + dateFormat.format(calDSTOctober.getTime()) + ""String_Node_Str"");
  rotation(fakeInitTime);
}","@Test public void rotationInDSTDateOctober() throws Exception {
  Calendar calDSTOctober=Calendar.getInstance();
  calDSTOctober.set(Calendar.YEAR,2015);
  calDSTOctober.set(Calendar.MONTH,Calendar.OCTOBER);
  calDSTOctober.set(Calendar.DAY_OF_MONTH,26);
  calDSTOctober.set(Calendar.HOUR_OF_DAY,1);
  calDSTOctober.set(Calendar.MINUTE,58);
  calDSTOctober.set(Calendar.SECOND,0);
  calDSTOctober.set(Calendar.MILLISECOND,0);
  long fakeInitTime=calDSTOctober.getTimeInMillis();
  System.out.println(""String_Node_Str"" + dateFormat.format(calDSTOctober.getTime()) + ""String_Node_Str"");
  rotation(fakeInitTime);
}"
79750,"private void rotation(long fakeInitTime) throws Exception {
  String DEBUG_CONFIG_FOR_TEST=""String_Node_Str"";
  initializeProperties();
  initializeProvider(DEBUG_CONFIG_FOR_TEST);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String debugNameFile=""String_Node_Str"";
  long initTime=System.currentTimeMillis();
  int testDurationMs=2000;
  int factor=360;
  int fakeDurationMs=testDurationMs * factor;
  TimeService accelerateClock=new AccelerateTimeService(fakeInitTime,factor);
  debugFileProvider.setClock(accelerateClock);
  IDebug debugTest1MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest2MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest3MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  List<PrintLogRunnable> printLogRunnableTests=new ArrayList<PrintLogRunnable>();
  PrintLogRunnable printLogRunnableTest1=new PrintLogRunnable(debugTest1MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest1);
  PrintLogRunnable printLogRunnableTest2=new PrintLogRunnable(debugTest2MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest2);
  PrintLogRunnable printLogRunnableTest3=new PrintLogRunnable(debugTest3MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest3);
  List<Thread> threads=new ArrayList<Thread>();
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    threads.add(new Thread(printLogRunnableTest));
  }
  debugTest1MergeToDebugMerge.message(""String_Node_Str"",null);
  long currentAccelerateTimeInMin=accelerateClock.now() / (1000 * 60);
  while (accelerateClock.now() / (1000 * 60) < currentAccelerateTimeInMin) {
    Thread.sleep(100);
  }
  debugTest2MergeToDebugMerge.message(""String_Node_Str"",null);
  currentAccelerateTimeInMin=accelerateClock.now() / (1000 * 60);
  while (accelerateClock.now() / (1000 * 60) < currentAccelerateTimeInMin) {
    Thread.sleep(100);
  }
  debugTest3MergeToDebugMerge.message(""String_Node_Str"",null);
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    if (printLogRunnableTest.ex != null)     throw printLogRunnableTest.ex;
  }
  Calendar calRandomDate=Calendar.getInstance();
  calRandomDate.setTimeInMillis(fakeInitTime);
  if (!isFileExist(debugNameFile + dateFormat.format(calRandomDate.getTime()))) {
    calRandomDate.add(Calendar.MINUTE,1);
  }
  while (calRandomDate.getTimeInMillis() - fakeInitTime < fakeDurationMs) {
    checkLogFileStatus(true,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
    checkLogFileStatus(false,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
    checkLogFileStatus(false,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
  }
}","private void rotation(long fakeInitTime) throws Exception {
  String DEBUG_CONFIG_FOR_TEST=""String_Node_Str"";
  DebugConfigurationFromProperties debugConfigurationFromProperties=new DebugConfigurationFromProperties(DEBUG_CONFIG_FOR_TEST);
  initializeProperties();
  initializeProvider(DEBUG_CONFIG_FOR_TEST);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String debugNameFile=""String_Node_Str"";
  int rotationPeriod=debugConfigurationFromProperties.getRotationInterval();
  int fakeDurationMs=60 * 60 * 1000;
  AccelerateTimeService accelerateClock=new AccelerateTimeService(fakeInitTime);
  debugFileProvider.setClock(accelerateClock);
  IDebug debugTest1MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest2MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest3MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  List<PrintLogRunnable> printLogRunnableTests=new ArrayList<PrintLogRunnable>();
  PrintLogRunnable printLogRunnableTest1=new PrintLogRunnable(debugTest1MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest1);
  PrintLogRunnable printLogRunnableTest2=new PrintLogRunnable(debugTest2MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest2);
  PrintLogRunnable printLogRunnableTest3=new PrintLogRunnable(debugTest3MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest3);
  List<Thread> threads=new ArrayList<Thread>();
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    threads.add(new Thread(printLogRunnableTest));
  }
  debugTest1MergeToDebugMerge.message(""String_Node_Str"",null);
  accelerateClock.incrementTime(1000 * 60 + 10);
  debugTest2MergeToDebugMerge.message(""String_Node_Str"",null);
  accelerateClock.incrementTime(1000 * 60 + 10);
  debugTest3MergeToDebugMerge.message(""String_Node_Str"",null);
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    if (printLogRunnableTest.ex != null)     throw printLogRunnableTest.ex;
  }
  Calendar fakeDate=Calendar.getInstance();
  fakeDate.setTimeInMillis(fakeInitTime);
  int currentPeriod=-1;
  while (fakeDate.getTimeInMillis() - fakeInitTime < fakeDurationMs) {
    if (isFileExist(debugNameFile + dateFormat.format(fakeDate.getTime()))) {
      if (currentPeriod != -1 && currentPeriod < rotationPeriod) {
        failAndPrintFolderStatusReport(""String_Node_Str"" + ""String_Node_Str"" + currentPeriod + ""String_Node_Str"");
      }
      currentPeriod=0;
    }
    currentPeriod++;
    fakeDate.add(Calendar.MINUTE,1);
  }
}"
79751,"public void run(){
  try {
    while (System.currentTimeMillis() - initTime < testDuration) {
      String dateInStringWithMs=dateFormatWithMs.format(new Date(accelerateClock.now()));
      debug.message(""String_Node_Str"" + dateInStringWithMs,null);
    }
  }
 catch (  Exception e) {
    this.ex=e;
  }
}","public void run(){
  try {
    while (accelerateClock.now() - initTime < testDuration) {
      String dateInStringWithMs=dateFormatWithMs.format(new Date(accelerateClock.now()));
      debug.message(""String_Node_Str"" + dateInStringWithMs,null);
    }
  }
 catch (  Exception e) {
    this.ex=e;
  }
}"
79752,"/** 
 * Check the file status
 * @param isCreated true if you want to check that the file exist, false for the contrary
 * @param logName   log file name
 */
protected void checkLogFileStatus(boolean isCreated,String logName){
  String fullPath=debugDirectory + File.separator + logName;
  if (isCreated != isFileExist(logName)) {
    StringBuilder bugReport=new StringBuilder();
    bugReport.append(""String_Node_Str"" + fullPath + ""String_Node_Str""+ isCreated+ ""String_Node_Str"");
    File dir=new File(debugDirectory);
    File[] files=dir.listFiles(new FileFilter(){
      @Override public boolean accept(      File pathname){
        return true;
      }
    }
);
    bugReport.append(""String_Node_Str"");
    for (    File file : files) {
      bugReport.append(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
    Assert.fail(bugReport.toString());
  }
}","/** 
 * Check the file status
 * @param isCreated true if you want to check that the file exist, false for the contrary
 * @param logName   log file name
 */
protected void checkLogFileStatus(boolean isCreated,String logName){
  String fullPath=debugDirectory + File.separator + logName;
  if (isCreated != isFileExist(logName)) {
    failAndPrintFolderStatusReport(""String_Node_Str"" + fullPath + ""String_Node_Str""+ isCreated+ ""String_Node_Str"");
  }
}"
79753,"/** 
 * Constructor
 * @param initTime when the time acceleration should started, in MS from epoch
 * @param factor   acceleration factor
 */
public AccelerateTimeService(long initTime,int factor){
  this.initTime=initTime;
  this.factor=factor;
  this.systemTimeAtInitialization=System.currentTimeMillis();
}","/** 
 * Constructor
 * @param initTime when the time acceleration should started, in MS from epoch
 */
public AccelerateTimeService(long initTime){
  this.clock=new AtomicLong(initTime);
}"
79754,"@Override public long now(){
  long deltaTimeFromInitTime=System.currentTimeMillis() - systemTimeAtInitialization;
  return deltaTimeFromInitTime * factor + initTime;
}","@Override public long now(){
  return incrementTime(INCR_TIME_MS);
}"
79755,"@Test public void rotationInDSTDateOctober() throws Exception {
  Calendar calDSTOctober=Calendar.getInstance();
  calDSTOctober.set(Calendar.YEAR,2015);
  calDSTOctober.set(Calendar.MONTH,Calendar.OCTOBER);
  calDSTOctober.set(Calendar.DAY_OF_MONTH,26);
  calDSTOctober.set(Calendar.HOUR_OF_DAY,1);
  calDSTOctober.set(Calendar.MINUTE,58);
  calDSTOctober.set(Calendar.SECOND,0);
  calDSTOctober.set(Calendar.MILLISECOND,0);
  long fakeInitTime=calDSTOctober.getTimeInMillis();
  System.out.println(TimeZone.getDefault().getDisplayName());
  System.out.println(TimeZone.getDefault().getID());
  System.out.println(""String_Node_Str"" + dateFormat.format(calDSTOctober.getTime()) + ""String_Node_Str"");
  rotation(fakeInitTime);
}","@Test public void rotationInDSTDateOctober() throws Exception {
  Calendar calDSTOctober=Calendar.getInstance();
  calDSTOctober.set(Calendar.YEAR,2015);
  calDSTOctober.set(Calendar.MONTH,Calendar.OCTOBER);
  calDSTOctober.set(Calendar.DAY_OF_MONTH,26);
  calDSTOctober.set(Calendar.HOUR_OF_DAY,1);
  calDSTOctober.set(Calendar.MINUTE,58);
  calDSTOctober.set(Calendar.SECOND,0);
  calDSTOctober.set(Calendar.MILLISECOND,0);
  long fakeInitTime=calDSTOctober.getTimeInMillis();
  System.out.println(""String_Node_Str"" + dateFormat.format(calDSTOctober.getTime()) + ""String_Node_Str"");
  rotation(fakeInitTime);
}"
79756,"private void rotation(long fakeInitTime) throws Exception {
  String DEBUG_CONFIG_FOR_TEST=""String_Node_Str"";
  initializeProperties();
  initializeProvider(DEBUG_CONFIG_FOR_TEST);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String debugNameFile=""String_Node_Str"";
  long initTime=System.currentTimeMillis();
  int testDurationMs=2000;
  int factor=360;
  int fakeDurationMs=testDurationMs * factor;
  TimeService accelerateClock=new AccelerateTimeService(fakeInitTime,factor);
  debugFileProvider.setClock(accelerateClock);
  IDebug debugTest1MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest2MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest3MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  List<PrintLogRunnable> printLogRunnableTests=new ArrayList<PrintLogRunnable>();
  PrintLogRunnable printLogRunnableTest1=new PrintLogRunnable(debugTest1MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest1);
  PrintLogRunnable printLogRunnableTest2=new PrintLogRunnable(debugTest2MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest2);
  PrintLogRunnable printLogRunnableTest3=new PrintLogRunnable(debugTest3MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest3);
  List<Thread> threads=new ArrayList<Thread>();
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    threads.add(new Thread(printLogRunnableTest));
  }
  debugTest1MergeToDebugMerge.message(""String_Node_Str"",null);
  long currentAccelerateTimeInMin=accelerateClock.now() / (1000 * 60);
  while (accelerateClock.now() / (1000 * 60) < currentAccelerateTimeInMin) {
    Thread.sleep(100);
  }
  debugTest2MergeToDebugMerge.message(""String_Node_Str"",null);
  currentAccelerateTimeInMin=accelerateClock.now() / (1000 * 60);
  while (accelerateClock.now() / (1000 * 60) < currentAccelerateTimeInMin) {
    Thread.sleep(100);
  }
  debugTest3MergeToDebugMerge.message(""String_Node_Str"",null);
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    if (printLogRunnableTest.ex != null)     throw printLogRunnableTest.ex;
  }
  Calendar calRandomDate=Calendar.getInstance();
  calRandomDate.setTimeInMillis(fakeInitTime);
  if (!isFileExist(debugNameFile + dateFormat.format(calRandomDate.getTime()))) {
    calRandomDate.add(Calendar.MINUTE,1);
  }
  while (calRandomDate.getTimeInMillis() - fakeInitTime < fakeDurationMs) {
    checkLogFileStatus(true,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
    checkLogFileStatus(false,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
    checkLogFileStatus(false,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
  }
}","private void rotation(long fakeInitTime) throws Exception {
  String DEBUG_CONFIG_FOR_TEST=""String_Node_Str"";
  DebugConfigurationFromProperties debugConfigurationFromProperties=new DebugConfigurationFromProperties(DEBUG_CONFIG_FOR_TEST);
  initializeProperties();
  initializeProvider(DEBUG_CONFIG_FOR_TEST);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String debugNameFile=""String_Node_Str"";
  int rotationPeriod=debugConfigurationFromProperties.getRotationInterval();
  int fakeDurationMs=60 * 60 * 1000;
  AccelerateTimeService accelerateClock=new AccelerateTimeService(fakeInitTime);
  debugFileProvider.setClock(accelerateClock);
  IDebug debugTest1MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest2MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest3MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  List<PrintLogRunnable> printLogRunnableTests=new ArrayList<PrintLogRunnable>();
  PrintLogRunnable printLogRunnableTest1=new PrintLogRunnable(debugTest1MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest1);
  PrintLogRunnable printLogRunnableTest2=new PrintLogRunnable(debugTest2MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest2);
  PrintLogRunnable printLogRunnableTest3=new PrintLogRunnable(debugTest3MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest3);
  List<Thread> threads=new ArrayList<Thread>();
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    threads.add(new Thread(printLogRunnableTest));
  }
  debugTest1MergeToDebugMerge.message(""String_Node_Str"",null);
  accelerateClock.incrementTime(1000 * 60 + 10);
  debugTest2MergeToDebugMerge.message(""String_Node_Str"",null);
  accelerateClock.incrementTime(1000 * 60 + 10);
  debugTest3MergeToDebugMerge.message(""String_Node_Str"",null);
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    if (printLogRunnableTest.ex != null)     throw printLogRunnableTest.ex;
  }
  Calendar fakeDate=Calendar.getInstance();
  fakeDate.setTimeInMillis(fakeInitTime);
  int currentPeriod=-1;
  while (fakeDate.getTimeInMillis() - fakeInitTime < fakeDurationMs) {
    if (isFileExist(debugNameFile + dateFormat.format(fakeDate.getTime()))) {
      if (currentPeriod != -1 && currentPeriod < rotationPeriod) {
        failAndPrintFolderStatusReport(""String_Node_Str"" + ""String_Node_Str"" + currentPeriod + ""String_Node_Str"");
      }
      currentPeriod=0;
    }
    currentPeriod++;
    fakeDate.add(Calendar.MINUTE,1);
  }
}"
79757,"public void run(){
  try {
    while (System.currentTimeMillis() - initTime < testDuration) {
      String dateInStringWithMs=dateFormatWithMs.format(new Date(accelerateClock.now()));
      debug.message(""String_Node_Str"" + dateInStringWithMs,null);
    }
  }
 catch (  Exception e) {
    this.ex=e;
  }
}","public void run(){
  try {
    while (accelerateClock.now() - initTime < testDuration) {
      String dateInStringWithMs=dateFormatWithMs.format(new Date(accelerateClock.now()));
      debug.message(""String_Node_Str"" + dateInStringWithMs,null);
    }
  }
 catch (  Exception e) {
    this.ex=e;
  }
}"
79758,"/** 
 * Check the file status
 * @param isCreated true if you want to check that the file exist, false for the contrary
 * @param logName   log file name
 */
protected void checkLogFileStatus(boolean isCreated,String logName){
  String fullPath=debugDirectory + File.separator + logName;
  if (isCreated != isFileExist(logName)) {
    StringBuilder bugReport=new StringBuilder();
    bugReport.append(""String_Node_Str"" + fullPath + ""String_Node_Str""+ isCreated+ ""String_Node_Str"");
    File dir=new File(debugDirectory);
    File[] files=dir.listFiles(new FileFilter(){
      @Override public boolean accept(      File pathname){
        return true;
      }
    }
);
    bugReport.append(""String_Node_Str"");
    for (    File file : files) {
      bugReport.append(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
    Assert.fail(bugReport.toString());
  }
}","/** 
 * Check the file status
 * @param isCreated true if you want to check that the file exist, false for the contrary
 * @param logName   log file name
 */
protected void checkLogFileStatus(boolean isCreated,String logName){
  String fullPath=debugDirectory + File.separator + logName;
  if (isCreated != isFileExist(logName)) {
    failAndPrintFolderStatusReport(""String_Node_Str"" + fullPath + ""String_Node_Str""+ isCreated+ ""String_Node_Str"");
  }
}"
79759,"/** 
 * Constructor
 * @param initTime when the time acceleration should started, in MS from epoch
 * @param factor   acceleration factor
 */
public AccelerateTimeService(long initTime,int factor){
  this.initTime=initTime;
  this.factor=factor;
  this.systemTimeAtInitialization=System.currentTimeMillis();
}","/** 
 * Constructor
 * @param initTime when the time acceleration should started, in MS from epoch
 */
public AccelerateTimeService(long initTime){
  this.clock=new AtomicLong(initTime);
}"
79760,"@Override public long now(){
  long deltaTimeFromInitTime=System.currentTimeMillis() - systemTimeAtInitialization;
  return deltaTimeFromInitTime * factor + initTime;
}","@Override public long now(){
  return incrementTime(INCR_TIME_MS);
}"
79761,"@Test public void rotationInDSTDateOctober() throws Exception {
  Calendar calDSTOctober=Calendar.getInstance();
  calDSTOctober.set(Calendar.YEAR,2015);
  calDSTOctober.set(Calendar.MONTH,Calendar.OCTOBER);
  calDSTOctober.set(Calendar.DAY_OF_MONTH,26);
  calDSTOctober.set(Calendar.HOUR_OF_DAY,1);
  calDSTOctober.set(Calendar.MINUTE,58);
  calDSTOctober.set(Calendar.SECOND,0);
  calDSTOctober.set(Calendar.MILLISECOND,0);
  long fakeInitTime=calDSTOctober.getTimeInMillis();
  System.out.println(TimeZone.getDefault().getDisplayName());
  System.out.println(TimeZone.getDefault().getID());
  System.out.println(""String_Node_Str"" + dateFormat.format(calDSTOctober.getTime()) + ""String_Node_Str"");
  rotation(fakeInitTime);
}","@Test public void rotationInDSTDateOctober() throws Exception {
  Calendar calDSTOctober=Calendar.getInstance();
  calDSTOctober.set(Calendar.YEAR,2015);
  calDSTOctober.set(Calendar.MONTH,Calendar.OCTOBER);
  calDSTOctober.set(Calendar.DAY_OF_MONTH,26);
  calDSTOctober.set(Calendar.HOUR_OF_DAY,1);
  calDSTOctober.set(Calendar.MINUTE,58);
  calDSTOctober.set(Calendar.SECOND,0);
  calDSTOctober.set(Calendar.MILLISECOND,0);
  long fakeInitTime=calDSTOctober.getTimeInMillis();
  System.out.println(""String_Node_Str"" + dateFormat.format(calDSTOctober.getTime()) + ""String_Node_Str"");
  rotation(fakeInitTime);
}"
79762,"private void rotation(long fakeInitTime) throws Exception {
  String DEBUG_CONFIG_FOR_TEST=""String_Node_Str"";
  initializeProperties();
  initializeProvider(DEBUG_CONFIG_FOR_TEST);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String debugNameFile=""String_Node_Str"";
  long initTime=System.currentTimeMillis();
  int testDurationMs=2000;
  int factor=360;
  int fakeDurationMs=testDurationMs * factor;
  TimeService accelerateClock=new AccelerateTimeService(fakeInitTime,factor);
  debugFileProvider.setClock(accelerateClock);
  IDebug debugTest1MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest2MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest3MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  List<PrintLogRunnable> printLogRunnableTests=new ArrayList<PrintLogRunnable>();
  PrintLogRunnable printLogRunnableTest1=new PrintLogRunnable(debugTest1MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest1);
  PrintLogRunnable printLogRunnableTest2=new PrintLogRunnable(debugTest2MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest2);
  PrintLogRunnable printLogRunnableTest3=new PrintLogRunnable(debugTest3MergeToDebugMerge,initTime,testDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest3);
  List<Thread> threads=new ArrayList<Thread>();
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    threads.add(new Thread(printLogRunnableTest));
  }
  debugTest1MergeToDebugMerge.message(""String_Node_Str"",null);
  long currentAccelerateTimeInMin=accelerateClock.now() / (1000 * 60);
  while (accelerateClock.now() / (1000 * 60) < currentAccelerateTimeInMin) {
    Thread.sleep(100);
  }
  debugTest2MergeToDebugMerge.message(""String_Node_Str"",null);
  currentAccelerateTimeInMin=accelerateClock.now() / (1000 * 60);
  while (accelerateClock.now() / (1000 * 60) < currentAccelerateTimeInMin) {
    Thread.sleep(100);
  }
  debugTest3MergeToDebugMerge.message(""String_Node_Str"",null);
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    if (printLogRunnableTest.ex != null)     throw printLogRunnableTest.ex;
  }
  Calendar calRandomDate=Calendar.getInstance();
  calRandomDate.setTimeInMillis(fakeInitTime);
  if (!isFileExist(debugNameFile + dateFormat.format(calRandomDate.getTime()))) {
    calRandomDate.add(Calendar.MINUTE,1);
  }
  while (calRandomDate.getTimeInMillis() - fakeInitTime < fakeDurationMs) {
    checkLogFileStatus(true,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
    checkLogFileStatus(false,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
    checkLogFileStatus(false,debugNameFile + dateFormat.format(calRandomDate.getTime()));
    calRandomDate.add(Calendar.MINUTE,1);
  }
}","private void rotation(long fakeInitTime) throws Exception {
  String DEBUG_CONFIG_FOR_TEST=""String_Node_Str"";
  DebugConfigurationFromProperties debugConfigurationFromProperties=new DebugConfigurationFromProperties(DEBUG_CONFIG_FOR_TEST);
  initializeProperties();
  initializeProvider(DEBUG_CONFIG_FOR_TEST);
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  String debugNameFile=""String_Node_Str"";
  int rotationPeriod=debugConfigurationFromProperties.getRotationInterval();
  int fakeDurationMs=60 * 60 * 1000;
  AccelerateTimeService accelerateClock=new AccelerateTimeService(fakeInitTime);
  debugFileProvider.setClock(accelerateClock);
  IDebug debugTest1MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest2MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  IDebug debugTest3MergeToDebugMerge=provider.getInstance(""String_Node_Str"");
  List<PrintLogRunnable> printLogRunnableTests=new ArrayList<PrintLogRunnable>();
  PrintLogRunnable printLogRunnableTest1=new PrintLogRunnable(debugTest1MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest1);
  PrintLogRunnable printLogRunnableTest2=new PrintLogRunnable(debugTest2MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest2);
  PrintLogRunnable printLogRunnableTest3=new PrintLogRunnable(debugTest3MergeToDebugMerge,fakeInitTime,fakeDurationMs,accelerateClock);
  printLogRunnableTests.add(printLogRunnableTest3);
  List<Thread> threads=new ArrayList<Thread>();
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    threads.add(new Thread(printLogRunnableTest));
  }
  debugTest1MergeToDebugMerge.message(""String_Node_Str"",null);
  accelerateClock.incrementTime(1000 * 60 + 10);
  debugTest2MergeToDebugMerge.message(""String_Node_Str"",null);
  accelerateClock.incrementTime(1000 * 60 + 10);
  debugTest3MergeToDebugMerge.message(""String_Node_Str"",null);
  for (  Thread thread : threads) {
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (  PrintLogRunnable printLogRunnableTest : printLogRunnableTests) {
    if (printLogRunnableTest.ex != null)     throw printLogRunnableTest.ex;
  }
  Calendar fakeDate=Calendar.getInstance();
  fakeDate.setTimeInMillis(fakeInitTime);
  int currentPeriod=-1;
  while (fakeDate.getTimeInMillis() - fakeInitTime < fakeDurationMs) {
    if (isFileExist(debugNameFile + dateFormat.format(fakeDate.getTime()))) {
      if (currentPeriod != -1 && currentPeriod < rotationPeriod) {
        failAndPrintFolderStatusReport(""String_Node_Str"" + ""String_Node_Str"" + currentPeriod + ""String_Node_Str"");
      }
      currentPeriod=0;
    }
    currentPeriod++;
    fakeDate.add(Calendar.MINUTE,1);
  }
}"
79763,"public void run(){
  try {
    while (System.currentTimeMillis() - initTime < testDuration) {
      String dateInStringWithMs=dateFormatWithMs.format(new Date(accelerateClock.now()));
      debug.message(""String_Node_Str"" + dateInStringWithMs,null);
    }
  }
 catch (  Exception e) {
    this.ex=e;
  }
}","public void run(){
  try {
    while (accelerateClock.now() - initTime < testDuration) {
      String dateInStringWithMs=dateFormatWithMs.format(new Date(accelerateClock.now()));
      debug.message(""String_Node_Str"" + dateInStringWithMs,null);
    }
  }
 catch (  Exception e) {
    this.ex=e;
  }
}"
79764,"/** 
 * Check the file status
 * @param isCreated true if you want to check that the file exist, false for the contrary
 * @param logName   log file name
 */
protected void checkLogFileStatus(boolean isCreated,String logName){
  String fullPath=debugDirectory + File.separator + logName;
  if (isCreated != isFileExist(logName)) {
    StringBuilder bugReport=new StringBuilder();
    bugReport.append(""String_Node_Str"" + fullPath + ""String_Node_Str""+ isCreated+ ""String_Node_Str"");
    File dir=new File(debugDirectory);
    File[] files=dir.listFiles(new FileFilter(){
      @Override public boolean accept(      File pathname){
        return true;
      }
    }
);
    bugReport.append(""String_Node_Str"");
    for (    File file : files) {
      bugReport.append(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    }
    Assert.fail(bugReport.toString());
  }
}","/** 
 * Check the file status
 * @param isCreated true if you want to check that the file exist, false for the contrary
 * @param logName   log file name
 */
protected void checkLogFileStatus(boolean isCreated,String logName){
  String fullPath=debugDirectory + File.separator + logName;
  if (isCreated != isFileExist(logName)) {
    failAndPrintFolderStatusReport(""String_Node_Str"" + fullPath + ""String_Node_Str""+ isCreated+ ""String_Node_Str"");
  }
}"
79765,"/** 
 * Constructor
 * @param initTime when the time acceleration should started, in MS from epoch
 * @param factor   acceleration factor
 */
public AccelerateTimeService(long initTime,int factor){
  this.initTime=initTime;
  this.factor=factor;
  this.systemTimeAtInitialization=System.currentTimeMillis();
}","/** 
 * Constructor
 * @param initTime when the time acceleration should started, in MS from epoch
 */
public AccelerateTimeService(long initTime){
  this.clock=new AtomicLong(initTime);
}"
79766,"@Override public long now(){
  long deltaTimeFromInitTime=System.currentTimeMillis() - systemTimeAtInitialization;
  return deltaTimeFromInitTime * factor + initTime;
}","@Override public long now(){
  return incrementTime(INCR_TIME_MS);
}"
79767,"private static String getResponseLocation(SingleLogoutServiceElement endpoint){
  String location=endpoint.getResponseLocation();
  if (location == null) {
    location=endpoint.getLocation();
  }
  return location;
}","private static String getResponseLocation(SingleLogoutServiceElement endpoint){
  String location=endpoint.getResponseLocation();
  if (StringUtils.isBlank(location)) {
    location=endpoint.getLocation();
  }
  return location;
}"
79768,"/** 
 * Implements methods in <code>com.sun.identity.sm.ServiceListener</code>.
 * @param serviceName
 * @param version
 * @param orgName
 * @param groupName
 * @param serviceComponent
 * @param type
 */
public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + serviceName + ""String_Node_Str""+ version+ ""String_Node_Str""+ orgName+ ""String_Node_Str""+ groupName+ ""String_Node_Str""+ serviceComponent+ ""String_Node_Str""+ type);
  }
synchronized (authLevelMap) {
    authLevelMap.remove(orgName);
  }
  if (AuthD.revisionNumber < ISAuthConstants.AUTHSERVICE_REVISION7_0 && serviceName.equals(CORE_AUTH)) {
synchronized (supportedModulesMap) {
      supportedModulesMap.remove(orgName);
    }
  }
  AMAuthenticationManager.buildModuleInstanceForService(orgName,serviceName);
  updateAuthConfiguration(serviceName,orgName,serviceComponent);
}","/** 
 * Implements methods in <code>com.sun.identity.sm.ServiceListener</code>.
 * @param serviceName
 * @param version
 * @param orgName
 * @param groupName
 * @param serviceComponent
 * @param type
 */
public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + serviceName + ""String_Node_Str""+ version+ ""String_Node_Str""+ orgName+ ""String_Node_Str""+ groupName+ ""String_Node_Str""+ serviceComponent+ ""String_Node_Str""+ type);
  }
synchronized (authLevelMap) {
    authLevelMap.remove(orgName);
  }
  if (AuthD.revisionNumber < ISAuthConstants.AUTHSERVICE_REVISION7_0 && serviceName.equals(CORE_AUTH)) {
synchronized (supportedModulesMap) {
      supportedModulesMap.remove(orgName);
    }
  }
  AMAuthenticationManager.updateModuleInstanceTable(orgName,serviceName);
  updateAuthConfiguration(serviceName,orgName,serviceComponent);
}"
79769,"/** 
 * Constructs an instance of <code>AMAuthenticationManager</code> for the specified realm to manage the authentication module instances available to this realm.
 * @param token Single sign on token of the user identity on whose behalf the operations are performed.
 * @param org The realm in which the module instance management is performed.
 * @throws AMConfigurationException if Service Management related error occurs.
 */
public AMAuthenticationManager(SSOToken token,String org) throws AMConfigurationException {
  try {
    SMSEntry.validateToken(token);
    this.token=token;
    this.realm=com.sun.identity.sm.DNMapper.orgNameToDN(org);
    if ((this.realm != null) && ((this.realm).length() != 0)) {
      this.realm=(this.realm).toLowerCase();
    }
    orgServiceConfig=getOrgServiceConfig();
    if (orgServiceConfig == null) {
      throw new AMConfigurationException(BUNDLE_NAME,""String_Node_Str"",new Object[]{realm});
    }
synchronized (AMAuthenticationManager.class) {
      if (MODULE_INSTANCE_TABLE.get(realm) == null) {
        buildModuleInstanceTable(token,realm);
      }
    }
  }
 catch (  SMSException e) {
    throw new AMConfigurationException(e);
  }
catch (  Exception ee) {
    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);
    if ((installTime != null) && installTime.equalsIgnoreCase(""String_Node_Str"")) {
      DEBUG.error(""String_Node_Str"",ee);
    }
  }
}","/** 
 * Constructs an instance of <code>AMAuthenticationManager</code> for the specified realm to manage the authentication module instances available to this realm.
 * @param token Single sign on token of the user identity on whose behalf the operations are performed.
 * @param org The realm in which the module instance management is performed.
 * @throws AMConfigurationException if Service Management related error occurs.
 */
public AMAuthenticationManager(SSOToken token,String org) throws AMConfigurationException {
  try {
    SMSEntry.validateToken(token);
    this.token=token;
    this.realm=com.sun.identity.sm.DNMapper.orgNameToDN(org);
    orgServiceConfig=getOrgServiceConfig();
    if (orgServiceConfig == null) {
      throw new AMConfigurationException(BUNDLE_NAME,""String_Node_Str"",new Object[]{realm});
    }
synchronized (AMAuthenticationManager.class) {
      if (!MODULE_INSTANCE_TABLE.containsKey(realm)) {
        buildModuleInstanceTable(token,realm);
      }
    }
  }
 catch (  SMSException e) {
    throw new AMConfigurationException(e);
  }
catch (  Exception ee) {
    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);
    if ((installTime != null) && installTime.equalsIgnoreCase(""String_Node_Str"")) {
      DEBUG.error(""String_Node_Str"",ee);
    }
  }
}"
79770,"/** 
 * Updates the static module instance table for the specified service in the realm.
 * @param realm The realm in which the operation is processed.
 * @param serviceName the service for which the table is built.
 */
public static synchronized void buildModuleInstanceForService(String realm,String serviceName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE + ""String_Node_Str""+ realm+ ""String_Node_Str""+ serviceName);
  }
  try {
    String moduleName=getModuleName(serviceName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + moduleName);
    }
    if ((moduleName != null) && (moduleName.length() != 0)) {
      ServiceConfigManager scm=new ServiceConfigManager(serviceName,getAdminToken());
      ServiceConfig config=scm.getOrganizationConfig(realm,null);
      if (config == null) {
        if (DEBUG.messageEnabled()) {
          DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + serviceName + ""String_Node_Str""+ realm);
        }
      }
      realm=com.sun.identity.sm.DNMapper.orgNameToDN(realm);
synchronized (MODULE_INSTANCE_TABLE) {
        Map<String,Set<String>> moduleMap=MODULE_INSTANCE_TABLE.remove(realm);
        if (moduleMap != null) {
          Map<String,Set<String>> newMap=new HashMap<String,Set<String>>(moduleMap);
          newMap.remove(moduleName);
          moduleMap=newMap;
        }
        Set<String> instanceSet=new HashSet<String>();
        Map<String,Set<String>> defaultAttrs=null;
        if (config != null) {
          defaultAttrs=config.getAttributesWithoutDefaults();
        }
        if (defaultAttrs != null && !defaultAttrs.isEmpty()) {
          instanceSet.add(moduleName);
        }
        Set<String> instances=null;
        if (config != null) {
          instances=config.getSubConfigNames();
        }
        if (instances != null) {
          instanceSet.addAll(instances);
        }
        if (!instanceSet.isEmpty()) {
          if (moduleMap == null) {
            moduleMap=new HashMap<String,Set<String>>();
          }
          moduleMap.put(moduleName,instanceSet);
        }
        if (moduleMap != null && !moduleMap.isEmpty()) {
          MODULE_INSTANCE_TABLE.put(realm,moduleMap);
        }
      }
    }
  }
 catch (  Exception e) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"",e);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE);
  }
}","/** 
 * Updates the static module instance table for the specified service in the realm.
 * @param realm The realm in which the operation is processed.
 * @param serviceName the service for which the table is built.
 */
private static synchronized void buildModuleInstanceForService(String realm,String serviceName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE + ""String_Node_Str""+ realm+ ""String_Node_Str""+ serviceName);
  }
  try {
    String moduleName=getModuleName(serviceName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + moduleName);
    }
    if ((moduleName != null) && (moduleName.length() != 0)) {
      ServiceConfigManager scm=new ServiceConfigManager(serviceName,getAdminToken());
      ServiceConfig config=scm.getOrganizationConfig(realm,null);
      if (config == null) {
        if (DEBUG.messageEnabled()) {
          DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + serviceName + ""String_Node_Str""+ realm);
        }
      }
      realm=com.sun.identity.sm.DNMapper.orgNameToDN(realm);
synchronized (MODULE_INSTANCE_TABLE) {
        Map<String,Set<String>> moduleMap=MODULE_INSTANCE_TABLE.remove(realm);
        if (moduleMap != null) {
          Map<String,Set<String>> newMap=new HashMap<String,Set<String>>(moduleMap);
          newMap.remove(moduleName);
          moduleMap=newMap;
        }
        Set<String> instanceSet=new HashSet<String>();
        Map<String,Set<String>> defaultAttrs=null;
        if (config != null) {
          defaultAttrs=config.getAttributesWithoutDefaults();
        }
        if (defaultAttrs != null && !defaultAttrs.isEmpty()) {
          instanceSet.add(moduleName);
        }
        Set<String> instances=null;
        if (config != null) {
          instances=config.getSubConfigNames();
        }
        if (instances != null) {
          instanceSet.addAll(instances);
        }
        if (!instanceSet.isEmpty()) {
          if (moduleMap == null) {
            moduleMap=new HashMap<String,Set<String>>();
          }
          moduleMap.put(moduleName,instanceSet);
        }
        if (moduleMap != null && !moduleMap.isEmpty()) {
          MODULE_INSTANCE_TABLE.put(realm,moduleMap);
        }
      }
    }
  }
 catch (  Exception e) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"",e);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE);
  }
}"
79771,"/** 
 * Implements methods in <code>com.sun.identity.sm.ServiceListener</code>.
 * @param serviceName
 * @param version
 * @param orgName
 * @param groupName
 * @param serviceComponent
 * @param type
 */
public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + serviceName + ""String_Node_Str""+ version+ ""String_Node_Str""+ orgName+ ""String_Node_Str""+ groupName+ ""String_Node_Str""+ serviceComponent+ ""String_Node_Str""+ type);
  }
synchronized (authLevelMap) {
    authLevelMap.remove(orgName);
  }
  if (AuthD.revisionNumber < ISAuthConstants.AUTHSERVICE_REVISION7_0 && serviceName.equals(CORE_AUTH)) {
synchronized (supportedModulesMap) {
      supportedModulesMap.remove(orgName);
    }
  }
  AMAuthenticationManager.buildModuleInstanceForService(orgName,serviceName);
  updateAuthConfiguration(serviceName,orgName,serviceComponent);
}","/** 
 * Implements methods in <code>com.sun.identity.sm.ServiceListener</code>.
 * @param serviceName
 * @param version
 * @param orgName
 * @param groupName
 * @param serviceComponent
 * @param type
 */
public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + serviceName + ""String_Node_Str""+ version+ ""String_Node_Str""+ orgName+ ""String_Node_Str""+ groupName+ ""String_Node_Str""+ serviceComponent+ ""String_Node_Str""+ type);
  }
synchronized (authLevelMap) {
    authLevelMap.remove(orgName);
  }
  if (AuthD.revisionNumber < ISAuthConstants.AUTHSERVICE_REVISION7_0 && serviceName.equals(CORE_AUTH)) {
synchronized (supportedModulesMap) {
      supportedModulesMap.remove(orgName);
    }
  }
  AMAuthenticationManager.updateModuleInstanceTable(orgName,serviceName);
  updateAuthConfiguration(serviceName,orgName,serviceComponent);
}"
79772,"/** 
 * Constructs an instance of <code>AMAuthenticationManager</code> for the specified realm to manage the authentication module instances available to this realm.
 * @param token Single sign on token of the user identity on whose behalf the operations are performed.
 * @param org The realm in which the module instance management is performed.
 * @throws AMConfigurationException if Service Management related error occurs.
 */
public AMAuthenticationManager(SSOToken token,String org) throws AMConfigurationException {
  try {
    SMSEntry.validateToken(token);
    this.token=token;
    this.realm=com.sun.identity.sm.DNMapper.orgNameToDN(org);
    if ((this.realm != null) && ((this.realm).length() != 0)) {
      this.realm=(this.realm).toLowerCase();
    }
    orgServiceConfig=getOrgServiceConfig();
    if (orgServiceConfig == null) {
      throw new AMConfigurationException(BUNDLE_NAME,""String_Node_Str"",new Object[]{realm});
    }
synchronized (AMAuthenticationManager.class) {
      if (MODULE_INSTANCE_TABLE.get(realm) == null) {
        buildModuleInstanceTable(token,realm);
      }
    }
  }
 catch (  SMSException e) {
    throw new AMConfigurationException(e);
  }
catch (  Exception ee) {
    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);
    if ((installTime != null) && installTime.equalsIgnoreCase(""String_Node_Str"")) {
      DEBUG.error(""String_Node_Str"",ee);
    }
  }
}","/** 
 * Constructs an instance of <code>AMAuthenticationManager</code> for the specified realm to manage the authentication module instances available to this realm.
 * @param token Single sign on token of the user identity on whose behalf the operations are performed.
 * @param org The realm in which the module instance management is performed.
 * @throws AMConfigurationException if Service Management related error occurs.
 */
public AMAuthenticationManager(SSOToken token,String org) throws AMConfigurationException {
  try {
    SMSEntry.validateToken(token);
    this.token=token;
    this.realm=com.sun.identity.sm.DNMapper.orgNameToDN(org);
    orgServiceConfig=getOrgServiceConfig();
    if (orgServiceConfig == null) {
      throw new AMConfigurationException(BUNDLE_NAME,""String_Node_Str"",new Object[]{realm});
    }
synchronized (AMAuthenticationManager.class) {
      if (!MODULE_INSTANCE_TABLE.containsKey(realm)) {
        buildModuleInstanceTable(token,realm);
      }
    }
  }
 catch (  SMSException e) {
    throw new AMConfigurationException(e);
  }
catch (  Exception ee) {
    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);
    if ((installTime != null) && installTime.equalsIgnoreCase(""String_Node_Str"")) {
      DEBUG.error(""String_Node_Str"",ee);
    }
  }
}"
79773,"/** 
 * Updates the static module instance table for the specified service in the realm.
 * @param realm The realm in which the operation is processed.
 * @param serviceName the service for which the table is built.
 */
public static synchronized void buildModuleInstanceForService(String realm,String serviceName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE + ""String_Node_Str""+ realm+ ""String_Node_Str""+ serviceName);
  }
  try {
    String moduleName=getModuleName(serviceName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + moduleName);
    }
    if ((moduleName != null) && (moduleName.length() != 0)) {
      ServiceConfigManager scm=new ServiceConfigManager(serviceName,getAdminToken());
      ServiceConfig config=scm.getOrganizationConfig(realm,null);
      if (config == null) {
        if (DEBUG.messageEnabled()) {
          DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + serviceName + ""String_Node_Str""+ realm);
        }
      }
      realm=com.sun.identity.sm.DNMapper.orgNameToDN(realm);
synchronized (MODULE_INSTANCE_TABLE) {
        Map<String,Set<String>> moduleMap=MODULE_INSTANCE_TABLE.remove(realm);
        if (moduleMap != null) {
          Map<String,Set<String>> newMap=new HashMap<String,Set<String>>(moduleMap);
          newMap.remove(moduleName);
          moduleMap=newMap;
        }
        Set<String> instanceSet=new HashSet<String>();
        Map<String,Set<String>> defaultAttrs=null;
        if (config != null) {
          defaultAttrs=config.getAttributesWithoutDefaults();
        }
        if (defaultAttrs != null && !defaultAttrs.isEmpty()) {
          instanceSet.add(moduleName);
        }
        Set<String> instances=null;
        if (config != null) {
          instances=config.getSubConfigNames();
        }
        if (instances != null) {
          instanceSet.addAll(instances);
        }
        if (!instanceSet.isEmpty()) {
          if (moduleMap == null) {
            moduleMap=new HashMap<String,Set<String>>();
          }
          moduleMap.put(moduleName,instanceSet);
        }
        if (moduleMap != null && !moduleMap.isEmpty()) {
          MODULE_INSTANCE_TABLE.put(realm,moduleMap);
        }
      }
    }
  }
 catch (  Exception e) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"",e);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE);
  }
}","/** 
 * Updates the static module instance table for the specified service in the realm.
 * @param realm The realm in which the operation is processed.
 * @param serviceName the service for which the table is built.
 */
private static synchronized void buildModuleInstanceForService(String realm,String serviceName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE + ""String_Node_Str""+ realm+ ""String_Node_Str""+ serviceName);
  }
  try {
    String moduleName=getModuleName(serviceName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + moduleName);
    }
    if ((moduleName != null) && (moduleName.length() != 0)) {
      ServiceConfigManager scm=new ServiceConfigManager(serviceName,getAdminToken());
      ServiceConfig config=scm.getOrganizationConfig(realm,null);
      if (config == null) {
        if (DEBUG.messageEnabled()) {
          DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + serviceName + ""String_Node_Str""+ realm);
        }
      }
      realm=com.sun.identity.sm.DNMapper.orgNameToDN(realm);
synchronized (MODULE_INSTANCE_TABLE) {
        Map<String,Set<String>> moduleMap=MODULE_INSTANCE_TABLE.remove(realm);
        if (moduleMap != null) {
          Map<String,Set<String>> newMap=new HashMap<String,Set<String>>(moduleMap);
          newMap.remove(moduleName);
          moduleMap=newMap;
        }
        Set<String> instanceSet=new HashSet<String>();
        Map<String,Set<String>> defaultAttrs=null;
        if (config != null) {
          defaultAttrs=config.getAttributesWithoutDefaults();
        }
        if (defaultAttrs != null && !defaultAttrs.isEmpty()) {
          instanceSet.add(moduleName);
        }
        Set<String> instances=null;
        if (config != null) {
          instances=config.getSubConfigNames();
        }
        if (instances != null) {
          instanceSet.addAll(instances);
        }
        if (!instanceSet.isEmpty()) {
          if (moduleMap == null) {
            moduleMap=new HashMap<String,Set<String>>();
          }
          moduleMap.put(moduleName,instanceSet);
        }
        if (moduleMap != null && !moduleMap.isEmpty()) {
          MODULE_INSTANCE_TABLE.put(realm,moduleMap);
        }
      }
    }
  }
 catch (  Exception e) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"",e);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE);
  }
}"
79774,"/** 
 * Implements methods in <code>com.sun.identity.sm.ServiceListener</code>.
 * @param serviceName
 * @param version
 * @param orgName
 * @param groupName
 * @param serviceComponent
 * @param type
 */
public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + serviceName + ""String_Node_Str""+ version+ ""String_Node_Str""+ orgName+ ""String_Node_Str""+ groupName+ ""String_Node_Str""+ serviceComponent+ ""String_Node_Str""+ type);
  }
synchronized (authLevelMap) {
    authLevelMap.remove(orgName);
  }
  if (AuthD.revisionNumber < ISAuthConstants.AUTHSERVICE_REVISION7_0 && serviceName.equals(CORE_AUTH)) {
synchronized (supportedModulesMap) {
      supportedModulesMap.remove(orgName);
    }
  }
  AMAuthenticationManager.buildModuleInstanceForService(orgName,serviceName);
  updateAuthConfiguration(serviceName,orgName,serviceComponent);
}","/** 
 * Implements methods in <code>com.sun.identity.sm.ServiceListener</code>.
 * @param serviceName
 * @param version
 * @param orgName
 * @param groupName
 * @param serviceComponent
 * @param type
 */
public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + serviceName + ""String_Node_Str""+ version+ ""String_Node_Str""+ orgName+ ""String_Node_Str""+ groupName+ ""String_Node_Str""+ serviceComponent+ ""String_Node_Str""+ type);
  }
synchronized (authLevelMap) {
    authLevelMap.remove(orgName);
  }
  if (AuthD.revisionNumber < ISAuthConstants.AUTHSERVICE_REVISION7_0 && serviceName.equals(CORE_AUTH)) {
synchronized (supportedModulesMap) {
      supportedModulesMap.remove(orgName);
    }
  }
  AMAuthenticationManager.updateModuleInstanceTable(orgName,serviceName);
  updateAuthConfiguration(serviceName,orgName,serviceComponent);
}"
79775,"/** 
 * Constructs an instance of <code>AMAuthenticationManager</code> for the specified realm to manage the authentication module instances available to this realm.
 * @param token Single sign on token of the user identity on whose behalf the operations are performed.
 * @param org The realm in which the module instance management is performed.
 * @throws AMConfigurationException if Service Management related error occurs.
 */
public AMAuthenticationManager(SSOToken token,String org) throws AMConfigurationException {
  try {
    SMSEntry.validateToken(token);
    this.token=token;
    this.realm=com.sun.identity.sm.DNMapper.orgNameToDN(org);
    if ((this.realm != null) && ((this.realm).length() != 0)) {
      this.realm=(this.realm).toLowerCase();
    }
    orgServiceConfig=getOrgServiceConfig();
    if (orgServiceConfig == null) {
      throw new AMConfigurationException(BUNDLE_NAME,""String_Node_Str"",new Object[]{realm});
    }
synchronized (AMAuthenticationManager.class) {
      if (MODULE_INSTANCE_TABLE.get(realm) == null) {
        buildModuleInstanceTable(token,realm);
      }
    }
  }
 catch (  SMSException e) {
    throw new AMConfigurationException(e);
  }
catch (  Exception ee) {
    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);
    if ((installTime != null) && installTime.equalsIgnoreCase(""String_Node_Str"")) {
      DEBUG.error(""String_Node_Str"",ee);
    }
  }
}","/** 
 * Constructs an instance of <code>AMAuthenticationManager</code> for the specified realm to manage the authentication module instances available to this realm.
 * @param token Single sign on token of the user identity on whose behalf the operations are performed.
 * @param org The realm in which the module instance management is performed.
 * @throws AMConfigurationException if Service Management related error occurs.
 */
public AMAuthenticationManager(SSOToken token,String org) throws AMConfigurationException {
  try {
    SMSEntry.validateToken(token);
    this.token=token;
    this.realm=com.sun.identity.sm.DNMapper.orgNameToDN(org);
    orgServiceConfig=getOrgServiceConfig();
    if (orgServiceConfig == null) {
      throw new AMConfigurationException(BUNDLE_NAME,""String_Node_Str"",new Object[]{realm});
    }
synchronized (AMAuthenticationManager.class) {
      if (!MODULE_INSTANCE_TABLE.containsKey(realm)) {
        buildModuleInstanceTable(token,realm);
      }
    }
  }
 catch (  SMSException e) {
    throw new AMConfigurationException(e);
  }
catch (  Exception ee) {
    String installTime=SystemProperties.get(AdminTokenAction.AMADMIN_MODE);
    if ((installTime != null) && installTime.equalsIgnoreCase(""String_Node_Str"")) {
      DEBUG.error(""String_Node_Str"",ee);
    }
  }
}"
79776,"/** 
 * Updates the static module instance table for the specified service in the realm.
 * @param realm The realm in which the operation is processed.
 * @param serviceName the service for which the table is built.
 */
public static synchronized void buildModuleInstanceForService(String realm,String serviceName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE + ""String_Node_Str""+ realm+ ""String_Node_Str""+ serviceName);
  }
  try {
    String moduleName=getModuleName(serviceName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + moduleName);
    }
    if ((moduleName != null) && (moduleName.length() != 0)) {
      ServiceConfigManager scm=new ServiceConfigManager(serviceName,getAdminToken());
      ServiceConfig config=scm.getOrganizationConfig(realm,null);
      if (config == null) {
        if (DEBUG.messageEnabled()) {
          DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + serviceName + ""String_Node_Str""+ realm);
        }
      }
      realm=com.sun.identity.sm.DNMapper.orgNameToDN(realm);
synchronized (MODULE_INSTANCE_TABLE) {
        Map<String,Set<String>> moduleMap=MODULE_INSTANCE_TABLE.remove(realm);
        if (moduleMap != null) {
          Map<String,Set<String>> newMap=new HashMap<String,Set<String>>(moduleMap);
          newMap.remove(moduleName);
          moduleMap=newMap;
        }
        Set<String> instanceSet=new HashSet<String>();
        Map<String,Set<String>> defaultAttrs=null;
        if (config != null) {
          defaultAttrs=config.getAttributesWithoutDefaults();
        }
        if (defaultAttrs != null && !defaultAttrs.isEmpty()) {
          instanceSet.add(moduleName);
        }
        Set<String> instances=null;
        if (config != null) {
          instances=config.getSubConfigNames();
        }
        if (instances != null) {
          instanceSet.addAll(instances);
        }
        if (!instanceSet.isEmpty()) {
          if (moduleMap == null) {
            moduleMap=new HashMap<String,Set<String>>();
          }
          moduleMap.put(moduleName,instanceSet);
        }
        if (moduleMap != null && !moduleMap.isEmpty()) {
          MODULE_INSTANCE_TABLE.put(realm,moduleMap);
        }
      }
    }
  }
 catch (  Exception e) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"",e);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE);
  }
}","/** 
 * Updates the static module instance table for the specified service in the realm.
 * @param realm The realm in which the operation is processed.
 * @param serviceName the service for which the table is built.
 */
private static synchronized void buildModuleInstanceForService(String realm,String serviceName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE + ""String_Node_Str""+ realm+ ""String_Node_Str""+ serviceName);
  }
  try {
    String moduleName=getModuleName(serviceName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"" + moduleName);
    }
    if ((moduleName != null) && (moduleName.length() != 0)) {
      ServiceConfigManager scm=new ServiceConfigManager(serviceName,getAdminToken());
      ServiceConfig config=scm.getOrganizationConfig(realm,null);
      if (config == null) {
        if (DEBUG.messageEnabled()) {
          DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + serviceName + ""String_Node_Str""+ realm);
        }
      }
      realm=com.sun.identity.sm.DNMapper.orgNameToDN(realm);
synchronized (MODULE_INSTANCE_TABLE) {
        Map<String,Set<String>> moduleMap=MODULE_INSTANCE_TABLE.remove(realm);
        if (moduleMap != null) {
          Map<String,Set<String>> newMap=new HashMap<String,Set<String>>(moduleMap);
          newMap.remove(moduleName);
          moduleMap=newMap;
        }
        Set<String> instanceSet=new HashSet<String>();
        Map<String,Set<String>> defaultAttrs=null;
        if (config != null) {
          defaultAttrs=config.getAttributesWithoutDefaults();
        }
        if (defaultAttrs != null && !defaultAttrs.isEmpty()) {
          instanceSet.add(moduleName);
        }
        Set<String> instances=null;
        if (config != null) {
          instances=config.getSubConfigNames();
        }
        if (instances != null) {
          instanceSet.addAll(instances);
        }
        if (!instanceSet.isEmpty()) {
          if (moduleMap == null) {
            moduleMap=new HashMap<String,Set<String>>();
          }
          moduleMap.put(moduleName,instanceSet);
        }
        if (moduleMap != null && !moduleMap.isEmpty()) {
          MODULE_INSTANCE_TABLE.put(realm,moduleMap);
        }
      }
    }
  }
 catch (  Exception e) {
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""String_Node_Str"",e);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + MODULE_INSTANCE_TABLE);
  }
}"
79777,"/** 
 * Convert from a Token using the serialised JSON blob to generate the JsonValue.
 * @param token Token to be converted back to its original format.
 * @return Non null JsonValue.
 * @throws IllegalArgumentException If the object wrapped inside the Tokenwas not an instance of a Map.
 */
public JsonValue fromToken(Token token){
  if (token == null) {
    return null;
  }
  String data=blobUtils.getBlobAsString(token);
  JsonValue r;
  try {
    r=new JsonValue(serialisation.deserialise(data,Map.class));
    Set<String> keys=new HashSet<String>(r.keys());
    for (    String key : keys) {
      List<String> x=r.get(key).asList(String.class);
      Set<String> set=new HashSet<String>(x);
      r.remove(key);
      r.add(key,set);
    }
  }
 catch (  RuntimeException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  return r;
}","/** 
 * Convert from a Token using the serialised JSON blob to generate the JsonValue.
 * @param token Token to be converted back to its original format.
 * @return Non null JsonValue.
 * @throws IllegalArgumentException If the object wrapped inside the Tokenwas not an instance of a Map.
 */
public JsonValue fromToken(Token token){
  if (token == null) {
    return null;
  }
  String data=blobUtils.getBlobAsString(token);
  if (data == null) {
    return null;
  }
  JsonValue r;
  try {
    r=new JsonValue(serialisation.deserialise(data,Map.class));
    Set<String> keys=new HashSet<String>(r.keys());
    for (    String key : keys) {
      List<String> x=r.get(key).asList(String.class);
      Set<String> set=new HashSet<String>(x);
      r.remove(key);
      r.add(key,set);
    }
  }
 catch (  IllegalStateException e) {
    return null;
  }
  return r;
}"
79778,"/** 
 * Get the BaseURLProvider for a realm.
 * @param realm The realm.
 * @return The BaseURLProvider.
 */
public BaseURLProvider get(String realm){
  String realmDN=DNMapper.orgNameToDN(realm);
  BaseURLProvider cached=providers.get(realmDN);
  if (cached != null) {
    return cached;
  }
  return create(realmDN);
}","/** 
 * Get the BaseURLProvider for a realm.
 * @param request The Http Servlet Request.
 * @param realm The realm.
 * @return The BaseURLProvider.
 */
public BaseURLProvider get(HttpServletRequest request,String realm){
  String realmDN=DNMapper.orgNameToDN(realm);
  BaseURLProvider cached=providers.get(realmDN);
  if (cached != null) {
    return cached;
  }
  return create(request,realmDN);
}"
79779,"private synchronized BaseURLProvider create(String realmDN){
  if (!providers.containsKey(realmDN)) {
    debug.message(""String_Node_Str"",realmDN);
    OpenAMSettingsImpl settings=new OpenAMSettingsImpl(SERVICE_NAME,SERVICE_VERSION);
    try {
      BaseURLProvider provider;
      if (settings.hasConfig(realmDN)) {
        ProviderType providerType=ProviderType.valueOf(settings.getStringSetting(realmDN,PROVIDER_TYPE));
        provider=providerType.getProvider();
        provider.init(settings,realmDN);
        provider.setContextPath(settings.getStringSetting(realmDN,CONTEXT_PATH));
      }
 else {
        provider=new RequestValuesBaseURLProvider();
      }
      providers.put(realmDN,provider);
    }
 catch (    SMSException e) {
      debug.error(""String_Node_Str"",realmDN,e);
      throw new IllegalStateException(e);
    }
catch (    SSOException e) {
      debug.error(""String_Node_Str"",realmDN,e);
      throw new IllegalStateException(e);
    }
  }
  return providers.get(realmDN);
}","private synchronized BaseURLProvider create(HttpServletRequest request,String realmDN){
  if (!providers.containsKey(realmDN)) {
    debug.message(""String_Node_Str"",realmDN);
    OpenAMSettingsImpl settings=new OpenAMSettingsImpl(SERVICE_NAME,SERVICE_VERSION);
    try {
      BaseURLProvider provider;
      if (settings.hasConfig(realmDN)) {
        ProviderType providerType=ProviderType.valueOf(settings.getStringSetting(realmDN,PROVIDER_TYPE));
        provider=providerType.getProvider();
        provider.init(settings,realmDN);
        provider.setContextPath(settings.getStringSetting(realmDN,CONTEXT_PATH));
      }
 else {
        provider=new RequestValuesBaseURLProvider();
        provider.setContextPath(request.getContextPath());
      }
      providers.put(realmDN,provider);
    }
 catch (    SMSException e) {
      debug.error(""String_Node_Str"",realmDN,e);
      throw new IllegalStateException(e);
    }
catch (    SSOException e) {
      debug.error(""String_Node_Str"",realmDN,e);
      throw new IllegalStateException(e);
    }
  }
  return providers.get(realmDN);
}"
79780,"/** 
 * <p>Creates or updates a resource set description.</p> <p>If the request contains a If-Match header an update is performed, otherwise a create is performed.</p> <p>An update will replace the current description of the resource set with the contents of the request body.</p>
 * @param entity The new resource set description.
 * @return A JSON object containing the authorization server's unique id for the resource set and, optionally,a policy uri.
 * @throws NotFoundException If the requested resource set description does not exist.
 * @throws ServerException When an error occurs during creating or updating.
 * @throws BadRequestException If the request JSON is invalid.
 */
@Post public Representation createResourceSet(JsonRepresentation entity) throws NotFoundException, ServerException, BadRequestException {
  ResourceSetDescription resourceSetDescription=new ResourceSetDescription(null,getClientId(),getResourceOwnerId(),validator.validate(toMap(entity)));
  OAuth2Request oAuth2Request=requestFactory.create(getRequest());
  ResourceSetStore store=providerSettingsFactory.get(oAuth2Request).getResourceSetStore();
  try {
    store.create(oAuth2Request,resourceSetDescription);
    for (    ResourceSetRegistrationListener listener : listeners) {
      listener.resourceSetCreated(oAuth2Request.<String>getParameter(""String_Node_Str""),resourceSetDescription);
    }
  }
 catch (  ServerException e) {
    throw e;
  }
catch (  BadRequestException e) {
    throw e;
  }
catch (  NotFoundException e) {
    throw e;
  }
  getResponse().setStatus(new Status(201));
  return createJsonResponse(resourceSetDescription,false,true);
}","/** 
 * <p>Creates or updates a resource set description.</p> <p>If the request contains a If-Match header an update is performed, otherwise a create is performed.</p> <p>An update will replace the current description of the resource set with the contents of the request body.</p>
 * @param entity The new resource set description.
 * @return A JSON object containing the authorization server's unique id for the resource set and, optionally,a policy uri.
 * @throws NotFoundException If the requested resource set description does not exist.
 * @throws ServerException When an error occurs during creating or updating.
 * @throws BadRequestException If the request JSON is invalid.
 */
@Post public Representation createResourceSet(JsonRepresentation entity) throws NotFoundException, ServerException, BadRequestException {
  ResourceSetDescription resourceSetDescription=new ResourceSetDescription(null,getClientId(),getResourceOwnerId(),validator.validate(toMap(entity)));
  OAuth2Request oAuth2Request=requestFactory.create(getRequest());
  ResourceSetStore store=providerSettingsFactory.get(oAuth2Request).getResourceSetStore();
  store.create(oAuth2Request,resourceSetDescription);
  for (  ResourceSetRegistrationListener listener : listeners) {
    listener.resourceSetCreated(oAuth2Request.<String>getParameter(""String_Node_Str""),resourceSetDescription);
  }
  getResponse().setStatus(new Status(201));
  return createJsonResponse(resourceSetDescription,false,true);
}"
79781,"/** 
 * Constructs a new   {@link org.forgerock.openam.rest.resource.CrestRealmRouter} with routes to each of the CRESTresource endpoints.
 * @return A {@code RealmRouter}.
 */
private CrestRouter createResourceRouter(final Set<String> invalidRealmNames){
  FluentRouter rootRealmRouterDelegate=InjectorHolder.getInstance(LoggingFluentRouter.class);
  FluentRouter rootRealmRouter=new RealmBlackListingFluentRouter(rootRealmRouterDelegate,invalidRealmNames);
  FluentRealmRouter dynamicRealmRouter=rootRealmRouter.dynamically();
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(DashboardResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(ServerInfoResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV1.class,""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV2.class,""String_Node_Str"");
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV1.class,""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV2.class,""String_Node_Str"");
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV1.class,""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV2.class,""String_Node_Str"");
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(TrustedDevicesResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(ResourceOwnerOrSuperUserAuthzModule.class,ResourceOwnerOrSuperUserAuthzModule.NAME).forVersion(""String_Node_Str"").to(ResourceSetResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(ResourceOwnerOrSuperUserAuthzModule.class,ResourceOwnerOrSuperUserAuthzModule.NAME).forVersion(""String_Node_Str"").to(UmaPolicyResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(AuditHistory.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(PolicyResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ReferralsResourceV1.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(RealmResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(SessionResourceAuthzModule.class,SessionResourceAuthzModule.NAME).forVersion(""String_Node_Str"").to(SessionResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ApplicationsResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(SubjectAttributesResourceV1.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ApplicationTypesResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ResourceTypesResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(DecisionCombinersResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ConditionTypesResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(SubjectTypesResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(CoreTokenResourceAuthzModule.class,CoreTokenResourceAuthzModule.NAME).forVersion(""String_Node_Str"").to(CoreTokenResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(AdminOnlyAuthzModule.class,AdminOnlyAuthzModule.NAME).forVersion(""String_Node_Str"").to(ScriptResource.class);
  VersionBehaviourConfigListener.bindToServiceConfigManager(rootRealmRouter);
  VersionBehaviourConfigListener.bindToServiceConfigManager(dynamicRealmRouter);
  return rootRealmRouterDelegate;
}","/** 
 * Constructs a new   {@link org.forgerock.openam.rest.resource.CrestRealmRouter} with routes to each of the CRESTresource endpoints.
 * @return A {@code RealmRouter}.
 */
private CrestRouter createResourceRouter(final Set<String> invalidRealmNames){
  FluentRouter rootRealmRouterDelegate=InjectorHolder.getInstance(LoggingFluentRouter.class);
  FluentRouter rootRealmRouter=new RealmBlackListingFluentRouter(rootRealmRouterDelegate,invalidRealmNames);
  FluentRealmRouter dynamicRealmRouter=rootRealmRouter.dynamically();
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(DashboardResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(ServerInfoResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(InjectorHolder.getInstance(UmaConfigurationResource.class));
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV1.class,""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV2.class,""String_Node_Str"");
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV1.class,""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV2.class,""String_Node_Str"");
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV1.class,""String_Node_Str"").forVersion(""String_Node_Str"").to(IdentityResourceV2.class,""String_Node_Str"");
  dynamicRealmRouter.route(""String_Node_Str"").forVersion(""String_Node_Str"").to(TrustedDevicesResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(ResourceOwnerOrSuperUserAuthzModule.class,ResourceOwnerOrSuperUserAuthzModule.NAME).forVersion(""String_Node_Str"").to(ResourceSetResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(UmaPolicyResourceAuthzFilter.class,UmaPolicyResourceAuthzFilter.NAME).forVersion(""String_Node_Str"").to(UmaPolicyResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(ResourceOwnerOrSuperUserAuthzModule.class,ResourceOwnerOrSuperUserAuthzModule.NAME).forVersion(""String_Node_Str"").to(AuditHistory.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(PolicyResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ReferralsResourceV1.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(RealmResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(SessionResourceAuthzModule.class,SessionResourceAuthzModule.NAME).forVersion(""String_Node_Str"").to(SessionResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ApplicationsResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(SubjectAttributesResourceV1.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ApplicationTypesResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ResourceTypesResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(DecisionCombinersResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(ConditionTypesResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(PrivilegeAuthzModule.class,PrivilegeAuthzModule.NAME).forVersion(""String_Node_Str"").to(SubjectTypesResource.class);
  rootRealmRouter.route(""String_Node_Str"").through(CoreTokenResourceAuthzModule.class,CoreTokenResourceAuthzModule.NAME).forVersion(""String_Node_Str"").to(CoreTokenResource.class);
  dynamicRealmRouter.route(""String_Node_Str"").through(AdminOnlyAuthzModule.class,AdminOnlyAuthzModule.NAME).forVersion(""String_Node_Str"").to(ScriptResource.class);
  VersionBehaviourConfigListener.bindToServiceConfigManager(rootRealmRouter);
  VersionBehaviourConfigListener.bindToServiceConfigManager(dynamicRealmRouter);
  return rootRealmRouterDelegate;
}"
79782,"boolean isSuperUser(String userId){
  return sessionService.get().isSuperUser(userId);
}","protected boolean isSuperUser(String userId){
  return sessionService.get().isSuperUser(userId);
}"
79783,"/** 
 * Lets through any request which is coming from a verifiable administrator.
 */
Promise<AuthorizationResult,ResourceException> authorize(ServerContext context){
  try {
    String userId=getUserId(context);
    if (isSuperUser(userId)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId + ""String_Node_Str"");
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessPermitted());
    }
 else {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId);
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
    }
  }
 catch (  ResourceException e) {
    return Promises.newFailedPromise(e);
  }
}","/** 
 * Lets through any request which is coming from a verifiable administrator.
 */
protected Promise<AuthorizationResult,ResourceException> authorize(ServerContext context){
  try {
    String userId=getUserId(context);
    if (isSuperUser(userId)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId + ""String_Node_Str"");
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessPermitted());
    }
 else {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + userId);
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessDenied(""String_Node_Str""));
    }
  }
 catch (  ResourceException e) {
    return Promises.newFailedPromise(e);
  }
}"
79784,"String getUserId(ServerContext context) throws ResourceException {
  SSOTokenContext tokenContext=context.asContext(SSOTokenContext.class);
  try {
    SSOToken token=tokenContext.getCallerSSOToken();
    return token.getProperty(Constants.UNIVERSAL_IDENTIFIER);
  }
 catch (  SSOException e) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"",e);
    }
    throw new ForbiddenException(e.getMessage(),e);
  }
}","protected String getUserId(ServerContext context) throws ResourceException {
  SSOTokenContext tokenContext=context.asContext(SSOTokenContext.class);
  try {
    SSOToken token=tokenContext.getCallerSSOToken();
    return token.getProperty(Constants.UNIVERSAL_IDENTIFIER);
  }
 catch (  SSOException e) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"",e);
    }
    throw new ForbiddenException(e.getMessage(),e);
  }
}"
79785,"/** 
 * Prevents access to   {@link org.forgerock.openam.forgerockrest.cts.CoreTokenResource} unless thisREST endpoint has been explicitly enabled. If the endpoint has been explicitly enabled, it defers to {@link org.forgerock.openam.rest.authz.AdminOnlyAuthzModule} to ensure that the SSO Token belongs toa user with Administrator-level access.
 */
@Override Promise<AuthorizationResult,ResourceException> authorize(ServerContext context){
  if (!enabled) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"");
    }
    return Promises.newSuccessfulPromise(AuthorizationResult.failure(""String_Node_Str""));
  }
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"");
  }
  return super.authorize(context);
}","/** 
 * Prevents access to   {@link org.forgerock.openam.forgerockrest.cts.CoreTokenResource} unless thisREST endpoint has been explicitly enabled. If the endpoint has been explicitly enabled, it defers to {@link org.forgerock.openam.rest.authz.AdminOnlyAuthzModule} to ensure that the SSO Token belongs toa user with Administrator-level access.
 */
@Override protected Promise<AuthorizationResult,ResourceException> authorize(ServerContext context){
  if (!enabled) {
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"");
    }
    return Promises.newSuccessfulPromise(AuthorizationResult.failure(""String_Node_Str""));
  }
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"");
  }
  return super.authorize(context);
}"
79786,"private String getUserIdFromUri(ServerContext context) throws InternalServerErrorException {
  String username=context.asContext(RouterContext.class).getUriTemplateVariables().get(""String_Node_Str"");
  String realm=context.asContext(RealmContext.class).getResolvedRealm();
  return IdUtils.getIdentity(username,realm).getUniversalId();
}","protected String getUserIdFromUri(ServerContext context) throws InternalServerErrorException {
  String username=context.asContext(RouterContext.class).getUriTemplateVariables().get(""String_Node_Str"");
  String realm=context.asContext(RealmContext.class).getResolvedRealm();
  return IdUtils.getIdentity(username,realm).getUniversalId();
}"
79787,"/** 
 * Authorizes caller if they are either a super user or they are making a request to a resource they ""own"", i.e. demo making a call to /json/users/demo/uma/resourceset.
 * @param context The request context.
 * @return The authorization result.
 */
@Override Promise<AuthorizationResult,ResourceException> authorize(ServerContext context){
  try {
    String loggedInUserId=getUserId(context);
    if (isSuperUser(loggedInUserId)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + loggedInUserId + ""String_Node_Str"");
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessPermitted());
    }
 else     if (loggedInUserId.equalsIgnoreCase(getUserIdFromUri(context))) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + loggedInUserId + ""String_Node_Str"");
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessPermitted());
    }
 else {
      if (debug.warningEnabled()) {
        debug.warning(""String_Node_Str"" + loggedInUserId);
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessDenied(""String_Node_Str"" + loggedInUserId + ""String_Node_Str""));
    }
  }
 catch (  ResourceException e) {
    return Promises.newFailedPromise(e);
  }
}","/** 
 * Authorizes caller if they are either a super user or they are making a request to a resource they ""own"", i.e. demo making a call to /json/users/demo/uma/resourceset.
 * @param context The request context.
 * @return The authorization result.
 */
@Override protected Promise<AuthorizationResult,ResourceException> authorize(ServerContext context){
  try {
    String loggedInUserId=getUserId(context);
    if (isSuperUser(loggedInUserId)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + loggedInUserId + ""String_Node_Str"");
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessPermitted());
    }
 else     if (loggedInUserId.equalsIgnoreCase(getUserIdFromUri(context))) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + loggedInUserId + ""String_Node_Str"");
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessPermitted());
    }
 else {
      if (debug.warningEnabled()) {
        debug.warning(""String_Node_Str"" + loggedInUserId);
      }
      return Promises.newSuccessfulPromise(AuthorizationResult.accessDenied(""String_Node_Str"" + loggedInUserId + ""String_Node_Str""));
    }
  }
 catch (  ResourceException e) {
    return Promises.newFailedPromise(e);
  }
}"
79788,"/** 
 * Write message into file
 * @param prefix Message prefix
 * @param msg    Message to be recorded.
 * @param th     the optional <code>java.lang.Throwable</code> which ifpresent will be used to record the stack trace.
 * @throws IOException
 */
public void writeIt(String prefix,String msg,Throwable th) throws IOException ;","/** 
 * Write message into file
 * @param prefix Message prefix
 * @param msg    Message to be recorded.
 * @param th     the optional <code>java.lang.Throwable</code> which ifpresent will be used to record the stack trace.
 * @throws IOException
 */
public void writeIt(StringBuilder prefix,String msg,Throwable th) throws IOException ;"
79789,"boolean processIndexType(IndexType indexType,String indexName,String orgDN) throws AuthLoginException {
  boolean ignoreProfile=false;
  IndexType previousType=loginState.getPreviousIndexType();
  String normOrgDN=DNUtils.normalizeDN(orgDN);
  if ((previousType != IndexType.LEVEL && previousType != IndexType.COMPOSITE_ADVICE) || indexType != IndexType.MODULE_INSTANCE) {
    HttpServletRequest hreq=loginState.getHttpServletRequest();
    boolean isTokenValid=false;
    final boolean isFederation=indexType == AuthContext.IndexType.MODULE_INSTANCE && ISAuthConstants.FEDERATION_MODULE.equals(indexName);
    if (hreq != null && !isFederation) {
      try {
        SSOTokenManager manager=SSOTokenManager.getInstance();
        SSOToken ssoToken=manager.createSSOToken(hreq);
        if (manager.isValidToken(ssoToken)) {
          debug.message(""String_Node_Str"");
          isTokenValid=true;
        }
      }
 catch (      Exception e) {
        debug.message(""String_Node_Str"" + e.toString());
      }
      if (!isTokenValid) {
        debug.message(""String_Node_Str"");
        Hashtable requestHash=loginState.getRequestParamHash();
        String newOrgDN=AuthUtils.getDomainNameByRequest(hreq,requestHash);
        if (debug.messageEnabled()) {
          debug.message(""String_Node_Str"" + orgDN + ""String_Node_Str""+ newOrgDN);
        }
        if (normOrgDN != null) {
          if (!normOrgDN.equals(newOrgDN) && !pCookieMode) {
            loginStatus.setStatus(LoginStatus.AUTH_RESET);
            loginState.setErrorCode(AMAuthErrorCode.AUTH_ERROR);
            setErrorMsgAndTemplate();
            internalAuthError=true;
            throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null);
          }
        }
      }
    }
  }
  if (indexType == IndexType.COMPOSITE_ADVICE) {
    debug.message(""String_Node_Str"");
    String compositeAdvice=URLEncDec.decode(indexName);
    loginState.setCompositeAdvice(compositeAdvice);
    try {
      if (processCompositeAdvice(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.LEVEL) {
    debug.message(""String_Node_Str"");
    try {
      if (processLevel(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.USER) {
    debug.message(""String_Node_Str"");
    boolean userValid=false;
    if (!loginState.ignoreProfile()) {
      userValid=validateUser(indexName);
    }
 else {
      ignoreProfile=true;
    }
    if (pCookieMode) {
      processPCookieMode(userValid);
      return true;
    }
 else     if ((!userValid) && (!ignoreProfile)) {
      debug.message(""String_Node_Str"");
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_LOGIN_FAILED);
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_USER_INACTIVE,null);
    }
 else     if (ignoreProfile) {
      setAuthError(AMAuthErrorCode.AUTH_PROFILE_ERROR,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_PROFILE_ERROR,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.MODULE_INSTANCE) {
    debug.message(""String_Node_Str"");
    boolean instanceExists=loginState.getDomainAuthenticators().contains(indexName);
    if (!indexName.equals(ISAuthConstants.APPLICATION_MODULE) && !instanceExists) {
      debug.message(""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_MODULE_DENIED);
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_MODULE_DENIED,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.ROLE) {
    debug.message(""String_Node_Str"");
    if (loginState.ignoreProfile()) {
      setAuthError(AMAuthErrorCode.AUTH_TYPE_DENIED,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_TYPE_DENIED,null);
    }
  }
  return false;
}","boolean processIndexType(IndexType indexType,String indexName,String orgDN) throws AuthLoginException {
  boolean ignoreProfile=false;
  IndexType previousType=loginState.getPreviousIndexType();
  String normOrgDN=DNUtils.normalizeDN(orgDN);
  if ((previousType != IndexType.LEVEL && previousType != IndexType.COMPOSITE_ADVICE) || indexType != IndexType.MODULE_INSTANCE) {
    HttpServletRequest hreq=loginState.getHttpServletRequest();
    boolean isTokenValid=false;
    final boolean isFederation=indexType == IndexType.MODULE_INSTANCE && ISAuthConstants.FEDERATION_MODULE.equals(indexName);
    if (hreq != null && !isFederation) {
      try {
        SSOTokenManager manager=SSOTokenManager.getInstance();
        SSOToken ssoToken=manager.createSSOToken(hreq);
        if (manager.isValidToken(ssoToken)) {
          debug.message(""String_Node_Str"");
          isTokenValid=true;
        }
      }
 catch (      Exception e) {
        debug.message(""String_Node_Str"" + e.toString());
      }
      if (!isTokenValid) {
        debug.message(""String_Node_Str"");
        Hashtable requestHash=loginState.getRequestParamHash();
        String newOrgDN=AuthUtils.getDomainNameByRequest(hreq,requestHash);
        if (debug.messageEnabled()) {
          debug.message(""String_Node_Str"" + orgDN + ""String_Node_Str""+ newOrgDN);
        }
        if (normOrgDN != null) {
          if (!normOrgDN.equals(newOrgDN) && !pCookieMode) {
            loginStatus.setStatus(LoginStatus.AUTH_RESET);
            loginState.setErrorCode(AMAuthErrorCode.AUTH_ERROR);
            setErrorMsgAndTemplate();
            internalAuthError=true;
            throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null);
          }
        }
      }
    }
  }
  if (indexType == IndexType.COMPOSITE_ADVICE) {
    debug.message(""String_Node_Str"");
    String compositeAdvice=URLEncDec.decode(indexName);
    loginState.setCompositeAdvice(compositeAdvice);
    try {
      if (processCompositeAdvice(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.LEVEL) {
    debug.message(""String_Node_Str"");
    try {
      if (processLevel(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.USER) {
    debug.message(""String_Node_Str"");
    boolean userValid=false;
    if (!loginState.ignoreProfile()) {
      userValid=validateUser(indexName);
    }
 else {
      ignoreProfile=true;
    }
    if (pCookieMode) {
      processPCookieMode(userValid);
      return true;
    }
 else     if ((!userValid) && (!ignoreProfile)) {
      debug.message(""String_Node_Str"");
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_LOGIN_FAILED);
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_USER_INACTIVE,null);
    }
 else     if (ignoreProfile) {
      setAuthError(AMAuthErrorCode.AUTH_PROFILE_ERROR,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_PROFILE_ERROR,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.MODULE_INSTANCE) {
    debug.message(""String_Node_Str"");
    boolean instanceExists=loginState.getDomainAuthenticators().contains(indexName);
    if (!indexName.equals(ISAuthConstants.APPLICATION_MODULE) && !instanceExists) {
      debug.message(""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_MODULE_DENIED);
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_MODULE_DENIED,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.ROLE) {
    debug.message(""String_Node_Str"");
    if (loginState.ignoreProfile()) {
      setAuthError(AMAuthErrorCode.AUTH_TYPE_DENIED,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_TYPE_DENIED,null);
    }
  }
  return false;
}"
79790,"boolean processIndexType(IndexType indexType,String indexName,String orgDN) throws AuthLoginException {
  boolean ignoreProfile=false;
  IndexType previousType=loginState.getPreviousIndexType();
  String normOrgDN=DNUtils.normalizeDN(orgDN);
  if ((previousType != IndexType.LEVEL && previousType != IndexType.COMPOSITE_ADVICE) || indexType != IndexType.MODULE_INSTANCE) {
    HttpServletRequest hreq=loginState.getHttpServletRequest();
    boolean isTokenValid=false;
    final boolean isFederation=indexType == AuthContext.IndexType.MODULE_INSTANCE && ISAuthConstants.FEDERATION_MODULE.equals(indexName);
    if (hreq != null && !isFederation) {
      try {
        SSOTokenManager manager=SSOTokenManager.getInstance();
        SSOToken ssoToken=manager.createSSOToken(hreq);
        if (manager.isValidToken(ssoToken)) {
          debug.message(""String_Node_Str"");
          isTokenValid=true;
        }
      }
 catch (      Exception e) {
        debug.message(""String_Node_Str"" + e.toString());
      }
      if (!isTokenValid) {
        debug.message(""String_Node_Str"");
        Hashtable requestHash=loginState.getRequestParamHash();
        String newOrgDN=AuthUtils.getDomainNameByRequest(hreq,requestHash);
        if (debug.messageEnabled()) {
          debug.message(""String_Node_Str"" + orgDN + ""String_Node_Str""+ newOrgDN);
        }
        if (normOrgDN != null) {
          if (!normOrgDN.equals(newOrgDN) && !pCookieMode) {
            loginStatus.setStatus(LoginStatus.AUTH_RESET);
            loginState.setErrorCode(AMAuthErrorCode.AUTH_ERROR);
            setErrorMsgAndTemplate();
            internalAuthError=true;
            throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null);
          }
        }
      }
    }
  }
  if (indexType == IndexType.COMPOSITE_ADVICE) {
    debug.message(""String_Node_Str"");
    String compositeAdvice=URLEncDec.decode(indexName);
    loginState.setCompositeAdvice(compositeAdvice);
    try {
      if (processCompositeAdvice(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.LEVEL) {
    debug.message(""String_Node_Str"");
    try {
      if (processLevel(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.USER) {
    debug.message(""String_Node_Str"");
    boolean userValid=false;
    if (!loginState.ignoreProfile()) {
      userValid=validateUser(indexName);
    }
 else {
      ignoreProfile=true;
    }
    if (pCookieMode) {
      processPCookieMode(userValid);
      return true;
    }
 else     if ((!userValid) && (!ignoreProfile)) {
      debug.message(""String_Node_Str"");
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_LOGIN_FAILED);
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_USER_INACTIVE,null);
    }
 else     if (ignoreProfile) {
      setAuthError(AMAuthErrorCode.AUTH_PROFILE_ERROR,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_PROFILE_ERROR,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.MODULE_INSTANCE) {
    debug.message(""String_Node_Str"");
    boolean instanceExists=loginState.getDomainAuthenticators().contains(indexName);
    if (!indexName.equals(ISAuthConstants.APPLICATION_MODULE) && !instanceExists) {
      debug.message(""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_MODULE_DENIED);
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_MODULE_DENIED,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.ROLE) {
    debug.message(""String_Node_Str"");
    if (loginState.ignoreProfile()) {
      setAuthError(AMAuthErrorCode.AUTH_TYPE_DENIED,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_TYPE_DENIED,null);
    }
  }
  return false;
}","boolean processIndexType(IndexType indexType,String indexName,String orgDN) throws AuthLoginException {
  boolean ignoreProfile=false;
  IndexType previousType=loginState.getPreviousIndexType();
  String normOrgDN=DNUtils.normalizeDN(orgDN);
  if ((previousType != IndexType.LEVEL && previousType != IndexType.COMPOSITE_ADVICE) || indexType != IndexType.MODULE_INSTANCE) {
    HttpServletRequest hreq=loginState.getHttpServletRequest();
    boolean isTokenValid=false;
    final boolean isFederation=indexType == IndexType.MODULE_INSTANCE && ISAuthConstants.FEDERATION_MODULE.equals(indexName);
    if (hreq != null && !isFederation) {
      try {
        SSOTokenManager manager=SSOTokenManager.getInstance();
        SSOToken ssoToken=manager.createSSOToken(hreq);
        if (manager.isValidToken(ssoToken)) {
          debug.message(""String_Node_Str"");
          isTokenValid=true;
        }
      }
 catch (      Exception e) {
        debug.message(""String_Node_Str"" + e.toString());
      }
      if (!isTokenValid) {
        debug.message(""String_Node_Str"");
        Hashtable requestHash=loginState.getRequestParamHash();
        String newOrgDN=AuthUtils.getDomainNameByRequest(hreq,requestHash);
        if (debug.messageEnabled()) {
          debug.message(""String_Node_Str"" + orgDN + ""String_Node_Str""+ newOrgDN);
        }
        if (normOrgDN != null) {
          if (!normOrgDN.equals(newOrgDN) && !pCookieMode) {
            loginStatus.setStatus(LoginStatus.AUTH_RESET);
            loginState.setErrorCode(AMAuthErrorCode.AUTH_ERROR);
            setErrorMsgAndTemplate();
            internalAuthError=true;
            throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_ERROR,null);
          }
        }
      }
    }
  }
  if (indexType == IndexType.COMPOSITE_ADVICE) {
    debug.message(""String_Node_Str"");
    String compositeAdvice=URLEncDec.decode(indexName);
    loginState.setCompositeAdvice(compositeAdvice);
    try {
      if (processCompositeAdvice(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.LEVEL) {
    debug.message(""String_Node_Str"");
    try {
      if (processLevel(indexType,indexName,orgDN,clientType)) {
        debug.message(""String_Node_Str"");
        return true;
      }
 else {
        return false;
      }
    }
 catch (    AuthException ae) {
      loginState.setErrorCode(ae.getErrorCode());
      loginState.logFailed(ae.getMessage());
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(ae);
    }
  }
 else   if (indexType == IndexType.USER) {
    debug.message(""String_Node_Str"");
    boolean userValid=false;
    if (!loginState.ignoreProfile()) {
      userValid=validateUser(indexName);
    }
 else {
      ignoreProfile=true;
    }
    if (pCookieMode) {
      processPCookieMode(userValid);
      return true;
    }
 else     if ((!userValid) && (!ignoreProfile)) {
      debug.message(""String_Node_Str"");
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_LOGIN_FAILED);
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_USER_INACTIVE,null);
    }
 else     if (ignoreProfile) {
      setAuthError(AMAuthErrorCode.AUTH_PROFILE_ERROR,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_PROFILE_ERROR,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.MODULE_INSTANCE) {
    debug.message(""String_Node_Str"");
    boolean instanceExists=loginState.getDomainAuthenticators().contains(indexName);
    if (!indexName.equals(ISAuthConstants.APPLICATION_MODULE) && !instanceExists) {
      debug.message(""String_Node_Str"");
      loginState.setErrorCode(AMAuthErrorCode.AUTH_MODULE_DENIED);
      loginState.logFailed(bundle.getString(""String_Node_Str""),""String_Node_Str"");
      setErrorMsgAndTemplate();
      loginStatus.setStatus(LoginStatus.AUTH_FAILED);
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_MODULE_DENIED,null);
    }
 else {
      return false;
    }
  }
 else   if (indexType == IndexType.ROLE) {
    debug.message(""String_Node_Str"");
    if (loginState.ignoreProfile()) {
      setAuthError(AMAuthErrorCode.AUTH_TYPE_DENIED,""String_Node_Str"");
      throw new AuthLoginException(BUNDLE_NAME,AMAuthErrorCode.AUTH_TYPE_DENIED,null);
    }
  }
  return false;
}"
79791,"/** 
 * Write message into file
 * @param prefix Message prefix
 * @param msg    Message to be recorded.
 * @param th     the optional <code>java.lang.Throwable</code> which ifpresent will be used to record the stack trace.
 * @throws IOException
 */
public void writeIt(String prefix,String msg,Throwable th) throws IOException ;","/** 
 * Write message into file
 * @param prefix Message prefix
 * @param msg    Message to be recorded.
 * @param th     the optional <code>java.lang.Throwable</code> which ifpresent will be used to record the stack trace.
 * @throws IOException
 */
public void writeIt(StringBuilder prefix,String msg,Throwable th) throws IOException ;"
79792,"/** 
 * Write message into file
 * @param prefix Message prefix
 * @param msg    Message to be recorded.
 * @param th     the optional <code>java.lang.Throwable</code> which ifpresent will be used to record the stack trace.
 * @throws IOException
 */
public void writeIt(String prefix,String msg,Throwable th) throws IOException ;","/** 
 * Write message into file
 * @param prefix Message prefix
 * @param msg    Message to be recorded.
 * @param th     the optional <code>java.lang.Throwable</code> which ifpresent will be used to record the stack trace.
 * @throws IOException
 */
public void writeIt(StringBuilder prefix,String msg,Throwable th) throws IOException ;"
79793,"/** 
 * Compute the final log file name (prefix and suffix)
 * @param fileName the log file name base
 * @return the complete log file name
 */
private String wrapFilename(String fileName){
  StringBuilder newFileName=new StringBuilder();
  if (debugPrefix != null) {
    newFileName.append(debugPrefix);
  }
  newFileName.append(fileName);
synchronized (suffixDateFormat) {
    if (suffixDateFormat != null && rotationInterval > 0) {
      newFileName.append(suffixDateFormat.format(new Date(clock.now())));
    }
  }
  return newFileName.toString();
}","/** 
 * Compute the final log file name (prefix and suffix)
 * @param fileName the log file name base
 * @return the complete log file name
 */
private String wrapFilename(String fileName){
  StringBuilder newFileName=new StringBuilder();
  if (debugPrefix != null) {
    newFileName.append(debugPrefix);
  }
  newFileName.append(fileName);
  if (suffixDateFormat != null && rotationInterval > 0) {
synchronized (suffixDateFormat) {
      newFileName.append(suffixDateFormat.format(new Date(clock.now())));
    }
  }
  return newFileName.toString();
}"
79794,"/** 
 * Creates an instance of <code>DebugImpl</code>.
 * @param debugName Name of the debug.
 */
public DebugImpl(String debugName,DebugFileProvider debugFileProvider){
  this.debugName=debugName;
  if (SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL) != null) {
    setDebug(SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL));
  }
 else {
    setDebug(DebugLevel.OFF);
  }
  this.debugFileProvider=debugFileProvider;
  stdoutDebugFile=debugFileProvider.getStdOutDebugFile();
  String mf=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_MERGEALL);
  mergeAllMode=""String_Node_Str"".equals(mf);
}","/** 
 * Creates an instance of <code>DebugImpl</code>.
 * @param debugName Name of the debug.
 */
public DebugImpl(String debugName,DebugFileProvider debugFileProvider){
  this.debugName=debugName;
  if (SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL) != null) {
    setDebug(SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL));
  }
 else {
    setDebug(DebugLevel.ON);
  }
  this.debugFileProvider=debugFileProvider;
  stdoutDebugFile=debugFileProvider.getStdOutDebugFile();
  String mf=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_MERGEALL);
  mergeAllMode=""String_Node_Str"".equals(mf);
}"
79795,"/** 
 * Creates an instance of <code>DebugImpl</code>.
 * @param debugName Name of the debug.
 */
public DebugImpl(String debugName,DebugFileProvider debugFileProvider){
  this.debugName=debugName;
  if (SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL) != null) {
    setDebug(SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL));
  }
 else {
    setDebug(DebugLevel.OFF);
  }
  this.debugFileProvider=debugFileProvider;
  stdoutDebugFile=debugFileProvider.getStdOutDebugFile();
  String mf=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_MERGEALL);
  mergeAllMode=""String_Node_Str"".equals(mf);
}","/** 
 * Creates an instance of <code>DebugImpl</code>.
 * @param debugName Name of the debug.
 */
public DebugImpl(String debugName,DebugFileProvider debugFileProvider){
  this.debugName=debugName;
  if (SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL) != null) {
    setDebug(SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL));
  }
 else {
    setDebug(DebugLevel.ON);
  }
  this.debugFileProvider=debugFileProvider;
  stdoutDebugFile=debugFileProvider.getStdOutDebugFile();
  String mf=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_MERGEALL);
  mergeAllMode=""String_Node_Str"".equals(mf);
}"
79796,"@Inject public LDAPConfig(String rootSuffix){
  defaultCTSRootSuffix=DN.valueOf(rootSuffix).child(""String_Node_Str"").child(""String_Node_Str"").child(""String_Node_Str"");
}","@Inject public LDAPConfig(String rootSuffix){
  defaultCTSRootSuffix=DN.valueOf(rootSuffix).child(""String_Node_Str"").child(""String_Node_Str"").child(""String_Node_Str"");
  update();
}"
79797,"@Test public void shouldIndicateHasChanged(){
  PowerMockito.mockStatic(SystemProperties.class);
  given(SystemProperties.get(anyString())).willReturn(""String_Node_Str"");
  LDAPConfig config=new LDAPConfig(""String_Node_Str"");
  config.update();
  assertThat(config.hasChanged()).isTrue();
}","@Test public void shouldIndicateHasChanged(){
  PowerMockito.mockStatic(SystemProperties.class);
  given(SystemProperties.get(anyString())).willReturn(""String_Node_Str"");
  LDAPConfig config=new LDAPConfig(""String_Node_Str"");
  assertThat(config.hasChanged()).isTrue();
}"
79798,"@Override public void validate() throws EntitlementException {
  if (startTime == null && startDay == null && startDate == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + ""String_Node_Str"" + START_DATE + ""String_Node_Str""+ START_TIME+ ""String_Node_Str""+ START_DAY);
    }
    throw new EntitlementException(AT_LEAST_ONE_OF_TIME_PROPS_SHOULD_BE_DEFINED,START_DATE + ""String_Node_Str"" + START_TIME+ ""String_Node_Str""+ START_DAY);
  }
  if (startTime != null && endTime == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + START_TIME + ""String_Node_Str""+ END_TIME);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,START_TIME,END_TIME);
  }
  if (startTime == null && endTime != null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + END_TIME + ""String_Node_Str""+ START_TIME);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,END_TIME,START_TIME);
  }
  if (startDay != null && endDay == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + START_DAY + ""String_Node_Str""+ END_DAY);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,START_DAY,END_DAY);
  }
  if (startDay == null && endDay != null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + END_DAY + ""String_Node_Str""+ START_DAY);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,END_DAY,START_DAY);
  }
  if (startDate != null && endDate == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + START_DATE + ""String_Node_Str""+ END_DATE);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,START_DATE,END_DATE);
  }
  if (startDate == null && endDate != null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + END_DATE + ""String_Node_Str""+ START_DATE);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,END_DATE,START_DATE);
  }
  if (startDateCal.getTime().getTime() > endDateCal.getTime().getTime()) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"");
    }
    throw new EntitlementException(START_DATE_AFTER_END_DATE);
  }
}","@Override public void validate() throws EntitlementException {
  if (startTime == null && startDay == null && startDate == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + ""String_Node_Str"" + START_DATE + ""String_Node_Str""+ START_TIME+ ""String_Node_Str""+ START_DAY);
    }
    throw new EntitlementException(AT_LEAST_ONE_OF_TIME_PROPS_SHOULD_BE_DEFINED,START_DATE + ""String_Node_Str"" + START_TIME+ ""String_Node_Str""+ START_DAY);
  }
  if (startTime != null && endTime == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + START_TIME + ""String_Node_Str""+ END_TIME);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,START_TIME,END_TIME);
  }
  if (startTime == null && endTime != null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + END_TIME + ""String_Node_Str""+ START_TIME);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,END_TIME,START_TIME);
  }
  if (startDay != null && endDay == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + START_DAY + ""String_Node_Str""+ END_DAY);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,START_DAY,END_DAY);
  }
  if (startDay == null && endDay != null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + END_DAY + ""String_Node_Str""+ START_DAY);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,END_DAY,START_DAY);
  }
  if (startDate != null && endDate == null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + START_DATE + ""String_Node_Str""+ END_DATE);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,START_DATE,END_DATE);
  }
  if (startDate == null && endDate != null) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + END_DATE + ""String_Node_Str""+ START_DATE);
    }
    throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,END_DATE,START_DATE);
  }
  if (startDate != null) {
    if (startDateCal == null || endDateCal == null) {
      if (debug.errorEnabled()) {
        debug.error(""String_Node_Str"" + START_DATE + ""String_Node_Str""+ END_DATE+ ""String_Node_Str"");
      }
      throw new EntitlementException(PAIR_PROPERTY_NOT_DEFINED,END_DATE,START_DATE);
    }
 else {
      if (startDateCal.getTime().getTime() > endDateCal.getTime().getTime()) {
        if (debug.errorEnabled()) {
          debug.error(""String_Node_Str"");
        }
        throw new EntitlementException(START_DATE_AFTER_END_DATE,startDateCal.getTime(),endDateCal.getTime());
      }
    }
  }
}"
79799,"@Inject public LDAPConfig(String rootSuffix){
  defaultCTSRootSuffix=DN.valueOf(rootSuffix).child(""String_Node_Str"").child(""String_Node_Str"").child(""String_Node_Str"");
}","@Inject public LDAPConfig(String rootSuffix){
  defaultCTSRootSuffix=DN.valueOf(rootSuffix).child(""String_Node_Str"").child(""String_Node_Str"").child(""String_Node_Str"");
  update();
}"
79800,"@Test public void shouldIndicateHasChanged(){
  PowerMockito.mockStatic(SystemProperties.class);
  given(SystemProperties.get(anyString())).willReturn(""String_Node_Str"");
  LDAPConfig config=new LDAPConfig(""String_Node_Str"");
  config.update();
  assertThat(config.hasChanged()).isTrue();
}","@Test public void shouldIndicateHasChanged(){
  PowerMockito.mockStatic(SystemProperties.class);
  given(SystemProperties.get(anyString())).willReturn(""String_Node_Str"");
  LDAPConfig config=new LDAPConfig(""String_Node_Str"");
  assertThat(config.hasChanged()).isTrue();
}"
79801,"/** 
 * {@inheritDoc}
 */
@Override public void createInstance(ServerContext context,CreateRequest request,ResultHandler<Resource> handler){
  String providedName=null;
  try {
    providedName=request.getNewResourceId();
    if (!providedName.equals(DN.escapeAttributeValue(providedName))) {
      throw new EntitlementException(EntitlementException.INVALID_VALUE,new Object[]{""String_Node_Str"" + providedName + ""String_Node_Str""});
    }
    Privilege policy=policyParser.parsePolicy(providedName,request.getContent());
    if (isNotBlank(providedName) && !providedName.equals(policy.getName())) {
      DEBUG.error(""String_Node_Str"");
      throw new EntitlementException(EntitlementException.POLICY_NAME_MISMATCH);
    }
    policyStoreProvider.getPolicyStore(context).create(policy);
    handler.handleResult(policyResource(policy));
  }
 catch (  EntitlementException ex) {
    DEBUG.error(""String_Node_Str"" + providedName,ex);
    handler.handleError(resourceErrorHandler.handleError(request,ex));
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void createInstance(ServerContext context,CreateRequest request,ResultHandler<Resource> handler){
  String providedName=null;
  try {
    providedName=request.getNewResourceId();
    Privilege policy=policyParser.parsePolicy(providedName,request.getContent());
    if (isNotBlank(providedName) && !providedName.equals(policy.getName())) {
      DEBUG.error(""String_Node_Str"");
      throw new EntitlementException(EntitlementException.POLICY_NAME_MISMATCH);
    }
    if (isBlank(providedName)) {
      providedName=policy.getName();
    }
    if (!providedName.equals(DN.escapeAttributeValue(providedName))) {
      throw new EntitlementException(EntitlementException.INVALID_VALUE,new Object[]{""String_Node_Str"" + providedName + ""String_Node_Str""});
    }
    policyStoreProvider.getPolicyStore(context).create(policy);
    handler.handleResult(policyResource(policy));
  }
 catch (  EntitlementException ex) {
    DEBUG.error(""String_Node_Str"" + providedName,ex);
    handler.handleError(resourceErrorHandler.handleError(request,ex));
  }
}"
79802,"/** 
 * Notifies the monitoring system that a rate tracker must be incremented, and the rate information recalculated.
 */
public void add(){
synchronized (this) {
    count.incrementAndGet();
  }
  rateWindow.recalculate(timer.now());
}","/** 
 * Notifies the monitoring system that a rate tracker must be incremented, and the rate information recalculated.
 */
public void add(){
  count.incrementAndGet();
  rateWindow.incrementForTimestamp(timer.now());
}"
79803,"/** 
 * Increments the cumulative count for an operation and recalculates the rate at which the operation has been made. <br/> Only synchronizes the count increment, NOT the whole method.
 */
void increment(){
  count.incrementAndGet();
  rateWindow.recalculate(timerGetter.now());
}","/** 
 * Increments the cumulative count for an operation and recalculates the rate at which the operation has been made. <br/> Only synchronizes the count increment, NOT the whole method.
 */
void increment(){
  count.incrementAndGet();
  rateWindow.incrementForTimestamp(timerGetter.now());
}"
79804,"/** 
 * Increments the cumulative count of evaluations and recalculates the rate. <br/> Only synchronizes the count increment, NOT the whole method.
 */
public void increment(){
  count.incrementAndGet();
  rateWindow.recalculate(timerGetter.now());
}","/** 
 * Increments the cumulative count of evaluations and recalculates the rate. <br/> Only synchronizes the count increment, NOT the whole method.
 */
public void increment(){
  count.incrementAndGet();
  rateWindow.incrementForTimestamp(timerGetter.now());
}"
79805,"public int compare(AtomicLong rate,AtomicLong rate2){
  return (int)(rate.get() - rate2.get());
}","@Override public int compare(AtomicLong rate,AtomicLong rate2){
  return Long.compare(rate.get(),rate2.get());
}"
79806,"/** 
 * Gets the minimum rate.
 * @return The minimum event rate.
 */
public synchronized long getMinRate(){
  if (minMaxRate.isEmpty()) {
    return 0L;
  }
  if (isAtCurrentIndex(toSampleRate(timer.now()))) {
    addNextSlot();
  }
  return new ArrayList<AtomicLong>(minMaxRate).get(0).get();
}","/** 
 * Gets the minimum rate.
 * @return The minimum event rate.
 */
public long getMinRate(){
  if (window.isEmpty()) {
    return 0L;
  }
  fillInWindow(getCurrentIndex());
  return Collections.min(window.values(),atomicLongComparator).get();
}"
79807,"/** 
 * Constructs a new instance of the RateWindow.
 * @param timer An instance of a Timer.
 * @param size The size of the window.
 * @param sampleRate The sample rate for the window.
 */
public RateWindow(final RateTimer timer,final int size,final long sampleRate){
  this.timer=timer;
  this.size=size;
  this.sampleRate=sampleRate;
  this.window=new LinkedHashMap<Long,AtomicLong>(size);
}","/** 
 * Constructs a new instance of the RateWindow.
 * @param timer An instance of a Timer.
 * @param size The size of the window.
 * @param sampleRate The sample rate for the window.
 */
public RateWindow(final RateTimer timer,final int size,final long sampleRate){
  this.timer=timer;
  this.size=size;
  this.sampleRate=sampleRate;
}"
79808,"/** 
 * Gets the maximum rate.
 * @return The maximum event rate.
 */
public synchronized long getMaxRate(){
  if (minMaxRate.isEmpty()) {
    return 0L;
  }
  if (isAtCurrentIndex(toSampleRate(timer.now()))) {
    addNextSlot();
  }
  List<AtomicLong> maxRate=new ArrayList<AtomicLong>(minMaxRate);
  return maxRate.get(maxRate.size() - 1).get();
}","/** 
 * Gets the maximum rate.
 * @return The maximum event rate.
 */
public long getMaxRate(){
  if (window.isEmpty()) {
    return 0L;
  }
  fillInWindow(getCurrentIndex());
  return Collections.max(window.values(),atomicLongComparator).get();
}"
79809,"/** 
 * Gets the average rate for the sample rate averaged across the whole window. <br/> Does not include the latest window slot if time has not passed beyond it yet as otherwise could skew the average as that time slot has not yet completed and may get more events made in it.
 * @return The average event rate.
 */
public synchronized double getAverageRate(){
  if (window.size() == 0) {
    return 0D;
  }
  double averageRate=0;
  final long now=toSampleRate(timer.now());
  for (  Map.Entry<Long,AtomicLong> entry : window.entrySet()) {
    if (isAtCurrentIndex(now) && entry.getKey().equals(currentIndex)) {
      continue;
    }
    averageRate+=entry.getValue().get();
  }
  return averageRate / window.size();
}","/** 
 * Gets the average rate for the sample rate averaged across the whole window. <br/> Does not include the latest window slot if time has not passed beyond it yet as otherwise could skew the average as that time slot has not yet completed and may get more events made in it.
 * @return The average event rate.
 */
public synchronized double getAverageRate(){
  if (window.isEmpty()) {
    return 0D;
  }
  fillInWindow(getCurrentIndex());
  double averageRate=0;
  for (  Map.Entry<Long,AtomicLong> entry : window.entrySet()) {
    if (entry.getKey().equals(getCurrentIndex())) {
      continue;
    }
    averageRate+=entry.getValue().get();
  }
  return averageRate / window.size();
}"
79810,"/** 
 * Validates the Relay State URL against a list of valid Relay State   URLs created on the hosted service provider.
 * @param orgName realm or organization name the provider resides in.
 * @param hostEntityId Entity ID of the hosted provider.
 * @param relayState Relay State URL.
 * @param role IDP/SP Role.
 * @throws SAML2Exception if the processing failed. 
 */
public static void validateRelayStateURL(String orgName,String hostEntityId,String relayState,String role) throws SAML2Exception {
  if (relayState != null) {
    if (!RELAY_STATE_VALIDATOR.isRedirectUrlValid(relayState,SAMLEntityInfo.from(orgName,hostEntityId,role))) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
  }
}","/** 
 * Validates the Relay State URL against a list of valid Relay State   URLs created on the hosted service provider.
 * @param orgName realm or organization name the provider resides in.
 * @param hostEntityId Entity ID of the hosted provider.
 * @param relayState Relay State URL.
 * @param role IDP/SP Role.
 * @throws SAML2Exception if the processing failed. 
 */
public static void validateRelayStateURL(String orgName,String hostEntityId,String relayState,String role) throws SAML2Exception {
  if (relayState != null && !relayState.isEmpty()) {
    if (!RELAY_STATE_VALIDATOR.isRedirectUrlValid(relayState,SAMLEntityInfo.from(orgName,hostEntityId,role))) {
      throw new SAML2Exception(SAML2Utils.bundle.getString(""String_Node_Str""));
    }
  }
}"
79811,"/** 
 * Checks if a privilege with the specified name can be found.
 * @param name name of the privilege.
 * @throws com.sun.identity.entitlement.EntitlementException if search failed.
 */
@Override public boolean canFindByName(String name) throws EntitlementException {
  SearchFilter filter=new SearchFilter(""String_Node_Str"",name);
  return searchNames(asSet(filter)).isEmpty();
}","/** 
 * Checks if a privilege with the specified name can be found.
 * @param name name of the privilege.
 * @throws com.sun.identity.entitlement.EntitlementException if search failed.
 */
@Override public boolean canFindByName(String name) throws EntitlementException {
  SearchFilter filter=new SearchFilter(""String_Node_Str"",name);
  return !searchNames(asSet(filter)).isEmpty();
}"
79812,"/** 
 * Checks if a privilege with the specified name can be found.
 * @param name name of the privilege.
 * @throws com.sun.identity.entitlement.EntitlementException if search failed.
 */
@Override public boolean canFindByName(String name) throws EntitlementException {
  SearchFilter filter=new SearchFilter(""String_Node_Str"",name);
  return searchNames(asSet(filter)).isEmpty();
}","/** 
 * Checks if a privilege with the specified name can be found.
 * @param name name of the privilege.
 * @throws com.sun.identity.entitlement.EntitlementException if search failed.
 */
@Override public boolean canFindByName(String name) throws EntitlementException {
  SearchFilter filter=new SearchFilter(""String_Node_Str"",name);
  return !searchNames(asSet(filter)).isEmpty();
}"
79813,"/** 
 * Audits an attempted REST request, indicating which resource was accessed using which method linked to the SSOToken of the accessing user.
 * @param resource The accessed resource.
 * @param action The CREST action-type requested.
 * @param token The SSO token of the accessing user.
 */
public void auditAccessMessage(String resource,String action,SSOToken token){
  if (accessLogger != null && msgProvider != null) {
    final LogRecord record=msgProvider.createLogRecord(""String_Node_Str"",new String[]{resource,action},token);
    if (record != null) {
      accessLogger.log(record,AccessController.doPrivileged(AdminTokenAction.getInstance()));
    }
  }
}","/** 
 * Audits an attempted REST request, indicating which resource was accessed using which method linked to the SSOToken of the accessing user.
 * @param resource The accessed resource.
 * @param action The CREST action-type requested.
 * @param token The SSO token of the accessing user (null if XUI)
 */
public void auditAccessMessage(String resource,String action,SSOToken token){
  if (accessLogger != null && msgProvider != null) {
    final LogRecord record=msgProvider.createLogRecord(""String_Node_Str"",new String[]{resource,action},token);
    if (record != null) {
      accessLogger.log(record,AccessController.doPrivileged(AdminTokenAction.getInstance()));
    }
  }
}"
79814,"/** 
 * Retrieves a link to the user's SSO Token, if it exists in the context.
 * @param context from which to pull the SSO Token
 */
public static SSOToken getTokenFromContext(ServerContext context){
  SSOToken userToken=null;
  if (!context.containsContext(SSOTokenContext.class)) {
    context=new SSOTokenContext(context);
  }
  SSOTokenContext ssoTokenContext=context.asContext(SSOTokenContext.class);
  try {
    userToken=ssoTokenContext.getCallerSSOToken();
  }
 catch (  SSOException e) {
  }
  return userToken;
}","/** 
 * Retrieves a link to the user's SSO Token, if it exists in the context.
 * @param context from which to pull the SSO Token
 */
public static SSOToken getTokenFromContext(ServerContext context,Debug debug){
  SSOToken userToken=null;
  if (!context.containsContext(SSOTokenContext.class)) {
    context=new SSOTokenContext(context);
  }
  SSOTokenContext ssoTokenContext=context.asContext(SSOTokenContext.class);
  try {
    userToken=ssoTokenContext.getCallerSSOToken();
  }
 catch (  SSOException e) {
    debug.message(""String_Node_Str"",e);
  }
  return userToken;
}"
79815,"@Override public Promise<AuthorizationResult,ResourceException> authorizeUpdate(ServerContext serverContext,UpdateRequest updateRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getUpdateString(updateRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext),module.authorizeUpdate(serverContext,updateRequest),moduleName);
}","@Override public Promise<AuthorizationResult,ResourceException> authorizeUpdate(ServerContext serverContext,UpdateRequest updateRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getUpdateString(updateRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext,debug),module.authorizeUpdate(serverContext,updateRequest),moduleName);
}"
79816,"@Override public Promise<AuthorizationResult,ResourceException> authorizeQuery(ServerContext serverContext,QueryRequest queryRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getQueryString(queryRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext),module.authorizeQuery(serverContext,queryRequest),moduleName);
}","@Override public Promise<AuthorizationResult,ResourceException> authorizeQuery(ServerContext serverContext,QueryRequest queryRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getQueryString(queryRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext,debug),module.authorizeQuery(serverContext,queryRequest),moduleName);
}"
79817,"Promise<AuthorizationResult,ResourceException> log(String resource,String action,SSOToken token,Promise<AuthorizationResult,ResourceException> result,String authZModule){
  try {
    if (!result.get().isAuthorized()) {
      restLog.auditAccessDenied(resource,action,authZModule,token);
    }
 else {
      restLog.auditAccessGranted(resource,action,authZModule,token);
    }
  }
 catch (  ExecutionException e) {
    debug.error(""String_Node_Str"",e);
  }
catch (  InterruptedException e) {
    debug.error(""String_Node_Str"",e);
  }
  return result;
}","Promise<AuthorizationResult,ResourceException> log(String resource,String action,SSOToken token,Promise<AuthorizationResult,ResourceException> result,String authZModule){
  try {
    if (!result.get().isAuthorized()) {
      restLog.auditAccessDenied(resource,action,authZModule,token);
    }
 else {
      restLog.auditAccessGranted(resource,action,authZModule,token);
    }
  }
 catch (  ExecutionException e) {
    debug.message(e.getMessage());
  }
catch (  InterruptedException e) {
    debug.message(e.getMessage());
  }
  return result;
}"
79818,"@Override public Promise<AuthorizationResult,ResourceException> authorizePatch(ServerContext serverContext,PatchRequest patchRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getPatchString(patchRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext),module.authorizePatch(serverContext,patchRequest),moduleName);
}","@Override public Promise<AuthorizationResult,ResourceException> authorizePatch(ServerContext serverContext,PatchRequest patchRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getPatchString(patchRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext,debug),module.authorizePatch(serverContext,patchRequest),moduleName);
}"
79819,"@Override public Promise<AuthorizationResult,ResourceException> authorizeCreate(ServerContext serverContext,CreateRequest createRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getCreateString(createRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext),module.authorizeCreate(serverContext,createRequest),moduleName);
}","@Override public Promise<AuthorizationResult,ResourceException> authorizeCreate(ServerContext serverContext,CreateRequest createRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getCreateString(createRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext,debug),module.authorizeCreate(serverContext,createRequest),moduleName);
}"
79820,"@Override public Promise<AuthorizationResult,ResourceException> authorizeAction(ServerContext serverContext,ActionRequest actionRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getActionString(actionRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext),module.authorizeAction(serverContext,actionRequest),moduleName);
}","@Override public Promise<AuthorizationResult,ResourceException> authorizeAction(ServerContext serverContext,ActionRequest actionRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getActionString(actionRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext,debug),module.authorizeAction(serverContext,actionRequest),moduleName);
}"
79821,"@Override public Promise<AuthorizationResult,ResourceException> authorizeRead(ServerContext serverContext,ReadRequest readRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getReadString(readRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext),module.authorizeRead(serverContext,readRequest),moduleName);
}","@Override public Promise<AuthorizationResult,ResourceException> authorizeRead(ServerContext serverContext,ReadRequest readRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getReadString(readRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext,debug),module.authorizeRead(serverContext,readRequest),moduleName);
}"
79822,"@Override public Promise<AuthorizationResult,ResourceException> authorizeDelete(ServerContext serverContext,DeleteRequest deleteRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getDeleteString(deleteRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext),module.authorizeDelete(serverContext,deleteRequest),moduleName);
}","@Override public Promise<AuthorizationResult,ResourceException> authorizeDelete(ServerContext serverContext,DeleteRequest deleteRequest){
  final String resource=ServerContextUtils.getMatchedUri(serverContext);
  final String action=ServerContextUtils.getDeleteString(deleteRequest);
  return log(resource,action,ServerContextUtils.getTokenFromContext(serverContext,debug),module.authorizeDelete(serverContext,deleteRequest),moduleName);
}"
79823,"/** 
 * Pushes off to our logging subsystem.
 */
private void logAccess(String resource,String operation,ServerContext context){
  if (!context.containsContext(SSOTokenContext.class)) {
    context=new SSOTokenContext(context);
  }
  SSOTokenContext ssoTokenContext=context.asContext(SSOTokenContext.class);
  try {
    restLog.auditAccessMessage(resource,operation,ssoTokenContext.getCallerSSOToken());
  }
 catch (  SSOException e) {
    if (debug.errorEnabled()) {
      debug.error(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  restLog.debugOperationAttemptAsPrincipal(resource,operation,context,null,debug);
}","/** 
 * Pushes off to our logging subsystem.
 */
private void logAccess(String resource,String operation,ServerContext context){
  if (!context.containsContext(SSOTokenContext.class)) {
    context=new SSOTokenContext(context);
  }
  SSOTokenContext ssoTokenContext=context.asContext(SSOTokenContext.class);
  try {
    restLog.auditAccessMessage(resource,operation,ssoTokenContext.getCallerSSOToken());
  }
 catch (  SSOException e) {
    if (debug.warningEnabled()) {
      debug.warning(""String_Node_Str"" + ""String_Node_Str"",e);
      restLog.auditAccessMessage(resource,operation,null);
    }
  }
  restLog.debugOperationAttemptAsPrincipal(resource,operation,context,null,debug);
}"
79824,"@Test public void shouldNotStoreSecondaryKeyIfNull(){
  SAMLToken samlToken=new SAMLToken(""String_Node_Str"",null,12345,""String_Node_Str"");
  given(tokenIdFactory.toSAMLPrimaryTokenId(anyString())).willReturn(""String_Node_Str"");
  given(serialisation.serialise(anyObject())).willReturn(""String_Node_Str"");
  Token token=adapter.toToken(samlToken);
  assertThat(token.getValue(SAMLTokenField.SECONDARY_KEY.getField())).isNull();
}","@Test public void shouldNotStoreSecondaryKeyIfNull(){
  SAMLToken samlToken=new SAMLToken(""String_Node_Str"",null,12345,""String_Node_Str"");
  given(tokenIdFactory.toSAMLPrimaryTokenId(anyString())).willReturn(""String_Node_Str"");
  given(serialisation.serialise(anyObject())).willReturn(""String_Node_Str"");
  Token token=adapter.toToken(samlToken);
  assertThat(token.<String>getValue(SAMLTokenField.SECONDARY_KEY.getField())).isNull();
}"
79825,"public void shouldAssignSessionHandle(){
  long timestamp=12345l;
  InternalSession mockSession=mock(InternalSession.class);
  SessionID mockSessionID=mock(SessionID.class);
  String sessionId=""String_Node_Str"";
  String sessionHandle=SessionService.SHANDLE_SCHEME_PREFIX + ""String_Node_Str"";
  given(mockSessionID.toString()).willReturn(sessionId);
  given(jsonSerialisation.deserialise(anyString(),any(Class.class))).willReturn(mockSession);
  given(mockSession.getExpirationTime()).willReturn(timestamp);
  given(mockSession.getID()).willReturn(mockSessionID);
  given(mockSession.getSessionHandle()).willReturn(sessionHandle);
  given(tokenIdFactory.toSessionTokenId(eq(mockSession))).willReturn(sessionId);
  given(jsonSerialisation.serialise(any())).willReturn(""String_Node_Str"");
  Token token=adapter.toToken(mockSession);
  assertThat(token.getValue(SessionTokenField.SESSION_HANDLE.getField())).isEqualTo(sessionHandle);
}","public void shouldAssignSessionHandle(){
  long timestamp=12345l;
  InternalSession mockSession=mock(InternalSession.class);
  SessionID mockSessionID=mock(SessionID.class);
  String sessionId=""String_Node_Str"";
  String sessionHandle=SessionService.SHANDLE_SCHEME_PREFIX + ""String_Node_Str"";
  given(mockSessionID.toString()).willReturn(sessionId);
  given(jsonSerialisation.deserialise(anyString(),any(Class.class))).willReturn(mockSession);
  given(mockSession.getExpirationTime()).willReturn(timestamp);
  given(mockSession.getID()).willReturn(mockSessionID);
  given(mockSession.getSessionHandle()).willReturn(sessionHandle);
  given(tokenIdFactory.toSessionTokenId(eq(mockSession))).willReturn(sessionId);
  given(jsonSerialisation.serialise(any())).willReturn(""String_Node_Str"");
  Token token=adapter.toToken(mockSession);
  assertThat(token.<String>getValue(SessionTokenField.SESSION_HANDLE.getField())).isEqualTo(sessionHandle);
}"
79826,"@Test public void shouldAssignSessionID(){
  long timestamp=12345l;
  InternalSession mockSession=mock(InternalSession.class);
  SessionID mockSessionID=mock(SessionID.class);
  String sessionId=""String_Node_Str"";
  String sessionHandle=SessionService.SHANDLE_SCHEME_PREFIX + ""String_Node_Str"";
  given(mockSessionID.toString()).willReturn(sessionId);
  given(jsonSerialisation.deserialise(anyString(),any(Class.class))).willReturn(mockSession);
  given(mockSession.getExpirationTime()).willReturn(timestamp);
  given(mockSession.getID()).willReturn(mockSessionID);
  given(mockSession.getSessionHandle()).willReturn(sessionHandle);
  given(tokenIdFactory.toSessionTokenId(eq(mockSession))).willReturn(sessionId);
  given(jsonSerialisation.serialise(any())).willReturn(""String_Node_Str"");
  Token token=adapter.toToken(mockSession);
  assertThat(token.getValue(SessionTokenField.SESSION_ID.getField())).isEqualTo(sessionId);
}","@Test public void shouldAssignSessionID(){
  long timestamp=12345l;
  InternalSession mockSession=mock(InternalSession.class);
  SessionID mockSessionID=mock(SessionID.class);
  String sessionId=""String_Node_Str"";
  String sessionHandle=SessionService.SHANDLE_SCHEME_PREFIX + ""String_Node_Str"";
  given(mockSessionID.toString()).willReturn(sessionId);
  given(jsonSerialisation.deserialise(anyString(),any(Class.class))).willReturn(mockSession);
  given(mockSession.getExpirationTime()).willReturn(timestamp);
  given(mockSession.getID()).willReturn(mockSessionID);
  given(mockSession.getSessionHandle()).willReturn(sessionHandle);
  given(tokenIdFactory.toSessionTokenId(eq(mockSession))).willReturn(sessionId);
  given(jsonSerialisation.serialise(any())).willReturn(""String_Node_Str"");
  Token token=adapter.toToken(mockSession);
  assertThat(token.<String>getValue(SessionTokenField.SESSION_ID.getField())).isEqualTo(sessionId);
}"
79827,"@Test public void shouldContainNewFieldInCopyConstructor(){
  String id=""String_Node_Str"";
  CoreTokenField field=CoreTokenField.TOKEN_ID;
  PartialToken first=new PartialToken(Collections.<CoreTokenField,Object>emptyMap());
  PartialToken clone=new PartialToken(first,field,id);
  assertThat(clone.getValue(field)).isEqualTo(id);
}","@Test public void shouldContainNewFieldInCopyConstructor(){
  String id=""String_Node_Str"";
  CoreTokenField field=CoreTokenField.TOKEN_ID;
  PartialToken first=new PartialToken(Collections.<CoreTokenField,Object>emptyMap());
  PartialToken clone=new PartialToken(first,field,id);
  assertThat(clone.<String>getValue(field)).isEqualTo(id);
}"
79828,"/** 
 * {@inheritDoc}
 */
public Map<String,Object> extraDataToReturnForTokenEndpoint(Map<String,String> parameters,CoreToken token){
  final Map<String,Object> map=new HashMap<String,Object>();
  final Set<String> scope=token.getScope();
  if (scope != null && scope.contains(""String_Node_Str"")) {
    final Map.Entry<String,String> tokenEntry;
    try {
      tokenEntry=openIDTokenIssuer.issueToken(new AccessTokenToLegacyAdapter(token),requestFactory.create(Request.getCurrent()));
    }
 catch (    ServerException e) {
      throw OAuthProblemException.OAuthError.SERVER_ERROR.handle(null,e.getMessage());
    }
catch (    InvalidClientException e) {
      throw OAuthProblemException.OAuthError.INVALID_CLIENT.handle(null,e.getMessage());
    }
catch (    InvalidGrantException e) {
      throw OAuthProblemException.OAuthError.INVALID_GRANT.handle(null,e.getMessage());
    }
    if (tokenEntry != null) {
      map.put(tokenEntry.getKey(),tokenEntry.getValue());
    }
  }
  return map;
}","/** 
 * {@inheritDoc}
 */
public Map<String,Object> extraDataToReturnForTokenEndpoint(Map<String,String> parameters,CoreToken token){
  final Map<String,Object> map=new HashMap<String,Object>();
  final Set<String> scope=token.getScope();
  if (scope != null && scope.contains(OPENID_SCOPE)) {
    final Map.Entry<String,String> tokenEntry;
    try {
      tokenEntry=openIDTokenIssuer.issueToken(new AccessTokenToLegacyAdapter(token),requestFactory.create(Request.getCurrent()));
    }
 catch (    ServerException e) {
      throw OAuthProblemException.OAuthError.SERVER_ERROR.handle(null,e.getMessage());
    }
catch (    InvalidClientException e) {
      throw OAuthProblemException.OAuthError.INVALID_CLIENT.handle(null,e.getMessage());
    }
catch (    InvalidGrantException e) {
      throw OAuthProblemException.OAuthError.INVALID_GRANT.handle(null,e.getMessage());
    }
    if (tokenEntry != null) {
      map.put(tokenEntry.getKey(),tokenEntry.getValue());
    }
  }
  return map;
}"
79829,"/** 
 * {@inheritDoc}
 */
public Map<String,Object> getUserInfo(CoreToken token){
  Set<String> scopes=token.getScope();
  Map<String,Object> response=new HashMap<String,Object>();
  AMIdentity id=null;
  try {
    id=identityManager.getResourceOwnerIdentity(token.getUserID(),token.getRealm());
  }
 catch (  UnauthorizedClientException e) {
    throw OAuthProblemException.OAuthError.UNAUTHORIZED_CLIENT.handle(null,e.getMessage());
  }
  response.put(""String_Node_Str"",token.getUserID());
  for (  String scope : scopes) {
    Object attributes=scopeToUserUserProfileAttributes.get(scope);
    if (attributes == null) {
      logger.error(""String_Node_Str"" + scope);
    }
 else     if (attributes instanceof String) {
      Set<String> attr=null;
      try {
        attr=id.getAttribute((String)attributes);
      }
 catch (      IdRepoException e) {
        logger.error(""String_Node_Str"",e);
      }
catch (      SSOException e) {
        logger.error(""String_Node_Str"",e);
      }
      if (attr != null && attr.size() == 1) {
        response.put(scope,attr.iterator().next());
      }
 else       if (attr != null && attr.size() > 1) {
        response.put(scope,attr);
      }
 else {
        logger.error(""String_Node_Str"" + scope);
      }
    }
 else     if (attributes instanceof Map) {
      if (attributes != null && !((Map<String,String>)attributes).isEmpty()) {
        for (        Map.Entry<String,String> entry : ((Map<String,String>)attributes).entrySet()) {
          String attribute;
          attribute=entry.getValue();
          Set<String> attr=null;
          try {
            attr=id.getAttribute(attribute);
          }
 catch (          IdRepoException e) {
            logger.error(""String_Node_Str"",e);
          }
catch (          SSOException e) {
            logger.error(""String_Node_Str"",e);
          }
          if (attr != null && attr.size() == 1) {
            response.put(entry.getKey(),attr.iterator().next());
          }
 else           if (attr != null && attr.size() > 1) {
            response.put(entry.getKey(),attr);
          }
 else {
            logger.error(""String_Node_Str"" + scope);
          }
        }
      }
    }
  }
  return response;
}","/** 
 * {@inheritDoc}
 */
public Map<String,Object> getUserInfo(CoreToken token){
  Set<String> scopes=token.getScope();
  Map<String,Object> response=new HashMap<String,Object>();
  AMIdentity id=null;
  try {
    id=identityManager.getResourceOwnerIdentity(token.getUserID(),token.getRealm());
  }
 catch (  UnauthorizedClientException e) {
    throw OAuthProblemException.OAuthError.UNAUTHORIZED_CLIENT.handle(null,e.getMessage());
  }
  response.put(""String_Node_Str"",token.getUserID());
  for (  String scope : scopes) {
    if (OPENID_SCOPE.equals(scope)) {
      continue;
    }
    Object attributes=scopeToUserUserProfileAttributes.get(scope);
    if (attributes == null) {
      logger.error(""String_Node_Str"" + scope);
    }
 else     if (attributes instanceof String) {
      Set<String> attr=null;
      try {
        attr=id.getAttribute((String)attributes);
      }
 catch (      IdRepoException e) {
        logger.warning(""String_Node_Str"" + attributes,e);
      }
catch (      SSOException e) {
        logger.warning(""String_Node_Str"" + attributes,e);
      }
      if (attr != null && attr.size() == 1) {
        response.put(scope,attr.iterator().next());
      }
 else       if (attr != null && attr.size() > 1) {
        response.put(scope,attr);
      }
 else {
        logger.warning(""String_Node_Str"" + attributes + ""String_Node_Str""+ scope);
      }
    }
 else     if (attributes instanceof Map) {
      if (attributes != null && !((Map<String,String>)attributes).isEmpty()) {
        for (        Map.Entry<String,String> entry : ((Map<String,String>)attributes).entrySet()) {
          String attribute;
          attribute=entry.getValue();
          Set<String> attr=null;
          try {
            attr=id.getAttribute(attribute);
          }
 catch (          IdRepoException e) {
            logger.warning(""String_Node_Str"",e);
          }
catch (          SSOException e) {
            logger.warning(""String_Node_Str"",e);
          }
          if (attr != null && attr.size() == 1) {
            response.put(entry.getKey(),attr.iterator().next());
          }
 else           if (attr != null && attr.size() > 1) {
            response.put(entry.getKey(),attr);
          }
 else {
            logger.warning(""String_Node_Str"" + scope);
          }
        }
      }
    }
  }
  return response;
}"
79830,"/** 
 * Perform any necessary session cleanup after authentication has completed. In the case of successful session upgrade, this will destroy the original session in favour of the new (upgraded) session. In the case of force-auth mode, this will destroy the new session in favour of the old (now upgraded) session. In the case of authentication failure the new session will always be destroyed. For failed session upgrade, the original session is restored. Otherwise, any existing session is also destroyed on authentication failure.
 */
public void cleanup(){
  if (isFailed()) {
    DEBUG.message(""String_Node_Str"");
    authContext.destroySession();
    if (authContext.isSessionUpgrade()) {
      DEBUG.message(""String_Node_Str"");
      authContext.restoreOldSession();
    }
 else {
      authContext.destroyOldSession();
    }
  }
 else   if (isSuccessful()) {
    if (authContext.isForceAuth()) {
      DEBUG.message(""String_Node_Str"");
      authContext.destroySession();
      authContext.restoreOldSession();
    }
 else     if (authContext.isSessionUpgrade() && SystemProperties.getAsBoolean(Constants.DESTROY_SESSION_AFTER_UPGRADE)) {
      DEBUG.message(""String_Node_Str"");
      authContext.destroyOldSession();
    }
  }
}","/** 
 * Perform any necessary session cleanup after authentication has completed. In the case of successful session upgrade, this will destroy the original session in favour of the new (upgraded) session. In the case of force-auth mode, this will destroy the new session in favour of the old (now upgraded) session. In the case of authentication failure the new session will always be destroyed. For failed session upgrade, the original session is restored. Otherwise, any existing session is also destroyed on authentication failure.
 */
public void cleanup(){
  if (isFailed()) {
    DEBUG.message(""String_Node_Str"");
    authContext.destroySession();
    if (authContext.isSessionUpgrade()) {
      DEBUG.message(""String_Node_Str"");
      authContext.restoreOldSession();
    }
 else {
      authContext.destroyOldSession();
    }
  }
 else   if (isSuccessful()) {
    if (authContext.isForceAuth()) {
      DEBUG.message(""String_Node_Str"");
      authContext.destroySession();
      authContext.restoreOldSession();
    }
 else     if (authContext.hasOldSession() && SystemProperties.getAsBoolean(Constants.DESTROY_SESSION_AFTER_UPGRADE)) {
      DEBUG.message(""String_Node_Str"");
      authContext.destroyOldSession();
    }
  }
}"
79831,"@Test public void shouldDestroyOldSessionAfterSessionUpgrade(){
  System.setProperty(Constants.DESTROY_SESSION_AFTER_UPGRADE,""String_Node_Str"");
  given(authContext.getStatus()).willReturn(AuthContext.Status.SUCCESS);
  given(authContext.isSessionUpgrade()).willReturn(true);
  loginProcess.cleanup();
  verify(authContext).destroyOldSession();
}","@Test public void shouldDestroyOldSessionAfterSessionUpgrade(){
  System.setProperty(Constants.DESTROY_SESSION_AFTER_UPGRADE,""String_Node_Str"");
  given(authContext.getStatus()).willReturn(AuthContext.Status.SUCCESS);
  given(authContext.hasOldSession()).willReturn(true);
  loginProcess.cleanup();
  verify(authContext).destroyOldSession();
}"
79832,"/** 
 * {@inheritDoc}
 */
@Override public int process(Callback[] callbacks,int state) throws LoginException {
switch (state) {
case STATE_BEGIN:
    if (!clientSideScriptEnabled) {
      clientSideScript=""String_Node_Str"";
    }
  substituteUIStrings();
return STATE_RUN_SCRIPT;
case STATE_RUN_SCRIPT:
Bindings scriptVariables=new SimpleBindings();
scriptVariables.put(""String_Node_Str"",getScriptHttpRequestWrapper());
scriptVariables.put(LOGGER_VARIABLE_NAME,DEBUG);
scriptVariables.put(STATE_VARIABLE_NAME,state);
scriptVariables.put(USERNAME_VARIABLE_NAME,userName);
scriptVariables.put(SUCCESS_ATTR_NAME,SUCCESS_VALUE);
scriptVariables.put(FAILED_ATTR_NAME,FAILURE_VALUE);
scriptVariables.put(HTTP_CLIENT_VARIABLE_NAME,httpClient);
scriptVariables.put(HTTP_CLIENT_REQUEST_VARIABLE_NAME,httpClientRequest);
scriptVariables.put(IDENTITY_REPOSITORY,identityRepository);
try {
scriptEvaluator.evaluateScript(serverSideScript,scriptVariables);
}
 catch (ScriptException e) {
DEBUG.message(""String_Node_Str"",e);
throw new AuthLoginException(""String_Node_Str"");
}
state=((Number)scriptVariables.get(STATE_VARIABLE_NAME)).intValue();
userName=(String)scriptVariables.get(USERNAME_VARIABLE_NAME);
if (state != SUCCESS_VALUE) {
throw new AuthLoginException(""String_Node_Str"");
}
return state;
default :
throw new AuthLoginException(""String_Node_Str"");
}
}","/** 
 * {@inheritDoc}
 */
@Override public int process(Callback[] callbacks,int state) throws LoginException {
switch (state) {
case STATE_BEGIN:
    if (!clientSideScriptEnabled || clientSideScript.isEmpty()) {
      clientSideScript=""String_Node_Str"";
    }
  substituteUIStrings();
return STATE_RUN_SCRIPT;
case STATE_RUN_SCRIPT:
Bindings scriptVariables=new SimpleBindings();
scriptVariables.put(""String_Node_Str"",getScriptHttpRequestWrapper());
scriptVariables.put(LOGGER_VARIABLE_NAME,DEBUG);
scriptVariables.put(STATE_VARIABLE_NAME,state);
scriptVariables.put(USERNAME_VARIABLE_NAME,userName);
scriptVariables.put(SUCCESS_ATTR_NAME,SUCCESS_VALUE);
scriptVariables.put(FAILED_ATTR_NAME,FAILURE_VALUE);
scriptVariables.put(HTTP_CLIENT_VARIABLE_NAME,httpClient);
scriptVariables.put(HTTP_CLIENT_REQUEST_VARIABLE_NAME,httpClientRequest);
scriptVariables.put(IDENTITY_REPOSITORY,identityRepository);
try {
scriptEvaluator.evaluateScript(serverSideScript,scriptVariables);
}
 catch (ScriptException e) {
DEBUG.message(""String_Node_Str"",e);
throw new AuthLoginException(""String_Node_Str"");
}
state=((Number)scriptVariables.get(STATE_VARIABLE_NAME)).intValue();
userName=(String)scriptVariables.get(USERNAME_VARIABLE_NAME);
if (state != SUCCESS_VALUE) {
throw new AuthLoginException(""String_Node_Str"");
}
return state;
default :
throw new AuthLoginException(""String_Node_Str"");
}
}"
79833,"/** 
 * Sets mime headers in HTTP servlet response.
 * @param headers mime headers to be set.
 * @param res HTTP servlet response.
 */
public static void putHeaders(MimeHeaders headers,HttpServletResponse res){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + headers.toString());
  }
  Iterator it=headers.getAllHeaders();
  while (it.hasNext()) {
    MimeHeader header=(MimeHeader)it.next();
    String[] values=headers.getHeader(header.getName());
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + header.getName() + ""String_Node_Str""+ values);
    }
    if (values.length == 1) {
      res.setHeader(header.getName(),header.getValue());
    }
 else {
      StringBuffer concat=new StringBuffer();
      int i=0;
      while (i < values.length) {
        if (i != 0) {
          concat.append(',');
        }
        concat.append(values[i++]);
      }
      res.setHeader(header.getName(),concat.toString());
    }
  }
}","/** 
 * Sets mime headers in HTTP servlet response.
 * @param headers mime headers to be set.
 * @param res HTTP servlet response.
 */
public static void putHeaders(MimeHeaders headers,HttpServletResponse res){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + headers.toString());
  }
  Iterator it=headers.getAllHeaders();
  while (it.hasNext()) {
    MimeHeader header=(MimeHeader)it.next();
    String[] values=headers.getHeader(header.getName());
    if (debug.messageEnabled()) {
      debug.message(""String_Node_Str"" + header.getName() + ""String_Node_Str""+ Arrays.toString(values));
    }
    if (values.length == 1) {
      res.setHeader(header.getName(),header.getValue());
    }
 else {
      StringBuffer concat=new StringBuffer();
      int i=0;
      while (i < values.length) {
        if (i != 0) {
          concat.append(',');
        }
        concat.append(values[i++]);
      }
      res.setHeader(header.getName(),concat.toString());
    }
  }
}"
79834,"/** 
 * Checks certificate validity with configured CRL 
 * @param cert x509 certificate 
 * @return <code>true</code> if the certificate is not in CRL, otherwise, return <code>false</code> 
 */
public static boolean validateCertificate(X509Certificate cert){
  String method=""String_Node_Str"";
  boolean certgood=true;
  if (checkCertStatus == false) {
    if (debug.messageEnabled()) {
      debug.message(method + ""String_Node_Str"");
    }
    return certgood=true;
  }
  certgood=CRLValidator.validateCertificate(cert,checkCAStatus);
  if (debug.messageEnabled()) {
    debug.message(method + ""String_Node_Str"" + certgood);
  }
  return certgood;
}","/** 
 * Checks certificate validity with configured CRL 
 * @param cert x509 certificate 
 * @return <code>true</code> if the certificate is not in CRL, otherwise, return <code>false</code> 
 */
public static boolean validateCertificate(X509Certificate cert){
  String method=""String_Node_Str"";
  boolean certgood=true;
  if (checkCertStatus == false) {
    if (debug.messageEnabled()) {
      debug.message(method + ""String_Node_Str"");
    }
    return certgood;
  }
  certgood=CRLValidator.validateCertificate(cert,checkCAStatus);
  if (debug.messageEnabled()) {
    debug.message(method + ""String_Node_Str"" + certgood);
  }
  return certgood;
}"
79835,"/** 
 * Returns the authentication level of the authentication method used for for authentication.
 * @return The authentication level.
 * @throws SSOException if the SSOToken is not VALID or ifthere are errors in getting the authentication level.
 */
public int getAuthLevel() throws SSOException {
  checkTokenType(""String_Node_Str"");
  try {
    String authLevelFull=SSOSession.getProperty(""String_Node_Str"");
    int indexOfStartOfIntegerPart=0;
    if (authLevelFull.contains(""String_Node_Str"")) {
      indexOfStartOfIntegerPart=authLevelFull.lastIndexOf(""String_Node_Str"") + 1;
    }
    String authLevelInteger=authLevelFull.substring(indexOfStartOfIntegerPart);
    return (new Integer(authLevelInteger)).intValue();
  }
 catch (  Exception e) {
    SSOProviderImpl.debug.error(""String_Node_Str"");
    throw new SSOException(e);
  }
}","/** 
 * Returns the authentication level of the authentication method used for for authentication.
 * @return The authentication level.
 * @throws SSOException if the SSOToken is not VALID or ifthere are errors in getting the authentication level.
 */
public int getAuthLevel() throws SSOException {
  checkTokenType(""String_Node_Str"");
  try {
    String authLevelFull=SSOSession.getProperty(""String_Node_Str"");
    int indexOfStartOfIntegerPart=authLevelFull.lastIndexOf(""String_Node_Str"") + 1;
    String authLevelInteger=authLevelFull.substring(indexOfStartOfIntegerPart);
    return Integer.valueOf(authLevelInteger);
  }
 catch (  Exception e) {
    SSOProviderImpl.debug.error(""String_Node_Str"");
    throw new SSOException(e);
  }
}"
79836,"/** 
 * Returns the authentication level of the authentication method used for for authentication.
 * @return The authentication level.
 * @throws SSOException if the SSOToken is not VALID or ifthere are errors in getting the authentication level.
 */
public int getAuthLevel() throws SSOException {
  checkTokenType(""String_Node_Str"");
  try {
    return ((new Integer(SSOSession.getProperty(""String_Node_Str""))).intValue());
  }
 catch (  Exception e) {
    SSOProviderImpl.debug.error(""String_Node_Str"");
    throw new SSOException(e);
  }
}","/** 
 * Returns the authentication level of the authentication method used for for authentication.
 * @return The authentication level.
 * @throws SSOException if the SSOToken is not VALID or ifthere are errors in getting the authentication level.
 */
public int getAuthLevel() throws SSOException {
  checkTokenType(""String_Node_Str"");
  try {
    String authLevelFull=SSOSession.getProperty(""String_Node_Str"");
    int indexOfStartOfIntegerPart=0;
    if (authLevelFull.contains(""String_Node_Str"")) {
      indexOfStartOfIntegerPart=authLevelFull.lastIndexOf(""String_Node_Str"") + 1;
    }
    String authLevelInteger=authLevelFull.substring(indexOfStartOfIntegerPart);
    return (new Integer(authLevelInteger)).intValue();
  }
 catch (  Exception e) {
    SSOProviderImpl.debug.error(""String_Node_Str"");
    throw new SSOException(e);
  }
}"
79837,"@Override public BearerToken verify(BearerToken token) throws OAuthProblemException {
  Reference reference=new Reference(validationServerRef);
  reference.addQueryParameter(OAuth2Constants.Params.ACCESS_TOKEN,token.getTokenID());
  Client client=new Client(new Context(),Protocol.HTTP);
  ClientResource clientResource=new ClientResource(reference.toUri());
  clientResource.setNext(client);
  clientResource.get();
  try {
    Response response=clientResource.getResponse();
    Map remoteToken=BearerTokenExtractor.extractToken(response);
    Object o=remoteToken.get(OAuth2Constants.Token.OAUTH_ACCESS_TOKEN);
    if (o != null) {
      return (BearerToken)tokenStore.readAccessToken(o.toString());
    }
    return null;
  }
 catch (  OAuthProblemException e) {
    OAuth2Utils.DEBUG.error(""String_Node_Str"",e);
    throw e;
  }
catch (  ResourceException e) {
    OAuth2Utils.DEBUG.error(""String_Node_Str"",e);
    throw OAuthProblemException.OAuthError.ACCESS_DENIED.handle(null,e.getMessage());
  }
}","@Override public BearerToken verify(BearerToken token) throws OAuthProblemException {
  Reference reference=new Reference(validationServerRef);
  reference.addQueryParameter(OAuth2Constants.Params.ACCESS_TOKEN,token.getTokenID());
  Client client=new Client(new Context(),Protocol.HTTP);
  ClientResource clientResource=new ClientResource(reference.toUri());
  clientResource.setNext(client);
  clientResource.get();
  try {
    Response response=clientResource.getResponse();
    Map remoteToken=BearerTokenExtractor.extractToken(response);
    Object o=remoteToken.get(OAuth2Constants.Token.OAUTH_ACCESS_TOKEN);
    if (o != null) {
      return (BearerToken)tokenStore.readAccessToken(o.toString());
    }
    return null;
  }
 catch (  OAuthProblemException e) {
    OAuth2Utils.DEBUG.error(""String_Node_Str"",e);
    throw e;
  }
catch (  ResourceException e) {
    OAuth2Utils.DEBUG.error(""String_Node_Str"",e);
    throw OAuthProblemException.OAuthError.ACCESS_DENIED.handle(null,e.getMessage());
  }
 finally {
    if (client != null) {
      try {
        client.stop();
      }
 catch (      Exception e) {
        OAuth2Utils.DEBUG.error(""String_Node_Str"" + ""String_Node_Str"",e);
      }
    }
  }
}"
79838,"/** 
 * Handles both initial and subsequent RESTful calls from clients submitting Callbacks for the authentication process to continue. This is determined by checking if the POST body is empty or not. If it is empty then this is initiating the authentication process otherwise it is a subsequent call submitting Callbacks. Initiating authentication request using the query parameters from the URL starts the login process and either returns an SSOToken on successful authentication or a number of Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate. Using the body of the POST request the method continues the login process, submitting the given Callbacks and then either returns an SSOToken on successful authentication or a number of additional Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate.
 * @param entity The Json Representation of the post body of the request.
 * @return A Json Representation of the response body. The response will contain either a JSON object containing theSSOToken id from a successful authentication, a JSON object containing a number of Callbacks for the client to complete and return or a JSON object containing an exception message.
 * @throws ResourceException If there is an error processing the authentication request.
 */
@Post public Representation authenticate(JsonRepresentation entity) throws ResourceException {
  if (entity != null && !MediaType.APPLICATION_JSON.equals(entity.getMediaType())) {
    throw new ResourceException(Status.CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE,""String_Node_Str"");
  }
  final HttpServletRequest request=getHttpServletRequest();
  final HttpServletResponse response=ServletUtils.getResponse(getResponse());
  final Map<String,String> queryString=getReference().getQueryAsForm().getValuesMap();
  final String sessionUpgradeSSOTokenId=queryString.get(""String_Node_Str"");
  try {
    JsonValue jsonContent=getJsonContent(entity);
    JsonValue jsonResponse;
    if (jsonContent != null && jsonContent.size() > 0) {
      jsonResponse=restAuthenticationHandler.continueAuthentication(request,response,jsonContent,sessionUpgradeSSOTokenId);
    }
 else {
      final String authIndexType=queryString.get(""String_Node_Str"");
      final String authIndexValue=queryString.get(""String_Node_Str"");
      jsonResponse=restAuthenticationHandler.initiateAuthentication(request,response,authIndexType,authIndexValue,sessionUpgradeSSOTokenId);
    }
    return createResponse(jsonResponse);
  }
 catch (  RestAuthResponseException e) {
    DEBUG.message(""String_Node_Str"",e);
    return handleCallbackException(e);
  }
catch (  RestAuthException e) {
    DEBUG.error(""String_Node_Str"",e);
    throw new ResourceException(org.forgerock.json.resource.ResourceException.getException(401,e.getMessage()).setDetail(json(object(field(""String_Node_Str"",e.getFailureUrl())))));
  }
catch (  Exception e) {
    DEBUG.error(""String_Node_Str"",e);
    throw new ResourceException(org.forgerock.json.resource.ResourceException.INTERNAL_ERROR,e);
  }
}","/** 
 * Handles both initial and subsequent RESTful calls from clients submitting Callbacks for the authentication process to continue. This is determined by checking if the POST body is empty or not. If it is empty then this is initiating the authentication process otherwise it is a subsequent call submitting Callbacks. Initiating authentication request using the query parameters from the URL starts the login process and either returns an SSOToken on successful authentication or a number of Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate. Using the body of the POST request the method continues the login process, submitting the given Callbacks and then either returns an SSOToken on successful authentication or a number of additional Callbacks needing to be completed before authentication can proceed or an exception if any problems occurred whilst trying to authenticate.
 * @param entity The Json Representation of the post body of the request.
 * @return A Json Representation of the response body. The response will contain either a JSON object containing theSSOToken id from a successful authentication, a JSON object containing a number of Callbacks for the client to complete and return or a JSON object containing an exception message.
 * @throws ResourceException If there is an error processing the authentication request.
 */
@Post public Representation authenticate(JsonRepresentation entity) throws ResourceException {
  if (entity != null && !MediaType.APPLICATION_JSON.equals(entity.getMediaType())) {
    throw new ResourceException(Status.CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE,""String_Node_Str"");
  }
  final HttpServletRequest request=getHttpServletRequest();
  final HttpServletResponse response=ServletUtils.getResponse(getResponse());
  final Map<String,String> queryString=getReference().getQueryAsForm().getValuesMap();
  final String sessionUpgradeSSOTokenId=queryString.get(""String_Node_Str"");
  try {
    JsonValue jsonContent=getJsonContent(entity);
    JsonValue jsonResponse;
    if (jsonContent != null && jsonContent.size() > 0) {
      jsonResponse=restAuthenticationHandler.continueAuthentication(request,response,jsonContent,sessionUpgradeSSOTokenId);
    }
 else {
      final String authIndexType=queryString.get(""String_Node_Str"");
      final String authIndexValue=queryString.get(""String_Node_Str"");
      jsonResponse=restAuthenticationHandler.initiateAuthentication(request,response,authIndexType,authIndexValue,sessionUpgradeSSOTokenId);
    }
    return createResponse(jsonResponse);
  }
 catch (  RestAuthResponseException e) {
    DEBUG.message(""String_Node_Str"",e);
    return handleCallbackException(e);
  }
catch (  RestAuthException e) {
    DEBUG.error(""String_Node_Str"",e);
    org.forgerock.json.resource.ResourceException cause=org.forgerock.json.resource.ResourceException.getException(401,e.getMessage());
    if (e.getFailureUrl() != null) {
      cause.setDetail(json(object(field(""String_Node_Str"",e.getFailureUrl()))));
    }
    throw new ResourceException(401,cause);
  }
catch (  Exception e) {
    DEBUG.error(""String_Node_Str"",e);
    throw new ResourceException(org.forgerock.json.resource.ResourceException.INTERNAL_ERROR,e);
  }
}"
79839,"public OpenSSOPrivilege(){
  super();
  policyMonitor=InjectorHolder.getInstance(PolicyMonitor.class);
}","public OpenSSOPrivilege(){
  super();
  if (isServerMode()) {
    policyMonitor=InjectorHolder.getInstance(PolicyMonitor.class);
  }
 else {
    policyMonitor=null;
  }
}"
79840,"/** 
 * Constructor to create an evaluator the default service type.
 * @param subject Subject who credential is used for performing the evaluation.
 * @throws EntitlementException if any other abnormal condition occured.
 */
public Evaluator(Subject subject) throws EntitlementException {
  adminSubject=subject;
  policyMonitor=InjectorHolder.getInstance(PolicyMonitor.class);
  configWrapper=new EntitlementConfigurationWrapper();
}","/** 
 * Constructor to create an evaluator the default service type.
 * @param subject Subject who credential is used for performing the evaluation.
 * @throws EntitlementException if any other abnormal condition occured.
 */
public Evaluator(Subject subject) throws EntitlementException {
  adminSubject=subject;
  policyMonitor=getPolicyMonitor();
  configWrapper=new EntitlementConfigurationWrapper();
}"
79841,"/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  if (preceedingDelimiter) {
    j--;
  }
  return String.valueOf(newchars,0,j);
}","/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  return String.valueOf(newchars,0,j);
}"
79842,"/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  if (preceedingDelimiter) {
    j--;
  }
  return String.valueOf(newchars,0,j);
}","/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  return String.valueOf(newchars,0,j);
}"
79843,"/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  if (preceedingDelimiter) {
    j--;
  }
  return String.valueOf(newchars,0,j);
}","/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  return String.valueOf(newchars,0,j);
}"
79844,"/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  if (preceedingDelimiter) {
    j--;
  }
  return String.valueOf(newchars,0,j);
}","/** 
 * eliminates the null path (consecutive delimiters) from the resource 
 */
private String purgeNullPath(String res){
  if ((res == null) || (res.length() == 0)) {
    return ""String_Node_Str"";
  }
  boolean preceedingDelimiter=false;
  int len=res.length();
  char[] oldchars=res.toCharArray();
  char[] newchars=new char[len];
  int i=0;
  int j=0;
  while (i < len) {
    if (oldchars[i] == delimiter.charAt(0)) {
      if (!preceedingDelimiter) {
        newchars[j++]=oldchars[i++];
        preceedingDelimiter=true;
      }
 else {
        i++;
      }
    }
 else {
      newchars[j++]=oldchars[i++];
      preceedingDelimiter=false;
    }
  }
  return String.valueOf(newchars,0,j);
}"
79845,"/** 
 * Returns an asynchronous connection from the underlying connection factory.
 * @param resultHandler the result handler
 * @return the FutureResult from the underlying factory.
 */
public FutureResult<Connection> getConnectionAsync(ResultHandler<? super Connection> resultHandler){
  return getConnectionAsync(resultHandler);
}","/** 
 * Returns an asynchronous connection from the underlying connection factory.
 * @param resultHandler the result handler
 * @return the FutureResult from the underlying factory.
 */
public FutureResult<Connection> getConnectionAsync(ResultHandler<? super Connection> resultHandler){
  return factory.getConnectionAsync(resultHandler);
}"
79846,"protected Map<String,Object> getDataModel(Set<String> scopes){
  Map<String,Object> data=new HashMap<String,Object>(getRequest().getAttributes());
  data.put(""String_Node_Str"",getRequest().getResourceRef().toString());
  Set<String> displayNames=client.getClient().getDisplayName();
  Set<String> displayDescriptions=client.getClient().getDisplayDescription();
  Set<String> allScopes=client.getClient().getAllowedGrantScopes();
  String locale=OAuth2Utils.getLocale(getRequest());
  String displayName=""String_Node_Str"";
  String displayDescription=""String_Node_Str"";
  List<String> displayScope=new ArrayList<String>();
  displayName=getDisplayParameter(locale,displayNames);
  displayDescription=getDisplayParameter(locale,displayDescriptions);
  displayScope=getScopeDescriptionsForLocale(scopes,allScopes,locale);
  data.put(""String_Node_Str"",displayName);
  data.put(""String_Node_Str"",displayDescription);
  data.put(""String_Node_Str"",displayScope);
  return data;
}","protected Map<String,Object> getDataModel(Set<String> scopes){
  Map<String,Object> data=new HashMap<String,Object>(getRequest().getAttributes());
  data.put(""String_Node_Str"",getRequest().getResourceRef().toString());
  Set<String> displayNames=client.getClient().getDisplayName();
  Set<String> displayDescriptions=client.getClient().getDisplayDescription();
  Set<String> allScopes=client.getClient().getAllowedGrantScopes();
  String locale=OAuth2Utils.getLocale(getRequest());
  String displayName=""String_Node_Str"";
  String displayDescription=""String_Node_Str"";
  List<String> displayScope=null;
  displayName=getDisplayParameter(locale,displayNames);
  displayDescription=getDisplayParameter(locale,displayDescriptions);
  displayScope=getScopeDescriptionsForLocale(scopes,allScopes,locale);
  data.put(""String_Node_Str"",ESAPI.encoder().encodeForHTML(displayName));
  data.put(""String_Node_Str"",ESAPI.encoder().encodeForHTML(displayDescription));
  data.put(""String_Node_Str"",encodeListForHTML(displayScope));
  return data;
}"
79847,"protected Map<String,Object> getDataModel(Set<String> scopes){
  Map<String,Object> data=new HashMap<String,Object>(getRequest().getAttributes());
  data.put(""String_Node_Str"",getRequest().getResourceRef().toString());
  Set<String> displayNames=client.getClient().getDisplayName();
  Set<String> displayDescriptions=client.getClient().getDisplayDescription();
  Set<String> allScopes=client.getClient().getAllowedGrantScopes();
  String locale=OAuth2Utils.getLocale(getRequest());
  String displayName=""String_Node_Str"";
  String displayDescription=""String_Node_Str"";
  List<String> displayScope=new ArrayList<String>();
  displayName=getDisplayParameter(locale,displayNames);
  displayDescription=getDisplayParameter(locale,displayDescriptions);
  displayScope=getScopeDescriptionsForLocale(scopes,allScopes,locale);
  data.put(""String_Node_Str"",displayName);
  data.put(""String_Node_Str"",displayDescription);
  data.put(""String_Node_Str"",displayScope);
  return data;
}","protected Map<String,Object> getDataModel(Set<String> scopes){
  Map<String,Object> data=new HashMap<String,Object>(getRequest().getAttributes());
  data.put(""String_Node_Str"",getRequest().getResourceRef().toString());
  Set<String> displayNames=client.getClient().getDisplayName();
  Set<String> displayDescriptions=client.getClient().getDisplayDescription();
  Set<String> allScopes=client.getClient().getAllowedGrantScopes();
  String locale=OAuth2Utils.getLocale(getRequest());
  String displayName=""String_Node_Str"";
  String displayDescription=""String_Node_Str"";
  List<String> displayScope=null;
  displayName=getDisplayParameter(locale,displayNames);
  displayDescription=getDisplayParameter(locale,displayDescriptions);
  displayScope=getScopeDescriptionsForLocale(scopes,allScopes,locale);
  data.put(""String_Node_Str"",ESAPI.encoder().encodeForHTML(displayName));
  data.put(""String_Node_Str"",ESAPI.encoder().encodeForHTML(displayDescription));
  data.put(""String_Node_Str"",encodeListForHTML(displayScope));
  return data;
}"
79848,"private String getPasswordFromHeader(ServerContext context){
  return RestUtils.getCookieFromServerContext(context);
}","private String getPasswordFromHeader(ServerContext context){
  List<String> headerList=null;
  String oldUserPasswordHeaderName=""String_Node_Str"";
  HttpContext header=null;
  try {
    header=context.asContext(HttpContext.class);
    if (header == null) {
      RestDispatcher.debug.error(""String_Node_Str"" + ""String_Node_Str"");
      return null;
    }
    headerList=header.getHeaders().get(oldUserPasswordHeaderName.toLowerCase());
    if (headerList != null && !headerList.isEmpty()) {
      for (      String s : headerList) {
        return (s != null && !s.isEmpty()) ? s : null;
      }
    }
  }
 catch (  Exception e) {
    RestDispatcher.debug.error(""String_Node_Str"" + ""String_Node_Str"" + e);
  }
  return null;
}"
79849,"/** 
 * {@inheritDoc}
 */
@Override public void updateInstance(final ServerContext context,final String resourceId,final UpdateRequest request,final ResultHandler<Resource> handler){
  Token admin=new Token();
  admin.setId(getCookieFromServerContext(context));
  final JsonValue jVal=request.getNewContent();
  final String rev=request.getRevision();
  IdentityDetails dtls, newDtls;
  IdentityServicesImpl idsvc=new IdentityServicesImpl();
  ;
  Resource resource;
  try {
    dtls=idsvc.read(resourceId,idSvcsAttrList,admin);
    newDtls=jsonValueToIdentityDetails(jVal);
    newDtls.setName(resourceId);
    String userpass=jVal.get(""String_Node_Str"").asString();
    if (userpass != null && !userpass.isEmpty()) {
      if (checkValidPassword(resourceId,userpass.toCharArray(),realm) || isAdmin(context)) {
      }
 else {
        String strPass=getPasswordFromHeader(context);
        if (strPass != null && !strPass.isEmpty() && checkValidPassword(resourceId,strPass.toCharArray(),realm)) {
        }
 else {
          throw new ForbiddenException(""String_Node_Str"",null);
        }
      }
    }
    UpdateResponse message=idsvc.update(newDtls,admin);
    IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
    resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
    handler.handleResult(resource);
  }
 catch (  final ObjectNotFound onf) {
    RestDispatcher.debug.error(""String_Node_Str"" + onf);
    handler.handleError(new NotFoundException(""String_Node_Str"" + resourceId + ""String_Node_Str"",onf));
  }
catch (  final NeedMoreCredentials needMoreCredentials) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ needMoreCredentials);
    handler.handleError(new ForbiddenException(""String_Node_Str"",needMoreCredentials));
  }
catch (  final TokenExpired tokenExpired) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
    handler.handleError(new PermanentException(401,""String_Node_Str"",null));
  }
catch (  final AccessDenied accessDenied) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ accessDenied);
    handler.handleError(new ForbiddenException(accessDenied.getMessage(),accessDenied));
  }
catch (  final GeneralFailure generalFailure) {
    RestDispatcher.debug.error(""String_Node_Str"" + generalFailure);
    handler.handleError(new BadRequestException(generalFailure.getMessage(),generalFailure));
  }
catch (  ForbiddenException fe) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ fe);
    handler.handleError(fe);
  }
catch (  final Exception exception) {
    RestDispatcher.debug.error(""String_Node_Str"" + exception);
    handler.handleError(new NotFoundException(exception.getMessage(),exception));
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void updateInstance(final ServerContext context,final String resourceId,final UpdateRequest request,final ResultHandler<Resource> handler){
  Token admin=new Token();
  admin.setId(getCookieFromServerContext(context));
  final JsonValue jVal=request.getNewContent();
  final String rev=request.getRevision();
  IdentityDetails dtls, newDtls;
  IdentityServicesImpl idsvc=new IdentityServicesImpl();
  ;
  Resource resource;
  try {
    dtls=idsvc.read(resourceId,idSvcsAttrList,admin);
    newDtls=jsonValueToIdentityDetails(jVal);
    newDtls.setName(resourceId);
    String userpass=jVal.get(""String_Node_Str"").asString();
    if (userpass != null && !userpass.isEmpty()) {
      if (checkValidPassword(resourceId,userpass.toCharArray(),realm) || isAdmin(context)) {
      }
 else {
        String strPass=getPasswordFromHeader(context);
        if (strPass != null && !strPass.isEmpty() && checkValidPassword(resourceId,strPass.toCharArray(),realm)) {
        }
 else {
          throw new BadRequestException(""String_Node_Str"");
        }
      }
    }
    UpdateResponse message=idsvc.update(newDtls,admin);
    IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
    resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
    handler.handleResult(resource);
  }
 catch (  final ObjectNotFound onf) {
    RestDispatcher.debug.error(""String_Node_Str"" + onf);
    handler.handleError(new NotFoundException(""String_Node_Str"" + resourceId + ""String_Node_Str"",onf));
  }
catch (  final NeedMoreCredentials needMoreCredentials) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ needMoreCredentials);
    handler.handleError(new ForbiddenException(""String_Node_Str"",needMoreCredentials));
  }
catch (  final TokenExpired tokenExpired) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
    handler.handleError(new PermanentException(401,""String_Node_Str"",null));
  }
catch (  final AccessDenied accessDenied) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ accessDenied);
    handler.handleError(new ForbiddenException(accessDenied.getMessage(),accessDenied));
  }
catch (  final GeneralFailure generalFailure) {
    RestDispatcher.debug.error(""String_Node_Str"" + generalFailure);
    handler.handleError(new BadRequestException(generalFailure.getMessage(),generalFailure));
  }
catch (  BadRequestException bre) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ bre);
    handler.handleError(bre);
  }
catch (  final Exception exception) {
    RestDispatcher.debug.error(""String_Node_Str"" + exception);
    handler.handleError(new NotFoundException(exception.getMessage(),exception));
  }
}"
79850,"/** 
 * The function to run when timeout.
 */
public void run(){
  if (!isTimedOut()) {
    if (sessionState == Session.INVALID) {
      setState(Session.DESTROYED);
      ss.removeInternalSession(sessionID);
      ss.sendEvent(this,SessionEvent.DESTROY);
    }
 else {
      long timeLeft=getTimeLeft();
      if (timeLeft == 0) {
        changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
        if (timerPool != null) {
          if (purgeDelay > 0) {
            timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
          }
        }
      }
 else {
        long idleTimeLeft=(maxIdleTime * 60) - getIdleTime();
        if (idleTimeLeft <= 0 && sessionState != Session.INACTIVE) {
          changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
          if (timerPool != null) {
            if (purgeDelay > 0) {
              timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
            }
          }
        }
 else {
          long timeToWait=Math.min(timeLeft,idleTimeLeft);
          if (timerPool != null) {
            timerPool.schedule(this,new Date(((System.currentTimeMillis() / 1000) + timeToWait) * 1000));
          }
        }
      }
    }
  }
 else {
    ss.logEvent(this,SessionEvent.DESTROY);
    setState(Session.DESTROYED);
    ss.removeInternalSession(sessionID);
    ss.sendEvent(this,SessionEvent.DESTROY);
  }
}","/** 
 * The function to run when timeout.
 */
public void run(){
  if (!isTimedOut()) {
    if (isInvalid()) {
      removeSession();
    }
 else {
      long timeLeft=getTimeLeft();
      if (timeLeft == 0) {
        changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
        if (timerPool != null) {
          if (purgeDelay > 0) {
            timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
          }
        }
      }
 else {
        long idleTimeLeft=(maxIdleTime * 60) - getIdleTime();
        if (idleTimeLeft <= 0 && sessionState != Session.INACTIVE) {
          changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
          if (timerPool != null) {
            if (purgeDelay > 0) {
              timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
            }
          }
        }
 else {
          long timeToWait=Math.min(timeLeft,idleTimeLeft);
          if (timerPool != null) {
            timerPool.schedule(this,new Date(((System.currentTimeMillis() / 1000) + timeToWait) * 1000));
          }
        }
      }
    }
  }
 else {
    removeSession();
  }
}"
79851,"/** 
 * Returns true if cookies are supported.
 * @return true if cookie supported;
 */
private boolean getCookieSupport(){
  boolean cookieSupport=false;
  try {
    if (sessionID.getCookieMode() != null) {
      cookieSupport=sessionID.getCookieMode().booleanValue();
    }
 else     if (this.cookieMode != null) {
      cookieSupport=this.cookieMode.booleanValue();
    }
  }
 catch (  Exception ex) {
    DEBUG.error(""String_Node_Str"",ex);
    cookieSupport=true;
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + cookieSupport);
  }
  return cookieSupport;
}","/** 
 * Returns true if cookies are supported.
 * @return true if cookie supported;
 */
private boolean getCookieSupport(){
  boolean cookieSupport=false;
  try {
    if (sessionID.getCookieMode() != null) {
      cookieSupport=sessionID.getCookieMode().booleanValue();
    }
 else     if (this.cookieMode != null) {
      cookieSupport=this.cookieMode.booleanValue();
    }
  }
 catch (  Exception ex) {
    debug.error(""String_Node_Str"",ex);
    cookieSupport=true;
  }
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + cookieSupport);
  }
  return cookieSupport;
}"
79852,"/** 
 * Transfers the info about the Internal Session to Session Info.
 * @return SessionInfo
 */
public SessionInfo toSessionInfo(){
  SessionInfo info=new SessionInfo();
  info.sid=sessionID.toString();
  if (sessionType == Session.USER_SESSION) {
    info.stype=""String_Node_Str"";
  }
 else   if (sessionType == Session.APPLICATION_SESSION) {
    info.stype=""String_Node_Str"";
  }
  info.cid=clientID;
  info.cdomain=clientDomain;
  info.maxtime=Long.toString(getMaxSessionTime());
  info.maxidle=Long.toString(getMaxIdleTime());
  info.maxcaching=Long.toString(getMaxCachingTime());
  if (willExpireFlag == true) {
    info.timeidle=Long.toString(getIdleTime());
    info.timeleft=Long.toString(getTimeLeft());
  }
 else {
    info.timeidle=Long.toString(0);
    info.timeleft=Long.toString(Long.MAX_VALUE / 60);
  }
  if (sessionState == Session.INVALID) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.VALID) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.INACTIVE) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.DESTROYED) {
    info.state=""String_Node_Str"";
  }
  info.properties=(Properties)sessionProperties.clone();
  return info;
}","/** 
 * Transfers the info about the Internal Session to Session Info.
 * @return SessionInfo
 */
public SessionInfo toSessionInfo(){
  SessionInfo info=new SessionInfo();
  info.sid=sessionID.toString();
  if (sessionType == Session.USER_SESSION) {
    info.stype=""String_Node_Str"";
  }
 else   if (sessionType == Session.APPLICATION_SESSION) {
    info.stype=""String_Node_Str"";
  }
  info.cid=clientID;
  info.cdomain=clientDomain;
  info.maxtime=Long.toString(getMaxSessionTime());
  info.maxidle=Long.toString(getMaxIdleTime());
  info.maxcaching=Long.toString(getMaxCachingTime());
  if (willExpireFlag == true) {
    info.timeidle=Long.toString(getIdleTime());
    info.timeleft=Long.toString(getTimeLeft());
  }
 else {
    info.timeidle=Long.toString(0);
    info.timeleft=Long.toString(Long.MAX_VALUE / 60);
  }
  if (isInvalid()) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.VALID) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.INACTIVE) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.DESTROYED) {
    info.state=""String_Node_Str"";
  }
  info.properties=(Properties)sessionProperties.clone();
  return info;
}"
79853,"/** 
 * set the cookieMode based on whether the request has cookies or not. This method is called from createSSOToken(request) method in SSOTokenManager.
 * @param cookieMode ,Boolean value whether request has cookies or not.
 */
public void setCookieMode(Boolean cookieMode){
  DEBUG.message(""String_Node_Str"" + cookieMode);
  if (cookieMode != null) {
    this.cookieMode=cookieMode;
  }
}","/** 
 * set the cookieMode based on whether the request has cookies or not. This method is called from createSSOToken(request) method in SSOTokenManager.
 * @param cookieMode ,Boolean value whether request has cookies or not.
 */
public void setCookieMode(Boolean cookieMode){
  debug.message(""String_Node_Str"" + cookieMode);
  if (cookieMode != null) {
    this.cookieMode=cookieMode;
  }
}"
79854,"/** 
 * Encodes the url by adding the cookiename=sid to it. if cookie support is true returns without encoding <p> The cookie Value is written in the URL based on the encodingScheme specified. The Cookie Value could be written as path info separated by either a ""/"" OR  "";"" or as a query string. <p> If the encoding scheme is SLASH then the  cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/servletpath/&lt;cookieName>=&lt;cookieValue>? queryString      </pre> <p> Note that this format works only if the path is a servlet, if a a jsp file is specified then webcontainers return with ""File Not found"" error. To rewrite links which are JSP files with cookie value use the SEMICOLON OR QUERY encoding scheme.      <p> If the encoding scheme is SEMICOLON then the cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/path;&lt;cookieName=cookieValue>?queryString </pre> Note that this is not supported in the servlet specification and some web containers do not support this. <p> If the encoding scheme is QUERY then the cookie value would be written in the URL in the following format: <pre> protocol://server:port/path?&lt;cookieName>=&lt;cookieValue> protocol://server:port/path?queryString&&lt;cookieName>=&lt;cookieValue> </pre> <p> This is the default and OpenSSO always encodes in this format  unless otherwise specified. If the URL passed in has query parameter then entity escaping of ampersand will be done before appending the cookie if the escape is true.  Only the ampersand before appending  cookie parameter will be entity escaped. <p>
 * @param url the url to be encoded
 * @param encodingScheme possible values are QUERY,SLASH,SEMICOLON
 * @param escape entity escaping of ampersand when appending theSSOToken ID to request query string.
 * @param cookieName 
 * @return encoded URL with cookie value (session id) basedon the encoding scheme or the url itself if there is an error.
 */
public String encodeURL(String url,short encodingScheme,boolean escape,String cookieName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + url);
  }
  String encodedURL=url;
  if (((url != null) && (url.length() > 0)) && !getCookieSupport()) {
    if ((cookieStr != null && cookieStr.length() != 0) && (Session.foundCookieName(cookieStr,cookieName))) {
      encodedURL=SessionEncodeURL.buildCookieString(url,cookieStr,encodingScheme,escape);
    }
 else {
      if (sessionID != null) {
        cookieStr=SessionEncodeURL.createCookieString(cookieName,sessionID.toString());
        encodedURL=SessionEncodeURL.encodeURL(cookieStr,url,encodingScheme,escape);
      }
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + encodedURL);
  }
  return encodedURL;
}","/** 
 * Encodes the url by adding the cookiename=sid to it. if cookie support is true returns without encoding <p> The cookie Value is written in the URL based on the encodingScheme specified. The Cookie Value could be written as path info separated by either a ""/"" OR  "";"" or as a query string. <p> If the encoding scheme is SLASH then the  cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/servletpath/&lt;cookieName>=&lt;cookieValue>? queryString      </pre> <p> Note that this format works only if the path is a servlet, if a a jsp file is specified then webcontainers return with ""File Not found"" error. To rewrite links which are JSP files with cookie value use the SEMICOLON OR QUERY encoding scheme.      <p> If the encoding scheme is SEMICOLON then the cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/path;&lt;cookieName=cookieValue>?queryString </pre> Note that this is not supported in the servlet specification and some web containers do not support this. <p> If the encoding scheme is QUERY then the cookie value would be written in the URL in the following format: <pre> protocol://server:port/path?&lt;cookieName>=&lt;cookieValue> protocol://server:port/path?queryString&&lt;cookieName>=&lt;cookieValue> </pre> <p> This is the default and OpenSSO always encodes in this format  unless otherwise specified. If the URL passed in has query parameter then entity escaping of ampersand will be done before appending the cookie if the escape is true.  Only the ampersand before appending  cookie parameter will be entity escaped. <p>
 * @param url the url to be encoded
 * @param encodingScheme possible values are QUERY,SLASH,SEMICOLON
 * @param escape entity escaping of ampersand when appending theSSOToken ID to request query string.
 * @param cookieName 
 * @return encoded URL with cookie value (session id) basedon the encoding scheme or the url itself if there is an error.
 */
public String encodeURL(String url,short encodingScheme,boolean escape,String cookieName){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + url);
  }
  String encodedURL=url;
  if (((url != null) && (url.length() > 0)) && !getCookieSupport()) {
    if ((cookieStr != null && cookieStr.length() != 0) && (Session.foundCookieName(cookieStr,cookieName))) {
      encodedURL=SessionEncodeURL.buildCookieString(url,cookieStr,encodingScheme,escape);
    }
 else {
      if (sessionID != null) {
        cookieStr=SessionEncodeURL.createCookieString(cookieName,sessionID.toString());
        encodedURL=SessionEncodeURL.encodeURL(cookieStr,url,encodingScheme,escape);
      }
    }
  }
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + ""String_Node_Str"" + encodedURL);
  }
  return encodedURL;
}"
79855,"/** 
 * Sets the key-value pair in the InternalSession property table if it is not protected. If it is protected client should have permission to set it. This method is to be used in conjuction with SessionRequestHandler/SessionService invocation path If the property is protected, an attempt to remotely set a protected property is logged and the method throws an Exception. Otherwise invocation is delegated to internalPutProperty() Note that package default access is being used
 * @param clientToken Token of the client setting external property.
 * @param key Property key
 * @param value Property value for the key
 * @exception SessionException is thrown if the key is protected property.
 */
void putExternalProperty(SSOToken clientToken,String key,String value) throws SessionException {
  try {
    SessionUtils.checkPermissionToSetProperty(clientToken,key,value);
  }
 catch (  SessionException se) {
    SessionService.getSessionService().logIt(this,""String_Node_Str"");
    throw se;
  }
  internalPutProperty(key,value);
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + ""String_Node_Str"");
  }
}","/** 
 * Sets the key-value pair in the InternalSession property table if it is not protected. If it is protected client should have permission to set it. This method is to be used in conjuction with SessionRequestHandler/SessionService invocation path If the property is protected, an attempt to remotely set a protected property is logged and the method throws an Exception. Otherwise invocation is delegated to internalPutProperty() Note that package default access is being used
 * @param clientToken Token of the client setting external property.
 * @param key Property key
 * @param value Property value for the key
 * @exception SessionException is thrown if the key is protected property.
 */
void putExternalProperty(SSOToken clientToken,String key,String value) throws SessionException {
  try {
    SessionUtils.checkPermissionToSetProperty(clientToken,key,value);
  }
 catch (  SessionException se) {
    SessionService.getSessionService().logIt(this,""String_Node_Str"");
    throw se;
  }
  internalPutProperty(key,value);
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + ""String_Node_Str"");
  }
}"
79856,"/** 
 * Changes the state of the session to ACTIVE after creation.
 * @param userDN 
 * @return <code> true </code> if the session is successfully activated after creation , <code>false</code> otherwise
 */
public boolean activate(String userDN){
  if (userDN == null) {
    return false;
  }
  if ((SessionService.getActiveSessions() >= SessionService.maxSessions) && (!userDN.equalsIgnoreCase(superUserDN))) {
    SessionService.getSessionService().logSystemMessage(LOG_MSG_SESSION_MAX_LIMIT_REACHED,java.util.logging.Level.INFO);
    return false;
  }
  if ((SessionService.isSessionConstraintEnabled()) && !shouldIgnoreSessionQuotaChecking(userDN)) {
    if (SessionConstraint.checkQuotaAndPerformAction(this)) {
      if (DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + ""String_Node_Str"");
      }
      SessionService.getSessionService().logEvent(this,SessionEvent.QUOTA_EXHAUSTED);
      return false;
    }
  }
  setLatestAccessTime();
  setState(Session.VALID);
  if (reschedulePossible) {
    reschedule();
  }
  SessionService.getSessionService().logEvent(this,SessionEvent.SESSION_CREATION);
  SessionService.getSessionService().sendEvent(this,SessionEvent.SESSION_CREATION);
  if (!isAppSession() || SessionService.returnAppSession) {
    SessionService.incrementActiveSessions();
  }
  return true;
}","/** 
 * Changes the state of the session to ACTIVE after creation.
 * @param userDN 
 * @return <code> true </code> if the session is successfully activated after creation , <code>false</code> otherwise
 */
public boolean activate(String userDN){
  if (userDN == null) {
    return false;
  }
  if ((SessionService.getActiveSessions() >= SessionService.maxSessions) && (!userDN.equalsIgnoreCase(superUserDN))) {
    SessionService.getSessionService().logSystemMessage(LOG_MSG_SESSION_MAX_LIMIT_REACHED,java.util.logging.Level.INFO);
    return false;
  }
  if ((SessionService.isSessionConstraintEnabled()) && !shouldIgnoreSessionQuotaChecking(userDN)) {
    if (SessionConstraint.checkQuotaAndPerformAction(this)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + ""String_Node_Str"");
      }
      SessionService.getSessionService().logEvent(this,SessionEvent.QUOTA_EXHAUSTED);
      return false;
    }
  }
  setLatestAccessTime();
  setState(Session.VALID);
  if (reschedulePossible) {
    reschedule();
  }
  SessionService.getSessionService().logEvent(this,SessionEvent.SESSION_CREATION);
  SessionService.getSessionService().sendEvent(this,SessionEvent.SESSION_CREATION);
  if (!isAppSession() || SessionService.returnAppSession) {
    SessionService.incrementActiveSessions();
  }
  return true;
}"
79857,"/** 
 * Default constructor required for deserialisation.
 */
public InternalSession(){
  this(null,SessionService.getSessionService(),SessionService.sessionDebug);
}","/** 
 * Default constructor required for deserialisation.
 */
public InternalSession(){
}"
79858,"/** 
 * Sets the key-value pair in the Internal Session property table.
 * @param key Property key
 * @param value Property value for the key
 */
protected void internalPutProperty(String key,String value){
  if (key.equals(HOST_NAME) || key.equals(HOST)) {
    if (value == null || value.length() == 0) {
      return;
    }
    if (isEnableHostLookUp) {
      try {
        InetAddress address=java.net.InetAddress.getByName(value);
        String hostName=address.getHostName();
        sessionProperties.put(HOST_NAME,hostName);
        sessionProperties.put(HOST,value);
      }
 catch (      UnknownHostException uhe) {
        DEBUG.error(""String_Node_Str"" + ""String_Node_Str"" + value + ""String_Node_Str"",uhe);
      }
    }
 else {
      sessionProperties.put(HOST_NAME,value);
      sessionProperties.put(HOST,value);
    }
  }
 else   if (key.equals(AM_MAX_IDLE_TIME)) {
    setMaxIdleTime(Long.parseLong(value));
  }
 else {
    sessionProperties.put(key,value);
  }
  if (sessionState == Session.VALID && SessionService.isSendPropertyNotification(key)) {
    SessionService.getSessionService().sendEvent(this,SessionEvent.PROPERTY_CHANGED);
    SessionService.getSessionService().logEvent(this,SessionEvent.PROPERTY_CHANGED);
  }
  updateForFailover();
}","/** 
 * Sets the key-value pair in the Internal Session property table.
 * @param key Property key
 * @param value Property value for the key
 */
protected void internalPutProperty(String key,String value){
  if (key.equals(HOST_NAME) || key.equals(HOST)) {
    if (value == null || value.length() == 0) {
      return;
    }
    if (isEnableHostLookUp) {
      try {
        InetAddress address=java.net.InetAddress.getByName(value);
        String hostName=address.getHostName();
        sessionProperties.put(HOST_NAME,hostName);
        sessionProperties.put(HOST,value);
      }
 catch (      UnknownHostException uhe) {
        debug.error(""String_Node_Str"" + ""String_Node_Str"" + value + ""String_Node_Str"",uhe);
      }
    }
 else {
      sessionProperties.put(HOST_NAME,value);
      sessionProperties.put(HOST,value);
    }
  }
 else   if (key.equals(AM_MAX_IDLE_TIME)) {
    setMaxIdleTime(Long.parseLong(value));
  }
 else {
    sessionProperties.put(key,value);
  }
  if (sessionState == Session.VALID && SessionService.isSendPropertyNotification(key)) {
    SessionService.getSessionService().sendEvent(this,SessionEvent.PROPERTY_CHANGED);
    SessionService.getSessionService().logEvent(this,SessionEvent.PROPERTY_CHANGED);
  }
  updateForFailover();
}"
79859,"/** 
 * Checks whether the sesion should be destroyed or not.
 */
boolean shouldDestroy(){
  if (willExpireFlag == false) {
    return false;
  }
  if (!isTimedOut()) {
    if (sessionState == Session.INVALID) {
      if (checkInvalidSessionDefaultIdleTime()) {
        setState(Session.DESTROYED);
        ss.sendEvent(this,SessionEvent.DESTROY);
        return true;
      }
 else {
        return false;
      }
    }
    if (getTimeLeft() == 0) {
      changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
      return false;
    }
    if (getIdleTime() >= maxIdleTime * 60 && sessionState != Session.INACTIVE) {
      changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
      return false;
    }
    return false;
  }
 else {
    if (getTimeLeftBeforePurge() <= 0) {
      SessionService.getSessionService().logEvent(this,SessionEvent.DESTROY);
      setState(Session.DESTROYED);
      SessionService.getSessionService().sendEvent(this,SessionEvent.DESTROY);
      return true;
    }
 else {
      return false;
    }
  }
}","/** 
 * Checks whether the sesion should be destroyed or not.
 */
boolean shouldDestroy(){
  if (willExpireFlag == false) {
    return false;
  }
  if (!isTimedOut()) {
    if (isInvalid()) {
      if (checkInvalidSessionDefaultIdleTime()) {
        setState(Session.DESTROYED);
        ss.sendEvent(this,SessionEvent.DESTROY);
        return true;
      }
 else {
        return false;
      }
    }
    if (getTimeLeft() == 0) {
      changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
      return false;
    }
    if (getIdleTime() >= maxIdleTime * 60 && sessionState != Session.INACTIVE) {
      changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
      return false;
    }
    return false;
  }
 else {
    if (getTimeLeftBeforePurge() <= 0) {
      SessionService.getSessionService().logEvent(this,SessionEvent.DESTROY);
      setState(Session.DESTROYED);
      SessionService.getSessionService().sendEvent(this,SessionEvent.DESTROY);
      return true;
    }
 else {
      return false;
    }
  }
}"
79860,"/** 
 * Static initialisation section will be called the first time the SessionService is initailised. Note: This function depends on the singleton pattern that the SessionService follows.
 */
private static void initialiseStatic(){
  sessionDebug=Debug.getInstance(""String_Node_Str"");
  stats=Stats.getInstance(""String_Node_Str"");
  int poolSize=DEFAULT_POOL_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  String size=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_SIZE);
  if (size != null) {
    try {
      poolSize=Integer.parseInt(size);
    }
 catch (    NumberFormatException e) {
      sessionDebug.error(""String_Node_Str"" + size + ""String_Node_Str""+ DEFAULT_POOL_SIZE);
    }
  }
  String thres=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_THRESHOLD);
  if (thres != null) {
    try {
      threshold=Integer.parseInt(thres);
    }
 catch (    Exception e) {
      sessionDebug.error(""String_Node_Str"" + thres + ""String_Node_Str""+ DEFAULT_THRESHOLD);
    }
  }
  ShutdownManager shutdownMan=ShutdownManager.getInstance();
  if (shutdownMan.acquireValidLock()) {
    try {
      threadPool=new ThreadPool(""String_Node_Str"",poolSize,threshold,true,sessionDebug);
      shutdownMan.addShutdownListener(new ShutdownListener(){
        public void shutdown(){
          threadPool.shutdown();
        }
      }
);
    }
  finally {
      shutdownMan.releaseLockAndNotify();
    }
  }
  if (threadPool != null) {
    try {
      maxSessions=Integer.parseInt(SystemProperties.get(Constants.AM_SESSION_MAX_SESSIONS));
    }
 catch (    Exception ex) {
      maxSessions=10000;
    }
  }
  String status=SystemProperties.get(Constants.AM_LOGSTATUS);
  if (status == null) {
    status=""String_Node_Str"";
  }
  logStatus=status.equalsIgnoreCase(""String_Node_Str"");
}","/** 
 * Static initialisation section will be called the first time the SessionService is initailised. Note: This function depends on the singleton pattern that the SessionService follows.
 */
private static void initialiseStatic(){
  Key<Debug> key=Key.get(Debug.class,Names.named(SessionConstants.SESSION_DEBUG));
  sessionDebug=InjectorHolder.getInstance(key);
  stats=Stats.getInstance(""String_Node_Str"");
  int poolSize=DEFAULT_POOL_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  String size=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_SIZE);
  if (size != null) {
    try {
      poolSize=Integer.parseInt(size);
    }
 catch (    NumberFormatException e) {
      sessionDebug.error(""String_Node_Str"" + size + ""String_Node_Str""+ DEFAULT_POOL_SIZE);
    }
  }
  String thres=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_THRESHOLD);
  if (thres != null) {
    try {
      threshold=Integer.parseInt(thres);
    }
 catch (    Exception e) {
      sessionDebug.error(""String_Node_Str"" + thres + ""String_Node_Str""+ DEFAULT_THRESHOLD);
    }
  }
  ShutdownManager shutdownMan=ShutdownManager.getInstance();
  if (shutdownMan.acquireValidLock()) {
    try {
      threadPool=new ThreadPool(""String_Node_Str"",poolSize,threshold,true,sessionDebug);
      shutdownMan.addShutdownListener(new ShutdownListener(){
        public void shutdown(){
          threadPool.shutdown();
        }
      }
);
    }
  finally {
      shutdownMan.releaseLockAndNotify();
    }
  }
  if (threadPool != null) {
    try {
      maxSessions=Integer.parseInt(SystemProperties.get(Constants.AM_SESSION_MAX_SESSIONS));
    }
 catch (    Exception ex) {
      maxSessions=10000;
    }
  }
  String status=SystemProperties.get(Constants.AM_LOGSTATUS);
  if (status == null) {
    status=""String_Node_Str"";
  }
  logStatus=status.equalsIgnoreCase(""String_Node_Str"");
}"
79861,"/** 
 * Removes the Internal Session from the Internal Session table.
 * @param sid Session ID
 */
InternalSession removeInternalSession(SessionID sid){
  boolean isSessionStored=true;
  if (sid == null)   return null;
  InternalSession session=(InternalSession)sessionTable.remove(sid);
  if (session != null) {
    remoteSessionSet.remove(sid);
    session.cancel();
    removeSessionHandle(session);
    removeRestrictedTokens(session);
    isSessionStored=session.getIsISstored();
    if (session.getState() == Session.VALID) {
      decrementActiveSessions();
      SessionCount.decrementSessionCount(session);
    }
  }
  if (isSessionFailoverEnabled && isSessionStored) {
    if (getUseInternalRequestRouting()) {
      try {
        String tokenId=tokenIdFactory.toSessionTokenId(session);
        getRepository().delete(tokenId);
      }
 catch (      Exception e) {
        sessionDebug.error(""String_Node_Str"",e);
      }
    }
 else {
      invalidateHttpSession(sid);
    }
  }
  return session;
}","/** 
 * Removes the Internal Session from the Internal Session table.
 * @param sid Session ID
 */
InternalSession removeInternalSession(SessionID sid){
  boolean isSessionStored=false;
  if (sid == null)   return null;
  InternalSession session=(InternalSession)sessionTable.remove(sid);
  if (session != null) {
    remoteSessionSet.remove(sid);
    session.cancel();
    removeSessionHandle(session);
    removeRestrictedTokens(session);
    isSessionStored=session.getIsISstored();
    if (session.getState() == Session.VALID) {
      decrementActiveSessions();
      SessionCount.decrementSessionCount(session);
    }
  }
  if (isSessionFailoverEnabled && isSessionStored) {
    if (getUseInternalRequestRouting()) {
      try {
        String tokenId=tokenIdFactory.toSessionTokenId(session);
        getRepository().delete(tokenId);
      }
 catch (      Exception e) {
        sessionDebug.error(""String_Node_Str"",e);
      }
    }
 else {
      invalidateHttpSession(sid);
    }
  }
  return session;
}"
79862,"/** 
 * If InternalSession is not present, we attempt to recover its state from associated HttpSession. We have to set the session tracking cookie to HttpID which is present in the SessionID object. This will work in the fail over cases. We first get the HttpSession by invoking the GetHttpSession Servlet on the SAME server instance this code is invoked. This should trigger the Web container to perform recovery of the associated Http session <p/> We also pass the SessionID to the servlet to double check the match between the session id and Http session <p/> This is the ""client side"" of the remote invocation. The servlet will call retrieveSession() to complete the work
 * @param sid Session ID
 */
InternalSession recoverSession(SessionID sid){
  if (!isSessionFailoverEnabled) {
    return null;
  }
  if (getUseInternalRequestRouting()) {
    InternalSession sess=null;
    try {
      String tokenId=tokenIdFactory.toSessionTokenId(sid);
      Token token=getRepository().read(tokenId);
      if (token == null) {
        return sess;
      }
      sess=tokenAdapter.fromToken(token);
      updateSessionMaps(sess);
    }
 catch (    CoreTokenException e) {
      sessionDebug.error(""String_Node_Str"",e);
    }
    return sess;
  }
 else {
    if (sessionDebug.messageEnabled()) {
      sessionDebug.message(""String_Node_Str"" + sid);
    }
    DataInputStream in=null;
    InternalSession sess=null;
    try {
      String query=""String_Node_Str"" + GetHttpSession.OP + ""String_Node_Str""+ GetHttpSession.RECOVER_OP;
      URL url=new URL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPort,deploymentURI + ""String_Node_Str"" + query);
      HttpURLConnection conn=invokeRemote(url,sid,null);
      in=new DataInputStream(conn.getInputStream());
      sess=(InternalSession)sessionTable.get(sid);
      if (sess == null) {
        sess=resolveRestrictedToken(sid,false);
      }
    }
 catch (    Exception ex) {
      sessionDebug.error(""String_Node_Str"",ex);
    }
 finally {
      closeStream(in);
    }
    return sess;
  }
}","/** 
 * If InternalSession is not present, we attempt to recover its state from associated HttpSession. We have to set the session tracking cookie to HttpID which is present in the SessionID object. This will work in the fail over cases. We first get the HttpSession by invoking the GetHttpSession Servlet on the SAME server instance this code is invoked. This should trigger the Web container to perform recovery of the associated Http session <p/> We also pass the SessionID to the servlet to double check the match between the session id and Http session <p/> This is the ""client side"" of the remote invocation. The servlet will call retrieveSession() to complete the work
 * @param sid Session ID
 */
InternalSession recoverSession(SessionID sid){
  if (!isSessionFailoverEnabled) {
    return null;
  }
  if (getUseInternalRequestRouting()) {
    InternalSession sess=null;
    try {
      String tokenId=tokenIdFactory.toSessionTokenId(sid);
      Token token=getRepository().read(tokenId);
      if (token == null) {
        return sess;
      }
      sess=tokenAdapter.fromToken(token);
      sess.setDebug(sessionDebug);
      sess.setSessionService(this);
      sess.scheduleExpiry();
      updateSessionMaps(sess);
    }
 catch (    CoreTokenException e) {
      sessionDebug.error(""String_Node_Str"",e);
    }
    return sess;
  }
 else {
    if (sessionDebug.messageEnabled()) {
      sessionDebug.message(""String_Node_Str"" + sid);
    }
    DataInputStream in=null;
    InternalSession sess=null;
    try {
      String query=""String_Node_Str"" + GetHttpSession.OP + ""String_Node_Str""+ GetHttpSession.RECOVER_OP;
      URL url=new URL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPort,deploymentURI + ""String_Node_Str"" + query);
      HttpURLConnection conn=invokeRemote(url,sid,null);
      in=new DataInputStream(conn.getInputStream());
      sess=(InternalSession)sessionTable.get(sid);
      if (sess == null) {
        sess=resolveRestrictedToken(sid,false);
      }
    }
 catch (    Exception ex) {
      sessionDebug.error(""String_Node_Str"",ex);
    }
 finally {
      closeStream(in);
    }
    return sess;
  }
}"
79863,"/** 
 * Private Singleton Session Service.
 */
private SessionService(){
  KeyConversion keyConversion=new KeyConversion();
  tokenIdFactory=InjectorHolder.getInstance(TokenIdFactory.class);
  coreTokenConfig=InjectorHolder.getInstance(CoreTokenConfig.class);
  tokenAdapter=InjectorHolder.getInstance(SessionAdapter.class);
  try {
    dsameAdminDN=(String)AccessController.doPrivileged(new AdminDNAction());
    dsameAdminPassword=(String)AccessController.doPrivileged(new AdminPasswordAction());
    sessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    sessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    sessionServerPort=SystemProperties.get(Constants.AM_SERVER_PORT);
    sessionServerURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    sessionServerID=WebtopNaming.getServerID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    isSiteEnabled=WebtopNaming.isSiteEnabled(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    if (isSiteEnabled) {
      sessionServerID=WebtopNaming.getSiteID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      String secondaryIDs=WebtopNaming.getSecondarySites(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      secondaryServerIDs=new HashSet();
      if (secondaryIDs != null) {
        if (secondaryIDs.contains(""String_Node_Str"")) {
          StringTokenizer st=new StringTokenizer(secondaryIDs,""String_Node_Str"");
          while (st.hasMoreTokens()) {
            secondaryServerIDs.add(st.nextToken());
          }
        }
 else {
          secondaryServerIDs.add(secondaryIDs);
        }
      }
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
      sessionServerProtocol=sessionServiceID.getProtocol();
      sessionServer=sessionServiceID.getHost();
      sessionServerPort=Integer.toString(sessionServiceID.getPort());
    }
 else {
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
    }
    try {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    NoSuchProviderException e) {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"");
    }
    sessionTable=new Hashtable();
    remoteSessionSet=Collections.synchronizedSet(new HashSet());
    if (stats.isEnabled()) {
      maxSessionStats=new SessionMaxStats(sessionTable);
      stats.addStatsListener(maxSessionStats);
    }
    thisSessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    thisSessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    thisSessionServerPortAsString=SystemProperties.get(Constants.AM_SERVER_PORT);
    thisSessionURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    if ((thisSessionServerProtocol == null) || (thisSessionServerPortAsString == null) || (thisSessionServer == null)|| (thisSessionURI == null)) {
      throw new SessionException(SessionBundle.rbName,""String_Node_Str"",null);
    }
    thisSessionServerPort=Integer.parseInt(thisSessionServerPortAsString);
    thisSessionServerID=WebtopNaming.getServerID(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    thisSessionServerURL=thisSessionServerProtocol + ""String_Node_Str"" + thisSessionServer+ ""String_Node_Str""+ thisSessionServerPortAsString+ thisSessionURI;
    thisSessionServiceURL=Session.getSessionServiceURL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    postInit();
  }
 catch (  Exception ex) {
    sessionDebug.error(""String_Node_Str"",ex);
  }
}","/** 
 * Private Singleton Session Service.
 */
private SessionService(){
  tokenIdFactory=InjectorHolder.getInstance(TokenIdFactory.class);
  coreTokenConfig=InjectorHolder.getInstance(CoreTokenConfig.class);
  tokenAdapter=InjectorHolder.getInstance(SessionAdapter.class);
  try {
    dsameAdminDN=(String)AccessController.doPrivileged(new AdminDNAction());
    dsameAdminPassword=(String)AccessController.doPrivileged(new AdminPasswordAction());
    sessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    sessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    sessionServerPort=SystemProperties.get(Constants.AM_SERVER_PORT);
    sessionServerURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    sessionServerID=WebtopNaming.getServerID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    isSiteEnabled=WebtopNaming.isSiteEnabled(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    if (isSiteEnabled) {
      sessionServerID=WebtopNaming.getSiteID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      String secondaryIDs=WebtopNaming.getSecondarySites(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      secondaryServerIDs=new HashSet();
      if (secondaryIDs != null) {
        if (secondaryIDs.contains(""String_Node_Str"")) {
          StringTokenizer st=new StringTokenizer(secondaryIDs,""String_Node_Str"");
          while (st.hasMoreTokens()) {
            secondaryServerIDs.add(st.nextToken());
          }
        }
 else {
          secondaryServerIDs.add(secondaryIDs);
        }
      }
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
      sessionServerProtocol=sessionServiceID.getProtocol();
      sessionServer=sessionServiceID.getHost();
      sessionServerPort=Integer.toString(sessionServiceID.getPort());
    }
 else {
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
    }
    try {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    NoSuchProviderException e) {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"");
    }
    sessionTable=new Hashtable();
    remoteSessionSet=Collections.synchronizedSet(new HashSet());
    if (stats.isEnabled()) {
      maxSessionStats=new SessionMaxStats(sessionTable);
      stats.addStatsListener(maxSessionStats);
    }
    thisSessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    thisSessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    thisSessionServerPortAsString=SystemProperties.get(Constants.AM_SERVER_PORT);
    thisSessionURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    if ((thisSessionServerProtocol == null) || (thisSessionServerPortAsString == null) || (thisSessionServer == null)|| (thisSessionURI == null)) {
      throw new SessionException(SessionBundle.rbName,""String_Node_Str"",null);
    }
    thisSessionServerPort=Integer.parseInt(thisSessionServerPortAsString);
    thisSessionServerID=WebtopNaming.getServerID(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    thisSessionServerURL=thisSessionServerProtocol + ""String_Node_Str"" + thisSessionServer+ ""String_Node_Str""+ thisSessionServerPortAsString+ thisSessionURI;
    thisSessionServiceURL=Session.getSessionServiceURL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    postInit();
  }
 catch (  Exception ex) {
    sessionDebug.error(""String_Node_Str"",ex);
  }
}"
79864,"@Override protected void configure(){
  bind(new AdminTokenType()).toProvider(new AdminTokenProvider()).in(Singleton.class);
  bind(ServiceManagementDAO.class).to(ServiceManagementDAOWrapper.class).in(Singleton.class);
  bind(DNWrapper.class).in(Singleton.class);
  bind(IndexChangeObservable.class).in(Singleton.class);
  bind(ShutdownManagerWrapper.class).in(Singleton.class);
  bind(SearchResultHandler.class).to(IndexChangeHandler.class).in(Singleton.class);
  bind(IndexChangeManager.class).to(IndexChangeManagerImpl.class).in(Singleton.class);
  bind(IndexChangeMonitor.class).to(IndexChangeMonitorImpl.class).in(Singleton.class);
  bind(IndexTreeService.class).to(IndexTreeServiceImpl.class).in(Singleton.class);
  bind(new TypeLiteral<TokenAdapter<JsonValue>>(){
  }
).to(OAuthAdapter.class);
  bind(DataLayerConnectionFactory.class).in(Singleton.class);
  bind(DSConfigMgr.class).toProvider(new Provider<DSConfigMgr>(){
    public DSConfigMgr get(){
      try {
        return DSConfigMgr.getDSConfigMgr();
      }
 catch (      LDAPServiceException e) {
        throw new IllegalStateException(e);
      }
    }
  }
).in(Singleton.class);
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_DEBUG));
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_REAPER_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_REAPER_DEBUG));
  bind(CoreTokenConstants.class).in(Singleton.class);
  bind(CTSPersistentStore.class).in(Singleton.class);
  bind(CoreTokenConfig.class).in(Singleton.class);
  bind(ConnectionFactory.class).to(CTSConnectionFactory.class).in(Singleton.class);
  bind(LDAPConfig.class).toProvider(new Provider<LDAPConfig>(){
    public LDAPConfig get(){
      return new LDAPConfig(SMSEntry.getRootSuffix());
    }
  }
).in(Singleton.class);
  bind(ExternalTokenConfig.class).in(Singleton.class);
  bind(ConfigurationObserver.class).toProvider(new Provider<ConfigurationObserver>(){
    public ConfigurationObserver get(){
      return ConfigurationObserver.getInstance();
    }
  }
).in(Singleton.class);
  bind(ScheduledExecutorService.class).annotatedWith(Names.named(CTSReaper.CTS_SCHEDULED_SERVICE)).toInstance(Executors.newScheduledThreadPool(1));
  bind(SessionService.class).toProvider(new Provider<SessionService>(){
    public SessionService get(){
      return SessionService.getSessionService();
    }
  }
).in(Singleton.class);
}","@Override protected void configure(){
  bind(new AdminTokenType()).toProvider(new AdminTokenProvider()).in(Singleton.class);
  bind(ServiceManagementDAO.class).to(ServiceManagementDAOWrapper.class).in(Singleton.class);
  bind(DNWrapper.class).in(Singleton.class);
  bind(IndexChangeObservable.class).in(Singleton.class);
  bind(ShutdownManagerWrapper.class).in(Singleton.class);
  bind(SearchResultHandler.class).to(IndexChangeHandler.class).in(Singleton.class);
  bind(IndexChangeManager.class).to(IndexChangeManagerImpl.class).in(Singleton.class);
  bind(IndexChangeMonitor.class).to(IndexChangeMonitorImpl.class).in(Singleton.class);
  bind(IndexTreeService.class).to(IndexTreeServiceImpl.class).in(Singleton.class);
  bind(new TypeLiteral<TokenAdapter<JsonValue>>(){
  }
).to(OAuthAdapter.class);
  bind(DataLayerConnectionFactory.class).in(Singleton.class);
  bind(DSConfigMgr.class).toProvider(new Provider<DSConfigMgr>(){
    public DSConfigMgr get(){
      try {
        return DSConfigMgr.getDSConfigMgr();
      }
 catch (      LDAPServiceException e) {
        throw new IllegalStateException(e);
      }
    }
  }
).in(Singleton.class);
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_DEBUG));
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_REAPER_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_REAPER_DEBUG));
  bind(CoreTokenConstants.class).in(Singleton.class);
  bind(CTSPersistentStore.class).in(Singleton.class);
  bind(CoreTokenConfig.class).in(Singleton.class);
  bind(ConnectionFactory.class).to(CTSConnectionFactory.class).in(Singleton.class);
  bind(LDAPConfig.class).toProvider(new Provider<LDAPConfig>(){
    public LDAPConfig get(){
      return new LDAPConfig(SMSEntry.getRootSuffix());
    }
  }
).in(Singleton.class);
  bind(ExternalTokenConfig.class).in(Singleton.class);
  bind(ConfigurationObserver.class).toProvider(new Provider<ConfigurationObserver>(){
    public ConfigurationObserver get(){
      return ConfigurationObserver.getInstance();
    }
  }
).in(Singleton.class);
  bind(ScheduledExecutorService.class).annotatedWith(Names.named(CTSReaper.CTS_SCHEDULED_SERVICE)).toInstance(Executors.newScheduledThreadPool(1));
  bind(SessionService.class).toProvider(new Provider<SessionService>(){
    public SessionService get(){
      return SessionService.getSessionService();
    }
  }
).in(Singleton.class);
  bind(Debug.class).annotatedWith(Names.named(SessionConstants.SESSION_DEBUG)).toInstance(Debug.getInstance(SessionConstants.SESSION_DEBUG));
}"
79865,"/** 
 * Creates a default instance with dependencies defined.
 * @param tokenIdFactory Non null.
 * @param config Non null.
 * @param serialisation Non null.
 * @param blobUtils
 */
@Inject public SessionAdapter(TokenIdFactory tokenIdFactory,CoreTokenConfig config,JSONSerialisation serialisation,LDAPDataConversion dataConversion,TokenBlobUtils blobUtils){
  this.tokenIdFactory=tokenIdFactory;
  this.config=config;
  this.serialisation=serialisation;
  this.dataConversion=dataConversion;
  this.blobUtils=blobUtils;
}","/** 
 * Creates a default instance with dependencies defined.
 * @param tokenIdFactory Non null.
 * @param config Non null.
 * @param serialisation Non null.
 * @param blobUtils A collection of Binary Object utilities.
 */
@Inject public SessionAdapter(TokenIdFactory tokenIdFactory,CoreTokenConfig config,JSONSerialisation serialisation,LDAPDataConversion dataConversion,TokenBlobUtils blobUtils){
  this.tokenIdFactory=tokenIdFactory;
  this.config=config;
  this.serialisation=serialisation;
  this.dataConversion=dataConversion;
  this.blobUtils=blobUtils;
}"
79866,"@Post(""String_Node_Str"") public Representation represent(Representation entity){
  Representation rep=null;
  client=getAuthenticatedClient();
  if (client.getClient().getClientType().equals(ClientApplication.ClientType.PUBLIC)) {
    OAuth2Utils.DEBUG.warning(""String_Node_Str"");
    throw OAuthProblemException.OAuthError.INVALID_CLIENT.handle(getRequest(),""String_Node_Str"");
  }
  String scope_before=OAuth2Utils.getRequestParameter(getRequest(),OAuth2Constants.Params.SCOPE,String.class);
  Set<String> checkedScope=executeAccessTokenScopePlugin(scope_before);
  CoreToken token=createAccessToken(checkedScope);
  Map<String,Object> response=token.convertToMap();
  Map<String,String> data=new HashMap<String,String>();
  response.putAll(executeExtraDataScopePlugin(data,token));
  if (checkedScope != null && !checkedScope.isEmpty()) {
    response.put(OAuth2Constants.Params.SCOPE,OAuth2Utils.join(checkedScope,OAuth2Utils.getScopeDelimiter(getContext())));
  }
  return new JacksonRepresentation<Map>(response);
}","@Post(""String_Node_Str"") public Representation represent(Representation entity){
  Representation rep=null;
  client=getAuthenticatedClient();
  if (client.getClient().getClientType().equals(ClientApplication.ClientType.PUBLIC)) {
    OAuth2Utils.DEBUG.warning(""String_Node_Str"");
    throw OAuthProblemException.OAuthError.UNAUTHORIZED_CLIENT.handle(getRequest(),""String_Node_Str"");
  }
  String scope_before=OAuth2Utils.getRequestParameter(getRequest(),OAuth2Constants.Params.SCOPE,String.class);
  Set<String> checkedScope=executeAccessTokenScopePlugin(scope_before);
  CoreToken token=createAccessToken(checkedScope);
  Map<String,Object> response=token.convertToMap();
  Map<String,String> data=new HashMap<String,String>();
  response.putAll(executeExtraDataScopePlugin(data,token));
  if (checkedScope != null && !checkedScope.isEmpty()) {
    response.put(OAuth2Constants.Params.SCOPE,OAuth2Utils.join(checkedScope,OAuth2Utils.getScopeDelimiter(getContext())));
  }
  return new JacksonRepresentation<Map>(response);
}"
79867,"/** 
 * The function to run when timeout.
 */
public void run(){
  if (!isTimedOut()) {
    if (sessionState == Session.INVALID) {
      setState(Session.DESTROYED);
      ss.removeInternalSession(sessionID);
      ss.sendEvent(this,SessionEvent.DESTROY);
    }
 else {
      long timeLeft=getTimeLeft();
      if (timeLeft == 0) {
        changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
        if (timerPool != null) {
          if (purgeDelay > 0) {
            timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
          }
        }
      }
 else {
        long idleTimeLeft=(maxIdleTime * 60) - getIdleTime();
        if (idleTimeLeft <= 0 && sessionState != Session.INACTIVE) {
          changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
          if (timerPool != null) {
            if (purgeDelay > 0) {
              timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
            }
          }
        }
 else {
          long timeToWait=Math.min(timeLeft,idleTimeLeft);
          if (timerPool != null) {
            timerPool.schedule(this,new Date(((System.currentTimeMillis() / 1000) + timeToWait) * 1000));
          }
        }
      }
    }
  }
 else {
    ss.logEvent(this,SessionEvent.DESTROY);
    setState(Session.DESTROYED);
    ss.removeInternalSession(sessionID);
    ss.sendEvent(this,SessionEvent.DESTROY);
  }
}","/** 
 * The function to run when timeout.
 */
public void run(){
  if (!isTimedOut()) {
    if (isInvalid()) {
      removeSession();
    }
 else {
      long timeLeft=getTimeLeft();
      if (timeLeft == 0) {
        changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
        if (timerPool != null) {
          if (purgeDelay > 0) {
            timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
          }
        }
      }
 else {
        long idleTimeLeft=(maxIdleTime * 60) - getIdleTime();
        if (idleTimeLeft <= 0 && sessionState != Session.INACTIVE) {
          changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
          if (timerPool != null) {
            if (purgeDelay > 0) {
              timerPool.schedule(this,new Date((timedOutAt + (purgeDelay * 60)) * 1000));
            }
          }
        }
 else {
          long timeToWait=Math.min(timeLeft,idleTimeLeft);
          if (timerPool != null) {
            timerPool.schedule(this,new Date(((System.currentTimeMillis() / 1000) + timeToWait) * 1000));
          }
        }
      }
    }
  }
 else {
    removeSession();
  }
}"
79868,"/** 
 * Returns true if cookies are supported.
 * @return true if cookie supported;
 */
private boolean getCookieSupport(){
  boolean cookieSupport=false;
  try {
    if (sessionID.getCookieMode() != null) {
      cookieSupport=sessionID.getCookieMode().booleanValue();
    }
 else     if (this.cookieMode != null) {
      cookieSupport=this.cookieMode.booleanValue();
    }
  }
 catch (  Exception ex) {
    DEBUG.error(""String_Node_Str"",ex);
    cookieSupport=true;
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + cookieSupport);
  }
  return cookieSupport;
}","/** 
 * Returns true if cookies are supported.
 * @return true if cookie supported;
 */
private boolean getCookieSupport(){
  boolean cookieSupport=false;
  try {
    if (sessionID.getCookieMode() != null) {
      cookieSupport=sessionID.getCookieMode().booleanValue();
    }
 else     if (this.cookieMode != null) {
      cookieSupport=this.cookieMode.booleanValue();
    }
  }
 catch (  Exception ex) {
    debug.error(""String_Node_Str"",ex);
    cookieSupport=true;
  }
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + cookieSupport);
  }
  return cookieSupport;
}"
79869,"/** 
 * Transfers the info about the Internal Session to Session Info.
 * @return SessionInfo
 */
public SessionInfo toSessionInfo(){
  SessionInfo info=new SessionInfo();
  info.sid=sessionID.toString();
  if (sessionType == Session.USER_SESSION) {
    info.stype=""String_Node_Str"";
  }
 else   if (sessionType == Session.APPLICATION_SESSION) {
    info.stype=""String_Node_Str"";
  }
  info.cid=clientID;
  info.cdomain=clientDomain;
  info.maxtime=Long.toString(getMaxSessionTime());
  info.maxidle=Long.toString(getMaxIdleTime());
  info.maxcaching=Long.toString(getMaxCachingTime());
  if (willExpireFlag == true) {
    info.timeidle=Long.toString(getIdleTime());
    info.timeleft=Long.toString(getTimeLeft());
  }
 else {
    info.timeidle=Long.toString(0);
    info.timeleft=Long.toString(Long.MAX_VALUE / 60);
  }
  if (sessionState == Session.INVALID) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.VALID) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.INACTIVE) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.DESTROYED) {
    info.state=""String_Node_Str"";
  }
  info.properties=(Properties)sessionProperties.clone();
  return info;
}","/** 
 * Transfers the info about the Internal Session to Session Info.
 * @return SessionInfo
 */
public SessionInfo toSessionInfo(){
  SessionInfo info=new SessionInfo();
  info.sid=sessionID.toString();
  if (sessionType == Session.USER_SESSION) {
    info.stype=""String_Node_Str"";
  }
 else   if (sessionType == Session.APPLICATION_SESSION) {
    info.stype=""String_Node_Str"";
  }
  info.cid=clientID;
  info.cdomain=clientDomain;
  info.maxtime=Long.toString(getMaxSessionTime());
  info.maxidle=Long.toString(getMaxIdleTime());
  info.maxcaching=Long.toString(getMaxCachingTime());
  if (willExpireFlag == true) {
    info.timeidle=Long.toString(getIdleTime());
    info.timeleft=Long.toString(getTimeLeft());
  }
 else {
    info.timeidle=Long.toString(0);
    info.timeleft=Long.toString(Long.MAX_VALUE / 60);
  }
  if (isInvalid()) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.VALID) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.INACTIVE) {
    info.state=""String_Node_Str"";
  }
 else   if (sessionState == Session.DESTROYED) {
    info.state=""String_Node_Str"";
  }
  info.properties=(Properties)sessionProperties.clone();
  return info;
}"
79870,"/** 
 * set the cookieMode based on whether the request has cookies or not. This method is called from createSSOToken(request) method in SSOTokenManager.
 * @param cookieMode ,Boolean value whether request has cookies or not.
 */
public void setCookieMode(Boolean cookieMode){
  DEBUG.message(""String_Node_Str"" + cookieMode);
  if (cookieMode != null) {
    this.cookieMode=cookieMode;
  }
}","/** 
 * set the cookieMode based on whether the request has cookies or not. This method is called from createSSOToken(request) method in SSOTokenManager.
 * @param cookieMode ,Boolean value whether request has cookies or not.
 */
public void setCookieMode(Boolean cookieMode){
  debug.message(""String_Node_Str"" + cookieMode);
  if (cookieMode != null) {
    this.cookieMode=cookieMode;
  }
}"
79871,"/** 
 * Encodes the url by adding the cookiename=sid to it. if cookie support is true returns without encoding <p> The cookie Value is written in the URL based on the encodingScheme specified. The Cookie Value could be written as path info separated by either a ""/"" OR  "";"" or as a query string. <p> If the encoding scheme is SLASH then the  cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/servletpath/&lt;cookieName>=&lt;cookieValue>? queryString      </pre> <p> Note that this format works only if the path is a servlet, if a a jsp file is specified then webcontainers return with ""File Not found"" error. To rewrite links which are JSP files with cookie value use the SEMICOLON OR QUERY encoding scheme.      <p> If the encoding scheme is SEMICOLON then the cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/path;&lt;cookieName=cookieValue>?queryString </pre> Note that this is not supported in the servlet specification and some web containers do not support this. <p> If the encoding scheme is QUERY then the cookie value would be written in the URL in the following format: <pre> protocol://server:port/path?&lt;cookieName>=&lt;cookieValue> protocol://server:port/path?queryString&&lt;cookieName>=&lt;cookieValue> </pre> <p> This is the default and OpenSSO always encodes in this format  unless otherwise specified. If the URL passed in has query parameter then entity escaping of ampersand will be done before appending the cookie if the escape is true.  Only the ampersand before appending  cookie parameter will be entity escaped. <p>
 * @param url the url to be encoded
 * @param encodingScheme possible values are QUERY,SLASH,SEMICOLON
 * @param escape entity escaping of ampersand when appending theSSOToken ID to request query string.
 * @param cookieName 
 * @return encoded URL with cookie value (session id) basedon the encoding scheme or the url itself if there is an error.
 */
public String encodeURL(String url,short encodingScheme,boolean escape,String cookieName){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + url);
  }
  String encodedURL=url;
  if (((url != null) && (url.length() > 0)) && !getCookieSupport()) {
    if ((cookieStr != null && cookieStr.length() != 0) && (Session.foundCookieName(cookieStr,cookieName))) {
      encodedURL=SessionEncodeURL.buildCookieString(url,cookieStr,encodingScheme,escape);
    }
 else {
      if (sessionID != null) {
        cookieStr=SessionEncodeURL.createCookieString(cookieName,sessionID.toString());
        encodedURL=SessionEncodeURL.encodeURL(cookieStr,url,encodingScheme,escape);
      }
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + ""String_Node_Str"" + encodedURL);
  }
  return encodedURL;
}","/** 
 * Encodes the url by adding the cookiename=sid to it. if cookie support is true returns without encoding <p> The cookie Value is written in the URL based on the encodingScheme specified. The Cookie Value could be written as path info separated by either a ""/"" OR  "";"" or as a query string. <p> If the encoding scheme is SLASH then the  cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/servletpath/&lt;cookieName>=&lt;cookieValue>? queryString      </pre> <p> Note that this format works only if the path is a servlet, if a a jsp file is specified then webcontainers return with ""File Not found"" error. To rewrite links which are JSP files with cookie value use the SEMICOLON OR QUERY encoding scheme.      <p> If the encoding scheme is SEMICOLON then the cookie value would be written in the URL as extra path info in the following format: <pre> protocol://server:port/path;&lt;cookieName=cookieValue>?queryString </pre> Note that this is not supported in the servlet specification and some web containers do not support this. <p> If the encoding scheme is QUERY then the cookie value would be written in the URL in the following format: <pre> protocol://server:port/path?&lt;cookieName>=&lt;cookieValue> protocol://server:port/path?queryString&&lt;cookieName>=&lt;cookieValue> </pre> <p> This is the default and OpenSSO always encodes in this format  unless otherwise specified. If the URL passed in has query parameter then entity escaping of ampersand will be done before appending the cookie if the escape is true.  Only the ampersand before appending  cookie parameter will be entity escaped. <p>
 * @param url the url to be encoded
 * @param encodingScheme possible values are QUERY,SLASH,SEMICOLON
 * @param escape entity escaping of ampersand when appending theSSOToken ID to request query string.
 * @param cookieName 
 * @return encoded URL with cookie value (session id) basedon the encoding scheme or the url itself if there is an error.
 */
public String encodeURL(String url,short encodingScheme,boolean escape,String cookieName){
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + url);
  }
  String encodedURL=url;
  if (((url != null) && (url.length() > 0)) && !getCookieSupport()) {
    if ((cookieStr != null && cookieStr.length() != 0) && (Session.foundCookieName(cookieStr,cookieName))) {
      encodedURL=SessionEncodeURL.buildCookieString(url,cookieStr,encodingScheme,escape);
    }
 else {
      if (sessionID != null) {
        cookieStr=SessionEncodeURL.createCookieString(cookieName,sessionID.toString());
        encodedURL=SessionEncodeURL.encodeURL(cookieStr,url,encodingScheme,escape);
      }
    }
  }
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + ""String_Node_Str"" + encodedURL);
  }
  return encodedURL;
}"
79872,"/** 
 * Sets the key-value pair in the InternalSession property table if it is not protected. If it is protected client should have permission to set it. This method is to be used in conjuction with SessionRequestHandler/SessionService invocation path If the property is protected, an attempt to remotely set a protected property is logged and the method throws an Exception. Otherwise invocation is delegated to internalPutProperty() Note that package default access is being used
 * @param clientToken Token of the client setting external property.
 * @param key Property key
 * @param value Property value for the key
 * @exception SessionException is thrown if the key is protected property.
 */
void putExternalProperty(SSOToken clientToken,String key,String value) throws SessionException {
  try {
    SessionUtils.checkPermissionToSetProperty(clientToken,key,value);
  }
 catch (  SessionException se) {
    SessionService.getSessionService().logIt(this,""String_Node_Str"");
    throw se;
  }
  internalPutProperty(key,value);
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""String_Node_Str"" + ""String_Node_Str"");
  }
}","/** 
 * Sets the key-value pair in the InternalSession property table if it is not protected. If it is protected client should have permission to set it. This method is to be used in conjuction with SessionRequestHandler/SessionService invocation path If the property is protected, an attempt to remotely set a protected property is logged and the method throws an Exception. Otherwise invocation is delegated to internalPutProperty() Note that package default access is being used
 * @param clientToken Token of the client setting external property.
 * @param key Property key
 * @param value Property value for the key
 * @exception SessionException is thrown if the key is protected property.
 */
void putExternalProperty(SSOToken clientToken,String key,String value) throws SessionException {
  try {
    SessionUtils.checkPermissionToSetProperty(clientToken,key,value);
  }
 catch (  SessionException se) {
    SessionService.getSessionService().logIt(this,""String_Node_Str"");
    throw se;
  }
  internalPutProperty(key,value);
  if (debug.messageEnabled()) {
    debug.message(""String_Node_Str"" + ""String_Node_Str"");
  }
}"
79873,"/** 
 * Changes the state of the session to ACTIVE after creation.
 * @param userDN 
 * @return <code> true </code> if the session is successfully activated after creation , <code>false</code> otherwise
 */
public boolean activate(String userDN){
  if (userDN == null) {
    return false;
  }
  if ((SessionService.getActiveSessions() >= SessionService.maxSessions) && (!userDN.equalsIgnoreCase(superUserDN))) {
    SessionService.getSessionService().logSystemMessage(LOG_MSG_SESSION_MAX_LIMIT_REACHED,java.util.logging.Level.INFO);
    return false;
  }
  if ((SessionService.isSessionConstraintEnabled()) && !shouldIgnoreSessionQuotaChecking(userDN)) {
    if (SessionConstraint.checkQuotaAndPerformAction(this)) {
      if (DEBUG.messageEnabled()) {
        DEBUG.message(""String_Node_Str"" + ""String_Node_Str"");
      }
      SessionService.getSessionService().logEvent(this,SessionEvent.QUOTA_EXHAUSTED);
      return false;
    }
  }
  setLatestAccessTime();
  setState(Session.VALID);
  if (reschedulePossible) {
    reschedule();
  }
  SessionService.getSessionService().logEvent(this,SessionEvent.SESSION_CREATION);
  SessionService.getSessionService().sendEvent(this,SessionEvent.SESSION_CREATION);
  if (!isAppSession() || SessionService.returnAppSession) {
    SessionService.incrementActiveSessions();
  }
  return true;
}","/** 
 * Changes the state of the session to ACTIVE after creation.
 * @param userDN 
 * @return <code> true </code> if the session is successfully activated after creation , <code>false</code> otherwise
 */
public boolean activate(String userDN){
  if (userDN == null) {
    return false;
  }
  if ((SessionService.getActiveSessions() >= SessionService.maxSessions) && (!userDN.equalsIgnoreCase(superUserDN))) {
    SessionService.getSessionService().logSystemMessage(LOG_MSG_SESSION_MAX_LIMIT_REACHED,java.util.logging.Level.INFO);
    return false;
  }
  if ((SessionService.isSessionConstraintEnabled()) && !shouldIgnoreSessionQuotaChecking(userDN)) {
    if (SessionConstraint.checkQuotaAndPerformAction(this)) {
      if (debug.messageEnabled()) {
        debug.message(""String_Node_Str"" + ""String_Node_Str"");
      }
      SessionService.getSessionService().logEvent(this,SessionEvent.QUOTA_EXHAUSTED);
      return false;
    }
  }
  setLatestAccessTime();
  setState(Session.VALID);
  if (reschedulePossible) {
    reschedule();
  }
  SessionService.getSessionService().logEvent(this,SessionEvent.SESSION_CREATION);
  SessionService.getSessionService().sendEvent(this,SessionEvent.SESSION_CREATION);
  if (!isAppSession() || SessionService.returnAppSession) {
    SessionService.incrementActiveSessions();
  }
  return true;
}"
79874,"/** 
 * Default constructor required for deserialisation.
 */
public InternalSession(){
  this(null,SessionService.getSessionService(),SessionService.sessionDebug);
}","/** 
 * Default constructor required for deserialisation.
 */
public InternalSession(){
}"
79875,"/** 
 * Sets the key-value pair in the Internal Session property table.
 * @param key Property key
 * @param value Property value for the key
 */
protected void internalPutProperty(String key,String value){
  if (key.equals(HOST_NAME) || key.equals(HOST)) {
    if (value == null || value.length() == 0) {
      return;
    }
    if (isEnableHostLookUp) {
      try {
        InetAddress address=java.net.InetAddress.getByName(value);
        String hostName=address.getHostName();
        sessionProperties.put(HOST_NAME,hostName);
        sessionProperties.put(HOST,value);
      }
 catch (      UnknownHostException uhe) {
        DEBUG.error(""String_Node_Str"" + ""String_Node_Str"" + value + ""String_Node_Str"",uhe);
      }
    }
 else {
      sessionProperties.put(HOST_NAME,value);
      sessionProperties.put(HOST,value);
    }
  }
 else   if (key.equals(AM_MAX_IDLE_TIME)) {
    setMaxIdleTime(Long.parseLong(value));
  }
 else {
    sessionProperties.put(key,value);
  }
  if (sessionState == Session.VALID && SessionService.isSendPropertyNotification(key)) {
    SessionService.getSessionService().sendEvent(this,SessionEvent.PROPERTY_CHANGED);
    SessionService.getSessionService().logEvent(this,SessionEvent.PROPERTY_CHANGED);
  }
  updateForFailover();
}","/** 
 * Sets the key-value pair in the Internal Session property table.
 * @param key Property key
 * @param value Property value for the key
 */
protected void internalPutProperty(String key,String value){
  if (key.equals(HOST_NAME) || key.equals(HOST)) {
    if (value == null || value.length() == 0) {
      return;
    }
    if (isEnableHostLookUp) {
      try {
        InetAddress address=java.net.InetAddress.getByName(value);
        String hostName=address.getHostName();
        sessionProperties.put(HOST_NAME,hostName);
        sessionProperties.put(HOST,value);
      }
 catch (      UnknownHostException uhe) {
        debug.error(""String_Node_Str"" + ""String_Node_Str"" + value + ""String_Node_Str"",uhe);
      }
    }
 else {
      sessionProperties.put(HOST_NAME,value);
      sessionProperties.put(HOST,value);
    }
  }
 else   if (key.equals(AM_MAX_IDLE_TIME)) {
    setMaxIdleTime(Long.parseLong(value));
  }
 else {
    sessionProperties.put(key,value);
  }
  if (sessionState == Session.VALID && SessionService.isSendPropertyNotification(key)) {
    SessionService.getSessionService().sendEvent(this,SessionEvent.PROPERTY_CHANGED);
    SessionService.getSessionService().logEvent(this,SessionEvent.PROPERTY_CHANGED);
  }
  updateForFailover();
}"
79876,"/** 
 * Checks whether the sesion should be destroyed or not.
 */
boolean shouldDestroy(){
  if (willExpireFlag == false) {
    return false;
  }
  if (!isTimedOut()) {
    if (sessionState == Session.INVALID) {
      if (checkInvalidSessionDefaultIdleTime()) {
        setState(Session.DESTROYED);
        ss.sendEvent(this,SessionEvent.DESTROY);
        return true;
      }
 else {
        return false;
      }
    }
    if (getTimeLeft() == 0) {
      changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
      return false;
    }
    if (getIdleTime() >= maxIdleTime * 60 && sessionState != Session.INACTIVE) {
      changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
      return false;
    }
    return false;
  }
 else {
    if (getTimeLeftBeforePurge() <= 0) {
      SessionService.getSessionService().logEvent(this,SessionEvent.DESTROY);
      setState(Session.DESTROYED);
      SessionService.getSessionService().sendEvent(this,SessionEvent.DESTROY);
      return true;
    }
 else {
      return false;
    }
  }
}","/** 
 * Checks whether the sesion should be destroyed or not.
 */
boolean shouldDestroy(){
  if (willExpireFlag == false) {
    return false;
  }
  if (!isTimedOut()) {
    if (isInvalid()) {
      if (checkInvalidSessionDefaultIdleTime()) {
        setState(Session.DESTROYED);
        ss.sendEvent(this,SessionEvent.DESTROY);
        return true;
      }
 else {
        return false;
      }
    }
    if (getTimeLeft() == 0) {
      changeStateAndNotify(SessionEvent.MAX_TIMEOUT);
      return false;
    }
    if (getIdleTime() >= maxIdleTime * 60 && sessionState != Session.INACTIVE) {
      changeStateAndNotify(SessionEvent.IDLE_TIMEOUT);
      return false;
    }
    return false;
  }
 else {
    if (getTimeLeftBeforePurge() <= 0) {
      SessionService.getSessionService().logEvent(this,SessionEvent.DESTROY);
      setState(Session.DESTROYED);
      SessionService.getSessionService().sendEvent(this,SessionEvent.DESTROY);
      return true;
    }
 else {
      return false;
    }
  }
}"
79877,"/** 
 * Static initialisation section will be called the first time the SessionService is initailised. Note: This function depends on the singleton pattern that the SessionService follows.
 */
private static void initialiseStatic(){
  sessionDebug=Debug.getInstance(""String_Node_Str"");
  stats=Stats.getInstance(""String_Node_Str"");
  int poolSize=DEFAULT_POOL_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  String size=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_SIZE);
  if (size != null) {
    try {
      poolSize=Integer.parseInt(size);
    }
 catch (    NumberFormatException e) {
      sessionDebug.error(""String_Node_Str"" + size + ""String_Node_Str""+ DEFAULT_POOL_SIZE);
    }
  }
  String thres=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_THRESHOLD);
  if (thres != null) {
    try {
      threshold=Integer.parseInt(thres);
    }
 catch (    Exception e) {
      sessionDebug.error(""String_Node_Str"" + thres + ""String_Node_Str""+ DEFAULT_THRESHOLD);
    }
  }
  ShutdownManager shutdownMan=ShutdownManager.getInstance();
  if (shutdownMan.acquireValidLock()) {
    try {
      threadPool=new ThreadPool(""String_Node_Str"",poolSize,threshold,true,sessionDebug);
      shutdownMan.addShutdownListener(new ShutdownListener(){
        public void shutdown(){
          threadPool.shutdown();
        }
      }
);
    }
  finally {
      shutdownMan.releaseLockAndNotify();
    }
  }
  if (threadPool != null) {
    try {
      maxSessions=Integer.parseInt(SystemProperties.get(Constants.AM_SESSION_MAX_SESSIONS));
    }
 catch (    Exception ex) {
      maxSessions=10000;
    }
  }
  String status=SystemProperties.get(Constants.AM_LOGSTATUS);
  if (status == null) {
    status=""String_Node_Str"";
  }
  logStatus=status.equalsIgnoreCase(""String_Node_Str"");
}","/** 
 * Static initialisation section will be called the first time the SessionService is initailised. Note: This function depends on the singleton pattern that the SessionService follows.
 */
private static void initialiseStatic(){
  Key<Debug> key=Key.get(Debug.class,Names.named(SessionConstants.SESSION_DEBUG));
  sessionDebug=InjectorHolder.getInstance(key);
  stats=Stats.getInstance(""String_Node_Str"");
  int poolSize=DEFAULT_POOL_SIZE;
  int threshold=DEFAULT_THRESHOLD;
  String size=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_SIZE);
  if (size != null) {
    try {
      poolSize=Integer.parseInt(size);
    }
 catch (    NumberFormatException e) {
      sessionDebug.error(""String_Node_Str"" + size + ""String_Node_Str""+ DEFAULT_POOL_SIZE);
    }
  }
  String thres=SystemProperties.get(Constants.NOTIFICATION_THREADPOOL_THRESHOLD);
  if (thres != null) {
    try {
      threshold=Integer.parseInt(thres);
    }
 catch (    Exception e) {
      sessionDebug.error(""String_Node_Str"" + thres + ""String_Node_Str""+ DEFAULT_THRESHOLD);
    }
  }
  ShutdownManager shutdownMan=ShutdownManager.getInstance();
  if (shutdownMan.acquireValidLock()) {
    try {
      threadPool=new ThreadPool(""String_Node_Str"",poolSize,threshold,true,sessionDebug);
      shutdownMan.addShutdownListener(new ShutdownListener(){
        public void shutdown(){
          threadPool.shutdown();
        }
      }
);
    }
  finally {
      shutdownMan.releaseLockAndNotify();
    }
  }
  if (threadPool != null) {
    try {
      maxSessions=Integer.parseInt(SystemProperties.get(Constants.AM_SESSION_MAX_SESSIONS));
    }
 catch (    Exception ex) {
      maxSessions=10000;
    }
  }
  String status=SystemProperties.get(Constants.AM_LOGSTATUS);
  if (status == null) {
    status=""String_Node_Str"";
  }
  logStatus=status.equalsIgnoreCase(""String_Node_Str"");
}"
79878,"/** 
 * Removes the Internal Session from the Internal Session table.
 * @param sid Session ID
 */
InternalSession removeInternalSession(SessionID sid){
  boolean isSessionStored=true;
  if (sid == null)   return null;
  InternalSession session=(InternalSession)sessionTable.remove(sid);
  if (session != null) {
    remoteSessionSet.remove(sid);
    session.cancel();
    removeSessionHandle(session);
    removeRestrictedTokens(session);
    isSessionStored=session.getIsISstored();
    if (session.getState() == Session.VALID) {
      decrementActiveSessions();
      SessionCount.decrementSessionCount(session);
    }
  }
  if (isSessionFailoverEnabled && isSessionStored) {
    if (getUseInternalRequestRouting()) {
      try {
        String tokenId=tokenIdFactory.toSessionTokenId(session);
        getRepository().delete(tokenId);
      }
 catch (      Exception e) {
        sessionDebug.error(""String_Node_Str"",e);
      }
    }
 else {
      invalidateHttpSession(sid);
    }
  }
  return session;
}","/** 
 * Removes the Internal Session from the Internal Session table.
 * @param sid Session ID
 */
InternalSession removeInternalSession(SessionID sid){
  boolean isSessionStored=false;
  if (sid == null)   return null;
  InternalSession session=(InternalSession)sessionTable.remove(sid);
  if (session != null) {
    remoteSessionSet.remove(sid);
    session.cancel();
    removeSessionHandle(session);
    removeRestrictedTokens(session);
    isSessionStored=session.getIsISstored();
    if (session.getState() == Session.VALID) {
      decrementActiveSessions();
      SessionCount.decrementSessionCount(session);
    }
  }
  if (isSessionFailoverEnabled && isSessionStored) {
    if (getUseInternalRequestRouting()) {
      try {
        String tokenId=tokenIdFactory.toSessionTokenId(session);
        getRepository().delete(tokenId);
      }
 catch (      Exception e) {
        sessionDebug.error(""String_Node_Str"",e);
      }
    }
 else {
      invalidateHttpSession(sid);
    }
  }
  return session;
}"
79879,"/** 
 * If InternalSession is not present, we attempt to recover its state from associated HttpSession. We have to set the session tracking cookie to HttpID which is present in the SessionID object. This will work in the fail over cases. We first get the HttpSession by invoking the GetHttpSession Servlet on the SAME server instance this code is invoked. This should trigger the Web container to perform recovery of the associated Http session <p/> We also pass the SessionID to the servlet to double check the match between the session id and Http session <p/> This is the ""client side"" of the remote invocation. The servlet will call retrieveSession() to complete the work
 * @param sid Session ID
 */
InternalSession recoverSession(SessionID sid){
  if (!isSessionFailoverEnabled) {
    return null;
  }
  if (getUseInternalRequestRouting()) {
    InternalSession sess=null;
    try {
      String tokenId=tokenIdFactory.toSessionTokenId(sid);
      Token token=getRepository().read(tokenId);
      if (token == null) {
        return sess;
      }
      sess=tokenAdapter.fromToken(token);
      updateSessionMaps(sess);
    }
 catch (    CoreTokenException e) {
      sessionDebug.error(""String_Node_Str"",e);
    }
    return sess;
  }
 else {
    if (sessionDebug.messageEnabled()) {
      sessionDebug.message(""String_Node_Str"" + sid);
    }
    DataInputStream in=null;
    InternalSession sess=null;
    try {
      String query=""String_Node_Str"" + GetHttpSession.OP + ""String_Node_Str""+ GetHttpSession.RECOVER_OP;
      URL url=new URL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPort,deploymentURI + ""String_Node_Str"" + query);
      HttpURLConnection conn=invokeRemote(url,sid,null);
      in=new DataInputStream(conn.getInputStream());
      sess=(InternalSession)sessionTable.get(sid);
      if (sess == null) {
        sess=resolveRestrictedToken(sid,false);
      }
    }
 catch (    Exception ex) {
      sessionDebug.error(""String_Node_Str"",ex);
    }
 finally {
      closeStream(in);
    }
    return sess;
  }
}","/** 
 * If InternalSession is not present, we attempt to recover its state from associated HttpSession. We have to set the session tracking cookie to HttpID which is present in the SessionID object. This will work in the fail over cases. We first get the HttpSession by invoking the GetHttpSession Servlet on the SAME server instance this code is invoked. This should trigger the Web container to perform recovery of the associated Http session <p/> We also pass the SessionID to the servlet to double check the match between the session id and Http session <p/> This is the ""client side"" of the remote invocation. The servlet will call retrieveSession() to complete the work
 * @param sid Session ID
 */
InternalSession recoverSession(SessionID sid){
  if (!isSessionFailoverEnabled) {
    return null;
  }
  if (getUseInternalRequestRouting()) {
    InternalSession sess=null;
    try {
      String tokenId=tokenIdFactory.toSessionTokenId(sid);
      Token token=getRepository().read(tokenId);
      if (token == null) {
        return sess;
      }
      sess=tokenAdapter.fromToken(token);
      sess.setDebug(sessionDebug);
      sess.setSessionService(this);
      sess.scheduleExpiry();
      updateSessionMaps(sess);
    }
 catch (    CoreTokenException e) {
      sessionDebug.error(""String_Node_Str"",e);
    }
    return sess;
  }
 else {
    if (sessionDebug.messageEnabled()) {
      sessionDebug.message(""String_Node_Str"" + sid);
    }
    DataInputStream in=null;
    InternalSession sess=null;
    try {
      String query=""String_Node_Str"" + GetHttpSession.OP + ""String_Node_Str""+ GetHttpSession.RECOVER_OP;
      URL url=new URL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPort,deploymentURI + ""String_Node_Str"" + query);
      HttpURLConnection conn=invokeRemote(url,sid,null);
      in=new DataInputStream(conn.getInputStream());
      sess=(InternalSession)sessionTable.get(sid);
      if (sess == null) {
        sess=resolveRestrictedToken(sid,false);
      }
    }
 catch (    Exception ex) {
      sessionDebug.error(""String_Node_Str"",ex);
    }
 finally {
      closeStream(in);
    }
    return sess;
  }
}"
79880,"/** 
 * Private Singleton Session Service.
 */
private SessionService(){
  KeyConversion keyConversion=new KeyConversion();
  tokenIdFactory=InjectorHolder.getInstance(TokenIdFactory.class);
  coreTokenConfig=InjectorHolder.getInstance(CoreTokenConfig.class);
  tokenAdapter=InjectorHolder.getInstance(SessionAdapter.class);
  try {
    dsameAdminDN=(String)AccessController.doPrivileged(new AdminDNAction());
    dsameAdminPassword=(String)AccessController.doPrivileged(new AdminPasswordAction());
    sessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    sessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    sessionServerPort=SystemProperties.get(Constants.AM_SERVER_PORT);
    sessionServerURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    sessionServerID=WebtopNaming.getServerID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    isSiteEnabled=WebtopNaming.isSiteEnabled(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    if (isSiteEnabled) {
      sessionServerID=WebtopNaming.getSiteID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      String secondaryIDs=WebtopNaming.getSecondarySites(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      secondaryServerIDs=new HashSet();
      if (secondaryIDs != null) {
        if (secondaryIDs.contains(""String_Node_Str"")) {
          StringTokenizer st=new StringTokenizer(secondaryIDs,""String_Node_Str"");
          while (st.hasMoreTokens()) {
            secondaryServerIDs.add(st.nextToken());
          }
        }
 else {
          secondaryServerIDs.add(secondaryIDs);
        }
      }
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
      sessionServerProtocol=sessionServiceID.getProtocol();
      sessionServer=sessionServiceID.getHost();
      sessionServerPort=Integer.toString(sessionServiceID.getPort());
    }
 else {
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
    }
    try {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    NoSuchProviderException e) {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"");
    }
    sessionTable=new Hashtable();
    remoteSessionSet=Collections.synchronizedSet(new HashSet());
    if (stats.isEnabled()) {
      maxSessionStats=new SessionMaxStats(sessionTable);
      stats.addStatsListener(maxSessionStats);
    }
    thisSessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    thisSessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    thisSessionServerPortAsString=SystemProperties.get(Constants.AM_SERVER_PORT);
    thisSessionURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    if ((thisSessionServerProtocol == null) || (thisSessionServerPortAsString == null) || (thisSessionServer == null)|| (thisSessionURI == null)) {
      throw new SessionException(SessionBundle.rbName,""String_Node_Str"",null);
    }
    thisSessionServerPort=Integer.parseInt(thisSessionServerPortAsString);
    thisSessionServerID=WebtopNaming.getServerID(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    thisSessionServerURL=thisSessionServerProtocol + ""String_Node_Str"" + thisSessionServer+ ""String_Node_Str""+ thisSessionServerPortAsString+ thisSessionURI;
    thisSessionServiceURL=Session.getSessionServiceURL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    postInit();
  }
 catch (  Exception ex) {
    sessionDebug.error(""String_Node_Str"",ex);
  }
}","/** 
 * Private Singleton Session Service.
 */
private SessionService(){
  tokenIdFactory=InjectorHolder.getInstance(TokenIdFactory.class);
  coreTokenConfig=InjectorHolder.getInstance(CoreTokenConfig.class);
  tokenAdapter=InjectorHolder.getInstance(SessionAdapter.class);
  try {
    dsameAdminDN=(String)AccessController.doPrivileged(new AdminDNAction());
    dsameAdminPassword=(String)AccessController.doPrivileged(new AdminPasswordAction());
    sessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    sessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    sessionServerPort=SystemProperties.get(Constants.AM_SERVER_PORT);
    sessionServerURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    sessionServerID=WebtopNaming.getServerID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    isSiteEnabled=WebtopNaming.isSiteEnabled(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
    if (isSiteEnabled) {
      sessionServerID=WebtopNaming.getSiteID(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      String secondaryIDs=WebtopNaming.getSecondarySites(sessionServerProtocol,sessionServer,sessionServerPort,sessionServerURI);
      secondaryServerIDs=new HashSet();
      if (secondaryIDs != null) {
        if (secondaryIDs.contains(""String_Node_Str"")) {
          StringTokenizer st=new StringTokenizer(secondaryIDs,""String_Node_Str"");
          while (st.hasMoreTokens()) {
            secondaryServerIDs.add(st.nextToken());
          }
        }
 else {
          secondaryServerIDs.add(secondaryIDs);
        }
      }
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
      sessionServerProtocol=sessionServiceID.getProtocol();
      sessionServer=sessionServiceID.getHost();
      sessionServerPort=Integer.toString(sessionServiceID.getPort());
    }
 else {
      sessionServiceID=new URL(WebtopNaming.getServerFromID(sessionServerID));
    }
    try {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    NoSuchProviderException e) {
      secureRandom=SecureRandom.getInstance(""String_Node_Str"");
    }
    sessionTable=new Hashtable();
    remoteSessionSet=Collections.synchronizedSet(new HashSet());
    if (stats.isEnabled()) {
      maxSessionStats=new SessionMaxStats(sessionTable);
      stats.addStatsListener(maxSessionStats);
    }
    thisSessionServerProtocol=SystemProperties.get(Constants.AM_SERVER_PROTOCOL);
    thisSessionServer=SystemProperties.get(Constants.AM_SERVER_HOST);
    thisSessionServerPortAsString=SystemProperties.get(Constants.AM_SERVER_PORT);
    thisSessionURI=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);
    if ((thisSessionServerProtocol == null) || (thisSessionServerPortAsString == null) || (thisSessionServer == null)|| (thisSessionURI == null)) {
      throw new SessionException(SessionBundle.rbName,""String_Node_Str"",null);
    }
    thisSessionServerPort=Integer.parseInt(thisSessionServerPortAsString);
    thisSessionServerID=WebtopNaming.getServerID(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    thisSessionServerURL=thisSessionServerProtocol + ""String_Node_Str"" + thisSessionServer+ ""String_Node_Str""+ thisSessionServerPortAsString+ thisSessionURI;
    thisSessionServiceURL=Session.getSessionServiceURL(thisSessionServerProtocol,thisSessionServer,thisSessionServerPortAsString,thisSessionURI);
    postInit();
  }
 catch (  Exception ex) {
    sessionDebug.error(""String_Node_Str"",ex);
  }
}"
79881,"@Override protected void configure(){
  bind(new AdminTokenType()).toProvider(new AdminTokenProvider()).in(Singleton.class);
  bind(ServiceManagementDAO.class).to(ServiceManagementDAOWrapper.class).in(Singleton.class);
  bind(DNWrapper.class).in(Singleton.class);
  bind(IndexChangeObservable.class).in(Singleton.class);
  bind(ShutdownManagerWrapper.class).in(Singleton.class);
  bind(SearchResultHandler.class).to(IndexChangeHandler.class).in(Singleton.class);
  bind(IndexChangeManager.class).to(IndexChangeManagerImpl.class).in(Singleton.class);
  bind(IndexChangeMonitor.class).to(IndexChangeMonitorImpl.class).in(Singleton.class);
  bind(IndexTreeService.class).to(IndexTreeServiceImpl.class).in(Singleton.class);
  bind(new TypeLiteral<TokenAdapter<JsonValue>>(){
  }
).to(OAuthAdapter.class);
  bind(DataLayerConnectionFactory.class).in(Singleton.class);
  bind(DSConfigMgr.class).toProvider(new Provider<DSConfigMgr>(){
    public DSConfigMgr get(){
      try {
        return DSConfigMgr.getDSConfigMgr();
      }
 catch (      LDAPServiceException e) {
        throw new IllegalStateException(e);
      }
    }
  }
).in(Singleton.class);
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_DEBUG));
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_REAPER_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_REAPER_DEBUG));
  bind(CoreTokenConstants.class).in(Singleton.class);
  bind(CTSPersistentStore.class).in(Singleton.class);
  bind(CoreTokenConfig.class).in(Singleton.class);
  bind(ConnectionFactory.class).to(CTSConnectionFactory.class).in(Singleton.class);
  bind(LDAPConfig.class).toProvider(new Provider<LDAPConfig>(){
    public LDAPConfig get(){
      return new LDAPConfig(SMSEntry.getRootSuffix());
    }
  }
).in(Singleton.class);
  bind(ExternalTokenConfig.class).in(Singleton.class);
  bind(ConfigurationObserver.class).toProvider(new Provider<ConfigurationObserver>(){
    public ConfigurationObserver get(){
      return ConfigurationObserver.getInstance();
    }
  }
).in(Singleton.class);
  bind(ScheduledExecutorService.class).annotatedWith(Names.named(CTSReaper.CTS_SCHEDULED_SERVICE)).toInstance(Executors.newScheduledThreadPool(1));
  bind(SessionService.class).toProvider(new Provider<SessionService>(){
    public SessionService get(){
      return SessionService.getSessionService();
    }
  }
).in(Singleton.class);
}","@Override protected void configure(){
  bind(new AdminTokenType()).toProvider(new AdminTokenProvider()).in(Singleton.class);
  bind(ServiceManagementDAO.class).to(ServiceManagementDAOWrapper.class).in(Singleton.class);
  bind(DNWrapper.class).in(Singleton.class);
  bind(IndexChangeObservable.class).in(Singleton.class);
  bind(ShutdownManagerWrapper.class).in(Singleton.class);
  bind(SearchResultHandler.class).to(IndexChangeHandler.class).in(Singleton.class);
  bind(IndexChangeManager.class).to(IndexChangeManagerImpl.class).in(Singleton.class);
  bind(IndexChangeMonitor.class).to(IndexChangeMonitorImpl.class).in(Singleton.class);
  bind(IndexTreeService.class).to(IndexTreeServiceImpl.class).in(Singleton.class);
  bind(new TypeLiteral<TokenAdapter<JsonValue>>(){
  }
).to(OAuthAdapter.class);
  bind(DataLayerConnectionFactory.class).in(Singleton.class);
  bind(DSConfigMgr.class).toProvider(new Provider<DSConfigMgr>(){
    public DSConfigMgr get(){
      try {
        return DSConfigMgr.getDSConfigMgr();
      }
 catch (      LDAPServiceException e) {
        throw new IllegalStateException(e);
      }
    }
  }
).in(Singleton.class);
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_DEBUG));
  bind(Debug.class).annotatedWith(Names.named(CoreTokenConstants.CTS_REAPER_DEBUG)).toInstance(Debug.getInstance(CoreTokenConstants.CTS_REAPER_DEBUG));
  bind(CoreTokenConstants.class).in(Singleton.class);
  bind(CTSPersistentStore.class).in(Singleton.class);
  bind(CoreTokenConfig.class).in(Singleton.class);
  bind(ConnectionFactory.class).to(CTSConnectionFactory.class).in(Singleton.class);
  bind(LDAPConfig.class).toProvider(new Provider<LDAPConfig>(){
    public LDAPConfig get(){
      return new LDAPConfig(SMSEntry.getRootSuffix());
    }
  }
).in(Singleton.class);
  bind(ExternalTokenConfig.class).in(Singleton.class);
  bind(ConfigurationObserver.class).toProvider(new Provider<ConfigurationObserver>(){
    public ConfigurationObserver get(){
      return ConfigurationObserver.getInstance();
    }
  }
).in(Singleton.class);
  bind(ScheduledExecutorService.class).annotatedWith(Names.named(CTSReaper.CTS_SCHEDULED_SERVICE)).toInstance(Executors.newScheduledThreadPool(1));
  bind(SessionService.class).toProvider(new Provider<SessionService>(){
    public SessionService get(){
      return SessionService.getSessionService();
    }
  }
).in(Singleton.class);
  bind(Debug.class).annotatedWith(Names.named(SessionConstants.SESSION_DEBUG)).toInstance(Debug.getInstance(SessionConstants.SESSION_DEBUG));
}"
79882,"/** 
 * Creates a default instance with dependencies defined.
 * @param tokenIdFactory Non null.
 * @param config Non null.
 * @param serialisation Non null.
 * @param blobUtils
 */
@Inject public SessionAdapter(TokenIdFactory tokenIdFactory,CoreTokenConfig config,JSONSerialisation serialisation,LDAPDataConversion dataConversion,TokenBlobUtils blobUtils){
  this.tokenIdFactory=tokenIdFactory;
  this.config=config;
  this.serialisation=serialisation;
  this.dataConversion=dataConversion;
  this.blobUtils=blobUtils;
}","/** 
 * Creates a default instance with dependencies defined.
 * @param tokenIdFactory Non null.
 * @param config Non null.
 * @param serialisation Non null.
 * @param blobUtils A collection of Binary Object utilities.
 */
@Inject public SessionAdapter(TokenIdFactory tokenIdFactory,CoreTokenConfig config,JSONSerialisation serialisation,LDAPDataConversion dataConversion,TokenBlobUtils blobUtils){
  this.tokenIdFactory=tokenIdFactory;
  this.config=config;
  this.serialisation=serialisation;
  this.dataConversion=dataConversion;
  this.blobUtils=blobUtils;
}"
79883,"@Post(""String_Node_Str"") public Representation represent(Representation entity){
  Representation rep=null;
  client=getAuthenticatedClient();
  if (client.getClient().getClientType().equals(ClientApplication.ClientType.PUBLIC)) {
    OAuth2Utils.DEBUG.warning(""String_Node_Str"");
    throw OAuthProblemException.OAuthError.INVALID_CLIENT.handle(getRequest(),""String_Node_Str"");
  }
  String scope_before=OAuth2Utils.getRequestParameter(getRequest(),OAuth2Constants.Params.SCOPE,String.class);
  Set<String> checkedScope=executeAccessTokenScopePlugin(scope_before);
  CoreToken token=createAccessToken(checkedScope);
  Map<String,Object> response=token.convertToMap();
  Map<String,String> data=new HashMap<String,String>();
  response.putAll(executeExtraDataScopePlugin(data,token));
  if (checkedScope != null && !checkedScope.isEmpty()) {
    response.put(OAuth2Constants.Params.SCOPE,OAuth2Utils.join(checkedScope,OAuth2Utils.getScopeDelimiter(getContext())));
  }
  return new JacksonRepresentation<Map>(response);
}","@Post(""String_Node_Str"") public Representation represent(Representation entity){
  Representation rep=null;
  client=getAuthenticatedClient();
  if (client.getClient().getClientType().equals(ClientApplication.ClientType.PUBLIC)) {
    OAuth2Utils.DEBUG.warning(""String_Node_Str"");
    throw OAuthProblemException.OAuthError.UNAUTHORIZED_CLIENT.handle(getRequest(),""String_Node_Str"");
  }
  String scope_before=OAuth2Utils.getRequestParameter(getRequest(),OAuth2Constants.Params.SCOPE,String.class);
  Set<String> checkedScope=executeAccessTokenScopePlugin(scope_before);
  CoreToken token=createAccessToken(checkedScope);
  Map<String,Object> response=token.convertToMap();
  Map<String,String> data=new HashMap<String,String>();
  response.putAll(executeExtraDataScopePlugin(data,token));
  if (checkedScope != null && !checkedScope.isEmpty()) {
    response.put(OAuth2Constants.Params.SCOPE,OAuth2Utils.join(checkedScope,OAuth2Utils.getScopeDelimiter(getContext())));
  }
  return new JacksonRepresentation<Map>(response);
}"
79884,"private String getPasswordFromHeader(ServerContext context){
  return RestUtils.getCookieFromServerContext(context);
}","private String getPasswordFromHeader(ServerContext context){
  List<String> headerList=null;
  String oldUserPasswordHeaderName=""String_Node_Str"";
  HttpContext header=null;
  try {
    header=context.asContext(HttpContext.class);
    if (header == null) {
      RestDispatcher.debug.error(""String_Node_Str"" + ""String_Node_Str"");
      return null;
    }
    headerList=header.getHeaders().get(oldUserPasswordHeaderName.toLowerCase());
    if (headerList != null && !headerList.isEmpty()) {
      for (      String s : headerList) {
        return (s != null && !s.isEmpty()) ? s : null;
      }
    }
  }
 catch (  Exception e) {
    RestDispatcher.debug.error(""String_Node_Str"" + ""String_Node_Str"" + e);
  }
  return null;
}"
79885,"/** 
 * {@inheritDoc}
 */
@Override public void updateInstance(final ServerContext context,final String resourceId,final UpdateRequest request,final ResultHandler<Resource> handler){
  Token admin=new Token();
  admin.setId(getCookieFromServerContext(context));
  final JsonValue jVal=request.getNewContent();
  final String rev=request.getRevision();
  IdentityDetails dtls, newDtls;
  IdentityServicesImpl idsvc=new IdentityServicesImpl();
  ;
  Resource resource;
  try {
    dtls=idsvc.read(resourceId,idSvcsAttrList,admin);
    newDtls=jsonValueToIdentityDetails(jVal);
    newDtls.setName(resourceId);
    String userpass=jVal.get(""String_Node_Str"").asString();
    if (userpass != null && !userpass.isEmpty()) {
      if (checkValidPassword(resourceId,userpass.toCharArray(),realm) || isAdmin(context)) {
      }
 else {
        String strPass=getPasswordFromHeader(context);
        if (strPass != null && !strPass.isEmpty() && checkValidPassword(resourceId,strPass.toCharArray(),realm)) {
        }
 else {
          throw new ForbiddenException(""String_Node_Str"",null);
        }
      }
    }
    UpdateResponse message=idsvc.update(newDtls,admin);
    IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
    resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
    handler.handleResult(resource);
  }
 catch (  final ObjectNotFound onf) {
    RestDispatcher.debug.error(""String_Node_Str"" + onf);
    handler.handleError(new NotFoundException(""String_Node_Str"" + resourceId + ""String_Node_Str"",onf));
  }
catch (  final NeedMoreCredentials needMoreCredentials) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ needMoreCredentials);
    handler.handleError(new ForbiddenException(""String_Node_Str"",needMoreCredentials));
  }
catch (  final TokenExpired tokenExpired) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
    handler.handleError(new PermanentException(401,""String_Node_Str"",null));
  }
catch (  final AccessDenied accessDenied) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ accessDenied);
    handler.handleError(new ForbiddenException(accessDenied.getMessage(),accessDenied));
  }
catch (  final GeneralFailure generalFailure) {
    RestDispatcher.debug.error(""String_Node_Str"" + generalFailure);
    handler.handleError(new BadRequestException(generalFailure.getMessage(),generalFailure));
  }
catch (  ForbiddenException fe) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ fe);
    handler.handleError(fe);
  }
catch (  final Exception exception) {
    RestDispatcher.debug.error(""String_Node_Str"" + exception);
    handler.handleError(new NotFoundException(exception.getMessage(),exception));
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void updateInstance(final ServerContext context,final String resourceId,final UpdateRequest request,final ResultHandler<Resource> handler){
  Token admin=new Token();
  admin.setId(getCookieFromServerContext(context));
  final JsonValue jVal=request.getNewContent();
  final String rev=request.getRevision();
  IdentityDetails dtls, newDtls;
  IdentityServicesImpl idsvc=new IdentityServicesImpl();
  ;
  Resource resource;
  try {
    dtls=idsvc.read(resourceId,idSvcsAttrList,admin);
    newDtls=jsonValueToIdentityDetails(jVal);
    newDtls.setName(resourceId);
    String userpass=jVal.get(""String_Node_Str"").asString();
    if (userpass != null && !userpass.isEmpty()) {
      if (checkValidPassword(resourceId,userpass.toCharArray(),realm) || isAdmin(context)) {
      }
 else {
        String strPass=getPasswordFromHeader(context);
        if (strPass != null && !strPass.isEmpty() && checkValidPassword(resourceId,strPass.toCharArray(),realm)) {
        }
 else {
          throw new BadRequestException(""String_Node_Str"");
        }
      }
    }
    UpdateResponse message=idsvc.update(newDtls,admin);
    IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
    resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
    handler.handleResult(resource);
  }
 catch (  final ObjectNotFound onf) {
    RestDispatcher.debug.error(""String_Node_Str"" + onf);
    handler.handleError(new NotFoundException(""String_Node_Str"" + resourceId + ""String_Node_Str"",onf));
  }
catch (  final NeedMoreCredentials needMoreCredentials) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ needMoreCredentials);
    handler.handleError(new ForbiddenException(""String_Node_Str"",needMoreCredentials));
  }
catch (  final TokenExpired tokenExpired) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
    handler.handleError(new PermanentException(401,""String_Node_Str"",null));
  }
catch (  final AccessDenied accessDenied) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ accessDenied);
    handler.handleError(new ForbiddenException(accessDenied.getMessage(),accessDenied));
  }
catch (  final GeneralFailure generalFailure) {
    RestDispatcher.debug.error(""String_Node_Str"" + generalFailure);
    handler.handleError(new BadRequestException(generalFailure.getMessage(),generalFailure));
  }
catch (  BadRequestException bre) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ bre);
    handler.handleError(bre);
  }
catch (  final Exception exception) {
    RestDispatcher.debug.error(""String_Node_Str"" + exception);
    handler.handleError(new NotFoundException(exception.getMessage(),exception));
  }
}"
79886,"/** 
 * Update an existing Token in the store. If the Token does not exist in the store then a Token is created. If the Token did exist in the store then it is updated. Not all fields on the Token can be updated, see the Token class for more details.
 * @see Token
 * @param token Non null Token to update.
 * @throws CoreTokenException If there was a non-recoverable error during the operation.
 */
public void update(Token token) throws CoreTokenException {
  try {
    strategy.perfom(token);
  }
 catch (  TokenStrategyFailedException e) {
    throw new CoreTokenException(""String_Node_Str"",e);
  }
  getAdapter().update(token);
  if (DEBUG.messageEnabled()) {
    DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"",token.getTokenId()));
  }
}","/** 
 * Update an existing Token in the store. If the Token does not exist in the store then a Token is created. If the Token did exist in the store then it is updated. Not all fields on the Token can be updated, see the Token class for more details.
 * @see Token
 * @param token Non null Token to update.
 * @throws CoreTokenException If there was a non-recoverable error during the operation.
 */
public void update(Token token) throws CoreTokenException {
  try {
    strategy.perfom(token);
  }
 catch (  TokenStrategyFailedException e) {
    throw new CoreTokenException(""String_Node_Str"",e);
  }
  adapter.updateOrCreate(token);
  if (DEBUG.messageEnabled()) {
    DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"",token.getTokenId()));
  }
}"
79887,"/** 
 * Delete a collection of Tokens from the Token Store using a filter to narrow down the Tokens to be deleted. Note: This operation is linear in its execution time so the more Tokens being deleted, the longer it will take.
 * @param query Non null filters which will be combined logically using AND.
 * @return total number of tokens deleted by query.
 * @throws DeleteFailedException If the delete failed for any reason.
 */
public int delete(Map<CoreTokenField,Object> query) throws DeleteFailedException {
  QueryFilter.QueryFilterBuilder queryFilter=getAdapter().buildFilter().and();
  for (  Map.Entry<CoreTokenField,Object> entry : query.entrySet()) {
    CoreTokenField key=entry.getKey();
    Object value=entry.getValue();
    queryFilter=queryFilter.attribute(key,value);
  }
  QueryBuilder builder=getAdapter().query().withFilter(queryFilter.build()).returnTheseAttributes(CoreTokenField.TOKEN_ID);
  Collection<Entry> entries;
  try {
    entries=builder.executeRawResults();
    for (    Entry entry : entries) {
      Attribute attribute=entry.getAttribute(CoreTokenField.TOKEN_ID.toString());
      String tokenId=attribute.firstValueAsString();
      getAdapter().delete(tokenId);
    }
    if (DEBUG.messageEnabled()) {
      DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"",entries.size()));
    }
  }
 catch (  CoreTokenException e) {
    throw new DeleteFailedException(builder,e);
  }
  return entries.size();
}","/** 
 * Delete a collection of Tokens from the Token Store using a filter to narrow down the Tokens to be deleted. Note: This operation is linear in its execution time so the more Tokens being deleted, the longer it will take.
 * @param query Non null filters which will be combined logically using AND.
 * @return total number of tokens deleted by query.
 * @throws DeleteFailedException If the delete failed for any reason.
 */
public int delete(Map<CoreTokenField,Object> query) throws DeleteFailedException {
  QueryFilter.QueryFilterBuilder queryFilter=adapter.buildFilter().and();
  for (  Map.Entry<CoreTokenField,Object> entry : query.entrySet()) {
    CoreTokenField key=entry.getKey();
    Object value=entry.getValue();
    queryFilter=queryFilter.attribute(key,value);
  }
  QueryBuilder builder=adapter.query().withFilter(queryFilter.build()).returnTheseAttributes(CoreTokenField.TOKEN_ID);
  Collection<Entry> entries;
  try {
    entries=builder.executeRawResults();
    for (    Entry entry : entries) {
      Attribute attribute=entry.getAttribute(CoreTokenField.TOKEN_ID.toString());
      String tokenId=attribute.firstValueAsString();
      adapter.delete(tokenId);
    }
    if (DEBUG.messageEnabled()) {
      DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"",entries.size()));
    }
  }
 catch (  CoreTokenException e) {
    throw new DeleteFailedException(builder,e);
  }
  return entries.size();
}"
79888,"/** 
 * Private restricted to preserve Singleton Instantiation.
 */
@Inject public CTSPersistentStore(CoreTokenConfig coreTokenConfig,LDAPDataConversion dataConversion,DataLayerConnectionFactory connectionFactory,TokenBlobStrategy strategy){
  this.coreTokenConfig=coreTokenConfig;
  this.dataConversion=dataConversion;
  this.strategy=strategy;
  this.connectionFactory=connectionFactory;
  this.DEBUG=SessionService.sessionDebug;
}","/** 
 * Private restricted to preserve Singleton Instantiation.
 */
@Inject public CTSPersistentStore(CoreTokenConfig coreTokenConfig,LDAPDataConversion dataConversion,TokenBlobStrategy strategy,CoreTokenAdapter adapter){
  this.coreTokenConfig=coreTokenConfig;
  this.dataConversion=dataConversion;
  this.strategy=strategy;
  this.adapter=adapter;
  this.DEBUG=SessionService.sessionDebug;
}"
79889,"/** 
 * Create a Token in the persistent store. If the Token already exists in the store then this function will throw a CoreTokenException. Instead it is recommended to use the update function.
 * @see CTSPersistentStore#update(com.sun.identity.sm.ldap.api.tokens.Token)
 * @param token Non null Token to create.
 * @throws CoreTokenException If there was a non-recoverable error during the operation or ifthe Token already exists in the store.
 */
public void create(Token token) throws CoreTokenException {
  try {
    strategy.perfom(token);
  }
 catch (  TokenStrategyFailedException e) {
    throw new CoreTokenException(""String_Node_Str"",e);
  }
  getAdapter().create(token);
}","/** 
 * Create a Token in the persistent store. If the Token already exists in the store then this function will throw a CoreTokenException. Instead it is recommended to use the update function.
 * @see CTSPersistentStore#update(com.sun.identity.sm.ldap.api.tokens.Token)
 * @param token Non null Token to create.
 * @throws CoreTokenException If there was a non-recoverable error during the operation or ifthe Token already exists in the store.
 */
public void create(Token token) throws CoreTokenException {
  try {
    strategy.perfom(token);
  }
 catch (  TokenStrategyFailedException e) {
    throw new CoreTokenException(""String_Node_Str"",e);
  }
  adapter.create(token);
}"
79890,"/** 
 * Read a Token from the persistent store.
 * @param tokenId The non null Token Id that the Token was created with.
 * @return Null if there was no matching Token. Otherwise a fully populated Token will be returned.
 * @throws CoreTokenException If there was a non-recoverable error during the operation.
 */
public Token read(String tokenId) throws CoreTokenException {
  Token token=getAdapter().read(tokenId);
  try {
    strategy.reverse(token);
  }
 catch (  TokenStrategyFailedException e) {
    throw new CoreTokenException(""String_Node_Str"",e);
  }
  return token;
}","/** 
 * Read a Token from the persistent store.
 * @param tokenId The non null Token Id that the Token was created with.
 * @return Null if there was no matching Token. Otherwise a fully populated Token will be returned.
 * @throws CoreTokenException If there was a non-recoverable error during the operation.
 */
public Token read(String tokenId) throws CoreTokenException {
  Token token=adapter.read(tokenId);
  try {
    strategy.reverse(token);
  }
 catch (  TokenStrategyFailedException e) {
    throw new CoreTokenException(""String_Node_Str"",e);
  }
  return token;
}"
79891,"/** 
 * Returns the expiration information of all sessions belonging to a user. The returned value will be a Map (sid->expiration_time).
 * @param uuid User's universal unique ID.
 * @return Map of all Session for the user
 * @throws Exception if there is any problem with accessing the sessionrepository.
 */
public Map<String,Long> getTokensByUUID(String uuid) throws CoreTokenException {
  Collection<Entry> entries;
  Filter filter=getAdapter().buildFilter().and().userId(uuid).build();
  entries=getAdapter().query().withFilter(filter).returnTheseAttributes(CoreTokenField.TOKEN_ID,CoreTokenField.EXPIRY_DATE).executeRawResults();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"" + ""String_Node_Str"",entries.size(),uuid));
  }
  Map<String,Long> sessions=new HashMap<String,Long>();
  for (  Entry entry : entries) {
    String sessionId=entry.getAttribute(CoreTokenField.TOKEN_ID.toString()).firstValueAsString();
    String dateString=entry.getAttribute(CoreTokenField.EXPIRY_DATE.toString()).firstValueAsString();
    Calendar timestamp=dataConversion.fromLDAPDate(dateString);
    long epochedSeconds=dataConversion.toEpochedSeconds(timestamp);
    sessions.put(sessionId,epochedSeconds);
  }
  return sessions;
}","/** 
 * Returns the expiration information of all sessions belonging to a user. The returned value will be a Map (sid->expiration_time).
 * @param uuid User's universal unique ID.
 * @return Map of all Session for the user
 * @throws Exception if there is any problem with accessing the sessionrepository.
 */
public Map<String,Long> getTokensByUUID(String uuid) throws CoreTokenException {
  Collection<Entry> entries;
  Filter filter=adapter.buildFilter().and().userId(uuid).build();
  entries=adapter.query().withFilter(filter).returnTheseAttributes(CoreTokenField.TOKEN_ID,CoreTokenField.EXPIRY_DATE).executeRawResults();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"" + ""String_Node_Str"",entries.size(),uuid));
  }
  Map<String,Long> sessions=new HashMap<String,Long>();
  for (  Entry entry : entries) {
    String sessionId=entry.getAttribute(CoreTokenField.TOKEN_ID.toString()).firstValueAsString();
    String dateString=entry.getAttribute(CoreTokenField.EXPIRY_DATE.toString()).firstValueAsString();
    Calendar timestamp=dataConversion.fromLDAPDate(dateString);
    long epochedSeconds=dataConversion.toEpochedSeconds(timestamp);
    sessions.put(sessionId,epochedSeconds);
  }
  return sessions;
}"
79892,"/** 
 * Performs a list operation against the Core Token Service with a predefined filter. This allows more complex filters to be constructed and is intended to be used with the QueryFilter fluent class.
 * @see QueryFilter
 * @param filter A non null OpenDJ LDAP Filter to use to control the results returned.
 * @return A non null, but possible empty collection of Tokens.
 * @throws CoreTokenException If there was an unrecoverable error.
 */
public Collection<Token> list(Filter filter) throws CoreTokenException {
  Collection<Token> tokens=getAdapter().query().withFilter(filter).execute();
  decryptTokens(tokens);
  return tokens;
}","/** 
 * Performs a list operation against the Core Token Service with a predefined filter. This allows more complex filters to be constructed and is intended to be used with the QueryFilter fluent class.
 * @see QueryFilter
 * @param filter A non null OpenDJ LDAP Filter to use to control the results returned.
 * @return A non null, but possible empty collection of Tokens.
 * @throws CoreTokenException If there was an unrecoverable error.
 */
public Collection<Token> list(Filter filter) throws CoreTokenException {
  Collection<Token> tokens=adapter.query().withFilter(filter).execute();
  decryptTokens(tokens);
  return tokens;
}"
79893,"/** 
 * Delete all Expired Sessions, within Default Limits.
 * @return True if there are more tokens to delete.
 * @throws CoreTokenException If there was a problem performing the delete.
 */
private boolean deleteExpired() throws CoreTokenException {
  Calendar nowTimestamp=Calendar.getInstance();
  Filter filter=getAdapter().buildFilter().and().beforeDate(nowTimestamp).build();
  Collection<Entry> entries=getAdapter().query().withFilter(filter).limitResultsTo(coreTokenConfig.getExpiredSessionsSearchLimit()).returnTheseAttributes(CoreTokenField.TOKEN_ID).executeRawResults();
  for (  Entry entry : entries) {
    Attribute attribute=entry.getAttribute(CoreTokenField.TOKEN_ID.toString());
    String tokenId=attribute.firstValueAsString();
    delete(tokenId);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"",entries.size()));
  }
  return entries.size() == coreTokenConfig.getExpiredSessionsSearchLimit();
}","/** 
 * Delete all Expired Sessions, within Default Limits.
 * @return True if there are more tokens to delete.
 * @throws CoreTokenException If there was a problem performing the delete.
 */
private boolean deleteExpired() throws CoreTokenException {
  Calendar nowTimestamp=Calendar.getInstance();
  Filter filter=adapter.buildFilter().and().beforeDate(nowTimestamp).build();
  Collection<Entry> entries=adapter.query().withFilter(filter).limitResultsTo(coreTokenConfig.getExpiredSessionsSearchLimit()).returnTheseAttributes(CoreTokenField.TOKEN_ID).executeRawResults();
  for (  Entry entry : entries) {
    Attribute attribute=entry.getAttribute(CoreTokenField.TOKEN_ID.toString());
    String tokenId=attribute.firstValueAsString();
    delete(tokenId);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(MessageFormat.format(CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str"",entries.size()));
  }
  return entries.size() == coreTokenConfig.getExpiredSessionsSearchLimit();
}"
79894,"/** 
 * Provide Service Instance Access to our Singleton
 * @return CTSPersistentStore Singleton Instance.
 */
public static final CTSPersistentStore getInstance(){
synchronized (CTSPersistentStore.class) {
    if (instance == null) {
      instance=new CTSPersistentStore(InjectorHolder.getInstance(CoreTokenConfig.class),InjectorHolder.getInstance(LDAPDataConversion.class),InjectorHolder.getInstance(DataLayerConnectionFactory.class),InjectorHolder.getInstance(TokenBlobStrategy.class));
      try {
        initialize();
      }
 catch (      StoreException se) {
        DEBUG.error(""String_Node_Str"" + se.getMessage());
        DEBUG.error(""String_Node_Str"");
      }
    }
  }
  return instance;
}","/** 
 * Provide Service Instance Access to our Singleton
 * @return CTSPersistentStore Singleton Instance.
 */
public static final CTSPersistentStore getInstance(){
synchronized (CTSPersistentStore.class) {
    if (instance == null) {
      instance=new CTSPersistentStore(InjectorHolder.getInstance(CoreTokenConfig.class),InjectorHolder.getInstance(LDAPDataConversion.class),InjectorHolder.getInstance(TokenBlobStrategy.class),InjectorHolder.getInstance(CoreTokenAdapter.class));
      try {
        initialize();
      }
 catch (      StoreException se) {
        DEBUG.error(""String_Node_Str"" + se.getMessage());
        DEBUG.error(""String_Node_Str"");
      }
    }
  }
  return instance;
}"
79895,"public QueryFailedException(Connection connection,DN dn,Filter filter,Throwable e){
  super(MessageFormat.format(""String_Node_Str"" + CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",dn,connection,filter),e);
}","/** 
 * Creates a formatted exception based on the values provided.
 * @param connection Connection used to make the query.
 * @param dn May be null. DN which was used in the query.
 * @param filter May be null. Filter used in query.
 * @param e Reason for the exception.
 */
public QueryFailedException(Connection connection,DN dn,Filter filter,Throwable e){
  super(MessageFormat.format(""String_Node_Str"" + CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",dn,connection,filter),e);
}"
79896,"public SetFailedException(Token token,ModifyRequest diff,Throwable e){
  super(MessageFormat.format(""String_Node_Str"" + CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",token,diff),e);
}","public SetFailedException(Token token,Throwable e){
  super(MessageFormat.format(""String_Node_Str"" + CoreTokenConstants.DEBUG_HEADER + ""String_Node_Str""+ ""String_Node_Str"",token),e);
}"
79897,"/** 
 * {@inheritDoc}
 */
@Override public void updateInstance(final ServerContext context,final String resourceId,final UpdateRequest request,final ResultHandler<Resource> handler){
  Token admin=new Token();
  admin.setId(getCookieFromServerContext(context));
  final JsonValue jVal=request.getNewContent();
  final String rev=request.getRevision();
  IdentityDetails dtls=null, newDtls=null;
  IdentityServicesImpl idsvc=null;
  Resource resource=null;
  try {
    idsvc=new IdentityServicesImpl();
    dtls=idsvc.read(resourceId,idSvcsAttrList,admin);
    newDtls=jsonValueToIdentityDetails(jVal);
    newDtls.setName(resourceId);
    String userpass=jVal.get(""String_Node_Str"").asString();
    if (userpass != null && !userpass.isEmpty()) {
      if (checkValidPassword(resourceId,userpass.toCharArray(),realm) || isAdmin(context)) {
      }
 else {
        if (checkValidPassword(resourceId,getPasswordFromHeader(context).toCharArray(),realm)) {
        }
 else {
          throw new PermanentException(401,""String_Node_Str"",null);
        }
      }
    }
    UpdateResponse message=idsvc.update(newDtls,admin);
    IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
    resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
    handler.handleResult(resource);
  }
 catch (  final ObjectNotFound o) {
    try {
      dtls=jsonValueToIdentityDetails(jVal);
      dtls.setName(resourceId);
      CreateResponse success=idsvc.create(dtls,admin);
      IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
      resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
      handler.handleResult(resource);
    }
 catch (    final TokenExpired tokenExpired) {
      RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
      handler.handleError(new PermanentException(401,""String_Node_Str"",null));
    }
catch (    final Exception e) {
      RestDispatcher.debug.error(""String_Node_Str"" + e);
      handler.handleError(new BadRequestException(e.getMessage(),e));
    }
  }
catch (  final NeedMoreCredentials needMoreCredentials) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ needMoreCredentials);
    handler.handleError(new ForbiddenException(""String_Node_Str"",needMoreCredentials));
  }
catch (  final TokenExpired tokenExpired) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
    handler.handleError(new PermanentException(401,""String_Node_Str"",null));
  }
catch (  final AccessDenied accessDenied) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ accessDenied);
    handler.handleError(new ForbiddenException(accessDenied.getMessage(),accessDenied));
  }
catch (  final GeneralFailure generalFailure) {
    RestDispatcher.debug.error(""String_Node_Str"" + generalFailure);
    handler.handleError(new BadRequestException(generalFailure.getMessage(),generalFailure));
  }
catch (  final Exception exception) {
    RestDispatcher.debug.error(""String_Node_Str"" + exception);
    handler.handleError(new NotFoundException(exception.getMessage(),exception));
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void updateInstance(final ServerContext context,final String resourceId,final UpdateRequest request,final ResultHandler<Resource> handler){
  Token admin=new Token();
  admin.setId(getCookieFromServerContext(context));
  final JsonValue jVal=request.getNewContent();
  final String rev=request.getRevision();
  IdentityDetails dtls=null, newDtls=null;
  IdentityServicesImpl idsvc=null;
  Resource resource=null;
  try {
    idsvc=new IdentityServicesImpl();
    dtls=idsvc.read(resourceId,idSvcsAttrList,admin);
    newDtls=jsonValueToIdentityDetails(jVal);
    newDtls.setName(resourceId);
    String userpass=jVal.get(""String_Node_Str"").asString();
    if (userpass != null && !userpass.isEmpty()) {
      if (checkValidPassword(resourceId,userpass.toCharArray(),realm) || isAdmin(context)) {
      }
 else {
        String strPass=getPasswordFromHeader(context);
        if (strPass != null && !strPass.isEmpty() && checkValidPassword(resourceId,strPass.toCharArray(),realm)) {
        }
 else {
          throw new ForbiddenException(""String_Node_Str"",null);
        }
      }
    }
    UpdateResponse message=idsvc.update(newDtls,admin);
    IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
    resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
    handler.handleResult(resource);
  }
 catch (  final ObjectNotFound o) {
    try {
      dtls=jsonValueToIdentityDetails(jVal);
      dtls.setName(resourceId);
      CreateResponse success=idsvc.create(dtls,admin);
      IdentityDetails checkIdent=idsvc.read(dtls.getName(),idSvcsAttrList,admin);
      resource=new Resource(resourceId,""String_Node_Str"",identityDetailsToJsonValue(checkIdent));
      handler.handleResult(resource);
    }
 catch (    final TokenExpired tokenExpired) {
      RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
      handler.handleError(new PermanentException(401,""String_Node_Str"",null));
    }
catch (    final Exception e) {
      RestDispatcher.debug.error(""String_Node_Str"" + e);
      handler.handleError(new BadRequestException(e.getMessage(),e));
    }
  }
catch (  final NeedMoreCredentials needMoreCredentials) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ needMoreCredentials);
    handler.handleError(new ForbiddenException(""String_Node_Str"",needMoreCredentials));
  }
catch (  final TokenExpired tokenExpired) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ tokenExpired);
    handler.handleError(new PermanentException(401,""String_Node_Str"",null));
  }
catch (  final AccessDenied accessDenied) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ accessDenied);
    handler.handleError(new ForbiddenException(accessDenied.getMessage(),accessDenied));
  }
catch (  final GeneralFailure generalFailure) {
    RestDispatcher.debug.error(""String_Node_Str"" + generalFailure);
    handler.handleError(new BadRequestException(generalFailure.getMessage(),generalFailure));
  }
catch (  ForbiddenException fe) {
    RestDispatcher.debug.error(""String_Node_Str"" + resourceId + ""String_Node_Str""+ fe);
    handler.handleError(fe);
  }
catch (  final Exception exception) {
    RestDispatcher.debug.error(""String_Node_Str"" + exception);
    handler.handleError(new NotFoundException(exception.getMessage(),exception));
  }
}"
79898,"/** 
 * Common Get Instance method to obtain access to Service Methods.
 * @return AMTokenRepository Singleton Instance.
 * @throws Exception
 */
public static AMTokenRepository getInstance() throws Exception {
  if (amTokenRepository == null) {
    if (CTS_REPOSITORY_CLASS_NAME.equals(CTSPersistentStore.class.getName())) {
      amTokenRepository=CTSPersistentStore.getInstance();
    }
 else     if (CTS_REPOSITORY_CLASS_NAME.equals(com.sun.identity.sm.mq.JMQSessionRepository.class.getName())) {
      amTokenRepository=com.sun.identity.sm.mq.JMQSessionRepository.getInstance();
    }
 else {
      throw new IllegalAccessException(""String_Node_Str"" + CTS_REPOSITORY_CLASS_NAME + ""String_Node_Str"");
    }
  }
  return amTokenRepository;
}","/** 
 * Common Get Instance method to obtain access to Service Methods.
 * @return AMTokenRepository Singleton Instance.
 * @throws Exception
 */
public static AMTokenRepository getInstance() throws Exception {
  if (amTokenRepository == null) {
    if (CTS_REPOSITORY_CLASS_NAME.equals(CTSPersistentStore.class.getName())) {
      amTokenRepository=CTSPersistentStore.getInstance();
    }
 else     if (CTS_REPOSITORY_CLASS_NAME.equals(com.sun.identity.sm.mq.JMQSessionRepository.class.getName())) {
      amTokenRepository=com.sun.identity.sm.mq.JMQSessionRepository.getInstance();
    }
 else {
      throw new IllegalAccessException(""String_Node_Str"" + CTS_REPOSITORY_CLASS_NAME + ""String_Node_Str"");
    }
  }
  if (amTokenRepository == null) {
    throw new IllegalAccessError(""String_Node_Str"" + CTS_REPOSITORY_CLASS_NAME + ""String_Node_Str"");
  }
  return amTokenRepository;
}"
79899,"private void setErrorMessage(Exception e){
  String authErrorCode=null;
  if ((e != null) && (e instanceof L10NMessage)) {
    L10NMessage l10nE=(L10NMessage)e;
    authErrorCode=l10nE.getErrorCode();
    if (authErrorCode != null) {
      errorCode=authErrorCode;
      ErrorMessage=l10nE.getL10NMessage(com.sun.identity.shared.locale.Locale.getLocale(AuthUtils.getLocale(ac)));
    }
 else {
      if (ac != null) {
        ErrorMessage=ac.getErrorMessage();
        errorCode=ac.getErrorCode();
      }
    }
  }
  if (errorCode == null || errorCode.isEmpty()) {
    errorCode=AMAuthErrorCode.AUTH_ERROR;
    ErrorMessage=AuthUtils.getErrorMessage(errorCode);
  }
  if (ac != null) {
    errorTemplate=ac.getErrorTemplate();
  }
 else {
    errorTemplate=AuthUtils.getErrorTemplate(errorCode);
  }
  if (loginURL != null && errorCode.equals(""String_Node_Str"") && loginURL.isEmpty()) {
    setDisplayFieldValue(LOGIN_URL,AuthUtils.constructLoginURL(request));
  }
  if (loginDebug.messageEnabled()) {
    loginDebug.message(""String_Node_Str"" + ErrorMessage);
    loginDebug.message(""String_Node_Str"" + errorTemplate);
    loginDebug.message(""String_Node_Str"" + errorCode);
  }
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
}","private void setErrorMessage(Exception e){
  String authErrorCode=null;
  if ((e != null) && (e instanceof L10NMessage)) {
    L10NMessage l10nE=(L10NMessage)e;
    authErrorCode=l10nE.getErrorCode();
    if (authErrorCode != null) {
      errorCode=authErrorCode;
      ErrorMessage=l10nE.getL10NMessage(com.sun.identity.shared.locale.Locale.getLocale(AuthUtils.getLocale(ac)));
    }
  }
  if (authErrorCode == null) {
    if (ac != null) {
      errorCode=ac.getErrorCode();
      ErrorMessage=ac.getErrorMessage();
    }
  }
  if (errorCode == null || errorCode.isEmpty()) {
    errorCode=AMAuthErrorCode.AUTH_ERROR;
  }
  if (ErrorMessage == null || ErrorMessage.isEmpty()) {
    ErrorMessage=AuthUtils.getErrorMessage(errorCode);
  }
  if (ac != null) {
    errorTemplate=ac.getErrorTemplate();
  }
 else {
    errorTemplate=AuthUtils.getErrorTemplate(errorCode);
  }
  if (loginURL != null && errorCode.equals(""String_Node_Str"") && loginURL.isEmpty()) {
    setDisplayFieldValue(LOGIN_URL,AuthUtils.constructLoginURL(request));
  }
  if (loginDebug.messageEnabled()) {
    loginDebug.message(""String_Node_Str"" + ErrorMessage);
    loginDebug.message(""String_Node_Str"" + errorTemplate);
    loginDebug.message(""String_Node_Str"" + errorCode);
  }
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
}"
79900,"/** 
 * Format the given LogRecord and return back a formatted String. <p> The formatted String has the values of the fields which are selected and NULL if any field is not selected. All fields are enclosed in single- quotes. <p> A typical formatted string can be given as follows: '10:10:10', '10th June, 2002', 'NULL', 'NULL', 'Session Created Successfull', 'INFO', 'NULL', 'NULL' <p> This formatted string will be enclosed within braces by Handler to construct the query string.
 * @param logRecord the log record to be formatted.
 * @return formatted string.
 */
public String format(java.util.logging.LogRecord logRecord){
  Map logInfoTable=null;
  if ((LogManagerUtil.isAMLoggingMode()) && (logRecord instanceof com.sun.identity.log.ILogRecord)) {
    logInfoTable=((com.sun.identity.log.ILogRecord)logRecord).getLogInfoMap();
  }
  StringBuilder sbuffer=new StringBuilder();
  String strTime;
  if (secureTimestampGenerator != null) {
    strTime=secureTimestampGenerator.getTimestamp();
  }
 else {
    strTime=""String_Node_Str"";
  }
  String toDate=null;
  if (!isMySQL) {
    toDate=""String_Node_Str"";
  }
 else {
    toDate=""String_Node_Str"";
  }
  sbuffer.append(toDate);
  sbuffer.append(strTime);
  sbuffer.append(""String_Node_Str"");
  sbuffer.append(dateTimeFormat);
  sbuffer.append(""String_Node_Str"");
  String tstr=formatMessage(logRecord);
  if ((tstr == null) || (tstr.length() <= 0)) {
    tstr=LogConstants.NOTAVAIL;
  }
 else   if (tstr.length() > 0) {
    String str1=tstr;
    if (tstr.indexOf(""String_Node_Str"") != -1) {
      str1=checkEscapes(tstr,""String_Node_Str"",""String_Node_Str"");
    }
    String str2=str1;
    if (isMySQL) {
      if (str1.indexOf(""String_Node_Str"") != -1) {
        str2=checkEscapes(str1,""String_Node_Str"",""String_Node_Str"");
      }
    }
    tstr=str2;
  }
  sbuffer.append(""String_Node_Str"").append(tstr).append(""String_Node_Str"");
  if (Debug.messageEnabled()) {
    Debug.message(""String_Node_Str"" + sbuffer.toString() + ""String_Node_Str"");
  }
  String[] allFields=lmanager.getAllFields();
  Set selectedFields=lmanager.getSelectedFieldSet();
  int len=0;
  if (allFields != null) {
    len=allFields.length;
  }
  for (int i=2; i < len - 1; i++) {
    if ((logInfoTable != null) && (selectedFields != null) && (selectedFields.contains(allFields[i]))) {
      String tempstr=(String)logInfoTable.get(allFields[i]);
      if ((tempstr != null) && (tempstr.length() > 0) && (tempstr.indexOf(""String_Node_Str"") != -1)) {
        StringTokenizer tmps=new StringTokenizer(tempstr,""String_Node_Str"");
        StringBuilder thisfield=new StringBuilder();
        if (Debug.messageEnabled()) {
          Debug.message(""String_Node_Str"" + tempstr);
        }
        if (tempstr.indexOf(""String_Node_Str"") == 0) {
          thisfield.append(""String_Node_Str"");
          if (tmps.hasMoreTokens()) {
            thisfield.append(tmps.nextToken());
          }
        }
 else {
          if (tmps.hasMoreTokens()) {
            thisfield.append(tmps.nextToken());
          }
        }
        while (tmps.hasMoreTokens()) {
          thisfield.append(""String_Node_Str"").append(tmps.nextToken());
        }
        if (tempstr.indexOf(""String_Node_Str"",tempstr.length() - 1) != -1) {
          thisfield.append(""String_Node_Str"");
        }
        tempstr=thisfield.toString();
      }
      if (tempstr == null) {
        tempstr=LogConstants.NOTAVAIL;
      }
      sbuffer.append(""String_Node_Str"").append(tempstr).append(""String_Node_Str"");
    }
 else {
      sbuffer.append(""String_Node_Str"").append(LogConstants.NOTAVAIL).append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  if (Debug.messageEnabled()) {
    Debug.message(""String_Node_Str"" + sbuffer.toString());
  }
  if ((selectedFields != null) && (logInfoTable != null) && (selectedFields.contains(allFields[len - 1]))) {
    String tmpstr=(String)logInfoTable.get(allFields[len - 1]);
    if (tmpstr == null) {
      tmpstr=LogConstants.NOTAVAIL;
    }
    sbuffer.append(""String_Node_Str"").append(tmpstr).append(""String_Node_Str"");
  }
 else {
    sbuffer.append(""String_Node_Str"").append(LogConstants.NOTAVAIL).append(""String_Node_Str"");
  }
  if (Debug.messageEnabled()) {
    Debug.message(""String_Node_Str"" + sbuffer.toString());
  }
  return sbuffer.toString();
}","/** 
 * Format the given LogRecord and return back a formatted String. <p> The formatted String has the values of the fields which are selected and NULL if any field is not selected. All fields are enclosed in single- quotes. <p> A typical formatted string can be given as follows: '10:10:10', '10th June, 2002', 'NULL', 'NULL', 'Session Created Successfull', 'INFO', 'NULL', 'NULL' <p> This formatted string will be enclosed within braces by Handler to construct the query string.
 * @param logRecord the log record to be formatted.
 * @return formatted string.
 */
public String format(java.util.logging.LogRecord logRecord){
  Map logInfoTable=null;
  if ((LogManagerUtil.isAMLoggingMode()) && (logRecord instanceof com.sun.identity.log.ILogRecord)) {
    logInfoTable=((com.sun.identity.log.ILogRecord)logRecord).getLogInfoMap();
  }
  StringBuilder sbuffer=new StringBuilder();
  String strTime;
  if (secureTimestampGenerator != null) {
    strTime=secureTimestampGenerator.getTimestamp();
  }
 else {
    strTime=""String_Node_Str"";
  }
  String toDate=null;
  if (!isMySQL) {
    toDate=""String_Node_Str"";
  }
 else {
    toDate=""String_Node_Str"";
  }
  sbuffer.append(toDate);
  sbuffer.append(strTime);
  sbuffer.append(""String_Node_Str"");
  sbuffer.append(dateTimeFormat);
  sbuffer.append(""String_Node_Str"");
  String tstr=formatMessage(logRecord);
  if ((tstr == null) || (tstr.length() <= 0)) {
    tstr=LogConstants.NOTAVAIL;
  }
 else   if (tstr.length() > 0) {
    String str1=tstr;
    if (tstr.indexOf(""String_Node_Str"") != -1) {
      str1=checkEscapes(tstr,""String_Node_Str"",""String_Node_Str"");
    }
    String str2=str1;
    if (isMySQL) {
      if (str1.indexOf(""String_Node_Str"") != -1) {
        str2=checkEscapes(str1,""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      int splitLength=MAX_LITERAL_LENGTH / 4;
      if (str1.length() >= splitLength) {
        StringBuilder strBuilder=new StringBuilder();
        int beginIndex=0;
        int endIndex=splitLength;
        if (str1.length() >= splitLength) {
          strBuilder.append(""String_Node_Str"");
          while (str1.length() > beginIndex) {
            if (endIndex > str1.length()) {
              endIndex=str1.length();
            }
            strBuilder.append(""String_Node_Str"");
            strBuilder.append(str1.substring(beginIndex,endIndex));
            strBuilder.append(""String_Node_Str"");
            beginIndex=beginIndex + splitLength;
            endIndex=endIndex + splitLength;
          }
          strBuilder.append(""String_Node_Str"");
        }
        str2=strBuilder.toString();
      }
    }
    tstr=str2;
  }
  sbuffer.append(""String_Node_Str"").append(tstr).append(""String_Node_Str"");
  if (Debug.messageEnabled()) {
    Debug.message(""String_Node_Str"" + sbuffer.toString() + ""String_Node_Str"");
  }
  String[] allFields=lmanager.getAllFields();
  Set selectedFields=lmanager.getSelectedFieldSet();
  int len=0;
  if (allFields != null) {
    len=allFields.length;
  }
  for (int i=2; i < len - 1; i++) {
    if ((logInfoTable != null) && (selectedFields != null) && (selectedFields.contains(allFields[i]))) {
      String tempstr=(String)logInfoTable.get(allFields[i]);
      if ((tempstr != null) && (tempstr.length() > 0) && (tempstr.indexOf(""String_Node_Str"") != -1)) {
        StringTokenizer tmps=new StringTokenizer(tempstr,""String_Node_Str"");
        StringBuilder thisfield=new StringBuilder();
        if (Debug.messageEnabled()) {
          Debug.message(""String_Node_Str"" + tempstr);
        }
        if (tempstr.indexOf(""String_Node_Str"") == 0) {
          thisfield.append(""String_Node_Str"");
          if (tmps.hasMoreTokens()) {
            thisfield.append(tmps.nextToken());
          }
        }
 else {
          if (tmps.hasMoreTokens()) {
            thisfield.append(tmps.nextToken());
          }
        }
        while (tmps.hasMoreTokens()) {
          thisfield.append(""String_Node_Str"").append(tmps.nextToken());
        }
        if (tempstr.indexOf(""String_Node_Str"",tempstr.length() - 1) != -1) {
          thisfield.append(""String_Node_Str"");
        }
        tempstr=thisfield.toString();
      }
      if (tempstr == null) {
        tempstr=LogConstants.NOTAVAIL;
      }
      sbuffer.append(""String_Node_Str"").append(tempstr).append(""String_Node_Str"");
    }
 else {
      sbuffer.append(""String_Node_Str"").append(LogConstants.NOTAVAIL).append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  if (Debug.messageEnabled()) {
    Debug.message(""String_Node_Str"" + sbuffer.toString());
  }
  if ((selectedFields != null) && (logInfoTable != null) && (selectedFields.contains(allFields[len - 1]))) {
    String tmpstr=(String)logInfoTable.get(allFields[len - 1]);
    if (tmpstr == null) {
      tmpstr=LogConstants.NOTAVAIL;
    }
    sbuffer.append(""String_Node_Str"").append(tmpstr).append(""String_Node_Str"");
  }
 else {
    sbuffer.append(""String_Node_Str"").append(LogConstants.NOTAVAIL).append(""String_Node_Str"");
  }
  if (Debug.messageEnabled()) {
    Debug.message(""String_Node_Str"" + sbuffer.toString());
  }
  return sbuffer.toString();
}"
79901,"/** 
 * Takes an AMRecord and writes this to the store
 * @param record The record object to store
 * @throws com.iplanet.dpro.session.exceptions.StoreException
 */
private void writeImmediate(AMRootEntity record) throws StoreException {
  boolean found=false;
  StringBuilder baseDN=new StringBuilder();
  baseDN.append(Constants.AMRECORD_NAMING_ATTR).append(Constants.EQUALS);
  baseDN.append((record).getPrimaryKey()).append(Constants.COMMA);
  baseDN.append(Constants.BASE_DN).append(Constants.COMMA).append(SystemPropertiesManager.get(SYS_PROPERTY_SESSION_HA_REPOSITORY_ROOT_DN));
  debug.error(""String_Node_Str"" + baseDN.toString() + ""String_Node_Str""+ record.toString()+ ""String_Node_Str"");
  try {
    InternalSearchOperation iso=icConn.processSearch(baseDN.toString(),SearchScope.SINGLE_LEVEL,DereferencePolicy.NEVER_DEREF_ALIASES,0,0,false,Constants.FAMRECORD_FILTER,returnAttrs);
    ResultCode resultCode=iso.getResultCode();
    if (resultCode == ResultCode.SUCCESS) {
      final LocalizableMessage message=DB_ENT_P.get(baseDN);
      Log.logger.log(Level.FINE,message.toString());
      found=true;
    }
 else     if (resultCode == ResultCode.NO_SUCH_OBJECT) {
      final LocalizableMessage message=DB_ENT_NOT_P.get(baseDN);
      Log.logger.log(Level.FINE,message.toString());
    }
 else {
      final LocalizableMessage message=DB_ENT_ACC_FAIL.get(baseDN,resultCode.toString());
      Log.logger.log(Level.WARNING,message.toString());
      throw new StoreException(message.toString());
    }
  }
 catch (  DirectoryException dex) {
    final LocalizableMessage message=DB_ENT_ACC_FAIL2.get(baseDN);
    Log.logger.log(Level.WARNING,message.toString(),dex);
    throw new StoreException(message.toString(),dex);
  }
  if (found) {
    updateImmediate(record);
  }
 else {
    storeImmediate(record);
  }
}","/** 
 * Takes an AMRecord and writes this to the store
 * @param record The record object to store
 * @throws com.iplanet.dpro.session.exceptions.StoreException
 */
private void writeImmediate(AMRootEntity record) throws StoreException {
  boolean found=false;
  StringBuilder baseDN=new StringBuilder();
  baseDN.append(Constants.AMRECORD_NAMING_ATTR).append(Constants.EQUALS);
  baseDN.append((record).getPrimaryKey()).append(Constants.COMMA);
  baseDN.append(Constants.BASE_DN).append(Constants.COMMA).append(SystemPropertiesManager.get(SYS_PROPERTY_SESSION_HA_REPOSITORY_ROOT_DN));
  debug.error(""String_Node_Str"" + baseDN.toString() + ""String_Node_Str""+ ""String_Node_Str""+ record.getService()+ ""String_Node_Str""+ ""String_Node_Str""+ record.getOperation()+ ""String_Node_Str""+ ""String_Node_Str""+ record.getPrimaryKey()+ ""String_Node_Str""+ ""String_Node_Str""+ record.getSecondaryKey()+ ""String_Node_Str""+ ""String_Node_Str""+ record.getState()+ ""String_Node_Str""+ ""String_Node_Str""+ record.getExpDate()+ ""String_Node_Str"");
  try {
    InternalSearchOperation iso=icConn.processSearch(baseDN.toString(),SearchScope.SINGLE_LEVEL,DereferencePolicy.NEVER_DEREF_ALIASES,0,0,false,Constants.FAMRECORD_FILTER,returnAttrs);
    ResultCode resultCode=iso.getResultCode();
    if (resultCode == ResultCode.SUCCESS) {
      final LocalizableMessage message=DB_ENT_P.get(baseDN);
      Log.logger.log(Level.FINE,message.toString());
      found=true;
    }
 else     if (resultCode == ResultCode.NO_SUCH_OBJECT) {
      final LocalizableMessage message=DB_ENT_NOT_P.get(baseDN);
      Log.logger.log(Level.FINE,message.toString());
    }
 else {
      final LocalizableMessage message=DB_ENT_ACC_FAIL.get(baseDN,resultCode.toString());
      Log.logger.log(Level.WARNING,message.toString());
      throw new StoreException(message.toString());
    }
  }
 catch (  DirectoryException dex) {
    final LocalizableMessage message=DB_ENT_ACC_FAIL2.get(baseDN);
    Log.logger.log(Level.WARNING,message.toString(),dex);
    throw new StoreException(message.toString(),dex);
  }
  if (found) {
    updateImmediate(record);
  }
 else {
    storeImmediate(record);
  }
}"
79902,"private String displayWundergroundImage(String loc,String type,Boolean loop,int distance){
  String apiKey=getApiKey();
  int time_label=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  int snow=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  int smooth=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  int noclutter=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  String animateText=""String_Node_Str"";
  if (type.startsWith(""String_Node_Str"") && loop)   animateText=""String_Node_Str"";
 else   if (type.startsWith(""String_Node_Str""))   animateText=""String_Node_Str"";
 else   if (loop)   animateText=""String_Node_Str"";
  String defaultRes=getString(R.string.image_resolution_default);
  String units=settings.getString(""String_Node_Str"",getString(R.string.distance_unit_default));
  String speed=settings.getString(""String_Node_Str"",getString(R.string.animation_speed_default));
  String res=settings.getString(""String_Node_Str"",defaultRes);
  String frames=settings.getString(""String_Node_Str"",getString(R.string.animation_frames_default));
  Boolean lower=settings.getBoolean(""String_Node_Str"",false);
  if (res.equals(""String_Node_Str""))   res=settings.getString(""String_Node_Str"",defaultRes);
  if (!res.matches(""String_Node_Str""))   res=defaultRes;
  if (lower && !onWifi())   res=Long.toString(Math.round(Integer.parseInt(res) * 0.667));
  int width=radarWebView.getWidth();
  int height=radarWebView.getHeight();
  int imageWidth=Integer.parseInt(res);
  int imageHeight=Integer.parseInt(res);
  if (width > height) {
    Float aspect=(float)width / height;
    imageWidth=Math.round(imageHeight * aspect);
  }
 else {
    Float aspect=(float)height / width;
    imageHeight=Math.round(imageWidth * aspect);
  }
  String format=""String_Node_Str"";
  String url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  url=String.format(url,apiKey,animateText,loc,format,imageWidth,imageHeight,distance,units,smooth,speed,frames,snow,noclutter,time_label);
  if (type.startsWith(""String_Node_Str""))   url+=String.format(""String_Node_Str"",type);
  return displayRadar(url);
}","private String displayWundergroundImage(String loc,String type,Boolean loop,int distance){
  String apiKey=getApiKey();
  int time_label=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  int snow=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  int smooth=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  int noclutter=settings.getBoolean(""String_Node_Str"",true) ? 1 : 0;
  String animateText=""String_Node_Str"";
  if (type.startsWith(""String_Node_Str"") && loop)   animateText=""String_Node_Str"";
 else   if (type.startsWith(""String_Node_Str""))   animateText=""String_Node_Str"";
 else   if (loop)   animateText=""String_Node_Str"";
  String defaultRes=getString(R.string.image_resolution_default);
  String units=settings.getString(""String_Node_Str"",getString(R.string.distance_unit_default));
  String speed=settings.getString(""String_Node_Str"",getString(R.string.animation_speed_default));
  String res=settings.getString(""String_Node_Str"",defaultRes);
  String frames=settings.getString(""String_Node_Str"",getString(R.string.animation_frames_default));
  Boolean lower=settings.getBoolean(""String_Node_Str"",false);
  if (res.equals(""String_Node_Str""))   res=settings.getString(""String_Node_Str"",defaultRes);
  if (!res.matches(""String_Node_Str""))   res=defaultRes;
  if (lower && !onWifi())   res=Long.toString(Math.round(Integer.parseInt(res) * 0.667));
  int width=radarWebView.getWidth();
  int height=radarWebView.getHeight();
  int imageWidth=Integer.parseInt(res);
  int imageHeight=Integer.parseInt(res);
  if (width > height) {
    Float aspect=(float)width / height;
    imageWidth=Math.round(imageHeight * aspect);
  }
 else {
    Float aspect=(float)height / width;
    imageHeight=Math.round(imageWidth * aspect);
  }
  String format=""String_Node_Str"";
  if (type.startsWith(""String_Node_Str"") && loop)   format=""String_Node_Str"";
  String url=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  url=String.format(url,apiKey,animateText,loc,format,imageWidth,imageHeight,distance,units,smooth,speed,frames,snow,noclutter,time_label);
  if (type.startsWith(""String_Node_Str""))   url+=String.format(""String_Node_Str"",type);
  return displayRadar(url);
}"
79903,"@Override public void onResume(){
  super.onResume();
  Fragment fragment=getFragmentManager().findFragmentById(R.id.fragment_container);
  if (fragment instanceof ChooserFragment)   launchSelectionFragment(Source.WUNDERGROUND);
}","@Override public void onResume(){
  super.onResume();
  Fragment fragment=getFragmentManager().findFragmentById(R.id.fragment_container);
  if (fragment instanceof ChooserFragment)   launchSelectionFragment(Source.WUNDERGROUND);
  Boolean needKey=!settings.getBoolean(""String_Node_Str"",false);
  if (fragment instanceof SelectWundergroundFragment && needKey)   launchSelectionFragment(Source.WUNDERGROUND);
}"
79904,"@Override public void onClick(View view){
  int used=settings.getInt(""String_Node_Str"",0);
  if (used >= limit)   Toast.makeText(getActivity().getApplicationContext(),getString(R.string.passed_limit_error),Toast.LENGTH_LONG).show();
 else   if (callback != null)   callback.testWunderground();
}","@Override public void onClick(View view){
  int used=settings.getInt(""String_Node_Str"",0);
  if (settings.getBoolean(""String_Node_Str"",false) && used >= limit)   Toast.makeText(getActivity().getApplicationContext(),getString(R.string.passed_limit_error),Toast.LENGTH_LONG).show();
 else   if (callback != null)   callback.testWunderground();
}"
79905,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_key_missing,container,false);
  Button needKey=view.findViewById(R.id.needKeyButton);
  needKey.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent browser=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      startActivity(browser);
    }
  }
);
  Button openSettings=view.findViewById(R.id.openSettingsButton);
  openSettings.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (callback != null)       callback.openSettings();
    }
  }
);
  final SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  final Boolean limited=settings.getBoolean(""String_Node_Str"",false);
  final int limit=settings.getInt(""String_Node_Str"",5);
  if (limited) {
    int used=settings.getInt(""String_Node_Str"",0);
    TextView wundergroundTest=view.findViewById(R.id.testWunderground);
    wundergroundTest.setText(String.format(getString(R.string.test_wunderground_limit),used,limit));
  }
  Button testWunderground=view.findViewById(R.id.testWundergroundButton);
  testWunderground.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int used=settings.getInt(""String_Node_Str"",0);
      if (used >= limit)       Toast.makeText(getActivity().getApplicationContext(),getString(R.string.passed_limit_error),Toast.LENGTH_LONG).show();
 else       if (callback != null)       callback.testWunderground();
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_key_missing,container,false);
  Button needKey=view.findViewById(R.id.needKeyButton);
  needKey.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent browser=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      startActivity(browser);
    }
  }
);
  Button openSettings=view.findViewById(R.id.openSettingsButton);
  openSettings.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (callback != null)       callback.openSettings();
    }
  }
);
  final SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  final Boolean limited=settings.getBoolean(""String_Node_Str"",false);
  final int limit=settings.getInt(""String_Node_Str"",5);
  if (limited) {
    int used=settings.getInt(""String_Node_Str"",0);
    TextView wundergroundTest=view.findViewById(R.id.testWunderground);
    wundergroundTest.setText(String.format(getString(R.string.test_wunderground_limit),used,limit));
  }
  Button testWunderground=view.findViewById(R.id.testWundergroundButton);
  testWunderground.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      int used=settings.getInt(""String_Node_Str"",0);
      if (settings.getBoolean(""String_Node_Str"",false) && used >= limit)       Toast.makeText(getActivity().getApplicationContext(),getString(R.string.passed_limit_error),Toast.LENGTH_LONG).show();
 else       if (callback != null)       callback.testWunderground();
    }
  }
);
  return view;
}"
79906,"private void launchChooser(TreeMap<String,String> options,String type,Boolean loop,int distance){
  setTitle(R.string.chooser_title);
  ChooserFragment chooserFragment=new ChooserFragment();
  getFragmentManager().beginTransaction().replace(R.id.fragment_container,chooserFragment).commit();
  getFragmentManager().executePendingTransactions();
  chooserFragment.populateList(options,type,loop,distance);
}","private void launchChooser(TreeMap<String,String> options,String type,Boolean loop,int distance){
  setTitle(R.string.chooser_title);
  ChooserFragment chooserFragment=new ChooserFragment();
  getFragmentManager().beginTransaction().replace(R.id.fragment_container,chooserFragment).addToBackStack(null).commit();
  getFragmentManager().executePendingTransactions();
  chooserFragment.populateList(options,type,loop,distance);
}"
79907,"private void viewWunderground(){
  String location=locationEditText.getText().toString();
  Boolean loop=loopSwitch.isChecked();
  int distance=Integer.parseInt(radiusNumber.getText().toString());
  String type=getResources().getStringArray(R.array.wunderground_type_values)[typeSpinner.getSelectedItemPosition()];
  callback.onWundergroundSelected(location,type,loop,distance);
}","private void viewWunderground(){
  String location=locationEditText.getText().toString();
  Boolean loop=loopSwitch.isChecked();
  int distance=Integer.parseInt(radiusNumber.getText().toString());
  String type=getResources().getStringArray(R.array.wunderground_type_values)[typeSpinner.getSelectedItemPosition()];
  if (!location.equals(""String_Node_Str"")) {
    callback.onWundergroundSelected(location,type,loop,distance);
    viewButton.setText(R.string.loading);
    viewButton.setEnabled(false);
  }
 else   locationEditText.setError(getString(R.string.empty_location_error));
}"
79908,"@Override public void onClick(View view){
  viewWunderground();
  viewButton.setText(R.string.loading);
  viewButton.setEnabled(false);
}","@Override public void onClick(View view){
  viewWunderground();
}"
79909,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_select_wunderground,container,false);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  locationEditText=view.findViewById(R.id.wunderground_location);
  locationEditText.setText(settings.getString(""String_Node_Str"",""String_Node_Str""));
  typeSpinner=view.findViewById(R.id.wundergroundTypeSpinner);
  ArrayAdapter<CharSequence> typeAdapter=ArrayAdapter.createFromResource(getActivity(),R.array.wunderground_type_names,android.R.layout.simple_spinner_dropdown_item);
  typeSpinner.setAdapter(typeAdapter);
  String type=settings.getString(""String_Node_Str"",getString(R.string.wunderground_type_default));
  int typeIndex=Arrays.asList(getResources().getStringArray(R.array.wunderground_type_values)).indexOf(type);
  typeSpinner.setSelection(typeIndex);
  loopSwitch=view.findViewById(R.id.loopSwitch);
  loopSwitch.setChecked(settings.getBoolean(""String_Node_Str"",false));
  int distance=settings.getInt(""String_Node_Str"",50);
  radiusNumber=view.findViewById(R.id.radiusNumber);
  radiusNumber.setText(String.valueOf(distance));
  final SeekBar radiusBar=view.findViewById(R.id.radiusBar);
  radiusBar.setProgress(getRadiusPercent(distance));
  radiusBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int i,    boolean b){
      radiusNumber.setText(String.valueOf(getRadiusValue(i)));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  TextView radiusText=view.findViewById(R.id.radiusText);
  String currentText=radiusText.getText().toString();
  String unitsValue=settings.getString(""String_Node_Str"",getString(R.string.distance_unit_default));
  int index=Arrays.asList(getResources().getStringArray(R.array.distance_unit_values)).indexOf(unitsValue);
  String unitsName=getResources().getStringArray(R.array.distance_unit_names)[index];
  String newText=currentText + String.format(""String_Node_Str"",unitsName.toLowerCase());
  radiusText.setText(newText);
  viewButton=view.findViewById(R.id.viewButton);
  viewButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      viewWunderground();
      viewButton.setText(R.string.loading);
      viewButton.setEnabled(false);
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_select_wunderground,container,false);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  locationEditText=view.findViewById(R.id.wunderground_location);
  locationEditText.setText(settings.getString(""String_Node_Str"",""String_Node_Str""));
  typeSpinner=view.findViewById(R.id.wundergroundTypeSpinner);
  ArrayAdapter<CharSequence> typeAdapter=ArrayAdapter.createFromResource(getActivity(),R.array.wunderground_type_names,android.R.layout.simple_spinner_dropdown_item);
  typeSpinner.setAdapter(typeAdapter);
  String type=settings.getString(""String_Node_Str"",getString(R.string.wunderground_type_default));
  int typeIndex=Arrays.asList(getResources().getStringArray(R.array.wunderground_type_values)).indexOf(type);
  typeSpinner.setSelection(typeIndex);
  loopSwitch=view.findViewById(R.id.loopSwitch);
  loopSwitch.setChecked(settings.getBoolean(""String_Node_Str"",false));
  int distance=settings.getInt(""String_Node_Str"",50);
  radiusNumber=view.findViewById(R.id.radiusNumber);
  radiusNumber.setText(String.valueOf(distance));
  final SeekBar radiusBar=view.findViewById(R.id.radiusBar);
  radiusBar.setProgress(getRadiusPercent(distance));
  radiusBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int i,    boolean b){
      radiusNumber.setText(String.valueOf(getRadiusValue(i)));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  TextView radiusText=view.findViewById(R.id.radiusText);
  String currentText=radiusText.getText().toString();
  String unitsValue=settings.getString(""String_Node_Str"",getString(R.string.distance_unit_default));
  int index=Arrays.asList(getResources().getStringArray(R.array.distance_unit_values)).indexOf(unitsValue);
  String unitsName=getResources().getStringArray(R.array.distance_unit_names)[index];
  String newText=currentText + String.format(""String_Node_Str"",unitsName.toLowerCase());
  radiusText.setText(newText);
  viewButton=view.findViewById(R.id.viewButton);
  viewButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      viewWunderground();
    }
  }
);
  return view;
}"
79910,"private void addFavoriteDialog(){
  final AlertDialog dialog=favoriteDialog(getString(R.string.action_add_favorite),getString(R.string.button_add));
  final EditText input=dialog.findViewById(R.id.dialog_input);
  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final String name=input.getText().toString();
      ExecutorService service=Executors.newSingleThreadExecutor();
      service.submit(new Runnable(){
        @Override public void run(){
          AppDatabase database=AppDatabase.getAppDatabase(getApplication());
          Boolean exists=database.favoriteDao().findByName(name) != null;
          if (name.equals(""String_Node_Str"")) {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                input.setError(getString(R.string.empty_name_error));
              }
            }
);
          }
 else           if (exists) {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                input.setError(getString(R.string.already_exists_error));
              }
            }
);
          }
 else {
            Log.e(""String_Node_Str"",""String_Node_Str"");
            Favorite favorite=new Favorite();
            favorite.setSource(source.getInt());
            favorite.setName(name);
            favorite.setLocation(location);
            favorite.setType(type);
            favorite.setLoop(loop);
            favorite.setEnhanced(enhanced);
            favorite.setDistance(distance);
            database.favoriteDao().insertAll(favorite);
            runOnUiThread(new Runnable(){
              @Override public void run(){
                hideItem(addFavorite);
                hideItem(contextAddFavorite);
                showItem(removeFavorite);
                showItem(contextRemoveFavorite);
                showItem(contextEditFavorite);
                radarName=name;
                setTitle(radarName);
                dialog.dismiss();
              }
            }
);
          }
        }
      }
);
    }
  }
);
}","private void addFavoriteDialog(){
  final AlertDialog dialog=favoriteDialog(getString(R.string.action_add_favorite),getString(R.string.button_add));
  final EditText input=dialog.findViewById(R.id.dialog_input);
  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final String name=input.getText().toString();
      ExecutorService service=Executors.newSingleThreadExecutor();
      service.submit(new Runnable(){
        @Override public void run(){
          AppDatabase database=AppDatabase.getAppDatabase(getApplication());
          Boolean exists=database.favoriteDao().findByName(name) != null;
          if (name.equals(""String_Node_Str"")) {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                input.setError(getString(R.string.empty_name_error));
              }
            }
);
          }
 else           if (exists) {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                input.setError(getString(R.string.already_exists_error));
              }
            }
);
          }
 else {
            Favorite favorite=new Favorite();
            favorite.setSource(source.getInt());
            favorite.setName(name);
            favorite.setLocation(location);
            favorite.setType(type);
            favorite.setLoop(loop);
            favorite.setEnhanced(enhanced);
            favorite.setDistance(distance);
            database.favoriteDao().insertAll(favorite);
            runOnUiThread(new Runnable(){
              @Override public void run(){
                hideItem(addFavorite);
                hideItem(contextAddFavorite);
                showItem(removeFavorite);
                showItem(contextRemoveFavorite);
                showItem(contextEditFavorite);
                radarName=name;
                setTitle(radarName);
                dialog.dismiss();
              }
            }
);
          }
        }
      }
);
    }
  }
);
}"
79911,"private void scheduleRefresh(){
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  timer=new Timer();
  refreshed=true;
  timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      refreshed=false;
    }
  }
,1000 * 60 * 5,1000 * 60 * 5);
}","private void scheduleRefresh(){
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  timer=new Timer();
  refreshed=true;
  timer.schedule(new TimerTask(){
    @Override public void run(){
      refreshed=false;
      if (settings.getBoolean(""String_Node_Str"",false) && !paused) {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            if (radarFragment != null)             radarFragment.refreshRadar();
            scheduleRefresh();
          }
        }
);
      }
    }
  }
,1000 * 60 * 5);
}"
79912,"@Override public void run(){
  refreshed=false;
}","@Override public void run(){
  if (radarFragment != null)   radarFragment.refreshRadar();
  scheduleRefresh();
}"
79913,"@Override public void onResume(){
  super.onResume();
  if (source != Source.WUNDERGROUND || settings.getBoolean(""String_Node_Str"",false)) {
    if (!refreshed && !(loop && source == Source.MOSAIC)) {
      if (radarFragment != null)       radarFragment.refreshRadar();
      scheduleRefresh();
    }
  }
}","@Override public void onResume(){
  super.onResume();
  paused=false;
  if (lastPause != null) {
    Date now=Calendar.getInstance().getTime();
    long seconds=(now.getTime() - lastPause.getTime()) / 1000;
    if (seconds > 60 * 5)     refreshed=false;
  }
  if (source != Source.WUNDERGROUND || settings.getBoolean(""String_Node_Str"",false)) {
    if (!refreshed && !(loop && source == Source.MOSAIC)) {
      if (settings.getBoolean(""String_Node_Str"",false)) {
        if (radarFragment != null)         radarFragment.refreshRadar();
        scheduleRefresh();
      }
    }
  }
}"
79914,"@Override protected void onCreate(Bundle savedInstanceState){
  Boolean fullscreen=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(""String_Node_Str"",false);
  if (fullscreen) {
    requestWindowFeature(Window.FEATURE_NO_TITLE);
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  super.onCreate(savedInstanceState);
  LayoutInflater inflater=(LayoutInflater)this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (inflater != null) {
    View contentView=inflater.inflate(R.layout.activity_radar,drawerLayout,false);
    drawerLayout.addView(contentView,0);
  }
  navigationView=findViewById(R.id.nav_view);
  Intent intent=getIntent();
  source=intent.getStringExtra(""String_Node_Str"");
  type=intent.getStringExtra(""String_Node_Str"");
  location=intent.getStringExtra(""String_Node_Str"");
  loop=intent.getBooleanExtra(""String_Node_Str"",false);
  enhanced=intent.getBooleanExtra(""String_Node_Str"",false);
  distance=intent.getIntExtra(""String_Node_Str"",50);
  needKey=source.equals(""String_Node_Str"") && !settings.getBoolean(""String_Node_Str"",false);
  if (needKey) {
    NeedKeyFragment needKeyFragment=new NeedKeyFragment();
    getFragmentManager().beginTransaction().replace(R.id.fragment_container,needKeyFragment).commit();
    return;
  }
 else {
    radarFragment=new RadarFragment();
    radarFragment.setArguments(intent.getExtras());
    getFragmentManager().beginTransaction().replace(R.id.fragment_container,radarFragment).commit();
  }
  ActionBar actionBar=getSupportActionBar();
  if (fullscreen && actionBar != null) {
    getSupportActionBar().hide();
    findViewById(R.id.radarLayout).setPadding(0,0,0,0);
  }
  int index;
switch (source) {
case ""String_Node_Str"":
    radarName=intent.getStringExtra(""String_Node_Str"");
  if (radarName == null)   radarName=getString(R.string.wunderground_title);
break;
case ""String_Node_Str"":
index=Arrays.asList(getResources().getStringArray(R.array.mosaic_values)).indexOf(location);
radarName=getResources().getStringArray(R.array.mosaic_names)[index];
break;
case ""String_Node_Str"":
index=Arrays.asList(getResources().getStringArray(R.array.location_values)).indexOf(location);
radarName=getResources().getStringArray(R.array.location_names)[index];
break;
}
if (intent.getBooleanExtra(""String_Node_Str"",false)) {
radarName=intent.getStringExtra(""String_Node_Str"");
currentFavorite=intent.getIntExtra(""String_Node_Str"",-1);
}
 else radarName=radarName.replaceAll(""String_Node_Str"",""String_Node_Str"");
if (radarName != null) setTitle(radarName);
scheduleRefresh();
}","@Override protected void onCreate(Bundle savedInstanceState){
  Boolean fullscreen=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(""String_Node_Str"",false);
  if (fullscreen) {
    requestWindowFeature(Window.FEATURE_NO_TITLE);
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  super.onCreate(savedInstanceState);
  LayoutInflater inflater=(LayoutInflater)this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (inflater != null) {
    View contentView=inflater.inflate(R.layout.activity_radar,drawerLayout,false);
    drawerLayout.addView(contentView,0);
  }
  navigationView=findViewById(R.id.nav_view);
  Intent intent=getIntent();
  source=intent.getStringExtra(""String_Node_Str"");
  type=intent.getStringExtra(""String_Node_Str"");
  location=intent.getStringExtra(""String_Node_Str"");
  loop=intent.getBooleanExtra(""String_Node_Str"",false);
  enhanced=intent.getBooleanExtra(""String_Node_Str"",false);
  distance=intent.getIntExtra(""String_Node_Str"",50);
  if (source == null)   source=""String_Node_Str"";
  if (type == null)   type=""String_Node_Str"";
  if (location == null)   location=""String_Node_Str"";
  needKey=source.equals(""String_Node_Str"") && !settings.getBoolean(""String_Node_Str"",false);
  if (needKey) {
    NeedKeyFragment needKeyFragment=new NeedKeyFragment();
    getFragmentManager().beginTransaction().replace(R.id.fragment_container,needKeyFragment).commit();
    return;
  }
 else {
    radarFragment=new RadarFragment();
    radarFragment.setArguments(intent.getExtras());
    getFragmentManager().beginTransaction().replace(R.id.fragment_container,radarFragment).commit();
  }
  ActionBar actionBar=getSupportActionBar();
  if (fullscreen && actionBar != null) {
    getSupportActionBar().hide();
    findViewById(R.id.radarLayout).setPadding(0,0,0,0);
  }
  int index;
switch (source) {
case ""String_Node_Str"":
    radarName=intent.getStringExtra(""String_Node_Str"");
  if (radarName == null)   radarName=getString(R.string.wunderground_title);
break;
case ""String_Node_Str"":
index=Arrays.asList(getResources().getStringArray(R.array.mosaic_values)).indexOf(location);
radarName=getResources().getStringArray(R.array.mosaic_names)[index];
break;
case ""String_Node_Str"":
index=Arrays.asList(getResources().getStringArray(R.array.location_values)).indexOf(location);
radarName=getResources().getStringArray(R.array.location_names)[index];
break;
}
if (intent.getBooleanExtra(""String_Node_Str"",false)) {
radarName=intent.getStringExtra(""String_Node_Str"");
currentFavorite=intent.getIntExtra(""String_Node_Str"",-1);
}
 else radarName=radarName.replaceAll(""String_Node_Str"",""String_Node_Str"");
if (radarName != null) setTitle(radarName);
scheduleRefresh();
}"
79915,"@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  final ListPreference selectedFavorite=(ListPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference showFavorite=(CheckBoxPreference)findPreference(""String_Node_Str"");
  AppDatabase settingsDB=AppDatabase.getAppDatabase(getActivity());
  List<Favorite> favorites=settingsDB.favoriteDao().getAll();
  if (favorites.size() == 0) {
    selectedFavorite.setEnabled(false);
    showFavorite.setEnabled(false);
    showFavorite.setChecked(false);
  }
  ArrayList<String> names=new ArrayList<>();
  ArrayList<String> values=new ArrayList<>();
  for (  Favorite favorite : favorites) {
    names.add(favorite.getName());
    values.add(String.valueOf(favorite.getUid()));
  }
  CharSequence[] n=names.toArray(new CharSequence[names.size()]);
  CharSequence[] v=values.toArray(new CharSequence[values.size()]);
  selectedFavorite.setEntries(n);
  selectedFavorite.setEntryValues(v);
  final SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  selectedFavorite.setEnabled(settings.getBoolean(""String_Node_Str"",false));
  showFavorite.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      selectedFavorite.setEnabled(!settings.getBoolean(""String_Node_Str"",false));
      return true;
    }
  }
);
  checkApiKeyStatus(settings,false);
  final EditTextPreference apiKeyEditText=(EditTextPreference)findPreference(""String_Node_Str"");
  final Context context=getActivity().getApplicationContext();
  apiKeyEditText.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      final String apiKey=o.toString();
      if (apiKey.equals(""String_Node_Str"")) {
        SharedPreferences.Editor editor=settings.edit();
        editor.putBoolean(""String_Node_Str"",false);
        editor.apply();
        checkApiKeyStatus(settings,false);
      }
 else {
        AsyncHttpClient client=new AsyncHttpClient();
        String testURL=String.format(""String_Node_Str"" + ""String_Node_Str"",apiKey);
        client.get(testURL,new JsonHttpResponseHandler(){
          @Override public void onSuccess(          int status,          cz.msebera.android.httpclient.Header[] headers,          JSONObject json){
            try {
              String responseString=json.getString(""String_Node_Str"");
              JSONObject response=new JSONObject(responseString);
              String featuresString=response.getString(""String_Node_Str"");
              JSONObject features=new JSONObject(featuresString);
              String success=features.getString(""String_Node_Str"");
              if (success != null) {
                SharedPreferences.Editor editor=settings.edit();
                editor.putBoolean(""String_Node_Str"",true);
                editor.apply();
                Toast.makeText(context,R.string.api_key_activated,Toast.LENGTH_LONG).show();
                checkApiKeyStatus(settings,false);
              }
            }
 catch (            JSONException e) {
              Toast.makeText(context,R.string.api_key_failed,Toast.LENGTH_LONG).show();
              SharedPreferences.Editor editor=settings.edit();
              editor.putBoolean(""String_Node_Str"",false);
              editor.apply();
              checkApiKeyStatus(settings,true);
            }
          }
          @Override public void onFailure(          int status,          cz.msebera.android.httpclient.Header[] h,          Throwable t,          JSONObject e){
            Toast.makeText(context,R.string.connection_error,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      return true;
    }
  }
);
  final ListPreference resEdit=(ListPreference)findPreference(""String_Node_Str"");
  final EditTextPreference custom=(EditTextPreference)findPreference(""String_Node_Str"");
  checkResolution(settings.getString(""String_Node_Str"",getString(R.string.image_resolution_default)),custom);
  resEdit.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      checkResolution(o.toString(),custom);
      return true;
    }
  }
);
  custom.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      String newValue=o.toString();
      if (newValue.matches(""String_Node_Str"")) {
        int value=Integer.parseInt(newValue);
        if (value >= 100 && value <= 4096)         return true;
      }
      Toast.makeText(context,getString(R.string.custom_resolution_error),Toast.LENGTH_LONG).show();
      return false;
    }
  }
);
}","@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  final ListPreference selectedFavorite=(ListPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference showFavorite=(CheckBoxPreference)findPreference(""String_Node_Str"");
  AppDatabase settingsDB=AppDatabase.getAppDatabase(getActivity());
  List<Favorite> favorites=settingsDB.favoriteDao().getAll();
  if (favorites.size() == 0) {
    selectedFavorite.setEnabled(false);
    showFavorite.setEnabled(false);
    showFavorite.setChecked(false);
  }
  ArrayList<String> names=new ArrayList<>();
  ArrayList<String> values=new ArrayList<>();
  for (  Favorite favorite : favorites) {
    names.add(favorite.getName());
    values.add(String.valueOf(favorite.getUid()));
  }
  CharSequence[] n=names.toArray(new CharSequence[names.size()]);
  CharSequence[] v=values.toArray(new CharSequence[values.size()]);
  selectedFavorite.setEntries(n);
  selectedFavorite.setEntryValues(v);
  final SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  selectedFavorite.setEnabled(settings.getBoolean(""String_Node_Str"",false));
  showFavorite.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      selectedFavorite.setEnabled(!settings.getBoolean(""String_Node_Str"",false));
      return true;
    }
  }
);
  checkApiKeyStatus(settings,false,false);
  final EditTextPreference apiKeyEditText=(EditTextPreference)findPreference(""String_Node_Str"");
  final Context context=getActivity().getApplicationContext();
  apiKeyEditText.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      final String apiKey=o.toString();
      if (apiKey.equals(""String_Node_Str"")) {
        SharedPreferences.Editor editor=settings.edit();
        editor.putBoolean(""String_Node_Str"",false);
        editor.apply();
        checkApiKeyStatus(settings,false,false);
      }
 else {
        AsyncHttpClient client=new AsyncHttpClient();
        String testURL=String.format(""String_Node_Str"" + ""String_Node_Str"",apiKey);
        client.get(testURL,new JsonHttpResponseHandler(){
          @Override public void onSuccess(          int status,          cz.msebera.android.httpclient.Header[] headers,          JSONObject json){
            try {
              String responseString=json.getString(""String_Node_Str"");
              JSONObject response=new JSONObject(responseString);
              String featuresString=response.getString(""String_Node_Str"");
              JSONObject features=new JSONObject(featuresString);
              String success=features.getString(""String_Node_Str"");
              if (success != null) {
                SharedPreferences.Editor editor=settings.edit();
                editor.putBoolean(""String_Node_Str"",true);
                editor.apply();
                Toast.makeText(context,R.string.api_key_activated,Toast.LENGTH_LONG).show();
                checkApiKeyStatus(settings,false,true);
              }
            }
 catch (            JSONException e) {
              Toast.makeText(context,R.string.api_key_failed,Toast.LENGTH_LONG).show();
              SharedPreferences.Editor editor=settings.edit();
              editor.putBoolean(""String_Node_Str"",false);
              editor.apply();
              checkApiKeyStatus(settings,true,true);
            }
          }
          @Override public void onFailure(          int status,          cz.msebera.android.httpclient.Header[] h,          Throwable t,          JSONObject e){
            Toast.makeText(context,R.string.connection_error,Toast.LENGTH_LONG).show();
          }
        }
);
      }
      return true;
    }
  }
);
  final ListPreference resEdit=(ListPreference)findPreference(""String_Node_Str"");
  final EditTextPreference custom=(EditTextPreference)findPreference(""String_Node_Str"");
  checkResolution(settings.getString(""String_Node_Str"",getString(R.string.image_resolution_default)),custom);
  resEdit.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      checkResolution(o.toString(),custom);
      return true;
    }
  }
);
  custom.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      String newValue=o.toString();
      if (newValue.matches(""String_Node_Str"")) {
        int value=Integer.parseInt(newValue);
        if (value >= 100 && value <= 4096)         return true;
      }
      Toast.makeText(context,getString(R.string.custom_resolution_error),Toast.LENGTH_LONG).show();
      return false;
    }
  }
);
}"
79916,"private void checkApiKeyStatus(SharedPreferences settings,Boolean failed){
  if (!isAdded())   return;
  EditTextPreference apiKey=(EditTextPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference timeLabel=(CheckBoxPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference snow=(CheckBoxPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference smoothing=(CheckBoxPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference noclutter=(CheckBoxPreference)findPreference(""String_Node_Str"");
  ListPreference resolution=(ListPreference)findPreference(""String_Node_Str"");
  ListPreference speed=(ListPreference)findPreference(""String_Node_Str"");
  ListPreference frames=(ListPreference)findPreference(""String_Node_Str"");
  ListPreference units=(ListPreference)findPreference(""String_Node_Str"");
  EditTextPreference custom=(EditTextPreference)findPreference(""String_Node_Str"");
  String resCurrent=settings.getString(""String_Node_Str"",getString(R.string.image_resolution_default));
  String currentKey=apiKey.getText();
  if (currentKey == null)   currentKey=""String_Node_Str"";
  if (settings.getBoolean(""String_Node_Str"",false)) {
    apiKey.setSummary(R.string.api_key_activated);
    timeLabel.setEnabled(true);
    snow.setEnabled(true);
    smoothing.setEnabled(true);
    noclutter.setEnabled(true);
    resolution.setEnabled(true);
    speed.setEnabled(true);
    frames.setEnabled(true);
    units.setEnabled(true);
    if (resCurrent.equals(""String_Node_Str""))     custom.setEnabled(true);
  }
 else {
    if (failed || !currentKey.equals(""String_Node_Str""))     apiKey.setSummary(R.string.api_key_error);
 else     apiKey.setSummary(R.string.api_key_summary);
    timeLabel.setEnabled(false);
    snow.setEnabled(false);
    smoothing.setEnabled(false);
    noclutter.setEnabled(false);
    resolution.setEnabled(false);
    speed.setEnabled(false);
    frames.setEnabled(false);
    units.setEnabled(false);
    custom.setEnabled(false);
  }
}","private void checkApiKeyStatus(SharedPreferences settings,Boolean failed,Boolean async){
  if (async && !isAdded())   return;
  EditTextPreference apiKey=(EditTextPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference timeLabel=(CheckBoxPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference snow=(CheckBoxPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference smoothing=(CheckBoxPreference)findPreference(""String_Node_Str"");
  CheckBoxPreference noclutter=(CheckBoxPreference)findPreference(""String_Node_Str"");
  ListPreference resolution=(ListPreference)findPreference(""String_Node_Str"");
  ListPreference speed=(ListPreference)findPreference(""String_Node_Str"");
  ListPreference frames=(ListPreference)findPreference(""String_Node_Str"");
  ListPreference units=(ListPreference)findPreference(""String_Node_Str"");
  EditTextPreference custom=(EditTextPreference)findPreference(""String_Node_Str"");
  String resCurrent=settings.getString(""String_Node_Str"",getString(R.string.image_resolution_default));
  String currentKey=apiKey.getText();
  if (currentKey == null)   currentKey=""String_Node_Str"";
  if (settings.getBoolean(""String_Node_Str"",false)) {
    apiKey.setSummary(R.string.api_key_activated);
    timeLabel.setEnabled(true);
    snow.setEnabled(true);
    smoothing.setEnabled(true);
    noclutter.setEnabled(true);
    resolution.setEnabled(true);
    speed.setEnabled(true);
    frames.setEnabled(true);
    units.setEnabled(true);
    if (resCurrent.equals(""String_Node_Str""))     custom.setEnabled(true);
  }
 else {
    if (failed || !currentKey.equals(""String_Node_Str""))     apiKey.setSummary(R.string.api_key_error);
 else     apiKey.setSummary(R.string.api_key_summary);
    timeLabel.setEnabled(false);
    snow.setEnabled(false);
    smoothing.setEnabled(false);
    noclutter.setEnabled(false);
    resolution.setEnabled(false);
    speed.setEnabled(false);
    frames.setEnabled(false);
    units.setEnabled(false);
    custom.setEnabled(false);
  }
}"
79917,"@Override public void onSuccess(int status,cz.msebera.android.httpclient.Header[] headers,JSONObject json){
  try {
    String responseString=json.getString(""String_Node_Str"");
    JSONObject response=new JSONObject(responseString);
    String featuresString=response.getString(""String_Node_Str"");
    JSONObject features=new JSONObject(featuresString);
    String success=features.getString(""String_Node_Str"");
    if (success != null) {
      SharedPreferences.Editor editor=settings.edit();
      editor.putBoolean(""String_Node_Str"",true);
      editor.apply();
      Toast.makeText(context,R.string.api_key_activated,Toast.LENGTH_LONG).show();
      checkApiKeyStatus(settings,false);
    }
  }
 catch (  JSONException e) {
    Toast.makeText(context,R.string.api_key_failed,Toast.LENGTH_LONG).show();
    SharedPreferences.Editor editor=settings.edit();
    editor.putBoolean(""String_Node_Str"",false);
    editor.apply();
    checkApiKeyStatus(settings,true);
  }
}","@Override public void onSuccess(int status,cz.msebera.android.httpclient.Header[] headers,JSONObject json){
  try {
    String responseString=json.getString(""String_Node_Str"");
    JSONObject response=new JSONObject(responseString);
    String featuresString=response.getString(""String_Node_Str"");
    JSONObject features=new JSONObject(featuresString);
    String success=features.getString(""String_Node_Str"");
    if (success != null) {
      SharedPreferences.Editor editor=settings.edit();
      editor.putBoolean(""String_Node_Str"",true);
      editor.apply();
      Toast.makeText(context,R.string.api_key_activated,Toast.LENGTH_LONG).show();
      checkApiKeyStatus(settings,false,true);
    }
  }
 catch (  JSONException e) {
    Toast.makeText(context,R.string.api_key_failed,Toast.LENGTH_LONG).show();
    SharedPreferences.Editor editor=settings.edit();
    editor.putBoolean(""String_Node_Str"",false);
    editor.apply();
    checkApiKeyStatus(settings,true,true);
  }
}"
79918,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  LayoutInflater inflater=(LayoutInflater)this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (inflater != null) {
    View contentView=inflater.inflate(R.layout.activity_about,mDrawerLayout,false);
    mDrawerLayout.addView(contentView,0);
  }
  setTitle(R.string.about);
  final TextView about=findViewById(R.id.about_text);
  AndroidTemplates loader=new AndroidTemplates(getBaseContext());
  Theme theme=new Theme(loader);
  final Chunk html=theme.makeChunk(""String_Node_Str"");
  final ViewTreeObserver observer=about.getViewTreeObserver();
  observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      Html.ImageGetter imageGetter=new Html.ImageGetter(){
        public Drawable getDrawable(        String source){
          Drawable d=getResources().getDrawable(R.mipmap.wunderground);
          int viewWidth=about.getWidth();
          int width=Math.round(viewWidth * 4 / 5);
          Float ratio=(float)d.getIntrinsicHeight() / d.getIntrinsicWidth();
          int height=Math.round(width * ratio);
          d.setBounds(0,0,width,height);
          return d;
        }
      }
;
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
        about.setText(Html.fromHtml(html.toString(),Html.FROM_HTML_MODE_LEGACY,imageGetter,null));
      }
 else {
        about.setText(Html.fromHtml(html.toString(),imageGetter,null));
      }
      about.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  LayoutInflater inflater=(LayoutInflater)this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  if (inflater != null) {
    View contentView=inflater.inflate(R.layout.activity_about,mDrawerLayout,false);
    mDrawerLayout.addView(contentView,0);
  }
  setTitle(R.string.about);
  final TextView about=findViewById(R.id.about_text);
  AndroidTemplates loader=new AndroidTemplates(getBaseContext());
  Theme theme=new Theme(loader);
  final Chunk html=theme.makeChunk(""String_Node_Str"");
  final ViewTreeObserver observer=about.getViewTreeObserver();
  observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      Html.ImageGetter imageGetter=new Html.ImageGetter(){
        public Drawable getDrawable(        String source){
          Drawable d=getResources().getDrawable(R.mipmap.wunderground);
          int viewWidth=about.getWidth();
          int width=Math.round(viewWidth * 4 / 5);
          if (width > 770)           width=770;
          Float ratio=(float)d.getIntrinsicHeight() / d.getIntrinsicWidth();
          int height=Math.round(width * ratio);
          d.setBounds(0,0,width,height);
          return d;
        }
      }
;
      if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
        about.setText(Html.fromHtml(html.toString(),Html.FROM_HTML_MODE_LEGACY,imageGetter,null));
      }
 else {
        about.setText(Html.fromHtml(html.toString(),imageGetter,null));
      }
      about.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
);
}"
79919,"public Drawable getDrawable(String source){
  Drawable d=getResources().getDrawable(R.mipmap.wunderground);
  int viewWidth=about.getWidth();
  int width=Math.round(viewWidth * 4 / 5);
  Float ratio=(float)d.getIntrinsicHeight() / d.getIntrinsicWidth();
  int height=Math.round(width * ratio);
  d.setBounds(0,0,width,height);
  return d;
}","public Drawable getDrawable(String source){
  Drawable d=getResources().getDrawable(R.mipmap.wunderground);
  int viewWidth=about.getWidth();
  int width=Math.round(viewWidth * 4 / 5);
  if (width > 770)   width=770;
  Float ratio=(float)d.getIntrinsicHeight() / d.getIntrinsicWidth();
  int height=Math.round(width * ratio);
  d.setBounds(0,0,width,height);
  return d;
}"
79920,"@Override public void onGlobalLayout(){
  Html.ImageGetter imageGetter=new Html.ImageGetter(){
    public Drawable getDrawable(    String source){
      Drawable d=getResources().getDrawable(R.mipmap.wunderground);
      int viewWidth=about.getWidth();
      int width=Math.round(viewWidth * 4 / 5);
      Float ratio=(float)d.getIntrinsicHeight() / d.getIntrinsicWidth();
      int height=Math.round(width * ratio);
      d.setBounds(0,0,width,height);
      return d;
    }
  }
;
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
    about.setText(Html.fromHtml(html.toString(),Html.FROM_HTML_MODE_LEGACY,imageGetter,null));
  }
 else {
    about.setText(Html.fromHtml(html.toString(),imageGetter,null));
  }
  about.setMovementMethod(LinkMovementMethod.getInstance());
}","@Override public void onGlobalLayout(){
  Html.ImageGetter imageGetter=new Html.ImageGetter(){
    public Drawable getDrawable(    String source){
      Drawable d=getResources().getDrawable(R.mipmap.wunderground);
      int viewWidth=about.getWidth();
      int width=Math.round(viewWidth * 4 / 5);
      if (width > 770)       width=770;
      Float ratio=(float)d.getIntrinsicHeight() / d.getIntrinsicWidth();
      int height=Math.round(width * ratio);
      d.setBounds(0,0,width,height);
      return d;
    }
  }
;
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
    about.setText(Html.fromHtml(html.toString(),Html.FROM_HTML_MODE_LEGACY,imageGetter,null));
  }
 else {
    about.setText(Html.fromHtml(html.toString(),imageGetter,null));
  }
  about.setMovementMethod(LinkMovementMethod.getInstance());
}"
79921,"@Override protected void onResume(){
  super.onResume();
  if (settings.getBoolean(""String_Node_Str"",false)) {
    viewButton.setText(R.string.view_wunderground_image);
    viewButton.setEnabled(true);
  }
}","@Override protected void onResume(){
  super.onResume();
  if (settings.getBoolean(""String_Node_Str"",false) && viewButton != null) {
    viewButton.setText(R.string.view_wunderground_image);
    viewButton.setEnabled(true);
  }
}"
79922,"@Override public void onClick(View view){
  Intent settingsIntent=new Intent(getActivity(),SettingsActivity.class);
  startActivityForResult(settingsIntent,1);
}","@Override public void onClick(View view){
  if (callback != null)   callback.openSettings();
}"
79923,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_key_missing,container,false);
  Button needKey=view.findViewById(R.id.needKeyButton);
  needKey.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent browser=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      startActivity(browser);
    }
  }
);
  Button openSettings=view.findViewById(R.id.openSettingsButton);
  openSettings.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent settingsIntent=new Intent(getActivity(),SettingsActivity.class);
      startActivityForResult(settingsIntent,1);
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_key_missing,container,false);
  Button needKey=view.findViewById(R.id.needKeyButton);
  needKey.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent browser=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str""));
      startActivity(browser);
    }
  }
);
  Button openSettings=view.findViewById(R.id.openSettingsButton);
  openSettings.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (callback != null)       callback.openSettings();
    }
  }
);
  return view;
}"
79924,"private void initializeMenu(Menu menu){
  getMenuInflater().inflate(R.menu.radar_actions,menu);
  addFavorite=menu.findItem(R.id.action_add_favorite);
  removeFavorite=menu.findItem(R.id.action_remove_favorite);
  MenuItem refresh=menu.findItem(R.id.action_refresh);
  List<Favorite> favorites=settingsDB.favoriteDao().findByData(source,location,type,loop,enhanced,distance);
  if (favorites.size() > 0) {
    addFavorite.setVisible(false);
    currentFavorite=favorites.get(0).getUid();
  }
 else {
    removeFavorite.setVisible(false);
  }
  if (needKey)   refresh.setVisible(false);
}","private void initializeMenu(Menu menu){
  getMenuInflater().inflate(R.menu.radar_actions,menu);
  addFavorite=menu.findItem(R.id.action_add_favorite);
  removeFavorite=menu.findItem(R.id.action_remove_favorite);
  MenuItem refresh=menu.findItem(R.id.action_refresh);
  List<Favorite> favorites=settingsDB.favoriteDao().findByData(source,location,type,loop,enhanced,distance);
  if (favorites.size() > 0) {
    addFavorite.setVisible(false);
    if (!needKey)     currentFavorite=favorites.get(0).getUid();
  }
 else {
    removeFavorite.setVisible(false);
  }
  if (needKey)   refresh.setVisible(false);
}"
79925,"private void scheduleRefresh(){
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  timer=new Timer();
  refreshed=true;
  timer.schedule(new TimerTask(){
    @Override public void run(){
      refreshed=false;
    }
  }
,1000 * 60 * 5);
}","private void scheduleRefresh(){
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  timer=new Timer();
  refreshed=true;
  timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      refreshed=false;
    }
  }
,1000 * 60 * 5,1000 * 60 * 5);
}"
79926,"@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  AppDatabase settingsDB=AppDatabase.getAppDatabase(getActivity());
  List<Favorite> favorites=settingsDB.favoriteDao().getAll();
  final ListPreference selectedFavorite=(ListPreference)findPreference(""String_Node_Str"");
  ArrayList<String> names=new ArrayList<>();
  ArrayList<String> values=new ArrayList<>();
  for (  Favorite favorite : favorites) {
    names.add(favorite.getName());
    values.add(String.valueOf(favorite.getUid()));
  }
  CharSequence[] n=names.toArray(new CharSequence[names.size()]);
  CharSequence[] v=values.toArray(new CharSequence[values.size()]);
  selectedFavorite.setEntries(n);
  selectedFavorite.setEntryValues(v);
  final SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  selectedFavorite.setEnabled(settings.getBoolean(""String_Node_Str"",false));
  CheckBoxPreference showFavorite=(CheckBoxPreference)findPreference(""String_Node_Str"");
  showFavorite.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      selectedFavorite.setEnabled(!settings.getBoolean(""String_Node_Str"",false));
      return true;
    }
  }
);
}","@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  final ListPreference selectedFavorite=(ListPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference showFavorite=(CheckBoxPreference)findPreference(""String_Node_Str"");
  AppDatabase settingsDB=AppDatabase.getAppDatabase(getActivity());
  List<Favorite> favorites=settingsDB.favoriteDao().getAll();
  if (favorites.size() == 0) {
    selectedFavorite.setEnabled(false);
    showFavorite.setEnabled(false);
    showFavorite.setChecked(false);
  }
  ArrayList<String> names=new ArrayList<>();
  ArrayList<String> values=new ArrayList<>();
  for (  Favorite favorite : favorites) {
    names.add(favorite.getName());
    values.add(String.valueOf(favorite.getUid()));
  }
  CharSequence[] n=names.toArray(new CharSequence[names.size()]);
  CharSequence[] v=values.toArray(new CharSequence[values.size()]);
  selectedFavorite.setEntries(n);
  selectedFavorite.setEntryValues(v);
  final SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getActivity());
  selectedFavorite.setEnabled(settings.getBoolean(""String_Node_Str"",false));
  showFavorite.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object o){
      selectedFavorite.setEnabled(!settings.getBoolean(""String_Node_Str"",false));
      return true;
    }
  }
);
}"
79927,"/** 
 * Flux.generate( (Consumer<SynchronousSink<WebSocketMessage>>) sink -> sink.next(session.textMessage(""Hello "" + System.currentTimeMillis())) ).delayElements(Duration.ofSeconds(1))
 * @return
 */
private double randomDelta(){
  state+=ThreadLocalRandom.current().nextDouble(-2.0,5.0);
  return 0.0;
}","private double randomDelta(){
  return ThreadLocalRandom.current().nextDouble(-2.0,5.0);
}"
79928,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_resume);
  idSessione=getIntent().getLongExtra(ExtrasDefinition.ID_TOKEN,EXTRA_DEFAULT_VALUE);
  if (idSessione == EXTRA_DEFAULT_VALUE) {
    SessionValidator.finishSession(this,idSessione);
  }
  startSession=getIntent().getStringExtra(ExtrasDefinition.START_SESSION);
  if (startSession == null) {
    SessionValidator.finishSession(this,idSessione);
  }
 else   if (SessionValidator.isExpired(startSession)) {
    SessioneQueries.endSession(idSessione);
    SessionValidator.finishSession(this,idSessione);
  }
  final int idProgrammazione=getIntent().getIntExtra(ExtrasDefinition.ID_PROGRAMMAZIONE,EXTRA_DEFAULT_VALUE);
  if (idProgrammazione == EXTRA_DEFAULT_VALUE) {
    SessionValidator.finishSession(this,idSessione);
  }
  idUtente=getIntent().getIntExtra(ExtrasDefinition.ID_UTENTE,EXTRA_DEFAULT_VALUE);
  if (idUtente == EXTRA_DEFAULT_VALUE) {
    SessionValidator.finishSession(this,idSessione);
  }
  posti=getIntent().getIntegerArrayListExtra(ExtrasDefinition.POSTI_PRENOTARE);
  if (posti == null || posti.isEmpty()) {
    SessionValidator.finishSession(this,idSessione);
  }
  TextView tvTitolo=findViewById(R.id.tvTitolo);
  TextView tvData=findViewById(R.id.tvData);
  TextView tvOra=findViewById(R.id.tvOrarioLabel);
  TextView tvSala=findViewById(R.id.tvSala);
  TextView tvIdSessione=findViewById(R.id.tvId);
  TextView tvPostiPrenotati=findViewById(R.id.tvPosti);
  tvIdSessione.setText(""String_Node_Str"" + idSessione);
  ConstraintLayout resumeContainer=findViewById(R.id.resumeContainer);
  prenotatoContainer=findViewById(R.id.doneReveal);
  Programmazione pr=ProgrammazioneQueries.getProgrammmazione(idProgrammazione);
  if (pr == null) {
    SessionValidator.finishSession(this,idSessione);
  }
  Film film=FilmQueries.getFilm(pr.getIdFilm());
  Sala s=SalaQueries.getSala(pr.getIdSala());
  tvSala.setText(s.getNome());
  if (film != null) {
    tvTitolo.setText(film.getTitolo());
    try {
      tvData.setText(DateParser.getFormattedDate(pr.getData()));
    }
 catch (    ParseException e) {
      tvData.setText(pr.getData());
    }
    tvOra.setText(pr.getOra());
  }
  String charDelimit=""String_Node_Str"";
  StringBuilder postiString=new StringBuilder();
  for (int i=0; i < posti.size(); i++) {
    postiString.append(posti.get(i));
    if (i != posti.size() - 1) {
      postiString.append(charDelimit);
    }
  }
  tvPostiPrenotati.setText(postiString.toString());
  Snackbar.make(findViewById(R.id.resume_container_1),R.string.hintPrenotazione,Snackbar.LENGTH_LONG).show();
  ImageView qrCode=findViewById(R.id.qrCode);
  qrCode.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      View dialog=getLayoutInflater().inflate(R.layout.dialog_show_qr_barcode,null);
      ((ImageView)dialog).setImageDrawable(ContextCompat.getDrawable(getApplicationContext(),R.drawable.qr_code));
      new AlertDialog.Builder(ResumeActivity.this).setView(dialog).show();
    }
  }
);
  ImageView barcode=findViewById(R.id.barcode);
  barcode.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      View dialog=getLayoutInflater().inflate(R.layout.dialog_show_qr_barcode,null);
      ((ImageView)dialog).setImageDrawable(ContextCompat.getDrawable(getApplicationContext(),R.drawable.barcode));
      new AlertDialog.Builder(ResumeActivity.this).setView(dialog).show();
    }
  }
);
  resumeContainer.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (!isBigliettoComprato) {
        daAcquistare=true;
        Vibrator vibe=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        if (vibe != null) {
          vibe.vibrate(VIBRATION_DURATE);
        }
        doRevealAnimation();
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Snackbar snack=Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackConfermaPrenotazione,Snackbar.LENGTH_LONG);
            snack.setAction(android.R.string.cancel,new View.OnClickListener(){
              @Override public void onClick(              View v){
                daAcquistare=false;
              }
            }
);
            snack.setDuration(SNACKBAR_CONFERMA_DURATION);
            snack.show();
            new Handler().postDelayed(new Runnable(){
              @Override public void run(){
                if (daAcquistare) {
                  long idPrenotazione=PrenotazioneQueries.addPrenotazione(new Prenotazione(0,idProgrammazione,idUtente));
                  for (                  Integer index : posti) {
                    PostoPrenotato p=new PostoPrenotato(0,(int)idPrenotazione,index);
                    PostoPrenotatoQueries.addPostoPrenotato(p);
                    isBigliettoComprato=!isBigliettoComprato;
                  }
                }
 else {
                  Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackAnnullataPrenotazione,Snackbar.LENGTH_LONG).show();
                }
              }
            }
,SNACKBAR_CONFERMA_DURATION);
          }
        }
,ANIMATION_DURATION + SECOND_ANIM_DURATION);
      }
      return true;
    }
  }
);
  resumeContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isBigliettoComprato) {
        Snackbar.make(findViewById(R.id.resume_container_1),R.string.hintPrenotazioneEffettuata,Snackbar.LENGTH_LONG).show();
      }
 else {
        Snackbar.make(findViewById(R.id.resume_container_1),R.string.hintPrenotazione,Snackbar.LENGTH_LONG).show();
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_resume);
  idSessione=getIntent().getLongExtra(ExtrasDefinition.ID_TOKEN,EXTRA_DEFAULT_VALUE);
  if (idSessione == EXTRA_DEFAULT_VALUE) {
    SessionValidator.finishSession(this,idSessione);
  }
  startSession=getIntent().getStringExtra(ExtrasDefinition.START_SESSION);
  if (startSession == null) {
    SessionValidator.finishSession(this,idSessione);
  }
 else   if (SessionValidator.isExpired(startSession)) {
    SessioneQueries.endSession(idSessione);
    SessionValidator.finishSession(this,idSessione);
  }
  final int idProgrammazione=getIntent().getIntExtra(ExtrasDefinition.ID_PROGRAMMAZIONE,EXTRA_DEFAULT_VALUE);
  if (idProgrammazione == EXTRA_DEFAULT_VALUE) {
    SessionValidator.finishSession(this,idSessione);
  }
  idUtente=getIntent().getIntExtra(ExtrasDefinition.ID_UTENTE,EXTRA_DEFAULT_VALUE);
  if (idUtente == EXTRA_DEFAULT_VALUE) {
    SessionValidator.finishSession(this,idSessione);
  }
  posti=getIntent().getIntegerArrayListExtra(ExtrasDefinition.POSTI_PRENOTARE);
  if (posti == null || posti.isEmpty()) {
    SessionValidator.finishSession(this,idSessione);
  }
  TextView tvTitolo=findViewById(R.id.tvTitolo);
  TextView tvData=findViewById(R.id.tvData);
  TextView tvOra=findViewById(R.id.tvOrarioLabel);
  TextView tvSala=findViewById(R.id.tvSala);
  TextView tvIdSessione=findViewById(R.id.tvId);
  TextView tvPostiPrenotati=findViewById(R.id.tvPosti);
  tvIdSessione.setText(""String_Node_Str"" + idSessione);
  ConstraintLayout resumeContainer=findViewById(R.id.resumeContainer);
  prenotatoContainer=findViewById(R.id.doneReveal);
  Programmazione pr=ProgrammazioneQueries.getProgrammmazione(idProgrammazione);
  if (pr == null) {
    SessionValidator.finishSession(this,idSessione);
  }
  Film film=FilmQueries.getFilm(pr.getIdFilm());
  Sala s=SalaQueries.getSala(pr.getIdSala());
  tvSala.setText(s.getNome());
  if (film != null) {
    tvTitolo.setText(film.getTitolo());
    try {
      tvData.setText(DateParser.getFormattedDate(pr.getData()));
    }
 catch (    ParseException e) {
      tvData.setText(pr.getData());
    }
    tvOra.setText(pr.getOra());
  }
  String charDelimit=""String_Node_Str"";
  StringBuilder postiString=new StringBuilder();
  for (int i=0; i < posti.size(); i++) {
    postiString.append(posti.get(i));
    if (i != posti.size() - 1) {
      postiString.append(charDelimit);
    }
  }
  tvPostiPrenotati.setText(postiString.toString());
  Snackbar.make(findViewById(R.id.resume_container_1),R.string.hintPrenotazione,Snackbar.LENGTH_LONG).show();
  ImageView qrCode=findViewById(R.id.qrCode);
  qrCode.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      View dialog=getLayoutInflater().inflate(R.layout.dialog_show_qr_barcode,null);
      ((ImageView)dialog).setImageDrawable(ContextCompat.getDrawable(getApplicationContext(),R.drawable.qr_code));
      new AlertDialog.Builder(ResumeActivity.this).setView(dialog).show();
    }
  }
);
  ImageView barcode=findViewById(R.id.barcode);
  barcode.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      View dialog=getLayoutInflater().inflate(R.layout.dialog_show_qr_barcode,null);
      ((ImageView)dialog).setImageDrawable(ContextCompat.getDrawable(getApplicationContext(),R.drawable.barcode));
      new AlertDialog.Builder(ResumeActivity.this).setView(dialog).show();
    }
  }
);
  resumeContainer.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (!isBigliettoComprato) {
        daAcquistare=true;
        Vibrator vibe=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        if (vibe != null) {
          vibe.vibrate(VIBRATION_DURATE);
        }
        doRevealAnimation();
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Snackbar snack=Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackConfermaPrenotazione,Snackbar.LENGTH_LONG);
            snack.setAction(android.R.string.cancel,new View.OnClickListener(){
              @Override public void onClick(              View v){
                daAcquistare=false;
              }
            }
);
            snack.setDuration(SNACKBAR_CONFERMA_DURATION);
            snack.show();
            new Handler().postDelayed(new Runnable(){
              @Override public void run(){
                if (daAcquistare) {
                  long idPrenotazione=PrenotazioneQueries.addPrenotazione(new Prenotazione(0,idProgrammazione,idUtente));
                  for (                  Integer index : posti) {
                    PostoPrenotato p=new PostoPrenotato(0,(int)idPrenotazione,index);
                    PostoPrenotatoQueries.addPostoPrenotato(p);
                  }
                  isBigliettoComprato=!isBigliettoComprato;
                }
 else {
                  Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackAnnullataPrenotazione,Snackbar.LENGTH_LONG).show();
                }
              }
            }
,SNACKBAR_CONFERMA_DURATION);
          }
        }
,ANIMATION_DURATION + SECOND_ANIM_DURATION);
      }
      return true;
    }
  }
);
  resumeContainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isBigliettoComprato) {
        Snackbar.make(findViewById(R.id.resume_container_1),R.string.hintPrenotazioneEffettuata,Snackbar.LENGTH_LONG).show();
      }
 else {
        Snackbar.make(findViewById(R.id.resume_container_1),R.string.hintPrenotazione,Snackbar.LENGTH_LONG).show();
      }
    }
  }
);
}"
79929,"@Override public boolean onLongClick(View v){
  if (!isBigliettoComprato) {
    daAcquistare=true;
    Vibrator vibe=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
    if (vibe != null) {
      vibe.vibrate(VIBRATION_DURATE);
    }
    doRevealAnimation();
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        Snackbar snack=Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackConfermaPrenotazione,Snackbar.LENGTH_LONG);
        snack.setAction(android.R.string.cancel,new View.OnClickListener(){
          @Override public void onClick(          View v){
            daAcquistare=false;
          }
        }
);
        snack.setDuration(SNACKBAR_CONFERMA_DURATION);
        snack.show();
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            if (daAcquistare) {
              long idPrenotazione=PrenotazioneQueries.addPrenotazione(new Prenotazione(0,idProgrammazione,idUtente));
              for (              Integer index : posti) {
                PostoPrenotato p=new PostoPrenotato(0,(int)idPrenotazione,index);
                PostoPrenotatoQueries.addPostoPrenotato(p);
                isBigliettoComprato=!isBigliettoComprato;
              }
            }
 else {
              Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackAnnullataPrenotazione,Snackbar.LENGTH_LONG).show();
            }
          }
        }
,SNACKBAR_CONFERMA_DURATION);
      }
    }
,ANIMATION_DURATION + SECOND_ANIM_DURATION);
  }
  return true;
}","@Override public boolean onLongClick(View v){
  if (!isBigliettoComprato) {
    daAcquistare=true;
    Vibrator vibe=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
    if (vibe != null) {
      vibe.vibrate(VIBRATION_DURATE);
    }
    doRevealAnimation();
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        Snackbar snack=Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackConfermaPrenotazione,Snackbar.LENGTH_LONG);
        snack.setAction(android.R.string.cancel,new View.OnClickListener(){
          @Override public void onClick(          View v){
            daAcquistare=false;
          }
        }
);
        snack.setDuration(SNACKBAR_CONFERMA_DURATION);
        snack.show();
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            if (daAcquistare) {
              long idPrenotazione=PrenotazioneQueries.addPrenotazione(new Prenotazione(0,idProgrammazione,idUtente));
              for (              Integer index : posti) {
                PostoPrenotato p=new PostoPrenotato(0,(int)idPrenotazione,index);
                PostoPrenotatoQueries.addPostoPrenotato(p);
              }
              isBigliettoComprato=!isBigliettoComprato;
            }
 else {
              Snackbar.make(findViewById(R.id.resume_container_1),R.string.snackAnnullataPrenotazione,Snackbar.LENGTH_LONG).show();
            }
          }
        }
,SNACKBAR_CONFERMA_DURATION);
      }
    }
,ANIMATION_DURATION + SECOND_ANIM_DURATION);
  }
  return true;
}"
79930,"private boolean quantumLocking(){
  if (!WAConfig.angels.angelLocking)   return false;
  if (ticksExisted % 5 == 0) {
    List<EntityQuantumLockBase> entityList=world.getEntitiesWithinAABB(EntityQuantumLockBase.class,getEntityBoundingBox().grow(32.0D));
    if (entityList.isEmpty()) {
      return false;
    }
    for (    EntityQuantumLockBase viewer : entityList) {
      if (viewer != this && !world.isRemote) {
        if (viewer instanceof EntityWeepingAngel) {
          EntityWeepingAngel angelViewer=(EntityWeepingAngel)viewer;
          if (angelViewer.getPose().equals(PoseManager.AngelPoses.HIDING_FACE.toString())) {
          }
        }
        boolean viewed=AngelUtils.isInSight(viewer,this);
        if (viewed) {
          setSeenTime(getSeenTime() + 1);
        }
 else {
          setSeenTime(0);
        }
        return viewed;
      }
    }
  }
  return false;
}","private boolean quantumLocking(){
  if (!WAConfig.angels.angelLocking)   return false;
  if (ticksExisted % 5 == 0) {
    for (    EntityQuantumLockBase viewer : world.getEntitiesWithinAABB(EntityQuantumLockBase.class,getEntityBoundingBox().grow(32.0D))) {
      if (viewer != this && !world.isRemote) {
        if (viewer instanceof EntityWeepingAngel) {
          EntityWeepingAngel angelViewer=(EntityWeepingAngel)viewer;
          if (angelViewer.getPose().equals(PoseManager.AngelPoses.HIDING_FACE.toString())) {
            return false;
          }
        }
        boolean viewed=AngelUtils.isInSight(viewer,this);
        if (viewed) {
          setSeenTime(getSeenTime() + 1);
        }
 else {
          setSeenTime(0);
        }
        return viewed;
      }
    }
  }
  return false;
}"
79931,"@Override public void render(Entity entityIn,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  setRotationAngles(limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale,entityIn);
  this.head_2.render(scale);
  this.head.render(scale);
  GlStateManager.pushMatrix();
  GL11.glEnable(GL11.GL_CULL_FACE);
  GlStateManager.translate(this.body.offsetX,this.body.offsetY,this.body.offsetZ);
  GlStateManager.translate(this.body.rotationPointX * scale,this.body.rotationPointY * scale,this.body.rotationPointZ * scale);
  GlStateManager.scale(0.7D,0.7D,0.7D);
  GlStateManager.translate(-this.body.offsetX,-this.body.offsetY,-this.body.offsetZ);
  GlStateManager.translate(-this.body.rotationPointX * scale,-this.body.rotationPointY * scale,-this.body.rotationPointZ * scale);
  this.body.render(scale);
  GL11.glDisable(GL11.GL_CULL_FACE);
  GlStateManager.popMatrix();
}","@Override public void render(Entity entityIn,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  if (entityIn instanceof EntityAngel) {
    EntityAngel angel=(EntityAngel)entityIn;
    if (angel.getSeenTime() == 1) {
      angelAngles(limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale,entityIn);
    }
  }
  this.head_2.render(scale);
  this.head.render(scale);
  GlStateManager.pushMatrix();
  GL11.glEnable(GL11.GL_CULL_FACE);
  GlStateManager.translate(this.body.offsetX,this.body.offsetY,this.body.offsetZ);
  GlStateManager.translate(this.body.rotationPointX * scale,this.body.rotationPointY * scale,this.body.rotationPointZ * scale);
  GlStateManager.scale(0.7D,0.7D,0.7D);
  GlStateManager.translate(-this.body.offsetX,-this.body.offsetY,-this.body.offsetZ);
  GlStateManager.translate(-this.body.rotationPointX * scale,-this.body.rotationPointY * scale,-this.body.rotationPointZ * scale);
  this.body.render(scale);
  GL11.glDisable(GL11.GL_CULL_FACE);
  GlStateManager.popMatrix();
}"
79932,"public static AngelPoses getBestPoseForSituation(EntityAngel angel,EntityPlayer player){
  if (angel.getDistance(player) < 1.0F) {
    return AngelPoses.ANGRY;
  }
  if (angel.getDistance(player) < 5.0F) {
    return AngelPoses.ANGRY_TWO;
  }
  if (angel.getDistance(player) < 10.0F) {
    return AngelPoses.OPEN_ARMS;
  }
  if (angel.getDistance(player) < 15.0F) {
    return AngelPoses.THINKING;
  }
  if (angel.getDistance(player) < 25.0F) {
    return AngelPoses.SHY;
  }
  return AngelPoses.DAB;
}","public static AngelPoses getBestPoseForSituation(EntityAngel angel,EntityLivingBase player){
  if (angel.getDistance(player) < 1.0F) {
    return AngelPoses.ANGRY;
  }
  if (angel.getDistance(player) < 5.0F) {
    return AngelPoses.ANGRY_TWO;
  }
  if (angel.getDistance(player) < 10.0F) {
    return AngelPoses.OPEN_ARMS;
  }
  if (angel.getDistance(player) < 15.0F) {
    return AngelPoses.THINKING;
  }
  if (angel.getDistance(player) < 25.0F) {
    return AngelPoses.SHY;
  }
  return AngelPoses.DAB;
}"
79933,"public EventAngelSeen(EntityPlayer player,EntityAngel angel){
  this.player=player;
  this.angel=angel;
}","public EventAngelSeen(EntityLivingBase entity,EntityAngel angel){
  this.entity=entity;
  this.angel=angel;
}"
79934,"public WorldGenArms(Block arm){
  this.arm=arm;
  this.state=arm.getDefaultState();
}","public WorldGenArms(){
  this.state=WAObjects.WABlocks.angelArm.getDefaultState();
}"
79935,"@SubscribeEvent public static void decorateBiomeEvent(DecorateBiomeEvent e){
  if (e.getWorld().getBiome(e.getPos()).isSnowyBiome()) {
    WorldGenArms arms=new WorldGenArms(WAObjects.WABlocks.angelArm);
    if (e.getRand().nextInt(30) <= 10) {
      arms.generate(e.getWorld(),e.getRand(),e.getPos());
    }
  }
}","@SubscribeEvent public static void decorateBiomeEvent(DecorateBiomeEvent e){
  if (e.getWorld().getBiome(e.getPos()).isSnowyBiome()) {
    WorldGenArms arms=new WorldGenArms();
    if (e.getRand().nextInt(30) <= 10) {
      arms.generate(e.getWorld(),e.getRand(),e.getPos());
    }
  }
}"
79936,"@SubscribeEvent public void onPlayerLogin(PlayerEvent.PlayerLoggedInEvent e){
  EntityPlayer player=e.player;
  if (!player.world.isRemote) {
    ForgeVersion.CheckResult version=ForgeVersion.getResult(Loader.instance().activeModContainer());
    if (version.status == ForgeVersion.Status.OUTDATED) {
      TextComponentString url=new TextComponentString(TextFormatting.AQUA + TextFormatting.BOLD.toString() + ""String_Node_Str"");
      url.getStyle().setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL,""String_Node_Str""));
      url.getStyle().setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,new TextComponentString(""String_Node_Str"")));
      player.sendMessage(new TextComponentString(TextFormatting.GOLD + ""String_Node_Str"").appendSibling(url));
      String changes=String.valueOf(version.changes).replace(""String_Node_Str"" + version.target + ""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      player.sendMessage(new TextComponentString(TextFormatting.GOLD + ""String_Node_Str"" + TextFormatting.BLUE+ changes));
    }
  }
}","@SubscribeEvent public static void onPlayerLogin(PlayerEvent.PlayerLoggedInEvent e){
  EntityPlayer player=e.player;
  if (!player.world.isRemote) {
    ForgeVersion.CheckResult version=ForgeVersion.getResult(Loader.instance().activeModContainer());
    if (version.status == ForgeVersion.Status.OUTDATED) {
      TextComponentString url=new TextComponentString(TextFormatting.AQUA + TextFormatting.BOLD.toString() + ""String_Node_Str"");
      url.getStyle().setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL,""String_Node_Str""));
      url.getStyle().setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,new TextComponentString(""String_Node_Str"")));
      player.sendMessage(new TextComponentString(TextFormatting.GOLD + ""String_Node_Str"").appendSibling(url));
      String changes=String.valueOf(version.changes).replace(""String_Node_Str"" + version.target + ""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      player.sendMessage(new TextComponentString(TextFormatting.GOLD + ""String_Node_Str"" + TextFormatting.BLUE+ changes));
    }
  }
}"
79937,"@SubscribeEvent public void onEntityUpdate(LivingEvent.LivingUpdateEvent event){
  if (event.getEntity() instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)event.getEntity();
    AngelUtils.getAllAngels(player,40,40);
  }
  if (event.getEntity() instanceof EntityAngel) {
    EntityAngel angel=(EntityAngel)event.getEntity();
    if (WAConfig.angels.angelLocking) {
      AngelUtils.getAllAngels(angel);
    }
  }
}","@SubscribeEvent public static void onEntityUpdate(LivingEvent.LivingUpdateEvent event){
  if (event.getEntity() instanceof EntityPlayer) {
    EntityPlayer player=(EntityPlayer)event.getEntity();
    AngelUtils.getAllAngels(player,40,40);
  }
  if (event.getEntity() instanceof EntityAngel) {
    EntityAngel angel=(EntityAngel)event.getEntity();
    if (WAConfig.angels.angelLocking) {
      AngelUtils.getAllAngels(angel);
    }
  }
}"
79938,"@EventHandler public void init(FMLInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new CommonEvents());
  WAObjects.setUpSpawns();
  GameRegistry.registerWorldGenerator(new WorldGenCatacombs(),8);
  GameRegistry.registerTileEntity(TileSnowArm.class,WeepingAngels.MODID + ""String_Node_Str"");
  GameRegistry.registerTileEntity(TileCG.class,WeepingAngels.MODID + ""String_Node_Str"");
  PoseManager.init();
  if (event.getSide() == Side.CLIENT) {
    WAObjects.setUpRenders();
  }
}","@EventHandler public void init(FMLInitializationEvent event){
  WAObjects.setUpSpawns();
  GameRegistry.registerWorldGenerator(new WorldGenCatacombs(),8);
  GameRegistry.registerTileEntity(TileSnowArm.class,WeepingAngels.MODID + ""String_Node_Str"");
  GameRegistry.registerTileEntity(TileCG.class,WeepingAngels.MODID + ""String_Node_Str"");
  PoseManager.init();
  if (event.getSide() == Side.CLIENT) {
    WAObjects.setUpRenders();
  }
}"
79939,"public static void getAllAngels(EntityAngel angel){
  for (  EntityAngel angel2 : angel.world.getEntitiesWithinAABB(EntityAngel.class,angel.getEntityBoundingBox().grow(20,20,20))) {
    if (angel.canEntityBeSeen(angel2) && angel != angel2 && isInSight(angel,angel2)) {
      angel2.setSeen(true);
    }
  }
}","public static void getAllAngels(EntityAngel angel_viewer){
  for (  EntityAngel angel2 : angel_viewer.world.getEntitiesWithinAABB(EntityAngel.class,angel_viewer.getEntityBoundingBox().grow(20,20,20))) {
    if (angel_viewer.canEntityBeSeen(angel2) && angel_viewer != angel2 && isInSight(angel_viewer,angel2)) {
      angel2.setSeen(true);
    }
  }
}"
79940,"private static boolean isInSight(EntityLivingBase player,Entity angel){
  return player.canEntityBeSeen(angel) && isInEyeLine(player,angel);
}","private static boolean isInSight(EntityLivingBase livingBase,Entity angel){
  return livingBase.canEntityBeSeen(angel) && isInEyeLine(livingBase,angel);
}"
79941,"private static boolean isInEyeLine(Entity player,Entity angel){
  double dx=angel.posX - player.posX;
  double dz;
  for (dz=angel.posZ - player.posZ; dx * dx + dz * dz < 1.0E-4D; dz=(Math.random() - Math.random()) * 0.01D) {
    dx=(Math.random() - Math.random()) * 0.01D;
  }
  while (player.rotationYaw > 360) {
    player.rotationYaw-=360;
  }
  while (player.rotationYaw < -360) {
    player.rotationYaw+=360;
  }
  float yaw=(float)(Math.atan2(dz,dx) * 180.0D / Math.PI) - player.rotationYaw;
  yaw=yaw - 90;
  while (yaw < -180) {
    yaw+=360;
  }
  while (yaw >= 180) {
    yaw-=360;
  }
  return yaw < 60 && yaw > -60;
}","private static boolean isInEyeLine(Entity livingBase,Entity angel){
  double dx=angel.posX - livingBase.posX;
  double dz;
  for (dz=angel.posZ - livingBase.posZ; dx * dx + dz * dz < 1.0E-4D; dz=(Math.random() - Math.random()) * 0.01D) {
    dx=(Math.random() - Math.random()) * 0.01D;
  }
  while (livingBase.rotationYaw > 360) {
    livingBase.rotationYaw-=360;
  }
  while (livingBase.rotationYaw < -360) {
    livingBase.rotationYaw+=360;
  }
  float yaw=(float)(Math.atan2(dz,dx) * 180.0D / Math.PI) - livingBase.rotationYaw;
  yaw=yaw - 90;
  while (yaw < -180) {
    yaw+=360;
  }
  while (yaw >= 180) {
    yaw-=360;
  }
  return yaw < 60 && yaw > -60;
}"
79942,"public static boolean isInMainHand(EntityPlayer holder,Item item){
  return isInHand(EnumHand.MAIN_HAND,holder,item);
}","public static boolean isInMainHand(EntityLivingBase holder,Item item){
  return isInHand(EnumHand.MAIN_HAND,holder,item);
}"
79943,"public static boolean isInEitherHand(EntityPlayer holder,Item item){
  return isInMainHand(holder,item) || isInOffHand(holder,item);
}","public static boolean isInEitherHand(EntityLivingBase holder,Item item){
  return isInMainHand(holder,item) || isInOffHand(holder,item);
}"
79944,"public static boolean isInHand(EnumHand hand,EntityPlayer holder,Item item){
  if (!holder.getHeldItem(hand).isEmpty()) {
    ItemStack heldItem=holder.getHeldItem(hand);
    return heldItem.getItem() == item;
  }
  return false;
}","public static boolean isInHand(EnumHand hand,EntityLivingBase holder,Item item){
  if (!holder.getHeldItem(hand).isEmpty()) {
    ItemStack heldItem=holder.getHeldItem(hand);
    return heldItem.getItem() == item;
  }
  return false;
}"
79945,"public static boolean isInOffHand(EntityPlayer holder,Item item){
  return isInHand(EnumHand.OFF_HAND,holder,item);
}","public static boolean isInOffHand(EntityLivingBase holder,Item item){
  return isInHand(EnumHand.OFF_HAND,holder,item);
}"
79946,"public static boolean handLightCheck(EntityPlayer player){
  for (  Item item : lightItems) {
    if (isInEitherHand(player,item)) {
      return true;
    }
  }
  return false;
}","public static boolean handLightCheck(EntityLivingBase player){
  for (  Item item : lightItems) {
    if (isInEitherHand(player,item)) {
      return true;
    }
  }
  return false;
}"
79947,"@EventHandler public void init(FMLInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new CommonEvents());
  WAObjects.setUpSpawns();
  GameRegistry.registerWorldGenerator(new WorldGenCatacombs(),8);
  GameRegistry.registerTileEntity(TileSnowArm.class,""String_Node_Str"");
  PoseRegistry.init();
  if (event.getSide() == Side.CLIENT) {
    WAObjects.setUpRenders();
  }
}","@EventHandler public void init(FMLInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new CommonEvents());
  WAObjects.setUpSpawns();
  GameRegistry.registerTileEntity(TileSnowArm.class,""String_Node_Str"");
  PoseRegistry.init();
  if (event.getSide() == Side.CLIENT) {
    WAObjects.setUpRenders();
  }
}"
79948,"public static List<EntityAngel> getAllAngels(EntityLivingBase seeker,int distance,double radius){
  if (distance < 0 || distance > 256) {
    distance=256;
  }
  List<EntityAngel> targets=new ArrayList<>();
  Vec3d vec3=seeker.getLookVec();
  double targetX=seeker.posX;
  double targetY=seeker.posY + seeker.getEyeHeight() - 0.10000000149011612D;
  double targetZ=seeker.posZ;
  double distanceTraveled=0;
  while ((int)distanceTraveled < distance) {
    targetX+=vec3.x;
    targetY+=vec3.y;
    targetZ+=vec3.z;
    distanceTraveled+=vec3.lengthVector();
    AxisAlignedBB bb=new AxisAlignedBB(targetX - radius,targetY - radius,targetZ - radius,targetX + radius,targetY + radius,targetZ + radius);
    List<EntityAngel> list=seeker.world.getEntitiesWithinAABB(EntityAngel.class,bb);
    for (    EntityAngel target : list) {
      if (target != seeker && target.canBeCollidedWith() && isTargetInSight(seeker,target)) {
        if (!targets.contains(target)) {
          targets.add(target);
        }
      }
    }
  }
  return targets;
}","public static void getAllAngels(EntityLivingBase seeker,int distance,double radius){
  if (distance < 0 || distance > 256) {
    distance=256;
  }
  Vec3d vec3=seeker.getLookVec();
  double targetX=seeker.posX;
  double targetY=seeker.posY + seeker.getEyeHeight() - 0.10000000149011612D;
  double targetZ=seeker.posZ;
  double distanceTraveled=0;
  while ((int)distanceTraveled < distance) {
    targetX+=vec3.x;
    targetY+=vec3.y;
    targetZ+=vec3.z;
    distanceTraveled+=vec3.lengthVector();
    AxisAlignedBB bb=new AxisAlignedBB(targetX - radius,targetY - radius,targetZ - radius,targetX + radius,targetY + radius,targetZ + radius);
    List<EntityAngel> list=seeker.world.getEntitiesWithinAABB(EntityAngel.class,bb);
    for (    EntityAngel target : list) {
      if (target != seeker && target.canBeCollidedWith() && isTargetInSight(seeker,target)) {
        target.setSeen(true);
      }
    }
  }
}"
79949,"public RenderAngel(RenderManager manager,ModelBase model,float shadowSize){
  super(manager,model,shadowSize);
}","public RenderAngel(RenderManager manager,ModelBase model,float shadowSize){
  super(manager,model,shadowSize);
  this.mainModel=modelTwo;
}"
79950,"@Override protected ResourceLocation getEntityTexture(T entity){
  return TEXTURE;
}","@Override protected ResourceLocation getEntityTexture(T entity){
  return TEXTURE_ONE;
}"
79951,"public ModelAngel(){
  textureWidth=128;
  textureHeight=128;
  LeftEyebrow=new ModelRenderer(this,50,8);
  LeftEyebrow.addBox(-2F,-1F,0F,2,1,1);
  LeftEyebrow.setRotationPoint(-1F,-4F,-4.2F);
  LeftEyebrow.setTextureSize(128,128);
  LeftEyebrow.mirror=true;
  setRotation(LeftEyebrow,-0.3490659F,0F,0F);
  RightEyebrow=new ModelRenderer(this,50,8);
  RightEyebrow.addBox(0F,-1F,0F,2,1,1);
  RightEyebrow.setRotationPoint(1F,-4F,-4.2F);
  RightEyebrow.setTextureSize(128,128);
  RightEyebrow.mirror=true;
  setRotation(RightEyebrow,-0.3490659F,0F,0F);
  Headband=new ModelRenderer(this,76,0);
  Headband.addBox(-4.5F,0F,-0.5F,9,1,9);
  Headband.setRotationPoint(0F,-7.5F,-4F);
  Headband.setTextureSize(128,128);
  Headband.mirror=true;
  setRotation(Headband,-0.1745329F,0F,0F);
  Nose=new ModelRenderer(this,62,8);
  Nose.addBox(-1F,-3F,-4.1F,2,1,1);
  Nose.setRotationPoint(0F,0F,0F);
  Nose.setTextureSize(128,128);
  Nose.mirror=true;
  setRotation(Nose,0F,0F,0F);
  Chin=new ModelRenderer(this,62,2);
  Chin.addBox(-2F,-0.7F,-4F,4,1,2);
  Chin.setRotationPoint(0F,0F,0F);
  Chin.setTextureSize(128,128);
  Chin.mirror=true;
  setRotation(Chin,0F,0F,0F);
  ChinAngleLeft=new ModelRenderer(this,62,5);
  ChinAngleLeft.addBox(-2F,-1F,0F,2,1,2);
  ChinAngleLeft.setRotationPoint(-2F,0.3F,-4F);
  ChinAngleLeft.setTextureSize(128,128);
  ChinAngleLeft.mirror=true;
  setRotation(ChinAngleLeft,0F,0F,0.2792527F);
  ChinAngleRight=new ModelRenderer(this,62,5);
  ChinAngleRight.addBox(0F,-1F,0F,2,1,2);
  ChinAngleRight.setRotationPoint(2F,0.3F,-4F);
  ChinAngleRight.setTextureSize(128,128);
  ChinAngleRight.mirror=true;
  setRotation(ChinAngleRight,0F,0F,-0.2792527F);
  CheekLeft=new ModelRenderer(this,62,0);
  CheekLeft.addBox(-4F,-1F,-4F,3,1,1);
  CheekLeft.setRotationPoint(0F,0F,0F);
  CheekLeft.setTextureSize(128,128);
  CheekLeft.mirror=true;
  setRotation(CheekLeft,0F,0F,0F);
  CheekRight=new ModelRenderer(this,62,0);
  CheekRight.addBox(1F,-1F,-4F,3,1,1);
  CheekRight.setRotationPoint(0F,0F,0F);
  CheekRight.setTextureSize(128,128);
  CheekRight.mirror=true;
  setRotation(CheekRight,0F,0F,0F);
  HeadMain=new ModelRenderer(this,0,0);
  HeadMain.addBox(-4F,-8F,-4F,8,7,8);
  HeadMain.setRotationPoint(0F,0F,0F);
  HeadMain.setTextureSize(128,128);
  HeadMain.mirror=true;
  setRotation(HeadMain,0F,0F,0F);
  HeadUnder=new ModelRenderer(this,32,0);
  HeadUnder.addBox(-4F,-1F,-3F,8,1,7);
  HeadUnder.setRotationPoint(0F,0F,0F);
  HeadUnder.setTextureSize(128,128);
  HeadUnder.mirror=true;
  setRotation(HeadUnder,0F,0F,0F);
  Teeth=new ModelRenderer(this,70,0);
  Teeth.addBox(-1F,-1.7F,-3.9F,2,1,1);
  Teeth.setRotationPoint(0F,0F,0F);
  Teeth.setTextureSize(128,128);
  Teeth.mirror=true;
  setRotation(Teeth,0F,0F,0F);
  Hair1=new ModelRenderer(this,32,8);
  Hair1.addBox(-4F,0F,0F,8,1,1);
  Hair1.setRotationPoint(0F,-7F,-4F);
  Hair1.setTextureSize(128,128);
  Hair1.mirror=true;
  setRotation(Hair1,-0.0872665F,0F,0F);
  Hair2=new ModelRenderer(this,32,10);
  Hair2.addBox(-4F,1F,0F,1,1,1);
  Hair2.setRotationPoint(0F,-7F,-4F);
  Hair2.setTextureSize(128,128);
  Hair2.mirror=true;
  setRotation(Hair2,-0.0872665F,0F,0F);
  Hair3=new ModelRenderer(this,32,10);
  Hair3.addBox(3F,1F,0F,1,1,1);
  Hair3.setRotationPoint(0F,-7F,-4F);
  Hair3.setTextureSize(128,128);
  Hair3.mirror=true;
  setRotation(Hair3,-0.0872665F,0F,0F);
  Hair4=new ModelRenderer(this,32,12);
  Hair4.addBox(-1F,0F,-4F,1,2,1);
  Hair4.setRotationPoint(4F,-7F,0F);
  Hair4.setTextureSize(128,128);
  Hair4.mirror=true;
  setRotation(Hair4,0F,0F,-0.0872665F);
  Hair5=new ModelRenderer(this,32,12);
  Hair5.addBox(-1F,2F,-3F,1,2,1);
  Hair5.setRotationPoint(4F,-7F,0F);
  Hair5.setTextureSize(128,128);
  Hair5.mirror=true;
  setRotation(Hair5,0F,0F,-0.0872665F);
  Hair6=new ModelRenderer(this,32,12);
  Hair6.addBox(-1F,4F,-2F,1,2,1);
  Hair6.setRotationPoint(4F,-7F,0F);
  Hair6.setTextureSize(128,128);
  Hair6.mirror=true;
  setRotation(Hair6,0F,0F,-0.0872665F);
  Hair7=new ModelRenderer(this,36,10);
  Hair7.addBox(-1F,6F,-1F,1,1,5);
  Hair7.setRotationPoint(4F,-7F,0F);
  Hair7.setTextureSize(128,128);
  Hair7.mirror=true;
  setRotation(Hair7,0F,0F,-0.0872665F);
  Hair8=new ModelRenderer(this,48,10);
  Hair8.addBox(-4F,6F,-1F,8,1,1);
  Hair8.setRotationPoint(0F,-7F,4F);
  Hair8.setTextureSize(128,128);
  Hair8.mirror=true;
  setRotation(Hair8,0.0872665F,0F,0F);
  Hair9=new ModelRenderer(this,36,10);
  Hair9.addBox(0F,6F,-1F,1,1,5);
  Hair9.setRotationPoint(-4F,-7F,0F);
  Hair9.setTextureSize(128,128);
  Hair9.mirror=true;
  setRotation(Hair9,0F,0F,0.0872665F);
  Hair10=new ModelRenderer(this,32,12);
  Hair10.addBox(0F,4F,-2F,1,2,1);
  Hair10.setRotationPoint(-4F,-7F,0F);
  Hair10.setTextureSize(128,128);
  Hair10.mirror=true;
  setRotation(Hair10,0F,0F,0.0872665F);
  Hair11=new ModelRenderer(this,32,12);
  Hair11.addBox(0F,2F,-3F,1,2,1);
  Hair11.setRotationPoint(-4F,-7F,0F);
  Hair11.setTextureSize(128,128);
  Hair11.mirror=true;
  setRotation(Hair11,0F,0F,0.0872665F);
  Hair12=new ModelRenderer(this,32,12);
  Hair12.addBox(0F,0F,-4F,1,2,1);
  Hair12.setRotationPoint(-4F,-7F,0F);
  Hair12.setTextureSize(128,128);
  Hair12.mirror=true;
  setRotation(Hair12,0F,0F,0.0872665F);
  TorsoMain=new ModelRenderer(this,16,16);
  TorsoMain.addBox(-4F,0F,-2F,8,23,4);
  TorsoMain.setRotationPoint(0F,0F,0F);
  TorsoMain.setTextureSize(128,128);
  TorsoMain.mirror=true;
  setRotation(TorsoMain,0F,0F,0F);
  Dress1=new ModelRenderer(this,76,16);
  Dress1.addBox(-4F,0F,0F,8,8,1);
  Dress1.setRotationPoint(0F,2F,-2F);
  Dress1.setTextureSize(128,128);
  Dress1.mirror=true;
  setRotation(Dress1,-0.0523599F,0F,0F);
  Dress2=new ModelRenderer(this,94,16);
  Dress2.addBox(-1F,0F,-2F,1,8,4);
  Dress2.setRotationPoint(4F,2F,0F);
  Dress2.setTextureSize(128,128);
  Dress2.mirror=true;
  setRotation(Dress2,0F,0F,-0.0523599F);
  Dress3=new ModelRenderer(this,76,16);
  Dress3.addBox(-4F,0F,-1F,8,8,1);
  Dress3.setRotationPoint(0F,2F,2F);
  Dress3.setTextureSize(128,128);
  Dress3.mirror=true;
  setRotation(Dress3,0.0523599F,0F,0F);
  Dress4=new ModelRenderer(this,94,16);
  Dress4.addBox(0F,0F,-2F,1,8,4);
  Dress4.setRotationPoint(-4F,2F,0F);
  Dress4.setTextureSize(128,128);
  Dress4.mirror=true;
  setRotation(Dress4,0F,0F,0.0523599F);
  Dress5=new ModelRenderer(this,76,25);
  Dress5.addBox(-4F,0F,0F,8,12,1);
  Dress5.setRotationPoint(0F,11F,-2F);
  Dress5.setTextureSize(128,128);
  Dress5.mirror=true;
  setRotation(Dress5,-0.0523599F,0F,0F);
  Dress6=new ModelRenderer(this,76,38);
  Dress6.addBox(-1F,0F,-2F,1,12,4);
  Dress6.setRotationPoint(4F,11F,0F);
  Dress6.setTextureSize(128,128);
  Dress6.mirror=true;
  setRotation(Dress6,0F,0F,-0.0523599F);
  Dress7=new ModelRenderer(this,76,25);
  Dress7.addBox(-4F,0F,-1F,8,12,1);
  Dress7.setRotationPoint(0F,11F,2F);
  Dress7.setTextureSize(128,128);
  Dress7.mirror=true;
  setRotation(Dress7,0.0523599F,0F,0F);
  Dress8=new ModelRenderer(this,76,38);
  Dress8.addBox(0F,0F,-2F,1,12,4);
  Dress8.setRotationPoint(-4F,11F,0F);
  Dress8.setTextureSize(128,128);
  Dress8.mirror=true;
  setRotation(Dress8,0F,0F,0.0523599F);
  Dress9=new ModelRenderer(this,76,59);
  Dress9.addBox(-4F,0F,0F,8,1,3);
  Dress9.setRotationPoint(0F,23F,-3F);
  Dress9.setTextureSize(128,128);
  Dress9.mirror=true;
  setRotation(Dress9,1.27409F,0F,0F);
  Dress10=new ModelRenderer(this,76,63);
  Dress10.addBox(-3F,0F,-2F,3,1,4);
  Dress10.setRotationPoint(5F,23F,0F);
  Dress10.setTextureSize(128,128);
  Dress10.mirror=true;
  setRotation(Dress10,0F,0F,1.27409F);
  Dress11=new ModelRenderer(this,76,59);
  Dress11.addBox(-4F,0F,-3F,8,1,3);
  Dress11.setRotationPoint(0F,23F,3F);
  Dress11.setTextureSize(128,128);
  Dress11.mirror=true;
  setRotation(Dress11,-1.27409F,0F,0F);
  Dress12=new ModelRenderer(this,76,63);
  Dress12.addBox(0F,0F,-2F,3,1,4);
  Dress12.setRotationPoint(-5F,23F,0F);
  Dress12.setTextureSize(128,128);
  Dress12.mirror=true;
  setRotation(Dress12,0F,0F,-1.27409F);
  Dress13=new ModelRenderer(this,76,68);
  Dress13.addBox(-5F,23F,-3F,10,1,6);
  Dress13.setRotationPoint(0F,0F,0F);
  Dress13.setTextureSize(128,128);
  Dress13.mirror=true;
  setRotation(Dress13,0F,0F,0F);
  RightArm1=new ModelRenderer(this,58,16);
  RightArm1.addBox(-3F,-3F,0F,3,3,6);
  RightArm1.setRotationPoint(-4F,5F,-4F);
  RightArm1.setTextureSize(128,128);
  RightArm1.mirror=true;
  setRotation(RightArm1,0.2792527F,0F,0F);
  RightArm2=new ModelRenderer(this,58,25);
  RightArm2.addBox(-3F,-3F,-6F,3,3,6);
  RightArm2.setRotationPoint(-4F,5F,-4F);
  RightArm2.setTextureSize(128,128);
  RightArm2.mirror=true;
  setRotation(RightArm2,-0.5235988F,0F,0F);
  LeftArm1=new ModelRenderer(this,40,16);
  LeftArm1.addBox(0F,-3F,0F,3,3,6);
  LeftArm1.setRotationPoint(4F,5F,-4F);
  LeftArm1.setTextureSize(128,128);
  LeftArm1.mirror=true;
  setRotation(LeftArm1,0.2792527F,0F,0F);
  LeftArm2=new ModelRenderer(this,40,25);
  LeftArm2.addBox(0F,-3F,-6F,3,3,6);
  LeftArm2.setRotationPoint(4F,5F,-4F);
  LeftArm2.setTextureSize(128,128);
  LeftArm2.mirror=true;
  setRotation(LeftArm2,-0.5235988F,0F,0F);
  LeftWing1=new ModelRenderer(this,0,43);
  LeftWing1.addBox(-3F,0F,-1F,3,6,1);
  LeftWing1.setRotationPoint(3F,1.5F,4F);
  LeftWing1.setTextureSize(128,128);
  LeftWing1.mirror=true;
  setRotation(LeftWing1,0F,-0.8726646F,0F);
  LeftWing2=new ModelRenderer(this,10,43);
  LeftWing2.addBox(0F,0F,-1F,3,6,1);
  LeftWing2.setRotationPoint(3F,1.5F,4F);
  LeftWing2.setTextureSize(128,128);
  LeftWing2.mirror=true;
  setRotation(LeftWing2,0F,-0.122173F,0F);
  LeftWing3=new ModelRenderer(this,20,43);
  LeftWing3.addBox(3F,-2F,-1F,1,10,1);
  LeftWing3.setRotationPoint(3F,1.5F,4F);
  LeftWing3.setTextureSize(128,128);
  LeftWing3.mirror=true;
  setRotation(LeftWing3,0F,-0.122173F,0F);
  LeftWing4=new ModelRenderer(this,26,43);
  LeftWing4.addBox(4F,-3F,-1F,1,13,1);
  LeftWing4.setRotationPoint(3F,1.5F,4F);
  LeftWing4.setTextureSize(128,128);
  LeftWing4.mirror=true;
  setRotation(LeftWing4,0F,-0.122173F,0F);
  LeftWing5=new ModelRenderer(this,32,43);
  LeftWing5.addBox(5F,-4F,-1F,1,16,1);
  LeftWing5.setRotationPoint(3F,1.5F,4F);
  LeftWing5.setTextureSize(128,128);
  LeftWing5.mirror=true;
  setRotation(LeftWing5,0F,-0.122173F,0F);
  LeftWing6=new ModelRenderer(this,38,43);
  LeftWing6.addBox(6F,-4F,-1F,1,18,1);
  LeftWing6.setRotationPoint(3F,1.5F,4F);
  LeftWing6.setTextureSize(128,128);
  LeftWing6.mirror=true;
  setRotation(LeftWing6,0F,-0.122173F,0F);
  LeftWing7=new ModelRenderer(this,44,43);
  LeftWing7.addBox(7F,-3F,-1F,1,19,1);
  LeftWing7.setRotationPoint(3F,1.5F,4F);
  LeftWing7.setTextureSize(128,128);
  LeftWing7.mirror=true;
  setRotation(LeftWing7,0F,-0.122173F,0F);
  LeftWing8=new ModelRenderer(this,50,43);
  LeftWing8.addBox(8F,-2F,-1F,1,17,1);
  LeftWing8.setRotationPoint(3F,1.5F,4F);
  LeftWing8.setTextureSize(128,128);
  LeftWing8.mirror=true;
  setRotation(LeftWing8,0F,-0.122173F,0F);
  LeftWing9=new ModelRenderer(this,56,43);
  LeftWing9.addBox(9F,0F,-1F,1,13,1);
  LeftWing9.setRotationPoint(3F,1.5F,4F);
  LeftWing9.setTextureSize(128,128);
  LeftWing9.mirror=true;
  setRotation(LeftWing9,0F,-0.122173F,0F);
  RightWing1=new ModelRenderer(this,0,43);
  RightWing1.addBox(0F,0F,-1F,3,6,1);
  RightWing1.setRotationPoint(-3F,1.5F,4F);
  RightWing1.setTextureSize(128,128);
  RightWing1.mirror=true;
  setRotation(RightWing1,0F,0.8726646F,0F);
  RightWing2=new ModelRenderer(this,10,43);
  RightWing2.addBox(-3F,0F,-1F,3,6,1);
  RightWing2.setRotationPoint(-3F,1.5F,4F);
  RightWing2.setTextureSize(128,128);
  RightWing2.mirror=true;
  setRotation(RightWing2,0F,0.122173F,0F);
  RightWing3=new ModelRenderer(this,20,43);
  RightWing3.addBox(-4F,-2F,-1F,1,10,1);
  RightWing3.setRotationPoint(-3F,1.5F,4F);
  RightWing3.setTextureSize(128,128);
  RightWing3.mirror=true;
  setRotation(RightWing3,0F,0.122173F,0F);
  RightWing4=new ModelRenderer(this,26,43);
  RightWing4.addBox(-5F,-3F,-1F,1,13,1);
  RightWing4.setRotationPoint(-3F,1.5F,4F);
  RightWing4.setTextureSize(128,128);
  RightWing4.mirror=true;
  setRotation(RightWing4,0F,0.122173F,0F);
  RightWing5=new ModelRenderer(this,32,43);
  RightWing5.addBox(-6F,-4F,-1F,1,16,1);
  RightWing5.setRotationPoint(-3F,1.5F,4F);
  RightWing5.setTextureSize(128,128);
  RightWing5.mirror=true;
  setRotation(RightWing5,0F,0.122173F,0F);
  RightWing6=new ModelRenderer(this,38,43);
  RightWing6.addBox(-7F,-4F,-1F,1,18,1);
  RightWing6.setRotationPoint(-3F,1.5F,4F);
  RightWing6.setTextureSize(128,128);
  RightWing6.mirror=true;
  setRotation(RightWing6,0F,0.122173F,0F);
  RightWing7=new ModelRenderer(this,44,43);
  RightWing7.addBox(-8F,-3F,-1F,1,19,1);
  RightWing7.setRotationPoint(-3F,1.5F,4F);
  RightWing7.setTextureSize(128,128);
  RightWing7.mirror=true;
  setRotation(RightWing7,0F,0.122173F,0F);
  RightWing8=new ModelRenderer(this,50,43);
  RightWing8.addBox(-9F,-2F,-1F,1,17,1);
  RightWing8.setRotationPoint(-3F,1.5F,4F);
  RightWing8.setTextureSize(128,128);
  RightWing8.mirror=true;
  setRotation(RightWing8,0F,0.122173F,0F);
  RightWing9=new ModelRenderer(this,56,43);
  RightWing9.addBox(-10F,0F,-1F,1,13,1);
  RightWing9.setRotationPoint(-3F,1.5F,4F);
  RightWing9.setTextureSize(128,128);
  RightWing9.mirror=true;
  setRotation(RightWing9,0F,0.122173F,0F);
}","public ModelAngel(){
  textureWidth=128;
  textureHeight=128;
  LeftEyebrow=new ModelRenderer(this,50,8);
  LeftEyebrow.addBox(-2F,-1F,0F,2,1,1);
  LeftEyebrow.setRotationPoint(-1F,-4F,-4.2F);
  LeftEyebrow.setTextureSize(128,128);
  LeftEyebrow.mirror=true;
  setRotation(LeftEyebrow,-0.3490659F,0F,0F);
  RightEyebrow=new ModelRenderer(this,50,8);
  RightEyebrow.addBox(0F,-1F,0F,2,1,1);
  RightEyebrow.setRotationPoint(1F,-4F,-4.2F);
  RightEyebrow.setTextureSize(128,128);
  RightEyebrow.mirror=true;
  setRotation(RightEyebrow,-0.3490659F,0F,0F);
  Headband=new ModelRenderer(this,76,0);
  Headband.addBox(-4.5F,0F,-0.5F,9,1,9);
  Headband.setRotationPoint(0F,-7.5F,-4F);
  Headband.setTextureSize(128,128);
  Headband.mirror=true;
  setRotation(Headband,-0.1745329F,0F,0F);
  Nose=new ModelRenderer(this,62,8);
  Nose.addBox(-1F,-3F,-4.1F,2,1,1);
  Nose.setRotationPoint(0F,0F,0F);
  Nose.setTextureSize(128,128);
  Nose.mirror=true;
  setRotation(Nose,0F,0F,0F);
  Chin=new ModelRenderer(this,62,2);
  Chin.addBox(-2F,-0.7F,-4F,4,1,2);
  Chin.setRotationPoint(0F,0F,0F);
  Chin.setTextureSize(128,128);
  Chin.mirror=true;
  setRotation(Chin,0F,0F,0F);
  ChinAngleLeft=new ModelRenderer(this,62,5);
  ChinAngleLeft.addBox(-2F,-1F,0F,2,1,2);
  ChinAngleLeft.setRotationPoint(-2F,0.3F,-4F);
  ChinAngleLeft.setTextureSize(128,128);
  ChinAngleLeft.mirror=true;
  setRotation(ChinAngleLeft,0F,0F,0.2792527F);
  ChinAngleRight=new ModelRenderer(this,62,5);
  ChinAngleRight.addBox(0F,-1F,0F,2,1,2);
  ChinAngleRight.setRotationPoint(2F,0.3F,-4F);
  ChinAngleRight.setTextureSize(128,128);
  ChinAngleRight.mirror=true;
  setRotation(ChinAngleRight,0F,0F,-0.2792527F);
  CheekLeft=new ModelRenderer(this,62,0);
  CheekLeft.addBox(-4F,-1F,-4F,3,1,1);
  CheekLeft.setRotationPoint(0F,0F,0F);
  CheekLeft.setTextureSize(128,128);
  CheekLeft.mirror=true;
  setRotation(CheekLeft,0F,0F,0F);
  CheekRight=new ModelRenderer(this,62,0);
  CheekRight.addBox(1F,-1F,-4F,3,1,1);
  CheekRight.setRotationPoint(0F,0F,0F);
  CheekRight.setTextureSize(128,128);
  CheekRight.mirror=true;
  setRotation(CheekRight,0F,0F,0F);
  HeadMain=new ModelRenderer(this,0,0);
  HeadMain.addBox(-4F,-8F,-4F,8,7,8);
  HeadMain.setRotationPoint(0F,0F,0F);
  HeadMain.setTextureSize(128,128);
  HeadMain.mirror=true;
  setRotation(HeadMain,0F,0F,0F);
  HeadUnder=new ModelRenderer(this,32,0);
  HeadUnder.addBox(-4F,-1F,-3F,8,1,7);
  HeadUnder.setRotationPoint(0F,0F,0F);
  HeadUnder.setTextureSize(128,128);
  HeadUnder.mirror=true;
  setRotation(HeadUnder,0F,0F,0F);
  Teeth=new ModelRenderer(this,70,0);
  Teeth.addBox(-1F,-1.7F,-3.9F,2,1,1);
  Teeth.setRotationPoint(0F,0F,0F);
  Teeth.setTextureSize(128,128);
  Teeth.mirror=true;
  setRotation(Teeth,0F,0F,0F);
  Hair1=new ModelRenderer(this,32,8);
  Hair1.addBox(-4F,0F,0F,8,1,1);
  Hair1.setRotationPoint(0F,-7F,-4F);
  Hair1.setTextureSize(128,128);
  Hair1.mirror=true;
  setRotation(Hair1,-0.0872665F,0F,0F);
  Hair2=new ModelRenderer(this,32,10);
  Hair2.addBox(-4F,1F,0F,1,1,1);
  Hair2.setRotationPoint(0F,-7F,-4F);
  Hair2.setTextureSize(128,128);
  Hair2.mirror=true;
  setRotation(Hair2,-0.0872665F,0F,0F);
  Hair3=new ModelRenderer(this,32,10);
  Hair3.addBox(3F,1F,0F,1,1,1);
  Hair3.setRotationPoint(0F,-7F,-4F);
  Hair3.setTextureSize(128,128);
  Hair3.mirror=true;
  setRotation(Hair3,-0.0872665F,0F,0F);
  Hair4=new ModelRenderer(this,32,12);
  Hair4.addBox(-1F,0F,-4F,1,2,1);
  Hair4.setRotationPoint(4F,-7F,0F);
  Hair4.setTextureSize(128,128);
  Hair4.mirror=true;
  setRotation(Hair4,0F,0F,-0.0872665F);
  Hair5=new ModelRenderer(this,32,12);
  Hair5.addBox(-1F,2F,-3F,1,2,1);
  Hair5.setRotationPoint(4F,-7F,0F);
  Hair5.setTextureSize(128,128);
  Hair5.mirror=true;
  setRotation(Hair5,0F,0F,-0.0872665F);
  Hair6=new ModelRenderer(this,32,12);
  Hair6.addBox(-1F,4F,-2F,1,2,1);
  Hair6.setRotationPoint(4F,-7F,0F);
  Hair6.setTextureSize(128,128);
  Hair6.mirror=true;
  setRotation(Hair6,0F,0F,-0.0872665F);
  Hair7=new ModelRenderer(this,36,10);
  Hair7.addBox(-1F,6F,-1F,1,1,5);
  Hair7.setRotationPoint(4F,-7F,0F);
  Hair7.setTextureSize(128,128);
  Hair7.mirror=true;
  setRotation(Hair7,0F,0F,-0.0872665F);
  Hair8=new ModelRenderer(this,48,10);
  Hair8.addBox(-4F,6F,-1F,8,1,1);
  Hair8.setRotationPoint(0F,-7F,4F);
  Hair8.setTextureSize(128,128);
  Hair8.mirror=true;
  setRotation(Hair8,0.0872665F,0F,0F);
  Hair9=new ModelRenderer(this,36,10);
  Hair9.addBox(0F,6F,-1F,1,1,5);
  Hair9.setRotationPoint(-4F,-7F,0F);
  Hair9.setTextureSize(128,128);
  Hair9.mirror=true;
  setRotation(Hair9,0F,0F,0.0872665F);
  Hair10=new ModelRenderer(this,32,12);
  Hair10.addBox(0F,4F,-2F,1,2,1);
  Hair10.setRotationPoint(-4F,-7F,0F);
  Hair10.setTextureSize(128,128);
  Hair10.mirror=true;
  setRotation(Hair10,0F,0F,0.0872665F);
  Hair11=new ModelRenderer(this,32,12);
  Hair11.addBox(0F,2F,-3F,1,2,1);
  Hair11.setRotationPoint(-4F,-7F,0F);
  Hair11.setTextureSize(128,128);
  Hair11.mirror=true;
  setRotation(Hair11,0F,0F,0.0872665F);
  Hair12=new ModelRenderer(this,32,12);
  Hair12.addBox(0F,0F,-4F,1,2,1);
  Hair12.setRotationPoint(-4F,-7F,0F);
  Hair12.setTextureSize(128,128);
  Hair12.mirror=true;
  setRotation(Hair12,0F,0F,0.0872665F);
  TorsoMain=new ModelRenderer(this,16,16);
  TorsoMain.addBox(-4F,0F,-2F,8,23,4);
  TorsoMain.setRotationPoint(0F,0F,0F);
  TorsoMain.setTextureSize(128,128);
  TorsoMain.mirror=true;
  setRotation(TorsoMain,0F,0F,0F);
  Dress1=new ModelRenderer(this,76,16);
  Dress1.addBox(-4F,0F,0F,8,8,1);
  Dress1.setRotationPoint(0F,2F,-2F);
  Dress1.setTextureSize(128,128);
  Dress1.mirror=true;
  setRotation(Dress1,-0.0523599F,0F,0F);
  Dress2=new ModelRenderer(this,94,16);
  Dress2.addBox(-1F,0F,-2F,1,8,4);
  Dress2.setRotationPoint(4F,2F,0F);
  Dress2.setTextureSize(128,128);
  Dress2.mirror=true;
  setRotation(Dress2,0F,0F,-0.0523599F);
  Dress3=new ModelRenderer(this,76,16);
  Dress3.addBox(-4F,0F,-1F,8,8,1);
  Dress3.setRotationPoint(0F,2F,2F);
  Dress3.setTextureSize(128,128);
  Dress3.mirror=true;
  setRotation(Dress3,0.0523599F,0F,0F);
  Dress4=new ModelRenderer(this,94,16);
  Dress4.addBox(0F,0F,-2F,1,8,4);
  Dress4.setRotationPoint(-4F,2F,0F);
  Dress4.setTextureSize(128,128);
  Dress4.mirror=true;
  setRotation(Dress4,0F,0F,0.0523599F);
  Dress5=new ModelRenderer(this,76,25);
  Dress5.addBox(-4F,0F,0F,8,12,1);
  Dress5.setRotationPoint(0F,11F,-2F);
  Dress5.setTextureSize(128,128);
  Dress5.mirror=true;
  setRotation(Dress5,-0.0523599F,0F,0F);
  Dress6=new ModelRenderer(this,76,38);
  Dress6.addBox(-1F,0F,-2F,1,12,4);
  Dress6.setRotationPoint(4F,11F,0F);
  Dress6.setTextureSize(128,128);
  Dress6.mirror=true;
  setRotation(Dress6,0F,0F,-0.0523599F);
  Dress7=new ModelRenderer(this,76,25);
  Dress7.addBox(-4F,0F,-1F,8,12,1);
  Dress7.setRotationPoint(0F,11F,2F);
  Dress7.setTextureSize(128,128);
  Dress7.mirror=true;
  setRotation(Dress7,0.0523599F,0F,0F);
  Dress8=new ModelRenderer(this,76,38);
  Dress8.addBox(0F,0F,-2F,1,12,4);
  Dress8.setRotationPoint(-4F,11F,0F);
  Dress8.setTextureSize(128,128);
  Dress8.mirror=true;
  setRotation(Dress8,0F,0F,0.0523599F);
  Dress9=new ModelRenderer(this,76,59);
  Dress9.addBox(-4F,0F,0F,8,1,3);
  Dress9.setRotationPoint(0F,23F,-3F);
  Dress9.setTextureSize(128,128);
  Dress9.mirror=true;
  setRotation(Dress9,1.27409F,0F,0F);
  Dress10=new ModelRenderer(this,76,63);
  Dress10.addBox(-3F,0F,-2F,3,1,4);
  Dress10.setRotationPoint(5F,23F,0F);
  Dress10.setTextureSize(128,128);
  Dress10.mirror=true;
  setRotation(Dress10,0F,0F,1.27409F);
  Dress11=new ModelRenderer(this,76,59);
  Dress11.addBox(-4F,0F,-3F,8,1,3);
  Dress11.setRotationPoint(0F,23F,3F);
  Dress11.setTextureSize(128,128);
  Dress11.mirror=true;
  setRotation(Dress11,-1.27409F,0F,0F);
  Dress12=new ModelRenderer(this,76,63);
  Dress12.addBox(0F,0F,-2F,3,1,4);
  Dress12.setRotationPoint(-5F,23F,0F);
  Dress12.setTextureSize(128,128);
  Dress12.mirror=true;
  setRotation(Dress12,0F,0F,-1.27409F);
  Dress13=new ModelRenderer(this,76,68);
  Dress13.addBox(-5F,23F,-3F,10,1,6);
  Dress13.setRotationPoint(0F,0F,0F);
  Dress13.setTextureSize(128,128);
  Dress13.mirror=true;
  setRotation(Dress13,0F,0F,0F);
  RightArm1=new ModelRenderer(this,58,16);
  RightArm1.addBox(-3F,-3F,0F,3,3,6);
  RightArm1.setRotationPoint(-4F,5F,-4F);
  RightArm1.setTextureSize(128,128);
  RightArm1.mirror=true;
  setRotation(RightArm1,0.2792527F,0F,0F);
  RightArm2=new ModelRenderer(this,58,25);
  RightArm2.addBox(-3F,-3F,-6F,3,3,6);
  RightArm2.setRotationPoint(-4F,5F,-4F);
  RightArm2.setTextureSize(128,128);
  RightArm2.mirror=true;
  setRotation(RightArm2,-0.5235988F,0F,0F);
  LeftArm1=new ModelRenderer(this,40,16);
  LeftArm1.addBox(0F,-3F,0F,3,3,6);
  LeftArm1.setRotationPoint(4F,5F,-4F);
  LeftArm1.setTextureSize(128,128);
  LeftArm1.mirror=true;
  setRotation(LeftArm1,0.2792527F,0F,0F);
  LeftArm2=new ModelRenderer(this,40,25);
  LeftArm2.addBox(0F,-3F,-6F,3,3,6);
  LeftArm2.setRotationPoint(4F,5F,-4F);
  LeftArm2.setTextureSize(128,128);
  LeftArm2.mirror=true;
  setRotation(LeftArm2,-0.5235988F,0F,0F);
  LeftWing1=new ModelRenderer(this,0,43);
  LeftWing1.addBox(-3F,0F,-1F,3,6,1);
  LeftWing1.setRotationPoint(3F,1.5F,4F);
  LeftWing1.setTextureSize(128,128);
  LeftWing1.mirror=true;
  setRotation(LeftWing1,0F,-0.8726646F,0F);
  LeftWing2=new ModelRenderer(this,10,43);
  LeftWing2.addBox(0F,0F,-1F,3,6,1);
  LeftWing2.setRotationPoint(3F,1.5F,4F);
  LeftWing2.setTextureSize(128,128);
  LeftWing2.mirror=true;
  setRotation(LeftWing2,0F,-0.122173F,0F);
  LeftWing3=new ModelRenderer(this,20,43);
  LeftWing3.addBox(3F,-2F,-1F,1,10,1);
  LeftWing3.setRotationPoint(3F,1.5F,4F);
  LeftWing3.setTextureSize(128,128);
  LeftWing3.mirror=true;
  setRotation(LeftWing3,0F,-0.122173F,0F);
  LeftWing4=new ModelRenderer(this,26,43);
  LeftWing4.addBox(4F,-3F,-1F,1,13,1);
  LeftWing4.setRotationPoint(3F,1.5F,4F);
  LeftWing4.setTextureSize(128,128);
  LeftWing4.mirror=true;
  setRotation(LeftWing4,0F,-0.122173F,0F);
  LeftWing5=new ModelRenderer(this,32,43);
  LeftWing5.addBox(5F,-4F,-1F,1,16,1);
  LeftWing5.setRotationPoint(3F,1.5F,4F);
  LeftWing5.setTextureSize(128,128);
  LeftWing5.mirror=true;
  setRotation(LeftWing5,0F,-0.122173F,0F);
  LeftWing6=new ModelRenderer(this,38,43);
  LeftWing6.addBox(6F,-4F,-1F,1,18,1);
  LeftWing6.setRotationPoint(3F,1.5F,4F);
  LeftWing6.setTextureSize(128,128);
  LeftWing6.mirror=true;
  setRotation(LeftWing6,0F,-0.122173F,0F);
  LeftWing7=new ModelRenderer(this,44,43);
  LeftWing7.addBox(7F,-3F,-1F,1,19,1);
  LeftWing7.setRotationPoint(3F,1.5F,4F);
  LeftWing7.setTextureSize(128,128);
  LeftWing7.mirror=true;
  setRotation(LeftWing7,0F,-0.122173F,0F);
  LeftWing8=new ModelRenderer(this,50,43);
  LeftWing8.addBox(8F,-2F,-1F,1,17,1);
  LeftWing8.setRotationPoint(3F,1.5F,4F);
  LeftWing8.setTextureSize(128,128);
  LeftWing8.mirror=true;
  setRotation(LeftWing8,0F,-0.122173F,0F);
  LeftWing9=new ModelRenderer(this,56,43);
  LeftWing9.addBox(9F,0F,-1F,1,13,1);
  LeftWing9.setRotationPoint(3F,1.5F,4F);
  LeftWing9.setTextureSize(128,128);
  LeftWing9.mirror=true;
  setRotation(LeftWing9,0F,-0.122173F,0F);
  RightWing1=new ModelRenderer(this,0,43);
  RightWing1.addBox(0F,0F,-1F,3,6,1);
  RightWing1.setRotationPoint(-3F,1.5F,4F);
  RightWing1.setTextureSize(128,128);
  RightWing1.mirror=true;
  setRotation(RightWing1,0F,0.8726646F,0F);
  RightWing2=new ModelRenderer(this,10,43);
  RightWing2.addBox(-3F,0F,-1F,3,6,1);
  RightWing2.setRotationPoint(-3F,1.5F,4F);
  RightWing2.setTextureSize(128,128);
  RightWing2.mirror=true;
  setRotation(RightWing2,0F,0.122173F,0F);
  RightWing3=new ModelRenderer(this,20,43);
  RightWing3.addBox(-4F,-2F,-1F,1,10,1);
  RightWing3.setRotationPoint(-3F,1.5F,4F);
  RightWing3.setTextureSize(128,128);
  RightWing3.mirror=true;
  setRotation(RightWing3,0F,0.122173F,0F);
  RightWing4=new ModelRenderer(this,26,43);
  RightWing4.addBox(-5F,-3F,-1F,1,13,1);
  RightWing4.setRotationPoint(-3F,1.5F,4F);
  RightWing4.setTextureSize(128,128);
  RightWing4.mirror=true;
  setRotation(RightWing4,0F,0.122173F,0F);
  RightWing5=new ModelRenderer(this,32,43);
  RightWing5.addBox(-6F,-4F,-1F,1,16,1);
  RightWing5.setRotationPoint(-3F,1.5F,4F);
  RightWing5.setTextureSize(128,128);
  RightWing5.mirror=true;
  setRotation(RightWing5,0F,0.122173F,0F);
  RightWing6=new ModelRenderer(this,38,43);
  RightWing6.addBox(-7F,-4F,-1F,1,18,1);
  RightWing6.setRotationPoint(-3F,1.5F,4F);
  RightWing6.setTextureSize(128,128);
  RightWing6.mirror=true;
  setRotation(RightWing6,0F,0.122173F,0F);
  RightWing7=new ModelRenderer(this,44,43);
  RightWing7.addBox(-8F,-3F,-1F,1,19,1);
  RightWing7.setRotationPoint(-3F,1.5F,4F);
  RightWing7.setTextureSize(128,128);
  RightWing7.mirror=true;
  setRotation(RightWing7,0F,0.122173F,0F);
  RightWing8=new ModelRenderer(this,50,43);
  RightWing8.addBox(-9F,-2F,-1F,1,17,1);
  RightWing8.setRotationPoint(-3F,1.5F,4F);
  RightWing8.setTextureSize(128,128);
  RightWing8.mirror=true;
  setRotation(RightWing8,0F,0.122173F,0F);
  RightWing9=new ModelRenderer(this,56,43);
  RightWing9.addBox(-10F,0F,-1F,1,13,1);
  RightWing9.setRotationPoint(-3F,1.5F,4F);
  RightWing9.setTextureSize(128,128);
  RightWing9.mirror=true;
  setRotation(RightWing9,0F,0.122173F,0F);
  AngryRightArm1=new ModelRenderer(this,58,16);
  AngryRightArm1.addBox(-3F,-3F,0F,3,3,6);
  AngryRightArm1.setRotationPoint(-4F,5F,-4F);
  AngryRightArm1.setTextureSize(128,128);
  AngryRightArm1.mirror=true;
  setRotation(AngryRightArm1,0.2792527F,0F,0F);
  AngryRightArm2=new ModelRenderer(this,58,25);
  AngryRightArm2.addBox(-3F,-3F,-6F,3,3,6);
  AngryRightArm2.setRotationPoint(-4F,5F,-4F);
  AngryRightArm2.setTextureSize(128,128);
  AngryRightArm2.mirror=true;
  setRotation(AngryRightArm2,-0.5235988F,0F,0F);
  AngryLeftArm1=new ModelRenderer(this,40,16);
  AngryLeftArm1.addBox(0F,-3F,0F,3,3,6);
  AngryLeftArm1.setRotationPoint(4F,5F,-4F);
  AngryLeftArm1.setTextureSize(128,128);
  AngryLeftArm1.mirror=true;
  setRotation(AngryLeftArm1,0.2792527F,0F,0F);
  AngryLeftArm2=new ModelRenderer(this,40,25);
  AngryLeftArm2.addBox(0F,-3F,-6F,3,3,6);
  AngryLeftArm2.setRotationPoint(4F,5F,-4F);
  AngryLeftArm2.setTextureSize(128,128);
  AngryLeftArm2.mirror=true;
  setRotation(AngryLeftArm2,-0.5235988F,0F,0F);
}"
79952,"@Override public void render(Entity entity,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  EntityAngel angel=null;
  if (entity instanceof EntityAngel) {
    angel=(EntityAngel)entity;
  }
  if (!angel.isAngry()) {
    RightArm1=new ModelRenderer(this,58,16);
    RightArm1.addBox(-3F,-3F,0F,3,3,6);
    RightArm1.setRotationPoint(-5F,3F,-5F);
    RightArm1.setTextureSize(128,128);
    RightArm1.mirror=true;
    setRotation(RightArm1,-0.2268928F,0F,0.5235988F);
    RightArm2=new ModelRenderer(this,58,25);
    RightArm2.addBox(-3F,-3F,-6F,3,3,6);
    RightArm2.setRotationPoint(-5F,3F,-5F);
    RightArm2.setTextureSize(128,128);
    RightArm2.mirror=true;
    setRotation(RightArm2,-0.9250245F,0F,0.5235988F);
    LeftArm1=new ModelRenderer(this,40,16);
    LeftArm1.addBox(0F,-3F,0F,3,3,6);
    LeftArm1.setRotationPoint(5F,3F,-5F);
    LeftArm1.setTextureSize(128,128);
    LeftArm1.mirror=true;
    setRotation(LeftArm1,-0.2268928F,0F,-0.5235988F);
    LeftArm2=new ModelRenderer(this,40,25);
    LeftArm2.addBox(0F,-3F,-6F,3,3,6);
    LeftArm2.setRotationPoint(5F,3F,-5F);
    LeftArm2.setTextureSize(128,128);
    LeftArm2.mirror=true;
    setRotation(LeftArm2,-0.9250245F,0F,-0.5235988F);
  }
 else {
    RightArm1=new ModelRenderer(this,58,16);
    RightArm1.addBox(-3F,-3F,0F,3,3,6);
    RightArm1.setRotationPoint(-4F,5F,-4F);
    RightArm1.setTextureSize(128,128);
    RightArm1.mirror=true;
    setRotation(RightArm1,0.2792527F,0F,0F);
    RightArm2=new ModelRenderer(this,58,25);
    RightArm2.addBox(-3F,-3F,-6F,3,3,6);
    RightArm2.setRotationPoint(-4F,5F,-4F);
    RightArm2.setTextureSize(128,128);
    RightArm2.mirror=true;
    setRotation(RightArm2,-0.5235988F,0F,0F);
    LeftArm1=new ModelRenderer(this,40,16);
    LeftArm1.addBox(0F,-3F,0F,3,3,6);
    LeftArm1.setRotationPoint(4F,5F,-4F);
    LeftArm1.setTextureSize(128,128);
    LeftArm1.mirror=true;
    setRotation(LeftArm1,0.2792527F,0F,0F);
    LeftArm2=new ModelRenderer(this,40,25);
    LeftArm2.addBox(0F,-3F,-6F,3,3,6);
    LeftArm2.setRotationPoint(4F,5F,-4F);
    LeftArm2.setTextureSize(128,128);
    LeftArm2.mirror=true;
    setRotation(LeftArm2,-0.5235988F,0F,0F);
  }
  GlStateManager.pushMatrix();
  if (!angel.isAngry()) {
    GlStateManager.rotate(20,1,0,0);
  }
  LeftEyebrow.render(scale);
  RightEyebrow.render(scale);
  Headband.render(scale);
  Nose.render(scale);
  Chin.render(scale);
  ChinAngleLeft.render(scale);
  ChinAngleRight.render(scale);
  CheekLeft.render(scale);
  CheekRight.render(scale);
  HeadMain.render(scale);
  HeadUnder.render(scale);
  Teeth.render(scale);
  Hair1.render(scale);
  Hair2.render(scale);
  Hair3.render(scale);
  Hair4.render(scale);
  Hair5.render(scale);
  Hair6.render(scale);
  Hair7.render(scale);
  Hair8.render(scale);
  Hair9.render(scale);
  Hair10.render(scale);
  Hair11.render(scale);
  Hair12.render(scale);
  GlStateManager.popMatrix();
  TorsoMain.render(scale);
  Dress1.render(scale);
  Dress2.render(scale);
  Dress3.render(scale);
  Dress4.render(scale);
  Dress5.render(scale);
  Dress6.render(scale);
  Dress7.render(scale);
  Dress8.render(scale);
  Dress9.render(scale);
  Dress10.render(scale);
  Dress11.render(scale);
  Dress12.render(scale);
  Dress13.render(scale);
  RightArm1.render(scale);
  RightArm2.render(scale);
  LeftArm1.render(scale);
  LeftArm2.render(scale);
  LeftWing1.render(scale);
  LeftWing2.render(scale);
  LeftWing3.render(scale);
  LeftWing4.render(scale);
  LeftWing5.render(scale);
  LeftWing6.render(scale);
  LeftWing7.render(scale);
  LeftWing8.render(scale);
  LeftWing9.render(scale);
  RightWing1.render(scale);
  RightWing2.render(scale);
  RightWing3.render(scale);
  RightWing4.render(scale);
  RightWing5.render(scale);
  RightWing6.render(scale);
  RightWing7.render(scale);
  RightWing8.render(scale);
  RightWing9.render(scale);
}","@Override public void render(Entity entity,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){
  EntityAngel angel=null;
  if (entity instanceof EntityAngel) {
    angel=(EntityAngel)entity;
  }
  GlStateManager.pushMatrix();
  if (!angel.isAngry()) {
    GlStateManager.rotate(20,1,0,0);
  }
  if (!angel.isAngry()) {
    RightArm1.render(scale);
    RightArm2.render(scale);
    LeftArm1.render(scale);
    LeftArm2.render(scale);
  }
 else {
    AngryRightArm1.render(scale);
    AngryRightArm2.render(scale);
    AngryLeftArm1.render(scale);
    AngryLeftArm2.render(scale);
  }
  LeftEyebrow.render(scale);
  RightEyebrow.render(scale);
  Headband.render(scale);
  Nose.render(scale);
  Chin.render(scale);
  ChinAngleLeft.render(scale);
  ChinAngleRight.render(scale);
  CheekLeft.render(scale);
  CheekRight.render(scale);
  HeadMain.render(scale);
  HeadUnder.render(scale);
  Teeth.render(scale);
  Hair1.render(scale);
  Hair2.render(scale);
  Hair3.render(scale);
  Hair4.render(scale);
  Hair5.render(scale);
  Hair6.render(scale);
  Hair7.render(scale);
  Hair8.render(scale);
  Hair9.render(scale);
  Hair10.render(scale);
  Hair11.render(scale);
  Hair12.render(scale);
  GlStateManager.popMatrix();
  TorsoMain.render(scale);
  Dress1.render(scale);
  Dress2.render(scale);
  Dress3.render(scale);
  Dress4.render(scale);
  Dress5.render(scale);
  Dress6.render(scale);
  Dress7.render(scale);
  Dress8.render(scale);
  Dress9.render(scale);
  Dress10.render(scale);
  Dress11.render(scale);
  Dress12.render(scale);
  Dress13.render(scale);
  RightArm1.render(scale);
  RightArm2.render(scale);
  LeftArm1.render(scale);
  LeftArm2.render(scale);
  LeftWing1.render(scale);
  LeftWing2.render(scale);
  LeftWing3.render(scale);
  LeftWing4.render(scale);
  LeftWing5.render(scale);
  LeftWing6.render(scale);
  LeftWing7.render(scale);
  LeftWing8.render(scale);
  LeftWing9.render(scale);
  RightWing1.render(scale);
  RightWing2.render(scale);
  RightWing3.render(scale);
  RightWing4.render(scale);
  RightWing5.render(scale);
  RightWing6.render(scale);
  RightWing7.render(scale);
  RightWing8.render(scale);
  RightWing9.render(scale);
}"
79953,"@Override public boolean attackEntityAsMob(Entity entity){
  entity.attackEntityFrom(WAObjects.ANGEL,4.0F);
  return super.attackEntityAsMob(entity);
}","@Override public boolean attackEntityAsMob(Entity entity){
  if (rand.nextInt(4) < 2) {
    entity.attackEntityFrom(WAObjects.ANGEL,4.0F);
  }
 else {
    entity.attackEntityFrom(WAObjects.ANGEL_NECK_SNAP,4.0F);
  }
  return super.attackEntityAsMob(entity);
}"
79954,"private void spawnAngel(World world){
  EntityAngel angel=new EntityAngel(world);
  Utils.teleportEntity(world,angel,this.posX + 1,this.posY + 1,this.posZ + 1);
  world.spawnEntity(angel);
}","private void spawnAngel(World world){
  if (!world.isRemote) {
    EntityAngel angel=new EntityAngel(world);
    angel.copyLocationAndAnglesFrom(this);
    Utils.teleportEntity(world,angel,this.posX + 1,this.posY + 1,this.posZ + 1);
    world.spawnEntity(angel);
  }
}"
79955,"@Override public void onUpdate(){
  super.onUpdate();
  if (this.rand.nextInt(500) == 250) {
    if (art == EnumArt.AngelOne) {
      spawnAngel(world);
      art=EnumArt.BlankPaintingOne;
    }
    if (art == EnumArt.AngelTwo) {
      spawnAngel(world);
      art=EnumArt.BlankPaintingTwo;
    }
    if (art == EnumArt.AngelThree) {
      spawnAngel(world);
      art=EnumArt.BlankPaintingThree;
    }
    if (art == EnumArt.AngelFour) {
      spawnAngel(world);
      art=EnumArt.BlankPaintingFour;
    }
    if (art == EnumArt.AngelFive) {
      spawnAngel(world);
      art=EnumArt.BlankPaintingFive;
    }
    if (art == EnumArt.AngelSix) {
      spawnAngel(world);
      art=EnumArt.BlankPaintingSix;
    }
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  if (this.rand.nextInt(500) == 250) {
    if (art == EnumArt.AngelOne) {
      spawnAngel(getEntityWorld());
      art=EnumArt.BlankPaintingOne;
    }
    if (art == EnumArt.AngelTwo) {
      spawnAngel(getEntityWorld());
      art=EnumArt.BlankPaintingTwo;
    }
    if (art == EnumArt.AngelThree) {
      spawnAngel(getEntityWorld());
      art=EnumArt.BlankPaintingThree;
    }
    if (art == EnumArt.AngelFour) {
      spawnAngel(getEntityWorld());
      art=EnumArt.BlankPaintingFour;
    }
    if (art == EnumArt.AngelFive) {
      spawnAngel(getEntityWorld());
      art=EnumArt.BlankPaintingFive;
    }
    if (art == EnumArt.AngelSix) {
      spawnAngel(getEntityWorld());
      art=EnumArt.BlankPaintingSix;
    }
  }
}"
79956,"@SubscribeEvent public static void decorBiomeEvent(DecorateBiomeEvent e){
  if (e.getWorld().getBiome(e.getPos()).isSnowyBiome()) {
    WorldGenArms arms=new WorldGenArms(WAObjects.angelArm);
    if (e.getRand().nextInt(50) == 20) {
      arms.generate(e.getWorld(),e.getRand(),e.getPos());
    }
  }
}","@SubscribeEvent public static void decorBiomeEvent(DecorateBiomeEvent e){
  if (e.getWorld().getBiome(e.getPos()).isSnowyBiome()) {
    WorldGenArms arms=new WorldGenArms(WAObjects.angelArm);
    if (e.getRand().nextInt(30) <= 10) {
      arms.generate(e.getWorld(),e.getRand(),e.getPos());
    }
  }
}"
79957,"@Override public void update(){
  if (!world.getEntitiesWithinAABB(EntityPlayer.class,AABB.offset(getPos())).isEmpty() && !world.isRemote) {
    EntityAngel angel=new EntityAngel(world);
    Utils.teleportEntity(world,angel,getPos().getX(),getPos().getY(),getPos().getZ());
    angel.setType(0);
    world.spawnEntity(angel);
    world.setBlockToAir(getPos());
  }
}","@Override public void update(){
  if (!world.getEntitiesWithinAABB(EntityPlayer.class,AABB.offset(getPos())).isEmpty() && !world.isRemote) {
    EntityAngel angel=new EntityAngel(world);
    Utils.teleportEntity(world,angel,getPos().getX(),getPos().getY(),getPos().getZ());
    world.spawnEntity(angel);
    world.setBlockToAir(getPos());
  }
}"
79958,"public void saveStat(Player player,String stat){
  User user=UserManager.getUser(player.getUniqueId());
  config.set(player.getUniqueId().toString() + ""String_Node_Str"" + stat,user.getInt(stat));
  try {
    config.save(ConfigurationManager.getFile(""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void saveStat(Player player,String stat){
  User user=UserManager.getUser(player.getUniqueId());
  config.set(player.getUniqueId().toString() + ""String_Node_Str"" + stat,user.getInt(stat));
  try {
    config.save(ConfigurationManager.getFile(""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
    MessageUtils.errorOccured();
    Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
    Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
  }
}"
79959,"public Map<UUID,Integer> getColumn(String stat){
  ResultSet set=executeQuery(""String_Node_Str"" + stat + ""String_Node_Str""+ stat+ ""String_Node_Str"");
  Map<java.util.UUID,java.lang.Integer> column=new LinkedHashMap<>();
  try {
    while (set.next()) {
      column.put(java.util.UUID.fromString(set.getString(""String_Node_Str"")),set.getInt(stat));
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return column;
}","public Map<UUID,Integer> getColumn(String stat){
  ResultSet set=executeQuery(""String_Node_Str"" + stat + ""String_Node_Str""+ stat+ ""String_Node_Str"");
  Map<java.util.UUID,java.lang.Integer> column=new LinkedHashMap<>();
  try {
    while (set.next()) {
      column.put(java.util.UUID.fromString(set.getString(""String_Node_Str"")),set.getInt(stat));
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
    MessageUtils.errorOccured();
    Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
    Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
  }
  return column;
}"
79960,"public int getStat(String UUID,String stat){
  if (ConfigPreferences.isNameUsedInDatabase()) {
    UUID=Bukkit.getOfflinePlayer(java.util.UUID.fromString(UUID)).getName();
  }
  ResultSet set=executeQuery(""String_Node_Str"" + stat + ""String_Node_Str""+ UUID+ ""String_Node_Str"");
  try {
    if (!set.next())     return 0;
    return (set.getInt(1));
  }
 catch (  SQLException e) {
    e.printStackTrace();
    return 0;
  }
}","public int getStat(String UUID,String stat){
  if (ConfigPreferences.isNameUsedInDatabase()) {
    UUID=Bukkit.getOfflinePlayer(java.util.UUID.fromString(UUID)).getName();
  }
  ResultSet set=executeQuery(""String_Node_Str"" + stat + ""String_Node_Str""+ UUID+ ""String_Node_Str"");
  try {
    if (!set.next())     return 0;
    return (set.getInt(1));
  }
 catch (  SQLException e) {
    e.printStackTrace();
    MessageUtils.errorOccured();
    Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
    Bukkit.getConsoleSender().sendMessage(""String_Node_Str"");
    return 0;
  }
}"
79961,"public QuitEvents(Main plugin){
  this.plugin=plugin;
}","public QuitEvents(Main plugin){
  this.plugin=plugin;
  plugin.getServer().getPluginManager().registerEvents(this,plugin);
}"
79962,"private void initRecyclerView(){
  RecyclerView recyclerView=findViewById(R.id.recycler_view33);
  recyclerView.setHasFixedSize(true);
  recyclerView.setAdapter(mAdapter);
  recyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));
}","private void initRecyclerView(){
  RecyclerView recyclerView=findViewById(R.id.recycler_view33);
  recyclerView.setHasFixedSize(true);
  mAdapter=new CategoriesSearchPageAdapter(this,categoryNames,basket);
  recyclerView.setAdapter(mAdapter);
  recyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));
}"
79963,"@Override public void onAttach(Context context){
  super.onAttach(context);
  dialogListener=(DialogListener)context;
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  dialogListener=(DialogListener)activity;
}"
79964,"private void initRecyclerView(){
  RecyclerView recyclerView=findViewById(R.id.recycler_view_searched_items);
  recyclerView.setHasFixedSize(true);
  recyclerView.setAdapter(mAdapter);
  recyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));
}","private void initRecyclerView(){
  RecyclerView recyclerView=findViewById(R.id.recycler_view_searched_items);
  recyclerView.setHasFixedSize(true);
  mAdapter.replaceBasket(basket);
  recyclerView.setAdapter(mAdapter);
  recyclerView.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));
}"
79965,"private void getProductsByCategory(){
  Runnable r=() -> {
    products=gson.getProductsByCategory(category_id);
    if (products != null) {
      mAdapter.replaceList(products);
      runOnUiThread(new Thread(() -> mAdapter.notifyDataSetChanged()));
    }
 else {
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
;
  if (t.isAlive()) {
    t.interrupt();
  }
  t=new Thread(r);
  t.start();
}","private void getProductsByCategory(){
  Runnable r=() -> {
    products=gson.getProductsByCategory(category_id - 1);
    if (products != null) {
      mAdapter.replaceList(products);
      runOnUiThread(new Thread(() -> mAdapter.notifyDataSetChanged()));
    }
 else {
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
;
  if (t.isAlive()) {
    t.interrupt();
  }
  t=new Thread(r);
  t.start();
}"
79966,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.categories_search_page);
  search_text=findViewById(R.id.search_text);
  search_button=findViewById(R.id.search_button);
  Bundle bundle=getIntent().getBundleExtra(""String_Node_Str"");
  basket=(Basket)bundle.getSerializable(""String_Node_Str"");
  initRecyclerView();
  Thread t=new Thread(() -> {
    categorynames=gson.getCategories();
    Log.i(""String_Node_Str"",""String_Node_Str"");
    if (categorynames != null) {
      mAdapter.replaceList(categorynames);
      runOnUiThread(new Thread(() -> mAdapter.notifyDataSetChanged()));
    }
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
);
  t.start();
  search_button.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(v.getContext(),SearchResults.class);
      Bundle bundle=new Bundle();
      bundle.putSerializable(""String_Node_Str"",basket);
      bundle.putCharSequence(""String_Node_Str"",search_text.getText().toString());
      bundle.putInt(""String_Node_Str"",-1);
      intent.putExtra(""String_Node_Str"",bundle);
      startActivity(intent);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.categories_search_page);
  search_text=findViewById(R.id.search_text);
  search_button=findViewById(R.id.search_button);
  back_button=findViewById(R.id.backButton);
  Bundle bundle=getIntent().getBundleExtra(""String_Node_Str"");
  basket=(Basket)bundle.getSerializable(""String_Node_Str"");
  initRecyclerView();
  Thread t=new Thread(() -> {
    categorynames=gson.getCategories();
    Log.i(""String_Node_Str"",""String_Node_Str"");
    if (categorynames != null) {
      mAdapter.replaceList(categorynames);
      runOnUiThread(new Thread(() -> mAdapter.notifyDataSetChanged()));
    }
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
);
  t.start();
  search_button.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(v.getContext(),SearchResults.class);
      Bundle bundle=new Bundle();
      bundle.putSerializable(""String_Node_Str"",basket);
      bundle.putCharSequence(""String_Node_Str"",search_text.getText().toString());
      bundle.putInt(""String_Node_Str"",-1);
      intent.putExtra(""String_Node_Str"",bundle);
      startActivity(intent);
    }
  }
);
  back_button.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(v.getContext(),HomeScreen.class);
      Bundle bundle=new Bundle();
      bundle.putSerializable(""String_Node_Str"",basket);
      intent.putExtra(""String_Node_Str"",bundle);
      startActivity(intent);
    }
  }
);
}"
79967,"@Override public void onClick(View v){
  Intent intent=new Intent(v.getContext(),SearchResults.class);
  Bundle bundle=new Bundle();
  bundle.putSerializable(""String_Node_Str"",basket);
  bundle.putCharSequence(""String_Node_Str"",search_text.getText().toString());
  bundle.putInt(""String_Node_Str"",-1);
  intent.putExtra(""String_Node_Str"",bundle);
  startActivity(intent);
}","@Override public void onClick(View v){
  Intent intent=new Intent(v.getContext(),HomeScreen.class);
  Bundle bundle=new Bundle();
  bundle.putSerializable(""String_Node_Str"",basket);
  intent.putExtra(""String_Node_Str"",bundle);
  startActivity(intent);
}"
79968,"private void explode(){
  this.world.createExplosion(this,this.posX,this.posY + (double)(this.height / 16.0F),this.posZ,8.0F,false);
}","private void explode(){
  this.world.createExplosion(this,this.posX,this.posY + (double)(this.height / 16.0F),this.posZ,8.0F,true);
}"
79969,"public ItemThrowableTNT(RenderManager renderManagerIn,Item itemIn,RenderItem itemRendererIn){
  super(renderManagerIn);
  this.item=itemIn;
  this.itemRenderer=itemRendererIn;
}","public ItemThrowableTNT(String name){
  MMItems.ITEMS.add(this);
  this.maxStackSize=16;
  this.setRegistryName(name);
  this.setUnlocalizedName(name);
  this.setFull3D();
  this.setCreativeTab(Marcus8448Mod.marcus8448TabItems);
}"
79970,"public static HTTPRequestAdapter parseRequest(HttpServletRequest httpServletRequest) throws Exception {
  HTTPRequestAdapter request=new HTTPRequestAdapter(httpServletRequest);
  HTTPRequestAdapter.current.set(request);
  URI uri=new URI(httpServletRequest.getRequestURI());
  request.method=httpServletRequest.getMethod().intern();
  request.path=httpServletRequest.getPathInfo() != null ? httpServletRequest.getPathInfo() : ""String_Node_Str"";
  request.servletPath=httpServletRequest.getServletPath() != null ? httpServletRequest.getServletPath() : ""String_Node_Str"";
  request.contextPath=httpServletRequest.getContextPath() != null ? httpServletRequest.getContextPath() : ""String_Node_Str"";
  request.setQueryString(httpServletRequest.getQueryString() == null ? ""String_Node_Str"" : httpServletRequest.getQueryString());
  logger.trace(""String_Node_Str"" + request.contextPath,""String_Node_Str"" + request.servletPath);
  logger.trace(""String_Node_Str"" + request.path + ""String_Node_Str""+ request.getQueryString());
  if (httpServletRequest.getHeader(""String_Node_Str"") != null) {
    request.contentType=httpServletRequest.getHeader(""String_Node_Str"").split(""String_Node_Str"")[0].trim().toLowerCase().intern();
  }
 else {
    request.contentType=""String_Node_Str"".intern();
  }
  if (httpServletRequest.getHeader(""String_Node_Str"") != null) {
    request.method=httpServletRequest.getHeader(""String_Node_Str"").intern();
  }
  request.setSecure(httpServletRequest.isSecure());
  request.url=httpServletRequest.getRequestURI();
  request.host=httpServletRequest.getHeader(""String_Node_Str"");
  if (request.host.contains(""String_Node_Str"")) {
    request.port=Integer.parseInt(request.host.split(""String_Node_Str"")[1]);
    request.domain=request.host.split(""String_Node_Str"")[0];
  }
 else {
    request.port=80;
    request.domain=request.host;
  }
  request.remoteAddress=httpServletRequest.getRemoteAddr();
  Enumeration headersNames=httpServletRequest.getHeaderNames();
  while (headersNames.hasMoreElements()) {
    HTTPRequestAdapter.Header hd=request.new Header();
    hd.name=(String)headersNames.nextElement();
    hd.values=new ArrayList<String>();
    Enumeration enumValues=httpServletRequest.getHeaders(hd.name);
    while (enumValues.hasMoreElements()) {
      String value=(String)enumValues.nextElement();
      hd.values.add(value);
    }
    request.headers.put(hd.name.toLowerCase(),hd);
  }
  request.resolveFormat();
  return request;
}","public static HTTPRequestAdapter parseRequest(HttpServletRequest httpServletRequest) throws Exception {
  HTTPRequestAdapter request=new HTTPRequestAdapter(httpServletRequest);
  HTTPRequestAdapter.current.set(request);
  URI uri=new URI(httpServletRequest.getRequestURI());
  request.method=httpServletRequest.getMethod().intern();
  request.path=httpServletRequest.getPathInfo() != null ? httpServletRequest.getPathInfo() : httpServletRequest.getServletPath();
  request.servletPath=httpServletRequest.getServletPath() != null ? httpServletRequest.getServletPath() : ""String_Node_Str"";
  request.contextPath=httpServletRequest.getContextPath() != null ? httpServletRequest.getContextPath() : ""String_Node_Str"";
  request.setQueryString(httpServletRequest.getQueryString() == null ? ""String_Node_Str"" : httpServletRequest.getQueryString());
  logger.trace(""String_Node_Str"" + request.contextPath,""String_Node_Str"" + request.servletPath);
  logger.trace(""String_Node_Str"" + request.path + ""String_Node_Str""+ request.getQueryString());
  if (httpServletRequest.getHeader(""String_Node_Str"") != null) {
    request.contentType=httpServletRequest.getHeader(""String_Node_Str"").split(""String_Node_Str"")[0].trim().toLowerCase().intern();
  }
 else {
    request.contentType=""String_Node_Str"".intern();
  }
  if (httpServletRequest.getHeader(""String_Node_Str"") != null) {
    request.method=httpServletRequest.getHeader(""String_Node_Str"").intern();
  }
  request.setSecure(httpServletRequest.isSecure());
  request.url=httpServletRequest.getRequestURI();
  request.host=httpServletRequest.getHeader(""String_Node_Str"");
  if (request.host.contains(""String_Node_Str"")) {
    request.port=Integer.parseInt(request.host.split(""String_Node_Str"")[1]);
    request.domain=request.host.split(""String_Node_Str"")[0];
  }
 else {
    request.port=80;
    request.domain=request.host;
  }
  request.remoteAddress=httpServletRequest.getRemoteAddr();
  Enumeration headersNames=httpServletRequest.getHeaderNames();
  while (headersNames.hasMoreElements()) {
    HTTPRequestAdapter.Header hd=request.new Header();
    hd.name=(String)headersNames.nextElement();
    hd.values=new ArrayList<String>();
    Enumeration enumValues=httpServletRequest.getHeaders(hd.name);
    while (enumValues.hasMoreElements()) {
      String value=(String)enumValues.nextElement();
      hd.values.add(value);
    }
    request.headers.put(hd.name.toLowerCase(),hd);
  }
  request.resolveFormat();
  return request;
}"
79971,"public static ActionDefinition reverse(String action,Map<String,Object> args){
  Map<String,Object> argsbackup=new HashMap<String,Object>(args);
  for (  Route route : routes) {
    if (route.actionPattern != null) {
      Matcher matcher=route.actionPattern.matcher(action);
      if (matcher.matches()) {
        for (        String group : route.actionArgs) {
          String v=matcher.group(group);
          if (v == null) {
            continue;
          }
          args.put(group,v.toLowerCase());
        }
        List<String> inPathArgs=new ArrayList<String>(16);
        boolean allRequiredArgsAreHere=true;
        for (        Route.Arg arg : route.args) {
          inPathArgs.add(arg.name);
          Object value=args.get(arg.name);
          if (value == null) {
            String host=route.host.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (host.equals(arg.name) || host.matches(arg.name)) {
              args.put(arg.name,""String_Node_Str"");
              value=""String_Node_Str"";
            }
 else {
              allRequiredArgsAreHere=false;
              break;
            }
          }
 else {
            if (value instanceof List<?>) {
              @SuppressWarnings(""String_Node_Str"") List<Object> l=(List<Object>)value;
              value=l.get(0);
            }
            if (!value.toString().startsWith(""String_Node_Str"") && !arg.constraint.matches(value.toString())) {
              allRequiredArgsAreHere=false;
              break;
            }
          }
        }
        for (        String staticKey : route.staticArgs.keySet()) {
          if (staticKey.equals(""String_Node_Str"")) {
            if (!HTTPRequestAdapter.current.get().format.equals(route.staticArgs.get(""String_Node_Str""))) {
              allRequiredArgsAreHere=false;
              break;
            }
            continue;
          }
          if (!args.containsKey(staticKey) || (args.get(staticKey) == null) || !args.get(staticKey).toString().equals(route.staticArgs.get(staticKey))) {
            allRequiredArgsAreHere=false;
            break;
          }
        }
        if (allRequiredArgsAreHere) {
          StringBuilder queryString=new StringBuilder();
          String path=route.path;
          if (HTTPRequestAdapter.current.get() != null) {
            if (!HTTPRequestAdapter.current.get().servletPath.isEmpty()) {
              String servletPath=HTTPRequestAdapter.current.get().servletPath;
              path=(StringUtils.startsWith(servletPath,""String_Node_Str"") ? servletPath : ""String_Node_Str"" + servletPath) + path;
            }
            if (!HTTPRequestAdapter.current.get().contextPath.isEmpty()) {
              String contextPath=HTTPRequestAdapter.current.get().contextPath;
              path=(StringUtils.startsWith(contextPath,""String_Node_Str"") ? contextPath : ""String_Node_Str"" + contextPath) + path;
            }
          }
          String host=route.host;
          if (path.endsWith(""String_Node_Str"")) {
            path=path.substring(0,path.length() - 2);
          }
          for (          Map.Entry<String,Object> entry : args.entrySet()) {
            String key=entry.getKey();
            Object value=entry.getValue();
            if (inPathArgs.contains(key) && value != null) {
              if (List.class.isAssignableFrom(value.getClass())) {
                @SuppressWarnings(""String_Node_Str"") List<Object> vals=(List<Object>)value;
                try {
                  path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",URLEncoder.encode(vals.get(0).toString().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
                }
 catch (                UnsupportedEncodingException e) {
                  throw new RouteFileParsingException(""String_Node_Str"",e);
                }
              }
 else {
                try {
                  path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",URLEncoder.encode(value.toString().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
                  host=host.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",URLEncoder.encode(value.toString().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
                }
 catch (                UnsupportedEncodingException e) {
                  throw new RouteFileParsingException(""String_Node_Str"",e);
                }
              }
            }
 else             if (route.staticArgs.containsKey(key)) {
            }
 else             if (value != null) {
              if (List.class.isAssignableFrom(value.getClass())) {
                @SuppressWarnings(""String_Node_Str"") List<Object> vals=(List<Object>)value;
                for (                Object object : vals) {
                  try {
                    queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                    queryString.append(""String_Node_Str"");
                    if (object.toString().startsWith(""String_Node_Str"")) {
                      queryString.append(object.toString());
                    }
 else {
                      queryString.append(URLEncoder.encode(object.toString() + ""String_Node_Str"",""String_Node_Str""));
                    }
                    queryString.append(""String_Node_Str"");
                  }
 catch (                  UnsupportedEncodingException ex) {
                  }
                }
              }
 else {
                try {
                  queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                  queryString.append(""String_Node_Str"");
                  if (value.toString().startsWith(""String_Node_Str"")) {
                    queryString.append(value.toString());
                  }
 else {
                    queryString.append(URLEncoder.encode(value.toString() + ""String_Node_Str"",""String_Node_Str""));
                  }
                  queryString.append(""String_Node_Str"");
                }
 catch (                UnsupportedEncodingException ex) {
                }
              }
            }
          }
          String qs=queryString.toString();
          if (qs.endsWith(""String_Node_Str"")) {
            qs=qs.substring(0,qs.length() - 1);
          }
          ActionDefinition actionDefinition=new ActionDefinition();
          actionDefinition.url=qs.length() == 0 ? path : path + ""String_Node_Str"" + qs;
          actionDefinition.method=route.method == null || route.method.equals(""String_Node_Str"") ? ""String_Node_Str"" : route.method.toUpperCase();
          actionDefinition.star=""String_Node_Str"".equals(route.method);
          actionDefinition.action=action;
          actionDefinition.args=argsbackup;
          actionDefinition.host=host;
          return actionDefinition;
        }
      }
    }
  }
  throw new NoHandlerFoundException(action,args);
}","public static ActionDefinition reverse(String action,Map<String,Object> args){
  Map<String,Object> argsbackup=new HashMap<String,Object>(args);
  for (  Route route : routes) {
    if (route.actionPattern != null) {
      Matcher matcher=route.actionPattern.matcher(action);
      if (matcher.matches()) {
        for (        String group : route.actionArgs) {
          String v=matcher.group(group);
          if (v == null) {
            continue;
          }
          args.put(group,v.toLowerCase());
        }
        List<String> inPathArgs=new ArrayList<String>(16);
        boolean allRequiredArgsAreHere=true;
        for (        Route.Arg arg : route.args) {
          inPathArgs.add(arg.name);
          Object value=args.get(arg.name);
          if (value == null) {
            String host=route.host.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (host.equals(arg.name) || host.matches(arg.name)) {
              args.put(arg.name,""String_Node_Str"");
              value=""String_Node_Str"";
            }
 else {
              allRequiredArgsAreHere=false;
              break;
            }
          }
 else {
            if (value instanceof List<?>) {
              @SuppressWarnings(""String_Node_Str"") List<Object> l=(List<Object>)value;
              value=l.get(0);
            }
            if (!value.toString().startsWith(""String_Node_Str"") && !arg.constraint.matches(value.toString())) {
              allRequiredArgsAreHere=false;
              break;
            }
          }
        }
        for (        String staticKey : route.staticArgs.keySet()) {
          if (staticKey.equals(""String_Node_Str"")) {
            if (!HTTPRequestAdapter.current.get().format.equals(route.staticArgs.get(""String_Node_Str""))) {
              allRequiredArgsAreHere=false;
              break;
            }
            continue;
          }
          if (!args.containsKey(staticKey) || (args.get(staticKey) == null) || !args.get(staticKey).toString().equals(route.staticArgs.get(staticKey))) {
            allRequiredArgsAreHere=false;
            break;
          }
        }
        if (allRequiredArgsAreHere) {
          StringBuilder queryString=new StringBuilder();
          String path=route.path;
          if (HTTPRequestAdapter.current.get() != null) {
            if (!HTTPRequestAdapter.current.get().servletPath.isEmpty() && !HTTPRequestAdapter.current.get().servletPath.equals(""String_Node_Str"")) {
              String servletPath=HTTPRequestAdapter.current.get().servletPath;
              path=(StringUtils.startsWith(servletPath,""String_Node_Str"") ? servletPath : ""String_Node_Str"" + servletPath) + path;
            }
            if (!HTTPRequestAdapter.current.get().contextPath.isEmpty() && !HTTPRequestAdapter.current.get().contextPath.equals(""String_Node_Str"")) {
              String contextPath=HTTPRequestAdapter.current.get().contextPath;
              path=(StringUtils.startsWith(contextPath,""String_Node_Str"") ? contextPath : ""String_Node_Str"" + contextPath) + path;
            }
          }
          String host=route.host;
          if (path.endsWith(""String_Node_Str"")) {
            path=path.substring(0,path.length() - 2);
          }
          for (          Map.Entry<String,Object> entry : args.entrySet()) {
            String key=entry.getKey();
            Object value=entry.getValue();
            if (inPathArgs.contains(key) && value != null) {
              if (List.class.isAssignableFrom(value.getClass())) {
                @SuppressWarnings(""String_Node_Str"") List<Object> vals=(List<Object>)value;
                try {
                  path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",URLEncoder.encode(vals.get(0).toString().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
                }
 catch (                UnsupportedEncodingException e) {
                  throw new RouteFileParsingException(""String_Node_Str"",e);
                }
              }
 else {
                try {
                  path=path.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",URLEncoder.encode(value.toString().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
                  host=host.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",URLEncoder.encode(value.toString().replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
                }
 catch (                UnsupportedEncodingException e) {
                  throw new RouteFileParsingException(""String_Node_Str"",e);
                }
              }
            }
 else             if (route.staticArgs.containsKey(key)) {
            }
 else             if (value != null) {
              if (List.class.isAssignableFrom(value.getClass())) {
                @SuppressWarnings(""String_Node_Str"") List<Object> vals=(List<Object>)value;
                for (                Object object : vals) {
                  try {
                    queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                    queryString.append(""String_Node_Str"");
                    if (object.toString().startsWith(""String_Node_Str"")) {
                      queryString.append(object.toString());
                    }
 else {
                      queryString.append(URLEncoder.encode(object.toString() + ""String_Node_Str"",""String_Node_Str""));
                    }
                    queryString.append(""String_Node_Str"");
                  }
 catch (                  UnsupportedEncodingException ex) {
                  }
                }
              }
 else {
                try {
                  queryString.append(URLEncoder.encode(key,""String_Node_Str""));
                  queryString.append(""String_Node_Str"");
                  if (value.toString().startsWith(""String_Node_Str"")) {
                    queryString.append(value.toString());
                  }
 else {
                    queryString.append(URLEncoder.encode(value.toString() + ""String_Node_Str"",""String_Node_Str""));
                  }
                  queryString.append(""String_Node_Str"");
                }
 catch (                UnsupportedEncodingException ex) {
                }
              }
            }
          }
          String qs=queryString.toString();
          if (qs.endsWith(""String_Node_Str"")) {
            qs=qs.substring(0,qs.length() - 1);
          }
          ActionDefinition actionDefinition=new ActionDefinition();
          actionDefinition.url=qs.length() == 0 ? path : path + ""String_Node_Str"" + qs;
          actionDefinition.method=route.method == null || route.method.equals(""String_Node_Str"") ? ""String_Node_Str"" : route.method.toUpperCase();
          actionDefinition.star=""String_Node_Str"".equals(route.method);
          actionDefinition.action=action;
          actionDefinition.args=argsbackup;
          actionDefinition.host=host;
          return actionDefinition;
        }
      }
    }
  }
  throw new NoHandlerFoundException(action,args);
}"
79972,"@When(""String_Node_Str"") public void I_send_the_HTTP_request(String method,String url) throws Throwable {
  int pathLength=0;
  if (this.contextPath.length() > 0) {
    pathLength+=this.contextPath.length() + 1;
  }
  if (this.servletPath.length() > 0) {
    pathLength+=this.servletPath.length() + 1;
  }
  request=new MockHttpServletRequest(this.wac.getServletContext(),method,url);
  request.setContextPath(this.contextPath);
  request.setServletPath(this.servletPath);
  request.addHeader(""String_Node_Str"",host);
  for (  HTTPHeader header : headers) {
    request.addHeader(header.name,header.value);
  }
  for (  HTTPParam param : queryParams) {
    request.addParameter(param.name,param.value);
  }
  request.setPathInfo(url.substring(pathLength));
  chain=this.hm.getHandler(request);
}","@When(""String_Node_Str"") public void I_send_the_HTTP_request(String method,String url) throws Throwable {
  int pathLength=0;
  if (this.contextPath.length() > 0) {
    pathLength+=this.contextPath.length();
  }
  if (this.servletPath.length() > 0) {
    pathLength+=this.servletPath.length();
  }
  request=new MockHttpServletRequest(this.wac.getServletContext(),method,url);
  request.setContextPath(this.contextPath);
  request.setServletPath(this.servletPath);
  request.addHeader(""String_Node_Str"",host);
  for (  HTTPHeader header : headers) {
    request.addHeader(header.name,header.value);
  }
  for (  HTTPParam param : queryParams) {
    request.addParameter(param.name,param.value);
  }
  request.setPathInfo(url.substring(pathLength));
  chain=this.hm.getHandler(request);
}"
79973,"@When(""String_Node_Str"") public void I_send_the_HTTP_request_with_a_null_pathInfo(String method,String url) throws Throwable {
  request=new MockHttpServletRequest(this.wac.getServletContext(),method,url);
  request.setContextPath(this.contextPath);
  request.setServletPath(this.servletPath);
  request.addHeader(""String_Node_Str"",host);
  for (  HTTPHeader header : headers) {
    request.addHeader(header.name,header.value);
  }
  for (  HTTPParam param : queryParams) {
    request.addParameter(param.name,param.value);
  }
  request.setPathInfo(null);
  chain=this.hm.getHandler(request);
}","@When(""String_Node_Str"") public void I_send_the_HTTP_request_with_a_null_pathInfo(String method,String url) throws Throwable {
  request=new MockHttpServletRequest(this.wac.getServletContext());
  request.setMethod(method);
  request.setContextPath(this.contextPath);
  request.setServletPath(url.replaceFirst(this.contextPath,""String_Node_Str""));
  request.addHeader(""String_Node_Str"",host);
  for (  HTTPHeader header : headers) {
    request.addHeader(header.name,header.value);
  }
  for (  HTTPParam param : queryParams) {
    request.addParameter(param.name,param.value);
  }
  request.setPathInfo(null);
  chain=this.hm.getHandler(request);
}"
79974,"/** 
 * Get the ran max or min range bound for an autoincrement column.
 * @param dtd The type of the autoincrement column.
 * @param topOrBottom RANGE_TOP or RANGE_BOTTOM
 * @returns the top or bottom of the range
 */
private long getRangeBound(DataTypeDescriptor dtd,int topOrBottom) throws StandardException {
  TypeId typeId=dtd.getTypeId();
  boolean bottom=(topOrBottom == RANGE_BOTTOM);
  if (typeId == TypeId.SMALLINT_ID) {
    return (bottom ? Long.valueOf(Short.MIN_VALUE) : Long.valueOf(Short.MAX_VALUE));
  }
 else   if (typeId == TypeId.INTEGER_ID) {
    return (bottom ? Long.valueOf(Integer.MIN_VALUE) : Long.valueOf(Integer.MAX_VALUE));
  }
 else {
    if (typeId != TypeId.BIGINT_ID) {
      throw StandardException.newException(SQLState.NOT_IMPLEMENTED);
    }
    return (bottom ? Long.MIN_VALUE : Long.MAX_VALUE);
  }
}","/** 
 * Get the ran max or min range bound for an autoincrement column.
 * @param dtd The type of the autoincrement column.
 * @param topOrBottom RANGE_TOP or RANGE_BOTTOM
 * @return the top or bottom of the range
 */
private long getRangeBound(DataTypeDescriptor dtd,int topOrBottom) throws StandardException {
  TypeId typeId=dtd.getTypeId();
  boolean bottom=(topOrBottom == RANGE_BOTTOM);
  if (typeId == TypeId.SMALLINT_ID) {
    return (bottom ? Long.valueOf(Short.MIN_VALUE) : Long.valueOf(Short.MAX_VALUE));
  }
 else   if (typeId == TypeId.INTEGER_ID) {
    return (bottom ? Long.valueOf(Integer.MIN_VALUE) : Long.valueOf(Integer.MAX_VALUE));
  }
 else {
    if (typeId != TypeId.BIGINT_ID) {
      throw StandardException.newException(SQLState.NOT_IMPLEMENTED);
    }
    return (bottom ? Long.MIN_VALUE : Long.MAX_VALUE);
  }
}"
79975,"public void doneReading(int mode,LanguageConnectionContext lcc) throws StandardException {
  int bindCount=lcc.decrementBindCount();
synchronized (this) {
    if (bindCount == 0) {
      if (mode == DataDictionary.COMPILE_ONLY_MODE) {
        if ((lcc.getStatementContext() != null) && lcc.getStatementContext().inUse()) {
          CompatibilitySpace space=lcc.getTransactionExecute().getLockSpace();
          int unlockCount=lockFactory.unlock(space,space.getOwner(),cacheCoordinator,ShExQual.SH);
          if (SanityManager.DEBUG) {
            if (unlockCount != 1) {
              SanityManager.THROWASSERT(""String_Node_Str"" + ""String_Node_Str"" + unlockCount);
            }
          }
        }
      }
 else {
        readersInDDLMode--;
        if (ddlUsers == 0 && readersInDDLMode == 0) {
          clearCaches();
          setCacheMode(DataDictionary.COMPILE_ONLY_MODE);
        }
        if (SanityManager.DEBUG) {
          SanityManager.ASSERT(readersInDDLMode >= 0,""String_Node_Str"");
        }
      }
    }
  }
}","public void doneReading(int mode,LanguageConnectionContext lcc) throws StandardException {
  int bindCount=lcc.decrementBindCount();
synchronized (this) {
    if (bindCount == 0) {
      if (mode == DataDictionary.COMPILE_ONLY_MODE) {
        if ((lcc.getStatementContext() != null) && lcc.getStatementContext().inUse()) {
          CompatibilitySpace space=lcc.getTransactionExecute().getLockSpace();
          int unlockCount=lockFactory.unlock(space,space.getOwner(),cacheCoordinator,ShExQual.SH);
          if (SanityManager.DEBUG) {
            if (unlockCount != 1) {
              SanityManager.THROWASSERT(""String_Node_Str"" + ""String_Node_Str"" + unlockCount);
            }
          }
        }
      }
 else {
        readersInDDLMode--;
        if (ddlUsers == 0 && readersInDDLMode == 0) {
          clearCaches(false);
          setCacheMode(DataDictionary.COMPILE_ONLY_MODE);
        }
        if (SanityManager.DEBUG) {
          SanityManager.ASSERT(readersInDDLMode >= 0,""String_Node_Str"");
        }
      }
    }
  }
}"
79976,"/** 
 * Set the current value of an ANSI/ISO sequence. This method does not perform any sanity checking but assumes that the caller knows what they are doing. If the old value on disk is not what we expect it to be, then we are in a race with another session. They won and we don't update the value on disk. However, if the old value is null, that is a signal to us that we should update the value on disk anyway.
 * @param tc			Transaction Controller to use.
 * @param rowLocation Row in SYSSEQUENCES to update.
 * @param wait True if we should wait for locks
 * @param oldValue What we expect to find in the CURRENTVALUE column.
 * @param newValue What to stuff into the CURRENTVALUE column.
 * @return Returns true if the value was successfully updated, false if we lost a race with another session.
 * @exception StandardException thrown on failure.
 */
boolean updateCurrentSequenceValue(TransactionController tc,RowLocation rowLocation,boolean wait,Long oldValue,Long newValue) throws StandardException {
  int columnNum=SYSSEQUENCESRowFactory.SYSSEQUENCES_CURRENT_VALUE;
  FormatableBitSet columnToUpdate=new FormatableBitSet(SYSSEQUENCESRowFactory.SYSSEQUENCES_COLUMN_COUNT);
  TabInfoImpl ti=getNonCoreTI(SYSSEQUENCES_CATALOG_NUM);
  ConglomerateController heapCC=null;
  SYSSEQUENCESRowFactory rf=(SYSSEQUENCESRowFactory)ti.getCatalogRowFactory();
  ExecRow row=rf.makeEmptyRow();
  columnToUpdate.set(columnNum - 1);
  try {
    heapCC=tc.openConglomerate(ti.getHeapConglomerate(),false,(TransactionController.OPENMODE_FORUPDATE | ((wait) ? 0 : TransactionController.OPENMODE_LOCK_NOWAIT)),TransactionController.MODE_RECORD,TransactionController.ISOLATION_REPEATABLE_READ);
    boolean baseRowExists=heapCC.fetch(rowLocation,row.getRowArray(),columnToUpdate,wait);
    if (SanityManager.DEBUG) {
      SanityManager.ASSERT(baseRowExists,""String_Node_Str"");
    }
    NumberDataValue oldValueOnDisk=(NumberDataValue)row.getColumn(columnNum);
    SQLLongint expectedOldValue;
    if (oldValue == null) {
      expectedOldValue=new SQLLongint();
    }
 else {
      expectedOldValue=new SQLLongint(oldValue.longValue());
    }
    if ((oldValue == null) || (expectedOldValue.compare(oldValueOnDisk) == 0)) {
      SQLLongint newValueOnDisk;
      if (newValue == null) {
        newValueOnDisk=new SQLLongint();
      }
 else {
        newValueOnDisk=new SQLLongint(newValue.longValue());
      }
      row.setColumn(columnNum,newValueOnDisk);
      heapCC.replace(rowLocation,row.getRowArray(),columnToUpdate);
      return true;
    }
 else {
      return false;
    }
  }
  finally {
    if (heapCC != null) {
      heapCC.close();
    }
  }
}","/** 
 * Set the current value of an ANSI/ISO sequence. This method does not perform any sanity checking but assumes that the caller knows what they are doing. If the old value on disk is not what we expect it to be, then we are in a race with another session. They won and we don't update the value on disk. However, if the old value is null, that is a signal to us that we should update the value on disk anyway.
 * @param tc			Transaction Controller to use.
 * @param rowLocation Row in SYSSEQUENCES to update.
 * @param wait True if we should wait for locks
 * @param oldValue What we expect to find in the CURRENTVALUE column.
 * @param newValue What to stuff into the CURRENTVALUE column.
 * @return Returns true if the value was successfully updated, false if we lost a race with another session.
 * @exception StandardException thrown on failure.
 */
boolean updateCurrentSequenceValue(TransactionController tc,RowLocation rowLocation,boolean wait,Long oldValue,Long newValue) throws StandardException {
  int columnNum=SYSSEQUENCESRowFactory.SYSSEQUENCES_CURRENT_VALUE;
  FormatableBitSet columnToUpdate=new FormatableBitSet(SYSSEQUENCESRowFactory.SYSSEQUENCES_COLUMN_COUNT);
  TabInfoImpl ti=getNonCoreTI(SYSSEQUENCES_CATALOG_NUM);
  ConglomerateController heapCC=null;
  SYSSEQUENCESRowFactory rf=(SYSSEQUENCESRowFactory)ti.getCatalogRowFactory();
  ExecRow row=rf.makeEmptyRow();
  columnToUpdate.set(columnNum - 1);
  try {
    heapCC=tc.openConglomerate(ti.getHeapConglomerate(),false,(TransactionController.OPENMODE_FORUPDATE | ((wait) ? 0 : TransactionController.OPENMODE_LOCK_NOWAIT)),TransactionController.MODE_RECORD,TransactionController.ISOLATION_REPEATABLE_READ);
    boolean baseRowExists=heapCC.fetch(rowLocation,row.getRowArray(),columnToUpdate,wait);
    if (!baseRowExists) {
      return false;
    }
    NumberDataValue oldValueOnDisk=(NumberDataValue)row.getColumn(columnNum);
    SQLLongint expectedOldValue;
    if (oldValue == null) {
      expectedOldValue=new SQLLongint();
    }
 else {
      expectedOldValue=new SQLLongint(oldValue.longValue());
    }
    if ((oldValue == null) || (expectedOldValue.compare(oldValueOnDisk) == 0)) {
      SQLLongint newValueOnDisk;
      if (newValue == null) {
        newValueOnDisk=new SQLLongint();
      }
 else {
        newValueOnDisk=new SQLLongint(newValue.longValue());
      }
      row.setColumn(columnNum,newValueOnDisk);
      heapCC.replace(rowLocation,row.getRowArray(),columnToUpdate);
      return true;
    }
 else {
      return false;
    }
  }
  finally {
    if (heapCC != null) {
      heapCC.close();
    }
  }
}"
79977,"public void clean(boolean forRemove) throws StandardException {
  if (_sequenceGenerator != null) {
    boolean gapClosed=updateCurrentValueOnDisk(null,peekAtCurrentValue());
    if (!gapClosed) {
      String errorMessage=MessageService.getTextMessage(SQLState.LANG_CANT_FLUSH_PREALLOCATOR,_sequenceGenerator.getSchemaName(),_sequenceGenerator.getName());
      Monitor.getStream().println(errorMessage);
    }
  }
  _uuidString=null;
  _sequenceGenerator=null;
}","public void clean(boolean forRemove) throws StandardException {
  boolean gapClosed=false;
  try {
    if (_sequenceGenerator == null) {
      gapClosed=true;
    }
 else {
      gapClosed=updateCurrentValueOnDisk(null,peekAtCurrentValue());
    }
  }
 catch (  StandardException se) {
    if (!SQLState.LANG_TOO_MUCH_CONTENTION_ON_SEQUENCE.equals(se.getMessageId())) {
      throw se;
    }
  }
 finally {
    if (!gapClosed) {
      String errorMessage=MessageService.getTextMessage(SQLState.LANG_CANT_FLUSH_PREALLOCATOR,_sequenceGenerator.getSchemaName(),_sequenceGenerator.getName());
      Monitor.getStream().println(errorMessage);
    }
    _uuidString=null;
    _sequenceGenerator=null;
  }
}"
79978,"/** 
 * Check table name and then clear it from the result set columns.
 * @exception StandardExcepion if invalid column/table is specified.
 */
private void checkTableNameAndScrubResultColumns(ResultColumnList rcl) throws StandardException {
  for (  ResultColumn column : rcl) {
    boolean foundMatchingTable=false;
    if (column.getTableName() != null) {
      for (      ResultSetNode rsn : ((SelectNode)resultSet).fromList) {
        FromTable fromTable=(FromTable)rsn;
        final String tableName;
        if (fromTable instanceof CurrentOfNode) {
          tableName=((CurrentOfNode)fromTable).getBaseCursorTargetTableName().getTableName();
        }
 else {
          tableName=fromTable.getBaseTableName();
        }
        if (column.getTableName().equals(tableName)) {
          foundMatchingTable=true;
          break;
        }
      }
      if (!foundMatchingTable) {
        throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND,column.getTableName() + ""String_Node_Str"" + column.getName());
      }
    }
    column.clearTableName();
  }
}","/** 
 * Check table name and then clear it from the result set columns.
 * @exception StandardExcepion if invalid column/table is specified.
 */
private void checkTableNameAndScrubResultColumns(ResultColumnList rcl) throws StandardException {
  for (  ResultColumn column : rcl) {
    boolean foundMatchingTable=false;
    if ((column.getTableName() != null) && (!inMatchingClause())) {
      for (      ResultSetNode rsn : ((SelectNode)resultSet).fromList) {
        FromTable fromTable=(FromTable)rsn;
        final String tableName;
        if (fromTable instanceof CurrentOfNode) {
          tableName=((CurrentOfNode)fromTable).getBaseCursorTargetTableName().getTableName();
        }
 else {
          tableName=fromTable.getBaseTableName();
        }
        if (column.getTableName().equals(tableName)) {
          foundMatchingTable=true;
          break;
        }
      }
      if (!foundMatchingTable) {
        throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND,column.getTableName() + ""String_Node_Str"" + column.getName());
      }
    }
    column.clearTableName();
  }
}"
79979,"/** 
 * Construct top level suite in this JUnit test
 */
public static Test suite(){
  String luceneVersion=getSystemProperty(LUCENE_VERSION_PROPERTY);
  if (luceneVersion != null) {
    LUCENE_VERSION=luceneVersion;
  }
  TestSuite suite=(TestSuite)TestConfiguration.embeddedSuite(LuceneSupportPermsTest.class);
  Test localizedTest=new LocaleTestSetup(suite,new Locale(LANGUAGE,COUNTRY));
  Test secureTest=new SecurityManagerSetup(localizedTest,POLICY_FILE);
  Test authenticatedTest=DatabasePropertyTestSetup.builtinAuthentication(secureTest,LEGAL_USERS,""String_Node_Str"");
  Test authorizedTest=TestConfiguration.sqlAuthorizationDecorator(authenticatedTest);
  return authorizedTest;
}","/** 
 * Construct top level suite in this JUnit test
 */
public static Test suite(){
  String luceneVersion=getSystemProperty(LUCENE_VERSION_PROPERTY);
  if (luceneVersion != null) {
    LUCENE_VERSION=luceneVersion;
  }
  TestSuite suite=(TestSuite)TestConfiguration.embeddedSuite(LuceneSupportPermsTest.class);
  Test secureTest=new SecurityManagerSetup(suite,POLICY_FILE);
  Test authenticatedTest=DatabasePropertyTestSetup.builtinAuthentication(secureTest,LEGAL_USERS,""String_Node_Str"");
  Test authorizedTest=TestConfiguration.sqlAuthorizationDecorator(authenticatedTest);
  Test localizedTest=new LocaleTestSetup(authorizedTest,new Locale(LANGUAGE,COUNTRY));
  return localizedTest;
}"
79980,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(SecurityManagerSetup.noSecurityManager(TestConfiguration.embeddedSuite(LuceneSupportTest.class)));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  Test baseTest=TestConfiguration.embeddedSuite(LuceneSupportTest.class);
  Test localizedTest=new LocaleTestSetup(baseTest,new Locale(""String_Node_Str"",""String_Node_Str""));
  suite.addTest(SecurityManagerSetup.noSecurityManager(localizedTest));
  return suite;
}"
79981,"public void testCreateAndQueryIndex() throws Exception {
  CallableStatement cSt;
  Statement s=createStatement();
  cSt=prepareCall(""String_Node_Str"");
  assertUpdateCount(cSt,0);
  String[][] expectedRows=new String[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  JDBC.assertFullResultSet(s.executeQuery(""String_Node_Str""),expectedRows);
  expectedRows=new String[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  JDBC.assertFullResultSet(s.executeQuery(""String_Node_Str""),expectedRows);
  JDBC.assertEmpty(s.executeQuery(""String_Node_Str""));
  expectedRows=new String[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  JDBC.assertFullResultSet(s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""),expectedRows);
  cSt=prepareCall(""String_Node_Str"");
  assertUpdateCount(cSt,0);
}","public void testCreateAndQueryIndex() throws Exception {
  CallableStatement cSt;
  Statement s=createStatement();
  getConnection().prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").executeUpdate();
  JDBC.assertFullResultSet(s.executeQuery(""String_Node_Str""),new String[][]{{""String_Node_Str""}});
  getConnection().prepareStatement(""String_Node_Str"").executeUpdate();
  cSt=prepareCall(""String_Node_Str"");
  assertUpdateCount(cSt,0);
  String[][] expectedRows=new String[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  JDBC.assertFullResultSet(s.executeQuery(""String_Node_Str""),expectedRows);
  expectedRows=new String[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  JDBC.assertFullResultSet(s.executeQuery(""String_Node_Str""),expectedRows);
  JDBC.assertEmpty(s.executeQuery(""String_Node_Str""));
  expectedRows=new String[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  JDBC.assertFullResultSet(s.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""),expectedRows);
  cSt=prepareCall(""String_Node_Str"");
  assertUpdateCount(cSt,0);
}"
79982,"/** 
 * <p> Test that only the DBO can (un)load the tool and the tool can't be (un)loaded twice. </p>
 */
public void test_003_loading() throws Exception {
  Connection dboConnection=openUserConnection(TEST_DBO);
  Connection ruthConnection=openUserConnection(RUTH);
  goodStatement(dboConnection,""String_Node_Str"");
  expectExecutionError(ruthConnection,DBO_ONLY,LOAD_TOOL);
  goodStatement(dboConnection,LOAD_TOOL);
  expectExecutionError(dboConnection,DOUBLE_LOAD_ILLEGAL,LOAD_TOOL);
  expectExecutionError(ruthConnection,NOT_INDEXABLE,""String_Node_Str"");
  expectExecutionError(ruthConnection,NOT_INDEXABLE,""String_Node_Str"");
  expectExecutionError(ruthConnection,NOT_INDEXABLE,""String_Node_Str"");
  expectExecutionError(ruthConnection,NONEXISTENT_OBJECT,""String_Node_Str"");
  expectExecutionError(ruthConnection,NONEXISTENT_OBJECT,""String_Node_Str"");
  expectExecutionError(ruthConnection,DBO_ONLY,UNLOAD_TOOL);
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,UNLOAD_TOOL);
  expectExecutionError(dboConnection,DOUBLE_UNLOAD_ILLEGAL,UNLOAD_TOOL);
  goodStatement(dboConnection,LOAD_TOOL);
  goodStatement(dboConnection,UNLOAD_TOOL);
}","/** 
 * <p> Test that only the DBO can (un)load the tool and the tool can't be (un)loaded twice. </p>
 */
public void test_003_loading() throws Exception {
  Connection dboConnection=openUserConnection(TEST_DBO);
  Connection ruthConnection=openUserConnection(RUTH);
  createSchema(ruthConnection,Types.INTEGER);
  goodStatement(dboConnection,""String_Node_Str"");
  expectExecutionError(ruthConnection,DBO_ONLY,LOAD_TOOL);
  goodStatement(dboConnection,LOAD_TOOL);
  expectExecutionError(dboConnection,DOUBLE_LOAD_ILLEGAL,LOAD_TOOL);
  expectExecutionError(ruthConnection,NOT_INDEXABLE,""String_Node_Str"");
  expectExecutionError(ruthConnection,NOT_INDEXABLE,""String_Node_Str"");
  expectExecutionError(ruthConnection,NOT_INDEXABLE,""String_Node_Str"");
  expectExecutionError(ruthConnection,NONEXISTENT_OBJECT,""String_Node_Str"");
  expectExecutionError(ruthConnection,NONEXISTENT_OBJECT,""String_Node_Str"");
  expectExecutionError(ruthConnection,DBO_ONLY,UNLOAD_TOOL);
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,UNLOAD_TOOL);
  expectExecutionError(dboConnection,DOUBLE_UNLOAD_ILLEGAL,UNLOAD_TOOL);
  goodStatement(dboConnection,LOAD_TOOL);
  goodStatement(dboConnection,UNLOAD_TOOL);
  dropSchema(ruthConnection);
}"
79983,"/** 
 * Bind this CursorNode.  This means looking up tables and columns and getting their types, and figuring out the result types of all expressions, as well as doing view resolution, permissions checking, etc. It also includes determining whether an UNSPECIFIED cursor is updatable or not, and verifying that an UPDATE cursor actually is.
 * @exception StandardException		Thrown on error
 */
@Override public void bindStatement() throws StandardException {
  boolean wasSkippingTypePrivileges=getCompilerContext().skipTypePrivileges(true);
  DataDictionary dataDictionary;
  dataDictionary=getDataDictionary();
  checkIndexStats=(dataDictionary.getIndexStatsRefresher(true) != null);
  if (orderByList != null) {
    orderByList.pullUpOrderByColumns(resultSet);
  }
  getCompilerContext().pushCurrentPrivType(getPrivType());
  try {
    FromList fromList=new FromList(getOptimizerFactory().doJoinOrderOptimization(),getContextManager());
    resultSet.rejectParameters();
    super.bind(dataDictionary);
    resultSet.bindResultColumns(fromList);
    resultSet.bindUntypedNullsToResultColumns(null);
    resultSet.rejectXMLValues();
    if (SanityManager.DEBUG) {
      SanityManager.ASSERT(fromList.size() == 0,""String_Node_Str"" + fromList.size() + ""String_Node_Str"");
    }
  }
  finally {
    getCompilerContext().popCurrentPrivType();
  }
  collectTablesWithPossiblyStaleStats();
  if (orderByList != null) {
    orderByList.bindOrderByColumns(resultSet);
  }
  bindOffsetFetch(offset,fetchFirst);
  if (updateMode == UPDATE) {
    int checkedUpdateMode;
    checkedUpdateMode=determineUpdateMode(dataDictionary);
    if (SanityManager.DEBUG)     SanityManager.DEBUG(""String_Node_Str"",""String_Node_Str"" + updateMode + ""String_Node_Str""+ checkedUpdateMode);
    if (updateMode != checkedUpdateMode)     throw StandardException.newException(SQLState.LANG_STMT_NOT_UPDATABLE);
  }
  if (updateMode == UNSPECIFIED) {
    if (getLanguageConnectionContext().getStatementContext().isForReadOnly()) {
      updateMode=READ_ONLY;
    }
 else {
      updateMode=determineUpdateMode(dataDictionary);
    }
  }
  if (updateMode == READ_ONLY) {
    updatableColumns=null;
  }
  if (updateMode == UPDATE) {
    bindUpdateColumns(updateTable);
    if (updateTable != null) {
      updateTable.markUpdatableByCursor(updatableColumns);
      resultSet.getResultColumns().markColumnsInSelectListUpdatableByCursor(updatableColumns);
    }
  }
  resultSet.renameGeneratedResultNames();
  if (getLanguageConnectionContext().checkIfAnyDeclaredGlobalTempTablesForThisConnection()) {
    ArrayList<String> sessionSchemaTableNames=getSessionSchemaTableNamesForCursor();
    if (sessionSchemaTableNames != null)     indexOfSessionTableNamesInSavedObjects=getCompilerContext().addSavedObject(sessionSchemaTableNames);
  }
  getCompilerContext().skipTypePrivileges(wasSkippingTypePrivileges);
}","/** 
 * Bind this CursorNode.  This means looking up tables and columns and getting their types, and figuring out the result types of all expressions, as well as doing view resolution, permissions checking, etc. It also includes determining whether an UNSPECIFIED cursor is updatable or not, and verifying that an UPDATE cursor actually is.
 * @exception StandardException		Thrown on error
 */
@Override public void bindStatement() throws StandardException {
  boolean wasSkippingTypePrivileges=getCompilerContext().skipTypePrivileges(true);
  DataDictionary dataDictionary;
  dataDictionary=getDataDictionary();
  checkIndexStats=(dataDictionary.getIndexStatsRefresher(true) != null);
  if (orderByList != null) {
    orderByList.pullUpOrderByColumns(resultSet);
  }
  getCompilerContext().pushCurrentPrivType(getPrivType());
  try {
    FromList fromList=new FromList(getOptimizerFactory().doJoinOrderOptimization(),getContextManager());
    resultSet.rejectParameters();
    super.bind(dataDictionary);
    resultSet.bindResultColumns(fromList);
    resultSet.bindUntypedNullsToResultColumns(null);
    if (!forMergeStatement) {
      resultSet.rejectXMLValues();
    }
    if (SanityManager.DEBUG) {
      SanityManager.ASSERT(fromList.size() == 0,""String_Node_Str"" + fromList.size() + ""String_Node_Str"");
    }
  }
  finally {
    getCompilerContext().popCurrentPrivType();
  }
  collectTablesWithPossiblyStaleStats();
  if (orderByList != null) {
    orderByList.bindOrderByColumns(resultSet);
  }
  bindOffsetFetch(offset,fetchFirst);
  if (updateMode == UPDATE) {
    int checkedUpdateMode;
    checkedUpdateMode=determineUpdateMode(dataDictionary);
    if (SanityManager.DEBUG)     SanityManager.DEBUG(""String_Node_Str"",""String_Node_Str"" + updateMode + ""String_Node_Str""+ checkedUpdateMode);
    if (updateMode != checkedUpdateMode)     throw StandardException.newException(SQLState.LANG_STMT_NOT_UPDATABLE);
  }
  if (updateMode == UNSPECIFIED) {
    if (getLanguageConnectionContext().getStatementContext().isForReadOnly()) {
      updateMode=READ_ONLY;
    }
 else {
      updateMode=determineUpdateMode(dataDictionary);
    }
  }
  if (updateMode == READ_ONLY) {
    updatableColumns=null;
  }
  if (updateMode == UPDATE) {
    bindUpdateColumns(updateTable);
    if (updateTable != null) {
      updateTable.markUpdatableByCursor(updatableColumns);
      resultSet.getResultColumns().markColumnsInSelectListUpdatableByCursor(updatableColumns);
    }
  }
  resultSet.renameGeneratedResultNames();
  if (getLanguageConnectionContext().checkIfAnyDeclaredGlobalTempTablesForThisConnection()) {
    ArrayList<String> sessionSchemaTableNames=getSessionSchemaTableNamesForCursor();
    if (sessionSchemaTableNames != null)     indexOfSessionTableNamesInSavedObjects=getCompilerContext().addSavedObject(sessionSchemaTableNames);
  }
  getCompilerContext().skipTypePrivileges(wasSkippingTypePrivileges);
}"
79984,"/** 
 * Constructor for a CursorNode
 * @param statementType      Type of statement (SELECT, UPDATE, INSERT)
 * @param resultSet          A ResultSetNode specifying the result set forthe cursor
 * @param name               The name of the cursor, null if no name
 * @param orderByList        The order by list for the cursor, null if noorder by list
 * @param offset             The value of a <result offset clause> ifpresent
 * @param fetchFirst         The value of a <fetch first clause> if present
 * @param hasJDBClimitClause True if the offset/fetchFirst clauses comefrom JDBC limit/offset escape syntax
 * @param updateMode         The user-specified update mode for the cursor,for example, CursorNode.READ_ONLY
 * @param updatableColumns   The array of updatable columns specified bythe user in the FOR UPDATE clause, null if no updatable columns specified.  May only be provided if the updateMode parameter is CursorNode.UPDATE.
 * @param cm                 The context manager
 */
CursorNode(String statementType,ResultSetNode resultSet,String name,OrderByList orderByList,ValueNode offset,ValueNode fetchFirst,boolean hasJDBClimitClause,int updateMode,String[] updatableColumns,ContextManager cm){
  super(resultSet,cm);
  this.name=name;
  this.statementType=statementType;
  this.orderByList=orderByList;
  this.offset=offset;
  this.fetchFirst=fetchFirst;
  this.hasJDBClimitClause=hasJDBClimitClause;
  this.updateMode=updateMode;
  this.updatableColumns=updatableColumns == null ? null : Arrays.asList(updatableColumns);
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT(this.updatableColumns == null || this.updatableColumns.isEmpty() || this.updateMode == UPDATE,""String_Node_Str"" + ""String_Node_Str"");
  }
}","/** 
 * Constructor for a CursorNode
 * @param statementType      Type of statement (SELECT, UPDATE, INSERT)
 * @param resultSet          A ResultSetNode specifying the result set forthe cursor
 * @param name               The name of the cursor, null if no name
 * @param orderByList        The order by list for the cursor, null if noorder by list
 * @param offset             The value of a <result offset clause> ifpresent
 * @param fetchFirst         The value of a <fetch first clause> if present
 * @param hasJDBClimitClause True if the offset/fetchFirst clauses comefrom JDBC limit/offset escape syntax
 * @param updateMode         The user-specified update mode for the cursor,for example, CursorNode.READ_ONLY
 * @param updatableColumns   The array of updatable columns specified bythe user in the FOR UPDATE clause, null if no updatable columns specified.  May only be provided if the updateMode parameter is CursorNode.UPDATE.
 * @param forMergeStatement True if this cursor is the driving left-join of a MERGE statement
 * @param cm                 The context manager
 */
CursorNode(String statementType,ResultSetNode resultSet,String name,OrderByList orderByList,ValueNode offset,ValueNode fetchFirst,boolean hasJDBClimitClause,int updateMode,String[] updatableColumns,boolean forMergeStatement,ContextManager cm){
  super(resultSet,cm);
  this.name=name;
  this.statementType=statementType;
  this.orderByList=orderByList;
  this.offset=offset;
  this.fetchFirst=fetchFirst;
  this.hasJDBClimitClause=hasJDBClimitClause;
  this.updateMode=updateMode;
  this.updatableColumns=updatableColumns == null ? null : Arrays.asList(updatableColumns);
  this.forMergeStatement=forMergeStatement;
  if (SanityManager.DEBUG) {
    SanityManager.ASSERT(this.updatableColumns == null || this.updatableColumns.isEmpty() || this.updateMode == UPDATE,""String_Node_Str"" + ""String_Node_Str"");
  }
}"
79985,"/** 
 * Bind the driving left join select. Stuffs the left join SelectNode into the resultSet variable.
 */
private void bindLeftJoin(DataDictionary dd) throws StandardException {
  CompilerContext cc=getCompilerContext();
  final int previousReliability=cc.getReliability();
  try {
    cc.setReliability(previousReliability | CompilerContext.SQL_IN_ROUTINES_ILLEGAL);
    IgnoreFilter ignorePermissions=new IgnoreFilter();
    getCompilerContext().addPrivilegeFilter(ignorePermissions);
    _hojn=new HalfOuterJoinNode(_sourceTable,_targetTable,_searchCondition,null,false,null,getContextManager());
    _leftJoinFromList=_hojn.makeFromList(true,true);
    _leftJoinFromList.bindTables(dd,new FromList(getOptimizerFactory().doJoinOrderOptimization(),getContextManager()));
    if (!sourceIsBase_View_or_VTI()) {
      throw StandardException.newException(SQLState.LANG_SOURCE_NOT_BASE_VIEW_OR_VTI);
    }
    FromList topFromList=new FromList(getOptimizerFactory().doJoinOrderOptimization(),getContextManager());
    topFromList.addFromTable(_hojn);
    getCompilerContext().removePrivilegeFilter(ignorePermissions);
    for (    MatchingClauseNode mcn : _matchingClauses) {
      mcn.bindRefinement(this,_leftJoinFromList);
    }
    ResultColumnList selectList=buildSelectList();
    _selectList=selectList.copyListAndObjects();
    for (    MatchingClauseNode mcn : _matchingClauses) {
      mcn.bindThenColumns(_selectList);
    }
    resultSet=new SelectNode(selectList,topFromList,null,null,null,null,null,getContextManager());
    _leftJoinCursor=new CursorNode(""String_Node_Str"",resultSet,null,null,null,null,false,CursorNode.READ_ONLY,null,getContextManager());
    getCompilerContext().addPrivilegeFilter(ignorePermissions);
    _leftJoinCursor.bindStatement();
    getCompilerContext().removePrivilegeFilter(ignorePermissions);
    addOnClausePrivileges();
  }
  finally {
    cc.setReliability(previousReliability);
  }
}","/** 
 * Bind the driving left join select. Stuffs the left join SelectNode into the resultSet variable.
 */
private void bindLeftJoin(DataDictionary dd) throws StandardException {
  CompilerContext cc=getCompilerContext();
  final int previousReliability=cc.getReliability();
  try {
    cc.setReliability(previousReliability | CompilerContext.SQL_IN_ROUTINES_ILLEGAL);
    IgnoreFilter ignorePermissions=new IgnoreFilter();
    getCompilerContext().addPrivilegeFilter(ignorePermissions);
    _hojn=new HalfOuterJoinNode(_sourceTable,_targetTable,_searchCondition,null,false,null,getContextManager());
    _leftJoinFromList=_hojn.makeFromList(true,true);
    _leftJoinFromList.bindTables(dd,new FromList(getOptimizerFactory().doJoinOrderOptimization(),getContextManager()));
    if (!sourceIsBase_View_or_VTI()) {
      throw StandardException.newException(SQLState.LANG_SOURCE_NOT_BASE_VIEW_OR_VTI);
    }
    FromList topFromList=new FromList(getOptimizerFactory().doJoinOrderOptimization(),getContextManager());
    topFromList.addFromTable(_hojn);
    getCompilerContext().removePrivilegeFilter(ignorePermissions);
    for (    MatchingClauseNode mcn : _matchingClauses) {
      mcn.bindRefinement(this,_leftJoinFromList);
    }
    ResultColumnList selectList=buildSelectList();
    _selectList=selectList.copyListAndObjects();
    for (    MatchingClauseNode mcn : _matchingClauses) {
      mcn.bindThenColumns(_selectList);
    }
    resultSet=new SelectNode(selectList,topFromList,null,null,null,null,null,getContextManager());
    _leftJoinCursor=new CursorNode(""String_Node_Str"",resultSet,null,null,null,null,false,CursorNode.READ_ONLY,null,true,getContextManager());
    getCompilerContext().addPrivilegeFilter(ignorePermissions);
    _leftJoinCursor.bindStatement();
    getCompilerContext().removePrivilegeFilter(ignorePermissions);
    addOnClausePrivileges();
  }
  finally {
    cc.setReliability(previousReliability);
  }
}"
79986,"/** 
 * Function for making a byte array from an array of ints 
 */
public static Blob makeBlob(Integer... inputs){
  if (inputs == null) {
    return null;
  }
  byte[] retval=new byte[inputs.length];
  for (int i=0; i < inputs.length; i++) {
    retval[i]=(byte)inputs[i].intValue();
  }
  return new HarmonySerialBlob(retval);
}","/** 
 * Function for making a big Blob by repeating the inputs a number of times 
 */
public static Blob makeBlob(int repeatCount,int... inputs){
  if (inputs == null) {
    return null;
  }
  if ((inputs.length == 0) || (repeatCount == 0)) {
    return null;
  }
  byte[] retval=new byte[repeatCount * inputs.length];
  int idx=0;
  for (int i=0; i < repeatCount; i++) {
    for (    int val : inputs) {
      retval[idx++]=(byte)val;
    }
  }
  return new HarmonySerialBlob(retval);
}"
79987,"/** 
 * Write this object to a stream of stored objects.
 * @param out write bytes here.
 * @exception IOException		thrown on error
 */
public void writeExternal(ObjectOutput out) throws IOException {
  out.writeInt(FIRST_VERSION);
  out.writeInt(_clauseType);
  out.writeUTF(_matchRefinementName);
  ArrayUtil.writeIntArray(out,_thenColumnOffsets);
  out.writeUTF(_resultSetFieldName);
  out.writeUTF(_actionMethodName);
  out.writeObject(_thenAction);
}","/** 
 * Write this object to a stream of stored objects.
 * @param out write bytes here.
 * @exception IOException		thrown on error
 */
public void writeExternal(ObjectOutput out) throws IOException {
  out.writeInt(FIRST_VERSION);
  out.writeInt(_clauseType);
  out.writeObject(_matchRefinementName);
  ArrayUtil.writeIntArray(out,_thenColumnOffsets);
  out.writeObject(_resultSetFieldName);
  out.writeObject(_actionMethodName);
  out.writeObject(_thenAction);
}"
79988,"/** 
 * Read this object from a stream of stored objects.
 * @param in read this.
 * @exception IOException					thrown on error
 * @exception ClassNotFoundException		thrown on error
 */
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int oldVersion=in.readInt();
  _clauseType=in.readInt();
  _matchRefinementName=in.readUTF();
  _thenColumnOffsets=ArrayUtil.readIntArray(in);
  _resultSetFieldName=in.readUTF();
  _actionMethodName=in.readUTF();
  _thenAction=(ConstantAction)in.readObject();
}","/** 
 * Read this object from a stream of stored objects.
 * @param in read this.
 * @exception IOException					thrown on error
 * @exception ClassNotFoundException		thrown on error
 */
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int oldVersion=in.readInt();
  _clauseType=in.readInt();
  _matchRefinementName=(String)in.readObject();
  _thenColumnOffsets=ArrayUtil.readIntArray(in);
  _resultSetFieldName=(String)in.readObject();
  _actionMethodName=(String)in.readObject();
  _thenAction=(ConstantAction)in.readObject();
}"
79989,"/** 
 * <p> Test some bad syntax. </p>
 */
public void test_001_badSyntax() throws Exception {
  Connection dboConnection=openUserConnection(TEST_DBO);
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  expectCompilationError(dboConnection,SYNTAX_ERROR,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SYNTAX_ERROR,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SYNTAX_ERROR,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SOURCE_MUST_BE_BASE_VIEW_OR_VTI,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SAME_EXPOSED_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SAME_EXPOSED_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SAME_EXPOSED_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_MODIFY_IDENTITY,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_OVERRIDE_GENERATION_CLAUSE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_MODIFY_IDENTITY,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_OVERRIDE_GENERATION_CLAUSE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_MODIFY_IDENTITY,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,DUPLICATE_COLUMNS,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_NOT_IN_TABLE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ILLEGAL_STORAGE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_COUNT_MISMATCH,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_COUNT_MISMATCH,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,DUPLICATE_SET_COLUMNS,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_NOT_IN_TABLE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ILLEGAL_STORAGE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectExecutionWarning(dboConnection,NO_ROWS_AFFECTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectExecutionWarning(dboConnection,NO_ROWS_AFFECTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectExecutionWarning(dboConnection,NO_ROWS_AFFECTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectNoWarning(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
}","/** 
 * <p> Test some bad syntax. </p>
 */
public void test_001_badSyntax() throws Exception {
  Connection dboConnection=openUserConnection(TEST_DBO);
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  expectCompilationError(dboConnection,SYNTAX_ERROR,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SYNTAX_ERROR,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SYNTAX_ERROR,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SOURCE_MUST_BE_BASE_VIEW_OR_VTI,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SAME_EXPOSED_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SAME_EXPOSED_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,SAME_EXPOSED_NAME,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ROUTINE_CANT_ISSUE_SQL,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_MODIFY_IDENTITY,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_OVERRIDE_GENERATION_CLAUSE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_MODIFY_IDENTITY,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_OVERRIDE_GENERATION_CLAUSE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,CANT_MODIFY_IDENTITY,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,DUPLICATE_COLUMNS,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_NOT_IN_TABLE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ILLEGAL_STORAGE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_OUT_OF_SCOPE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_COUNT_MISMATCH,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_COUNT_MISMATCH,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,TARGET_MUST_BE_BASE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,DUPLICATE_SET_COLUMNS,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,COLUMN_NOT_IN_TABLE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,ILLEGAL_STORAGE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectExecutionWarning(dboConnection,NO_ROWS_AFFECTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectExecutionWarning(dboConnection,NO_ROWS_AFFECTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectExecutionWarning(dboConnection,NO_ROWS_AFFECTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectNoWarning(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  expectCompilationError(dboConnection,NOT_IMPLEMENTED,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
  goodStatement(dboConnection,""String_Node_Str"");
}"
79990,"public XPLAINStatementDescriptor(UUID stmt_id,String stmt_name,String stmt_type,String stmt_text,String jvm_id,String os_id,String xplain_mode,Timestamp xplain_time,String thread_id,String xa_id,String session_id,String db_name,String drda_id,UUID timing_id){
  this.stmt_id=stmt_id;
  this.stmt_name=stmt_name;
  this.stmt_type=stmt_type;
  this.stmt_text=stmt_text;
  this.jvm_id=jvm_id;
  this.os_id=os_id;
  this.xplain_mode=xplain_mode;
  this.xplain_time=xplain_time;
  this.thread_id=thread_id;
  this.xa_id=xa_id;
  this.session_id=session_id;
  this.db_name=db_name;
  this.drda_id=drda_id;
  this.timing_id=timing_id;
}","public XPLAINStatementDescriptor(UUID stmt_id,String stmt_name,String stmt_type,String stmt_text,String jvm_id,String os_id,String xplain_mode,Timestamp xplain_time,String thread_id,String xa_id,String session_id,String db_name,String drda_id,UUID timing_id){
  this.stmt_id=stmt_id;
  this.stmt_name=stmt_name;
  this.stmt_type=stmt_type;
  this.stmt_text=stmt_text;
  this.jvm_id=jvm_id;
  this.os_id=os_id;
  this.xplain_mode=xplain_mode;
  this.xplain_time=DataTypeUtilities.clone(xplain_time);
  this.thread_id=thread_id;
  this.xa_id=xa_id;
  this.session_id=session_id;
  this.db_name=db_name;
  this.drda_id=drda_id;
  this.timing_id=timing_id;
}"
79991,"public XPLAINStatementTimingsDescriptor(UUID timing_id,Long parse_time,Long bind_time,Long optimize_time,Long generate_time,Long compile_time,Long execute_time,Timestamp begin_comp_time,Timestamp end_comp_time,Timestamp begin_exe_time,Timestamp end_exe_time){
  this.timing_id=timing_id;
  this.parse_time=parse_time;
  this.bind_time=bind_time;
  this.optimize_time=optimize_time;
  this.generate_time=generate_time;
  this.compile_time=compile_time;
  this.execute_time=execute_time;
  this.begin_comp_time=begin_comp_time;
  this.end_comp_time=end_comp_time;
  this.begin_exe_time=begin_exe_time;
  this.end_exe_time=end_exe_time;
}","public XPLAINStatementTimingsDescriptor(UUID timing_id,Long parse_time,Long bind_time,Long optimize_time,Long generate_time,Long compile_time,Long execute_time,Timestamp begin_comp_time,Timestamp end_comp_time,Timestamp begin_exe_time,Timestamp end_exe_time){
  this.timing_id=timing_id;
  this.parse_time=parse_time;
  this.bind_time=bind_time;
  this.optimize_time=optimize_time;
  this.generate_time=generate_time;
  this.compile_time=compile_time;
  this.execute_time=execute_time;
  this.begin_comp_time=DataTypeUtilities.clone(begin_comp_time);
  this.end_comp_time=DataTypeUtilities.clone(end_comp_time);
  this.begin_exe_time=DataTypeUtilities.clone(begin_exe_time);
  this.end_exe_time=DataTypeUtilities.clone(end_exe_time);
}"
79992,"/** 
 * Workhorse for dropping a column from a table. This routine drops a column from a table, taking care to properly handle the various related schema objects. The syntax which gets you here is: ALTER TABLE tbl DROP [COLUMN] col [CASCADE|RESTRICT] The keyword COLUMN is optional, and if you don't specify CASCADE or RESTRICT, the default is CASCADE (the default is chosen in the parser, not here). If you specify RESTRICT, then the column drop should be rejected if it would cause a dependent schema object to become invalid. If you specify CASCADE, then the column drop should additionally drop other schema objects which have become invalid. You may not drop the last (only) column in a table. Schema objects of interest include: - views - triggers - constraints - check constraints - primary key constraints - foreign key constraints - unique key constraints - not null constraints - privileges - indexes - default values Dropping a column may also change the column position numbers of other columns in the table, which may require fixup of schema objects (such as triggers and column privileges) which refer to columns by column position number. Indexes are a bit interesting. The official SQL spec doesn't talk about indexes; they are considered to be an imlementation-specific performance optimization. The current Derby behavior is that: - CASCADE/RESTRICT doesn't matter for indexes - when a column is dropped, it is removed from any indexes which contain it. - if that column was the only column in the index, the entire index is dropped. 
 * @param columnName the name of the column specfication in the ALTER statement-- currently we allow only one.
 * @exception StandardException 	thrown on failure.
 */
private void dropColumnFromTable(String columnName) throws StandardException {
  boolean cascade=(behavior == StatementType.DROP_CASCADE);
  ColumnDescriptorList generatedColumnList=td.getGeneratedColumns();
  int generatedColumnCount=generatedColumnList.size();
  ArrayList cascadedDroppedColumns=new ArrayList();
  for (int i=0; i < generatedColumnCount; i++) {
    ColumnDescriptor generatedColumn=generatedColumnList.elementAt(i);
    String[] referencedColumnNames=generatedColumn.getDefaultInfo().getReferencedColumnNames();
    int referencedColumnCount=referencedColumnNames.length;
    for (int j=0; j < referencedColumnCount; j++) {
      if (columnName.equals(referencedColumnNames[j])) {
        String generatedColumnName=generatedColumn.getColumnName();
        if (!cascade) {
          throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",generatedColumnName);
        }
 else {
          cascadedDroppedColumns.add(generatedColumnName);
        }
      }
    }
  }
  DataDescriptorGenerator ddg=dd.getDataDescriptorGenerator();
  int cascadedDrops=cascadedDroppedColumns.size();
  int sizeAfterCascadedDrops=td.getColumnDescriptorList().size() - cascadedDrops;
  if (sizeAfterCascadedDrops == 1) {
    throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),""String_Node_Str"" + columnName,""String_Node_Str"",td.getQualifiedName());
  }
  for (int i=0; i < cascadedDrops; i++) {
    String generatedColumnName=(String)cascadedDroppedColumns.get(i);
    activation.addWarning(StandardException.newWarning(SQLState.LANG_GEN_COL_DROPPED,generatedColumnName,td.getName()));
    dropColumnFromTable(generatedColumnName);
  }
  td=dd.getTableDescriptor(tableId);
  ColumnDescriptor columnDescriptor=td.getColumnDescriptor(columnName);
  if (columnDescriptor == null) {
    throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,columnName,td.getQualifiedName());
  }
  int size=td.getColumnDescriptorList().size();
  droppedColumnPosition=columnDescriptor.getPosition();
  FormatableBitSet toDrop=new FormatableBitSet(size + 1);
  toDrop.set(droppedColumnPosition);
  td.setReferencedColumnMap(toDrop);
  dm.invalidateFor(td,(cascade ? DependencyManager.DROP_COLUMN : DependencyManager.DROP_COLUMN_RESTRICT),lcc);
  if (columnDescriptor.getDefaultInfo() != null) {
    dm.clearDependencies(lcc,columnDescriptor.getDefaultDescriptor(dd));
  }
  GenericDescriptorList tdl=dd.getTriggerDescriptors(td);
  for (Iterator descIter=tdl.iterator(); descIter.hasNext(); ) {
    TriggerDescriptor trd=(TriggerDescriptor)descIter.next();
    boolean triggerDroppedAlready=false;
    int[] referencedCols=trd.getReferencedCols();
    if (referencedCols != null) {
      int refColLen=referencedCols.length, j;
      boolean changed=false;
      for (j=0; j < refColLen; j++) {
        if (referencedCols[j] > droppedColumnPosition) {
          changed=true;
        }
 else         if (referencedCols[j] == droppedColumnPosition) {
          if (cascade) {
            trd.drop(lcc);
            triggerDroppedAlready=true;
            activation.addWarning(StandardException.newWarning(SQLState.LANG_TRIGGER_DROPPED,trd.getName(),td.getName()));
          }
 else {
            throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",trd.getName());
          }
          break;
        }
      }
      if (j == refColLen && changed) {
        dd.dropTriggerDescriptor(trd,tc);
        for (j=0; j < refColLen; j++) {
          if (referencedCols[j] > droppedColumnPosition)           referencedCols[j]--;
        }
        dd.addDescriptor(trd,sd,DataDictionary.SYSTRIGGERS_CATALOG_NUM,false,tc);
      }
    }
    if (triggerDroppedAlready)     continue;
    int[] referencedColsInTriggerAction=trd.getReferencedColsInTriggerAction();
    if (referencedColsInTriggerAction != null) {
      int refColInTriggerActionLen=referencedColsInTriggerAction.length, j;
      boolean changedColPositionInTriggerAction=false;
      for (j=0; j < refColInTriggerActionLen; j++) {
        if (referencedColsInTriggerAction[j] > droppedColumnPosition) {
          changedColPositionInTriggerAction=true;
        }
 else         if (referencedColsInTriggerAction[j] == droppedColumnPosition) {
          if (cascade) {
            trd.drop(lcc);
            triggerDroppedAlready=true;
            activation.addWarning(StandardException.newWarning(SQLState.LANG_TRIGGER_DROPPED,trd.getName(),td.getName()));
          }
 else {
            throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",trd.getName());
          }
          break;
        }
      }
      if (j == refColInTriggerActionLen && changedColPositionInTriggerAction) {
        dd.dropTriggerDescriptor(trd,tc);
        for (j=0; j < refColInTriggerActionLen; j++) {
          if (referencedColsInTriggerAction[j] > droppedColumnPosition)           referencedColsInTriggerAction[j]--;
        }
        trd.setReferencedColsInTriggerAction(referencedColsInTriggerAction);
        dd.addDescriptor(trd,sd,DataDictionary.SYSTRIGGERS_CATALOG_NUM,false,tc);
      }
    }
  }
  ConstraintDescriptorList csdl=dd.getConstraintDescriptors(td);
  int csdl_size=csdl.size();
  ArrayList newCongloms=new ArrayList();
  int tbr_size=0;
  ConstraintDescriptor[] toBeRemoved=new ConstraintDescriptor[csdl_size];
  for (int i=csdl_size - 1; i >= 0; i--) {
    ConstraintDescriptor cd=csdl.elementAt(i);
    int[] referencedColumns=cd.getReferencedColumns();
    int numRefCols=referencedColumns.length, j;
    boolean changed=false;
    for (j=0; j < numRefCols; j++) {
      if (referencedColumns[j] > droppedColumnPosition)       changed=true;
      if (referencedColumns[j] == droppedColumnPosition)       break;
    }
    if (j == numRefCols) {
      if ((cd instanceof CheckConstraintDescriptor) && changed) {
        dd.dropConstraintDescriptor(cd,tc);
        for (j=0; j < numRefCols; j++) {
          if (referencedColumns[j] > droppedColumnPosition)           referencedColumns[j]--;
        }
        ((CheckConstraintDescriptor)cd).setReferencedColumnsDescriptor(new ReferencedColumnsDescriptorImpl(referencedColumns));
        dd.addConstraintDescriptor(cd,tc);
      }
      continue;
    }
    if (!cascade) {
      throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",cd.getConstraintName());
    }
    if (cd instanceof ReferencedKeyConstraintDescriptor) {
      toBeRemoved[tbr_size++]=cd;
      continue;
    }
    dm.invalidateFor(cd,DependencyManager.DROP_CONSTRAINT,lcc);
    dropConstraint(cd,td,newCongloms,activation,lcc,true);
    activation.addWarning(StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,cd.getConstraintName(),td.getName()));
  }
  for (int i=tbr_size - 1; i >= 0; i--) {
    ConstraintDescriptor cd=toBeRemoved[i];
    dropConstraint(cd,td,newCongloms,activation,lcc,false);
    activation.addWarning(StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,cd.getConstraintName(),td.getName()));
    if (cascade) {
      ConstraintDescriptorList fkcdl=dd.getForeignKeys(cd.getUUID());
      for (int j=0; j < fkcdl.size(); j++) {
        ConstraintDescriptor fkcd=(ConstraintDescriptor)fkcdl.elementAt(j);
        dm.invalidateFor(fkcd,DependencyManager.DROP_CONSTRAINT,lcc);
        dropConstraint(fkcd,td,newCongloms,activation,lcc,true);
        activation.addWarning(StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,fkcd.getConstraintName(),fkcd.getTableDescriptor().getName()));
      }
    }
    dm.invalidateFor(cd,DependencyManager.DROP_CONSTRAINT,lcc);
    dm.clearDependencies(lcc,cd);
  }
  createNewBackingCongloms(newCongloms,(long[])null);
  td=dd.getTableDescriptor(tableId);
  compressTable();
  ColumnDescriptorList tab_cdl=td.getColumnDescriptorList();
  dd.dropColumnDescriptor(td.getUUID(),columnName,tc);
  ColumnDescriptor[] cdlArray=new ColumnDescriptor[size - columnDescriptor.getPosition()];
  for (int i=columnDescriptor.getPosition(), j=0; i < size; i++, j++) {
    ColumnDescriptor cd=(ColumnDescriptor)tab_cdl.elementAt(i);
    dd.dropColumnDescriptor(td.getUUID(),cd.getColumnName(),tc);
    cd.setPosition(i);
    if (cd.isAutoincrement()) {
      cd.setAutoinc_create_or_modify_Start_Increment(ColumnDefinitionNode.CREATE_AUTOINCREMENT);
    }
    cdlArray[j]=cd;
  }
  dd.addDescriptorArray(cdlArray,td,DataDictionary.SYSCOLUMNS_CATALOG_NUM,false,tc);
  List depsOnAlterTableList=dd.getProvidersDescriptorList(td.getObjectID().toString());
  for (Iterator depsOnAlterTableIterator=depsOnAlterTableList.listIterator(); depsOnAlterTableIterator.hasNext(); ) {
    DependencyDescriptor depOnAlterTableDesc=(DependencyDescriptor)depsOnAlterTableIterator.next();
    DependableFinder dependent=depOnAlterTableDesc.getDependentFinder();
    if (dependent.getSQLObjectType().equals(Dependable.STORED_PREPARED_STATEMENT)) {
      List depsTrigger=dd.getProvidersDescriptorList(depOnAlterTableDesc.getUUID().toString());
      for (Iterator depsTriggerIterator=depsTrigger.listIterator(); depsTriggerIterator.hasNext(); ) {
        DependencyDescriptor depsTriggerDesc=(DependencyDescriptor)depsTriggerIterator.next();
        DependableFinder providerIsTrigger=depsTriggerDesc.getDependentFinder();
        if (providerIsTrigger.getSQLObjectType().equals(Dependable.TRIGGER)) {
          TriggerDescriptor trdToBeDropped=dd.getTriggerDescriptor(depsTriggerDesc.getUUID());
          columnDroppedAndTriggerDependencies(trdToBeDropped,cascade,columnName);
        }
      }
    }
  }
  dd.updateSYSCOLPERMSforDropColumn(td.getUUID(),tc,columnDescriptor);
  tab_cdl.remove(td.getColumnDescriptor(columnName));
}","/** 
 * Workhorse for dropping a column from a table. This routine drops a column from a table, taking care to properly handle the various related schema objects. The syntax which gets you here is: ALTER TABLE tbl DROP [COLUMN] col [CASCADE|RESTRICT] The keyword COLUMN is optional, and if you don't specify CASCADE or RESTRICT, the default is CASCADE (the default is chosen in the parser, not here). If you specify RESTRICT, then the column drop should be rejected if it would cause a dependent schema object to become invalid. If you specify CASCADE, then the column drop should additionally drop other schema objects which have become invalid. You may not drop the last (only) column in a table. Schema objects of interest include: - views - triggers - constraints - check constraints - primary key constraints - foreign key constraints - unique key constraints - not null constraints - privileges - indexes - default values Dropping a column may also change the column position numbers of other columns in the table, which may require fixup of schema objects (such as triggers and column privileges) which refer to columns by column position number. Indexes are a bit interesting. The official SQL spec doesn't talk about indexes; they are considered to be an imlementation-specific performance optimization. The current Derby behavior is that: - CASCADE/RESTRICT doesn't matter for indexes - when a column is dropped, it is removed from any indexes which contain it. - if that column was the only column in the index, the entire index is dropped. 
 * @param columnName the name of the column specfication in the ALTER statement-- currently we allow only one.
 * @exception StandardException 	thrown on failure.
 */
private void dropColumnFromTable(String columnName) throws StandardException {
  boolean cascade=(behavior == StatementType.DROP_CASCADE);
  ColumnDescriptorList generatedColumnList=td.getGeneratedColumns();
  int generatedColumnCount=generatedColumnList.size();
  ArrayList cascadedDroppedColumns=new ArrayList();
  for (int i=0; i < generatedColumnCount; i++) {
    ColumnDescriptor generatedColumn=generatedColumnList.elementAt(i);
    String[] referencedColumnNames=generatedColumn.getDefaultInfo().getReferencedColumnNames();
    int referencedColumnCount=referencedColumnNames.length;
    for (int j=0; j < referencedColumnCount; j++) {
      if (columnName.equals(referencedColumnNames[j])) {
        String generatedColumnName=generatedColumn.getColumnName();
        if (!cascade) {
          throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",generatedColumnName);
        }
 else {
          cascadedDroppedColumns.add(generatedColumnName);
        }
      }
    }
  }
  DataDescriptorGenerator ddg=dd.getDataDescriptorGenerator();
  int cascadedDrops=cascadedDroppedColumns.size();
  int sizeAfterCascadedDrops=td.getColumnDescriptorList().size() - cascadedDrops;
  if (sizeAfterCascadedDrops == 1) {
    throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),""String_Node_Str"" + columnName,""String_Node_Str"",td.getQualifiedName());
  }
  for (int i=0; i < cascadedDrops; i++) {
    String generatedColumnName=(String)cascadedDroppedColumns.get(i);
    activation.addWarning(StandardException.newWarning(SQLState.LANG_GEN_COL_DROPPED,generatedColumnName,td.getName()));
    dropColumnFromTable(generatedColumnName);
  }
  td=dd.getTableDescriptor(tableId);
  ColumnDescriptor columnDescriptor=td.getColumnDescriptor(columnName);
  if (columnDescriptor == null) {
    throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE,columnName,td.getQualifiedName());
  }
  int size=td.getColumnDescriptorList().size();
  droppedColumnPosition=columnDescriptor.getPosition();
  FormatableBitSet toDrop=new FormatableBitSet(size + 1);
  toDrop.set(droppedColumnPosition);
  td.setReferencedColumnMap(toDrop);
  dm.invalidateFor(td,(cascade ? DependencyManager.DROP_COLUMN : DependencyManager.DROP_COLUMN_RESTRICT),lcc);
  if (columnDescriptor.getDefaultInfo() != null) {
    dm.clearDependencies(lcc,columnDescriptor.getDefaultDescriptor(dd));
  }
  GenericDescriptorList tdl=dd.getTriggerDescriptors(td);
  for (Iterator descIter=tdl.iterator(); descIter.hasNext(); ) {
    TriggerDescriptor trd=(TriggerDescriptor)descIter.next();
    boolean triggerDroppedAlready=false;
    int[] referencedCols=trd.getReferencedCols();
    if (referencedCols != null) {
      int refColLen=referencedCols.length, j;
      boolean changed=false;
      for (j=0; j < refColLen; j++) {
        if (referencedCols[j] > droppedColumnPosition) {
          changed=true;
        }
 else         if (referencedCols[j] == droppedColumnPosition) {
          if (cascade) {
            trd.drop(lcc);
            triggerDroppedAlready=true;
            activation.addWarning(StandardException.newWarning(SQLState.LANG_TRIGGER_DROPPED,trd.getName(),td.getName()));
          }
 else {
            throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",trd.getName());
          }
          break;
        }
      }
      if (j == refColLen && changed) {
        dd.dropTriggerDescriptor(trd,tc);
        for (j=0; j < refColLen; j++) {
          if (referencedCols[j] > droppedColumnPosition)           referencedCols[j]--;
        }
        trd.setReferencedCols(referencedCols);
        dd.addDescriptor(trd,sd,DataDictionary.SYSTRIGGERS_CATALOG_NUM,false,tc);
      }
    }
    if (triggerDroppedAlready)     continue;
    int[] referencedColsInTriggerAction=trd.getReferencedColsInTriggerAction();
    if (referencedColsInTriggerAction != null) {
      int refColInTriggerActionLen=referencedColsInTriggerAction.length, j;
      boolean changedColPositionInTriggerAction=false;
      for (j=0; j < refColInTriggerActionLen; j++) {
        if (referencedColsInTriggerAction[j] > droppedColumnPosition) {
          changedColPositionInTriggerAction=true;
        }
 else         if (referencedColsInTriggerAction[j] == droppedColumnPosition) {
          if (cascade) {
            trd.drop(lcc);
            triggerDroppedAlready=true;
            activation.addWarning(StandardException.newWarning(SQLState.LANG_TRIGGER_DROPPED,trd.getName(),td.getName()));
          }
 else {
            throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",trd.getName());
          }
          break;
        }
      }
      if (j == refColInTriggerActionLen && changedColPositionInTriggerAction) {
        dd.dropTriggerDescriptor(trd,tc);
        for (j=0; j < refColInTriggerActionLen; j++) {
          if (referencedColsInTriggerAction[j] > droppedColumnPosition)           referencedColsInTriggerAction[j]--;
        }
        trd.setReferencedColsInTriggerAction(referencedColsInTriggerAction);
        dd.addDescriptor(trd,sd,DataDictionary.SYSTRIGGERS_CATALOG_NUM,false,tc);
      }
    }
  }
  ConstraintDescriptorList csdl=dd.getConstraintDescriptors(td);
  int csdl_size=csdl.size();
  ArrayList newCongloms=new ArrayList();
  int tbr_size=0;
  ConstraintDescriptor[] toBeRemoved=new ConstraintDescriptor[csdl_size];
  for (int i=csdl_size - 1; i >= 0; i--) {
    ConstraintDescriptor cd=csdl.elementAt(i);
    int[] referencedColumns=cd.getReferencedColumns();
    int numRefCols=referencedColumns.length, j;
    boolean changed=false;
    for (j=0; j < numRefCols; j++) {
      if (referencedColumns[j] > droppedColumnPosition)       changed=true;
      if (referencedColumns[j] == droppedColumnPosition)       break;
    }
    if (j == numRefCols) {
      if ((cd instanceof CheckConstraintDescriptor) && changed) {
        dd.dropConstraintDescriptor(cd,tc);
        for (j=0; j < numRefCols; j++) {
          if (referencedColumns[j] > droppedColumnPosition)           referencedColumns[j]--;
        }
        ((CheckConstraintDescriptor)cd).setReferencedColumnsDescriptor(new ReferencedColumnsDescriptorImpl(referencedColumns));
        dd.addConstraintDescriptor(cd,tc);
      }
      continue;
    }
    if (!cascade) {
      throw StandardException.newException(SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,dm.getActionString(DependencyManager.DROP_COLUMN),columnName,""String_Node_Str"",cd.getConstraintName());
    }
    if (cd instanceof ReferencedKeyConstraintDescriptor) {
      toBeRemoved[tbr_size++]=cd;
      continue;
    }
    dm.invalidateFor(cd,DependencyManager.DROP_CONSTRAINT,lcc);
    dropConstraint(cd,td,newCongloms,activation,lcc,true);
    activation.addWarning(StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,cd.getConstraintName(),td.getName()));
  }
  for (int i=tbr_size - 1; i >= 0; i--) {
    ConstraintDescriptor cd=toBeRemoved[i];
    dropConstraint(cd,td,newCongloms,activation,lcc,false);
    activation.addWarning(StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,cd.getConstraintName(),td.getName()));
    if (cascade) {
      ConstraintDescriptorList fkcdl=dd.getForeignKeys(cd.getUUID());
      for (int j=0; j < fkcdl.size(); j++) {
        ConstraintDescriptor fkcd=(ConstraintDescriptor)fkcdl.elementAt(j);
        dm.invalidateFor(fkcd,DependencyManager.DROP_CONSTRAINT,lcc);
        dropConstraint(fkcd,td,newCongloms,activation,lcc,true);
        activation.addWarning(StandardException.newWarning(SQLState.LANG_CONSTRAINT_DROPPED,fkcd.getConstraintName(),fkcd.getTableDescriptor().getName()));
      }
    }
    dm.invalidateFor(cd,DependencyManager.DROP_CONSTRAINT,lcc);
    dm.clearDependencies(lcc,cd);
  }
  createNewBackingCongloms(newCongloms,(long[])null);
  td=dd.getTableDescriptor(tableId);
  compressTable();
  ColumnDescriptorList tab_cdl=td.getColumnDescriptorList();
  dd.dropColumnDescriptor(td.getUUID(),columnName,tc);
  ColumnDescriptor[] cdlArray=new ColumnDescriptor[size - columnDescriptor.getPosition()];
  for (int i=columnDescriptor.getPosition(), j=0; i < size; i++, j++) {
    ColumnDescriptor cd=(ColumnDescriptor)tab_cdl.elementAt(i);
    dd.dropColumnDescriptor(td.getUUID(),cd.getColumnName(),tc);
    cd.setPosition(i);
    if (cd.isAutoincrement()) {
      cd.setAutoinc_create_or_modify_Start_Increment(ColumnDefinitionNode.CREATE_AUTOINCREMENT);
    }
    cdlArray[j]=cd;
  }
  dd.addDescriptorArray(cdlArray,td,DataDictionary.SYSCOLUMNS_CATALOG_NUM,false,tc);
  List depsOnAlterTableList=dd.getProvidersDescriptorList(td.getObjectID().toString());
  for (Iterator depsOnAlterTableIterator=depsOnAlterTableList.listIterator(); depsOnAlterTableIterator.hasNext(); ) {
    DependencyDescriptor depOnAlterTableDesc=(DependencyDescriptor)depsOnAlterTableIterator.next();
    DependableFinder dependent=depOnAlterTableDesc.getDependentFinder();
    if (dependent.getSQLObjectType().equals(Dependable.STORED_PREPARED_STATEMENT)) {
      List depsTrigger=dd.getProvidersDescriptorList(depOnAlterTableDesc.getUUID().toString());
      for (Iterator depsTriggerIterator=depsTrigger.listIterator(); depsTriggerIterator.hasNext(); ) {
        DependencyDescriptor depsTriggerDesc=(DependencyDescriptor)depsTriggerIterator.next();
        DependableFinder providerIsTrigger=depsTriggerDesc.getDependentFinder();
        if (providerIsTrigger.getSQLObjectType().equals(Dependable.TRIGGER)) {
          TriggerDescriptor trdToBeDropped=dd.getTriggerDescriptor(depsTriggerDesc.getUUID());
          columnDroppedAndTriggerDependencies(trdToBeDropped,cascade,columnName);
        }
      }
    }
  }
  dd.updateSYSCOLPERMSforDropColumn(td.getUUID(),tc,columnDescriptor);
  tab_cdl.remove(td.getColumnDescriptor(columnName));
}"
79993,"/** 
 */
public RealDeleteCascadeResultSetStatistics(int rowCount,boolean deferred,int indexesUpdated,boolean tableLock,long executeTime,ResultSetStatistics sourceResultSetStatistics,ResultSetStatistics[] dependentTrackingArray){
  super(rowCount,deferred,indexesUpdated,tableLock,executeTime,sourceResultSetStatistics);
  this.dependentTrackingArray=dependentTrackingArray;
}","/** 
 */
public RealDeleteCascadeResultSetStatistics(int rowCount,boolean deferred,int indexesUpdated,boolean tableLock,long executeTime,ResultSetStatistics sourceResultSetStatistics,ResultSetStatistics[] dependentTrackingArray){
  super(rowCount,deferred,indexesUpdated,tableLock,executeTime,sourceResultSetStatistics);
  this.dependentTrackingArray=(ResultSetStatistics[])ArrayUtil.copy(dependentTrackingArray);
}"
79994,"/** 
 */
public RealHashScanStatistics(int numOpens,int rowsSeen,int rowsFiltered,long constructorTime,long openTime,long nextTime,long closeTime,int resultSetNumber,String tableName,String indexName,boolean isConstraint,int hashtableSize,int[] hashKeyColumns,String scanQualifiers,String nextQualifiers,Properties scanProperties,String startPosition,String stopPosition,String isolationLevel,String lockString,double optimizerEstimatedRowCount,double optimizerEstimatedCost){
  super(numOpens,rowsSeen,rowsFiltered,constructorTime,openTime,nextTime,closeTime,resultSetNumber,optimizerEstimatedRowCount,optimizerEstimatedCost);
  this.tableName=tableName;
  this.indexName=indexName;
  this.isConstraint=isConstraint;
  this.hashtableSize=hashtableSize;
  this.hashKeyColumns=hashKeyColumns;
  this.scanQualifiers=scanQualifiers;
  this.nextQualifiers=nextQualifiers;
  this.scanProperties=new FormatableProperties();
  if (scanProperties != null) {
    for (Enumeration e=scanProperties.keys(); e.hasMoreElements(); ) {
      String key=(String)e.nextElement();
      this.scanProperties.put(key,scanProperties.get(key));
    }
  }
  this.startPosition=startPosition;
  this.stopPosition=stopPosition;
  this.isolationLevel=isolationLevel;
  this.lockString=lockString;
}","/** 
 */
public RealHashScanStatistics(int numOpens,int rowsSeen,int rowsFiltered,long constructorTime,long openTime,long nextTime,long closeTime,int resultSetNumber,String tableName,String indexName,boolean isConstraint,int hashtableSize,int[] hashKeyColumns,String scanQualifiers,String nextQualifiers,Properties scanProperties,String startPosition,String stopPosition,String isolationLevel,String lockString,double optimizerEstimatedRowCount,double optimizerEstimatedCost){
  super(numOpens,rowsSeen,rowsFiltered,constructorTime,openTime,nextTime,closeTime,resultSetNumber,optimizerEstimatedRowCount,optimizerEstimatedCost);
  this.tableName=tableName;
  this.indexName=indexName;
  this.isConstraint=isConstraint;
  this.hashtableSize=hashtableSize;
  this.hashKeyColumns=ArrayUtil.copy(hashKeyColumns);
  this.scanQualifiers=scanQualifiers;
  this.nextQualifiers=nextQualifiers;
  this.scanProperties=new FormatableProperties();
  if (scanProperties != null) {
    for (Enumeration e=scanProperties.keys(); e.hasMoreElements(); ) {
      String key=(String)e.nextElement();
      this.scanProperties.put(key,scanProperties.get(key));
    }
  }
  this.startPosition=startPosition;
  this.stopPosition=stopPosition;
  this.isolationLevel=isolationLevel;
  this.lockString=lockString;
}"
79995,"/** 
 */
public RealHashTableStatistics(int numOpens,int rowsSeen,int rowsFiltered,long constructorTime,long openTime,long nextTime,long closeTime,int resultSetNumber,int hashtableSize,int[] hashKeyColumns,String nextQualifiers,Properties scanProperties,double optimizerEstimatedRowCount,double optimizerEstimatedCost,ResultSetStatistics[] subqueryTrackingArray,ResultSetStatistics childResultSetStatistics){
  super(numOpens,rowsSeen,rowsFiltered,constructorTime,openTime,nextTime,closeTime,resultSetNumber,optimizerEstimatedRowCount,optimizerEstimatedCost);
  this.hashtableSize=hashtableSize;
  this.hashKeyColumns=hashKeyColumns;
  this.nextQualifiers=nextQualifiers;
  this.scanProperties=new FormatableProperties();
  if (scanProperties != null) {
    for (Enumeration e=scanProperties.keys(); e.hasMoreElements(); ) {
      String key=(String)e.nextElement();
      this.scanProperties.put(key,scanProperties.get(key));
    }
  }
  this.subqueryTrackingArray=subqueryTrackingArray;
  this.childResultSetStatistics=childResultSetStatistics;
}","/** 
 */
public RealHashTableStatistics(int numOpens,int rowsSeen,int rowsFiltered,long constructorTime,long openTime,long nextTime,long closeTime,int resultSetNumber,int hashtableSize,int[] hashKeyColumns,String nextQualifiers,Properties scanProperties,double optimizerEstimatedRowCount,double optimizerEstimatedCost,ResultSetStatistics[] subqueryTrackingArray,ResultSetStatistics childResultSetStatistics){
  super(numOpens,rowsSeen,rowsFiltered,constructorTime,openTime,nextTime,closeTime,resultSetNumber,optimizerEstimatedRowCount,optimizerEstimatedCost);
  this.hashtableSize=hashtableSize;
  this.hashKeyColumns=ArrayUtil.copy(hashKeyColumns);
  this.nextQualifiers=nextQualifiers;
  this.scanProperties=new FormatableProperties();
  if (scanProperties != null) {
    for (Enumeration e=scanProperties.keys(); e.hasMoreElements(); ) {
      String key=(String)e.nextElement();
      this.scanProperties.put(key,scanProperties.get(key));
    }
  }
  this.subqueryTrackingArray=(ResultSetStatistics[])ArrayUtil.copy(subqueryTrackingArray);
  this.childResultSetStatistics=childResultSetStatistics;
}"
79996,"/** 
 */
public RealProjectRestrictStatistics(int numOpens,int rowsSeen,int rowsFiltered,long constructorTime,long openTime,long nextTime,long closeTime,int resultSetNumber,long restrictionTime,long projectionTime,ResultSetStatistics[] subqueryTrackingArray,boolean restriction,boolean doesProjection,double optimizerEstimatedRowCount,double optimizerEstimatedCost,ResultSetStatistics childResultSetStatistics){
  super(numOpens,rowsSeen,rowsFiltered,constructorTime,openTime,nextTime,closeTime,resultSetNumber,optimizerEstimatedRowCount,optimizerEstimatedCost);
  this.restriction=restriction;
  this.doesProjection=doesProjection;
  this.restrictionTime=restrictionTime;
  this.projectionTime=projectionTime;
  this.subqueryTrackingArray=subqueryTrackingArray;
  this.childResultSetStatistics=childResultSetStatistics;
}","/** 
 */
public RealProjectRestrictStatistics(int numOpens,int rowsSeen,int rowsFiltered,long constructorTime,long openTime,long nextTime,long closeTime,int resultSetNumber,long restrictionTime,long projectionTime,ResultSetStatistics[] subqueryTrackingArray,boolean restriction,boolean doesProjection,double optimizerEstimatedRowCount,double optimizerEstimatedCost,ResultSetStatistics childResultSetStatistics){
  super(numOpens,rowsSeen,rowsFiltered,constructorTime,openTime,nextTime,closeTime,resultSetNumber,optimizerEstimatedRowCount,optimizerEstimatedCost);
  this.restriction=restriction;
  this.doesProjection=doesProjection;
  this.restrictionTime=restrictionTime;
  this.projectionTime=projectionTime;
  this.subqueryTrackingArray=(ResultSetStatistics[])ArrayUtil.copy(subqueryTrackingArray);
  this.childResultSetStatistics=childResultSetStatistics;
}"
79997,"/** 
 * Get the timestamp for the end of query execution. 
 * @return java.sql.Timestamp	The timestamp for the end of query execution.
 */
public Timestamp getEndExecutionTimestamp(){
  return endExecutionTimestamp;
}","/** 
 * Get the timestamp for the end of query execution. 
 * @return java.sql.Timestamp	The timestamp for the end of query execution.
 */
public Timestamp getEndExecutionTimestamp(){
  return endExecutionTimestamp == null ? null : (Timestamp)endExecutionTimestamp.clone();
}"
79998,"/** 
 * Get the timestamp for the beginning of query compilation. 
 * @return java.sql.Timestamp	The timestamp for the beginning of query compilation.
 */
public Timestamp getBeginCompilationTimestamp(){
  return beginCompilationTimestamp;
}","/** 
 * Get the timestamp for the beginning of query compilation. 
 * @return java.sql.Timestamp	The timestamp for the beginning of query compilation.
 */
public Timestamp getBeginCompilationTimestamp(){
  return beginCompilationTimestamp == null ? null : (Timestamp)beginCompilationTimestamp.clone();
}"
79999,"/** 
 */
public RunTimeStatisticsImpl(String spsName,String statementName,String statementText,long compileTime,long parseTime,long bindTime,long optimizeTime,long generateTime,long executeTime,Timestamp beginCompilationTimestamp,Timestamp endCompilationTimestamp,Timestamp beginExecutionTimestamp,Timestamp endExecutionTimestamp,ResultSetStatistics[] subqueryTrackingArray,ResultSetStatistics topResultSetStatistics){
  this.spsName=spsName;
  this.statementName=statementName;
  this.statementText=statementText;
  this.compileTime=compileTime;
  this.parseTime=parseTime;
  this.bindTime=bindTime;
  this.optimizeTime=optimizeTime;
  this.generateTime=generateTime;
  this.executeTime=executeTime;
  this.beginCompilationTimestamp=beginCompilationTimestamp;
  this.endCompilationTimestamp=endCompilationTimestamp;
  this.beginExecutionTimestamp=beginExecutionTimestamp;
  this.endExecutionTimestamp=endExecutionTimestamp;
  this.subqueryTrackingArray=subqueryTrackingArray;
  this.topResultSetStatistics=topResultSetStatistics;
}","/** 
 */
public RunTimeStatisticsImpl(String spsName,String statementName,String statementText,long compileTime,long parseTime,long bindTime,long optimizeTime,long generateTime,long executeTime,Timestamp beginCompilationTimestamp,Timestamp endCompilationTimestamp,Timestamp beginExecutionTimestamp,Timestamp endExecutionTimestamp,ResultSetStatistics[] subqueryTrackingArray,ResultSetStatistics topResultSetStatistics){
  this.spsName=spsName;
  this.statementName=statementName;
  this.statementText=statementText;
  this.compileTime=compileTime;
  this.parseTime=parseTime;
  this.bindTime=bindTime;
  this.optimizeTime=optimizeTime;
  this.generateTime=generateTime;
  this.executeTime=executeTime;
  this.beginCompilationTimestamp=beginCompilationTimestamp == null ? null : (Timestamp)beginCompilationTimestamp.clone();
  this.endCompilationTimestamp=endCompilationTimestamp == null ? null : (Timestamp)endCompilationTimestamp.clone();
  this.beginExecutionTimestamp=beginExecutionTimestamp == null ? null : (Timestamp)beginExecutionTimestamp.clone();
  this.endExecutionTimestamp=endExecutionTimestamp == null ? null : (Timestamp)endExecutionTimestamp.clone();
  this.subqueryTrackingArray=(ResultSetStatistics[])ArrayUtil.copy(subqueryTrackingArray);
  this.topResultSetStatistics=topResultSetStatistics;
}"
80000,"/** 
 * Get the timestamp for the end of query compilation. 
 * @return java.sql.Timestamp	The timestamp for the end of query compilation.
 */
public Timestamp getEndCompilationTimestamp(){
  return endCompilationTimestamp;
}","/** 
 * Get the timestamp for the end of query compilation. 
 * @return java.sql.Timestamp	The timestamp for the end of query compilation.
 */
public Timestamp getEndCompilationTimestamp(){
  return endCompilationTimestamp == null ? null : (Timestamp)endCompilationTimestamp.clone();
}"
