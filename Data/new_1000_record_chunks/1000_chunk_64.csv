record_number,buggy_code,fixed_code
63001,"public WordListAdapter(Context context,List<Words> words){
  this.context=context;
  this.words=words;
  kanaSpeech=new TextToSpeech(AppMain.getContext(),new TextToSpeech.OnInitListener(){
    @Override public void onInit(    int status){
      if (status != TextToSpeech.ERROR) {
        kanaSpeech.setLanguage(Locale.JAPAN);
      }
    }
  }
);
}","public WordListAdapter(Context context,List<Words> words){
  this.context=context;
  this.words=words;
}"
63002,"public Words select(String id){
  SQLiteDatabase db=DatabaseManager.getInstance().openDatabase();
  if (db == null) {
    return null;
  }
  Cursor cursor=db.query(Words.TABLE_WORDS,new String[]{Words.WORDS_ID,Words.WORDS_CHARACTER,Words.WORDS_MEANING,Words.WORDS_MEANING_MN,Words.WORDS_KANJI,Words.WORDS_PART_OF_SPEECH,Words.WORDS_LEVEL,Words.WORDS_IS_MEMORIZE,Words.WORDS_IS_FAVORITE,Words.WORDS_CREATED},Words.WORDS_ID + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null,null);
  if (!cursor.moveToFirst()) {
    return null;
  }
  Words word=new Words();
  word.setId(cursor.getString(Words.WORDS_ID_INDEX));
  word.setCharacter(cursor.getString(Words.WORDS_CHARACTER_INDEX));
  word.setMeaning(cursor.getString(Words.WORDS_MEANING_INDEX));
  word.setMeaningMon(cursor.getString(Words.WORDS_MEANING_MN_INDEX));
  word.setKanji(cursor.getString(Words.WORDS_KANJI_INDEX));
  word.setPartOfSpeech(cursor.getString(Words.WORDS_PART_OF_SPEECH_INDEX));
  word.setLevel(cursor.getString(Words.WORDS_LEVEL_INDEX));
  word.setIsMemorize(cursor.getString(Words.WORDS_IS_MEMORIZE_INDEX));
  cursor.close();
  DatabaseManager.getInstance().closeDatabase();
  return word;
}","public Words select(String id){
  SQLiteDatabase db=DatabaseManager.getInstance().openDatabase();
  if (db == null) {
    return null;
  }
  Cursor cursor=db.query(Words.TABLE_WORDS,new String[]{Words.WORDS_ID,Words.WORDS_CHARACTER,Words.WORDS_MEANING,Words.WORDS_MEANING_MN,Words.WORDS_KANJI,Words.WORDS_PART_OF_SPEECH,Words.WORDS_LEVEL,Words.WORDS_IS_MEMORIZE,Words.WORDS_IS_FAVORITE,Words.WORDS_CREATED},Words.WORDS_ID + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null,null);
  if (!cursor.moveToFirst()) {
    return null;
  }
  Words word=new Words();
  word.setId(cursor.getString(Words.WORDS_ID_INDEX));
  word.setCharacter(cursor.getString(Words.WORDS_CHARACTER_INDEX));
  word.setMeaning(cursor.getString(Words.WORDS_MEANING_INDEX));
  word.setMeaningMon(cursor.getString(Words.WORDS_MEANING_MN_INDEX));
  word.setKanji(cursor.getString(Words.WORDS_KANJI_INDEX));
  word.setPartOfSpeech(cursor.getString(Words.WORDS_PART_OF_SPEECH_INDEX));
  word.setLevel(cursor.getString(Words.WORDS_LEVEL_INDEX));
  word.setIsMemorize(cursor.getString(Words.WORDS_IS_MEMORIZE_INDEX));
  word.setIsFavorite(cursor.getString(Words.WORDS_IS_FAVORITE_INDEX));
  word.setCreated(cursor.getString(Words.WORDS_CREATED_INDEX));
  cursor.close();
  DatabaseManager.getInstance().closeDatabase();
  return word;
}"
63003,"@Override public List<KBHandle> listRootConcepts(KnowledgeBase kb,boolean aAll) throws QueryEvaluationException {
  List<KBHandle> resultList=new ArrayList<>();
  if (!kb.getExplicitlyDefinedRootConcepts().isEmpty()) {
    for (    IRI conceptIRI : kb.getExplicitlyDefinedRootConcepts()) {
      KBConcept concept=readConcept(kb,conceptIRI.stringValue()).get();
      KBHandle conceptHandle=new KBHandle(concept.getIdentifier(),concept.getName(),concept.getDescription());
      resultList.add(conceptHandle);
    }
  }
 else {
    resultList=read(kb,(conn) -> {
      String QUERY=String.join(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
      tupleQuery.setBinding(""String_Node_Str"",kb.getTypeIri());
      tupleQuery.setBinding(""String_Node_Str"",kb.getClassIri());
      tupleQuery.setBinding(""String_Node_Str"",kb.getSubclassIri());
      tupleQuery.setBinding(""String_Node_Str"",kb.getLabelIri());
      tupleQuery.setIncludeInferred(false);
      return evaluateListQuery(tupleQuery,aAll);
    }
);
  }
  resultList.sort(Comparator.comparing(KBObject::getUiLabel));
  return resultList;
}","@Override public List<KBHandle> listRootConcepts(KnowledgeBase kb,boolean aAll) throws QueryEvaluationException {
  List<KBHandle> resultList=new ArrayList<>();
  if (!kb.getExplicitlyDefinedRootConcepts().isEmpty()) {
    for (    IRI conceptIRI : kb.getExplicitlyDefinedRootConcepts()) {
      KBConcept concept=readConcept(kb,conceptIRI.stringValue()).get();
      KBHandle conceptHandle=new KBHandle(concept.getIdentifier(),concept.getName(),concept.getDescription());
      resultList.add(conceptHandle);
    }
  }
 else {
    resultList=read(kb,(conn) -> {
      String QUERY=String.join(""String_Node_Str"",SPARQLQueryStore.SPARQL_PREFIX,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
      tupleQuery.setBinding(""String_Node_Str"",kb.getTypeIri());
      tupleQuery.setBinding(""String_Node_Str"",kb.getClassIri());
      tupleQuery.setBinding(""String_Node_Str"",kb.getSubclassIri());
      tupleQuery.setBinding(""String_Node_Str"",kb.getLabelIri());
      tupleQuery.setIncludeInferred(false);
      return evaluateListQuery(tupleQuery,aAll);
    }
);
  }
  resultList.sort(Comparator.comparing(KBObject::getUiLabel));
  return resultList;
}"
63004,"@Override public List<KBHandle> listChildConcepts(KnowledgeBase aKB,String aParentIdentifier,boolean aAll,int aLimit) throws QueryEvaluationException {
  List<KBHandle> resultList=read(aKB,(conn) -> {
    String QUERY=String.join(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + aLimit);
    ValueFactory vf=SimpleValueFactory.getInstance();
    TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
    tupleQuery.setBinding(""String_Node_Str"",vf.createIRI(aParentIdentifier));
    tupleQuery.setBinding(""String_Node_Str"",aKB.getTypeIri());
    tupleQuery.setBinding(""String_Node_Str"",aKB.getClassIri());
    tupleQuery.setBinding(""String_Node_Str"",aKB.getSubclassIri());
    tupleQuery.setBinding(""String_Node_Str"",aKB.getLabelIri());
    tupleQuery.setIncludeInferred(false);
    return evaluateListQuery(tupleQuery,aAll);
  }
);
  if (resultList.size() > 1) {
    resultList.sort(Comparator.comparing(KBObject::getUiLabel));
  }
  return resultList;
}","@Override public List<KBHandle> listChildConcepts(KnowledgeBase aKB,String aParentIdentifier,boolean aAll,int aLimit) throws QueryEvaluationException {
  List<KBHandle> resultList=read(aKB,(conn) -> {
    String QUERY=String.join(""String_Node_Str"",SPARQLQueryStore.SPARQL_PREFIX,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + aLimit);
    ValueFactory vf=SimpleValueFactory.getInstance();
    TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
    tupleQuery.setBinding(""String_Node_Str"",vf.createIRI(aParentIdentifier));
    tupleQuery.setBinding(""String_Node_Str"",aKB.getTypeIri());
    tupleQuery.setBinding(""String_Node_Str"",aKB.getClassIri());
    tupleQuery.setBinding(""String_Node_Str"",aKB.getSubclassIri());
    tupleQuery.setBinding(""String_Node_Str"",aKB.getLabelIri());
    tupleQuery.setIncludeInferred(false);
    return evaluateListQuery(tupleQuery,aAll);
  }
);
  if (resultList.size() > 1) {
    resultList.sort(Comparator.comparing(KBObject::getUiLabel));
  }
  return resultList;
}"
63005,"public MtasDocumentIndex(Project aProject,AnnotationSchemaService aAnnotationSchemaService,DocumentService aDocumentService,ProjectService aProjectService,String aDir) throws IOException {
  annotationSchemaService=aAnnotationSchemaService;
  documentService=aDocumentService;
  projectService=aProjectService;
  project=aProject;
  List<AnnotationLayer> layers=annotationSchemaService.listAnnotationLayer(project);
  annotationShortNames=new ArrayList<String>();
  for (  AnnotationLayer layer : layers) {
    if (layer.isEnabled()) {
      annotationShortNames.add(getShortName(layer.getName()));
    }
  }
  resourceDir=new File(aDir);
  log.info(""String_Node_Str"");
}","public MtasDocumentIndex(Project aProject,AnnotationSchemaService aAnnotationSchemaService,DocumentService aDocumentService,ProjectService aProjectService,String aDir) throws IOException {
  annotationSchemaService=aAnnotationSchemaService;
  documentService=aDocumentService;
  projectService=aProjectService;
  project=aProject;
  List<AnnotationLayer> layers=annotationSchemaService.listAnnotationLayer(project);
  annotationShortNames=new ArrayList<String>();
  for (  AnnotationLayer layer : layers) {
    if (layer.isEnabled()) {
      annotationShortNames.add(getShortName(layer.getName()));
    }
  }
  resourceDir=new File(aDir);
  createPhysicalIndex();
  log.info(""String_Node_Str"");
}"
63006,"@OnEvent public void actionInstanceSelection(AjaxInstanceSelectionEvent event){
  selectedInstanceHandle.setObject(event.getSelection());
  Component replacementPanel;
  Component replacementSearch;
  if (selectedInstanceHandle.getObject() != null) {
    String identifier=selectedInstanceHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readInstance(kbModel.getObject(),identifier).<Component>map(instance -> {
        Model<KBInstance> model=Model.of(instance);
        return new InstanceInfoPanel(INSTANCE_INFO_MARKUP_ID,kbModel,selectedInstanceHandle,model);
      }
).orElse(emptyPanel());
      replacementSearch=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
    }
 catch (    QueryEvaluationException e) {
      replacementPanel=emptyPanel();
      replacementSearch=emptyPanel();
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      event.getTarget().addChildren(getPage(),IFeedback.class);
    }
  }
 else {
    replacementPanel=emptyPanel();
    replacementSearch=emptyPanel();
  }
  annotatedSearchPanel=annotatedSearchPanel.replaceWith(replacementSearch);
  instanceInfoPanel=instanceInfoPanel.replaceWith(replacementPanel);
  event.getTarget().add(this);
}","@OnEvent public void actionInstanceSelection(AjaxInstanceSelectionEvent event){
  selectedInstanceHandle.setObject(event.getSelection());
  Component replacementPanel;
  Component replacementSearch;
  if (selectedInstanceHandle.getObject() != null) {
    String identifier=selectedInstanceHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readInstance(kbModel.getObject(),identifier).<Component>map(instance -> {
        Model<KBInstance> model=Model.of(instance);
        return new InstanceInfoPanel(INSTANCE_INFO_MARKUP_ID,kbModel,selectedInstanceHandle,model);
      }
).orElse(emptyPanel());
      replacementSearch=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
    }
 catch (    QueryEvaluationException e) {
      replacementPanel=emptyPanel();
      replacementSearch=emptyPanel();
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      event.getTarget().addChildren(getPage(),IFeedback.class);
    }
  }
 else {
    replacementPanel=emptyPanel();
    replacementSearch=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
  }
  annotatedSearchPanel=annotatedSearchPanel.replaceWith(replacementSearch);
  instanceInfoPanel=instanceInfoPanel.replaceWith(replacementPanel);
  event.getTarget().add(this);
}"
63007,"public AnnotatedListIdentifiers(String aId,IModel<KnowledgeBase> aKbModel,IModel<KBHandle> aConcept,IModel<KBHandle> aInstance){
  super(aId,aConcept);
  setOutputMarkupId(true);
  kbModel=aKbModel;
  conceptModel=aConcept;
  currentUser=userRepository.getCurrentUser();
  String queryHead=""String_Node_Str"";
  String queryEnd=""String_Node_Str"";
  StringBuffer query=new StringBuffer();
  if (aInstance.getObject() == null) {
    String concept=aConcept.getObject().getUiLabel();
    targetQuery=Model.of(query.append(queryHead).append(concept).append(queryEnd).toString());
  }
 else {
    String instance=aInstance.getObject().getUiLabel();
    targetQuery=Model.of(query.append(queryHead).append(instance).append(queryEnd).toString());
  }
  LambdaModel<List<SearchResult>> searchResults=LambdaModel.of(this::getSearchResults);
  LOG.debug(""String_Node_Str"",searchResults.getObject().size());
  OverviewListChoice<String> overviewList=new OverviewListChoice<String>(""String_Node_Str""){
    private static final long serialVersionUID=-122960232588575731L;
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(!searchResults.getObject().isEmpty());
    }
  }
;
  overviewList.setChoices(getSearchResultsFormatted(searchResults));
  add(overviewList);
  add(new Label(""String_Node_Str"",LambdaModel.of(() -> overviewList.getChoices().size())));
}","public AnnotatedListIdentifiers(String aId,IModel<KnowledgeBase> aKbModel,IModel<KBHandle> aConcept,IModel<KBHandle> aInstance){
  super(aId,aConcept);
  setOutputMarkupId(true);
  kbModel=aKbModel;
  conceptModel=aConcept;
  currentUser=userRepository.getCurrentUser();
  String queryHead=""String_Node_Str"";
  String queryEnd=""String_Node_Str"";
  StringBuffer query=new StringBuffer();
  if (aInstance.getObject() == null) {
    String concept=aConcept.getObject().getUiLabel();
    targetQuery=Model.of(query.append(queryHead).append(concept).append(queryEnd).toString());
  }
 else {
    String instance=aInstance.getObject().getUiLabel();
    targetQuery=Model.of(query.append(queryHead).append(instance).append(queryEnd).toString());
  }
  LambdaModel<List<SearchResult>> searchResults=LambdaModel.of(this::getSearchResults);
  LOG.trace(""String_Node_Str"",searchResults.getObject().size());
  OverviewListChoice<String> overviewList=new OverviewListChoice<String>(""String_Node_Str""){
    private static final long serialVersionUID=-122960232588575731L;
    @Override protected void onConfigure(){
      super.onConfigure();
      setVisible(!searchResults.getObject().isEmpty());
    }
  }
;
  overviewList.setChoices(getSearchResultsFormatted(searchResults));
  add(overviewList);
  add(new Label(""String_Node_Str"",LambdaModel.of(() -> overviewList.getChoices().size())));
}"
63008,"@OnEvent public void actionInstanceSelection(AjaxInstanceSelectionEvent event){
  selectedInstanceHandle.setObject(event.getSelection());
  Component replacementPanel;
  Component replacementSearch;
  if (selectedInstanceHandle.getObject() != null) {
    String identifier=selectedInstanceHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readInstance(kbModel.getObject(),identifier).<Component>map(instance -> {
        Model<KBInstance> model=Model.of(instance);
        return new InstanceInfoPanel(INSTANCE_INFO_MARKUP_ID,kbModel,selectedInstanceHandle,model);
      }
).orElse(emptyPanel());
      replacementSearch=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
    }
 catch (    QueryEvaluationException e) {
      replacementPanel=emptyPanel();
      replacementSearch=emptyPanel();
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      event.getTarget().addChildren(getPage(),IFeedback.class);
    }
  }
 else {
    replacementPanel=emptyPanel();
    replacementSearch=emptyPanel();
  }
  annotatedSearchPanel=annotatedSearchPanel.replaceWith(replacementSearch);
  instanceInfoPanel=instanceInfoPanel.replaceWith(replacementPanel);
  event.getTarget().add(this);
}","@OnEvent public void actionInstanceSelection(AjaxInstanceSelectionEvent event){
  selectedInstanceHandle.setObject(event.getSelection());
  Component replacementPanel;
  Component replacementSearch;
  if (selectedInstanceHandle.getObject() != null) {
    String identifier=selectedInstanceHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readInstance(kbModel.getObject(),identifier).<Component>map(instance -> {
        Model<KBInstance> model=Model.of(instance);
        return new InstanceInfoPanel(INSTANCE_INFO_MARKUP_ID,kbModel,selectedInstanceHandle,model);
      }
).orElse(emptyPanel());
      replacementSearch=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
    }
 catch (    QueryEvaluationException e) {
      replacementPanel=emptyPanel();
      replacementSearch=emptyPanel();
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      event.getTarget().addChildren(getPage(),IFeedback.class);
    }
  }
 else {
    replacementPanel=emptyPanel();
    replacementSearch=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
  }
  annotatedSearchPanel=annotatedSearchPanel.replaceWith(replacementSearch);
  instanceInfoPanel=instanceInfoPanel.replaceWith(replacementPanel);
  event.getTarget().add(this);
}"
63009,"/** 
 * Inserts a new statement. If the statement has an original statement, that one is deleted before inserting the new one. If the statement is an inferred statement, then no deletion attempt will be made, but the statement will be added as a new explicit statement. Does nothing if the knowledge base is read only.
 */
void upsertStatement(KnowledgeBase kb,KBStatement aStatement) throws RepositoryException ;","/** 
 * Inserts a new statement. If the statement has an original statement, that one is deleted before inserting the new one. If the statement is an inferred statement, then no deletion attempt will be made, but the statement will be added as a new explicit statement. Does nothing if the knowledge base is read only.
 * @param kb The knowledge base the statement will be use in
 * @param aStatement The statement itself
 */
void upsertStatement(KnowledgeBase kb,KBStatement aStatement) throws RepositoryException ;"
63010,"/** 
 * Writes the contents of a knowledge base of type   {@link RepositoryType#LOCAL} to a given{@link OutputStream} in a specificable format.<br>No action will be taken if the given knowledge base is not of type {@link RepositoryType#LOCAL} (nothing will be written to the output stream).
 * @param kb
 * @param format
 * @param os
 */
void exportData(KnowledgeBase kb,RDFFormat format,OutputStream os);","/** 
 * Writes the contents of a knowledge base of type   {@link RepositoryType#LOCAL} to a given{@link OutputStream} in a specificable format.<br>No action will be taken if the given knowledge base is not of type {@link RepositoryType#LOCAL} (nothing will be written to the output stream).
 * @param kb The knowledge base to export
 * @param format Format of the data
 * @param os The {@link OutputStream} variable
 */
void exportData(KnowledgeBase kb,RDFFormat format,OutputStream os);"
63011,"/** 
 * Creates a new instance in the given knowledge base. Does nothing if the knowledge base is read only.
 * @param kb The knowledge base to which the new instance will be added
 * @param aInstance The instance to add
 */
KBHandle createInstance(KnowledgeBase kb,KBInstance aInstance);","/** 
 * Creates a new instance in the given knowledge base. Does nothing if the knowledge base is read only.
 * @param kb The knowledge base to which the new instance will be added
 * @param aInstance The instance to add
 * @return the instance {@link KBHandle}
 */
KBHandle createInstance(KnowledgeBase kb,KBInstance aInstance);"
63012,"List<KBHandle> listProperties(KnowledgeBase kb,boolean aIncludeInferred,boolean aAll);","List<KBHandle> listProperties(KnowledgeBase kb,IRI aType,boolean aIncludeInferred,boolean aAll);"
63013,"/** 
 * Creates a new property in the given knowledge base. Does nothing if the knowledge base is read only.
 * @param kb The knowledge base to which the new property will be added
 * @param aProperty The property to add
 */
KBHandle createProperty(KnowledgeBase kb,KBProperty aProperty);","/** 
 * Creates a new property in the given knowledge base. Does nothing if the knowledge base is read only.
 * @param kb The knowledge base to which the new property will be added
 * @param aProperty The property to add
 * @return the KBHandle for the created concept 
 */
KBHandle createProperty(KnowledgeBase kb,KBProperty aProperty);"
63014,"/** 
 * Delete the given instance. Also deletes all statements about that instance (i.e. where the instance is the subject), but not statements pointing to the instance (i.e. where the instance is the object). Does nothing if the knowledge base is read only.
 */
void deleteInstance(KnowledgeBase kb,KBInstance aInstance);","/** 
 * Delete the given instance. Also deletes all statements about that instance (i.e. where the instance is the subject), but not statements pointing to the instance (i.e. where the instance is the object). Does nothing if the knowledge base is read only.
 * @param kb The knowledge base to which the instance will be deleted
 * @param aInstance The instance to delete
 */
void deleteInstance(KnowledgeBase kb,KBInstance aInstance);"
63015,"/** 
 * Creates a new concept in the given knowledge base. Does nothing  if the knowledge base is read only.
 * @param kb The knowledge base to which the new concept will be added
 * @param aType The concept to add
 */
KBHandle createConcept(KnowledgeBase kb,KBConcept aType);","/** 
 * Creates a new concept in the given knowledge base. Does nothing  if the knowledge base is read only.
 * @param kb The knowledge base to which the new concept will be added
 * @param aType The concept to add
 * @return the KBHandle for the created concept 
 */
KBHandle createConcept(KnowledgeBase kb,KBConcept aType);"
63016,"/** 
 * {@code False} if a knowledge base does not contain any statements.
 * @param kb a {@link KnowledgeBase}
 */
boolean isEmpty(KnowledgeBase kb);","/** 
 * {@code False} if a knowledge base does not contain any statements.
 * @param kb a {@link KnowledgeBase}
 * @return a {@link Boolean} value
 */
boolean isEmpty(KnowledgeBase kb);"
63017,"/** 
 * Update the configuration of a knowledge base. The given knowledge base must have been added before.
 */
void updateKnowledgeBase(KnowledgeBase kb,RepositoryImplConfig cfg) throws RepositoryException, RepositoryConfigException ;","/** 
 * Update the configuration of a knowledge base. The given knowledge base must have been added before.
 * @param kb the {@link KnowledgeBase} to update
 * @param cfg the {@link RepositoryImplConfig} variable
 */
void updateKnowledgeBase(KnowledgeBase kb,RepositoryImplConfig cfg) throws RepositoryException, RepositoryConfigException ;"
63018,"@Override public List<KBHandle> listProperties(KnowledgeBase kb,boolean aIncludeInferred,boolean aAll) throws QueryEvaluationException {
  List<KBHandle> resultList=read(kb,(conn) -> {
    String QUERY=getPropertyListQuery(kb);
    TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
    tupleQuery.setBinding(""String_Node_Str"",kb.getTypeIri());
    tupleQuery.setBinding(""String_Node_Str"",kb.getPropertyTypeIri());
    tupleQuery.setBinding(""String_Node_Str"",kb.getLabelIri());
    tupleQuery.setIncludeInferred(aIncludeInferred);
    return evaluateListQuery(tupleQuery,aAll);
  }
);
  resultList.sort(Comparator.comparing(KBObject::getUiLabel));
  return resultList;
}","@Override public List<KBHandle> listProperties(KnowledgeBase kb,IRI aType,boolean aIncludeInferred,boolean aAll) throws QueryEvaluationException {
  List<KBHandle> resultList=read(kb,(conn) -> {
    String QUERY=getPropertyListQuery(kb);
    TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
    tupleQuery.setBinding(""String_Node_Str"",kb.getTypeIri());
    tupleQuery.setBinding(""String_Node_Str"",aType);
    tupleQuery.setBinding(""String_Node_Str"",kb.getLabelIri());
    tupleQuery.setIncludeInferred(aIncludeInferred);
    return evaluateListQuery(tupleQuery,aAll);
  }
);
  resultList.sort(Comparator.comparing(KBObject::getUiLabel));
  return resultList;
}"
63019,"@Override public void deleteConcept(KnowledgeBase kb,KBConcept aConcept){
  delete(kb,aConcept.getIdentifier());
}","@Override public void deleteConcept(KnowledgeBase kb,KBConcept aConcept){
  getReificationStrategy(kb).deleteConcept(kb,aConcept);
}"
63020,"@Override public void deleteProperty(KnowledgeBase kb,KBProperty aType){
  delete(kb,aType.getIdentifier());
}","@Override public void deleteProperty(KnowledgeBase kb,KBProperty aType){
  getReificationStrategy(kb).deleteProperty(kb,aType);
}"
63021,"@Override public void deleteInstance(KnowledgeBase kb,KBInstance aInstance){
  delete(kb,aInstance.getIdentifier());
}","@Override public void deleteInstance(KnowledgeBase kb,KBInstance aInstance){
  getReificationStrategy(kb).deleteInstance(kb,aInstance);
}"
63022,"/** 
 * Whether a class can have instances or not. E.g. classes that just serve as headings in a hierarchical resource should not have instances.
 */
public String getDescription(){
  return description;
}","/** 
 * @return Gives description for the concept
 */
public String getDescription(){
  return description;
}"
63023,"/** 
 * Sets the label of this element.
 */
void setName(String label);","/** 
 * Sets the label of this element.
 * @param label the label of this element
 */
void setName(String label);"
63024,"/** 
 * Returns the label of this element.
 */
String getName();","/** 
 * @return the label of this element.
 */
String getName();"
63025,"public static RepositoryResult<Statement> getPropertyStatementsSparql(RepositoryConnection conn,Resource subj,IRI pred,Value obj,int aLimit,boolean includeInferred,String language) throws QueryEvaluationException {
  String filter=""String_Node_Str"";
  if (language != null) {
    filter=""String_Node_Str"" + NTriplesUtil.escapeString(language) + ""String_Node_Str"";
  }
  String QUERY=String.join(""String_Node_Str"",InferencerVariableStore.PREFIX_OWL,InferencerVariableStore.PREFIX_RDF,InferencerVariableStore.PREFIX_RDFS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",filter,""String_Node_Str"");
  TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
  if (subj != null) {
    tupleQuery.setBinding(""String_Node_Str"",subj);
  }
  if (pred != null) {
    tupleQuery.setBinding(""String_Node_Str"",pred);
  }
  if (obj != null) {
    tupleQuery.setBinding(""String_Node_Str"",obj);
  }
  tupleQuery.setIncludeInferred(includeInferred);
  TupleQueryResult result=tupleQuery.evaluate();
  Iteration<Statement,QueryEvaluationException> i1=new ConvertingIteration<BindingSet,Statement,QueryEvaluationException>(result){
    @Override protected Statement convert(    BindingSet b) throws QueryEvaluationException {
      Resource s=subj == null ? (Resource)b.getValue(""String_Node_Str"") : subj;
      IRI p=pred == null ? (IRI)b.getValue(""String_Node_Str"") : pred;
      Value o=obj == null ? b.getValue(""String_Node_Str"") : obj;
      return SimpleValueFactory.getInstance().createStatement(s,p,o);
    }
  }
;
  ExceptionConvertingIteration<Statement,RepositoryException> i2=new ExceptionConvertingIteration<Statement,RepositoryException>(i1){
    @Override protected RepositoryException convert(    Exception aE){
      return new RepositoryException(aE);
    }
  }
;
  return new RepositoryResult<Statement>(i2);
}","public static RepositoryResult<Statement> getPropertyStatementsSparql(RepositoryConnection conn,Resource subj,IRI pred,Value obj,int aLimit,boolean includeInferred,String language) throws QueryEvaluationException {
  String filter=""String_Node_Str"";
  if (language != null) {
    filter=""String_Node_Str"" + NTriplesUtil.escapeString(language) + ""String_Node_Str"";
  }
  String QUERY=String.join(""String_Node_Str"",""String_Node_Str"" + RDFS.NAMESPACE + ""String_Node_Str"",""String_Node_Str"" + OWL.NAMESPACE + ""String_Node_Str"",""String_Node_Str"" + RDF.NAMESPACE + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",filter,""String_Node_Str"");
  TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,QUERY);
  if (subj != null) {
    tupleQuery.setBinding(""String_Node_Str"",subj);
  }
  if (pred != null) {
    tupleQuery.setBinding(""String_Node_Str"",pred);
  }
  if (obj != null) {
    tupleQuery.setBinding(""String_Node_Str"",obj);
  }
  tupleQuery.setIncludeInferred(includeInferred);
  TupleQueryResult result=tupleQuery.evaluate();
  Iteration<Statement,QueryEvaluationException> i1=new ConvertingIteration<BindingSet,Statement,QueryEvaluationException>(result){
    @Override protected Statement convert(    BindingSet b) throws QueryEvaluationException {
      Resource s=subj == null ? (Resource)b.getValue(""String_Node_Str"") : subj;
      IRI p=pred == null ? (IRI)b.getValue(""String_Node_Str"") : pred;
      Value o=obj == null ? b.getValue(""String_Node_Str"") : obj;
      return SimpleValueFactory.getInstance().createStatement(s,p,o);
    }
  }
;
  ExceptionConvertingIteration<Statement,RepositoryException> i2=new ExceptionConvertingIteration<Statement,RepositoryException>(i1){
    @Override protected RepositoryException convert(    Exception aE){
      return new RepositoryException(aE);
    }
  }
;
  return new RepositoryResult<Statement>(i2);
}"
63026,"private static <A extends Annotation>List<AnnotationObject> getTokenAnnotationsFromFS(List<AnnotationFS> annotations,List<TokenObject> sentence,String documentURI,String documentName,Feature feature,long aRecommenderId){
  List<AnnotationObject> result=new ArrayList<>();
  int id=0;
  for (  AnnotationFS a : annotations) {
    String annotationLabel=a.getFeatureValueAsString(feature);
    List<Token> tokens=selectCovered(Token.class,a);
    if (tokens == null || tokens.isEmpty()) {
      continue;
    }
    for (int i=0; i < tokens.size(); i++) {
      Token token=tokens.get(i);
      Offset offset=getTokenOffset(token,sentence);
      TokenObject tObj=new TokenObject(offset,token.getCoveredText(),documentURI,documentName,id);
      AnnotationObject ao=new AnnotationObject(tObj,id,feature.getName(),aRecommenderId);
      ao.setLabel(annotationLabel);
      id++;
    }
  }
  Collections.sort(result,(ao1,ao2) -> ao1.getOffset().compareTo(ao2.getOffset()));
  return result;
}","private static <A extends Annotation>List<AnnotationObject> getTokenAnnotationsFromFS(List<AnnotationFS> annotations,List<TokenObject> sentence,String documentURI,String documentName,Feature feature,long aRecommenderId){
  List<AnnotationObject> result=new ArrayList<>();
  int id=0;
  for (  AnnotationFS a : annotations) {
    String annotationLabel=a.getFeatureValueAsString(feature);
    List<Token> tokens=selectCovered(Token.class,a);
    if (tokens == null || tokens.isEmpty()) {
      continue;
    }
    for (int i=0; i < tokens.size(); i++) {
      Token token=tokens.get(i);
      Offset offset=getTokenOffset(token,sentence);
      TokenObject tObj=new TokenObject(offset,token.getCoveredText(),documentURI,documentName,id);
      AnnotationObject ao=new AnnotationObject(tObj,id,feature.getName(),aRecommenderId);
      ao.setLabel(annotationLabel);
      result.add(ao);
      id++;
    }
  }
  Collections.sort(result,(ao1,ao2) -> ao1.getOffset().compareTo(ao2.getOffset()));
  return result;
}"
63027,"private int indexFeatureValue(MtasTokenCollection aTokenCollection,AnnotationFeature aFeature,AnnotationFS aAnnotation,int aBeginToken,int aEndToken,int aMtasId,String annotationUiName){
  int mtasId=aMtasId;
  String featureValue=WebAnnoCasUtil.getFeature(aAnnotation,aFeature.getName());
  addToIndex(aTokenCollection,annotationUiName + ""String_Node_Str"" + aFeature.getUiName(),featureValue,mtasId++,aAnnotation.getBegin(),aAnnotation.getEnd(),aBeginToken,aEndToken);
  return mtasId;
}","private int indexFeatureValue(MtasTokenCollection aTokenCollection,AnnotationFeature aFeature,AnnotationFS aAnnotation,int aBeginToken,int aEndToken,int aMtasId,String annotationUiName){
  int mtasId=aMtasId;
  FeatureSupport<?> featSup=featureSupportRegistry.getFeatureSupport(aFeature);
  String featureValue=featSup.renderFeatureValue(aFeature,aAnnotation);
  addToIndex(aTokenCollection,annotationUiName + ""String_Node_Str"" + aFeature.getUiName(),featureValue,mtasId++,aAnnotation.getBegin(),aAnnotation.getEnd(),aBeginToken,aEndToken);
  return mtasId;
}"
63028,"public void write(RepositoryConnection aConn,KnowledgeBase kb){
  ValueFactory vf=aConn.getValueFactory();
  IRI subject=vf.createIRI(identifier);
  originalStatements.clear();
  Statement typeStmt=vf.createStatement(subject,kb.getTypeIri(),vf.createIRI(type.toString()));
  originalStatements.add(typeStmt);
  aConn.add(typeStmt);
  if (isNotBlank(name)) {
    Statement nameStmt=vf.createStatement(subject,kb.getLabelIri(),vf.createLiteral(name,language));
    originalStatements.add(nameStmt);
    aConn.add(nameStmt);
  }
  if (isNotBlank(description)) {
    Statement descStmt=vf.createStatement(subject,kb.getDescriptionIri(),vf.createLiteral(description,language));
    originalStatements.add(descStmt);
    aConn.add(descStmt);
  }
}","public void write(RepositoryConnection aConn,KnowledgeBase kb){
  ValueFactory vf=aConn.getValueFactory();
  IRI subject=vf.createIRI(identifier);
  originalStatements.clear();
  Statement typeStmt=vf.createStatement(subject,kb.getTypeIri(),vf.createIRI(type.toString()));
  originalStatements.add(typeStmt);
  aConn.add(typeStmt);
  if (isNotBlank(name)) {
    Literal nameLiteral;
    if (language == null) {
      nameLiteral=vf.createLiteral(name);
    }
 else {
      nameLiteral=vf.createLiteral(name,language);
    }
    Statement nameStmt=vf.createStatement(subject,kb.getLabelIri(),nameLiteral);
    originalStatements.add(nameStmt);
    aConn.add(nameStmt);
  }
  if (isNotBlank(description)) {
    Literal descriptionLiteral;
    if (language == null) {
      descriptionLiteral=vf.createLiteral(description);
    }
 else {
      descriptionLiteral=vf.createLiteral(description,language);
    }
    Statement descStmt=vf.createStatement(subject,kb.getDescriptionIri(),descriptionLiteral);
    originalStatements.add(descStmt);
    aConn.add(descStmt);
  }
}"
63029,"private SemanticSignature getSemanticSignature(KnowledgeBase aKB,String aWikidataId){
  if (semanticSignatureCache.containsKey(aWikidataId)) {
    return semanticSignatureCache.get(aWikidataId);
  }
  Set<String> relatedRelations=new HashSet<>();
  Set<String> relatedEntities=new HashSet<>();
  try (RepositoryConnection conn=kbService.getConnection(aKB)){
    TupleQuery query=QueryUtil.generateSemanticSignatureQuery(conn,aWikidataId,properties.getSignatureQueryLimit());
    try (TupleQueryResult result=query.evaluate()){
      while (result.hasNext()) {
        BindingSet sol=result.next();
        String propertyString=sol.getValue(""String_Node_Str"").stringValue();
        String labelString=sol.getValue(""String_Node_Str"").stringValue();
        if (propertyWithLabels != null) {
          Property property=propertyWithLabels.get(labelString);
          int frequencyThreshold=0;
          boolean isBlacklisted=(propertyBlacklist != null && propertyBlacklist.contains(propertyString) || (property != null && (typeBlacklist != null && typeBlacklist.contains(property.getType()))));
          boolean isUnfrequent=property != null && property.getFreq() < frequencyThreshold;
          if (isBlacklisted || isUnfrequent) {
            continue;
          }
        }
        relatedEntities.add(labelString);
        relatedRelations.add(propertyString);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
   SemanticSignature ss=new SemanticSignature(relatedEntities,relatedRelations);
  semanticSignatureCache.put(aWikidataId,ss);
  return ss;
}","private SemanticSignature getSemanticSignature(KnowledgeBase aKB,String aWikidataId){
  ImmutablePair<Project,String> pair=new ImmutablePair<>(aKB.getProject(),aWikidataId);
  if (semanticSignatureCache.containsKey(pair)) {
    return semanticSignatureCache.get(pair);
  }
  Set<String> relatedRelations=new HashSet<>();
  Set<String> relatedEntities=new HashSet<>();
  try (RepositoryConnection conn=kbService.getConnection(aKB)){
    TupleQuery query=QueryUtil.generateSemanticSignatureQuery(conn,aWikidataId,properties.getSignatureQueryLimit());
    try (TupleQueryResult result=query.evaluate()){
      while (result.hasNext()) {
        BindingSet sol=result.next();
        String propertyString=sol.getValue(""String_Node_Str"").stringValue();
        String labelString=sol.getValue(""String_Node_Str"").stringValue();
        if (propertyWithLabels != null) {
          Property property=propertyWithLabels.get(labelString);
          int frequencyThreshold=0;
          boolean isBlacklisted=(propertyBlacklist != null && propertyBlacklist.contains(propertyString) || (property != null && (typeBlacklist != null && typeBlacklist.contains(property.getType()))));
          boolean isUnfrequent=property != null && property.getFreq() < frequencyThreshold;
          if (isBlacklisted || isUnfrequent) {
            continue;
          }
        }
        relatedEntities.add(labelString);
        relatedRelations.add(propertyString);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
   SemanticSignature ss=new SemanticSignature(relatedEntities,relatedRelations);
  semanticSignatureCache.put(pair,ss);
  return ss;
}"
63030,"private Set<CandidateEntity> generateCandidates(KnowledgeBase aKB,String aMention){
  if (aMention == null || aMention.isEmpty()) {
    return Collections.emptySet();
  }
  if (candidateCache.containsKey(aMention)) {
    return candidateCache.get(aMention);
  }
  Set<CandidateEntity> candidates=new HashSet<>();
  List<String> mentionList=Arrays.asList(aMention.split(""String_Node_Str""));
  mentionList=mentionList.stream().map(m -> m.replaceAll(""String_Node_Str"",""String_Node_Str"")).collect(Collectors.toList());
  if (stopwords != null) {
    if (stopwords.containsAll(mentionList)) {
      logger.error(""String_Node_Str"",aMention);
      return Collections.emptySet();
    }
  }
  String processedMention=String.join(""String_Node_Str"",mentionList);
  if (processedMention.isEmpty()) {
    logger.error(""String_Node_Str"");
    return Collections.emptySet();
  }
  try (RepositoryConnection conn=kbService.getConnection(aKB)){
    TupleQuery query=QueryUtil.generateCandidateQuery(conn,processedMention,properties.getCandidateQueryLimit(),aKB.getDescriptionIri());
    try (TupleQueryResult entityResult=query.evaluate()){
      while (entityResult.hasNext()) {
        BindingSet solution=entityResult.next();
        Value e2=solution.getValue(""String_Node_Str"");
        Value label=solution.getValue(""String_Node_Str"");
        Value altLabel=solution.getValue(""String_Node_Str"");
        Value description=solution.getValue(""String_Node_Str"");
        CandidateEntity newEntity=new CandidateEntity((e2 != null) ? e2.stringValue() : ""String_Node_Str"",(label != null) ? label.stringValue() : ""String_Node_Str"",(altLabel != null) ? altLabel.stringValue() : ""String_Node_Str"",(description != null) ? description.stringValue() : ""String_Node_Str"");
        candidates.add(newEntity);
      }
    }
   }
 catch (  QueryEvaluationException e) {
    logger.error(""String_Node_Str"",e);
  }
  if (candidates.isEmpty()) {
    String[] split=processedMention.split(""String_Node_Str"");
    if (split.length > 1) {
      for (      String s : split) {
        candidates.addAll(generateCandidates(aKB,s));
      }
    }
  }
  candidateCache.put(processedMention,candidates);
  return candidates;
}","private Set<CandidateEntity> generateCandidates(KnowledgeBase aKB,String aMention){
  if (aMention == null || aMention.isEmpty()) {
    return Collections.emptySet();
  }
  Set<CandidateEntity> candidates=new HashSet<>();
  List<String> mentionList=Arrays.asList(aMention.split(""String_Node_Str""));
  mentionList=mentionList.stream().map(m -> m.replaceAll(""String_Node_Str"",""String_Node_Str"")).collect(Collectors.toList());
  if (stopwords != null) {
    if (stopwords.containsAll(mentionList)) {
      logger.error(""String_Node_Str"",aMention);
      return Collections.emptySet();
    }
  }
  String processedMention=String.join(""String_Node_Str"",mentionList);
  if (processedMention.isEmpty()) {
    logger.error(""String_Node_Str"");
    return Collections.emptySet();
  }
  ImmutablePair<Project,String> pair=new ImmutablePair<>(aKB.getProject(),processedMention);
  if (candidateCache.containsKey(pair)) {
    return candidateCache.get(pair);
  }
  try (RepositoryConnection conn=kbService.getConnection(aKB)){
    TupleQuery query=QueryUtil.generateCandidateQuery(conn,processedMention,properties.getCandidateQueryLimit(),aKB.getDescriptionIri());
    try (TupleQueryResult entityResult=query.evaluate()){
      while (entityResult.hasNext()) {
        BindingSet solution=entityResult.next();
        Value e2=solution.getValue(""String_Node_Str"");
        Value label=solution.getValue(""String_Node_Str"");
        Value altLabel=solution.getValue(""String_Node_Str"");
        Value description=solution.getValue(""String_Node_Str"");
        CandidateEntity newEntity=new CandidateEntity((e2 != null) ? e2.stringValue() : ""String_Node_Str"",(label != null) ? label.stringValue() : ""String_Node_Str"",(altLabel != null) ? altLabel.stringValue() : ""String_Node_Str"",(description != null) ? description.stringValue() : ""String_Node_Str"");
        candidates.add(newEntity);
      }
    }
   }
 catch (  QueryEvaluationException e) {
    logger.error(""String_Node_Str"",e);
  }
  if (candidates.isEmpty()) {
    String[] split=processedMention.split(""String_Node_Str"");
    if (split.length > 1) {
      for (      String s : split) {
        candidates.addAll(generateCandidates(aKB,s));
      }
    }
  }
  candidateCache.put(pair,candidates);
  return candidates;
}"
63031,"public NamedEntityLinkerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer,KnowledgeBaseService kbService,ConceptLinkingService clService,DocumentService docService,AnnotationSchemaService annoService,FeatureSupportRegistry fsRegistry){
  super(recommenderId,NamedEntityLinkerClassificationToolFactory.class.getName(),new NamedEntityTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new NamedEntityLinker(new ClassifierConfiguration<>(feature,recommenderId),kbService,clService,docService,annoService,fsRegistry,feature),new NerAnnotationObjectLoader(aLayer,NAMED_ENTITY_CLASSIFICATION_FEATURE),false);
}","public NamedEntityLinkerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer,KnowledgeBaseService kbService,ConceptLinkingService clService,DocumentService docService,AnnotationSchemaService annoService,FeatureSupportRegistry fsRegistry){
  super(recommenderId,NamedEntityLinkerClassificationToolFactory.class.getName(),new NamedEntityTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new NamedEntityLinker(new ClassifierConfiguration<>(feature,recommenderId),kbService,clService,docService,annoService,fsRegistry,feature),new NerAnnotationObjectLoader(aLayer,NAMED_ENTITY_CLASSIFICATION_FEATURE),false,false);
}"
63032,"public ExternalClassificationTool(long recommenderId,String feature,String type,ExternalClassifierTraits traits){
  super(recommenderId,ExternalClassificationTool.class.getName(),new ExternalTrainer(new BaseConfiguration()),new ExternalClassifier(new BaseConfiguration(feature),new CustomAnnotationObjectLoader(feature,type),traits,recommenderId),new CustomAnnotationObjectLoader(feature,type),true);
}","public ExternalClassificationTool(long recommenderId,String feature,String type,ExternalClassifierTraits traits){
  super(recommenderId,ExternalClassificationTool.class.getName(),new ExternalTrainer(new BaseConfiguration()),new ExternalClassifier(new BaseConfiguration(feature),new CustomAnnotationObjectLoader(feature,type),traits,recommenderId),new CustomAnnotationObjectLoader(feature,type),true,false);
}"
63033,"public MiraPosClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,MiraPosClassificationTool.class.getName(),new MiraPosTrainer(new BaseConfiguration(feature,recommenderId)),new MiraPosClassifier(new BaseConfiguration(feature,recommenderId)),new PosAnnotationObjectLoader(aLayer,feature),true);
}","public MiraPosClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,MiraPosClassificationTool.class.getName(),new MiraPosTrainer(new BaseConfiguration(feature,recommenderId)),new MiraPosClassifier(new BaseConfiguration(feature,recommenderId)),new PosAnnotationObjectLoader(aLayer,feature),true,true);
}"
63034,"public OpenNlpNerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,OpenNlpNerClassificationTool.class.getName(),new OpenNlpNerTrainer(new BaseConfiguration(feature,recommenderId)),new OpenNlpNerClassifier(new BaseConfiguration(feature,recommenderId)),new NerAnnotationObjectLoader(aLayer,feature),false);
}","public OpenNlpNerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,OpenNlpNerClassificationTool.class.getName(),new OpenNlpNerTrainer(new BaseConfiguration(feature,recommenderId)),new OpenNlpNerClassifier(new BaseConfiguration(feature,recommenderId)),new NerAnnotationObjectLoader(aLayer,feature),false,true);
}"
63035,"public OpenNlpPosClassificationTool(long recommenderId,int beamSize,String feature,AnnotationLayer aLayer){
  super(recommenderId,OpenNlpPosClassificationTool.class.getName(),new OpenNlpPosTrainer(new CustomConfiguration(beamSize,feature,recommenderId)),new OpenNlpPosClassifier(new CustomConfiguration(beamSize,feature,recommenderId)),new PosAnnotationObjectLoader(aLayer,feature),true);
}","public OpenNlpPosClassificationTool(long recommenderId,int beamSize,String feature,AnnotationLayer aLayer){
  super(recommenderId,OpenNlpPosClassificationTool.class.getName(),new OpenNlpPosTrainer(new CustomConfiguration(beamSize,feature,recommenderId)),new OpenNlpPosClassifier(new CustomConfiguration(beamSize,feature,recommenderId)),new PosAnnotationObjectLoader(aLayer,feature),true,true);
}"
63036,"public StringMatchingNerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,StringMatchingNerClassificationTool.class.getName(),new StringMatchingNerTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new StringMatchingNerClassifier(new ClassifierConfiguration<>(feature,recommenderId)),new NerAnnotationObjectLoader(aLayer,feature),false);
}","public StringMatchingNerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,StringMatchingNerClassificationTool.class.getName(),new StringMatchingNerTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new StringMatchingNerClassifier(new ClassifierConfiguration<>(feature,recommenderId)),new NerAnnotationObjectLoader(aLayer,feature),false,true);
}"
63037,"public StringMatchingPosClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,StringMatchingPosClassificationTool.class.getName(),new StringMatchingPosTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new StringMatchingPosClassifier(new ClassifierConfiguration<>(feature,recommenderId)),new PosAnnotationObjectLoader(aLayer,feature),false);
}","public StringMatchingPosClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer){
  super(recommenderId,StringMatchingPosClassificationTool.class.getName(),new StringMatchingPosTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new StringMatchingPosClassifier(new ClassifierConfiguration<>(feature,recommenderId)),new PosAnnotationObjectLoader(aLayer,feature),false,true);
}"
63038,"protected void setTrainer(Trainer<C> trainer){
  this.trainer=trainer;
}","public void setTrainer(Trainer<C> trainer){
  this.trainer=trainer;
}"
63039,"protected void setTrainOnCompleteSentences(boolean trainOnCompleteSentences){
  this.trainOnCompleteSentences=trainOnCompleteSentences;
}","public void setTrainOnCompleteSentences(boolean trainOnCompleteSentences){
  this.trainOnCompleteSentences=trainOnCompleteSentences;
}"
63040,"/** 
 * Constructs a new ClassificationTool
 * @param id A id for the classification tool. It is recommended to use a unique id.
 * @param name A name for the classification tool. It is recommended to use a unique name.
 * @param trainer The trainer class training the model of the implementing machine learning algorithm.
 * @param classifier The classifier, i.e. the machine learning algorithm.
 * @param loader A loader class, used to load annotated data out of a  {@link JCas}
 * @param trainOnCompleteSentences true, if sentences have to be fully annotated, i.e. every token needs an annotation label != null, to be used for training.
 */
protected ClassificationTool(long id,String name,Trainer<C> trainer,Classifier<C> classifier,AnnotationObjectLoader loader,boolean trainOnCompleteSentences){
  super();
  this.id=id;
  this.name=name;
  this.trainer=trainer;
  this.classifier=classifier;
  this.loader=loader;
  this.trainOnCompleteSentences=trainOnCompleteSentences;
}","/** 
 * Constructs a new ClassificationTool
 * @param id A id for the classification tool. It is recommended to use a unique id.
 * @param name A name for the classification tool. It is recommended to use a unique name.
 * @param trainer The trainer class training the model of the implementing machine learning algorithm.
 * @param classifier The classifier, i.e. the machine learning algorithm.
 * @param loader A loader class, used to load annotated data out of a  {@link JCas}
 * @param trainOnCompleteSentences true, if sentences have to be fully annotated, i.e. every token needs an annotation label != null, to be used for training.
 * @param isEvaluable Some classification tools should be skipped during evaluation, since they do not train or are trained externally. true, if the classifier is locally evaluable.
 */
protected ClassificationTool(long id,String name,Trainer<C> trainer,Classifier<C> classifier,AnnotationObjectLoader loader,boolean trainOnCompleteSentences,boolean isEvaluable){
  super();
  this.id=id;
  this.name=name;
  this.trainer=trainer;
  this.classifier=classifier;
  this.loader=loader;
  this.trainOnCompleteSentences=trainOnCompleteSentences;
  this.isEvaluable=isEvaluable;
}"
63041,"protected void setLoader(AnnotationObjectLoader loader){
  this.loader=loader;
}","public void setLoader(AnnotationObjectLoader loader){
  this.loader=loader;
}"
63042,"protected void setClassifier(Classifier<C> classifier){
  this.classifier=classifier;
}","public void setClassifier(Classifier<C> classifier){
  this.classifier=classifier;
}"
63043,"@Override public void run(){
  User user=getUser();
  for (  AnnotationLayer layer : annoService.listAnnotationLayer(getProject())) {
    if (!layer.isEnabled()) {
      continue;
    }
    List<Recommender> recommenders=recommendationService.listRecommenders(layer);
    if (recommenders == null || recommenders.isEmpty()) {
      log.debug(""String_Node_Str"",user.getUsername(),layer.getUiName());
      continue;
    }
    List<Recommender> activeRecommenders=new ArrayList<>();
    for (    Recommender recommender : recommenders) {
      try {
        long start=System.currentTimeMillis();
        ClassificationTool<?> ct=recommendationService.getTool(recommender,recommendationService.getMaxSuggestions(user));
        if (ct == null || !recommender.isEnabled()) {
          continue;
        }
        if (recommender.isAlwaysSelected()) {
          log.info(""String_Node_Str"",user.getUsername(),ct.getId());
          activeRecommenders.add(recommender);
          continue;
        }
        log.info(""String_Node_Str"",user.getUsername(),recommender.getName());
        EvaluationConfiguration suiteConf=EvaluationHelper.getTrainingSuiteConfiguration(""String_Node_Str"",documentService,getProject());
        suiteConf.setFeature(ct.getFeature());
        EvaluationHelper.customizeConfiguration(ct,""String_Node_Str"",documentService,layer.getProject());
        ExtendedResult result=evaluate(suiteConf,ct,documentService.listSourceDocuments(layer.getProject()));
        if (result == null || result.getFscore() < 0) {
          log.info(""String_Node_Str"",user.getUsername(),recommender.getName());
          continue;
        }
        Double threshold=recommender.getThreshold();
        if (result.getFscore() >= threshold) {
          activeRecommenders.add(recommender);
          log.info(""String_Node_Str"",user.getUsername(),recommender.getName(),result.getFscore(),threshold);
        }
 else {
          log.info(""String_Node_Str"",user.getUsername(),recommender.getName(),result.getFscore(),threshold);
        }
        appEventPublisher.publishEvent(new RecommenderEvaluationResultEvent(this,recommender,user.getUsername(),result,System.currentTimeMillis() - start));
      }
 catch (      Throwable e) {
        log.error(""String_Node_Str"",user.getUsername(),recommender.getName(),e);
      }
    }
    recommendationService.setActiveRecommenders(user,layer,activeRecommenders);
  }
}","@Override public void run(){
  User user=getUser();
  for (  AnnotationLayer layer : annoService.listAnnotationLayer(getProject())) {
    if (!layer.isEnabled()) {
      continue;
    }
    List<Recommender> recommenders=recommendationService.listRecommenders(layer);
    if (recommenders == null || recommenders.isEmpty()) {
      log.debug(""String_Node_Str"",user.getUsername(),layer.getUiName());
      continue;
    }
    List<Recommender> activeRecommenders=new ArrayList<>();
    for (    Recommender recommender : recommenders) {
      try {
        long start=System.currentTimeMillis();
        ClassificationTool<?> ct=recommendationService.getTool(recommender,recommendationService.getMaxSuggestions(user));
        if (ct == null || !recommender.isEnabled()) {
          continue;
        }
        if (recommender.isAlwaysSelected() || !ct.isEvaluable()) {
          log.info(""String_Node_Str"",user.getUsername(),ct.getId(),recommender.isAlwaysSelected(),ct.isEvaluable());
          activeRecommenders.add(recommender);
          continue;
        }
        log.info(""String_Node_Str"",user.getUsername(),recommender.getName());
        EvaluationConfiguration suiteConf=EvaluationHelper.getTrainingSuiteConfiguration(""String_Node_Str"",documentService,getProject());
        suiteConf.setFeature(ct.getFeature());
        EvaluationHelper.customizeConfiguration(ct,""String_Node_Str"",documentService,layer.getProject());
        ExtendedResult result=evaluate(suiteConf,ct,documentService.listSourceDocuments(layer.getProject()));
        if (result == null || result.getFscore() < 0) {
          log.info(""String_Node_Str"",user.getUsername(),recommender.getName());
          continue;
        }
        Double threshold=recommender.getThreshold();
        if (result.getFscore() >= threshold) {
          activeRecommenders.add(recommender);
          log.info(""String_Node_Str"",user.getUsername(),recommender.getName(),result.getFscore(),threshold);
        }
 else {
          log.info(""String_Node_Str"",user.getUsername(),recommender.getName(),result.getFscore(),threshold);
        }
        appEventPublisher.publishEvent(new RecommenderEvaluationResultEvent(this,recommender,user.getUsername(),result,System.currentTimeMillis() - start));
      }
 catch (      Throwable e) {
        log.error(""String_Node_Str"",user.getUsername(),recommender.getName(),e);
      }
    }
    recommendationService.setActiveRecommenders(user,layer,activeRecommenders);
  }
}"
63044,"public NamedEntityLinker(ClassifierConfiguration<Object> aConf,KnowledgeBaseService aKbService,ConceptLinkingService aClService,DocumentService aDocService,AnnotationSchemaService aAnnoService,FeatureSupportRegistry aFsRegistry){
  super(aConf);
  kbService=aKbService;
  clService=aClService;
  documentService=aDocService;
  annoService=aAnnoService;
  fsRegistry=aFsRegistry;
  conf.setNumPredictions(numPredictions);
}","public NamedEntityLinker(ClassifierConfiguration<Object> aConf,KnowledgeBaseService aKbService,ConceptLinkingService aClService,DocumentService aDocService,AnnotationSchemaService aAnnoService,FeatureSupportRegistry aFsRegistry,String aFeature){
  super(aConf);
  kbService=aKbService;
  clService=aClService;
  documentService=aDocService;
  annoService=aAnnoService;
  fsRegistry=aFsRegistry;
  conf.setNumPredictions(numPredictions);
  feature=aFeature;
}"
63045,"public NamedEntityLinkerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer,KnowledgeBaseService kbService,ConceptLinkingService clService,DocumentService docService,AnnotationSchemaService annoService,FeatureSupportRegistry fsRegistry){
  super(recommenderId,NamedEntityLinkerClassificationToolFactory.class.getName(),new NamedEntityTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new NamedEntityLinker(new ClassifierConfiguration<>(feature,recommenderId),kbService,clService,docService,annoService,fsRegistry),new NerAnnotationObjectLoader(aLayer,NAMED_ENTITY_CLASSIFICATION_FEATURE),false);
}","public NamedEntityLinkerClassificationTool(long recommenderId,String feature,AnnotationLayer aLayer,KnowledgeBaseService kbService,ConceptLinkingService clService,DocumentService docService,AnnotationSchemaService annoService,FeatureSupportRegistry fsRegistry){
  super(recommenderId,NamedEntityLinkerClassificationToolFactory.class.getName(),new NamedEntityTrainer(new ClassifierConfiguration<>(feature,recommenderId)),new NamedEntityLinker(new ClassifierConfiguration<>(feature,recommenderId),kbService,clService,docService,annoService,fsRegistry,feature),new NerAnnotationObjectLoader(aLayer,NAMED_ENTITY_CLASSIFICATION_FEATURE),false);
}"
63046,"@Override public boolean accepts(AnnotationLayer aLayer,AnnotationFeature aFeature){
  if (aLayer == null || aFeature == null) {
    return false;
  }
  return (aLayer.isLockToTokenOffset() || aLayer.isMultipleTokens()) && !aLayer.isCrossSentence() && ""String_Node_Str"".equals(aLayer.getType())&& (CAS.TYPE_NAME_STRING.equals(aFeature.getType()) || aFeature.isVirtualFeature());
}","@Override public boolean accepts(AnnotationLayer aLayer,AnnotationFeature aFeature){
  if (aLayer == null || aFeature == null) {
    return false;
  }
  return (aLayer.isLockToTokenOffset() || aLayer.isMultipleTokens()) && !aLayer.isCrossSentence() && ""String_Node_Str"".equals(aLayer.getType())&& aFeature.getType().startsWith(PREFIX);
}"
63047,"private void jumpAndHighlightFromLearningHistory(AjaxRequestTarget aTarget,LearningRecord record) throws IOException {
  actionShowSelectedDocument(aTarget,record.getSourceDocument(),record.getOffsetCharacterBegin());
  JCas aJcas=this.getJCasProvider().get();
  if (record.getUserAction().equals(LearningRecordUserAction.REJECTED)) {
    highlightTextAndDisplayMessage(aTarget,record);
  }
 else   if (activeLearningRecommender.checkRecommendationExist(activeLearningService,record)) {
    highlightRecommendation(aTarget,record.getOffsetCharacterBegin(),record.getOffsetCharacterEnd(),record.getTokenText(),record.getAnnotation());
  }
 else   if (!isAnnotatedInCas(record,aJcas)) {
    highlightTextAndDisplayMessage(aTarget,record);
  }
}","private void jumpAndHighlightFromLearningHistory(AjaxRequestTarget aTarget,LearningRecord record) throws IOException {
  actionShowSelectedDocument(aTarget,record.getSourceDocument(),record.getOffsetCharacterBegin());
  JCas jCas=this.getJCasProvider().get();
  if (record.getUserAction().equals(LearningRecordUserAction.REJECTED)) {
    highlightTextAndDisplayMessage(aTarget,record);
  }
 else   if (activeLearningRecommender.checkRecommendationExist(activeLearningService,record)) {
    highlightRecommendation(aTarget,record.getOffsetCharacterBegin(),record.getOffsetCharacterEnd(),record.getTokenText(),record.getAnnotation());
  }
 else   if (!isAnnotatedInCas(record,jCas)) {
    highlightTextAndDisplayMessage(aTarget,record);
  }
}"
63048,"private void deleteAnnotationByHistory(AjaxRequestTarget aTarget,LearningRecord aRecord,JCas aJcas) throws IOException, AnnotationException {
  this.getModelObject().getSelection().selectSpan(highlightVID,aJcas,aRecord.getOffsetCharacterBegin(),aRecord.getOffsetCharacterEnd());
  getActionHandler().actionDelete(aTarget);
}","private void deleteAnnotationByHistory(AjaxRequestTarget aTarget,LearningRecord aRecord) throws IOException, AnnotationException {
  JCas jCas=this.getJCasProvider().get();
  this.getModelObject().getSelection().selectSpan(highlightVID,jCas,aRecord.getOffsetCharacterBegin(),aRecord.getOffsetCharacterEnd());
  getActionHandler().actionDelete(aTarget);
}"
63049,"private void actionRemoveHistoryItem(AjaxRequestTarget aTarget,LearningRecord aRecord) throws IOException, AnnotationException {
  aTarget.add(mainContainer);
  annotationPage.actionRefreshDocument(aTarget);
  learningRecordService.delete(aRecord);
  learningRecords.detach();
  if (aRecord.getUserAction().equals(LearningRecordUserAction.ACCEPTED)) {
    actionShowSelectedDocument(aTarget,aRecord.getSourceDocument(),aRecord.getOffsetCharacterBegin());
    JCas aJcas=casStorageService.readCas(aRecord.getSourceDocument(),aRecord.getUser());
    if (isAnnotatedInCas(aRecord,aJcas)) {
      confirmationDialog.setTitleModel(new StringResourceModel(""String_Node_Str"",this));
      confirmationDialog.setContentModel(new StringResourceModel(""String_Node_Str"",this,null));
      confirmationDialog.show(aTarget);
      confirmationDialog.setConfirmAction(t -> deleteAnnotationByHistory(t,aRecord,aJcas));
    }
  }
}","private void actionRemoveHistoryItem(AjaxRequestTarget aTarget,LearningRecord aRecord) throws IOException {
  aTarget.add(mainContainer);
  annotationPage.actionRefreshDocument(aTarget);
  learningRecordService.delete(aRecord);
  learningRecords.detach();
  if (aRecord.getUserAction().equals(LearningRecordUserAction.ACCEPTED)) {
    actionShowSelectedDocument(aTarget,aRecord.getSourceDocument(),aRecord.getOffsetCharacterBegin());
    AnnotationDocument annoDoc=documentService.createOrGetAnnotationDocument(aRecord.getSourceDocument(),userDao.get(aRecord.getUser()));
    JCas jCas=documentService.readAnnotationCas(annoDoc);
    if (isAnnotatedInCas(aRecord,jCas)) {
      confirmationDialog.setTitleModel(new StringResourceModel(""String_Node_Str"",this));
      confirmationDialog.setContentModel(new StringResourceModel(""String_Node_Str"",this,null));
      confirmationDialog.show(aTarget);
      confirmationDialog.setConfirmAction(t -> deleteAnnotationByHistory(t,aRecord));
    }
  }
}"
63050,"private boolean isNamedEntity(TokenObject token){
  return nerAnnotations.stream().map(AnnotationObject::getOffset).anyMatch(t -> t.equals(token.getOffset()));
}","private boolean isNamedEntity(TokenObject token){
  return nerAnnotations.stream().map(AnnotationObject::getTokenObject).anyMatch(t -> t.getOffset().equals(token.getOffset()) && t.getDocumentURI().equals(token.getDocumentURI()));
}"
63051,"private boolean isNamedEntity(TokenObject token){
  return nerAnnotations.stream().map(AnnotationObject::getOffset).anyMatch(t -> t.equals(token.getOffset()));
}","private boolean isNamedEntity(TokenObject token){
  return nerAnnotations.stream().map(AnnotationObject::getTokenObject).anyMatch(t -> t.getOffset().equals(token.getOffset()) && t.getDocumentURI().equals(token.getDocumentURI()));
}"
63052,"private boolean isNamedEntity(TokenObject token){
  return nerAnnotations.stream().map(AnnotationObject::getOffset).anyMatch(t -> t.equals(token.getOffset()));
}","private boolean isNamedEntity(TokenObject token){
  return nerAnnotations.stream().map(AnnotationObject::getTokenObject).anyMatch(t -> t.getOffset().equals(token.getOffset()) && t.getDocumentURI().equals(token.getDocumentURI()));
}"
63053,"protected void actionCreateSubclass(AjaxRequestTarget aTarget,Form<KBConcept> aForm){
  try {
    KnowledgeBase kb=kbModel.getObject();
    KBProperty property=kbService.readProperty(kb,kb.getSubclassIri().stringValue()).get();
    KBHandle propertyHandle=new KBHandle(property.getIdentifier(),property.getName(),property.getDescription());
    List<KBHandle> existingSubclasses=kbService.listChildConcepts(kb,parentConceptHandleModel.getObject().getIdentifier(),true);
    for (    KBHandle subclass : existingSubclasses) {
      if (newSubclassConceptModel.getObject().getName().equals(subclass.getName())) {
        error(new StringResourceModel(""String_Node_Str"",this).setParameters(subclass.getName(),parentConceptHandleModel.getObject().getUiLabel()).getString());
        aTarget.addChildren(getPage(),IFeedback.class);
        return;
      }
    }
    KBHandle newConceptHandle=kbService.createConcept(kb,newSubclassConceptModel.getObject());
    String parentConceptId=parentConceptHandleModel.getObject().getIdentifier();
    ValueFactory vf=SimpleValueFactory.getInstance();
    KBStatement subclassOfStmt=new KBStatement(newConceptHandle,propertyHandle,vf.createIRI(parentConceptId));
    Reification kbReification=kb.getReification();
    kb.setReification(Reification.NONE);
    kbService.upsertStatement(kb,subclassOfStmt);
    kb.setReification(kbReification);
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,newConceptHandle));
  }
 catch (  QueryEvaluationException|NoSuchElementException e) {
    error(""String_Node_Str"" + e.getLocalizedMessage());
    LOG.error(""String_Node_Str"",e);
    aTarget.addChildren(getPage(),IFeedback.class);
  }
  findParent(SubclassCreationDialog.class).close(aTarget);
}","protected void actionCreateSubclass(AjaxRequestTarget aTarget,Form<KBConcept> aForm){
  try {
    KnowledgeBase kb=kbModel.getObject();
    KBProperty property=kbService.readProperty(kb,kb.getSubclassIri().stringValue()).get();
    KBHandle propertyHandle=new KBHandle(property.getIdentifier(),property.getName(),property.getDescription());
    List<KBHandle> existingSubclasses=kbService.listChildConcepts(kb,parentConceptHandleModel.getObject().getIdentifier(),true);
    for (    KBHandle subclass : existingSubclasses) {
      if (newSubclassConceptModel.getObject().getName().equals(subclass.getName())) {
        error(new StringResourceModel(""String_Node_Str"",this).setParameters(subclass.getName(),parentConceptHandleModel.getObject().getUiLabel()).getString());
        aTarget.addChildren(getPage(),IFeedback.class);
        return;
      }
    }
    KBHandle newConceptHandle=kbService.createConcept(kb,newSubclassConceptModel.getObject());
    String parentConceptId=parentConceptHandleModel.getObject().getIdentifier();
    ValueFactory vf=SimpleValueFactory.getInstance();
    KBStatement subclassOfStmt=new KBStatement(newConceptHandle,propertyHandle,vf.createIRI(parentConceptId));
    Reification kbReification=kb.getReification();
    kb.setReification(Reification.NONE);
    kbService.upsertStatement(kb,subclassOfStmt);
    kb.setReification(kbReification);
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,newConceptHandle,true));
  }
 catch (  QueryEvaluationException|NoSuchElementException e) {
    error(""String_Node_Str"" + e.getLocalizedMessage());
    LOG.error(""String_Node_Str"",e);
    aTarget.addChildren(getPage(),IFeedback.class);
  }
  findParent(SubclassCreationDialog.class).close(aTarget);
}"
63054,"public ConceptInstancePanel(String aId,IModel<KnowledgeBase> aKbModel,IModel<KBHandle> selectedConceptHandle,IModel<KBConcept> selectedConceptModel){
  super(aId,selectedConceptModel);
  setOutputMarkupId(true);
  kbModel=aKbModel;
  selectedInstanceHandle=Model.of();
  this.selectedConceptHandle=selectedConceptHandle;
  add(new ConceptInfoPanel(""String_Node_Str"",kbModel,selectedConceptHandle,selectedConceptModel));
  add(new InstanceListPanel(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle));
  annotatedSearchPanel=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
  add(annotatedSearchPanel);
  instanceInfoPanel=new EmptyPanel(INSTANCE_INFO_MARKUP_ID).setVisibilityAllowed(false);
  add(instanceInfoPanel);
}","public ConceptInstancePanel(String aId,IModel<KnowledgeBase> aKbModel,IModel<KBHandle> selectedConceptHandle,IModel<KBConcept> selectedConceptModel){
  super(aId,selectedConceptModel);
  setOutputMarkupId(true);
  kbModel=aKbModel;
  selectedInstanceHandle=Model.of();
  this.selectedConceptHandle=selectedConceptHandle;
  add(new ConceptInfoPanel(""String_Node_Str"",kbModel,selectedConceptHandle,selectedConceptModel));
  add(new InstanceListPanel(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle));
  if (selectedConceptHandle.getObject() != null) {
    annotatedSearchPanel=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
    add(annotatedSearchPanel);
  }
 else {
    annotatedSearchPanel=new EmptyPanel(""String_Node_Str"").setVisibilityAllowed(false);
    add(annotatedSearchPanel);
  }
  instanceInfoPanel=new EmptyPanel(INSTANCE_INFO_MARKUP_ID).setVisibilityAllowed(false);
  add(instanceInfoPanel);
}"
63055,"@OnEvent public void actionNewInstance(AjaxNewInstanceEvent event){
  selectedInstanceHandle.setObject(null);
  KBInstance instance=new KBInstance();
  URI type=selectedConceptHandle.getObject() != null ? URI.create(selectedConceptHandle.getObject().getIdentifier()) : null;
  instance.setType(type);
  Component replacement=new InstanceInfoPanel(INSTANCE_INFO_MARKUP_ID,kbModel,selectedInstanceHandle,Model.of(instance));
  Component replacementSearch=new AnnotatedListIdentifiers(""String_Node_Str"",kbModel,selectedConceptHandle,selectedInstanceHandle);
  annotatedSearchPanel=annotatedSearchPanel.replaceWith(replacementSearch);
  instanceInfoPanel=instanceInfoPanel.replaceWith(replacement);
  event.getTarget().add(this);
}","@OnEvent public void actionNewInstance(AjaxNewInstanceEvent event){
  selectedInstanceHandle.setObject(null);
  KBInstance instance=new KBInstance();
  URI type=selectedConceptHandle.getObject() != null ? URI.create(selectedConceptHandle.getObject().getIdentifier()) : null;
  instance.setType(type);
  Component replacement=new InstanceInfoPanel(INSTANCE_INFO_MARKUP_ID,kbModel,selectedInstanceHandle,Model.of(instance));
  instanceInfoPanel=instanceInfoPanel.replaceWith(replacement);
  event.getTarget().add(this);
}"
63056,"public MtasToken getMtasTokenKBFeature(){
}","/** 
 * Method Implementation to get MtasToken (To be done when subclass and class  semantics to be included
 * @return
 */
public MtasToken getMtasTokenKBFeature(){
  return null;
}"
63057,"/** 
 * Read identifier URI and return Optional<KBObject>
 * @param aProject
 * @param aIdentifier
 * @return
 */
public Optional<KBObject> readKBIdentifier(Project aProject,String aIdentifier){
  for (  KnowledgeBase kb : kbService.getKnowledgeBases(aProject)) {
    try (RepositoryConnection conn=kbService.getConnection(kb)){
      ValueFactory vf=conn.getValueFactory();
      RepositoryResult<Statement> stmts=RdfUtils.getStatements(conn,vf.createIRI(aIdentifier),kb.getTypeIri(),kb.getClassIri(),true);
      if (stmts.hasNext()) {
        Statement conceptStmt=stmts.next();
        KBConcept kbConcept=KBConcept.read(conn,conceptStmt);
        return Optional.of(kbConcept);
      }
 else       if (!stmts.hasNext()) {
        Optional<KBInstance> kbInstance=kbService.readInstance(kb,aIdentifier);
        return kbInstance.flatMap((p) -> Optional.of(p));
      }
    }
 catch (    QueryEvaluationException e) {
      log.error(""String_Node_Str"",e);
      return Optional.empty();
    }
  }
  return Optional.empty();
}","/** 
 * Read identifier URI and return Optional<KBObject>
 * @param aProject
 * @param aIdentifier
 * @return
 */
public Optional<KBObject> readKBIdentifier(Project aProject,String aIdentifier){
  for (  KnowledgeBase kb : kbService.getKnowledgeBases(aProject)) {
    try (RepositoryConnection conn=kbService.getConnection(kb)){
      ValueFactory vf=conn.getValueFactory();
      RepositoryResult<Statement> stmts=RdfUtils.getStatements(conn,vf.createIRI(aIdentifier),kb.getTypeIri(),kb.getClassIri(),true);
      if (stmts.hasNext()) {
        Statement conceptStmt=stmts.next();
        KBConcept kbConcept=KBConcept.read(conn,conceptStmt);
        if (kbConcept != null) {
          return Optional.of(kbConcept);
        }
      }
 else       if (!stmts.hasNext()) {
        Optional<KBInstance> kbInstance=kbService.readInstance(kb,aIdentifier);
        if (kbInstance.isPresent()) {
          return kbInstance.flatMap((p) -> Optional.of(p));
        }
      }
    }
 catch (    QueryEvaluationException e) {
      log.error(""String_Node_Str"",e);
      return Optional.empty();
    }
  }
  return Optional.empty();
}"
63058,"/** 
 * Takes in IRI for identifier and returns teh label String Eg: InputParameter :- http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#RoseDAnjou Returned :- ""KBConcept""+MtasToken.DELIMITER+RoseDAnjou
 * @param iri
 * @return
 */
public String getUILabel(String aIRI){
  StringBuilder labelStr=new StringBuilder();
  Optional<KBObject> kbObject=kbUtil.readKBIdentifier(project,aIRI);
  if (kbObject.isPresent()) {
    labelStr.append(kbObject.get().getClass().getSimpleName() + MtasToken.DELIMITER + kbObject.get().getUiLabel());
  }
 else {
    return labelStr.toString();
  }
  return labelStr.toString();
}","/** 
 * Takes in IRI for identifier and returns teh label String Eg: InputParameter :- http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#RoseDAnjou Returned :- ""KBConcept""+MtasToken.DELIMITER+RoseDAnjou
 * @param iri
 * @return
 */
public String getUILabel(String aIRI){
  StringBuilder labelStr=new StringBuilder();
  System.out.println();
  Optional<KBObject> kbObject=kbUtil.readKBIdentifier(project,aIRI);
  if (kbObject.isPresent()) {
    labelStr.append(kbObject.get().getClass().getSimpleName() + MtasToken.DELIMITER + kbObject.get().getUiLabel());
  }
 else {
    return labelStr.toString();
  }
  return labelStr.toString();
}"
63059,"/** 
 * @param inputData All sentences to predict annotations for.
 * @param < T >
 * @return Predicted sentence.Outer list: Represents a document Middle list: Represents a sentence Inner list: Represents a token (predictions for each token)
 */
@Override public <T extends TokenObject>List<List<List<AnnotationObject>>> predictSentences(List<List<T>> inputData){
  List<List<List<AnnotationObject>>> result=new ArrayList<>();
  for (  List<T> sentence : inputData) {
    List<List<AnnotationObject>> annotatedSentence=new ArrayList<>();
    int sentenceIndex=0;
    while (sentenceIndex < sentence.size() - 1) {
      TokenObject token=sentence.get(sentenceIndex);
      List<AnnotationObject> word;
      if (isNamedEntity(token)) {
        StringBuilder coveredText=new StringBuilder(token.getCoveredText());
        int endCharacter=token.getOffset().getEndCharacter();
        int endToken=token.getOffset().getEndToken();
        TokenObject nextTokenObject=sentence.get(sentenceIndex + 1);
        while (isNamedEntity(nextTokenObject) && sentenceIndex + 1 < sentence.size() - 1) {
          coveredText.append(""String_Node_Str"").append(nextTokenObject.getCoveredText());
          endCharacter=nextTokenObject.getOffset().getEndCharacter();
          endToken=nextTokenObject.getOffset().getEndToken();
          sentenceIndex++;
          nextTokenObject=sentence.get(sentenceIndex + 1);
        }
        token.setCoveredText(coveredText.toString());
        token.setOffset(new Offset(token.getOffset().getBeginCharacter(),endCharacter,token.getOffset().getBeginToken(),endToken));
        word=predictToken(token);
        annotatedSentence.add(word);
      }
      sentenceIndex++;
    }
    result.add(annotatedSentence);
  }
  return result;
}","/** 
 * @param inputData All sentences to predict annotations for.
 * @param < T >
 * @return Predicted sentence.Outer list: Represents a document Middle list: Represents a sentence Inner list: Represents a token (predictions for each token)
 */
@Override public <T extends TokenObject>List<List<List<AnnotationObject>>> predictSentences(List<List<T>> inputData){
  List<List<List<AnnotationObject>>> result=new ArrayList<>();
  inputData.parallelStream().forEach(sentence -> {
    List<List<AnnotationObject>> annotatedSentence=new ArrayList<>();
    int sentenceIndex=0;
    while (sentenceIndex < sentence.size() - 1) {
      TokenObject token=sentence.get(sentenceIndex);
      List<AnnotationObject> word;
      if (isNamedEntity(token)) {
        StringBuilder coveredText=new StringBuilder(token.getCoveredText());
        int endCharacter=token.getOffset().getEndCharacter();
        int endToken=token.getOffset().getEndToken();
        TokenObject nextTokenObject=sentence.get(sentenceIndex + 1);
        while (isNamedEntity(nextTokenObject) && sentenceIndex + 1 < sentence.size() - 1) {
          coveredText.append(""String_Node_Str"").append(nextTokenObject.getCoveredText());
          endCharacter=nextTokenObject.getOffset().getEndCharacter();
          endToken=nextTokenObject.getOffset().getEndToken();
          sentenceIndex++;
          nextTokenObject=sentence.get(sentenceIndex + 1);
        }
        token.setCoveredText(coveredText.toString());
        token.setOffset(new Offset(token.getOffset().getBeginCharacter(),endCharacter,token.getOffset().getBeginToken(),endToken));
        word=predictToken(token);
        annotatedSentence.add(word);
      }
      sentenceIndex++;
    }
    result.add(annotatedSentence);
  }
);
  return result;
}"
63060,"private Set<CandidateEntity> generateCandidates(KnowledgeBase aKB,String aMention){
  if (aMention == null || aMention.isEmpty()) {
    return Collections.emptySet();
  }
  if (candidateCache.containsKey(aMention)) {
    return candidateCache.get(aMention);
  }
  Set<CandidateEntity> candidates=new HashSet<>();
  List<String> mentionArray=Arrays.asList(aMention.split(""String_Node_Str""));
  mentionArray=mentionArray.stream().filter(m -> !punctuations.contains(m)).collect(Collectors.toList());
  if (stopwords != null) {
    if (mentionArray.stream().allMatch(m -> stopwords.contains(m))) {
      logger.error(""String_Node_Str"",aMention);
      return Collections.emptySet();
    }
  }
  if (mentionArray.isEmpty()) {
    logger.error(""String_Node_Str"");
    return Collections.emptySet();
  }
  try (RepositoryConnection conn=kbService.getConnection(aKB)){
    TupleQuery query=QueryUtil.generateCandidateQuery(conn,mentionArray,properties.getCandidateQueryLimit(),aKB.getDescriptionIri());
    try (TupleQueryResult entityResult=query.evaluate()){
      while (entityResult.hasNext()) {
        BindingSet solution=entityResult.next();
        Value e2=solution.getValue(""String_Node_Str"");
        Value label=solution.getValue(""String_Node_Str"");
        Value altLabel=solution.getValue(""String_Node_Str"");
        Value description=solution.getValue(""String_Node_Str"");
        CandidateEntity newEntity=new CandidateEntity((e2 != null) ? e2.stringValue() : ""String_Node_Str"",(label != null) ? label.stringValue() : ""String_Node_Str"",(altLabel != null) ? altLabel.stringValue() : ""String_Node_Str"",(description != null) ? description.stringValue() : ""String_Node_Str"");
        candidates.add(newEntity);
      }
    }
   }
   if (candidates.isEmpty()) {
    String[] split=aMention.split(""String_Node_Str"");
    if (split.length > 1) {
      for (      String s : split) {
        candidates.addAll(generateCandidates(aKB,s));
      }
    }
  }
  candidateCache.put(aMention,candidates);
  return candidates;
}","private Set<CandidateEntity> generateCandidates(KnowledgeBase aKB,String aMention){
  if (aMention == null || aMention.isEmpty()) {
    return Collections.emptySet();
  }
  if (candidateCache.containsKey(aMention)) {
    return candidateCache.get(aMention);
  }
  Set<CandidateEntity> candidates=new HashSet<>();
  List<String> mentionList=Arrays.asList(aMention.split(""String_Node_Str""));
  mentionList=mentionList.stream().map(m -> m.replaceAll(""String_Node_Str"",""String_Node_Str"")).collect(Collectors.toList());
  if (stopwords != null) {
    if (stopwords.containsAll(mentionList)) {
      logger.error(""String_Node_Str"",aMention);
      return Collections.emptySet();
    }
  }
  String processedMention=String.join(""String_Node_Str"",mentionList);
  if (processedMention.isEmpty()) {
    logger.error(""String_Node_Str"");
    return Collections.emptySet();
  }
  try (RepositoryConnection conn=kbService.getConnection(aKB)){
    TupleQuery query=QueryUtil.generateCandidateQuery(conn,processedMention,properties.getCandidateQueryLimit(),aKB.getDescriptionIri());
    try (TupleQueryResult entityResult=query.evaluate()){
      while (entityResult.hasNext()) {
        BindingSet solution=entityResult.next();
        Value e2=solution.getValue(""String_Node_Str"");
        Value label=solution.getValue(""String_Node_Str"");
        Value altLabel=solution.getValue(""String_Node_Str"");
        Value description=solution.getValue(""String_Node_Str"");
        CandidateEntity newEntity=new CandidateEntity((e2 != null) ? e2.stringValue() : ""String_Node_Str"",(label != null) ? label.stringValue() : ""String_Node_Str"",(altLabel != null) ? altLabel.stringValue() : ""String_Node_Str"",(description != null) ? description.stringValue() : ""String_Node_Str"");
        candidates.add(newEntity);
      }
    }
   }
 catch (  QueryEvaluationException e) {
    logger.error(""String_Node_Str"",e);
  }
  if (candidates.isEmpty()) {
    String[] split=processedMention.split(""String_Node_Str"");
    if (split.length > 1) {
      for (      String s : split) {
        candidates.addAll(generateCandidates(aKB,s));
      }
    }
  }
  candidateCache.put(processedMention,candidates);
  return candidates;
}"
63061,"/** 
 * @param tokens the words spanned by the mention
 * @param limit maximum number of results
 * @return a query to retrieve candidate entities
 */
public static TupleQuery generateCandidateQuery(RepositoryConnection conn,List<String> tokens,int limit,IRI aDescriptionIri){
  String query=String.join(""String_Node_Str"",""String_Node_Str"",SPARQL_PREFIX,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + TERMS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + STATEMENTS + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + String.join(""String_Node_Str"",WIKIMEDIA_INTERNAL,WIKIMEDIA_PROJECT_PAGE,WIKIMEDIA_CATEGORY,WIKIMEDIA_DISAMBIGUATION_PAGE,WIKIMEDIA_LIST_ARTICLE,WIKIMEDIA_TEMPLATE,WIKIMEDIA_NEWS_ARTICLE,WIKIMEDIA_NAVIGATIONAL_TEMPLATE) + ""String_Node_Str"",""String_Node_Str"" + INSTANCES + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + TERMS + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + limit);
  ValueFactory vf=SimpleValueFactory.getInstance();
  Literal tokensJoined=vf.createLiteral(String.join(""String_Node_Str"",tokens));
  TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,query);
  tupleQuery.setBinding(""String_Node_Str"",tokensJoined);
  tupleQuery.setBinding(""String_Node_Str"",aDescriptionIri);
  return tupleQuery;
}","/** 
 * @param tokens the words spanned by the mention
 * @param limit maximum number of results
 * @return a query to retrieve candidate entities
 */
public static TupleQuery generateCandidateQuery(RepositoryConnection conn,String tokens,int limit,IRI aDescriptionIri){
  String query=String.join(""String_Node_Str"",""String_Node_Str"",SPARQL_PREFIX,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + TERMS,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + STATEMENTS + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + String.join(""String_Node_Str"",WIKIMEDIA_INTERNAL,WIKIMEDIA_PROJECT_PAGE,WIKIMEDIA_CATEGORY,WIKIMEDIA_DISAMBIGUATION_PAGE,WIKIMEDIA_LIST_ARTICLE,WIKIMEDIA_TEMPLATE,WIKIMEDIA_NEWS_ARTICLE,WIKIMEDIA_NAVIGATIONAL_TEMPLATE) + ""String_Node_Str"",""String_Node_Str"" + INSTANCES + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + TERMS + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + limit);
  ValueFactory vf=SimpleValueFactory.getInstance();
  Literal tokensJoined=vf.createLiteral(String.join(""String_Node_Str"",tokens));
  TupleQuery tupleQuery=conn.prepareTupleQuery(QueryLanguage.SPARQL,query);
  tupleQuery.setBinding(""String_Node_Str"",tokensJoined);
  tupleQuery.setBinding(""String_Node_Str"",aDescriptionIri);
  return tupleQuery;
}"
63062,"/** 
 * @param inputData All sentences to predict annotations for.
 * @param < T >
 * @return Predicted sentence.Outer list: Represents a document Middle list: Represents a sentence Inner list: Represents a token (predictions for each token)
 */
@Override public <T extends TokenObject>List<List<List<AnnotationObject>>> predictSentences(List<List<T>> inputData){
  List<List<List<AnnotationObject>>> result=new ArrayList<>();
  for (  List<T> sentence : inputData) {
    List<List<AnnotationObject>> annotatedSentence=new ArrayList<>();
    int sentenceIndex=0;
    while (sentenceIndex < sentence.size() - 1) {
      TokenObject token=sentence.get(sentenceIndex);
      List<AnnotationObject> word;
      if (isNamedEntity(token)) {
        StringBuilder coveredText=new StringBuilder(token.getCoveredText());
        int endCharacter=token.getOffset().getEndCharacter();
        int endToken=token.getOffset().getEndToken();
        TokenObject nextTokenObject=sentence.get(sentenceIndex + 1);
        while (isNamedEntity(nextTokenObject)) {
          coveredText.append(""String_Node_Str"").append(nextTokenObject.getCoveredText());
          endCharacter=nextTokenObject.getOffset().getEndCharacter();
          endToken=nextTokenObject.getOffset().getEndToken();
          sentenceIndex++;
          nextTokenObject=sentence.get(sentenceIndex + 1);
        }
        token.setCoveredText(coveredText.toString());
        token.setOffset(new Offset(token.getOffset().getBeginCharacter(),endCharacter,token.getOffset().getBeginToken(),endToken));
        word=predictToken(token);
        annotatedSentence.add(word);
      }
      sentenceIndex++;
    }
    result.add(annotatedSentence);
  }
  return result;
}","/** 
 * @param inputData All sentences to predict annotations for.
 * @param < T >
 * @return Predicted sentence.Outer list: Represents a document Middle list: Represents a sentence Inner list: Represents a token (predictions for each token)
 */
@Override public <T extends TokenObject>List<List<List<AnnotationObject>>> predictSentences(List<List<T>> inputData){
  List<List<List<AnnotationObject>>> result=new ArrayList<>();
  for (  List<T> sentence : inputData) {
    List<List<AnnotationObject>> annotatedSentence=new ArrayList<>();
    int sentenceIndex=0;
    while (sentenceIndex < sentence.size() - 1) {
      TokenObject token=sentence.get(sentenceIndex);
      List<AnnotationObject> word;
      if (isNamedEntity(token)) {
        StringBuilder coveredText=new StringBuilder(token.getCoveredText());
        int endCharacter=token.getOffset().getEndCharacter();
        int endToken=token.getOffset().getEndToken();
        TokenObject nextTokenObject=sentence.get(sentenceIndex + 1);
        while (isNamedEntity(nextTokenObject) && sentenceIndex + 1 < sentence.size() - 1) {
          coveredText.append(""String_Node_Str"").append(nextTokenObject.getCoveredText());
          endCharacter=nextTokenObject.getOffset().getEndCharacter();
          endToken=nextTokenObject.getOffset().getEndToken();
          sentenceIndex++;
          nextTokenObject=sentence.get(sentenceIndex + 1);
        }
        token.setCoveredText(coveredText.toString());
        token.setOffset(new Offset(token.getOffset().getBeginCharacter(),endCharacter,token.getOffset().getBeginToken(),endToken));
        word=predictToken(token);
        annotatedSentence.add(word);
      }
      sentenceIndex++;
    }
    result.add(annotatedSentence);
  }
  return result;
}"
63063,"/** 
 * Add annotations from the CAS, which is controlled by the window size, to the VDocument  {@link VDocument}
 * @param aJcas The JCAS object containing annotations
 * @param vdoc A VDocument containing annotations for the given layer
 * @param aState Data model for brat annotations
 * @param aColoringStrategy the coloring strategy to render this layer
 */
@Override public void render(JCas aJcas,VDocument vdoc,AnnotatorState aState,ColoringStrategy aColoringStrategy,AnnotationLayer layer,RecommendationService recommendationService,LearningRecordService learningRecordService,AnnotationSchemaService aAnnotationService,FeatureSupportRegistry aFsRegistry){
  if (aJcas == null || recommendationService == null) {
    return;
  }
  int windowBegin=aState.getWindowBeginOffset();
  int windowEnd=aState.getWindowEndOffset();
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  if (model == null) {
    return;
  }
  List<List<AnnotationObject>> recommendations=model.getPredictions(DocumentMetaData.get(aJcas).getDocumentTitle(),layer,windowBegin,windowEnd,aJcas,false);
  String color=aColoringStrategy.getColor(null,null);
  String bratTypeName=TypeUtil.getUiTypeName(typeAdapter);
  List<VSpan> vspansWithoutRecommendations=new ArrayList<>(vdoc.spans(layer.getId()));
  List<LearningRecord> recordedAnnotations=learningRecordService.getAllRecordsByDocumentAndUserAndLayer(aState.getDocument(),aState.getUser().getUsername(),layer);
  for (  List<AnnotationObject> token : recommendations) {
    Map<String,Map<Long,AnnotationObject>> labelMap=new HashMap<>();
    for (    AnnotationObject ao : token) {
      if (ao.getAnnotation() != null) {
        if (isOverlapping(vspansWithoutRecommendations,ao.getOffset(),windowBegin,ao.getFeature())) {
          break;
        }
        if (isRejected(recordedAnnotations,ao)) {
          continue;
        }
        if (!labelMap.containsKey(ao.getAnnotation()) || !labelMap.get(ao.getAnnotation()).containsKey(ao.getRecommenderId()) || labelMap.get(ao.getAnnotation()).get(ao.getRecommenderId()).getConfidence() < ao.getConfidence()) {
          Map<Long,AnnotationObject> confidencePerClassifier;
          if (labelMap.get(ao.getAnnotation()) == null) {
            confidencePerClassifier=new HashMap<>();
          }
 else {
            confidencePerClassifier=labelMap.get(ao.getAnnotation());
          }
          confidencePerClassifier.put(ao.getRecommenderId(),ao);
          labelMap.put(ao.getAnnotation(),confidencePerClassifier);
        }
      }
    }
    Map<String,Double> maxConfidencePerLabel=new HashMap<>();
    for (    String label : labelMap.keySet()) {
      double maxConfidence=0;
      for (      Entry<Long,AnnotationObject> classifier : labelMap.get(label).entrySet()) {
        if (classifier.getValue().getConfidence() > maxConfidence) {
          maxConfidence=classifier.getValue().getConfidence();
        }
      }
      maxConfidencePerLabel.put(label,maxConfidence);
    }
    List<String> filtered=maxConfidencePerLabel.entrySet().stream().sorted((e1,e2) -> Double.compare(e2.getValue(),e1.getValue())).limit(recommendationService.getMaxSuggestions(aState.getUser())).map(Entry::getKey).collect(Collectors.toList());
    for (    String label : labelMap.keySet()) {
      if (!filtered.contains(label)) {
        continue;
      }
      AnnotationObject prediction=token.stream().filter(p -> p.getAnnotation().equals(label)).max(Comparator.comparingInt(TokenObject::getId)).orElse(null);
      if (prediction == null) {
        continue;
      }
      VID vid=new VID(RecommendationEditorExtension.BEAN_NAME,layer.getId(),(int)prediction.getRecommenderId(),prediction.getId(),VID.NONE,VID.NONE);
      boolean first=true;
      Map<Long,AnnotationObject> confidencePerClassifier=labelMap.get(label);
      for (      Long recommenderId : confidencePerClassifier.keySet()) {
        AnnotationObject ao=confidencePerClassifier.get(recommenderId);
        if (first) {
          AnnotationFeature feature=aAnnotationService.getFeature(ao.getFeature(),layer);
          String annotation=aFsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,ao.getAnnotation());
          Map<String,String> featureAnnotation=new HashMap<>();
          featureAnnotation.put(ao.getFeature(),annotation);
          VSpan v=new VSpan(layer,vid,bratTypeName,new VRange(ao.getOffset().getBeginCharacter() - windowBegin,ao.getOffset().getEndCharacter() - windowBegin),featureAnnotation,Collections.emptyMap(),color);
          vdoc.add(v);
          first=false;
        }
        vdoc.add(new VComment(vid,VCommentType.INFO,ao.getClassifier()));
        if (ao.getConfidence() != -1) {
          vdoc.add(new VComment(vid,VCommentType.INFO,String.format(""String_Node_Str"",ao.getConfidence())));
        }
        if (ao.getDescription() != null && !ao.getDescription().isEmpty()) {
          vdoc.add(new VComment(vid,VCommentType.INFO,""String_Node_Str"" + ao.getDescription()));
        }
      }
    }
  }
}","/** 
 * Add annotations from the CAS, which is controlled by the window size, to the VDocument  {@link VDocument}
 * @param aJcas The JCAS object containing annotations
 * @param vdoc A VDocument containing annotations for the given layer
 * @param aState Data model for brat annotations
 * @param aColoringStrategy the coloring strategy to render this layer
 */
@Override public void render(JCas aJcas,VDocument vdoc,AnnotatorState aState,ColoringStrategy aColoringStrategy,AnnotationLayer layer,RecommendationService recommendationService,LearningRecordService learningRecordService,AnnotationSchemaService aAnnotationService,FeatureSupportRegistry aFsRegistry){
  if (aJcas == null || recommendationService == null) {
    return;
  }
  int windowBegin=aState.getWindowBeginOffset();
  int windowEnd=aState.getWindowEndOffset();
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  if (model == null) {
    return;
  }
  List<List<AnnotationObject>> recommendations=model.getPredictions(DocumentMetaData.get(aJcas).getDocumentTitle(),layer,windowBegin,windowEnd,aJcas,false);
  String color=aColoringStrategy.getColor(null,null);
  String bratTypeName=TypeUtil.getUiTypeName(typeAdapter);
  List<VSpan> vspansWithoutRecommendations=new ArrayList<>(vdoc.spans(layer.getId()));
  List<LearningRecord> recordedAnnotations=learningRecordService.getAllRecordsByDocumentAndUserAndLayer(aState.getDocument(),aState.getUser().getUsername(),layer);
  for (  List<AnnotationObject> token : recommendations) {
    Map<String,Map<Long,AnnotationObject>> labelMap=new HashMap<>();
    for (    AnnotationObject ao : token) {
      boolean hasNoAnnotation=ao.getAnnotation() == null;
      boolean isOverlappingForFeature=isOverlappingForFeature(vspansWithoutRecommendations,ao.getOffset(),windowBegin,ao.getFeature());
      boolean isRejected=isRejected(recordedAnnotations,ao);
      if (hasNoAnnotation || isOverlappingForFeature || isRejected) {
        continue;
      }
      if (!labelMap.containsKey(ao.getAnnotation()) || !labelMap.get(ao.getAnnotation()).containsKey(ao.getRecommenderId()) || labelMap.get(ao.getAnnotation()).get(ao.getRecommenderId()).getConfidence() < ao.getConfidence()) {
        Map<Long,AnnotationObject> confidencePerClassifier;
        if (labelMap.get(ao.getAnnotation()) == null) {
          confidencePerClassifier=new HashMap<>();
        }
 else {
          confidencePerClassifier=labelMap.get(ao.getAnnotation());
        }
        confidencePerClassifier.put(ao.getRecommenderId(),ao);
        labelMap.put(ao.getAnnotation(),confidencePerClassifier);
      }
    }
    Map<String,Double> maxConfidencePerLabel=new HashMap<>();
    for (    String label : labelMap.keySet()) {
      double maxConfidence=0;
      for (      Entry<Long,AnnotationObject> classifier : labelMap.get(label).entrySet()) {
        if (classifier.getValue().getConfidence() > maxConfidence) {
          maxConfidence=classifier.getValue().getConfidence();
        }
      }
      maxConfidencePerLabel.put(label,maxConfidence);
    }
    List<String> filtered=maxConfidencePerLabel.entrySet().stream().sorted((e1,e2) -> Double.compare(e2.getValue(),e1.getValue())).limit(recommendationService.getMaxSuggestions(aState.getUser())).map(Entry::getKey).collect(Collectors.toList());
    for (    String label : labelMap.keySet()) {
      if (!filtered.contains(label)) {
        continue;
      }
      AnnotationObject prediction=token.stream().filter(p -> p.getAnnotation().equals(label)).max(Comparator.comparingInt(TokenObject::getId)).orElse(null);
      if (prediction == null) {
        continue;
      }
      VID vid=new VID(RecommendationEditorExtension.BEAN_NAME,layer.getId(),(int)prediction.getRecommenderId(),prediction.getId(),VID.NONE,VID.NONE);
      boolean first=true;
      Map<Long,AnnotationObject> confidencePerClassifier=labelMap.get(label);
      for (      Long recommenderId : confidencePerClassifier.keySet()) {
        AnnotationObject ao=confidencePerClassifier.get(recommenderId);
        if (first) {
          AnnotationFeature feature=aAnnotationService.getFeature(ao.getFeature(),layer);
          String annotation=aFsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,ao.getAnnotation());
          Map<String,String> featureAnnotation=new HashMap<>();
          featureAnnotation.put(ao.getFeature(),annotation);
          VSpan v=new VSpan(layer,vid,bratTypeName,new VRange(ao.getOffset().getBeginCharacter() - windowBegin,ao.getOffset().getEndCharacter() - windowBegin),featureAnnotation,Collections.emptyMap(),color);
          vdoc.add(v);
          first=false;
        }
        vdoc.add(new VComment(vid,VCommentType.INFO,ao.getClassifier()));
        if (ao.getConfidence() != -1) {
          vdoc.add(new VComment(vid,VCommentType.INFO,String.format(""String_Node_Str"",ao.getConfidence())));
        }
        if (ao.getDescription() != null && !ao.getDescription().isEmpty()) {
          vdoc.add(new VComment(vid,VCommentType.INFO,""String_Node_Str"" + ao.getDescription()));
        }
      }
    }
  }
}"
63064,"/** 
 * @param inputData All sentences to predict annotations for.
 * @param < T >
 * @return Predicted sentence.Outer list: Represents a document Middle list: Represents a sentence Inner list: Represents a token (predictions for each token)
 */
@Override public <T extends TokenObject>List<List<List<AnnotationObject>>> predictSentences(List<List<T>> inputData){
  List<List<List<AnnotationObject>>> result=new ArrayList<>();
  for (  List<T> sentence : inputData) {
    List<List<AnnotationObject>> annotatedSentence=new ArrayList<>();
    int sentenceIndex=0;
    while (sentenceIndex < sentence.size() - 1) {
      TokenObject token=sentence.get(sentenceIndex);
      List<AnnotationObject> word;
      if (isNamedEntity(token)) {
        StringBuilder coveredText=new StringBuilder(token.getCoveredText());
        int endCharacter=token.getOffset().getEndCharacter();
        int endToken=token.getOffset().getEndToken();
        TokenObject nextTokenObject=sentence.get(sentenceIndex + 1);
        while (isNamedEntity(nextTokenObject)) {
          coveredText.append(""String_Node_Str"").append(nextTokenObject.getCoveredText());
          endCharacter=nextTokenObject.getOffset().getEndCharacter();
          endToken=nextTokenObject.getOffset().getEndToken();
          sentenceIndex++;
          nextTokenObject=sentence.get(sentenceIndex + 1);
        }
        token.setCoveredText(coveredText.toString());
        token.setOffset(new Offset(token.getOffset().getBeginCharacter(),endCharacter,token.getOffset().getBeginToken(),endToken));
        word=predictToken(token);
        annotatedSentence.add(word);
      }
      sentenceIndex++;
    }
    result.add(annotatedSentence);
  }
  return result;
}","/** 
 * @param inputData All sentences to predict annotations for.
 * @param < T >
 * @return Predicted sentence.Outer list: Represents a document Middle list: Represents a sentence Inner list: Represents a token (predictions for each token)
 */
@Override public <T extends TokenObject>List<List<List<AnnotationObject>>> predictSentences(List<List<T>> inputData){
  List<List<List<AnnotationObject>>> result=new ArrayList<>();
  for (  List<T> sentence : inputData) {
    List<List<AnnotationObject>> annotatedSentence=new ArrayList<>();
    int sentenceIndex=0;
    while (sentenceIndex < sentence.size() - 1) {
      TokenObject token=sentence.get(sentenceIndex);
      List<AnnotationObject> word;
      if (isNamedEntity(token)) {
        StringBuilder coveredText=new StringBuilder(token.getCoveredText());
        int endCharacter=token.getOffset().getEndCharacter();
        int endToken=token.getOffset().getEndToken();
        TokenObject nextTokenObject=sentence.get(sentenceIndex + 1);
        while (isNamedEntity(nextTokenObject) && sentenceIndex + 1 < sentence.size() - 1) {
          coveredText.append(""String_Node_Str"").append(nextTokenObject.getCoveredText());
          endCharacter=nextTokenObject.getOffset().getEndCharacter();
          endToken=nextTokenObject.getOffset().getEndToken();
          sentenceIndex++;
          nextTokenObject=sentence.get(sentenceIndex + 1);
        }
        token.setCoveredText(coveredText.toString());
        token.setOffset(new Offset(token.getOffset().getBeginCharacter(),endCharacter,token.getOffset().getBeginToken(),endToken));
        word=predictToken(token);
        annotatedSentence.add(word);
      }
      sentenceIndex++;
    }
    result.add(annotatedSentence);
  }
  return result;
}"
63065,"/** 
 * Add annotations from the CAS, which is controlled by the window size, to the VDocument  {@link VDocument}
 * @param aJcas The JCAS object containing annotations
 * @param vdoc A VDocument containing annotations for the given layer
 * @param aState Data model for brat annotations
 * @param aColoringStrategy the coloring strategy to render this layer
 */
@Override public void render(JCas aJcas,VDocument vdoc,AnnotatorState aState,ColoringStrategy aColoringStrategy,AnnotationLayer layer,RecommendationService recommendationService,LearningRecordService learningRecordService,AnnotationSchemaService aAnnotationService,FeatureSupportRegistry aFsRegistry){
  if (aJcas == null || recommendationService == null) {
    return;
  }
  int windowBegin=aState.getWindowBeginOffset();
  int windowEnd=aState.getWindowEndOffset();
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  if (model == null) {
    return;
  }
  List<List<AnnotationObject>> recommendations=model.getPredictions(DocumentMetaData.get(aJcas).getDocumentTitle(),layer,windowBegin,windowEnd,aJcas,false);
  String color=aColoringStrategy.getColor(null,null);
  String bratTypeName=TypeUtil.getUiTypeName(typeAdapter);
  List<VSpan> vspansWithoutRecommendations=new ArrayList<>(vdoc.spans(layer.getId()));
  List<LearningRecord> recordedAnnotations=learningRecordService.getAllRecordsByDocumentAndUserAndLayer(aState.getDocument(),aState.getUser().getUsername(),layer);
  for (  List<AnnotationObject> token : recommendations) {
    Map<String,Map<Long,AnnotationObject>> labelMap=new HashMap<>();
    for (    AnnotationObject ao : token) {
      if (ao.getAnnotation() != null) {
        if (isOverlapping(vspansWithoutRecommendations,ao.getOffset(),windowBegin,ao.getFeature())) {
          break;
        }
        if (isRejected(recordedAnnotations,ao)) {
          continue;
        }
        if (!labelMap.containsKey(ao.getAnnotation()) || !labelMap.get(ao.getAnnotation()).containsKey(ao.getRecommenderId()) || labelMap.get(ao.getAnnotation()).get(ao.getRecommenderId()).getConfidence() < ao.getConfidence()) {
          Map<Long,AnnotationObject> confidencePerClassifier;
          if (labelMap.get(ao.getAnnotation()) == null) {
            confidencePerClassifier=new HashMap<>();
          }
 else {
            confidencePerClassifier=labelMap.get(ao.getAnnotation());
          }
          confidencePerClassifier.put(ao.getRecommenderId(),ao);
          labelMap.put(ao.getAnnotation(),confidencePerClassifier);
        }
      }
    }
    Map<String,Double> maxConfidencePerLabel=new HashMap<>();
    for (    String label : labelMap.keySet()) {
      double maxConfidence=0;
      for (      Entry<Long,AnnotationObject> classifier : labelMap.get(label).entrySet()) {
        if (classifier.getValue().getConfidence() > maxConfidence) {
          maxConfidence=classifier.getValue().getConfidence();
        }
      }
      maxConfidencePerLabel.put(label,maxConfidence);
    }
    List<String> filtered=maxConfidencePerLabel.entrySet().stream().sorted((e1,e2) -> Double.compare(e2.getValue(),e1.getValue())).limit(recommendationService.getMaxSuggestions(aState.getUser())).map(Entry::getKey).collect(Collectors.toList());
    for (    String label : labelMap.keySet()) {
      if (!filtered.contains(label)) {
        continue;
      }
      AnnotationObject prediction=token.stream().filter(p -> p.getAnnotation().equals(label)).max(Comparator.comparingInt(TokenObject::getId)).orElse(null);
      if (prediction == null) {
        continue;
      }
      VID vid=new VID(RecommendationEditorExtension.BEAN_NAME,layer.getId(),(int)prediction.getRecommenderId(),prediction.getId(),VID.NONE,VID.NONE);
      boolean first=true;
      Map<Long,AnnotationObject> confidencePerClassifier=labelMap.get(label);
      for (      Long recommenderId : confidencePerClassifier.keySet()) {
        AnnotationObject ao=confidencePerClassifier.get(recommenderId);
        if (first) {
          AnnotationFeature feature=aAnnotationService.getFeature(ao.getFeature(),layer);
          String annotation=aFsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,ao.getAnnotation());
          Map<String,String> featureAnnotation=new HashMap<>();
          featureAnnotation.put(ao.getFeature(),annotation);
          VSpan v=new VSpan(layer,vid,bratTypeName,new VRange(ao.getOffset().getBeginCharacter() - windowBegin,ao.getOffset().getEndCharacter() - windowBegin),featureAnnotation,Collections.emptyMap(),color);
          vdoc.add(v);
          first=false;
        }
        vdoc.add(new VComment(vid,VCommentType.INFO,ao.getClassifier()));
        if (ao.getConfidence() != -1) {
          vdoc.add(new VComment(vid,VCommentType.INFO,String.format(""String_Node_Str"",ao.getConfidence())));
        }
        if (ao.getDescription() != null && !ao.getDescription().isEmpty()) {
          vdoc.add(new VComment(vid,VCommentType.INFO,""String_Node_Str"" + ao.getDescription()));
        }
      }
    }
  }
}","/** 
 * Add annotations from the CAS, which is controlled by the window size, to the VDocument  {@link VDocument}
 * @param aJcas The JCAS object containing annotations
 * @param vdoc A VDocument containing annotations for the given layer
 * @param aState Data model for brat annotations
 * @param aColoringStrategy the coloring strategy to render this layer
 */
@Override public void render(JCas aJcas,VDocument vdoc,AnnotatorState aState,ColoringStrategy aColoringStrategy,AnnotationLayer layer,RecommendationService recommendationService,LearningRecordService learningRecordService,AnnotationSchemaService aAnnotationService,FeatureSupportRegistry aFsRegistry){
  if (aJcas == null || recommendationService == null) {
    return;
  }
  int windowBegin=aState.getWindowBeginOffset();
  int windowEnd=aState.getWindowEndOffset();
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  if (model == null) {
    return;
  }
  List<List<AnnotationObject>> recommendations=model.getPredictions(DocumentMetaData.get(aJcas).getDocumentTitle(),layer,windowBegin,windowEnd,aJcas,false);
  String color=aColoringStrategy.getColor(null,null);
  String bratTypeName=TypeUtil.getUiTypeName(typeAdapter);
  List<VSpan> vspansWithoutRecommendations=new ArrayList<>(vdoc.spans(layer.getId()));
  List<LearningRecord> recordedAnnotations=learningRecordService.getAllRecordsByDocumentAndUserAndLayer(aState.getDocument(),aState.getUser().getUsername(),layer);
  for (  List<AnnotationObject> token : recommendations) {
    Map<String,Map<Long,AnnotationObject>> labelMap=new HashMap<>();
    for (    AnnotationObject ao : token) {
      boolean hasNoAnnotation=ao.getAnnotation() == null;
      boolean isOverlappingForFeature=isOverlappingForFeature(vspansWithoutRecommendations,ao.getOffset(),windowBegin,ao.getFeature());
      boolean isRejected=isRejected(recordedAnnotations,ao);
      if (hasNoAnnotation || isOverlappingForFeature || isRejected) {
        continue;
      }
      if (!labelMap.containsKey(ao.getAnnotation()) || !labelMap.get(ao.getAnnotation()).containsKey(ao.getRecommenderId()) || labelMap.get(ao.getAnnotation()).get(ao.getRecommenderId()).getConfidence() < ao.getConfidence()) {
        Map<Long,AnnotationObject> confidencePerClassifier;
        if (labelMap.get(ao.getAnnotation()) == null) {
          confidencePerClassifier=new HashMap<>();
        }
 else {
          confidencePerClassifier=labelMap.get(ao.getAnnotation());
        }
        confidencePerClassifier.put(ao.getRecommenderId(),ao);
        labelMap.put(ao.getAnnotation(),confidencePerClassifier);
      }
    }
    Map<String,Double> maxConfidencePerLabel=new HashMap<>();
    for (    String label : labelMap.keySet()) {
      double maxConfidence=0;
      for (      Entry<Long,AnnotationObject> classifier : labelMap.get(label).entrySet()) {
        if (classifier.getValue().getConfidence() > maxConfidence) {
          maxConfidence=classifier.getValue().getConfidence();
        }
      }
      maxConfidencePerLabel.put(label,maxConfidence);
    }
    List<String> filtered=maxConfidencePerLabel.entrySet().stream().sorted((e1,e2) -> Double.compare(e2.getValue(),e1.getValue())).limit(recommendationService.getMaxSuggestions(aState.getUser())).map(Entry::getKey).collect(Collectors.toList());
    for (    String label : labelMap.keySet()) {
      if (!filtered.contains(label)) {
        continue;
      }
      AnnotationObject prediction=token.stream().filter(p -> p.getAnnotation().equals(label)).max(Comparator.comparingInt(TokenObject::getId)).orElse(null);
      if (prediction == null) {
        continue;
      }
      VID vid=new VID(RecommendationEditorExtension.BEAN_NAME,layer.getId(),(int)prediction.getRecommenderId(),prediction.getId(),VID.NONE,VID.NONE);
      boolean first=true;
      Map<Long,AnnotationObject> confidencePerClassifier=labelMap.get(label);
      for (      Long recommenderId : confidencePerClassifier.keySet()) {
        AnnotationObject ao=confidencePerClassifier.get(recommenderId);
        if (first) {
          AnnotationFeature feature=aAnnotationService.getFeature(ao.getFeature(),layer);
          String annotation=aFsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,ao.getAnnotation());
          Map<String,String> featureAnnotation=new HashMap<>();
          featureAnnotation.put(ao.getFeature(),annotation);
          VSpan v=new VSpan(layer,vid,bratTypeName,new VRange(ao.getOffset().getBeginCharacter() - windowBegin,ao.getOffset().getEndCharacter() - windowBegin),featureAnnotation,Collections.emptyMap(),color);
          vdoc.add(v);
          first=false;
        }
        vdoc.add(new VComment(vid,VCommentType.INFO,ao.getClassifier()));
        if (ao.getConfidence() != -1) {
          vdoc.add(new VComment(vid,VCommentType.INFO,String.format(""String_Node_Str"",ao.getConfidence())));
        }
        if (ao.getDescription() != null && !ao.getDescription().isEmpty()) {
          vdoc.add(new VComment(vid,VCommentType.INFO,""String_Node_Str"" + ao.getDescription()));
        }
      }
    }
  }
}"
63066,"@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteConcept(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null));
}","@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteConcept(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null,true));
}"
63067,"/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null));
  }
 else {
    aTarget.add(this);
  }
}","/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null,true));
  }
 else {
    aTarget.add(this);
  }
}"
63068,"/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null));
  }
 else {
    aTarget.add(this);
  }
}","/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null,true));
  }
 else {
    aTarget.add(this);
  }
}"
63069,"@OnEvent public void actionPropertySelectionChanged(AjaxPropertySelectionEvent event){
  selectedConceptHandle.setObject(null);
  selectedPropertyHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedPropertyHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    String identifier=selectedPropertyHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readProperty(kbModel.getObject(),identifier).<Component>map(selectedProperty -> {
        Model<KBProperty> model=Model.of(selectedProperty);
        return new PropertyPanel(DETAILS_MARKUP_ID,kbModel,selectedPropertyHandle,model);
      }
).orElse(new EmptyPanel(DETAILS_MARKUP_ID));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  event.getTarget().add(conceptTreePanel,propertyListPanel,detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}","@OnEvent public void actionPropertySelectionChanged(AjaxPropertySelectionEvent event){
  selectedConceptHandle.setObject(null);
  selectedPropertyHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedPropertyHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    String identifier=selectedPropertyHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readProperty(kbModel.getObject(),identifier).<Component>map(selectedProperty -> {
        Model<KBProperty> model=Model.of(selectedProperty);
        return new PropertyPanel(DETAILS_MARKUP_ID,kbModel,selectedPropertyHandle,model);
      }
).orElse(new EmptyPanel(DETAILS_MARKUP_ID));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  if (event.isRedrawConceptandPropertyListPanels()) {
    event.getTarget().add(propertyListPanel,conceptTreePanel);
  }
  event.getTarget().add(detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}"
63070,"@OnEvent public void actionConceptSelectionChanged(AjaxConceptSelectionEvent event){
  selectedPropertyHandle.setObject(null);
  selectedConceptHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedConceptHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    try {
      KBConcept selectedConcept=kbService.readConcept(kbModel.getObject(),selectedConceptHandle.getObject().getIdentifier()).get();
      replacementPanel=new ConceptInstancePanel(DETAILS_MARKUP_ID,kbModel,selectedConceptHandle,Model.of(selectedConcept));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  event.getTarget().add(conceptTreePanel,propertyListPanel,detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}","@OnEvent public void actionConceptSelectionChanged(AjaxConceptSelectionEvent event){
  selectedPropertyHandle.setObject(null);
  selectedConceptHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedConceptHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    try {
      KBConcept selectedConcept=kbService.readConcept(kbModel.getObject(),selectedConceptHandle.getObject().getIdentifier()).get();
      replacementPanel=new ConceptInstancePanel(DETAILS_MARKUP_ID,kbModel,selectedConceptHandle,Model.of(selectedConcept));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  if (event.isRedrawConceptandPropertyListPanels()) {
    event.getTarget().add(conceptTreePanel,propertyListPanel);
  }
  event.getTarget().add(detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}"
63071,"/** 
 * If the user disabled ""show all"" but a property from an implicit namespace was selected, the property selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllProperties && selectedProperty.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedProperty.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null));
  }
 else {
    aTarget.add(this);
  }
}","/** 
 * If the user disabled ""show all"" but a property from an implicit namespace was selected, the property selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllProperties && selectedProperty.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedProperty.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null,true));
  }
 else {
    aTarget.add(this);
  }
}"
63072,"@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteProperty(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null));
}","@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteProperty(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null,true));
}"
63073,"public AjaxConceptSelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection){
  super(aTarget,newSelection);
}","public AjaxConceptSelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection,boolean aRedrawConceptandPropertyListPanels){
  super(aTarget,newSelection);
  redrawConceptandPropertyListPanels=aRedrawConceptandPropertyListPanels;
}"
63074,"public AjaxPropertySelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection){
  super(aTarget,newSelection);
}","public AjaxPropertySelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection,boolean aRedrawConceptandPropertyListPanels){
  super(aTarget,newSelection);
  redrawConceptandPropertyListPanels=aRedrawConceptandPropertyListPanels;
}"
63075,"private void actionPropertyLinkClicked(AjaxRequestTarget target){
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(target,groupModel.getObject().getProperty()));
}","private void actionPropertyLinkClicked(AjaxRequestTarget target){
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(target,groupModel.getObject().getProperty(),true));
}"
63076,"@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteConcept(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null));
}","@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteConcept(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null,true));
}"
63077,"/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null));
  }
 else {
    aTarget.add(this);
  }
}","/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null,true));
  }
 else {
    aTarget.add(this);
  }
}"
63078,"/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null));
  }
 else {
    aTarget.add(this);
  }
}","/** 
 * If the user disabled ""show all"" but a concept from an implicit namespace was selected, the concept selection is cancelled. In any other case this component is merely updated via AJAX.
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllConcepts && selectedConcept.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedConcept.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxConceptSelectionEvent(aTarget,null,true));
  }
 else {
    aTarget.add(this);
  }
}"
63079,"@OnEvent public void actionPropertySelectionChanged(AjaxPropertySelectionEvent event){
  selectedConceptHandle.setObject(null);
  selectedPropertyHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedPropertyHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    String identifier=selectedPropertyHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readProperty(kbModel.getObject(),identifier).<Component>map(selectedProperty -> {
        Model<KBProperty> model=Model.of(selectedProperty);
        return new PropertyPanel(DETAILS_MARKUP_ID,kbModel,selectedPropertyHandle,model);
      }
).orElse(new EmptyPanel(DETAILS_MARKUP_ID));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  event.getTarget().add(conceptTreePanel,propertyListPanel,detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}","@OnEvent public void actionPropertySelectionChanged(AjaxPropertySelectionEvent event){
  selectedConceptHandle.setObject(null);
  selectedPropertyHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedPropertyHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    String identifier=selectedPropertyHandle.getObject().getIdentifier();
    try {
      replacementPanel=kbService.readProperty(kbModel.getObject(),identifier).<Component>map(selectedProperty -> {
        Model<KBProperty> model=Model.of(selectedProperty);
        return new PropertyPanel(DETAILS_MARKUP_ID,kbModel,selectedPropertyHandle,model);
      }
).orElse(new EmptyPanel(DETAILS_MARKUP_ID));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  if (event.isRedrawConceptandPropertyListPanels()) {
    event.getTarget().add(propertyListPanel,conceptTreePanel);
  }
  event.getTarget().add(detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}"
63080,"@OnEvent public void actionConceptSelectionChanged(AjaxConceptSelectionEvent event){
  selectedPropertyHandle.setObject(null);
  selectedConceptHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedConceptHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    try {
      KBConcept selectedConcept=kbService.readConcept(kbModel.getObject(),selectedConceptHandle.getObject().getIdentifier()).get();
      replacementPanel=new ConceptInstancePanel(DETAILS_MARKUP_ID,kbModel,selectedConceptHandle,Model.of(selectedConcept));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  event.getTarget().add(conceptTreePanel,propertyListPanel,detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}","@OnEvent public void actionConceptSelectionChanged(AjaxConceptSelectionEvent event){
  selectedPropertyHandle.setObject(null);
  selectedConceptHandle.setObject(event.getSelection());
  Component replacementPanel;
  if (selectedConceptHandle.getObject() == null) {
    replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
  }
 else {
    try {
      KBConcept selectedConcept=kbService.readConcept(kbModel.getObject(),selectedConceptHandle.getObject().getIdentifier()).get();
      replacementPanel=new ConceptInstancePanel(DETAILS_MARKUP_ID,kbModel,selectedConceptHandle,Model.of(selectedConcept));
    }
 catch (    QueryEvaluationException e) {
      error(""String_Node_Str"" + e.getLocalizedMessage());
      LOG.error(""String_Node_Str"",e);
      replacementPanel=new EmptyPanel(DETAILS_MARKUP_ID);
    }
  }
  details=details.replaceWith(replacementPanel);
  if (event.isRedrawConceptandPropertyListPanels()) {
    event.getTarget().add(conceptTreePanel,propertyListPanel);
  }
  event.getTarget().add(detailContainer);
  event.getTarget().addChildren(getPage(),IFeedback.class);
}"
63081,"/** 
 * If the user disabled ""show all"" but a property from an implicit namespace was selected, the property selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllProperties && selectedProperty.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedProperty.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null));
  }
 else {
    aTarget.add(this);
  }
}","/** 
 * If the user disabled ""show all"" but a property from an implicit namespace was selected, the property selection is cancelled. In any other case this component is merely updated via AJAX.
 * @param aTarget
 */
private void actionPreferenceChanged(AjaxRequestTarget aTarget){
  if (!preferences.getObject().showAllProperties && selectedProperty.getObject() != null && RdfUtils.isFromImplicitNamespace(selectedProperty.getObject())) {
    send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null,true));
  }
 else {
    aTarget.add(this);
  }
}"
63082,"@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteProperty(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null));
}","@Override protected void actionDelete(AjaxRequestTarget aTarget){
  kbService.deleteProperty(kbModel.getObject(),kbObjectModel.getObject());
  kbObjectModel.setObject(null);
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(aTarget,null,true));
}"
63083,"public AjaxConceptSelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection){
  super(aTarget,newSelection);
}","public AjaxConceptSelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection,boolean aRedrawConceptandPropertyListPanels){
  super(aTarget,newSelection);
  redrawConceptandPropertyListPanels=aRedrawConceptandPropertyListPanels;
}"
63084,"public AjaxPropertySelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection){
  super(aTarget,newSelection);
}","public AjaxPropertySelectionEvent(AjaxRequestTarget aTarget,KBHandle newSelection,boolean aRedrawConceptandPropertyListPanels){
  super(aTarget,newSelection);
  redrawConceptandPropertyListPanels=aRedrawConceptandPropertyListPanels;
}"
63085,"private void actionPropertyLinkClicked(AjaxRequestTarget target){
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(target,groupModel.getObject().getProperty()));
}","private void actionPropertyLinkClicked(AjaxRequestTarget target){
  send(getPage(),Broadcast.BREADTH,new AjaxPropertySelectionEvent(target,groupModel.getObject().getProperty(),true));
}"
63086,"@OnEvent public void onRecommendationAcceptEvent(AjaxRecommendationAcceptedEvent aEvent){
  AnnotatorState annotatorState=ActiveLearningSidebar.this.getModelObject();
  predictionModel=recommendationService.getPredictions(annotatorState.getUser(),annotatorState.getProject());
  AnnotatorState eventState=aEvent.getAnnotatorState();
  AnnotationObject acceptedRecommendation=predictionModel.getPredictionByVID(aEvent.getVid());
  LearningRecord record=new LearningRecord();
  record.setUser(eventState.getUser().getUsername());
  record.setSourceDocument(eventState.getDocument());
  record.setTokenText(acceptedRecommendation.getCoveredText());
  record.setUserAction(LearningRecordUserAction.ACCEPTED);
  record.setOffsetTokenBegin(acceptedRecommendation.getOffset().getBeginToken());
  record.setOffsetTokenEnd(acceptedRecommendation.getOffset().getEndToken());
  record.setOffsetCharacterBegin(acceptedRecommendation.getOffset().getBeginCharacter());
  record.setOffsetCharacterEnd(acceptedRecommendation.getOffset().getEndCharacter());
  record.setAnnotation(acceptedRecommendation.getAnnotation());
  record.setLayer(annotationService.getLayer(aEvent.getVid().getLayerId()));
  record.setChangeLocation(LearningRecordChangeLocation.MAIN_EDITOR);
  learningRecordService.create(record);
  if (sessionActive && currentRecommendation != null && eventState.getUser().equals(annotatorState.getUser()) && eventState.getProject().equals(annotatorState.getProject())) {
    if (acceptedRecommendation.getOffset().equals(currentRecommendation.getOffset())) {
      moveToNextRecommendation(aEvent.getTarget());
    }
    aEvent.getTarget().add(mainContainer);
  }
}","@OnEvent public void onRecommendationAcceptEvent(AjaxRecommendationAcceptedEvent aEvent){
  AnnotatorState annotatorState=ActiveLearningSidebar.this.getModelObject();
  model=recommendationService.getPredictions(annotatorState.getUser(),annotatorState.getProject());
  AnnotatorState eventState=aEvent.getAnnotatorState();
  SourceDocument document=annotatorState.getDocument();
  VID vid=aEvent.getVid();
  Optional<AnnotationObject> oRecommendation=model.getPredictionByVID(document,vid);
  if (!oRecommendation.isPresent()) {
    LOG.error(""String_Node_Str"",document,vid);
    error(""String_Node_Str"");
    aEvent.getTarget().addChildren(getPage(),IFeedback.class);
    return;
  }
  AnnotationObject acceptedRecommendation=oRecommendation.get();
  LearningRecord record=new LearningRecord();
  record.setUser(eventState.getUser().getUsername());
  record.setSourceDocument(eventState.getDocument());
  record.setTokenText(acceptedRecommendation.getCoveredText());
  record.setUserAction(LearningRecordUserAction.ACCEPTED);
  record.setOffsetTokenBegin(acceptedRecommendation.getOffset().getBeginToken());
  record.setOffsetTokenEnd(acceptedRecommendation.getOffset().getEndToken());
  record.setOffsetCharacterBegin(acceptedRecommendation.getOffset().getBeginCharacter());
  record.setOffsetCharacterEnd(acceptedRecommendation.getOffset().getEndCharacter());
  record.setAnnotation(acceptedRecommendation.getAnnotation());
  record.setLayer(annotationService.getLayer(vid.getLayerId()));
  record.setChangeLocation(LearningRecordChangeLocation.MAIN_EDITOR);
  learningRecordService.create(record);
  if (sessionActive && currentRecommendation != null && eventState.getUser().equals(annotatorState.getUser()) && eventState.getProject().equals(annotatorState.getProject())) {
    if (acceptedRecommendation.getOffset().equals(currentRecommendation.getOffset())) {
      moveToNextRecommendation(aEvent.getTarget());
    }
    aEvent.getTarget().add(mainContainer);
  }
}"
63087,"private void highlightTextAndDisplayMessage(AjaxRequestTarget aTarget,LearningRecord aRecord){
  selectedRecord=aRecord;
  vMarkerType=TEXT_MARKER;
  error(""String_Node_Str"");
  aTarget.addChildren(getPage(),IFeedback.class);
}","private void highlightTextAndDisplayMessage(AjaxRequestTarget aTarget,LearningRecord aRecord){
  selectedRecord=aRecord;
  vMarkerType=TEXT_MARKER;
  LOG.error(""String_Node_Str"");
  error(""String_Node_Str"");
  aTarget.addChildren(getPage(),IFeedback.class);
}"
63088,"@OnEvent public void onRecommendationRejectEvent(AjaxRecommendationRejectedEvent aEvent){
  AnnotatorState annotatorState=getModelObject();
  AnnotatorState eventState=aEvent.getAnnotatorState();
  predictionModel=recommendationService.getPredictions(annotatorState.getUser(),annotatorState.getProject());
  if (sessionActive && eventState.getUser().equals(annotatorState.getUser()) && eventState.getProject().equals(annotatorState.getProject())) {
    if (eventState.getDocument().equals(annotatorState.getDocument()) && aEvent.getVid().getLayerId() == selectedLayer.getObject().getId() && predictionModel.getPredictionByVID(aEvent.getVid()).equals(currentRecommendation)) {
      moveToNextRecommendation(aEvent.getTarget());
    }
    aEvent.getTarget().add(mainContainer);
  }
}","@OnEvent public void onRecommendationRejectEvent(AjaxRecommendationRejectedEvent aEvent){
  AnnotatorState annotatorState=getModelObject();
  AnnotatorState eventState=aEvent.getAnnotatorState();
  model=recommendationService.getPredictions(annotatorState.getUser(),annotatorState.getProject());
  if (sessionActive && eventState.getUser().equals(annotatorState.getUser()) && eventState.getProject().equals(annotatorState.getProject())) {
    SourceDocument document=eventState.getDocument();
    VID vid=aEvent.getVid();
    Optional<AnnotationObject> prediction=model.getPredictionByVID(document,vid);
    if (!prediction.isPresent()) {
      LOG.error(""String_Node_Str"",document,vid);
      error(""String_Node_Str"");
      return;
    }
    if (document.equals(annotatorState.getDocument()) && vid.getLayerId() == selectedLayer.getObject().getId() && prediction.get().equals(currentRecommendation)) {
      moveToNextRecommendation(aEvent.getTarget());
    }
    aEvent.getTarget().add(mainContainer);
  }
}"
63089,"private void highlightRecommendation(AjaxRequestTarget aTarget,int aBegin,int aEnd,String aText,String aRecommendation){
  AnnotatorState annotatorState=ActiveLearningSidebar.this.getModelObject();
  predictionModel=recommendationService.getPredictions(annotatorState.getUser(),annotatorState.getProject());
  if (predictionModel != null) {
    Optional<AnnotationObject> aoForVID=predictionModel.getPrediction(aBegin,aEnd,aRecommendation);
    if (aoForVID.isPresent()) {
      highlightVID=new VID(RecommendationEditorExtension.BEAN_NAME,selectedLayer.getObject().getId(),(int)aoForVID.get().getRecommenderId(),aoForVID.get().getId(),VID.NONE,VID.NONE);
      vMarkerType=ANNOTATION_MARKER;
    }
 else {
      error(""String_Node_Str"" + aText + ""String_Node_Str""+ aRecommendation+ ""String_Node_Str"");
      aTarget.addChildren(getPage(),IFeedback.class);
    }
  }
}","private void highlightRecommendation(AjaxRequestTarget aTarget,int aBegin,int aEnd,String aText,String aRecommendation){
  AnnotatorState annotatorState=ActiveLearningSidebar.this.getModelObject();
  model=recommendationService.getPredictions(annotatorState.getUser(),annotatorState.getProject());
  if (model != null) {
    Optional<AnnotationObject> aoForVID=model.getPrediction(aBegin,aEnd,aRecommendation);
    if (aoForVID.isPresent()) {
      highlightVID=new VID(RecommendationEditorExtension.BEAN_NAME,selectedLayer.getObject().getId(),(int)aoForVID.get().getRecommenderId(),aoForVID.get().getId(),VID.NONE,VID.NONE);
      vMarkerType=ANNOTATION_MARKER;
    }
 else {
      String msg=String.format(""String_Node_Str"",aText,aRecommendation);
      LOG.error(msg);
      error(msg);
      aTarget.addChildren(getPage(),IFeedback.class);
    }
  }
}"
63090,"/** 
 * Returns the prediction used to generate the VID
 */
public Optional<AnnotationObject> getPrediction(int aBegin,int aEnd,String aLabel){
  return predictions.values().stream().filter(f -> f.getOffset().getBeginCharacter() == aBegin && f.getOffset().getEndCharacter() == aEnd).filter(f -> f.getAnnotation().equals(aLabel)).max((p1,p2) -> Integer.compare(p1.getId(),p2.getId()));
}","/** 
 * Returns the prediction used to generate the VID
 */
public Optional<AnnotationObject> getPrediction(int aBegin,int aEnd,String aLabel){
  return predictions.values().stream().filter(f -> f.getOffset().getBeginCharacter() == aBegin && f.getOffset().getEndCharacter() == aEnd).filter(f -> f.getAnnotation().equals(aLabel)).max(Comparator.comparingInt(TokenObject::getId));
}"
63091,"/** 
 * Returns the first one that matches recommendationId and recommenderId
 * @return
 */
public AnnotationObject getPredictionByVID(VID aVID){
  return predictions.values().stream().filter(f -> f.getId() == aVID.getSubId()).filter(f -> f.getRecommenderId() == aVID.getId()).collect(Collectors.toList()).get(0);
}","/** 
 * Returns the first prediction that matches recommendationId and recommenderId in the given document.
 */
public Optional<AnnotationObject> getPredictionByVID(SourceDocument document,VID aVID){
  return predictions.values().stream().filter(f -> f.getDocumentName().equals(document.getName())).filter(f -> f.getId() == aVID.getSubId()).filter(f -> f.getRecommenderId() == aVID.getId()).findFirst();
}"
63092,"private void actionAcceptRecommendation(AnnotationActionHandler aActionHandler,AnnotatorState aState,AjaxRequestTarget aTarget,JCas aJCas,VID aVID,int aBegin,int aEnd) throws AnnotationException, IOException {
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  AnnotationObject prediction=model.getPredictionByVID(aVID);
  String predictedValue=prediction.getAnnotation();
  Recommender recommender=recommendationService.getRecommender(aVID.getId());
  AnnotationLayer layer=annotationService.getLayer(aVID.getLayerId());
  AnnotationFeature feature=annotationService.getFeature(recommender.getFeature(),layer);
  SpanAdapter adapter=(SpanAdapter)annotationService.getAdapter(layer);
  Type type=CasUtil.getType(aJCas.getCas(),layer.getName());
  AnnotationFS annoFS=WebAnnoCasUtil.selectSingleFsAt(aJCas,type,aBegin,aEnd);
  int address;
  if (annoFS != null) {
    address=WebAnnoCasUtil.getAddr(annoFS);
  }
 else {
    address=adapter.add(aState,aJCas,aBegin,aEnd);
  }
  String fsId=fsRegistry.getFeatureSupport(feature).getId();
  if (fsId.equals(""String_Node_Str"") || fsId.equals(""String_Node_Str"")) {
    String uiName=fsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,predictedValue);
    KBHandle kbHandle=new KBHandle(predictedValue,uiName);
    adapter.setFeatureValue(aState,aJCas,address,feature,kbHandle);
  }
 else {
    adapter.setFeatureValue(aState,aJCas,address,feature,predictedValue);
  }
  AnnotationFS fs=WebAnnoCasUtil.selectByAddr(aJCas,AnnotationFS.class,address);
  applicationEventPublisher.publishEvent(new RecommendationAcceptedEvent(this,aState.getDocument(),aState.getUser().getUsername(),fs,feature,predictedValue));
  aState.getSelection().selectSpan(new VID(address),aJCas,aBegin,aEnd);
  aActionHandler.actionSelect(aTarget,aJCas);
  aActionHandler.actionCreateOrUpdate(aTarget,aJCas);
  aTarget.getPage().send(aTarget.getPage(),Broadcast.BREADTH,new AjaxRecommendationAcceptedEvent(aTarget,aState,aVID));
}","private void actionAcceptRecommendation(AnnotationActionHandler aActionHandler,AnnotatorState aState,AjaxRequestTarget aTarget,JCas aJCas,VID aVID,int aBegin,int aEnd) throws AnnotationException, IOException {
  SourceDocument document=aState.getDocument();
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  Optional<AnnotationObject> prediction=model.getPredictionByVID(document,aVID);
  if (!prediction.isPresent()) {
    log.error(""String_Node_Str"",document,aVID);
    aTarget.getPage().error(""String_Node_Str"");
    aTarget.addChildren(aTarget.getPage(),IFeedback.class);
    return;
  }
  String predictedValue=prediction.get().getAnnotation();
  Recommender recommender=recommendationService.getRecommender(aVID.getId());
  AnnotationLayer layer=annotationService.getLayer(aVID.getLayerId());
  AnnotationFeature feature=annotationService.getFeature(recommender.getFeature(),layer);
  SpanAdapter adapter=(SpanAdapter)annotationService.getAdapter(layer);
  Type type=CasUtil.getType(aJCas.getCas(),layer.getName());
  AnnotationFS annoFS=WebAnnoCasUtil.selectSingleFsAt(aJCas,type,aBegin,aEnd);
  int address;
  if (annoFS != null) {
    address=WebAnnoCasUtil.getAddr(annoFS);
  }
 else {
    address=adapter.add(aState,aJCas,aBegin,aEnd);
  }
  String fsId=fsRegistry.getFeatureSupport(feature).getId();
  if (fsId.equals(""String_Node_Str"") || fsId.equals(""String_Node_Str"")) {
    String uiName=fsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,predictedValue);
    KBHandle kbHandle=new KBHandle(predictedValue,uiName);
    adapter.setFeatureValue(aState,aJCas,address,feature,kbHandle);
  }
 else {
    adapter.setFeatureValue(aState,aJCas,address,feature,predictedValue);
  }
  AnnotationFS fs=WebAnnoCasUtil.selectByAddr(aJCas,AnnotationFS.class,address);
  applicationEventPublisher.publishEvent(new RecommendationAcceptedEvent(this,document,aState.getUser().getUsername(),fs,feature,predictedValue));
  aState.getSelection().selectSpan(new VID(address),aJCas,aBegin,aEnd);
  aActionHandler.actionSelect(aTarget,aJCas);
  aActionHandler.actionCreateOrUpdate(aTarget,aJCas);
  aTarget.getPage().send(aTarget.getPage(),Broadcast.BREADTH,new AjaxRecommendationAcceptedEvent(aTarget,aState,aVID));
}"
63093,"private void actionRejectRecommendation(AnnotationActionHandler aActionHandler,AnnotatorState aState,AjaxRequestTarget aTarget,JCas aJCas,VID aVID,int aBegin,int aEnd) throws AnnotationException {
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  Recommender recommender=recommendationService.getRecommender(aVID.getId());
  AnnotationLayer layer=annotationService.getLayer(aVID.getLayerId());
  AnnotationFeature feature=annotationService.getFeature(recommender.getFeature(),layer);
  AnnotationObject prediction=model.getPredictionByVID(aVID);
  String predictedValue=prediction.getAnnotation();
  String tokenText=aJCas.getDocumentText().substring(aBegin,aEnd);
  LearningRecord record=new LearningRecord();
  record.setUser(aState.getUser().getUsername());
  record.setSourceDocument(aState.getDocument());
  record.setUserAction(LearningRecordUserAction.REJECTED);
  record.setOffsetCharacterBegin(prediction.getOffset().getBeginCharacter());
  record.setOffsetCharacterEnd(prediction.getOffset().getEndCharacter());
  record.setOffsetTokenBegin(prediction.getOffset().getBeginToken());
  record.setOffsetTokenEnd(prediction.getOffset().getEndToken());
  record.setTokenText(tokenText);
  record.setAnnotation(predictedValue);
  record.setLayer(layer);
  record.setChangeLocation(LearningRecordChangeLocation.MAIN_EDITOR);
  learningRecordService.create(record);
  aActionHandler.actionSelect(aTarget,aJCas);
  aTarget.getPage().send(aTarget.getPage(),Broadcast.BREADTH,new AjaxRecommendationRejectedEvent(aTarget,aState,aVID));
  applicationEventPublisher.publishEvent(new RecommendationRejectedEvent(this,aState.getDocument(),aState.getUser().getUsername(),aBegin,aEnd,tokenText,feature,predictedValue));
}","private void actionRejectRecommendation(AnnotationActionHandler aActionHandler,AnnotatorState aState,AjaxRequestTarget aTarget,JCas aJCas,VID aVID,int aBegin,int aEnd) throws AnnotationException {
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  Recommender recommender=recommendationService.getRecommender(aVID.getId());
  AnnotationLayer layer=annotationService.getLayer(aVID.getLayerId());
  AnnotationFeature feature=annotationService.getFeature(recommender.getFeature(),layer);
  SourceDocument document=aState.getDocument();
  Optional<AnnotationObject> oPrediction=model.getPredictionByVID(document,aVID);
  if (!oPrediction.isPresent()) {
    log.error(""String_Node_Str"",document,aVID);
    aTarget.getPage().error(""String_Node_Str"");
    aTarget.addChildren(aTarget.getPage(),IFeedback.class);
    return;
  }
  AnnotationObject prediction=oPrediction.get();
  String predictedValue=prediction.getAnnotation();
  String tokenText=aJCas.getDocumentText().substring(aBegin,aEnd);
  LearningRecord record=new LearningRecord();
  record.setUser(aState.getUser().getUsername());
  record.setSourceDocument(document);
  record.setUserAction(LearningRecordUserAction.REJECTED);
  record.setOffsetCharacterBegin(prediction.getOffset().getBeginCharacter());
  record.setOffsetCharacterEnd(prediction.getOffset().getEndCharacter());
  record.setOffsetTokenBegin(prediction.getOffset().getBeginToken());
  record.setOffsetTokenEnd(prediction.getOffset().getEndToken());
  record.setTokenText(tokenText);
  record.setAnnotation(predictedValue);
  record.setLayer(layer);
  record.setChangeLocation(LearningRecordChangeLocation.MAIN_EDITOR);
  learningRecordService.create(record);
  aActionHandler.actionSelect(aTarget,aJCas);
  aTarget.getPage().send(aTarget.getPage(),Broadcast.BREADTH,new AjaxRecommendationRejectedEvent(aTarget,aState,aVID));
  applicationEventPublisher.publishEvent(new RecommendationRejectedEvent(this,document,aState.getUser().getUsername(),aBegin,aEnd,tokenText,feature,predictedValue));
}"
63094,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(AnnotatorState aState,AnnotationActionHandler aHandler){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(MID_VALUE,new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=-1955006051950156603L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(aState,aHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(AnnotatorState aState,AnnotationActionHandler aHandler){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(MID_VALUE,new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=-1955006051950156603L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(aState,aHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63095,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=2499259496065983734L;
    @Override protected List<KBHandle> getChoices(    String input){
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=2499259496065983734L;
    @Override protected List<KBHandle> getChoices(    String input){
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63096,"private AutoCompleteTextField<KBHandle> createSelectPropertyAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new PropertyModel<KBHandle>(this,""String_Node_Str""),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=1458626823154651501L;
    @Override protected List<KBHandle> getChoices(    String input){
      ConceptFeatureTraits traits=factService.getFeatureTraits(project);
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createSelectPropertyAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new PropertyModel<KBHandle>(this,""String_Node_Str""),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=1458626823154651501L;
    @Override protected List<KBHandle> getChoices(    String input){
      ConceptFeatureTraits traits=factService.getFeatureTraits(project);
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63097,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",LambdaModelAdapter.of(this::getSelectedKBItem,this::setSelectedKBItem),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=5683897252648514996L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(actionHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",LambdaModelAdapter.of(this::getSelectedKBItem,this::setSelectedKBItem),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=5683897252648514996L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(actionHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63098,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(AnnotatorState aState,AnnotationActionHandler aHandler){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(MID_VALUE,new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=-1955006051950156603L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(aState,aHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(AnnotatorState aState,AnnotationActionHandler aHandler){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(MID_VALUE,new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=-1955006051950156603L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(aState,aHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63099,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=2499259496065983734L;
    @Override protected List<KBHandle> getChoices(    String input){
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=2499259496065983734L;
    @Override protected List<KBHandle> getChoices(    String input){
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63100,"private AutoCompleteTextField<KBHandle> createSelectPropertyAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new PropertyModel<KBHandle>(this,""String_Node_Str""),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=1458626823154651501L;
    @Override protected List<KBHandle> getChoices(    String input){
      ConceptFeatureTraits traits=factService.getFeatureTraits(project);
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createSelectPropertyAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new PropertyModel<KBHandle>(this,""String_Node_Str""),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=1458626823154651501L;
    @Override protected List<KBHandle> getChoices(    String input){
      ConceptFeatureTraits traits=factService.getFeatureTraits(project);
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63101,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",LambdaModelAdapter.of(this::getSelectedKBItem,this::setSelectedKBItem),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=5683897252648514996L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(actionHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",LambdaModelAdapter.of(this::getSelectedKBItem,this::setSelectedKBItem),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=5683897252648514996L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(actionHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63102,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(AnnotatorState aState,AnnotationActionHandler aHandler){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(MID_VALUE,new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=-1955006051950156603L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(aState,aHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(AnnotatorState aState,AnnotationActionHandler aHandler){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(MID_VALUE,new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=-1955006051950156603L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(aState,aHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63103,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=2499259496065983734L;
    @Override protected List<KBHandle> getChoices(    String input){
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new TextRenderer<KBHandle>(""String_Node_Str"")){
    private static final long serialVersionUID=2499259496065983734L;
    @Override protected List<KBHandle> getChoices(    String input){
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63104,"private AutoCompleteTextField<KBHandle> createSelectPropertyAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new PropertyModel<KBHandle>(this,""String_Node_Str""),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=1458626823154651501L;
    @Override protected List<KBHandle> getChoices(    String input){
      ConceptFeatureTraits traits=factService.getFeatureTraits(project);
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createSelectPropertyAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",new PropertyModel<KBHandle>(this,""String_Node_Str""),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=1458626823154651501L;
    @Override protected List<KBHandle> getChoices(    String input){
      ConceptFeatureTraits traits=factService.getFeatureTraits(project);
      return factService.getPredicatesFromKB(project,traits);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63105,"private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",LambdaModelAdapter.of(this::getSelectedKBItem,this::setSelectedKBItem),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=5683897252648514996L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(actionHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  field.setOutputMarkupId(true);
  field.setMarkupId(ID_PREFIX + getModelObject().feature.getId());
  return field;
}","private AutoCompleteTextField<KBHandle> createAutoCompleteTextField(){
  AutoCompleteTextField<KBHandle> field=new AutoCompleteTextField<KBHandle>(""String_Node_Str"",LambdaModelAdapter.of(this::getSelectedKBItem,this::setSelectedKBItem),new TextRenderer<KBHandle>(""String_Node_Str""),KBHandle.class){
    private static final long serialVersionUID=5683897252648514996L;
    @Override protected List<KBHandle> getChoices(    String input){
      return listInstances(actionHandler,input);
    }
    @Override public void onConfigure(    JQueryBehavior behavior){
      super.onConfigure(behavior);
      behavior.setOption(""String_Node_Str"",true);
    }
    @Override protected IJQueryTemplate newTemplate(){
      return KendoChoiceDescriptionScriptReference.template();
    }
  }
;
  return field;
}"
63106,"@Override public List<List<AnnotationObject>> getRecommendationsForWholeProject(Predictions model,AnnotationLayer aLayer){
  List<List<AnnotationObject>> result=new ArrayList<>();
  Map<String,List<List<AnnotationObject>>> recommendationsMap=model.getPredictionsForWholeProject(aLayer,documentService);
  Set<String> documentNameSet=recommendationsMap.keySet();
  for (  String documentName : documentNameSet) {
    result.addAll(recommendationsMap.get(documentName));
  }
  return result;
}","@Override public List<List<AnnotationObject>> getRecommendationsForWholeProject(Predictions model,AnnotationLayer aLayer){
  List<List<AnnotationObject>> result=new ArrayList<>();
  Map<String,List<List<AnnotationObject>>> recommendationsMap=model.getPredictionsForWholeProject(aLayer,documentService,true);
  Set<String> documentNameSet=recommendationsMap.keySet();
  for (  String documentName : documentNameSet) {
    result.addAll(recommendationsMap.get(documentName));
  }
  return result;
}"
63107,"public List<AnnotationObject> getFlattenedRecommendationsFromRecommendationModel(JCas aJcas,AnnotatorState aState,AnnotationLayer aSelectedLayer){
  int windowBegin=0;
  int windowEnd=aJcas.getDocumentText().length() - 1;
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  return model.getFlattenedPredictions(aState.getDocument().getName(),aSelectedLayer,windowBegin,windowEnd,aJcas);
}","public List<AnnotationObject> getFlattenedRecommendationsFromRecommendationModel(JCas aJcas,AnnotatorState aState,AnnotationLayer aSelectedLayer){
  int windowBegin=0;
  int windowEnd=aJcas.getDocumentText().length() - 1;
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  return model.getFlattenedPredictions(aState.getDocument().getName(),aSelectedLayer,windowBegin,windowEnd,aJcas,true);
}"
63108,"/** 
 * TODO #176 use the document Id once it it available in the CAS Get the predictions of a document for a given window in a flattened list
 * @param aJcas 
 */
public List<AnnotationObject> getFlattenedPredictions(String aDocumentName,AnnotationLayer aLayer,int aWindowBegin,int aWindowEnd,JCas aJcas){
  return predictions.entrySet().stream().filter(f -> f.getKey().getDocumentName().equals(aDocumentName)).filter(f -> f.getKey().getLayerId() == aLayer.getId()).filter(f -> f.getKey().getOffset().getBeginCharacter() >= aWindowBegin).filter(f -> f.getKey().getOffset().getEndCharacter() <= aWindowEnd).map(Map.Entry::getValue).sorted(Comparator.comparingInt(e2 -> e2.getOffset().getBeginCharacter())).collect(Collectors.toList());
}","/** 
 * TODO #176 use the document Id once it it available in the CAS Get the predictions of a document for a given window in a flattened list
 * @param aJcas 
 */
public List<AnnotationObject> getFlattenedPredictions(String aDocumentName,AnnotationLayer aLayer,int aWindowBegin,int aWindowEnd,JCas aJcas,boolean aFilterExisting){
  List<Map.Entry<ExtendedId,AnnotationObject>> p=predictions.entrySet().stream().filter(f -> f.getKey().getDocumentName().equals(aDocumentName)).filter(f -> f.getKey().getLayerId() == aLayer.getId()).filter(f -> f.getKey().getOffset().getBeginCharacter() >= aWindowBegin).filter(f -> f.getKey().getOffset().getEndCharacter() <= aWindowEnd).sorted(Comparator.comparingInt(e2 -> e2.getValue().getOffset().getBeginCharacter())).collect(Collectors.toList());
  if (aFilterExisting) {
    Type type=CasUtil.getType(aJcas.getCas(),aLayer.getName());
    List<AnnotationFS> existingAnnotations=CasUtil.selectCovered(aJcas.getCas(),type,aWindowBegin,aWindowEnd);
    List<Integer> existingOffsets=existingAnnotations.stream().map(AnnotationFS::getBegin).collect(Collectors.toList());
    return p.stream().filter(f -> !existingOffsets.contains(f.getKey().getOffset().getBeginCharacter())).map(Map.Entry::getValue).collect(Collectors.toList());
  }
 else {
    return p.stream().map(Map.Entry::getValue).collect(Collectors.toList());
  }
}"
63109,"/** 
 * Get the predictions of a given window for each document,  where the outer list is a list of tokens  and the inner list is a list of predictions for a token. The method filters all tokens which already have an annotation and don't need further recommendation.
 */
public Map<String,List<List<AnnotationObject>>> getPredictionsForWholeProject(AnnotationLayer aLayer,DocumentService aDocumentService){
  Map<String,List<List<AnnotationObject>>> predictions=new HashMap<>();
  List<AnnotationDocument> docs=aDocumentService.listAnnotationDocuments(project,user);
  for (  AnnotationDocument doc : docs) {
    JCas jcas;
    try {
      jcas=aDocumentService.readAnnotationCas(doc);
      List<List<AnnotationObject>> p=getPredictions(doc.getName(),aLayer,0,jcas.getDocumentText().length() - 1,jcas);
      predictions.put(doc.getName(),p);
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"",e);
    }
  }
  return predictions;
}","/** 
 * Get the predictions of a given window for each document,  where the outer list is a list of tokens  and the inner list is a list of predictions for a token. The method filters all tokens which already have an annotation and don't need further recommendation.
 */
public Map<String,List<List<AnnotationObject>>> getPredictionsForWholeProject(AnnotationLayer aLayer,DocumentService aDocumentService,boolean aFilterExisting){
  Map<String,List<List<AnnotationObject>>> predictions=new HashMap<>();
  List<AnnotationDocument> docs=aDocumentService.listAnnotationDocuments(project,user);
  for (  AnnotationDocument doc : docs) {
    JCas jcas;
    try {
      jcas=aDocumentService.readAnnotationCas(doc);
      List<List<AnnotationObject>> p=getPredictions(doc.getName(),aLayer,0,jcas.getDocumentText().length() - 1,jcas,aFilterExisting);
      predictions.put(doc.getName(),p);
    }
 catch (    IOException e) {
      logger.info(""String_Node_Str"",e);
    }
  }
  return predictions;
}"
63110,"/** 
 * Add annotations from the CAS, which is controlled by the window size, to the VDocument  {@link VDocument}
 * @param aJcas The JCAS object containing annotations
 * @param vdoc A VDocument containing annotations for the given layer
 * @param aState Data model for brat annotations
 * @param aColoringStrategy the coloring strategy to render this layer
 */
@Override public void render(JCas aJcas,VDocument vdoc,AnnotatorState aState,ColoringStrategy aColoringStrategy,AnnotationLayer layer,RecommendationService recommendationService,LearningRecordService learningRecordService,AnnotationSchemaService aAnnotationService,FeatureSupportRegistry aFsRegistry){
  if (aJcas == null || recommendationService == null) {
    return;
  }
  int windowBegin=aState.getWindowBeginOffset();
  int windowEnd=aState.getWindowEndOffset();
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  if (model == null) {
    return;
  }
  List<List<AnnotationObject>> recommendations=model.getPredictions(DocumentMetaData.get(aJcas).getDocumentTitle(),layer,windowBegin,windowEnd,aJcas);
  String color=aColoringStrategy.getColor(null,null);
  String bratTypeName=TypeUtil.getUiTypeName(typeAdapter);
  List<VSpan> vspansWithoutRecommendations=new ArrayList<>(vdoc.spans(layer.getId()));
  List<LearningRecord> recordedAnnotations=learningRecordService.getAllRecordsByDocumentAndUserAndLayer(aState.getDocument(),aState.getUser().getUsername(),layer);
  for (  List<AnnotationObject> token : recommendations) {
    Map<String,Map<Long,AnnotationObject>> labelMap=new HashMap<>();
    for (    AnnotationObject ao : token) {
      if (ao.getAnnotation() != null) {
        if (isOverlapping(vspansWithoutRecommendations,ao.getOffset(),windowBegin,ao.getFeature())) {
          break;
        }
        if (isRejected(recordedAnnotations,ao)) {
          continue;
        }
        if (!labelMap.containsKey(ao.getAnnotation()) || !labelMap.get(ao.getAnnotation()).containsKey(ao.getRecommenderId()) || labelMap.get(ao.getAnnotation()).get(ao.getRecommenderId()).getConfidence() < ao.getConfidence()) {
          Map<Long,AnnotationObject> confidencePerClassifier;
          if (labelMap.get(ao.getAnnotation()) == null) {
            confidencePerClassifier=new HashMap<>();
          }
 else {
            confidencePerClassifier=labelMap.get(ao.getAnnotation());
          }
          confidencePerClassifier.put(ao.getRecommenderId(),ao);
          labelMap.put(ao.getAnnotation(),confidencePerClassifier);
        }
      }
    }
    Map<String,Double> maxConfidencePerLabel=new HashMap<>();
    for (    String label : labelMap.keySet()) {
      double maxConfidence=0;
      for (      Entry<Long,AnnotationObject> classifier : labelMap.get(label).entrySet()) {
        if (classifier.getValue().getConfidence() > maxConfidence) {
          maxConfidence=classifier.getValue().getConfidence();
        }
      }
      maxConfidencePerLabel.put(label,maxConfidence);
    }
    List<String> filtered=maxConfidencePerLabel.entrySet().stream().sorted((e1,e2) -> Double.compare(e2.getValue(),e1.getValue())).limit(recommendationService.getMaxSuggestions(aState.getUser())).map(Entry::getKey).collect(Collectors.toList());
    for (    String label : labelMap.keySet()) {
      if (!filtered.contains(label)) {
        continue;
      }
      AnnotationObject prediction=token.stream().filter(p -> p.getAnnotation().equals(label)).max(Comparator.comparingInt(TokenObject::getId)).orElse(null);
      if (prediction == null) {
        continue;
      }
      VID vid=new VID(RecommendationEditorExtension.BEAN_NAME,layer.getId(),(int)prediction.getRecommenderId(),prediction.getId(),VID.NONE,VID.NONE);
      boolean first=true;
      Map<Long,AnnotationObject> confidencePerClassifier=labelMap.get(label);
      for (      Long recommenderId : confidencePerClassifier.keySet()) {
        AnnotationObject ao=confidencePerClassifier.get(recommenderId);
        if (first) {
          AnnotationFeature feature=aAnnotationService.getFeature(ao.getFeature(),layer);
          String annotation=aFsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,ao.getAnnotation());
          Map<String,String> featureAnnotation=new HashMap<>();
          featureAnnotation.put(ao.getFeature(),annotation);
          VSpan v=new VSpan(layer,vid,bratTypeName,new VRange(ao.getOffset().getBeginCharacter() - windowBegin,ao.getOffset().getEndCharacter() - windowBegin),featureAnnotation,Collections.emptyMap(),color);
          vdoc.add(v);
          first=false;
        }
        vdoc.add(new VComment(vid,VCommentType.INFO,ao.getClassifier()));
        if (ao.getConfidence() != -1) {
          vdoc.add(new VComment(vid,VCommentType.INFO,String.format(""String_Node_Str"",ao.getConfidence())));
        }
        if (ao.getDescription() != null && !ao.getDescription().isEmpty()) {
          vdoc.add(new VComment(vid,VCommentType.INFO,""String_Node_Str"" + ao.getDescription()));
        }
      }
    }
  }
}","/** 
 * Add annotations from the CAS, which is controlled by the window size, to the VDocument  {@link VDocument}
 * @param aJcas The JCAS object containing annotations
 * @param vdoc A VDocument containing annotations for the given layer
 * @param aState Data model for brat annotations
 * @param aColoringStrategy the coloring strategy to render this layer
 */
@Override public void render(JCas aJcas,VDocument vdoc,AnnotatorState aState,ColoringStrategy aColoringStrategy,AnnotationLayer layer,RecommendationService recommendationService,LearningRecordService learningRecordService,AnnotationSchemaService aAnnotationService,FeatureSupportRegistry aFsRegistry){
  if (aJcas == null || recommendationService == null) {
    return;
  }
  int windowBegin=aState.getWindowBeginOffset();
  int windowEnd=aState.getWindowEndOffset();
  Predictions model=recommendationService.getPredictions(aState.getUser(),aState.getProject());
  if (model == null) {
    return;
  }
  List<List<AnnotationObject>> recommendations=model.getPredictions(DocumentMetaData.get(aJcas).getDocumentTitle(),layer,windowBegin,windowEnd,aJcas,false);
  String color=aColoringStrategy.getColor(null,null);
  String bratTypeName=TypeUtil.getUiTypeName(typeAdapter);
  List<VSpan> vspansWithoutRecommendations=new ArrayList<>(vdoc.spans(layer.getId()));
  List<LearningRecord> recordedAnnotations=learningRecordService.getAllRecordsByDocumentAndUserAndLayer(aState.getDocument(),aState.getUser().getUsername(),layer);
  for (  List<AnnotationObject> token : recommendations) {
    Map<String,Map<Long,AnnotationObject>> labelMap=new HashMap<>();
    for (    AnnotationObject ao : token) {
      if (ao.getAnnotation() != null) {
        if (isOverlapping(vspansWithoutRecommendations,ao.getOffset(),windowBegin,ao.getFeature())) {
          break;
        }
        if (isRejected(recordedAnnotations,ao)) {
          continue;
        }
        if (!labelMap.containsKey(ao.getAnnotation()) || !labelMap.get(ao.getAnnotation()).containsKey(ao.getRecommenderId()) || labelMap.get(ao.getAnnotation()).get(ao.getRecommenderId()).getConfidence() < ao.getConfidence()) {
          Map<Long,AnnotationObject> confidencePerClassifier;
          if (labelMap.get(ao.getAnnotation()) == null) {
            confidencePerClassifier=new HashMap<>();
          }
 else {
            confidencePerClassifier=labelMap.get(ao.getAnnotation());
          }
          confidencePerClassifier.put(ao.getRecommenderId(),ao);
          labelMap.put(ao.getAnnotation(),confidencePerClassifier);
        }
      }
    }
    Map<String,Double> maxConfidencePerLabel=new HashMap<>();
    for (    String label : labelMap.keySet()) {
      double maxConfidence=0;
      for (      Entry<Long,AnnotationObject> classifier : labelMap.get(label).entrySet()) {
        if (classifier.getValue().getConfidence() > maxConfidence) {
          maxConfidence=classifier.getValue().getConfidence();
        }
      }
      maxConfidencePerLabel.put(label,maxConfidence);
    }
    List<String> filtered=maxConfidencePerLabel.entrySet().stream().sorted((e1,e2) -> Double.compare(e2.getValue(),e1.getValue())).limit(recommendationService.getMaxSuggestions(aState.getUser())).map(Entry::getKey).collect(Collectors.toList());
    for (    String label : labelMap.keySet()) {
      if (!filtered.contains(label)) {
        continue;
      }
      AnnotationObject prediction=token.stream().filter(p -> p.getAnnotation().equals(label)).max(Comparator.comparingInt(TokenObject::getId)).orElse(null);
      if (prediction == null) {
        continue;
      }
      VID vid=new VID(RecommendationEditorExtension.BEAN_NAME,layer.getId(),(int)prediction.getRecommenderId(),prediction.getId(),VID.NONE,VID.NONE);
      boolean first=true;
      Map<Long,AnnotationObject> confidencePerClassifier=labelMap.get(label);
      for (      Long recommenderId : confidencePerClassifier.keySet()) {
        AnnotationObject ao=confidencePerClassifier.get(recommenderId);
        if (first) {
          AnnotationFeature feature=aAnnotationService.getFeature(ao.getFeature(),layer);
          String annotation=aFsRegistry.getFeatureSupport(feature).renderFeatureValue(feature,ao.getAnnotation());
          Map<String,String> featureAnnotation=new HashMap<>();
          featureAnnotation.put(ao.getFeature(),annotation);
          VSpan v=new VSpan(layer,vid,bratTypeName,new VRange(ao.getOffset().getBeginCharacter() - windowBegin,ao.getOffset().getEndCharacter() - windowBegin),featureAnnotation,Collections.emptyMap(),color);
          vdoc.add(v);
          first=false;
        }
        vdoc.add(new VComment(vid,VCommentType.INFO,ao.getClassifier()));
        if (ao.getConfidence() != -1) {
          vdoc.add(new VComment(vid,VCommentType.INFO,String.format(""String_Node_Str"",ao.getConfidence())));
        }
        if (ao.getDescription() != null && !ao.getDescription().isEmpty()) {
          vdoc.add(new VComment(vid,VCommentType.INFO,""String_Node_Str"" + ao.getDescription()));
        }
      }
    }
  }
}"
63111,"private void showAndHighlightRecommendationAndJumpToRecommendationLocation(AjaxRequestTarget aTarget){
  if (currentDifference != null) {
    hasUnseenRecommendation=true;
    currentRecommendation=currentDifference.getRecommendation1();
    try {
      actionShowSelectedDocument(aTarget,getModelObject().getDocument(),currentRecommendation.getOffset().getBeginCharacter());
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e.getMessage(),e);
      error(""String_Node_Str"" + e.getMessage());
      aTarget.addChildren(getPage(),IFeedback.class);
    }
    setShowingRecommendation();
    highlightCurrentRecommendation(aTarget);
  }
 else   if (learnSkippedRecommendationTime == null) {
    hasUnseenRecommendation=false;
    hasSkippedRecommendation=activeLearningRecommender.hasRecommendationWhichIsSkipped(learningRecordService,activeLearningService);
  }
 else {
    hasUnseenRecommendation=false;
    hasSkippedRecommendation=false;
  }
}","private void showAndHighlightRecommendationAndJumpToRecommendationLocation(AjaxRequestTarget aTarget){
  if (currentDifference != null) {
    hasUnseenRecommendation=true;
    currentRecommendation=currentDifference.getRecommendation1();
    try {
      actionShowSelectedDocument(aTarget,documentService.getSourceDocument(this.getModelObject().getProject(),currentRecommendation.getDocumentName()),currentRecommendation.getOffset().getBeginCharacter());
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e.getMessage(),e);
      error(""String_Node_Str"" + e.getMessage());
      aTarget.addChildren(getPage(),IFeedback.class);
    }
    setShowingRecommendation();
    highlightCurrentRecommendation(aTarget);
  }
 else   if (learnSkippedRecommendationTime == null) {
    hasUnseenRecommendation=false;
    hasSkippedRecommendation=activeLearningRecommender.hasRecommendationWhichIsSkipped(learningRecordService,activeLearningService);
  }
 else {
    hasUnseenRecommendation=false;
    hasSkippedRecommendation=false;
  }
}"
63112,"private void jumpToRecommendationLocationAndHighlightRecommendation(AjaxRequestTarget aTarget) throws IOException {
  actionShowSelectedDocument(aTarget,getModelObject().getDocument(),currentRecommendation.getOffset().getBeginCharacter());
  highlightCurrentRecommendation(aTarget);
}","private void jumpToRecommendationLocationAndHighlightRecommendation(AjaxRequestTarget aTarget) throws IOException {
  actionShowSelectedDocument(aTarget,documentService.getSourceDocument(this.getModelObject().getProject(),currentRecommendation.getDocumentName()),currentRecommendation.getOffset().getBeginCharacter());
  highlightCurrentRecommendation(aTarget);
}"
63113,"private List<CandidateEntity> sortByFrequency(List<CandidateEntity> candidates){
  candidates.sort((e1,e2) -> Comparator.comparingInt(CandidateEntity::getFrequency).reversed().compare(e1,e2));
  return candidates;
}","private List<CandidateEntity> sortByFrequency(List<CandidateEntity> candidates){
  candidates.sort((e1,e2) -> Comparator.comparingInt(CandidateEntity::getFrequency).compare(e1,e2));
  return candidates;
}"
63114,"public Transaction addMultiSign(Transaction tx,int M,byte[][] pubKeys,byte[] signatureData) throws Exception {
  pubKeys=Program.sortPublicKeys(pubKeys);
  if (tx.sigs == null) {
    tx.sigs=new Sig[0];
  }
 else {
    if (tx.sigs.length > Common.TX_MAX_SIG_SIZE || M > pubKeys.length || M <= 0 || signatureData == null || pubKeys == null) {
      throw new SDKException(ErrorCode.ParamError);
    }
    for (int i=0; i < tx.sigs.length; i++) {
      if (Arrays.equals(tx.sigs[i].pubKeys,pubKeys)) {
        if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {
          throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
        }
        if (tx.sigs[i].M != M) {
          throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
        }
        int len=tx.sigs[i].sigData.length;
        byte[][] sigData=new byte[len + 1][];
        for (int j=0; j < tx.sigs[i].sigData.length; j++) {
          sigData[j]=tx.sigs[i].sigData[j];
        }
        sigData[len]=signatureData;
        tx.sigs[i].sigData=sigData;
        return tx;
      }
    }
  }
  Sig[] sigs=new Sig[tx.sigs.length + 1];
  for (int i=0; i < tx.sigs.length; i++) {
    sigs[i]=tx.sigs[i];
  }
  sigs[tx.sigs.length]=new Sig();
  sigs[tx.sigs.length].M=M;
  sigs[tx.sigs.length].pubKeys=pubKeys;
  sigs[tx.sigs.length].sigData=new byte[1][];
  sigs[tx.sigs.length].sigData[0]=signatureData;
  tx.sigs=sigs;
  return tx;
}","public Transaction addMultiSign(Transaction tx,int M,byte[][] pubKeys,byte[] signatureData) throws Exception {
  pubKeys=Program.sortPublicKeys(pubKeys);
  if (tx.sigs == null) {
    tx.sigs=new Sig[0];
  }
 else {
    if (tx.sigs.length > Common.TX_MAX_SIG_SIZE || M > pubKeys.length || M <= 0 || signatureData == null || pubKeys == null) {
      throw new SDKException(ErrorCode.ParamError);
    }
    for (int i=0; i < tx.sigs.length; i++) {
      if (Arrays.deepEquals(tx.sigs[i].pubKeys,pubKeys)) {
        if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {
          throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
        }
        if (tx.sigs[i].M != M) {
          throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
        }
        int len=tx.sigs[i].sigData.length;
        byte[][] sigData=new byte[len + 1][];
        for (int j=0; j < tx.sigs[i].sigData.length; j++) {
          sigData[j]=tx.sigs[i].sigData[j];
        }
        sigData[len]=signatureData;
        tx.sigs[i].sigData=sigData;
        return tx;
      }
    }
  }
  Sig[] sigs=new Sig[tx.sigs.length + 1];
  for (int i=0; i < tx.sigs.length; i++) {
    sigs[i]=tx.sigs[i];
  }
  sigs[tx.sigs.length]=new Sig();
  sigs[tx.sigs.length].M=M;
  sigs[tx.sigs.length].pubKeys=pubKeys;
  sigs[tx.sigs.length].sigData=new byte[1][];
  sigs[tx.sigs.length].sigData[0]=signatureData;
  tx.sigs=sigs;
  return tx;
}"
63115,"public Transaction makeTransfer(State[] states,String payer,long gaslimit,long gasprice) throws Exception {
  if (states == null || payer == null || payer.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (gasprice < 0 || gaslimit < 0) {
    throw new SDKException(ErrorCode.ParamError);
  }
  List list=new ArrayList();
  Struct[] structs=new Struct[states.length];
  for (int i=0; i < states.length; i++) {
    structs[i]=new Struct().add(states[i].from,states[i].to,states[i].value);
  }
  list.add(structs);
  byte[] args=NativeBuildParams.createCodeParamsScript(list);
  Transaction tx=sdk.vm().buildNativeParams(new Address(Helper.hexToBytes(ongContract)),""String_Node_Str"",args,payer,gaslimit,gasprice);
  return tx;
}","public Transaction makeTransfer(State[] states,String payer,long gaslimit,long gasprice) throws Exception {
  if (states == null || payer == null || payer.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (gasprice < 0 || gaslimit < 0) {
    throw new SDKException(ErrorCode.ParamError);
  }
  List list=new ArrayList();
  List listStruct=new ArrayList();
  for (int i=0; i < states.length; i++) {
    listStruct.add(new Struct().add(states[i].from,states[i].to,states[i].value));
  }
  list.add(listStruct);
  byte[] args=NativeBuildParams.createCodeParamsScript(list);
  Transaction tx=sdk.vm().buildNativeParams(new Address(Helper.hexToBytes(ongContract)),""String_Node_Str"",args,payer,gaslimit,gasprice);
  return tx;
}"
63116,"public Transaction makeTransfer(State[] states,String payer,long gaslimit,long gasprice) throws Exception {
  if (states == null || payer == null || payer.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (gasprice < 0 || gaslimit < 0) {
    throw new SDKException(ErrorCode.ParamError);
  }
  List list=new ArrayList();
  Struct[] structs=new Struct[states.length];
  for (int i=0; i < states.length; i++) {
    structs[i]=new Struct().add(states[i].from,states[i].to,states[i].value);
  }
  list.add(structs);
  byte[] args=NativeBuildParams.createCodeParamsScript(list);
  Transaction tx=sdk.vm().buildNativeParams(new Address(Helper.hexToBytes(ontContract)),""String_Node_Str"",args,payer,gaslimit,gasprice);
  return tx;
}","public Transaction makeTransfer(State[] states,String payer,long gaslimit,long gasprice) throws Exception {
  if (states == null || payer == null || payer.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (gasprice < 0 || gaslimit < 0) {
    throw new SDKException(ErrorCode.ParamError);
  }
  List list=new ArrayList();
  List listStruct=new ArrayList();
  for (int i=0; i < states.length; i++) {
    listStruct.add(new Struct().add(states[i].from,states[i].to,states[i].value));
  }
  list.add(listStruct);
  byte[] args=NativeBuildParams.createCodeParamsScript(list);
  Transaction tx=sdk.vm().buildNativeParams(new Address(Helper.hexToBytes(ontContract)),""String_Node_Str"",args,payer,gaslimit,gasprice);
  return tx;
}"
63117,"/** 
 * @param list
 * @return
 */
public static byte[] createCodeParamsScript(List<Object> list){
  ScriptBuilder sb=new ScriptBuilder();
  try {
    for (int i=list.size() - 1; i >= 0; i--) {
      Object val=list.get(i);
      if (val instanceof byte[]) {
        sb.emitPushByteArray((byte[])val);
      }
 else       if (val instanceof Boolean) {
        sb.emitPushBool((Boolean)val);
      }
 else       if (val instanceof Integer) {
        sb.emitPushInteger(BigInteger.valueOf((int)val));
      }
 else       if (val instanceof Long) {
        sb.emitPushInteger(BigInteger.valueOf((Long)val));
      }
 else       if (val instanceof BigInteger) {
        sb.emitPushInteger((BigInteger)val);
      }
 else       if (val instanceof Address) {
        sb.emitPushByteArray(((Address)val).toArray());
      }
 else       if (val instanceof String) {
        sb.emitPushByteArray(((String)val).getBytes());
      }
 else       if (val instanceof Struct) {
        sb.emitPushInteger(BigInteger.valueOf(0));
        sb.add(ScriptOp.OP_NEWSTRUCT);
        sb.add(ScriptOp.OP_TOALTSTACK);
        for (int k=0; k < ((Struct)val).list.size(); k++) {
          Object o=((Struct)val).list.get(k);
          createCodeParamsScript(sb,o);
          sb.add(ScriptOp.OP_DUPFROMALTSTACK);
          sb.add(ScriptOp.OP_SWAP);
          sb.add(ScriptOp.OP_APPEND);
        }
        sb.add(ScriptOp.OP_FROMALTSTACK);
      }
 else       if (val instanceof Struct[]) {
        sb.emitPushInteger(BigInteger.valueOf(0));
        sb.add(ScriptOp.OP_NEWSTRUCT);
        sb.add(ScriptOp.OP_TOALTSTACK);
        Struct[] structs=(Struct[])val;
        for (int k=0; k < structs.length; k++) {
          createCodeParamsScript(sb,structs[k]);
        }
        sb.add(ScriptOp.OP_FROMALTSTACK);
        sb.emitPushInteger(new BigInteger(String.valueOf(structs.length)));
        sb.pushPack();
      }
 else       if (val instanceof List) {
        List tmp=(List)val;
        createCodeParamsScript(sb,tmp);
        sb.emitPushInteger(new BigInteger(String.valueOf(tmp.size())));
        sb.pushPack();
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return sb.toArray();
}","/** 
 * @param list
 * @return
 */
public static byte[] createCodeParamsScript(List<Object> list){
  ScriptBuilder sb=new ScriptBuilder();
  return createCodeParamsScript(sb,list);
}"
63118,"@Override public void serialize(BinaryWriter writer) throws IOException {
  writer.writeVarBytes(from.toArray());
  writer.writeVarBytes(to.toArray());
  writer.writeVarBytes(Helper.BigInt2Bytes(BigInteger.valueOf(value)));
}","@Override public void serialize(BinaryWriter writer) throws IOException {
  writer.writeVarBytes(from.toArray());
  writer.writeVarBytes(to.toArray());
  writer.writeVarBytes(Helper.BigIntToNeoBytes(BigInteger.valueOf(value)));
}"
63119,"@Override public void deserialize(BinaryReader reader) throws IOException {
  from=new Address(reader.readVarBytes());
  to=new Address(reader.readVarBytes());
  value=Helper.BigIntFromBytes(reader.readVarBytes()).longValue();
}","@Override public void deserialize(BinaryReader reader) throws IOException {
  from=new Address(reader.readVarBytes());
  to=new Address(reader.readVarBytes());
  value=Helper.BigIntFromNeoBytes(reader.readVarBytes()).longValue();
}"
63120,"@Override public void serialize(BinaryWriter writer) throws IOException {
  long l=params.length;
  byte[] aa=Helper.BigInt2Bytes(BigInteger.valueOf(l));
  String bb=Helper.toHexString(aa);
  writer.writeVarBytes(aa);
  for (int i=0; i < params.length; i++) {
    writer.writeVarString(params[i].key);
    writer.writeVarString(params[i].value);
  }
}","@Override public void serialize(BinaryWriter writer) throws IOException {
  long l=params.length;
  byte[] aa=Helper.BigIntToNeoBytes(BigInteger.valueOf(l));
  String bb=Helper.toHexString(aa);
  writer.writeVarBytes(aa);
  for (int i=0; i < params.length; i++) {
    writer.writeVarString(params[i].key);
    writer.writeVarString(params[i].value);
  }
}"
63121,"public static short readNum(BinaryReader reader) throws IOException, SDKException {
  ScriptOp code=readOpCode(reader);
  if (code == ScriptOp.OP_PUSH0) {
    readOpCode(reader);
    return 0;
  }
 else {
    int num=(int)code.getByte() - (int)ScriptOp.OP_PUSH1.getByte() + 1;
    if (num >= 1 && num <= 16) {
      readOpCode(reader);
      return (short)num;
    }
  }
  byte[] buff=readBytes(reader);
  BigInteger bint=Helper.BigIntFromBytes(buff);
  long num=bint.longValue();
  if (num > Short.MAX_VALUE || num < 16) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  return (short)num;
}","public static short readNum(BinaryReader reader) throws IOException, SDKException {
  ScriptOp code=readOpCode(reader);
  if (code == ScriptOp.OP_PUSH0) {
    readOpCode(reader);
    return 0;
  }
 else {
    int num=(int)code.getByte() - (int)ScriptOp.OP_PUSH1.getByte() + 1;
    if (num >= 1 && num <= 16) {
      readOpCode(reader);
      return (short)num;
    }
  }
  byte[] buff=readBytes(reader);
  BigInteger bint=Helper.BigIntFromNeoBytes(buff);
  long num=bint.longValue();
  if (num > Short.MAX_VALUE || num < 16) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  return (short)num;
}"
63122,"public ScriptBuilder pushNum(short num){
  if (num == 0) {
    return add(ScriptOp.OP_PUSH0);
  }
 else   if (num < 16) {
    return add(ScriptOp.valueOf(num - 1 + ScriptOp.OP_PUSH1.getByte()));
  }
  BigInteger bint=BigInteger.valueOf(num);
  return push(Helper.BigInt2Bytes(bint));
}","public ScriptBuilder pushNum(short num){
  if (num == 0) {
    return add(ScriptOp.OP_PUSH0);
  }
 else   if (num < 16) {
    return add(ScriptOp.valueOf(num - 1 + ScriptOp.OP_PUSH1.getByte()));
  }
  BigInteger bint=BigInteger.valueOf(num);
  return push(Helper.BigIntToNeoBytes(bint));
}"
63123,"public static byte[] getStructBytes(Object val){
  ScriptBuilder sb=null;
  try {
    sb=new ScriptBuilder();
    List list=((Struct)val).list;
    sb.add(Type.StructType.getValue());
    sb.add(Helper.BigInt2Bytes(BigInteger.valueOf(list.size())));
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof byte[]) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push((byte[])list.get(i));
      }
 else       if (list.get(i) instanceof String) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(((String)list.get(i)).getBytes());
      }
 else       if (list.get(i) instanceof Integer) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(Helper.BigInt2Bytes(BigInteger.valueOf((Integer)list.get(i))));
      }
 else       if (list.get(i) instanceof Long) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(Helper.BigInt2Bytes(BigInteger.valueOf((Long)list.get(i))));
      }
 else {
        throw new SDKException(ErrorCode.ParamError);
      }
    }
  }
 catch (  SDKException e) {
    e.printStackTrace();
  }
  return sb.toArray();
}","public static byte[] getStructBytes(Object val){
  ScriptBuilder sb=null;
  try {
    sb=new ScriptBuilder();
    List list=((Struct)val).list;
    sb.add(Type.StructType.getValue());
    sb.add(Helper.BigIntToNeoBytes(BigInteger.valueOf(list.size())));
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof byte[]) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push((byte[])list.get(i));
      }
 else       if (list.get(i) instanceof String) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(((String)list.get(i)).getBytes());
      }
 else       if (list.get(i) instanceof Integer) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(Helper.BigIntToNeoBytes(BigInteger.valueOf((Integer)list.get(i))));
      }
 else       if (list.get(i) instanceof Long) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(Helper.BigIntToNeoBytes(BigInteger.valueOf((Long)list.get(i))));
      }
 else {
        throw new SDKException(ErrorCode.ParamError);
      }
    }
  }
 catch (  SDKException e) {
    e.printStackTrace();
  }
  return sb.toArray();
}"
63124,"public static byte[] getMapBytes(Object val){
  ScriptBuilder sb=null;
  try {
    sb=new ScriptBuilder();
    Map<String,Object> map=(Map)val;
    sb.add(Type.MapType.getValue());
    sb.add(Helper.BigInt2Bytes(BigInteger.valueOf(map.size())));
    for (    Map.Entry e : map.entrySet()) {
      sb.add(Type.ByteArrayType.getValue());
      sb.push(((String)e.getKey()).getBytes());
      if (e.getValue() instanceof byte[]) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push((byte[])e.getValue());
      }
 else       if (e.getValue() instanceof String) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(((String)e.getValue()).getBytes());
      }
 else       if (e.getValue() instanceof Integer) {
        sb.add(Type.IntegerType.getValue());
        sb.push(Helper.BigInt2Bytes(BigInteger.valueOf((Integer)e.getValue())));
      }
 else       if (e.getValue() instanceof Long) {
        sb.add(Type.IntegerType.getValue());
        sb.push(Helper.BigInt2Bytes(BigInteger.valueOf((Long)e.getValue())));
      }
 else {
        throw new SDKException(ErrorCode.ParamError);
      }
    }
  }
 catch (  SDKException e) {
    e.printStackTrace();
  }
  return sb.toArray();
}","public static byte[] getMapBytes(Object val){
  ScriptBuilder sb=null;
  try {
    sb=new ScriptBuilder();
    Map<String,Object> map=(Map)val;
    sb.add(Type.MapType.getValue());
    sb.add(Helper.BigIntToNeoBytes(BigInteger.valueOf(map.size())));
    for (    Map.Entry e : map.entrySet()) {
      sb.add(Type.ByteArrayType.getValue());
      sb.push(((String)e.getKey()).getBytes());
      if (e.getValue() instanceof byte[]) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push((byte[])e.getValue());
      }
 else       if (e.getValue() instanceof String) {
        sb.add(Type.ByteArrayType.getValue());
        sb.push(((String)e.getValue()).getBytes());
      }
 else       if (e.getValue() instanceof Integer) {
        sb.add(Type.IntegerType.getValue());
        sb.push(Helper.BigIntToNeoBytes(BigInteger.valueOf((Integer)e.getValue())));
      }
 else       if (e.getValue() instanceof Long) {
        sb.add(Type.IntegerType.getValue());
        sb.push(Helper.BigIntToNeoBytes(BigInteger.valueOf((Long)e.getValue())));
      }
 else {
        throw new SDKException(ErrorCode.ParamError);
      }
    }
  }
 catch (  SDKException e) {
    e.printStackTrace();
  }
  return sb.toArray();
}"
63125,"/** 
 * @param list
 * @return
 */
public static byte[] createCodeParamsScript(List<Object> list){
  ScriptBuilder sb=new ScriptBuilder();
  try {
    for (int i=list.size() - 1; i >= 0; i--) {
      Object val=list.get(i);
      if (val instanceof byte[]) {
        sb.push((byte[])val);
      }
 else       if (val instanceof Boolean) {
        sb.push((Boolean)val);
      }
 else       if (val instanceof Integer) {
        sb.push(Helper.BigInt2Bytes(BigInteger.valueOf((int)val)));
      }
 else       if (val instanceof Long) {
        sb.push(Helper.BigInt2Bytes(BigInteger.valueOf((Long)val)));
      }
 else       if (val instanceof BigInteger) {
        sb.push((BigInteger)val);
      }
 else       if (val instanceof Map) {
        byte[] bys=getMapBytes(val);
        sb.push(bys);
      }
 else       if (val instanceof Struct) {
        byte[] bys=getStructBytes(val);
        sb.push(bys);
      }
 else       if (val instanceof List) {
        List tmp=(List)val;
        createCodeParamsScript(sb,tmp);
        sb.push(new BigInteger(String.valueOf(tmp.size())));
        sb.pushPack();
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return sb.toArray();
}","/** 
 * @param list
 * @return
 */
public static byte[] createCodeParamsScript(List<Object> list){
  ScriptBuilder sb=new ScriptBuilder();
  try {
    for (int i=list.size() - 1; i >= 0; i--) {
      Object val=list.get(i);
      if (val instanceof byte[]) {
        sb.push((byte[])val);
      }
 else       if (val instanceof Boolean) {
        sb.push((Boolean)val);
      }
 else       if (val instanceof Integer) {
        sb.push(Helper.BigIntToNeoBytes(BigInteger.valueOf((int)val)));
      }
 else       if (val instanceof Long) {
        sb.push(Helper.BigIntToNeoBytes(BigInteger.valueOf((Long)val)));
      }
 else       if (val instanceof BigInteger) {
        sb.push((BigInteger)val);
      }
 else       if (val instanceof Map) {
        byte[] bys=getMapBytes(val);
        sb.push(bys);
      }
 else       if (val instanceof Struct) {
        byte[] bys=getStructBytes(val);
        sb.push(bys);
      }
 else       if (val instanceof List) {
        List tmp=(List)val;
        createCodeParamsScript(sb,tmp);
        sb.push(new BigInteger(String.valueOf(tmp.size())));
        sb.pushPack();
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return sb.toArray();
}"
63126,"@Test public void bigInt2Bytes(){
  BigInteger bigInteger=BigInteger.valueOf(1000000000000L);
  String aa=Helper.toHexString(Helper.BigInt2Bytes(bigInteger));
  System.out.println(aa);
  BigInteger bb=Helper.BigIntFromBytes(Helper.hexToBytes(aa));
  assertTrue(bigInteger.equals(bb));
}","@Test public void bigInt2Bytes(){
  BigInteger bigInteger=BigInteger.valueOf(1000000000000L);
  String aa=Helper.toHexString(Helper.BigIntToNeoBytes(bigInteger));
  System.out.println(aa);
  BigInteger bb=Helper.BigIntFromNeoBytes(Helper.hexToBytes(aa));
  assertTrue(bigInteger.equals(bb));
}"
63127,"public Object sendTransaction(String contractAddr,Account acct,Account payerAcct,long gaslimit,long gasprice,AbiFunction func,boolean preExec) throws Exception {
  byte[] params=BuildParams.serializeAbiFunction(func);
  if (preExec) {
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,null,0,0);
    if (acct != null) {
      sdk.signTx(tx,new Account[][]{{acct}});
    }
    Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
    return obj;
  }
 else {
    String payer=payerAcct.getAddressU160().toBase58();
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,payer,gaslimit,gasprice);
    sdk.signTx(tx,new Account[][]{{acct}});
    if (!payer.equals(payerAcct.getAddressU160().toBase58())) {
      sdk.addSign(tx,payerAcct);
    }
    boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
    if (!b) {
      throw new SDKException(ErrorCode.SendRawTxError);
    }
    return tx.hash().toHexString();
  }
}","public Object sendTransaction(String contractAddr,Account acct,Account payerAcct,long gaslimit,long gasprice,AbiFunction func,boolean preExec) throws Exception {
  byte[] params;
  if (func != null) {
    params=BuildParams.serializeAbiFunction(func);
  }
 else {
    params=new byte[]{};
  }
  if (preExec) {
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,null,0,0);
    if (acct != null) {
      sdk.signTx(tx,new Account[][]{{acct}});
    }
    Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
    return obj;
  }
 else {
    String payer=payerAcct.getAddressU160().toBase58();
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,payer,gaslimit,gasprice);
    sdk.signTx(tx,new Account[][]{{acct}});
    if (!payer.equals(payerAcct.getAddressU160().toBase58())) {
      sdk.addSign(tx,payerAcct);
    }
    boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
    if (!b) {
      throw new SDKException(ErrorCode.SendRawTxError);
    }
    return tx.hash().toHexString();
  }
}"
63128,"public Object sendTransaction(String contractAddr,Account acct,Account payerAcct,long gaslimit,long gasprice,AbiFunction func,boolean preExec) throws Exception {
  byte[] params;
  if (func != null) {
    params=BuildParams.serializeAbiFunction(func);
  }
 else {
    params=new byte[]{};
  }
  if (preExec) {
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,null,0,0);
    if (acct != null) {
      sdk.signTx(tx,new Account[][]{{acct}});
    }
    Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
    return obj;
  }
 else {
    String payer=payerAcct.getAddressU160().toBase58();
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,payer,gaslimit,gasprice);
    sdk.signTx(tx,new Account[][]{{acct}});
    if (!payer.equals(payerAcct.getAddressU160().toBase58())) {
      sdk.addSign(tx,payerAcct);
    }
    boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
    if (!b) {
      throw new SDKException(ErrorCode.SendRawTxError);
    }
    return tx.hash().toHexString();
  }
}","public Object sendTransaction(String contractAddr,Account acct,Account payerAcct,long gaslimit,long gasprice,AbiFunction func,boolean preExec) throws Exception {
  byte[] params;
  if (func != null) {
    params=BuildParams.serializeAbiFunction(func);
  }
 else {
    params=new byte[]{};
  }
  if (preExec) {
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,null,0,0);
    if (acct != null) {
      sdk.signTx(tx,new Account[][]{{acct}});
    }
    Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
    return obj;
  }
 else {
    String payer=payerAcct.getAddressU160().toBase58();
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,payer,gaslimit,gasprice);
    sdk.signTx(tx,new Account[][]{{acct}});
    if (!acct.equals(payerAcct.getAddressU160().toBase58())) {
      sdk.addSign(tx,payerAcct);
    }
    boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
    if (!b) {
      throw new SDKException(ErrorCode.SendRawTxError);
    }
    return tx.hash().toHexString();
  }
}"
63129,"public static ProgramInfo getProgramInfo(byte[] program) throws IOException {
  ProgramInfo info=new ProgramInfo();
  if (program.length <= 2) {
  }
  byte end=program[program.length - 1];
  byte[] temp=new byte[program.length - 1];
  System.arraycopy(program,0,temp,0,program.length - 1);
  ByteArrayInputStream bais=new ByteArrayInputStream(temp);
  BinaryReader reader=new BinaryReader(bais);
  if (end == ScriptOp.OP_CHECKSIG.getByte()) {
    try {
      byte[] publicKey=readBytes(reader);
      info.setPublicKey(new byte[][]{publicKey});
      info.setM((short)1);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (end == ScriptOp.OP_CHECKMULTISIG.getByte()) {
    short m=0;
    try {
      m=readNum(reader);
    }
 catch (    SDKException e) {
      e.printStackTrace();
    }
    byte[][] pub=new byte[m][];
    for (int i=0; i < (int)m; i++) {
      pub[i]=readBytes(reader);
    }
    info.setPublicKey(pub);
    List<byte[]> buffer=new ArrayList();
    while (true) {
      ScriptOp code=readOpCode(reader);
      if (code == ScriptOp.OP_CHECKMULTISIG) {
        readOpCode(reader);
        break;
      }
 else       if (code == ScriptOp.OP_0) {
        readOpCode(reader);
        BigInteger bint=BigInteger.valueOf(0);
        buffer.add(Helper.BigInt2Bytes(bint));
      }
 else {
        int num=(int)code.getByte() - (int)ScriptOp.OP_1.getByte() + 1;
        if (num >= 1 && num <= 16) {
          readOpCode(reader);
          BigInteger bint=BigInteger.valueOf(num);
          buffer.add(Helper.BigInt2Bytes(bint));
        }
 else {
          buffer.add(readBytes(reader));
        }
      }
    }
    byte[][] buffers=new byte[buffer.size()][];
    for (int i=0; i < buffer.size(); i++) {
      buffers[i]=buffer.get(i);
    }
    BigInteger bint=new BigInteger(buffers[buffers.length - 1]);
    long n=bint.longValue();
    if (1 <= m && m <= n && n <= 1024) {
    }
    info.setPublicKey(buffers);
  }
  return info;
}","public static ProgramInfo getProgramInfo(byte[] program) throws IOException {
  ProgramInfo info=new ProgramInfo();
  if (program.length <= 2) {
  }
  byte end=program[program.length - 1];
  byte[] temp=new byte[program.length - 1];
  System.arraycopy(program,0,temp,0,program.length - 1);
  ByteArrayInputStream bais=new ByteArrayInputStream(temp);
  BinaryReader reader=new BinaryReader(bais);
  if (end == ScriptOp.OP_CHECKSIG.getByte()) {
    try {
      byte[] publicKey=readBytes(reader);
      info.setPublicKey(new byte[][]{publicKey});
      info.setM((short)1);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (end == ScriptOp.OP_CHECKMULTISIG.getByte()) {
    short m=0;
    int len=program[program.length - 2] - ScriptOp.OP_PUSH1.getByte() + 1;
    try {
      m=reader.readByte();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    byte[][] pub=new byte[len][];
    for (int i=0; i < (int)len; i++) {
      pub[i]=reader.readVarBytes();
    }
    info.setPublicKey(pub);
    info.setM(m);
  }
  return info;
}"
63130,"public static short readNum(BinaryReader reader) throws IOException, SDKException {
  ScriptOp code=readOpCode(reader);
  if (code == ScriptOp.OP_0) {
    readOpCode(reader);
    return 0;
  }
 else {
    int num=(int)code.getByte() - (int)ScriptOp.OP_1.getByte() + 1;
    if (num >= 1 && num <= 16) {
      readOpCode(reader);
      return (short)num;
    }
  }
  byte[] buff=readBytes(reader);
  BigInteger bint=Helper.BigIntFromBytes(buff);
  long num=bint.longValue();
  if (num > Short.MAX_VALUE || num < 16) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  return (short)num;
}","public static short readNum(BinaryReader reader) throws IOException, SDKException {
  ScriptOp code=readOpCode(reader);
  if (code == ScriptOp.OP_PUSH0) {
    readOpCode(reader);
    return 0;
  }
 else {
    int num=(int)code.getByte() - (int)ScriptOp.OP_PUSH1.getByte() + 1;
    if (num >= 1 && num <= 16) {
      readOpCode(reader);
      return (short)num;
    }
  }
  byte[] buff=readBytes(reader);
  BigInteger bint=Helper.BigIntFromBytes(buff);
  long num=bint.longValue();
  if (num > Short.MAX_VALUE || num < 16) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  return (short)num;
}"
63131,"/** 
 * @param peerPubkey
 * @param addr
 * @return
 */
public VoteInfo getVoteInfo(String peerPubkey,Address addr){
  byte[] peerPubkeyPrefix=Helper.hexToBytes(peerPubkey);
  byte[] address=addr.toArray();
  byte[] voteInfoPool=VOTE_INFO_POOL.getBytes();
  byte[] key=new byte[voteInfoPool.length + peerPubkeyPrefix.length + address.length];
  System.arraycopy(voteInfoPool,0,key,0,voteInfoPool.length);
  System.arraycopy(peerPubkeyPrefix,0,key,voteInfoPool.length,peerPubkeyPrefix.length);
  System.arraycopy(address,0,key,voteInfoPool.length + peerPubkeyPrefix.length,address.length);
  String res=null;
  try {
    res=sdk.getConnect().getStorage(Helper.reverse(contractAddress),Helper.toHexString(key));
    if (!res.equals(""String_Node_Str"")) {
      return Serializable.from(Helper.hexToBytes(res),VoteInfo.class);
    }
  }
 catch (  ConnectorException e) {
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * @param peerPubkey
 * @param addr
 * @return
 */
public VoteInfo getVoteInfo(String peerPubkey,Address addr){
  byte[] peerPubkeyPrefix=Helper.hexToBytes(peerPubkey);
  byte[] address=addr.toArray();
  byte[] voteInfoPool=VOTE_INFO_POOL.getBytes();
  byte[] key=new byte[voteInfoPool.length + peerPubkeyPrefix.length + address.length];
  System.arraycopy(voteInfoPool,0,key,0,voteInfoPool.length);
  System.arraycopy(peerPubkeyPrefix,0,key,voteInfoPool.length,peerPubkeyPrefix.length);
  System.arraycopy(address,0,key,voteInfoPool.length + peerPubkeyPrefix.length,address.length);
  String res=null;
  try {
    res=sdk.getConnect().getStorage(Helper.reverse(contractAddress),Helper.toHexString(key));
    if (res != null && !res.equals(""String_Node_Str"")) {
      return Serializable.from(Helper.hexToBytes(res),VoteInfo.class);
    }
  }
 catch (  ConnectorException e) {
    return null;
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
  return null;
}"
63132,"public static void main(String[] args){
  try {
    OntSdk ontSdk=getOntSdk();
    com.github.ontio.account.Account acct1=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey1),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct2=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey2),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct3=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey3),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct4=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey4),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct5=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey5),ontSdk.defaultSignScheme);
    Account acct=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey0),ontSdk.defaultSignScheme);
    System.out.println(""String_Node_Str"" + acct.getAddressU160().toBase58());
    if (false) {
      long gasLimit=ontSdk.neovm().nep5().sendInitGetGasLimit();
      System.out.println(gasLimit);
      System.exit(0);
    }
    long gasLimit=ontSdk.neovm().nep5().sendTransferGetGasLimit(acct,acct1.getAddressU160().toBase58(),9000000000L);
    System.out.println(gasLimit);
    ontSdk.neovm().nep5().sendTransfer(acct,acct1.getAddressU160().toBase58(),1000000000L,acct,gasLimit,0);
    if (false) {
      String sendAddr=null;
      byte[][] pubkeys=new byte[2][];
      pubkeys[0]=acct.serializePublicKey();
      pubkeys[1]=acct2.serializePublicKey();
      sendAddr=Address.addressFromMultiPubKeys(2,pubkeys).toBase58();
      Transaction tx=ontSdk.neovm().nep5().makeTransfer(sendAddr,acct1.getAddressU160().toBase58(),1000000000L,acct,gasLimit,0);
      ontSdk.addMultiSign(tx,2,new Account[]{acct,acct2});
      Object obj=ontSdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
      System.out.println(obj);
    }
    String balance=ontSdk.neovm().nep5().queryBalanceOf(acct.getAddressU160().toBase58());
    System.out.println(new BigInteger(Helper.reverse(Helper.hexToBytes(balance))).longValue());
    System.exit(0);
    String totalSupply=ontSdk.neovm().nep5().queryTotalSupply();
    System.out.println(new BigInteger(Helper.reverse(Helper.hexToBytes(totalSupply))).longValue());
    System.exit(0);
    String decimals=ontSdk.neovm().nep5().queryDecimals();
    System.out.println(decimals);
    String name=ontSdk.neovm().nep5().queryName();
    System.out.println(new String(Helper.hexToBytes(name)));
    String symbol=ontSdk.neovm().nep5().querySymbol();
    System.out.println(new String(Helper.hexToBytes(symbol)));
    System.out.println(Address.decodeBase58(acct.getAddressU160().toBase58()).toHexString());
    System.out.println(acct1.getAddressU160().toHexString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    OntSdk ontSdk=getOntSdk();
    com.github.ontio.account.Account acct1=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey1),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct2=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey2),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct3=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey3),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct4=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey4),ontSdk.defaultSignScheme);
    com.github.ontio.account.Account acct5=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey5),ontSdk.defaultSignScheme);
    Account acct=new com.github.ontio.account.Account(Helper.hexToBytes(privatekey0),ontSdk.defaultSignScheme);
    System.out.println(""String_Node_Str"" + acct.getAddressU160().toBase58());
    System.out.println(""String_Node_Str"" + acct1.getAddressU160().toBase58());
    if (false) {
      long gasLimit=ontSdk.neovm().nep5().sendInitGetGasLimit();
      System.out.println(gasLimit);
      String result=ontSdk.neovm().nep5().sendInit(acct,acct,30000,0);
      System.out.println(result);
      System.exit(0);
    }
    String multiAddr=Address.addressFromMultiPubKeys(2,acct.serializePublicKey(),acct2.serializePublicKey()).toBase58();
    System.out.println(""String_Node_Str"" + multiAddr);
    if (false) {
      long gasLimit=ontSdk.neovm().nep5().sendTransferGetGasLimit(acct,acct1.getAddressU160().toBase58(),9000000000L);
      System.out.println(gasLimit);
      ontSdk.neovm().nep5().sendTransfer(acct,acct1.getAddressU160().toBase58(),1000000000L,acct,gasLimit,0);
      ontSdk.neovm().nep5().sendTransfer(acct,multiAddr,1000000000L,acct,gasLimit,0);
      System.exit(0);
    }
    if (true) {
      String balance=ontSdk.neovm().nep5().queryBalanceOf(multiAddr);
      System.out.println(new BigInteger(Helper.reverse(Helper.hexToBytes(balance))).longValue());
      Transaction tx=ontSdk.neovm().nep5().makeTransfer(multiAddr,acct1.getAddressU160().toBase58(),10000000L,acct,50000,0);
      ontSdk.addSign(tx,acct);
      ontSdk.addMultiSign(tx,2,new Account[]{acct,acct2});
      Object obj=ontSdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
      System.out.println(obj);
      System.out.println(tx.hash().toString());
      System.exit(0);
    }
    String balance=ontSdk.neovm().nep5().queryBalanceOf(acct.getAddressU160().toBase58());
    System.out.println(new BigInteger(Helper.reverse(Helper.hexToBytes(balance))).longValue());
    balance=ontSdk.neovm().nep5().queryBalanceOf(multiAddr);
    System.out.println(new BigInteger(Helper.reverse(Helper.hexToBytes(balance))).longValue());
    System.exit(0);
    String totalSupply=ontSdk.neovm().nep5().queryTotalSupply();
    System.out.println(new BigInteger(Helper.reverse(Helper.hexToBytes(totalSupply))).longValue());
    System.exit(0);
    String decimals=ontSdk.neovm().nep5().queryDecimals();
    System.out.println(decimals);
    String name=ontSdk.neovm().nep5().queryName();
    System.out.println(new String(Helper.hexToBytes(name)));
    String symbol=ontSdk.neovm().nep5().querySymbol();
    System.out.println(new String(Helper.hexToBytes(symbol)));
    System.out.println(Address.decodeBase58(acct.getAddressU160().toBase58()).toHexString());
    System.out.println(acct1.getAddressU160().toHexString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
63133,"public static OntSdk getOntSdk() throws Exception {
  String ip=""String_Node_Str"";
  String restUrl=ip + ""String_Node_Str"" + ""String_Node_Str"";
  String rpcUrl=ip + ""String_Node_Str"" + ""String_Node_Str"";
  String wsUrl=ip + ""String_Node_Str"" + ""String_Node_Str"";
  OntSdk wm=OntSdk.getInstance();
  wm.setRpc(rpcUrl);
  wm.setRestful(restUrl);
  wm.setDefaultConnect(wm.getRestful());
  wm.neovm().nep5().setContractAddress(""String_Node_Str"");
  wm.openWalletFile(""String_Node_Str"");
  return wm;
}","public static OntSdk getOntSdk() throws Exception {
  String ip=""String_Node_Str"";
  String restUrl=ip + ""String_Node_Str"" + ""String_Node_Str"";
  String rpcUrl=ip + ""String_Node_Str"" + ""String_Node_Str"";
  String wsUrl=ip + ""String_Node_Str"" + ""String_Node_Str"";
  OntSdk wm=OntSdk.getInstance();
  wm.setRpc(rpcUrl);
  wm.setRestful(restUrl);
  wm.setDefaultConnect(wm.getRestful());
  wm.neovm().nep5().setContractAddress(Helper.reverse(""String_Node_Str""));
  wm.openWalletFile(""String_Node_Str"");
  return wm;
}"
63134,"public Identity getDefaultIdentity(){
  for (  Identity e : getIdentities()) {
    if (e.isDefault) {
      return e;
    }
  }
  return null;
}","public String getDefaultIdentity(){
  for (  Identity e : getIdentities()) {
    if (e.isDefault) {
      return e.ontid;
    }
  }
  return null;
}"
63135,"public Account getDefaultAccount(){
  for (  Account e : getAccounts()) {
    if (e.isDefault) {
      return e;
    }
  }
  return null;
}","public String getDefaultAccount(){
  for (  Account e : getAccounts()) {
    if (e.isDefault) {
      return e.address;
    }
  }
  return null;
}"
63136,"/** 
 * @param ontid
 * @param password
 * @param contractAddr
 * @param funcName
 * @param keyNo
 * @return
 * @throws Exception
 */
public String verifyToken(String ontid,String password,byte[] salt,long keyNo,String contractAddr,String funcName) throws Exception {
  if (ontid == null || ontid.equals(""String_Node_Str"") || password == null || password.equals(""String_Node_Str"") || contractAddr == null || contractAddr.equals(""String_Node_Str"") || funcName == null || funcName.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (keyNo < 0) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  Transaction tx=makeVerifyToken(ontid,contractAddr,funcName,keyNo);
  sdk.signTx(tx,ontid,password,salt);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  if (Integer.parseInt(((JSONObject)obj).getString(""String_Node_Str"")) != 1) {
    throw new SDKException(ErrorCode.OtherError(""String_Node_Str"" + obj));
  }
  return tx.hash().toHexString();
}","/** 
 * @param ontid
 * @param password
 * @param contractAddr
 * @param funcName
 * @param keyNo
 * @return
 * @throws Exception
 */
public String verifyToken(String ontid,String password,byte[] salt,long keyNo,String contractAddr,String funcName) throws Exception {
  if (ontid == null || ontid.equals(""String_Node_Str"") || password == null || password.equals(""String_Node_Str"") || contractAddr == null || contractAddr.equals(""String_Node_Str"") || funcName == null || funcName.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (keyNo < 0) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  Transaction tx=makeVerifyToken(ontid,contractAddr,funcName,keyNo);
  sdk.signTx(tx,ontid,password,salt);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  if (Integer.parseInt(((JSONObject)obj).getString(""String_Node_Str"")) != 1) {
    throw new SDKException(ErrorCode.OtherError(""String_Node_Str"" + obj));
  }
  return ((JSONObject)obj).getString(""String_Node_Str"");
}"
63137,"/** 
 * @param adminOntId
 * @param password
 * @param payerAcct
 * @param gaslimit
 * @param gasprice
 * @return
 * @throws Exception
 */
public String commitDpos(String adminOntId,String password,byte[] salt,Account payerAcct,long gaslimit,long gasprice) throws Exception {
  Transaction tx=sdk.vm().buildNativeParams(new Address(Helper.hexToBytes(contractAddress)),""String_Node_Str"",new byte[]{},payerAcct.getAddressU160().toBase58(),gaslimit,gasprice);
  sdk.signTx(tx,adminOntId,password,salt);
  sdk.addSign(tx,payerAcct);
  boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
  if (b) {
    return tx.hash().toString();
  }
  return null;
}","/** 
 * @param adminOntId
 * @param password
 * @param payerAcct
 * @param gaslimit
 * @param gasprice
 * @return
 * @throws Exception
 */
public String commitDpos(String adminOntId,String password,byte[] salt,Account payerAcct,long gaslimit,long gasprice) throws Exception {
  Transaction tx=sdk.vm().buildNativeParams(new Address(Helper.hexToBytes(contractAddress)),""String_Node_Str"",new byte[]{0},payerAcct.getAddressU160().toBase58(),gaslimit,gasprice);
  sdk.signTx(tx,adminOntId,password,salt);
  sdk.addSign(tx,payerAcct);
  boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
  if (b) {
    return tx.hash().toString();
  }
  return null;
}"
63138,"public static void main(String[] args){
  OntSdk sdk;
  try {
    sdk=getOntSdk();
    String password=""String_Node_Str"";
    String privatekey1=""String_Node_Str"";
    Account payerAcct=new Account(Helper.hexToBytes(privatekey1),SignatureScheme.SHA256WITHECDSA);
    String privatekey9=""String_Node_Str"";
    String privatekey8=""String_Node_Str"";
    String privatekey7=""String_Node_Str"";
    Account account9=new Account(Helper.hexToBytes(privatekey9),SignatureScheme.SHA256WITHECDSA);
    String prikey=""String_Node_Str"";
    prikey=""String_Node_Str"";
    Account account=new Account(Helper.hexToBytes(prikey),SignatureScheme.SHA256WITHECDSA);
    Account account8=new Account(Helper.hexToBytes(privatekey8),SignatureScheme.SHA256WITHECDSA);
    Account account7=new Account(Helper.hexToBytes(privatekey7),SignatureScheme.SHA256WITHECDSA);
    if (sdk.getWalletMgr().getWallet().getIdentities().size() < 2) {
      Identity identity=sdk.getWalletMgr().createIdentity(password);
      String txhash=sdk.nativevm().ontId().sendRegister(identity,password,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Identity identity2=sdk.getWalletMgr().createIdentity(password);
      String txhash2=sdk.nativevm().ontId().sendRegister(identity2,password,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      Object obj=sdk.getConnect().getSmartCodeEvent(txhash);
      System.out.println(obj);
      sdk.getWalletMgr().writeWallet();
    }
    if (false) {
      System.out.println(sdk.getConnect().getBalance(account.getAddressU160().toBase58()));
      System.out.println(sdk.nativevm().ong().unclaimOng(account.getAddressU160().toBase58()));
    }
    if (true) {
      Identity identity=sdk.getWalletMgr().createIdentityFromPriKey(""String_Node_Str"",prikey);
      String txhash=sdk.nativevm().ontId().sendRegister(identity,password,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      Object obj=sdk.getConnect().getSmartCodeEvent(txhash);
      System.out.println(obj);
    }
    List<Identity> dids=sdk.getWalletMgr().getWallet().getIdentities();
    Identity identity=dids.get(0);
    if (false) {
      String contractAddr=""String_Node_Str"";
      Identity adminOntid=sdk.getWalletMgr().importIdentity(""String_Node_Str"",password,Base64.getDecoder().decode(""String_Node_Str""),account.getAddressU160().toBase58());
      String txhash=sdk.nativevm().auth().verifyToken(identity.ontid,password,identity.controls.get(0).getSalt(),1,contractAddr,""String_Node_Str"");
      Thread.sleep(6000);
      Object obj=sdk.getConnect().getSmartCodeEvent(txhash);
      System.out.println(obj);
    }
    Account account1=new Account(Helper.hexToBytes(privatekey9),SignatureScheme.SHA256WITHECDSA);
    if (false) {
      sdk.getWalletMgr().importAccount(""String_Node_Str"",password,account.getAddressU160().toBase58(),Base64.getDecoder().decode(""String_Node_Str""));
      String txhash=sdk.nativevm().governance().registerCandidate(account,Helper.toHexString(account7.serializePublicKey()),100000,identity.ontid,password,identity.controls.get(0).getSalt(),1,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      Object obj=sdk.getConnect().getSmartCodeEvent(txhash);
      System.out.println(obj);
    }
    if (false) {
      Identity adminOntid=sdk.getWalletMgr().importIdentity(""String_Node_Str"",password,new byte[]{},account.getAddressU160().toBase58());
      String txhash=sdk.nativevm().governance().withdraw(account,new String[]{Helper.toHexString(account7.serializePublicKey())},new long[]{100},payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      System.out.println(sdk.getConnect().getSmartCodeEvent(txhash));
      System.out.println(sdk.getConnect().getBalance(account.getAddressU160().toBase58()));
    }
    if (false) {
      System.out.println(""String_Node_Str"" + sdk.getConnect().getBalance(account.getAddressU160().toBase58()));
      String res=sdk.nativevm().governance().getPeerPoolMap();
      JSONObject jsr=JSONObject.parseObject(res);
      System.out.println(jsr.getString(Helper.toHexString(account7.serializePublicKey())));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  OntSdk sdk;
  try {
    sdk=getOntSdk();
    System.out.println(sdk.getConnect().getBalance(Address.parse(""String_Node_Str"").toBase58()));
    System.out.println(sdk.nativevm().ong().unclaimOng(Address.parse(""String_Node_Str"").toBase58()));
    System.exit(0);
    String password=""String_Node_Str"";
    String privatekey1=""String_Node_Str"";
    Account payerAcct=new Account(Helper.hexToBytes(privatekey1),SignatureScheme.SHA256WITHECDSA);
    String privatekey9=""String_Node_Str"";
    String privatekey8=""String_Node_Str"";
    String privatekey7=""String_Node_Str"";
    Account account9=new Account(Helper.hexToBytes(privatekey9),SignatureScheme.SHA256WITHECDSA);
    String prikey=""String_Node_Str"";
    Account account=new Account(Helper.hexToBytes(prikey),SignatureScheme.SHA256WITHECDSA);
    Account account8=new Account(Helper.hexToBytes(privatekey8),SignatureScheme.SHA256WITHECDSA);
    Account account7=new Account(Helper.hexToBytes(privatekey7),SignatureScheme.SHA256WITHECDSA);
    if (sdk.getWalletMgr().getWallet().getIdentities().size() < 2) {
      Identity identity=sdk.getWalletMgr().createIdentity(password);
      String txhash=sdk.nativevm().ontId().sendRegister(identity,password,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Identity identity2=sdk.getWalletMgr().createIdentity(password);
      String txhash2=sdk.nativevm().ontId().sendRegister(identity2,password,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      Object obj=sdk.getConnect().getSmartCodeEvent(txhash);
      System.out.println(obj);
      sdk.getWalletMgr().writeWallet();
    }
    if (false) {
      sdk.nativevm().ont().sendTransfer(account,account9.getAddressU160().toBase58(),100000000,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      System.out.println(""String_Node_Str"" + sdk.getConnect().getBalance(account.getAddressU160().toBase58()));
      System.out.println(""String_Node_Str"" + sdk.nativevm().ong().unclaimOng(account.getAddressU160().toBase58()));
      sdk.nativevm().ong().claimOng(account,account9.getAddressU160().toBase58(),640000000000L,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
    }
    if (false) {
      Identity identity=sdk.getWalletMgr().createIdentityFromPriKey(password,prikey);
      String txhash=sdk.nativevm().ontId().sendRegister(identity,password,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      Object obj=sdk.getConnect().getSmartCodeEvent(txhash);
      System.out.println(obj);
    }
    List<Identity> dids=sdk.getWalletMgr().getWallet().getIdentities();
    Identity identity=dids.get(0);
    System.out.println(""String_Node_Str"" + identity.ontid);
    System.out.println(""String_Node_Str"" + sdk.getConnect().getBalance(account9.getAddressU160().toBase58()));
    if (false) {
      String contractAddr=""String_Node_Str"";
      Identity adminOntid=sdk.getWalletMgr().getWallet().getIdentity(""String_Node_Str"");
      Object obj=sdk.nativevm().auth().verifyToken(identity.ontid,password,identity.controls.get(0).getSalt(),1,contractAddr,""String_Node_Str"");
      System.out.println(obj);
    }
    Account account1=new Account(Helper.hexToBytes(privatekey9),SignatureScheme.SHA256WITHECDSA);
    if (false) {
      sdk.getWalletMgr().importAccount(""String_Node_Str"",password,account.getAddressU160().toBase58(),Base64.getDecoder().decode(""String_Node_Str""));
      String txhash=sdk.nativevm().governance().registerCandidate(account9,Helper.toHexString(account8.serializePublicKey()),100000,identity.ontid,password,identity.controls.get(0).getSalt(),1,payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      Object obj=sdk.getConnect().getSmartCodeEvent(txhash);
      System.out.println(obj);
    }
    if (false) {
      Identity adminOntid=sdk.getWalletMgr().getWallet().getIdentity(""String_Node_Str"");
      String txhash=sdk.nativevm().governance().withdraw(account9,new String[]{Helper.toHexString(account8.serializePublicKey())},new long[]{100},payerAcct,sdk.DEFAULT_GAS_LIMIT,0);
      Thread.sleep(6000);
      System.out.println(sdk.getConnect().getSmartCodeEvent(txhash));
      System.out.println(""String_Node_Str"" + sdk.getConnect().getBalance(account9.getAddressU160().toBase58()));
    }
    if (true) {
      System.out.println(""String_Node_Str"" + sdk.getConnect().getBalance(account9.getAddressU160().toBase58()));
      String res=sdk.nativevm().governance().getPeerPoolMap();
      JSONObject jsr=JSONObject.parseObject(res);
      System.out.println(jsr.getString(Helper.toHexString(account8.serializePublicKey())));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
63139,"public Object sendTransaction(String contractAddr,Account acct,Account payerAcct,long gaslimit,long gasprice,AbiFunction func,boolean preExec) throws Exception {
  byte[] params=BuildParams.serializeAbiFunction(func);
  if (preExec) {
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,null,0,0);
    sdk.signTx(tx,new Account[][]{{acct}});
    Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
    return obj;
  }
 else {
    String payer=payerAcct.getAddressU160().toBase58();
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,payer,gaslimit,gasprice);
    sdk.signTx(tx,new Account[][]{{acct}});
    if (!payer.equals(payerAcct.getAddressU160().toBase58())) {
      sdk.addSign(tx,payerAcct);
    }
    boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
    if (!b) {
      throw new SDKException(ErrorCode.SendRawTxError);
    }
    return tx.hash().toHexString();
  }
}","public Object sendTransaction(String contractAddr,Account acct,Account payerAcct,long gaslimit,long gasprice,AbiFunction func,boolean preExec) throws Exception {
  byte[] params=BuildParams.serializeAbiFunction(func);
  if (preExec) {
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,null,0,0);
    if (acct != null) {
      sdk.signTx(tx,new Account[][]{{acct}});
    }
    Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
    return obj;
  }
 else {
    String payer=payerAcct.getAddressU160().toBase58();
    Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddr,null,params,payer,gaslimit,gasprice);
    sdk.signTx(tx,new Account[][]{{acct}});
    if (!payer.equals(payerAcct.getAddressU160().toBase58())) {
      sdk.addSign(tx,payerAcct);
    }
    boolean b=sdk.getConnect().sendRawTransaction(tx.toHexString());
    if (!b) {
      throw new SDKException(ErrorCode.SendRawTxError);
    }
    return tx.hash().toHexString();
  }
}"
63140,"/** 
 * @param ontid
 * @param recoveryOntid
 * @param password
 * @param newpubkey
 * @param payer
 * @param gaslimit
 * @param gasprice
 * @return
 * @throws Exception
 */
public Transaction makeAddPubKey(String ontid,String recoveryOntid,String password,String newpubkey,String payer,long gaslimit,long gasprice) throws Exception {
  if (ontid == null || ontid.equals(""String_Node_Str"") || payer == null || payer.equals(""String_Node_Str"") || newpubkey == null || newpubkey.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (gasprice < 0 || gaslimit < 0) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  byte[] parabytes;
  String recoveryAddr=recoveryOntid.replace(Common.didont,""String_Node_Str"");
  if (recoveryAddr == null) {
    AccountInfo info=sdk.getWalletMgr().getAccountInfo(ontid,password);
    byte[] pk=Helper.hexToBytes(info.pubkey);
    parabytes=BuildParams.buildParams(ontid.getBytes(),Helper.hexToBytes(newpubkey),pk);
  }
 else {
    parabytes=BuildParams.buildParams(ontid,Helper.hexToBytes(newpubkey),Address.decodeBase58(recoveryAddr).toArray());
  }
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),payer,gaslimit,gasprice);
  return tx;
}","/** 
 * @param ontid
 * @param recoveryOntid
 * @param password
 * @param newpubkey
 * @param payer
 * @param gaslimit
 * @param gasprice
 * @return
 * @throws Exception
 */
public Transaction makeAddPubKey(String ontid,String recoveryOntid,String password,String newpubkey,String payer,long gaslimit,long gasprice) throws Exception {
  if (ontid == null || ontid.equals(""String_Node_Str"") || payer == null || payer.equals(""String_Node_Str"") || newpubkey == null || newpubkey.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  if (gasprice < 0 || gaslimit < 0) {
    throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
  }
  byte[] parabytes;
  if (recoveryOntid == null) {
    AccountInfo info=sdk.getWalletMgr().getAccountInfo(ontid,password);
    byte[] pk=Helper.hexToBytes(info.pubkey);
    parabytes=BuildParams.buildParams(ontid.getBytes(),Helper.hexToBytes(newpubkey),pk);
  }
 else {
    parabytes=BuildParams.buildParams(ontid,Helper.hexToBytes(newpubkey),Address.decodeBase58(recoveryOntid.replace(Common.didont,""String_Node_Str"")).toArray());
  }
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),payer,gaslimit,gasprice);
  return tx;
}"
63141,"@Test public void sendApprove() throws Exception {
  com.github.ontio.account.Account sendAcct1=ontSdk.getWalletMgr().getAccount(info1.address,password);
  com.github.ontio.account.Account sendAcct2=ontSdk.getWalletMgr().getAccount(info1.address,password);
  com.github.ontio.account.Account payerAcct=ontSdk.getWalletMgr().getAccount(payer.address,password);
  ontSdk.nativevm().ont().sendApprove(sendAcct1,info2.address,10L,payerAcct,ontSdk.DEFAULT_GAS_LIMIT,0);
  long info1balance=ontSdk.nativevm().ont().queryBalanceOf(info1.address);
  long info2balance=ontSdk.nativevm().ont().queryBalanceOf(info2.address);
  Thread.sleep(6000);
  long allo=ontSdk.nativevm().ont().queryAllowance(info1.address,info2.address);
  Assert.assertTrue(allo > 0);
  ontSdk.nativevm().ont().sendTransferFrom(sendAcct2,info1.address,info2.address,10L,payerAcct,ontSdk.DEFAULT_GAS_LIMIT,0);
  Thread.sleep(6000);
  long info1balance2=ontSdk.nativevm().ont().queryBalanceOf(info1.address);
  long info2balance2=ontSdk.nativevm().ont().queryBalanceOf(info2.address);
  Assert.assertTrue((info1balance - info1balance2) == 10);
  Assert.assertTrue((info2balance2 - info2balance) == 10);
}","@Test public void sendApprove() throws Exception {
  com.github.ontio.account.Account sendAcct1=ontSdk.getWalletMgr().getAccount(info1.address,password);
  com.github.ontio.account.Account sendAcct2=ontSdk.getWalletMgr().getAccount(info2.address,password);
  com.github.ontio.account.Account payerAcct=ontSdk.getWalletMgr().getAccount(payer.address,password);
  ontSdk.nativevm().ont().sendApprove(sendAcct1,sendAcct2.getAddressU160().toBase58(),10L,payerAcct,ontSdk.DEFAULT_GAS_LIMIT,0);
  long info1balance=ontSdk.nativevm().ont().queryBalanceOf(sendAcct1.getAddressU160().toBase58());
  long info2balance=ontSdk.nativevm().ont().queryBalanceOf(sendAcct2.getAddressU160().toBase58());
  Thread.sleep(6000);
  long allo=ontSdk.nativevm().ont().queryAllowance(sendAcct1.getAddressU160().toBase58(),sendAcct2.getAddressU160().toBase58());
  Assert.assertTrue(allo == 10);
  ontSdk.nativevm().ont().sendTransferFrom(sendAcct2,info1.address,sendAcct2.getAddressU160().toBase58(),10L,payerAcct,ontSdk.DEFAULT_GAS_LIMIT,0);
  Thread.sleep(6000);
  long info1balance2=ontSdk.nativevm().ont().queryBalanceOf(info1.address);
  long info2balance2=ontSdk.nativevm().ont().queryBalanceOf(info2.address);
  Assert.assertTrue((info1balance - info1balance2) == 10);
  Assert.assertTrue((info2balance2 - info2balance) == 10);
}"
63142,"@Test public void createIdentity() throws Exception {
  Identity identity=walletMgr.createIdentity(password);
  assertNotNull(identity);
  assertNotNull(identity.ontid);
  assertNotEquals(identity.ontid,""String_Node_Str"");
}","@Test public void createIdentity() throws Exception {
  Identity identity=walletMgr.createIdentity(password);
  com.github.ontio.account.Account account=walletMgr.getAccount(identity.ontid,password);
  assertNotNull(account);
  assertNotNull(identity);
  assertNotNull(identity.ontid);
  assertNotEquals(identity.ontid,""String_Node_Str"");
}"
63143,"public Wallet writeWallet() throws Exception {
  writeFile(filePath,JSON.toJSONString(wallet));
  walletFile=wallet;
  return walletFile;
}","public Wallet writeWallet() throws Exception {
  writeFile(filePath,JSON.toJSONString(walletInMem));
  walletFile=walletInMem.clone();
  return walletFile;
}"
63144,"private com.github.ontio.account.Account getAccountByAddress(Address address,String password) throws Exception {
  try {
    for (    Account e : wallet.getAccounts()) {
      if (e.address.equals(address.toBase58())) {
        String prikey=com.github.ontio.account.Account.getCtrDecodedPrivateKey(e.key,password,e.address,walletFile.getScrypt().getN(),scheme);
        return new com.github.ontio.account.Account(Helper.hexToBytes(prikey),scheme);
      }
    }
    for (    Identity e : wallet.getIdentities()) {
      if (e.ontid.equals(Common.didont + address.toBase58())) {
        String addr=e.ontid.replace(Common.didont,""String_Node_Str"");
        String prikey=com.github.ontio.account.Account.getCtrDecodedPrivateKey(e.controls.get(0).key,password,addr,walletFile.getScrypt().getN(),scheme);
        return new com.github.ontio.account.Account(Helper.hexToBytes(prikey),scheme);
      }
    }
  }
 catch (  Exception e) {
    throw new SDKException(ErrorCode.GetAccountByAddressErr);
  }
  throw new SDKException(ErrorCode.OtherError(""String_Node_Str""));
}","private com.github.ontio.account.Account getAccountByAddress(Address address,String password) throws Exception {
  try {
    for (    Account e : walletInMem.getAccounts()) {
      if (e.address.equals(address.toBase58())) {
        String prikey=com.github.ontio.account.Account.getCtrDecodedPrivateKey(e.key,password,e.address,walletFile.getScrypt().getN(),scheme);
        return new com.github.ontio.account.Account(Helper.hexToBytes(prikey),scheme);
      }
    }
    for (    Identity e : walletInMem.getIdentities()) {
      if (e.ontid.equals(Common.didont + address.toBase58())) {
        String addr=e.ontid.replace(Common.didont,""String_Node_Str"");
        String prikey=com.github.ontio.account.Account.getCtrDecodedPrivateKey(e.controls.get(0).key,password,addr,walletFile.getScrypt().getN(),scheme);
        return new com.github.ontio.account.Account(Helper.hexToBytes(prikey),scheme);
      }
    }
  }
 catch (  Exception e) {
    throw new SDKException(ErrorCode.GetAccountByAddressErr);
  }
  throw new SDKException(ErrorCode.OtherError(""String_Node_Str""));
}"
63145,"public Identity getDefaultIdentity(){
  for (  Identity e : wallet.getIdentities()) {
    if (e.isDefault) {
      return e;
    }
  }
  return null;
}","public Identity getDefaultIdentity(){
  for (  Identity e : walletInMem.getIdentities()) {
    if (e.isDefault) {
      return e;
    }
  }
  return null;
}"
63146,"public Account getAccount(String address){
  for (  Account e : wallet.getAccounts()) {
    if (e.address.equals(address)) {
      return e;
    }
  }
  return null;
}","public Account getAccount(String address){
  for (  Account e : walletInMem.getAccounts()) {
    if (e.address.equals(address)) {
      return e;
    }
  }
  return null;
}"
63147,"public Wallet getWallet(){
  return wallet;
}","/** 
 * @return wallet in memory
 */
public Wallet getWallet(){
  return walletInMem;
}"
63148,"public Identity importIdentity(String label,String encryptedPrikey,String password,byte[] prefix) throws Exception {
  String prikey=com.github.ontio.account.Account.getCtrDecodedPrivateKey(encryptedPrikey,password,prefix,walletFile.getScrypt().getN(),scheme);
  IdentityInfo info=createIdentity(label,password,Helper.hexToBytes(prikey));
  return getIdentity(info.ontid);
}","public Identity importIdentity(String label,String encryptedPrikey,String password,byte[] salt) throws Exception {
  String prikey=com.github.ontio.account.Account.getCtrDecodedPrivateKey(encryptedPrikey,password,salt,walletFile.getScrypt().getN(),scheme);
  IdentityInfo info=createIdentity(label,password,Helper.hexToBytes(prikey));
  prikey=null;
  return getIdentity(info.ontid);
}"
63149,"private void addIdentity(Identity idt){
  for (  Identity e : wallet.getIdentities()) {
    if (e.ontid.equals(idt.ontid)) {
      return;
    }
  }
  wallet.getIdentities().add(idt);
}","private void addIdentity(Identity idt){
  for (  Identity e : walletInMem.getIdentities()) {
    if (e.ontid.equals(idt.ontid)) {
      return;
    }
  }
  walletInMem.getIdentities().add(idt);
}"
63150,"private com.github.ontio.account.Account createAccount(String label,String password,byte[] privateKey,boolean saveAccountFlag) throws Exception {
  com.github.ontio.account.Account account=new com.github.ontio.account.Account(privateKey,scheme);
  Account acct;
switch (scheme) {
case SHA256WITHECDSA:
    acct=new Account(""String_Node_Str"",new Object[]{Curve.P256.toString()},""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  break;
case SM3WITHSM2:
acct=new Account(""String_Node_Str"",new Object[]{Curve.SM2P256V1.toString()},""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
break;
default :
throw new SDKException(ErrorCode.OtherError(""String_Node_Str""));
}
if (password != null) {
acct.key=account.exportCtrEncryptedPrikey(password,walletFile.getScrypt().getN());
password=null;
}
 else {
acct.key=Helper.toHexString(account.serializePrivateKey());
}
acct.address=Address.addressFromPubKey(account.serializePublicKey()).toBase58();
if (label == null || label.equals(""String_Node_Str"")) {
String uuidStr=UUID.randomUUID().toString();
label=uuidStr.substring(0,8);
}
if (saveAccountFlag) {
for (Account e : wallet.getAccounts()) {
if (e.address.equals(acct.address)) {
throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
}
}
if (wallet.getAccounts().size() == 0) {
acct.isDefault=true;
wallet.setDefaultAccountAddress(acct.address);
}
acct.label=label;
wallet.getAccounts().add(acct);
}
 else {
for (Identity e : wallet.getIdentities()) {
if (e.ontid.equals(Common.didont + acct.address)) {
return account;
}
}
Identity idt=new Identity();
idt.ontid=Common.didont + acct.address;
idt.label=label;
if (wallet.getIdentities().size() == 0) {
idt.isDefault=true;
wallet.setDefaultOntid(idt.ontid);
}
idt.controls=new ArrayList<Control>();
Control ctl=new Control(acct.key,""String_Node_Str"");
idt.controls.add(ctl);
wallet.getIdentities().add(idt);
}
return account;
}","private com.github.ontio.account.Account createAccount(String label,String password,byte[] privateKey,boolean saveAccountFlag) throws Exception {
  com.github.ontio.account.Account account=new com.github.ontio.account.Account(privateKey,scheme);
  Account acct;
switch (scheme) {
case SHA256WITHECDSA:
    acct=new Account(""String_Node_Str"",new Object[]{Curve.P256.toString()},""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  break;
case SM3WITHSM2:
acct=new Account(""String_Node_Str"",new Object[]{Curve.SM2P256V1.toString()},""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
break;
default :
throw new SDKException(ErrorCode.OtherError(""String_Node_Str""));
}
if (password != null) {
acct.key=account.exportCtrEncryptedPrikey(password,walletFile.getScrypt().getN());
password=null;
}
 else {
acct.key=Helper.toHexString(account.serializePrivateKey());
}
acct.address=Address.addressFromPubKey(account.serializePublicKey()).toBase58();
if (label == null || label.equals(""String_Node_Str"")) {
String uuidStr=UUID.randomUUID().toString();
label=uuidStr.substring(0,8);
}
if (saveAccountFlag) {
for (Account e : walletInMem.getAccounts()) {
if (e.address.equals(acct.address)) {
throw new SDKException(ErrorCode.ParamErr(""String_Node_Str""));
}
}
if (walletInMem.getAccounts().size() == 0) {
acct.isDefault=true;
walletInMem.setDefaultAccountAddress(acct.address);
}
acct.label=label;
walletInMem.getAccounts().add(acct);
}
 else {
for (Identity e : walletInMem.getIdentities()) {
if (e.ontid.equals(Common.didont + acct.address)) {
return account;
}
}
Identity idt=new Identity();
idt.ontid=Common.didont + acct.address;
idt.label=label;
if (walletInMem.getIdentities().size() == 0) {
idt.isDefault=true;
walletInMem.setDefaultOntid(idt.ontid);
}
idt.controls=new ArrayList<Control>();
Control ctl=new Control(acct.key,""String_Node_Str"");
idt.controls.add(ctl);
walletInMem.getIdentities().add(idt);
}
return account;
}"
63151,"public List<Account> getAccounts(){
  return wallet.getAccounts();
}","public List<Account> getAccounts(){
  return walletInMem.getAccounts();
}"
63152,"public List<Identity> getIdentitys(){
  return wallet.getIdentities();
}","public List<Identity> getIdentitys(){
  return walletInMem.getIdentities();
}"
63153,"public Identity getIdentity(String ontid){
  for (  Identity e : wallet.getIdentities()) {
    if (e.ontid.equals(ontid)) {
      return e;
    }
  }
  return null;
}","public Identity getIdentity(String ontid){
  for (  Identity e : walletInMem.getIdentities()) {
    if (e.ontid.equals(ontid)) {
      return e;
    }
  }
  return null;
}"
63154,"public Identity createIdentityFromPriKey(String password,String prikey) throws Exception {
  IdentityInfo info=createIdentity(""String_Node_Str"",password,Helper.hexToBytes(prikey));
  return getIdentity(info.ontid);
}","public Identity createIdentityFromPriKey(String password,String prikey) throws Exception {
  IdentityInfo info=createIdentity(""String_Node_Str"",password,Helper.hexToBytes(prikey));
  prikey=null;
  return getIdentity(info.ontid);
}"
63155,"private WalletMgr(String path,String label,String password,SignatureScheme scheme) throws Exception {
  this.scheme=scheme;
  this.filePath=path;
  File file=new File(filePath);
  if (!file.exists()) {
    wallet=new Wallet();
    wallet.setCreateTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
    walletFile=new Wallet();
    file.createNewFile();
    createIdentity(label,password);
    writeWallet();
  }
  InputStream inputStream=new FileInputStream(filePath);
  String text=IOUtils.toString(inputStream);
  wallet=JSON.parseObject(text,Wallet.class);
  walletFile=JSON.parseObject(text,Wallet.class);
  if (wallet.getIdentities() == null) {
    wallet.setIdentities(new ArrayList<Identity>());
  }
  if (wallet.getAccounts() == null) {
    wallet.setAccounts(new ArrayList<Account>());
  }
  if (getIdentitys().size() == 0) {
    createIdentity(label,password);
    writeWallet();
  }
}","private WalletMgr(String path,String label,String password,SignatureScheme scheme) throws Exception {
  this.scheme=scheme;
  this.filePath=path;
  File file=new File(filePath);
  if (!file.exists()) {
    walletInMem=new Wallet();
    walletInMem.setCreateTime(new SimpleDateFormat(""String_Node_Str"").format(new Date()));
    walletFile=new Wallet();
    file.createNewFile();
    createIdentity(label,password);
    writeWallet();
  }
  InputStream inputStream=new FileInputStream(filePath);
  String text=IOUtils.toString(inputStream);
  walletInMem=JSON.parseObject(text,Wallet.class);
  walletFile=JSON.parseObject(text,Wallet.class);
  if (walletInMem.getIdentities() == null) {
    walletInMem.setIdentities(new ArrayList<Identity>());
  }
  if (walletInMem.getAccounts() == null) {
    walletInMem.setAccounts(new ArrayList<Account>());
  }
  if (getIdentitys().size() == 0) {
    createIdentity(label,password);
    writeWallet();
  }
}"
63156,"public Account getDefaultAccount(){
  for (  Account e : wallet.getAccounts()) {
    if (e.isDefault) {
      return e;
    }
  }
  return null;
}","public Account getDefaultAccount(){
  for (  Account e : walletInMem.getAccounts()) {
    if (e.isDefault) {
      return e;
    }
  }
  return null;
}"
63157,"/** 
 * @param ontid
 * @return
 * @throws SDKException
 * @throws ConnectorException
 * @throws IOException
 */
public String sendGetPublicKeys(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ResultIsNull);
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(Helper.hexToBytes(res));
  BinaryReader br=new BinaryReader(bais);
  List pubKeyList=new ArrayList();
  while (true) {
    try {
      Map publicKeyMap=new HashMap();
      publicKeyMap.put(""String_Node_Str"",ontid + ""String_Node_Str"" + String.valueOf(br.readInt()));
      byte[] pubKey=br.readVarBytes();
      publicKeyMap.put(""String_Node_Str"",KeyType.fromLabel(pubKey[0]));
      publicKeyMap.put(""String_Node_Str"",Curve.fromLabel(pubKey[1]));
      publicKeyMap.put(""String_Node_Str"",Helper.toHexString(pubKey));
      pubKeyList.add(publicKeyMap);
    }
 catch (    Exception e) {
      break;
    }
  }
  return JSON.toJSONString(pubKeyList);
}","/** 
 * @param ontid
 * @return
 * @throws SDKException
 * @throws ConnectorException
 * @throws IOException
 */
public String sendGetPublicKeys(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    return res;
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(Helper.hexToBytes(res));
  BinaryReader br=new BinaryReader(bais);
  List pubKeyList=new ArrayList();
  while (true) {
    try {
      Map publicKeyMap=new HashMap();
      publicKeyMap.put(""String_Node_Str"",ontid + ""String_Node_Str"" + String.valueOf(br.readInt()));
      byte[] pubKey=br.readVarBytes();
      publicKeyMap.put(""String_Node_Str"",KeyType.fromLabel(pubKey[0]));
      publicKeyMap.put(""String_Node_Str"",Curve.fromLabel(pubKey[1]));
      publicKeyMap.put(""String_Node_Str"",Helper.toHexString(pubKey));
      pubKeyList.add(publicKeyMap);
    }
 catch (    Exception e) {
      break;
    }
  }
  return JSON.toJSONString(pubKeyList);
}"
63158,"public String sendGetAttributes(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ResultIsNull);
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(Helper.hexToBytes(res));
  BinaryReader br=new BinaryReader(bais);
  List attrsList=new ArrayList();
  while (true) {
    try {
      Map attributeMap=new HashMap();
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attrsList.add(attributeMap);
    }
 catch (    Exception e) {
      break;
    }
  }
  return JSON.toJSONString(attrsList);
}","public String sendGetAttributes(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    return res;
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(Helper.hexToBytes(res));
  BinaryReader br=new BinaryReader(bais);
  List attrsList=new ArrayList();
  while (true) {
    try {
      Map attributeMap=new HashMap();
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attrsList.add(attributeMap);
    }
 catch (    Exception e) {
      break;
    }
  }
  return JSON.toJSONString(attrsList);
}"
63159,"/** 
 * @param ontid
 * @return
 * @throws SDKException
 * @throws ConnectorException
 * @throws IOException
 */
public String sendGetDDO(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ResultIsNull);
  }
  Map map=parseDdoData2(ontid,res);
  if (map.size() == 0) {
    return ""String_Node_Str"";
  }
  return JSON.toJSONString(map);
}","/** 
 * @param ontid
 * @return
 * @throws SDKException
 * @throws ConnectorException
 * @throws IOException
 */
public String sendGetDDO(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    return res;
  }
  Map map=parseDdoData2(ontid,res);
  if (map.size() == 0) {
    return ""String_Node_Str"";
  }
  return JSON.toJSONString(map);
}"
63160,"/** 
 * @param ontid
 * @return
 * @throws SDKException
 * @throws ConnectorException
 * @throws IOException
 */
public String sendGetKeyState(String ontid,int index) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes(),index);
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    throw new SDKException(ErrorCode.ResultIsNull);
  }
  return new String(Helper.hexToBytes(res));
}","/** 
 * @param ontid
 * @return
 * @throws SDKException
 * @throws ConnectorException
 * @throws IOException
 */
public String sendGetKeyState(String ontid,int index) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes(),index);
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0,0);
  Object obj=sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  String res=((JSONObject)obj).getString(""String_Node_Str"");
  if (res.equals(""String_Node_Str"")) {
    return res;
  }
  return new String(Helper.hexToBytes(res));
}"
63161,"@Test public void getProof() throws Exception {
  Identity identity=ontSdk.getWalletMgr().createIdentity(password);
  Account payer=ontSdk.getWalletMgr().createAccount(password);
  Transaction tx=ontSdk.nativevm().ontId().makeRegister(identity.ontid,password,payer.address,0);
  ontSdk.signTx(tx,identity.ontid,password);
  ontSdk.addSign(tx,payer.address,password);
  ontSdk.getConnect().sendRawTransaction(tx);
  Thread.sleep(6000);
  String hash=tx.hash().toHexString();
  Map proof=new HashMap();
  Map map=new HashMap();
  int height=ontSdk.getConnect().getBlockHeightByTxHash(hash);
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",hash);
  map.put(""String_Node_Str"",height);
  Map tmpProof=(Map)ontSdk.getConnect().getMerkleProof(hash);
  UInt256 txroot=UInt256.parse((String)tmpProof.get(""String_Node_Str""));
  int blockHeight=(int)tmpProof.get(""String_Node_Str"");
  UInt256 curBlockRoot=UInt256.parse((String)tmpProof.get(""String_Node_Str""));
  int curBlockHeight=(int)tmpProof.get(""String_Node_Str"");
  List hashes=(List)tmpProof.get(""String_Node_Str"");
  UInt256[] targetHashes=new UInt256[hashes.size()];
  for (int i=0; i < hashes.size(); i++) {
    targetHashes[i]=UInt256.parse((String)hashes.get(i));
  }
  map.put(""String_Node_Str"",curBlockRoot.toHexString());
  map.put(""String_Node_Str"",MerkleVerifier.getProof(txroot,blockHeight,targetHashes,curBlockHeight + 1));
  proof.put(""String_Node_Str"",map);
  MerkleVerifier.Verify(txroot,MerkleVerifier.getProof(txroot,blockHeight,targetHashes,curBlockHeight + 1),curBlockRoot);
}","@Test public void getProof() throws Exception {
  Identity identity=ontSdk.getWalletMgr().createIdentity(password);
  Account payer=ontSdk.getWalletMgr().createAccount(password);
  Transaction tx=ontSdk.nativevm().ontId().makeRegister(identity.ontid,password,payer.address,ontSdk.DEFAULT_GAS_LIMIT,0);
  ontSdk.signTx(tx,identity.ontid,password);
  ontSdk.addSign(tx,payer.address,password);
  ontSdk.getConnect().sendRawTransaction(tx);
  Thread.sleep(6000);
  String hash=tx.hash().toHexString();
  Map proof=new HashMap();
  Map map=new HashMap();
  int height=ontSdk.getConnect().getBlockHeightByTxHash(hash);
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",hash);
  map.put(""String_Node_Str"",height);
  Map tmpProof=(Map)ontSdk.getConnect().getMerkleProof(hash);
  UInt256 txroot=UInt256.parse((String)tmpProof.get(""String_Node_Str""));
  int blockHeight=(int)tmpProof.get(""String_Node_Str"");
  UInt256 curBlockRoot=UInt256.parse((String)tmpProof.get(""String_Node_Str""));
  int curBlockHeight=(int)tmpProof.get(""String_Node_Str"");
  List hashes=(List)tmpProof.get(""String_Node_Str"");
  UInt256[] targetHashes=new UInt256[hashes.size()];
  for (int i=0; i < hashes.size(); i++) {
    targetHashes[i]=UInt256.parse((String)hashes.get(i));
  }
  map.put(""String_Node_Str"",curBlockRoot.toHexString());
  map.put(""String_Node_Str"",MerkleVerifier.getProof(txroot,blockHeight,targetHashes,curBlockHeight + 1));
  proof.put(""String_Node_Str"",map);
  MerkleVerifier.Verify(txroot,MerkleVerifier.getProof(txroot,blockHeight,targetHashes,curBlockHeight + 1),curBlockRoot);
}"
63162,"@Test public void sendRawTransaction() throws Exception {
  String codeHex=""String_Node_Str"";
  codeAddress=""String_Node_Str"";
  Transaction tx=ontSdk.vm().makeDeployCodeTransaction(codeHex,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",VmType.NEOVM.value(),identity.ontid,0);
  ontSdk.signTx(tx,identity.ontid,password);
  String txHex=Helper.toHexString(tx.toArray());
  boolean b=ontSdk.getConnect().sendRawTransaction(txHex);
  Thread.sleep(6000);
  AccountInfo info=ontSdk.getWalletMgr().getAccountInfo(identity.ontid.replace(Common.didont,""String_Node_Str""),password);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(""String_Node_Str""));
  tmp.add(identity.ontid.getBytes());
  list.add(tmp);
  byte[] params=BuildParams.createCodeParamsScript(list);
  Transaction tx2=ontSdk.vm().makeInvokeCodeTransaction(codeAddress,null,params,VmType.NEOVM.value(),identity.ontid,0);
  ontSdk.signTx(tx2,identity.ontid,password);
  boolean b2=ontSdk.getConnect().sendRawTransaction(tx2.toHexString());
  Assert.assertEquals(true,b);
  Thread.sleep(6000);
  Transaction txres=ontSdk.getConnect().getTransaction(tx2.hash().toHexString());
  Assert.assertNotNull(txres);
  Object obj=ontSdk.getConnect().getTransactionJson(tx2.hash().toHexString());
  Assert.assertNotNull(obj);
  Object obj2=ontSdk.getConnect().getSmartCodeEvent(tx2.hash().toHexString());
  Assert.assertNotNull(obj2);
  int blockheight=ontSdk.getConnect().getBlockHeightByTxHash(tx2.hash().toHexString());
  Assert.assertNotNull(blockheight);
  Object contract=ontSdk.getConnect().getContract(codeAddress);
  Assert.assertNotNull(contract);
}","@Test public void sendRawTransaction() throws Exception {
  String codeHex=""String_Node_Str"";
  codeAddress=""String_Node_Str"";
  Transaction tx=ontSdk.vm().makeDeployCodeTransaction(codeHex,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",VmType.NEOVM.value(),identity.ontid,ontSdk.DEFAULT_GAS_LIMIT,0);
  ontSdk.signTx(tx,identity.ontid,password);
  String txHex=Helper.toHexString(tx.toArray());
  boolean b=ontSdk.getConnect().sendRawTransaction(txHex);
  Thread.sleep(6000);
  AccountInfo info=ontSdk.getWalletMgr().getAccountInfo(identity.ontid.replace(Common.didont,""String_Node_Str""),password);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(""String_Node_Str""));
  tmp.add(identity.ontid.getBytes());
  list.add(tmp);
  byte[] params=BuildParams.createCodeParamsScript(list);
  Transaction tx2=ontSdk.vm().makeInvokeCodeTransaction(codeAddress,null,params,VmType.NEOVM.value(),identity.ontid,ontSdk.DEFAULT_GAS_LIMIT,0);
  ontSdk.signTx(tx2,identity.ontid,password);
  boolean b2=ontSdk.getConnect().sendRawTransaction(tx2.toHexString());
  Assert.assertEquals(true,b);
  Thread.sleep(6000);
  Transaction txres=ontSdk.getConnect().getTransaction(tx2.hash().toHexString());
  Assert.assertNotNull(txres);
  Object obj=ontSdk.getConnect().getTransactionJson(tx2.hash().toHexString());
  Assert.assertNotNull(obj);
  Object obj2=ontSdk.getConnect().getSmartCodeEvent(tx2.hash().toHexString());
  Assert.assertNotNull(obj2);
  int blockheight=ontSdk.getConnect().getBlockHeightByTxHash(tx2.hash().toHexString());
  Assert.assertNotNull(blockheight);
}"
63163,"@Test public void sendRawTransactionPreExec() throws Exception {
  byte[] parabytes=ontSdk.nativevm().ontId().buildParams(Address.decodeBase58(address).toArray());
  Transaction tx=ontSdk.vm().makeInvokeCodeTransaction(ontContract,""String_Node_Str"",parabytes,VmType.Native.value(),null,0);
  Object obj=ontSdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  Assert.assertNotEquals(null,obj);
}","@Test public void sendRawTransactionPreExec() throws Exception {
  byte[] parabytes=ontSdk.nativevm().ontId().buildParams(Address.decodeBase58(address).toArray());
  Transaction tx=ontSdk.vm().makeInvokeCodeTransaction(ontContract,""String_Node_Str"",parabytes,VmType.Native.value(),null,ontSdk.DEFAULT_GAS_LIMIT,0);
  Object obj=ontSdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
  Assert.assertNotEquals(null,obj);
}"
63164,"@Before public void setUp() throws Exception {
  ontSdk=OntSdk.getInstance();
  String restUrl=""String_Node_Str"";
  ontSdk.setRestful(restUrl);
  ontSdk.setDefaultConnect(ontSdk.getRestful());
  ontSdk.openWalletFile(wallet);
  if (ontSdk.getWalletMgr().getIdentitys().size() < 1) {
    identity=ontSdk.getWalletMgr().createIdentity(password);
  }
 else {
    identity=ontSdk.getWalletMgr().getIdentitys().get(0);
  }
}","@Before public void setUp() throws Exception {
  ontSdk=OntSdk.getInstance();
  String restUrl=OntSdkTest.URL;
  ontSdk.setRestful(restUrl);
  ontSdk.setDefaultConnect(ontSdk.getRestful());
  ontSdk.openWalletFile(wallet);
  if (ontSdk.getWalletMgr().getIdentitys().size() < 1) {
    identity=ontSdk.getWalletMgr().createIdentity(password);
  }
 else {
    identity=ontSdk.getWalletMgr().getIdentitys().get(0);
  }
}"
63165,"/** 
 * @param tx
 * @param addr
 * @param password
 * @return
 * @throws Exception
 */
public Transaction addSign(Transaction tx,String addr,String password) throws Exception {
  if (tx.sigs == null) {
    tx.sigs=new Sig[0];
  }
  Sig[] sigs=new Sig[tx.sigs.length + 1];
  for (int i=0; i < tx.sigs.length; i++) {
    sigs[i]=tx.sigs[i];
  }
  sigs[tx.sigs.length]=new Sig();
  sigs[tx.sigs.length].M=1;
  sigs[tx.sigs.length].pubKeys=new byte[1][];
  sigs[tx.sigs.length].sigData=new byte[1][];
  sigs[tx.sigs.length].pubKeys[0]=Helper.hexToBytes(getWalletMgr().getAccountInfo(addr,password).pubkey);
  sigs[tx.sigs.length].sigData[0]=tx.sign(getWalletMgr().getAccount(addr,password),signatureScheme);
  tx.sigs=sigs;
  return tx;
}","public Transaction addSign(Transaction tx,Account acct) throws Exception {
  if (tx.sigs == null) {
    tx.sigs=new Sig[0];
  }
  Sig[] sigs=new Sig[tx.sigs.length + 1];
  for (int i=0; i < tx.sigs.length; i++) {
    sigs[i]=tx.sigs[i];
  }
  sigs[tx.sigs.length]=new Sig();
  sigs[tx.sigs.length].M=1;
  sigs[tx.sigs.length].pubKeys=new byte[1][];
  sigs[tx.sigs.length].sigData=new byte[1][];
  sigs[tx.sigs.length].pubKeys[0]=acct.serializePublicKey();
  sigs[tx.sigs.length].sigData[0]=tx.sign(acct,signatureScheme);
  tx.sigs=sigs;
  return tx;
}"
63166,"public static Address addressFromPubKey(byte[] publicKey){
  byte[] bys=Digest.hash160(publicKey);
  bys[0]=0x01;
  Address u160=new Address(bys);
  return u160;
}","public static Address addressFromPubKey(byte[] publicKey){
  byte[] bys=Digest.hash160(publicKey);
  bys[0]=0x01;
  return new Address(bys);
}"
63167,"public String toBase58(){
  byte[] data=new byte[25];
  data[0]=COIN_VERSION;
  System.arraycopy(toArray(),0,data,1,20);
  byte[] checksum=Digest.sha256(Digest.sha256(data,0,21));
  System.arraycopy(checksum,0,data,21,4);
  return Base58.encode(data);
}","public String toBase58(){
  byte[] data=new byte[25];
  data[0]=COIN_VERSION_ONT;
  System.arraycopy(toArray(),0,data,1,20);
  byte[] checksum=Digest.sha256(Digest.sha256(data,0,21));
  System.arraycopy(checksum,0,data,21,4);
  return Base58.encode(data);
}"
63168,"public static Address decodeBase58(String address) throws SDKException {
  byte[] data=Base58.decode(address);
  if (data.length != 25) {
    throw new SDKException(ErrorCode.ParamError + ""String_Node_Str"");
  }
  if (data[0] != COIN_VERSION) {
    throw new SDKException(ErrorCode.ParamError);
  }
  byte[] checksum=Digest.sha256(Digest.sha256(data,0,21));
  for (int i=0; i < 4; i++) {
    if (data[data.length - 4 + i] != checksum[i]) {
      throw new IllegalArgumentException();
    }
  }
  byte[] buffer=new byte[20];
  System.arraycopy(data,1,buffer,0,20);
  return new Address(buffer);
}","public static Address decodeBase58(String address) throws SDKException {
  byte[] data=Base58.decode(address);
  if (data.length != 25) {
    throw new SDKException(ErrorCode.ParamError + ""String_Node_Str"");
  }
  if (data[0] != COIN_VERSION_ONT) {
    throw new SDKException(ErrorCode.ParamError);
  }
  byte[] checksum=Digest.sha256(Digest.sha256(data,0,21));
  for (int i=0; i < 4; i++) {
    if (data[data.length - 4 + i] != checksum[i]) {
      throw new IllegalArgumentException();
    }
  }
  byte[] buffer=new byte[20];
  System.arraycopy(data,1,buffer,0,20);
  return new Address(buffer);
}"
63169,"public static void main(String[] args){
  try {
    OntSdk sdk=getOntSdk();
    Account info1=null;
    Account info2=null;
    Account info3=null;
    sdk.setSignatureScheme(SignatureScheme.SHA256WITHECDSA);
    if (sdk.getWalletMgr().getAccounts().size() < 3) {
      String privatekey0=""String_Node_Str"";
      info1=sdk.getWalletMgr().createAccountFromPriKey(""String_Node_Str"",privatekey0);
      info2=sdk.getWalletMgr().createAccount(""String_Node_Str"");
      info3=sdk.getWalletMgr().createAccountFromPriKey(""String_Node_Str"",""String_Node_Str"");
      info3.label=""String_Node_Str"";
      sdk.getWalletMgr().writeWallet();
    }
    info1=sdk.getWalletMgr().getAccounts().get(0);
    info2=sdk.getWalletMgr().getAccounts().get(1);
    info3=sdk.getWalletMgr().getAccounts().get(2);
    System.out.println(info1.address);
    System.out.println(info2.address);
    System.out.println(info3.address);
    System.out.println(sdk.getConnect().getBalance(info3.address));
    System.out.println(""String_Node_Str"");
    String hash=sdk.nativevm().ong().claimOng(info1.address,""String_Node_Str"",info3.address,2960000000000L,info1.address,""String_Node_Str"",sdk.DEFAULT_GAS_LIMIT,0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    OntSdk sdk=getOntSdk();
    Account info1=null;
    Account info2=null;
    Account info3=null;
    sdk.setSignatureScheme(SignatureScheme.SHA256WITHECDSA);
    if (sdk.getWalletMgr().getAccounts().size() < 3) {
      String privatekey0=""String_Node_Str"";
      info1=sdk.getWalletMgr().createAccountFromPriKey(""String_Node_Str"",privatekey0);
      info2=sdk.getWalletMgr().createAccount(""String_Node_Str"");
      info3=sdk.getWalletMgr().createAccountFromPriKey(""String_Node_Str"",""String_Node_Str"");
      info3.label=""String_Node_Str"";
      sdk.getWalletMgr().writeWallet();
    }
    info1=sdk.getWalletMgr().getAccounts().get(0);
    info2=sdk.getWalletMgr().getAccounts().get(1);
    info3=sdk.getWalletMgr().getAccounts().get(2);
    System.out.println(info1.address);
    System.out.println(info2.address);
    System.out.println(info3.address);
    System.out.println(sdk.getConnect().getBalance(info3.address));
    System.out.println(""String_Node_Str"");
    System.out.println(sdk.nativevm().ong().unclaimOng(info1.address));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
63170,"public static void main(String[] args){
  try {
    OntSdk ontSdk=getOntSdk();
    ontSdk.getWebSocket().startWebsocketThread(false);
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        waitResult(lock);
      }
    }
);
    thread.start();
    Thread.sleep(5000);
    Wallet oep6=ontSdk.getWalletMgr().getWallet();
    System.out.println(""String_Node_Str"" + JSON.toJSONString(oep6));
    for (int i=0; i >= 0; i++) {
      String password=""String_Node_Str"";
      if (false) {
        Account info1=null;
        Account info2=null;
        Account info3=null;
        if (ontSdk.getWalletMgr().getAccounts().size() < 3) {
          info1=ontSdk.getWalletMgr().createAccountFromPriKey(""String_Node_Str"",""String_Node_Str"");
          info2=ontSdk.getWalletMgr().createAccount(""String_Node_Str"");
          info3=ontSdk.getWalletMgr().createAccount(""String_Node_Str"");
          ontSdk.getWalletMgr().writeWallet();
        }
        info1=ontSdk.getWalletMgr().getAccounts().get(0);
        info2=ontSdk.getWalletMgr().getAccounts().get(1);
        Transaction tx=ontSdk.nativevm().ont().makeTransfer(info1.address,""String_Node_Str"",info2.address,100L,info1.address,0,0);
        ontSdk.signTx(tx,info1.address,password);
        System.out.println(tx.toHexString());
        ontSdk.getConnect().sendRawTransaction(tx.toHexString());
      }
      if (false) {
        ontSdk.getConnect().getBalance(""String_Node_Str"");
        ontSdk.getConnect().getBlockJson(""String_Node_Str"");
        ontSdk.getConnect().getNodeCount();
        ontSdk.getConnect().getGenerateBlockTime();
        ontSdk.getConnect().getContractJson(""String_Node_Str"");
        ontSdk.getConnect().getSmartCodeEvent(""String_Node_Str"");
        ontSdk.getConnect().getBlockHeightByTxHash(""String_Node_Str"");
        ontSdk.getConnect().getStorage(""String_Node_Str"",Address.decodeBase58(""String_Node_Str"").toHexString());
        ontSdk.getConnect().getTransactionJson(""String_Node_Str"");
      }
      if (false) {
        InputStream is=new FileInputStream(""String_Node_Str"");
        byte[] bys=new byte[is.available()];
        is.read(bys);
        is.close();
        String abi=new String(bys);
        AbiInfo abiinfo=JSON.parseObject(abi,AbiInfo.class);
        AbiFunction func0=abiinfo.getFunction(""String_Node_Str"");
        Identity did0=ontSdk.getWalletMgr().getIdentitys().get(0);
        func0.setParamsValue(""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes());
      }
      if (true) {
        Map map=new HashMap();
        if (i > 0) {
          map.put(""String_Node_Str"",true);
          map.put(""String_Node_Str"",false);
        }
 else {
          map.put(""String_Node_Str"",false);
          map.put(""String_Node_Str"",true);
        }
        ontSdk.getWebSocket().setReqId(i);
        ontSdk.getWebSocket().sendSubscribe(map);
      }
      Thread.sleep(6000);
    }
    System.exit(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    OntSdk ontSdk=getOntSdk();
    String password=""String_Node_Str"";
    Account payer=ontSdk.getWalletMgr().createAccount(password);
    ontSdk.getWebSocket().startWebsocketThread(false);
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        waitResult(lock);
      }
    }
);
    thread.start();
    Thread.sleep(5000);
    Wallet oep6=ontSdk.getWalletMgr().getWallet();
    System.out.println(""String_Node_Str"" + JSON.toJSONString(oep6));
    for (int i=0; i >= 0; i++) {
      if (false) {
        Account info1=null;
        Account info2=null;
        Account info3=null;
        if (ontSdk.getWalletMgr().getAccounts().size() < 3) {
          info1=ontSdk.getWalletMgr().createAccountFromPriKey(""String_Node_Str"",""String_Node_Str"");
          info2=ontSdk.getWalletMgr().createAccount(""String_Node_Str"");
          info3=ontSdk.getWalletMgr().createAccount(""String_Node_Str"");
          ontSdk.getWalletMgr().writeWallet();
        }
        info1=ontSdk.getWalletMgr().getAccounts().get(0);
        info2=ontSdk.getWalletMgr().getAccounts().get(1);
        Transaction tx=ontSdk.nativevm().ont().makeTransfer(info1.address,""String_Node_Str"",info2.address,100L,payer.address,ontSdk.DEFAULT_GAS_LIMIT,0);
        ontSdk.signTx(tx,info1.address,password);
        System.out.println(tx.toHexString());
        ontSdk.getConnect().sendRawTransaction(tx.toHexString());
      }
      if (false) {
        ontSdk.getConnect().getBalance(""String_Node_Str"");
        ontSdk.getConnect().getBlockJson(""String_Node_Str"");
        ontSdk.getConnect().getNodeCount();
        ontSdk.getConnect().getGenerateBlockTime();
        ontSdk.getConnect().getContractJson(""String_Node_Str"");
        ontSdk.getConnect().getSmartCodeEvent(""String_Node_Str"");
        ontSdk.getConnect().getBlockHeightByTxHash(""String_Node_Str"");
        ontSdk.getConnect().getStorage(""String_Node_Str"",Address.decodeBase58(""String_Node_Str"").toHexString());
        ontSdk.getConnect().getTransactionJson(""String_Node_Str"");
      }
      if (false) {
        InputStream is=new FileInputStream(""String_Node_Str"");
        byte[] bys=new byte[is.available()];
        is.read(bys);
        is.close();
        String abi=new String(bys);
        AbiInfo abiinfo=JSON.parseObject(abi,AbiInfo.class);
        AbiFunction func0=abiinfo.getFunction(""String_Node_Str"");
        Identity did0=ontSdk.getWalletMgr().getIdentitys().get(0);
        func0.setParamsValue(""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes());
      }
      if (true) {
        Map map=new HashMap();
        if (i > 0) {
          map.put(""String_Node_Str"",true);
          map.put(""String_Node_Str"",false);
        }
 else {
          map.put(""String_Node_Str"",false);
          map.put(""String_Node_Str"",true);
        }
        ontSdk.getWebSocket().setReqId(i);
        ontSdk.getWebSocket().sendSubscribe(map);
      }
      Thread.sleep(6000);
    }
    System.exit(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
63171,"@Before public void setUp() throws SDKException {
  String ip=""String_Node_Str"";
  String restUrl=ip + ""String_Node_Str"" + ""String_Node_Str"";
  ontSdk=OntSdk.getInstance();
  ontSdk.setRestful(restUrl);
  ontSdk.setDefaultConnect(ontSdk.getRestful());
  ontSdk.openWalletFile(walletFile);
}","@Before public void setUp() throws SDKException {
  String restUrl=OntSdkTest.URL;
  ontSdk=OntSdk.getInstance();
  ontSdk.setRestful(restUrl);
  ontSdk.setDefaultConnect(ontSdk.getRestful());
  ontSdk.openWalletFile(walletFile);
}"
63172,"/** 
 * @param codeStr
 * @param needStorage
 * @param name
 * @param codeVersion
 * @param author
 * @param email
 * @param desp
 * @param vmtype
 * @param payer
 * @param gaslimit
 * @param gasprice
 * @return
 * @throws SDKException
 */
public DeployCode makeDeployCodeTransaction(String codeStr,boolean needStorage,String name,String codeVersion,String author,String email,String desp,byte vmtype,String payer,long gaslimit,long gasprice) throws SDKException {
  DeployCode tx=new DeployCode();
  if (payer != null) {
    tx.payer=Address.decodeBase58(payer.replace(Common.didont,""String_Node_Str""));
  }
  tx.attributes=new Attribute[1];
  tx.attributes[0]=new Attribute();
  tx.attributes[0].usage=AttributeUsage.Nonce;
  tx.attributes[0].data=UUID.randomUUID().toString().getBytes();
  tx.code=Helper.hexToBytes(codeStr);
  tx.version=codeVersion;
  tx.vmType=vmtype;
  tx.needStorage=needStorage;
  tx.name=name;
  tx.author=author;
  tx.email=email;
  tx.gasLimit=gaslimit;
  tx.gasLimit=gasprice;
  tx.description=desp;
  return tx;
}","/** 
 * @param codeStr
 * @param needStorage
 * @param name
 * @param codeVersion
 * @param author
 * @param email
 * @param desp
 * @param vmtype
 * @param payer
 * @param gaslimit
 * @param gasprice
 * @return
 * @throws SDKException
 */
public DeployCode makeDeployCodeTransaction(String codeStr,boolean needStorage,String name,String codeVersion,String author,String email,String desp,byte vmtype,String payer,long gaslimit,long gasprice) throws SDKException {
  DeployCode tx=new DeployCode();
  if (payer != null) {
    tx.payer=Address.decodeBase58(payer.replace(Common.didont,""String_Node_Str""));
  }
  tx.attributes=new Attribute[1];
  tx.attributes[0]=new Attribute();
  tx.attributes[0].usage=AttributeUsage.Nonce;
  tx.attributes[0].data=UUID.randomUUID().toString().getBytes();
  tx.code=Helper.hexToBytes(codeStr);
  tx.version=codeVersion;
  tx.vmType=vmtype;
  tx.needStorage=needStorage;
  tx.name=name;
  tx.author=author;
  tx.email=email;
  tx.gasLimit=gaslimit;
  tx.gasPrice=gasprice;
  tx.description=desp;
  return tx;
}"
63173,"public String sendGetAttributes(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0);
  Object obj=sdk.getConnectMgr().sendRawTransactionPreExec(tx.toHexString());
  if (obj == null || ((String)obj).length() == 0) {
    throw new SDKException(ErrorCode.ResultIsNull);
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(Helper.hexToBytes((String)obj));
  BinaryReader br=new BinaryReader(bais);
  Map attributeMap=new HashMap();
  while (true) {
    try {
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
    }
 catch (    Exception e) {
      break;
    }
  }
  return JSON.toJSONString(attributeMap);
}","public String sendGetAttributes(String ontid) throws SDKException, ConnectorException, IOException {
  if (contractAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  byte[] parabytes=buildParams(ontid.getBytes());
  Transaction tx=sdk.vm().makeInvokeCodeTransaction(contractAddress,""String_Node_Str"",parabytes,VmType.Native.value(),null,0);
  Object obj=sdk.getConnectMgr().sendRawTransactionPreExec(tx.toHexString());
  if (obj == null || ((String)obj).length() == 0) {
    throw new SDKException(ErrorCode.ResultIsNull);
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(Helper.hexToBytes((String)obj));
  BinaryReader br=new BinaryReader(bais);
  List attrsList=new ArrayList();
  while (true) {
    try {
      Map attributeMap=new HashMap();
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attributeMap.put(""String_Node_Str"",new String(br.readVarBytes()));
      attrsList.add(attributeMap);
    }
 catch (    Exception e) {
      break;
    }
  }
  return JSON.toJSONString(attrsList);
}"
63174,"@Override public void deserialize(BinaryReader reader) throws IOException {
  deserializeUnsigned(reader);
  int len=(int)reader.readVarInt();
  sigData=new String[len];
  for (int i=0; i < len; i++) {
    this.sigData[i]=Helper.toHexString(reader.readVarBytes());
  }
  len=reader.readInt();
  transactions=new Transaction[len];
  for (int i=0; i < transactions.length; i++) {
    transactions[i]=Transaction.deserializeFrom(reader);
  }
  if (transactions.length > 0) {
    if (transactions[0].txType != TransactionType.Bookkeeping || Arrays.stream(transactions).skip(1).anyMatch(p -> p.txType == TransactionType.Bookkeeping)) {
      throw new IOException();
    }
  }
}","@Override public void deserialize(BinaryReader reader) throws IOException {
  deserializeUnsigned(reader);
  int len=(int)reader.readVarInt();
  sigData=new String[len];
  for (int i=0; i < len; i++) {
    this.sigData[i]=Helper.toHexString(reader.readVarBytes());
  }
  len=reader.readInt();
  transactions=new Transaction[len];
  for (int i=0; i < transactions.length; i++) {
    transactions[i]=Transaction.deserializeFrom(reader);
  }
  if (transactions.length > 0) {
    if ((height != 0 && transactions[0].txType != TransactionType.Bookkeeping) || Arrays.stream(transactions).skip(1).anyMatch(p -> p.txType == TransactionType.Bookkeeping)) {
      throw new IOException();
    }
  }
}"
63175,"public Account(String alg,Object[] params,String encAlg,String scheme,String hash){
  this.algorithm=alg;
  this.parameters.put(""String_Node_Str"",params[0]);
  this.signatureScheme=scheme;
  this.encAlg=encAlg;
  this.hash=hash;
  this.algorithm=algorithm;
  this.extra=null;
}","public Account(String alg,Object[] params,String encAlg,String scheme,String hash){
  this.algorithm=alg;
  this.parameters.put(""String_Node_Str"",params[0]);
  this.signatureScheme=scheme;
  this.encAlg=encAlg;
  this.hash=hash;
  this.extra=null;
}"
63176,"@Override public void serializeUnsigned(BinaryWriter writer) throws IOException {
  writer.writeInt(version);
  writer.writeSerializable(prevBlockHash);
  writer.writeSerializable(transactionsRoot);
  writer.writeSerializable(blockRoot);
  writer.writeInt(timestamp);
  writer.writeInt(height);
  writer.writeLong(consensusData);
  writer.writeSerializable(nextBookkeeper);
}","@Override public void serializeUnsigned(BinaryWriter writer) throws IOException {
  writer.writeInt(version);
  writer.writeSerializable(prevBlockHash);
  writer.writeSerializable(transactionsRoot);
  writer.writeSerializable(blockRoot);
  writer.writeInt(timestamp);
  writer.writeInt(height);
  writer.writeLong(consensusData);
  writer.writeVarBytes(consensusPayload);
  writer.writeSerializable(nextBookkeeper);
}"
63177,"public String sendRevoke(String ontid,String password,String claimId) throws Exception {
  if (codeAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  if (claimId == null || claimId == ""String_Node_Str"") {
    throw new SDKException(ErrorCode.NullKeyOrValue);
  }
  String addr=ontid.replace(Common.didont,""String_Node_Str"");
  byte[] did=(Common.didont + addr).getBytes();
  AccountInfo info=sdk.getWalletMgr().getAccountInfo(addr,password,sdk.keyType,sdk.curveParaSpec);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(claimId));
  tmp.add(did);
  list.add(tmp);
  Transaction tx=makeInvokeTransaction(list,info);
  sdk.signTx(tx,addr,password);
  boolean b=sdk.getConnectMgr().sendRawTransaction(tx.toHexString());
  if (b) {
    return tx.hash().toString();
  }
  return null;
}","public String sendRevoke(String ontid,String password,String claimId) throws Exception {
  if (codeAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  if (claimId == null || claimId == ""String_Node_Str"") {
    throw new SDKException(ErrorCode.NullKeyOrValue);
  }
  String addr=ontid.replace(Common.didont,""String_Node_Str"");
  byte[] did=(Common.didont + addr).getBytes();
  AccountInfo info=sdk.getWalletMgr().getAccountInfo(addr,password);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(claimId));
  tmp.add(did);
  list.add(tmp);
  Transaction tx=makeInvokeTransaction(list,info);
  sdk.signTx(tx,addr,password);
  boolean b=sdk.getConnectMgr().sendRawTransaction(tx.toHexString());
  if (b) {
    return tx.hash().toString();
  }
  return null;
}"
63178,"public String sendCommit(String ontid,String password,String claimId) throws Exception {
  if (codeAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  if (claimId == null || claimId == ""String_Node_Str"") {
    throw new SDKException(ErrorCode.NullKeyOrValue);
  }
  String addr=ontid.replace(Common.didont,""String_Node_Str"");
  byte[] did=(Common.didont + addr).getBytes();
  AccountInfo info=sdk.getWalletMgr().getAccountInfo(addr,password,sdk.keyType,sdk.curveParaSpec);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(claimId));
  tmp.add(did);
  list.add(tmp);
  Transaction tx=makeInvokeTransaction(list,info);
  sdk.signTx(tx,addr,password);
  boolean b=sdk.getConnectMgr().sendRawTransaction(tx.toHexString());
  if (b) {
    return tx.hash().toString();
  }
  return null;
}","public String sendCommit(String ontid,String password,String claimId) throws Exception {
  if (codeAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  if (claimId == null || claimId == ""String_Node_Str"") {
    throw new SDKException(ErrorCode.NullKeyOrValue);
  }
  String addr=ontid.replace(Common.didont,""String_Node_Str"");
  byte[] did=(Common.didont + addr).getBytes();
  AccountInfo info=sdk.getWalletMgr().getAccountInfo(addr,password);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(claimId));
  tmp.add(did);
  list.add(tmp);
  Transaction tx=makeInvokeTransaction(list,info);
  sdk.signTx(tx,addr,password);
  boolean b=sdk.getConnectMgr().sendRawTransaction(tx.toHexString());
  if (b) {
    return tx.hash().toString();
  }
  return null;
}"
63179,"public String sendGetStatus(String ontid,String password,String claimId) throws Exception {
  if (codeAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  if (claimId == null || claimId == ""String_Node_Str"") {
    throw new SDKException(ErrorCode.NullKeyOrValue);
  }
  String addr=ontid.replace(Common.didont,""String_Node_Str"");
  AccountInfo info=sdk.getWalletMgr().getAccountInfo(addr,password,sdk.keyType,sdk.curveParaSpec);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(claimId));
  list.add(tmp);
  Transaction tx=makeInvokeTransaction(list,info);
  sdk.signTx(tx,addr,password);
  Object obj=sdk.getConnectMgr().sendRawTransactionPreExec(tx.toHexString());
  if (obj != null) {
    return (String)obj;
  }
  return null;
}","public String sendGetStatus(String ontid,String password,String claimId) throws Exception {
  if (codeAddress == null) {
    throw new SDKException(ErrorCode.NullCodeHash);
  }
  if (claimId == null || claimId == ""String_Node_Str"") {
    throw new SDKException(ErrorCode.NullKeyOrValue);
  }
  String addr=ontid.replace(Common.didont,""String_Node_Str"");
  AccountInfo info=sdk.getWalletMgr().getAccountInfo(addr,password);
  List list=new ArrayList<Object>();
  list.add(""String_Node_Str"".getBytes());
  List tmp=new ArrayList<Object>();
  tmp.add(Helper.hexToBytes(claimId));
  list.add(tmp);
  Transaction tx=makeInvokeTransaction(list,info);
  sdk.signTx(tx,addr,password);
  Object obj=sdk.getConnectMgr().sendRawTransactionPreExec(tx.toHexString());
  if (obj != null) {
    return (String)obj;
  }
  return null;
}"
63180,"public static void main(String[] args){
  try {
    OntSdk ontSdk=getOntSdk();
    ontSdk.setCodeAddress(""String_Node_Str"");
    List<Identity> dids=ontSdk.getWalletMgr().getIdentitys();
    if (dids.size() < 2) {
      ontSdk.getOntIdTx().sendRegister(""String_Node_Str"");
      ontSdk.getOntIdTx().sendRegister(""String_Node_Str"");
      dids=ontSdk.getWalletMgr().getIdentitys();
      Thread.sleep(6000);
    }
    Map<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",dids.get(0).ontid);
    map.put(""String_Node_Str"",dids.get(1).ontid);
    String claim=ontSdk.getOntIdTx().createOntIdClaim(dids.get(0).ontid,""String_Node_Str"",""String_Node_Str"",map,map);
    System.out.println(claim);
    JSONObject jsonObject=JSON.parseObject(claim);
    System.out.println(""String_Node_Str"" + jsonObject.getString(""String_Node_Str""));
    ontSdk.setCodeAddress(""String_Node_Str"");
    String commitRes=ontSdk.getRecordTx().sendCommit(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + commitRes);
    Thread.sleep(6000);
    String getstatusRes=ontSdk.getRecordTx().sendGetStatus(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    byte[] getstatusResBytes=Helper.hexToBytes(getstatusRes);
    System.out.println(""String_Node_Str"" + new String(getstatusResBytes));
    Thread.sleep(6000);
    String revokeRes=ontSdk.getRecordTx().sendRevoke(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + revokeRes);
    Thread.sleep(6000);
    String getstatusRes2=ontSdk.getRecordTx().sendGetStatus(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    byte[] getstatusResBytes2=Helper.hexToBytes(getstatusRes2);
    System.out.println(""String_Node_Str"" + new String(getstatusResBytes2));
    System.exit(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    OntSdk ontSdk=getOntSdk();
    ontSdk.setCodeAddress(""String_Node_Str"");
    List<Identity> dids=ontSdk.getWalletMgr().getIdentitys();
    if (dids.size() < 2) {
      ontSdk.getOntIdTx().sendRegister(""String_Node_Str"");
      ontSdk.getOntIdTx().sendRegister(""String_Node_Str"");
      dids=ontSdk.getWalletMgr().getIdentitys();
      Thread.sleep(6000);
    }
    Map<String,Object> map=new HashMap<String,Object>();
    map.put(""String_Node_Str"",dids.get(0).ontid);
    map.put(""String_Node_Str"",dids.get(1).ontid);
    String claim=ontSdk.getOntIdTx().createOntIdClaim(dids.get(0).ontid,""String_Node_Str"",""String_Node_Str"",map,map);
    System.out.println(claim);
    JSONObject jsonObject=JSON.parseObject(claim);
    System.out.println(""String_Node_Str"" + jsonObject.getString(""String_Node_Str""));
    ontSdk.setCodeAddress(""String_Node_Str"");
    String commitRes=ontSdk.getClaimRecordTx().sendCommit(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + commitRes);
    Thread.sleep(6000);
    String getstatusRes=ontSdk.getClaimRecordTx().sendGetStatus(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    byte[] getstatusResBytes=Helper.hexToBytes(getstatusRes);
    System.out.println(""String_Node_Str"" + new String(getstatusResBytes));
    Thread.sleep(6000);
    String revokeRes=ontSdk.getClaimRecordTx().sendRevoke(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + revokeRes);
    Thread.sleep(6000);
    String getstatusRes2=ontSdk.getClaimRecordTx().sendGetStatus(dids.get(1).ontid,""String_Node_Str"",jsonObject.getString(""String_Node_Str""));
    byte[] getstatusResBytes2=Helper.hexToBytes(getstatusRes2);
    System.out.println(""String_Node_Str"" + new String(getstatusResBytes2));
    System.exit(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
63181,"public byte[] generateSignature(byte[] msg,SignatureScheme scheme,Object param) throws Exception {
  if (msg == null || msg.length == 0) {
    throw new Exception(ErrorCode.InvalidMessage);
  }
  if (this.privateKey == null) {
    throw new Exception(""String_Node_Str"");
  }
  SignatureHandler ctx=new SignatureHandler(keyType,scheme);
  AlgorithmParameterSpec paramSpec=null;
  if (scheme == SignatureScheme.SM3WITHSM2 && param != null) {
    if (param instanceof String) {
      paramSpec=new SM2ParameterSpec(Strings.toByteArray((String)param));
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
  }
  byte[] signature=new Signature(scheme,paramSpec,ctx.generateSignature(privateKey,msg,paramSpec)).toBytes();
  return signature;
}","public byte[] generateSignature(byte[] msg,SignatureScheme scheme,Object param) throws Exception {
  if (msg == null || msg.length == 0) {
    throw new Exception(ErrorCode.InvalidMessage);
  }
  if (this.privateKey == null) {
    throw new Exception(""String_Node_Str"");
  }
  SignatureHandler ctx=new SignatureHandler(keyType,scheme);
  AlgorithmParameterSpec paramSpec=null;
  if (scheme == SignatureScheme.SM3WITHSM2) {
    if (param instanceof String) {
      paramSpec=new SM2ParameterSpec(Strings.toByteArray((String)param));
    }
 else     if (param == null) {
      paramSpec=new SM2ParameterSpec(""String_Node_Str"".getBytes());
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
  }
  byte[] signature=new Signature(scheme,paramSpec,ctx.generateSignature(privateKey,msg,paramSpec)).toBytes();
  return signature;
}"
63182,"public Signature(byte[] data) throws Exception {
  if (data == null) {
    throw new Exception(""String_Node_Str"");
  }
  if (data.length < 2) {
    throw new Exception(ErrorCode.InvalidSignatureDataLen);
  }
  this.scheme=SignatureScheme.values()[data[0]];
  if (scheme == SignatureScheme.SM3WITHSM2) {
    int i=0;
    while (i < data.length && data[i] != 0) {
      i++;
    }
    if (i >= data.length) {
      throw new Exception(ErrorCode.InvalidSignatureData);
    }
    this.param=new SM2ParameterSpec(Arrays.copyOfRange(data,1,i));
  }
  this.value=Arrays.copyOfRange(data,1,data.length);
}","public Signature(byte[] data) throws Exception {
  if (data == null) {
    throw new Exception(""String_Node_Str"");
  }
  if (data.length < 2) {
    throw new Exception(ErrorCode.InvalidSignatureDataLen);
  }
  this.scheme=SignatureScheme.values()[data[0]];
  if (scheme == SignatureScheme.SM3WITHSM2) {
    int i=0;
    while (i < data.length && data[i] != 0) {
      i++;
    }
    if (i >= data.length) {
      throw new Exception(ErrorCode.InvalidSignatureData);
    }
    this.param=new SM2ParameterSpec(Arrays.copyOfRange(data,1,i));
    this.value=Arrays.copyOfRange(data,i + 1,data.length);
  }
 else {
    this.value=Arrays.copyOfRange(data,1,data.length);
  }
}"
63183,"public boolean setValue(Object value){
  try {
    if (value == null) {
      this.value=null;
    }
 else     if (""String_Node_Str"".equals(type)) {
      byte[] tmp=(byte[])value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      this.value=(String)value;
    }
 else     if (""String_Node_Str"".equals(type)) {
      boolean tmp=(boolean)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      int tmp=(int)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      Array tmp=(Array)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      Object tmp=(Object)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
    }
 else {
      throw new SDKException(""String_Node_Str"");
    }
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","public boolean setValue(Object value){
  try {
    if (value == null) {
      this.value=null;
    }
 else     if (""String_Node_Str"".equals(type)) {
      byte[] tmp=(byte[])value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      this.value=(String)value;
    }
 else     if (""String_Node_Str"".equals(type)) {
      boolean tmp=(boolean)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      int tmp=(int)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      List tmp=(List)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
      Object tmp=(Object)value;
      this.value=JSON.toJSONString(tmp);
    }
 else     if (""String_Node_Str"".equals(type)) {
    }
 else {
      throw new SDKException(""String_Node_Str"");
    }
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}"
63184,"@Test public void getBlock() throws ConnectorException, IOException {
  Block b=ontSdk.getConnectMgr().getBlock(20);
  Assert.assertNotNull(b);
}","@Test public void getBlock() throws ConnectorException, IOException {
  int blockHeight=ontSdk.getConnectMgr().getBlockHeight();
  Block b=ontSdk.getConnectMgr().getBlock(blockHeight);
  Assert.assertNotNull(b);
}"
63185,"@Test public void getBlockByBlockhash() throws ConnectorException, IOException {
  Block b2=ontSdk.getConnectMgr().getBlock(20);
  blockHash=b2.hash().toString();
  Block b=ontSdk.getConnectMgr().getBlock(blockHash);
  Assert.assertNotNull(b);
}","@Test public void getBlockByBlockhash() throws ConnectorException, IOException {
  int blockHeight=ontSdk.getConnectMgr().getBlockHeight();
  Block b2=ontSdk.getConnectMgr().getBlock(blockHeight);
  blockHash=b2.hash().toString();
  Block b=ontSdk.getConnectMgr().getBlock(blockHash);
  Assert.assertNotNull(b);
}"
63186,"@Test public void getBlockJson() throws ConnectorException, IOException {
  Object obj=ontSdk.getConnectMgr().getBlockJson(20);
  Assert.assertNotNull(obj);
}","@Test public void getBlockJson() throws ConnectorException, IOException {
  int blockHeight=ontSdk.getConnectMgr().getBlockHeight();
  Object obj=ontSdk.getConnectMgr().getBlockJson(blockHeight);
  Assert.assertNotNull(obj);
}"
63187,"@Test public void getBlockJsonbyHash() throws ConnectorException, IOException {
  Block b2=ontSdk.getConnectMgr().getBlock(20);
  blockHash=b2.hash().toString();
  Object obj=ontSdk.getConnectMgr().getBlockJson(blockHash);
  Assert.assertNotNull(obj);
}","@Test public void getBlockJsonbyHash() throws ConnectorException, IOException {
  int blockHeight=ontSdk.getConnectMgr().getBlockHeight();
  Block b2=ontSdk.getConnectMgr().getBlock(blockHeight);
  blockHash=b2.hash().toString();
  Object obj=ontSdk.getConnectMgr().getBlockJson(blockHash);
  Assert.assertNotNull(obj);
}"
63188,"@Before public void setUp() throws Exception {
  ontSdk=OntSdk.getInstance();
  String restUrl=""String_Node_Str"";
  codeHex=""String_Node_Str"";
  codeAddress=""String_Node_Str"";
  ontSdk.setRestful(restUrl);
  ontSdk.setDefaultConnect(ontSdk.getRestful());
  ontSdk.openWalletFile(""String_Node_Str"");
  ontSdk.setCodeAddress(codeAddress);
  String funStr=""String_Node_Str"";
  abiFunction=JSON.parseObject(funStr,AbiFunction.class);
  if (ontSdk.getWalletMgr().getIdentitys().size() < 1) {
    Identity did=ontSdk.getOntIdTx().sendRegister(""String_Node_Str"");
    Thread.sleep(6000);
  }
  did=ontSdk.getWalletMgr().getIdentitys().get(0);
  AccountInfo info=ontSdk.getWalletMgr().getAccountInfo(did.ontid,""String_Node_Str"");
  abiFunction.setParamsValue(did.ontid.getBytes(),""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes(),Helper.hexToBytes(info.pubkey));
  String funcStr2=""String_Node_Str"";
  abiFunction2=JSON.parseObject(funcStr2,AbiFunction.class);
  abiFunction2.setParamsValue(did.ontid.getBytes(),UUID.randomUUID().toString().getBytes());
}","@Before public void setUp() throws Exception {
  ontSdk=OntSdk.getInstance();
  String restUrl=""String_Node_Str"";
  codeHex=""String_Node_Str"";
  codeAddress=""String_Node_Str"";
  ontSdk.setRestful(restUrl);
  ontSdk.setDefaultConnect(ontSdk.getRestful());
  ontSdk.openWalletFile(""String_Node_Str"");
  ontSdk.setCodeAddress(codeAddress);
  String funStr=""String_Node_Str"";
  abiFunction=JSON.parseObject(funStr,AbiFunction.class);
  if (ontSdk.getWalletMgr().getIdentitys().size() < 1) {
    Identity did=ontSdk.getOntIdTx().sendRegister(""String_Node_Str"");
    Thread.sleep(6000);
  }
  did=ontSdk.getWalletMgr().getIdentitys().get(0);
  AccountInfo info=ontSdk.getWalletMgr().getAccountInfo(did.ontid,""String_Node_Str"");
  abiFunction.setParamsValue(did.ontid.getBytes(),""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes(),Helper.hexToBytes(info.pubkey));
  String funcStr2=""String_Node_Str"";
  abiFunction2=JSON.parseObject(funcStr2,AbiFunction.class);
  abiFunction2.setParamsValue(did.ontid.getBytes(),UUID.randomUUID().toString().getBytes());
  Transaction tx=ontSdk.getSmartcodeTx().makeDeployCodeTransaction(codeHex,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",VmType.NEOVM.value());
  String txHex=Helper.toHexString(tx.toArray());
  boolean b=ontSdk.getConnectMgr().sendRawTransaction(txHex);
  Thread.sleep(6000);
}"
63189,"public static List getProof(UInt256 leaf_hash,int node_index,UInt256[] audit_path,int tree_size){
  List nodes=new ArrayList<>();
  int last_node=tree_size - 1;
  int pos=0;
  for (; last_node > 0; ) {
    if (node_index % 2 == 1) {
      Map map=new HashMap();
      map.put(""String_Node_Str"",""String_Node_Str"");
      map.put(""String_Node_Str"",audit_path[pos].toHexString());
      nodes.add(map);
      pos+=1;
    }
 else     if (node_index < last_node) {
      pos+=1;
      Map map=new HashMap();
      map.put(""String_Node_Str"",""String_Node_Str"");
      map.put(""String_Node_Str"",audit_path[pos].toHexString());
      nodes.add(map);
    }
    node_index/=2;
    last_node/=2;
  }
  return nodes;
}","public static List getProof(UInt256 leaf_hash,int node_index,UInt256[] audit_path,int tree_size){
  List nodes=new ArrayList<>();
  int last_node=tree_size - 1;
  int pos=0;
  for (; last_node > 0; ) {
    if (node_index % 2 == 1) {
      Map map=new HashMap();
      map.put(""String_Node_Str"",""String_Node_Str"");
      map.put(""String_Node_Str"",audit_path[pos].toHexString());
      nodes.add(map);
      pos+=1;
    }
 else     if (node_index < last_node) {
      Map map=new HashMap();
      map.put(""String_Node_Str"",""String_Node_Str"");
      map.put(""String_Node_Str"",audit_path[pos].toHexString());
      nodes.add(map);
      pos+=1;
    }
    node_index/=2;
    last_node/=2;
  }
  return nodes;
}"
63190,"private long modTimeToMilis(String modTime){
  if (modTime.lastIndexOf(""String_Node_Str"") > 19 || modTime.lastIndexOf(""String_Node_Str"") > 19) {
    return modTimeZonedToMillis(modTime);
  }
  String[] dateTime=modTime.split(""String_Node_Str"");
  String yearMonthDay=dateTime[0];
  String hourMinuteSecond=dateTime[1].substring(0,dateTime[1].length() - 1);
  if (hourMinuteSecond.contains(""String_Node_Str"")) {
    int index=hourMinuteSecond.indexOf(""String_Node_Str"");
    hourMinuteSecond=hourMinuteSecond.substring(0,index);
  }
  String formattedDate=yearMonthDay + ""String_Node_Str"" + hourMinuteSecond+ ""String_Node_Str"";
  long dateInMillis;
  Date date;
  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  try {
    date=simpleDateFormat.parse(formattedDate);
    dateInMillis=date.getTime();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    dateInMillis=0;
  }
  return dateInMillis;
}","private long modTimeToMilis(String modTime){
  if (modTime.lastIndexOf(""String_Node_Str"") > 18 || modTime.lastIndexOf(""String_Node_Str"") > 18) {
    return modTimeZonedToMillis(modTime);
  }
  String[] dateTime=modTime.split(""String_Node_Str"");
  String yearMonthDay=dateTime[0];
  String hourMinuteSecond=dateTime[1].substring(0,dateTime[1].length() - 1);
  if (hourMinuteSecond.contains(""String_Node_Str"")) {
    int index=hourMinuteSecond.indexOf(""String_Node_Str"");
    hourMinuteSecond=hourMinuteSecond.substring(0,index);
  }
  String formattedDate=yearMonthDay + ""String_Node_Str"" + hourMinuteSecond+ ""String_Node_Str"";
  long dateInMillis;
  Date date;
  SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
  try {
    date=simpleDateFormat.parse(formattedDate);
    dateInMillis=date.getTime();
  }
 catch (  ParseException e) {
    e.printStackTrace();
    dateInMillis=0;
  }
  return dateInMillis;
}"
63191,"@Override public void onStart(){
  super.onStart();
  if (showThumbnails) {
    startThumbnailService();
  }
  if (directoryObject.isContentValid()) {
    return;
  }
  if (fetchDirectoryTask != null) {
    fetchDirectoryTask.cancel(true);
  }
  swipeRefreshLayout.setRefreshing(true);
  fetchDirectoryTask=new FetchDirectoryContent(true).execute();
}","@Override public void onStart(){
  super.onStart();
  registerReceivers();
  if (showThumbnails) {
    startThumbnailService();
  }
  if (directoryObject.isContentValid()) {
    return;
  }
  if (fetchDirectoryTask != null) {
    fetchDirectoryTask.cancel(true);
  }
  swipeRefreshLayout.setRefreshing(true);
  fetchDirectoryTask=new FetchDirectoryContent(true).execute();
}"
63192,"@Override public void onStop(){
  super.onStop();
  if (showThumbnails) {
    Intent intent=new Intent(context,ThumbnailsLoadingService.class);
    context.stopService(intent);
  }
  LocalBroadcastManager.getInstance(context).unregisterReceiver(backgroundTaskBroadcastReceiver);
}","@Override public void onStop(){
  super.onStop();
  if (isThumbnailsServiceRunning) {
    Intent intent=new Intent(context,ThumbnailsLoadingService.class);
    context.stopService(intent);
    isThumbnailsServiceRunning=false;
  }
  LocalBroadcastManager.getInstance(context).unregisterReceiver(backgroundTaskBroadcastReceiver);
}"
63193,"private void startThumbnailService(){
  Intent serveIntent=new Intent(getContext(),ThumbnailsLoadingService.class);
  serveIntent.putExtra(ThumbnailsLoadingService.REMOTE_ARG,remoteName);
  context.startService(serveIntent);
}","private void startThumbnailService(){
  Intent serveIntent=new Intent(getContext(),ThumbnailsLoadingService.class);
  serveIntent.putExtra(ThumbnailsLoadingService.REMOTE_ARG,remoteName);
  context.startService(serveIntent);
  isThumbnailsServiceRunning=true;
}"
63194,"private void hideBottomBar(){
  View bottomBar=getView().findViewById(R.id.bottom_bar);
  Animation animation=AnimationUtils.loadAnimation(getContext(),R.anim.fade_out_animation);
  bottomBar.setAnimation(animation);
  bottomBar.setVisibility(View.GONE);
}","private void hideBottomBar(){
  View bottomBar=getView().findViewById(R.id.bottom_bar);
  if (bottomBar.getVisibility() != View.VISIBLE) {
    return;
  }
  Animation animation=AnimationUtils.loadAnimation(getContext(),R.anim.fade_out_animation);
  bottomBar.setAnimation(animation);
  bottomBar.setVisibility(View.GONE);
}"
63195,"private void setBottomBarClickListeners(final View view){
  view.findViewById(R.id.file_download).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onDownloadClicked();
    }
  }
);
  view.findViewById(R.id.file_move).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onMoveClicked();
    }
  }
);
  view.findViewById(R.id.file_rename).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onRenameClicked();
    }
  }
);
  view.findViewById(R.id.file_delete).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onDeleteClicked();
    }
  }
);
  view.findViewById(R.id.cancel_move).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getActivity().setTitle(remoteType);
      recyclerViewAdapter.setMoveMode(false);
      isInMoveMode=false;
      hideMoveBar();
      fab.show();
      fab.setVisibility(View.VISIBLE);
      getActivity().findViewById(R.id.action_select_all).setVisibility(View.VISIBLE);
      recyclerViewAdapter.refreshData();
    }
  }
);
  view.findViewById(R.id.select_move).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getActivity().setTitle(remoteType);
      hideMoveBar();
      fab.show();
      fab.setVisibility(View.VISIBLE);
      getActivity().findViewById(R.id.action_select_all).setVisibility(View.VISIBLE);
      recyclerViewAdapter.setMoveMode(false);
      isInMoveMode=false;
      String oldPath=moveList.get(0).getPath();
      int index=oldPath.lastIndexOf(moveList.get(0).getName());
      directoryCache.remove(moveList.get(0).getPath().substring(0,index - 1));
      new MoveTask().execute();
    }
  }
);
  view.findViewById(R.id.new_folder).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onCreateNewDirectory();
    }
  }
);
}","private void setBottomBarClickListeners(final View view){
  view.findViewById(R.id.file_download).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onDownloadClicked();
    }
  }
);
  view.findViewById(R.id.file_move).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onMoveClicked();
    }
  }
);
  view.findViewById(R.id.file_rename).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onRenameClicked();
    }
  }
);
  view.findViewById(R.id.file_delete).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onDeleteClicked();
    }
  }
);
  view.findViewById(R.id.cancel_move).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getActivity().setTitle(remoteType);
      recyclerViewAdapter.setMoveMode(false);
      isInMoveMode=false;
      hideMoveBar();
      fab.show();
      fab.setVisibility(View.VISIBLE);
      getActivity().findViewById(R.id.action_select_all).setVisibility(View.VISIBLE);
      recyclerViewAdapter.refreshData();
    }
  }
);
  view.findViewById(R.id.select_move).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getActivity().setTitle(remoteType);
      hideMoveBar();
      fab.show();
      fab.setVisibility(View.VISIBLE);
      getActivity().findViewById(R.id.action_select_all).setVisibility(View.VISIBLE);
      recyclerViewAdapter.setMoveMode(false);
      isInMoveMode=false;
      String oldPath=moveList.get(0).getPath();
      int index=oldPath.lastIndexOf(moveList.get(0).getName());
      if (index > 0) {
        directoryCache.remove(moveList.get(0).getPath().substring(0,index - 1));
      }
 else {
        directoryCache.remove(""String_Node_Str"" + remote);
      }
      new MoveTask().execute();
    }
  }
);
  view.findViewById(R.id.new_folder).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onCreateNewDirectory();
    }
  }
);
}"
63196,"/** 
 * Plugin registration.
 */
public static void registerWith(Registrar registrar){
  final MethodChannel channel=new MethodChannel(registrar.messenger(),""String_Node_Str"");
  instance=new MusicFinderPlugin(registrar.activity(),channel);
  registrar.addRequestPermissionResultListener(instance);
  channel.setMethodCallHandler(instance);
}","/** 
 * Plugin registration.
 */
public static void registerWith(Registrar registrar){
  final MethodChannel channel=new MethodChannel(registrar.messenger(),""String_Node_Str"");
  instance=new MusicFinderPlugin(registrar.activity(),channel);
  registrar.addRequestPermissionsResultListener(instance);
  channel.setMethodCallHandler(instance);
}"
63197,"@Override public boolean onRequestPermissionResult(int requestCode,String[] permissions,int[] grantResults){
  if (requestCode == REQUEST_CODE_STORAGE_PERMISSION) {
    for (int i=0; i < permissions.length; i++) {
      String permission=permissions[i];
      int grantResult=grantResults[i];
      if (permission.equals(Manifest.permission.CAMERA)) {
        if (grantResult == PackageManager.PERMISSION_GRANTED) {
          if (executeAfterPermissionGranted) {
            pendingResult.success(getData());
            pendingResult=null;
            arguments=null;
          }
        }
 else {
          setNoPermissionsError();
        }
      }
    }
  }
  return false;
}","@Override public boolean onRequestPermissionResult(int requestCode,String[] permissions,int[] grantResults){
  if (requestCode == REQUEST_CODE_STORAGE_PERMISSION) {
    for (int i=0; i < permissions.length; i++) {
      String permission=permissions[i];
      int grantResult=grantResults[i];
      if (permission.equals(Manifest.permission.READ_EXTERNAL_STORAGE)) {
        if (grantResult == PackageManager.PERMISSION_GRANTED) {
          if (executeAfterPermissionGranted) {
            pendingResult.success(getData());
            pendingResult=null;
            arguments=null;
          }
        }
 else {
          setNoPermissionsError();
        }
      }
    }
  }
  return false;
}"
63198,"@Override public InputStream open(String path) throws IOException {
  return this.getClass().getResourceAsStream(path);
}","@Override public InputStream open(String path) throws IOException {
  return this.getClass().getResourceAsStream(parse(path));
}"
63199,"/** 
 * Based on scenario list, it will perform transfer packet or receive packet, then it will report the test result.
 * @param listScenario list of packet scenario
 * @return test result(counts of succeed and failure)
 */
private ScenarioExecutionResult execute(final List<ScenarioUnit> listScenario) throws SuspendExecution {
  ReportHandler reportHandler=new ReportHandler();
  int succeedCount=0;
  int failureCount=0;
  List<Integer> previousLoopStartIdx=new ArrayList<>();
  List<Integer> loopCountList=new ArrayList<>();
  int loopDepth=-1;
  ScenarioExecutionResult result=new ScenarioExecutionResult();
  Instant requestTime=Instant.now();
  Instant responseTime;
  String originalJson;
  if (Config.obj().getCustomScenarioAPI().isUse()) {
    ApiLoader.obj().initialize(PacketClassPool.obj(),listCommunication,runtimeVar,userId);
  }
  try {
    for (int scenarioIdx=0; scenarioIdx < listScenario.size(); scenarioIdx++) {
      ScenarioUnit scenario=listScenario.get(scenarioIdx);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + scenario.type + ""String_Node_Str""+ scenario.name+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.dest+ ""String_Node_Str""+ scenario.subId+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.json);
      }
      if (scenario.type.equals(ScenarioUnitType.SetCardDeck)) {
        JMXClient.obj().setCardDeck(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.SetQaCommand)) {
        JMXClient.obj().setQaCommand(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.loopType == LoopType.LoopStart) {
        if (scenario.loopDepth != loopDepth) {
          loopDepth=scenario.loopDepth;
          previousLoopStartIdx.add(scenarioIdx);
          loopCountList.add(scenario.loopCount);
          logger.debug(""String_Node_Str"");
        }
        continue;
      }
      if (scenario.loopType == LoopType.LoopEnd) {
        int currentLoopCount=loopCountList.get(loopDepth) - 1;
        if (currentLoopCount < 1) {
          loopCountList.remove(loopDepth);
          previousLoopStartIdx.remove(loopDepth);
          loopDepth--;
          logger.debug(""String_Node_Str"");
        }
 else {
          loopCountList.set(loopDepth,currentLoopCount);
          scenarioIdx=previousLoopStartIdx.get(scenario.loopDepth);
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + currentLoopCount + ""String_Node_Str""+ scenarioIdx);
        }
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Sleep)) {
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"",scenario.sleepPeriod);
        Strand.sleep(scenario.sleepPeriod);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Print)) {
        logger.info(""String_Node_Str"",scenario.reservedField);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.ExtraFunctionCall)) {
        if (ApiLoader.obj().executeExtraFunction(result,userId,scenario).equals(Boolean.FALSE)) {
          if (loopDepth >= 0) {
            int currentLoopCount=loopCountList.get(loopDepth) - 1;
            logger.warn(""String_Node_Str"",currentLoopCount,loopDepth);
            if (currentLoopCount >= 0) {
              int tmpScenarioIdx=scenarioIdx + 1;
              while (true) {
                ScenarioUnit tmpScenario=listScenario.get(tmpScenarioIdx);
                if (tmpScenario.loopType == LoopType.LoopEnd && tmpScenario.loopDepth == loopDepth) {
                  scenarioIdx=tmpScenarioIdx - 1;
                  break;
                }
                tmpScenarioIdx++;
              }
            }
            if (loopDepth > 0) {
              logger.warn(""String_Node_Str"");
            }
 else {
              logger.warn(""String_Node_Str"");
            }
          }
        }
        continue;
      }
      if (scenario.json.contains(UsingVariableDelimiter)) {
        originalJson=scenario.json;
        scenario.json=applyVariable(runtimeVar,scenario.json);
      }
 else {
        originalJson=EmptyString;
      }
      for (      IBaseCommunication communication : listCommunication) {
        if (communication.isRegisteredScenarioType(scenario.type)) {
switch (scenario.communicationMethod) {
case CommunicationMethod.Request:
            requestTime=Instant.now();
          communication.execute(scenario);
        break;
case CommunicationMethod.Response:
      Boolean isSucceed=communication.compareWithRealResponse(scenario);
    if (isSucceed) {
      if (scenario.type.equals(ScenarioUnitType.Response)) {
        responseTime=Instant.now();
        result.listResponseTime.add(Duration.between(requestTime,responseTime));
      }
      succeedCount++;
    }
 else     failureCount++;
  break;
default :
logger.error(""String_Node_Str"" + scenario.type);
break;
}
}
}
if (!originalJson.equals(EmptyString)) {
scenario.json=originalJson;
}
}
StatisticsResult statisticsResult=null;
result.succeedCount+=succeedCount;
result.failureCount+=failureCount;
reportHandler.writeLogForFinalResult(result.succeedCount,result.failureCount);
statisticsResult=reportHandler.writeLogForStatisticsResult(result.listResponseTime);
result.statisticsResult=statisticsResult;
}
 catch (Exception e) {
logger.error(ExceptionUtils.getStackTrace(e));
}
return result;
}","/** 
 * Based on scenario list, it will perform transfer packet or receive packet, then it will report the test result.
 * @param listScenario list of packet scenario
 * @return test result(counts of succeed and failure)
 */
private ScenarioExecutionResult execute(final List<ScenarioUnit> listScenario) throws SuspendExecution {
  ReportHandler reportHandler=new ReportHandler();
  int succeedCount=0;
  int failureCount=0;
  List<Integer> previousLoopStartIdx=new ArrayList<>();
  List<Integer> loopCountList=new ArrayList<>();
  int loopDepth=-1;
  ScenarioExecutionResult result=new ScenarioExecutionResult();
  Instant requestTime=Instant.now();
  Instant responseTime;
  String originalJson;
  if (Config.obj().getCustomScenarioAPI().isUse()) {
    ApiLoader.obj().initialize(PacketClassPool.obj(),listCommunication,runtimeVar,userId);
  }
  try {
    for (int scenarioIdx=0; scenarioIdx < listScenario.size(); scenarioIdx++) {
      ScenarioUnit scenario=listScenario.get(scenarioIdx);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + scenario.type + ""String_Node_Str""+ scenario.name+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.dest+ ""String_Node_Str""+ scenario.subId+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.json);
      }
      if (scenario.type.equals(ScenarioUnitType.SetCardDeck)) {
        JMXClient.obj().setCardDeck(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.SetQaCommand)) {
        JMXClient.obj().setQaCommand(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.loopType == LoopType.LoopStart) {
        if (scenario.loopDepth != loopDepth) {
          loopDepth=scenario.loopDepth;
          previousLoopStartIdx.add(scenarioIdx);
          loopCountList.add(scenario.loopCount);
          logger.debug(""String_Node_Str"");
        }
        continue;
      }
      if (scenario.loopType == LoopType.LoopEnd) {
        int currentLoopCount=loopCountList.get(loopDepth) - 1;
        if (currentLoopCount < 1) {
          loopCountList.remove(loopDepth);
          previousLoopStartIdx.remove(loopDepth);
          loopDepth--;
          logger.debug(""String_Node_Str"");
        }
 else {
          loopCountList.set(loopDepth,currentLoopCount);
          scenarioIdx=previousLoopStartIdx.get(scenario.loopDepth);
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + currentLoopCount + ""String_Node_Str""+ scenarioIdx);
        }
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Sleep)) {
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"",scenario.sleepPeriod);
        Strand.sleep(scenario.sleepPeriod);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Print)) {
        logger.info(""String_Node_Str"",scenario.reservedField);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.ExtraFunctionCall)) {
        if (ApiLoader.obj().executeExtraFunction(result,userId,scenario).equals(Boolean.FALSE)) {
          if (loopDepth >= 0) {
            int currentLoopCount=loopCountList.get(loopDepth) - 1;
            logger.warn(""String_Node_Str"",currentLoopCount,loopDepth);
            if (currentLoopCount >= 0) {
              int tmpScenarioIdx=scenarioIdx + 1;
              while (true) {
                ScenarioUnit tmpScenario=listScenario.get(tmpScenarioIdx);
                if (tmpScenario.loopType == LoopType.LoopEnd && tmpScenario.loopDepth == loopDepth) {
                  scenarioIdx=tmpScenarioIdx - 1;
                  break;
                }
                tmpScenarioIdx++;
              }
            }
            if (loopDepth > 0) {
              logger.warn(""String_Node_Str"");
            }
 else {
              logger.warn(""String_Node_Str"");
            }
          }
        }
        continue;
      }
      if (scenario.json.contains(UsingVariableDelimiter)) {
        originalJson=scenario.json;
        scenario.json=applyVariable(runtimeVar,scenario.json);
      }
 else {
        originalJson=EmptyString;
      }
      for (      IBaseCommunication communication : listCommunication) {
        if (communication.isRegisteredScenarioType(scenario.type)) {
switch (scenario.communicationMethod) {
case CommunicationMethod.Request:
            requestTime=Instant.now();
          communication.execute(scenario);
        break;
case CommunicationMethod.Response:
      Boolean isSucceed=communication.compareWithRealResponse(scenario);
    if (isSucceed) {
      responseTime=Instant.now();
      result.listResponseTime.add(Duration.between(requestTime,responseTime));
      succeedCount++;
    }
 else     failureCount++;
  break;
default :
logger.error(""String_Node_Str"" + scenario.type);
break;
}
}
}
if (!originalJson.equals(EmptyString)) {
scenario.json=originalJson;
}
}
StatisticsResult statisticsResult=null;
result.succeedCount+=succeedCount;
result.failureCount+=failureCount;
reportHandler.writeLogForFinalResult(result.succeedCount,result.failureCount);
statisticsResult=reportHandler.writeLogForStatisticsResult(result.listResponseTime);
result.statisticsResult=statisticsResult;
}
 catch (Exception e) {
logger.error(ExceptionUtils.getStackTrace(e));
}
return result;
}"
63200,"/** 
 * Based on scenario list, it will perform transfer packet or receive packet, then it will report the test result.
 * @param listScenario list of packet scenario
 * @return test result(counts of succeed and failure)
 */
private ScenarioExecutionResult execute(final List<ScenarioUnit> listScenario) throws SuspendExecution {
  ReportHandler reportHandler=new ReportHandler();
  int succeedCount=0;
  int failureCount=0;
  List<Integer> previousLoopStartIdx=new ArrayList<>();
  List<Integer> loopCountList=new ArrayList<>();
  int loopDepth=-1;
  ScenarioExecutionResult result=new ScenarioExecutionResult();
  Instant requestTime=Instant.now();
  Instant responseTime;
  String originalJson;
  if (Config.obj().getCustomScenarioAPI().isUse()) {
    ApiLoader.obj().initialize(PacketClassPool.obj(),listCommunication,runtimeVar,userId);
  }
  try {
    for (int scenarioIdx=0; scenarioIdx < listScenario.size(); scenarioIdx++) {
      ScenarioUnit scenario=listScenario.get(scenarioIdx);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + scenario.type + ""String_Node_Str""+ scenario.name+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.dest+ ""String_Node_Str""+ scenario.subId+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.json);
      }
      if (scenario.type.equals(ScenarioUnitType.SetCardDeck)) {
        JMXClient.obj().setCardDeck(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.SetQaCommand)) {
        JMXClient.obj().setQaCommand(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.loopType == LoopType.LoopStart) {
        if (scenario.loopDepth != loopDepth) {
          loopDepth=scenario.loopDepth;
          previousLoopStartIdx.add(scenarioIdx);
          loopCountList.add(scenario.loopCount);
          logger.debug(""String_Node_Str"");
        }
        continue;
      }
      if (scenario.loopType == LoopType.LoopEnd) {
        int currentLoopCount=loopCountList.get(loopDepth) - 1;
        if (currentLoopCount < 1) {
          loopCountList.remove(loopDepth);
          previousLoopStartIdx.remove(loopDepth);
          loopDepth--;
          logger.debug(""String_Node_Str"");
        }
 else {
          loopCountList.set(loopDepth,currentLoopCount);
          scenarioIdx=previousLoopStartIdx.get(scenario.loopDepth);
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + currentLoopCount + ""String_Node_Str""+ scenarioIdx);
        }
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Sleep)) {
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"",scenario.sleepPeriod);
        Strand.sleep(scenario.sleepPeriod);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Print)) {
        logger.info(""String_Node_Str"",scenario.reservedField);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.ExtraFunctionCall)) {
        if (ApiLoader.obj().executeExtraFunction(result,userId,scenario).equals(Boolean.FALSE)) {
          if (loopDepth >= 0) {
            int currentLoopCount=loopCountList.get(loopDepth) - 1;
            logger.warn(""String_Node_Str"",currentLoopCount,loopDepth);
            if (currentLoopCount >= 0) {
              int tmpScenarioIdx=scenarioIdx + 1;
              while (true) {
                ScenarioUnit tmpScenario=listScenario.get(tmpScenarioIdx);
                if (tmpScenario.loopType == LoopType.LoopEnd && tmpScenario.loopDepth == loopDepth) {
                  scenarioIdx=tmpScenarioIdx - 1;
                  break;
                }
                tmpScenarioIdx++;
              }
            }
            if (loopDepth > 0) {
              logger.warn(""String_Node_Str"");
            }
 else {
              logger.warn(""String_Node_Str"");
            }
          }
        }
        continue;
      }
      if (scenario.json.contains(UsingVariableDelimiter)) {
        originalJson=scenario.json;
        scenario.json=applyVariable(runtimeVar,scenario.json);
      }
 else {
        originalJson=EmptyString;
      }
      for (      IBaseCommunication communication : listCommunication) {
        if (communication.isRegisteredScenarioType(scenario.type)) {
switch (scenario.communicationMethod) {
case CommunicationMethod.Request:
            requestTime=Instant.now();
          communication.execute(scenario);
        break;
case CommunicationMethod.Response:
      Boolean isSucceed=communication.compareWithRealResponse(scenario);
    if (isSucceed) {
      if (scenario.type.equals(ScenarioUnitType.Response)) {
        responseTime=Instant.now();
        result.listResponseTime.add(Duration.between(requestTime,responseTime));
      }
      succeedCount++;
    }
 else     failureCount++;
  break;
default :
logger.error(""String_Node_Str"" + scenario.type);
break;
}
}
}
if (!originalJson.equals(EmptyString)) {
scenario.json=originalJson;
}
}
StatisticsResult statisticsResult=null;
result.succeedCount+=succeedCount;
result.failureCount+=failureCount;
reportHandler.writeLogForFinalResult(result.succeedCount,result.failureCount);
statisticsResult=reportHandler.writeLogForStatisticsResult(result.listResponseTime);
result.statisticsResult=statisticsResult;
}
 catch (Exception e) {
logger.error(ExceptionUtils.getStackTrace(e));
}
return result;
}","/** 
 * Based on scenario list, it will perform transfer packet or receive packet, then it will report the test result.
 * @param listScenario list of packet scenario
 * @return test result(counts of succeed and failure)
 */
private ScenarioExecutionResult execute(final List<ScenarioUnit> listScenario) throws SuspendExecution {
  ReportHandler reportHandler=new ReportHandler();
  int succeedCount=0;
  int failureCount=0;
  List<Integer> previousLoopStartIdx=new ArrayList<>();
  List<Integer> loopCountList=new ArrayList<>();
  int loopDepth=-1;
  ScenarioExecutionResult result=new ScenarioExecutionResult();
  Instant requestTime=Instant.now();
  Instant responseTime;
  String originalJson;
  if (Config.obj().getCustomScenarioAPI().isUse()) {
    ApiLoader.obj().initialize(PacketClassPool.obj(),listCommunication,runtimeVar,userId);
  }
  try {
    for (int scenarioIdx=0; scenarioIdx < listScenario.size(); scenarioIdx++) {
      ScenarioUnit scenario=listScenario.get(scenarioIdx);
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + ""String_Node_Str"" + scenario.type + ""String_Node_Str""+ scenario.name+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.dest+ ""String_Node_Str""+ scenario.subId+ ""String_Node_Str""+ ""String_Node_Str""+ scenario.json);
      }
      if (scenario.type.equals(ScenarioUnitType.SetCardDeck)) {
        JMXClient.obj().setCardDeck(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.SetQaCommand)) {
        JMXClient.obj().setQaCommand(scenario.json);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"");
        logger.debug(""String_Node_Str"",scenario.json);
        continue;
      }
      if (scenario.loopType == LoopType.LoopStart) {
        if (scenario.loopDepth != loopDepth) {
          loopDepth=scenario.loopDepth;
          previousLoopStartIdx.add(scenarioIdx);
          loopCountList.add(scenario.loopCount);
          logger.debug(""String_Node_Str"");
        }
        continue;
      }
      if (scenario.loopType == LoopType.LoopEnd) {
        int currentLoopCount=loopCountList.get(loopDepth) - 1;
        if (currentLoopCount < 1) {
          loopCountList.remove(loopDepth);
          previousLoopStartIdx.remove(loopDepth);
          loopDepth--;
          logger.debug(""String_Node_Str"");
        }
 else {
          loopCountList.set(loopDepth,currentLoopCount);
          scenarioIdx=previousLoopStartIdx.get(scenario.loopDepth);
          if (logger.isDebugEnabled())           logger.debug(""String_Node_Str"" + currentLoopCount + ""String_Node_Str""+ scenarioIdx);
        }
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Sleep)) {
        if (logger.isDebugEnabled())         logger.debug(""String_Node_Str"",scenario.sleepPeriod);
        Strand.sleep(scenario.sleepPeriod);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.Print)) {
        logger.info(""String_Node_Str"",scenario.reservedField);
        continue;
      }
      if (scenario.type.equals(ScenarioUnitType.ExtraFunctionCall)) {
        if (ApiLoader.obj().executeExtraFunction(result,userId,scenario).equals(Boolean.FALSE)) {
          if (loopDepth >= 0) {
            int currentLoopCount=loopCountList.get(loopDepth) - 1;
            logger.warn(""String_Node_Str"",currentLoopCount,loopDepth);
            if (currentLoopCount >= 0) {
              int tmpScenarioIdx=scenarioIdx + 1;
              while (true) {
                ScenarioUnit tmpScenario=listScenario.get(tmpScenarioIdx);
                if (tmpScenario.loopType == LoopType.LoopEnd && tmpScenario.loopDepth == loopDepth) {
                  scenarioIdx=tmpScenarioIdx - 1;
                  break;
                }
                tmpScenarioIdx++;
              }
            }
            if (loopDepth > 0) {
              logger.warn(""String_Node_Str"");
            }
 else {
              logger.warn(""String_Node_Str"");
            }
          }
        }
        continue;
      }
      if (scenario.json.contains(UsingVariableDelimiter)) {
        originalJson=scenario.json;
        scenario.json=applyVariable(runtimeVar,scenario.json);
      }
 else {
        originalJson=EmptyString;
      }
      for (      IBaseCommunication communication : listCommunication) {
        if (communication.isRegisteredScenarioType(scenario.type)) {
switch (scenario.communicationMethod) {
case CommunicationMethod.Request:
            requestTime=Instant.now();
          communication.execute(scenario);
        break;
case CommunicationMethod.Response:
      Boolean isSucceed=communication.compareWithRealResponse(scenario);
    if (isSucceed) {
      responseTime=Instant.now();
      result.listResponseTime.add(Duration.between(requestTime,responseTime));
      succeedCount++;
    }
 else     failureCount++;
  break;
default :
logger.error(""String_Node_Str"" + scenario.type);
break;
}
}
}
if (!originalJson.equals(EmptyString)) {
scenario.json=originalJson;
}
}
StatisticsResult statisticsResult=null;
result.succeedCount+=succeedCount;
result.failureCount+=failureCount;
reportHandler.writeLogForFinalResult(result.succeedCount,result.failureCount);
statisticsResult=reportHandler.writeLogForStatisticsResult(result.listResponseTime);
result.statisticsResult=statisticsResult;
}
 catch (Exception e) {
logger.error(ExceptionUtils.getStackTrace(e));
}
return result;
}"
63201,"@Before public void setUp() throws Exception {
  fetchThreadData=new FetchThreadData<>(new Handler());
  fetchThreadData.start();
  fetchThreadData.getLooper();
}","@Before public void setUp() throws Exception {
  Handler handler=mock(Handler.class);
  fetchThreadData=new FetchThreadData<>(handler);
  fetchThreadData.start();
  fetchThreadData.getLooper();
}"
63202,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  ButterKnife.bind(this);
  cityCountryName=sharedPreferences.getString(CITY_COUNTRY_NAME,""String_Node_Str"");
  actvCityCountryName.setText(cityCountryName);
  mFetchThreadData=new FetchThreadData<>(mHandler);
  mFetchThreadData.start();
  mFetchThreadData.getLooper();
  initServerResponse();
  if (!cityCountryName.equals(""String_Node_Str"")) {
    mFetchThreadData.queueResponce(0,cityCountryName);
  }
  if (database.isOpen()) {
    checkDatabaseState();
  }
 else {
    database=databaseHelper.getReadableDatabase();
    checkDatabaseState();
  }
  mAdapter=new SimpleCursorAdapter(this,R.layout.dropdown_text,null,new String[]{CITY_COUNTRY_NAME},new int[]{R.id.text},0);
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      if (constraint != null) {
        if (constraint.length() >= 3 && !TextUtils.isEmpty(constraint)) {
          Bundle bundle=new Bundle();
          String query=charArrayUpperCaser(constraint);
          bundle.putString(CITY_ARGS,query);
          getLoaderManager().restartLoader(0,bundle,MainActivity.this).forceLoad();
        }
      }
      return null;
    }
  }
);
  actvCityCountryName.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> listView,    View view,    int position,    long id){
      Cursor cursor=(Cursor)listView.getItemAtPosition(position);
      cityCountryName=cursor.getString(cursor.getColumnIndexOrThrow(CITY_COUNTRY_NAME));
      actvCityCountryName.setText(cityCountryName);
      mFetchThreadData.queueResponce(position,cityCountryName);
    }
  }
);
  actvCityCountryName.setAdapter(mAdapter);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  ButterKnife.bind(this);
  cityCountryName=sharedPreferences.getString(CITY_COUNTRY_NAME,""String_Node_Str"");
  actvCityCountryName.setText(cityCountryName);
  mFetchThreadData=new FetchThreadData<>(mHandler);
  mFetchThreadData.start();
  mFetchThreadData.getLooper();
  initServerResponse();
  if (database.isOpen()) {
    checkDatabaseState();
  }
 else {
    database=databaseHelper.getReadableDatabase();
    checkDatabaseState();
  }
  mAdapter=new SimpleCursorAdapter(this,R.layout.dropdown_text,null,new String[]{CITY_COUNTRY_NAME},new int[]{R.id.text},0);
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      if (constraint != null) {
        if (constraint.length() >= 3 && !TextUtils.isEmpty(constraint)) {
          Bundle bundle=new Bundle();
          String query=charArrayUpperCaser(constraint);
          bundle.putString(CITY_ARGS,query);
          getLoaderManager().restartLoader(0,bundle,MainActivity.this).forceLoad();
        }
      }
      return null;
    }
  }
);
  actvCityCountryName.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> listView,    View view,    int position,    long id){
      Cursor cursor=(Cursor)listView.getItemAtPosition(position);
      cityCountryName=cursor.getString(cursor.getColumnIndexOrThrow(CITY_COUNTRY_NAME));
      actvCityCountryName.setText(cityCountryName);
      mFetchThreadData.queueResponce(position,cityCountryName);
    }
  }
);
  actvCityCountryName.setAdapter(mAdapter);
}"
63203,"@Override protected void onDestroy(){
  super.onDestroy();
  if (mAdapter.getCursor() != null) {
    mAdapter.getCursor().close();
  }
  database.close();
  mFetchThreadData.clearQueue();
  mFetchThreadData.quit();
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (mAdapter.getCursor() != null) {
    mAdapter.getCursor().close();
  }
  database.close();
  mFetchThreadData.clearQueue();
}"
63204,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  ButterKnife.bind(this);
  cityCountryName=sharedPreferences.getString(CITY_COUNTRY_NAME,""String_Node_Str"");
  actvCityCountryName.setText(cityCountryName);
  mFetchThreadData=new FetchThreadData<>(mHandler);
  mFetchThreadData.start();
  mFetchThreadData.getLooper();
  initServerResponse();
  if (database.isOpen()) {
    checkDatabaseState();
  }
 else {
    database=databaseHelper.getReadableDatabase();
    checkDatabaseState();
  }
  mAdapter=new SimpleCursorAdapter(this,R.layout.dropdown_text,null,new String[]{CITY_COUNTRY_NAME},new int[]{R.id.text},0);
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      if (constraint != null) {
        if (constraint.length() >= 3 && !TextUtils.isEmpty(constraint)) {
          Bundle bundle=new Bundle();
          String query=charArrayUpperCaser(constraint);
          bundle.putString(CITY_ARGS,query);
          getLoaderManager().restartLoader(0,bundle,MainActivity.this).forceLoad();
        }
      }
      return null;
    }
  }
);
  actvCityCountryName.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> listView,    View view,    int position,    long id){
      Cursor cursor=(Cursor)listView.getItemAtPosition(position);
      cityCountryName=cursor.getString(cursor.getColumnIndexOrThrow(CITY_COUNTRY_NAME));
      actvCityCountryName.setText(cityCountryName);
      mFetchThreadData.queueResponce(position,cityCountryName);
    }
  }
);
  actvCityCountryName.setAdapter(mAdapter);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  ButterKnife.bind(this);
  cityCountryName=sharedPreferences.getString(CITY_COUNTRY_NAME,""String_Node_Str"");
  actvCityCountryName.setText(cityCountryName);
  mFetchThreadData=new FetchThreadData<>(mHandler);
  mFetchThreadData.start();
  mFetchThreadData.getLooper();
  initServerResponse();
  if (database.isOpen()) {
    checkDatabaseState();
  }
 else {
    database=databaseHelper.getReadableDatabase();
    checkDatabaseState();
  }
  mAdapter=new SimpleCursorAdapter(this,R.layout.dropdown_text,null,new String[]{CITY_COUNTRY_NAME},new int[]{R.id.text},0);
  mAdapter.setFilterQueryProvider(new FilterQueryProvider(){
    @Override public Cursor runQuery(    CharSequence constraint){
      if (constraint != null) {
        if (constraint.length() >= 3 && !TextUtils.isEmpty(constraint)) {
          Bundle bundle=new Bundle();
          String query=charArrayUpperCaser(constraint);
          bundle.putString(CITY_ARGS,query);
          getLoaderManager().restartLoader(0,bundle,MainActivity.this).forceLoad();
        }
      }
      return null;
    }
  }
);
  actvCityCountryName.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> listView,    View view,    int position,    long id){
      Cursor cursor=(Cursor)listView.getItemAtPosition(position);
      cityCountryName=cursor.getString(cursor.getColumnIndexOrThrow(CITY_COUNTRY_NAME));
      actvCityCountryName.setText(cityCountryName);
      mFetchThreadData.queueResponce(position,cityCountryName);
      hideKeyboard();
    }
  }
);
  actvCityCountryName.setAdapter(mAdapter);
}"
63205,"public void onItemClick(AdapterView<?> listView,View view,int position,long id){
  Cursor cursor=(Cursor)listView.getItemAtPosition(position);
  cityCountryName=cursor.getString(cursor.getColumnIndexOrThrow(CITY_COUNTRY_NAME));
  actvCityCountryName.setText(cityCountryName);
  mFetchThreadData.queueResponce(position,cityCountryName);
}","public void onItemClick(AdapterView<?> listView,View view,int position,long id){
  Cursor cursor=(Cursor)listView.getItemAtPosition(position);
  cityCountryName=cursor.getString(cursor.getColumnIndexOrThrow(CITY_COUNTRY_NAME));
  actvCityCountryName.setText(cityCountryName);
  mFetchThreadData.queueResponce(position,cityCountryName);
  hideKeyboard();
}"
63206,"void checkIncomplete(CompletableFuture<?> f){
  assertFalse(f.isDone());
  assertFalse(f.isCancelled());
  assertTrue(f.toString().matches(""String_Node_Str""));
  try {
    assertNull(f.getNow(null));
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  try {
    f.get(randomExpiredTimeout(),randomTimeUnit());
    shouldThrow();
  }
 catch (  TimeoutException success) {
  }
catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
}","void checkIncomplete(CompletableFuture<?> f){
  assertFalse(f.isDone());
  assertFalse(f.isCancelled());
  assertTrue(f.toString().matches(""String_Node_Str""));
  Object result=null;
  try {
    result=f.getNow(null);
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  assertNull(result);
  try {
    f.get(randomExpiredTimeout(),randomTimeUnit());
    shouldThrow();
  }
 catch (  TimeoutException success) {
  }
catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
}"
63207,"<T>void checkCompletedNormally(CompletableFuture<T> f,T value){
  checkTimedGet(f,value);
  try {
    assertEquals(value,f.join());
    assertEquals(value,f.getNow(null));
    assertEquals(value,f.get());
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  assertTrue(f.isDone());
  assertFalse(f.isCancelled());
  assertFalse(f.isCompletedExceptionally());
  assertTrue(f.toString().matches(""String_Node_Str""));
}","<T>void checkCompletedNormally(CompletableFuture<T> f,T value){
  checkTimedGet(f,value);
  assertEquals(value,f.join());
  assertEquals(value,f.getNow(null));
  T result=null;
  try {
    result=f.get();
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  assertEquals(value,result);
  assertTrue(f.isDone());
  assertFalse(f.isCancelled());
  assertFalse(f.isCompletedExceptionally());
  assertTrue(f.toString().matches(""String_Node_Str""));
}"
63208,"void checkCompletedNormally(CountedCompleter<?> a){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertNull(a.getRawResult());
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    assertNull(a.join());
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    a.quietlyJoin();
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  try {
    assertNull(a.get());
    assertNull(a.get(randomTimeout(),randomTimeUnit()));
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
}","void checkCompletedNormally(CountedCompleter<?> a){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertNull(a.getRawResult());
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    assertNull(a.join());
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    a.quietlyJoin();
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  Object v1=null, v2=null;
  try {
    v1=a.get();
    v2=a.get(randomTimeout(),randomTimeUnit());
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  assertNull(v1);
  assertNull(v2);
}"
63209,"@SuppressWarnings(""String_Node_Str"") protected <T>T serialClone(T o){
  try {
    ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(serialBytes(o)));
    T clone=(T)ois.readObject();
    if (o == clone)     assertImmutable(o);
    assertSame(o.getClass(),clone.getClass());
    return clone;
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") protected <T>T serialClone(T o){
  T clone=null;
  try {
    ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(serialBytes(o)));
    clone=(T)ois.readObject();
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  if (o == clone)   assertImmutable(o);
 else   assertSame(o.getClass(),clone.getClass());
  return clone;
}"
63210,"/** 
 * A version of serialClone that leaves error handling (for e.g. NotSerializableException) up to the caller.
 */
@SuppressWarnings(""String_Node_Str"") <T>T serialClonePossiblyFailing(T o) throws Exception {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(bos);
  oos.writeObject(o);
  oos.flush();
  oos.close();
  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));
  T clone=(T)ois.readObject();
  if (o == clone)   assertImmutable(o);
  assertSame(o.getClass(),clone.getClass());
  return clone;
}","/** 
 * A version of serialClone that leaves error handling (for e.g. NotSerializableException) up to the caller.
 */
@SuppressWarnings(""String_Node_Str"") <T>T serialClonePossiblyFailing(T o) throws Exception {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(bos);
  oos.writeObject(o);
  oos.flush();
  oos.close();
  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));
  T clone=(T)ois.readObject();
  if (o == clone)   assertImmutable(o);
 else   assertSame(o.getClass(),clone.getClass());
  return clone;
}"
63211,"/** 
 * Tests scenario for JDK-8187947: A race condition in SubmissionPublisher cvs update -D '2017-11-25' src/main/java/util/concurrent/SubmissionPublisher.java && ant -Djsr166.expensiveTests=true -Djsr166.tckTestClass=SubmissionPublisherTest -Djsr166.methodFilter=testMissedSignal tck; cvs update -A src/main/java/util/concurrent/SubmissionPublisher.java
 */
public void testMissedSignal_8187947() throws Exception {
  final int N=expensiveTests ? (1 << 20) : (1 << 10);
  final CountDownLatch finished=new CountDownLatch(1);
  final SubmissionPublisher<Boolean> pub=new SubmissionPublisher<>();
class Sub implements Subscriber<Boolean> {
    int received;
    public void onSubscribe(    Subscription s){
      s.request(N);
    }
    public void onNext(    Boolean item){
      if (++received == N)       finished.countDown();
 else       CompletableFuture.runAsync(() -> pub.submit(Boolean.TRUE));
    }
    public void onError(    Throwable t){
      throw new AssertionError(t);
    }
    public void onComplete(){
    }
  }
  pub.subscribe(new Sub());
  CompletableFuture.runAsync(() -> pub.submit(Boolean.TRUE));
  await(finished);
}","/** 
 * Tests scenario for JDK-8187947: A race condition in SubmissionPublisher cvs update -D '2017-11-25' src/main/java/util/concurrent/SubmissionPublisher.java && ant -Djsr166.expensiveTests=true -Djsr166.tckTestClass=SubmissionPublisherTest -Djsr166.methodFilter=testMissedSignal tck; cvs update -A src/main/java/util/concurrent/SubmissionPublisher.java
 */
public void testMissedSignal_8187947() throws Exception {
  final int N=expensiveTests ? (1 << 20) : (1 << 10);
  final CountDownLatch finished=new CountDownLatch(1);
  final SubmissionPublisher<Boolean> pub=new SubmissionPublisher<>();
class Sub implements Subscriber<Boolean> {
    int received;
    public void onSubscribe(    Subscription s){
      s.request(N);
    }
    public void onNext(    Boolean item){
      if (++received == N)       finished.countDown();
 else       CompletableFuture.runAsync(() -> pub.submit(Boolean.TRUE));
    }
    public void onError(    Throwable t){
      throw new AssertionError(t);
    }
    public void onComplete(){
    }
  }
  pub.subscribe(new Sub());
  checkTimedGet(CompletableFuture.runAsync(() -> pub.submit(Boolean.TRUE)),null);
  await(finished);
}"
63212,"<T>void checkCompletedNormally(ForkJoinTask<T> a,T expected){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertSame(expected,a.getRawResult());
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    assertSame(expected,a.join());
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    a.quietlyJoin();
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  try {
    assertSame(expected,a.get());
    assertSame(expected,a.get(randomTimeout(),randomTimeUnit()));
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
}","<T>void checkCompletedNormally(ForkJoinTask<T> a,T expectedValue){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertSame(expectedValue,a.getRawResult());
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    assertSame(expectedValue,a.join());
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
{
    Thread.currentThread().interrupt();
    long startTime=System.nanoTime();
    a.quietlyJoin();
    assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS);
    Thread.interrupted();
  }
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  T v1=null, v2=null;
  try {
    v1=a.get();
    v2=a.get(randomTimeout(),randomTimeUnit());
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  assertSame(expectedValue,v1);
  assertSame(expectedValue,v2);
}"
63213,"/** 
 * Waits for the task to complete, and checks that when it does, it will have an Integer result equals to the given int.
 */
void checkCompletesNormally(RecursiveTask<Integer> a,int expected){
  Integer r=a.join();
  assertEquals(expected,(int)r);
  checkCompletedNormally(a,r);
}","/** 
 * Waits for the task to complete, and checks that when it does, it will have an Integer result equals to the given int.
 */
void checkCompletesNormally(RecursiveTask<Integer> a,int expectedValue){
  Integer r=a.join();
  assertEquals(expectedValue,(int)r);
  checkCompletedNormally(a,r);
}"
63214,"/** 
 * Like checkCompletesNormally, but verifies that the task has already completed.
 */
void checkCompletedNormally(RecursiveTask<Integer> a,int expected){
  Integer r=a.getRawResult();
  assertEquals(expected,(int)r);
  checkCompletedNormally(a,r);
}","/** 
 * Like checkCompletesNormally, but verifies that the task has already completed.
 */
void checkCompletedNormally(RecursiveTask<Integer> a,int expectedValue){
  Integer r=a.getRawResult();
  assertEquals(expectedValue,(int)r);
  checkCompletedNormally(a,r);
}"
63215,"void checkCompletedNormally(ForkJoinTask<?> a){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertNull(a.getRawResult());
  assertNull(a.join());
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  try {
    assertNull(a.get());
    assertNull(a.get(randomTimeout(),randomTimeUnit()));
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
}","void checkCompletedNormally(ForkJoinTask<?> a){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertNull(a.getRawResult());
  assertNull(a.join());
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  Object v1=null, v2=null;
  try {
    v1=a.get();
    v2=a.get(randomTimeout(),randomTimeUnit());
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  assertNull(v1);
  assertNull(v2);
}"
63216,"void checkCompletedNormally(RecursiveAction a){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertNull(a.getRawResult());
  assertNull(a.join());
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  try {
    assertNull(a.get());
    assertNull(a.get(randomTimeout(),randomTimeUnit()));
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
}","void checkCompletedNormally(RecursiveAction a){
  assertTrue(a.isDone());
  assertFalse(a.isCancelled());
  assertTrue(a.isCompletedNormally());
  assertFalse(a.isCompletedAbnormally());
  assertNull(a.getException());
  assertNull(a.getRawResult());
  assertNull(a.join());
  assertFalse(a.cancel(false));
  assertFalse(a.cancel(true));
  Object v1=null, v2=null;
  try {
    v1=a.get();
    v2=a.get(randomTimeout(),randomTimeUnit());
  }
 catch (  Throwable fail) {
    threadUnexpectedException(fail);
  }
  assertNull(v1);
  assertNull(v2);
}"
63217,"@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,MAX_SIZE)) {
    double[] array=new double[size];
    double[] degenerateTreeArray=new double[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Double>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Spliterators.iterator(J8Arrays.spliterator(array))));
    }
    nodes.add(tree(toList(array),l -> Nodes.node(toDoubleArray(l))));
    nodes.add(fill(array,Nodes.doubleBuilder(array.length)));
    nodes.add(fill(array,Nodes.doubleBuilder()));
    for (    Node<Double> node : nodes) {
      params.add(new Object[]{array,node});
    }
  }
  return params.toArray(new Object[0][]);
}","@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,1000,MAX_SIZE)) {
    double[] array=new double[size];
    double[] degenerateTreeArray=new double[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Double>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Spliterators.iterator(J8Arrays.spliterator(array))));
    }
    nodes.add(tree(toList(array),l -> Nodes.node(toDoubleArray(l))));
    nodes.add(fill(array,Nodes.doubleBuilder(array.length)));
    nodes.add(fill(array,Nodes.doubleBuilder()));
    for (    Node<Double> node : nodes) {
      params.add(new Object[]{array,node});
    }
  }
  return params.toArray(new Object[0][]);
}"
63218,"@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,MAX_SIZE)) {
    int[] array=new int[size];
    int[] degenerateTreeArray=new int[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Integer>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Spliterators.iterator(J8Arrays.spliterator(array))));
    }
    nodes.add(tree(toList(array),l -> Nodes.node(toIntArray(l))));
    nodes.add(fill(array,Nodes.intBuilder(array.length)));
    nodes.add(fill(array,Nodes.intBuilder()));
    for (    Node<Integer> node : nodes) {
      params.add(new Object[]{array,node});
    }
  }
  return params.toArray(new Object[0][]);
}","@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,1000,MAX_SIZE)) {
    int[] array=new int[size];
    int[] degenerateTreeArray=new int[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Integer>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Spliterators.iterator(J8Arrays.spliterator(array))));
    }
    nodes.add(tree(toList(array),l -> Nodes.node(toIntArray(l))));
    nodes.add(fill(array,Nodes.intBuilder(array.length)));
    nodes.add(fill(array,Nodes.intBuilder()));
    for (    Node<Integer> node : nodes) {
      params.add(new Object[]{array,node});
    }
  }
  return params.toArray(new Object[0][]);
}"
63219,"@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,MAX_SIZE)) {
    long[] array=new long[size];
    long[] degenerateTreeArray=new long[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Long>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Spliterators.iterator(J8Arrays.spliterator(array))));
    }
    nodes.add(tree(toList(array),l -> Nodes.node(toLongArray(l))));
    nodes.add(fill(array,Nodes.longBuilder(array.length)));
    nodes.add(fill(array,Nodes.longBuilder()));
    for (    Node<Long> node : nodes) {
      params.add(new Object[]{array,node});
    }
  }
  return params.toArray(new Object[0][]);
}","@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,1000,MAX_SIZE)) {
    long[] array=new long[size];
    long[] degenerateTreeArray=new long[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Long>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Spliterators.iterator(J8Arrays.spliterator(array))));
    }
    nodes.add(tree(toList(array),l -> Nodes.node(toLongArray(l))));
    nodes.add(fill(array,Nodes.longBuilder(array.length)));
    nodes.add(fill(array,Nodes.longBuilder()));
    for (    Node<Long> node : nodes) {
      params.add(new Object[]{array,node});
    }
  }
  return params.toArray(new Object[0][]);
}"
63220,"@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,MAX_SIZE)) {
    Integer[] array=new Integer[size];
    Integer[] degenerateTreeArray=new Integer[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Integer>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    nodes.add(Nodes.node(Arrays.asList(array)));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Arrays.asList(array).iterator()));
    }
    nodes.add(tree(Arrays.asList(array),l -> Nodes.node(l.toArray(new Integer[l.size()]))));
    nodes.add(tree(Arrays.asList(array),l -> Nodes.node(l)));
    nodes.add(fill(array,Nodes.builder(array.length,LambdaTestHelpers.integerArrayGenerator)));
    nodes.add(fill(array,Nodes.builder()));
    for (int i=0; i < nodes.size(); i++) {
      params.add(new Object[]{array,nodes.get(i)});
    }
  }
  return params.toArray(new Object[0][]);
}","@DataProvider(name=""String_Node_Str"") public Object[][] createSizes(){
  List<Object[]> params=new ArrayList<>();
  for (  int size : Arrays.asList(0,1,4,15,16,17,127,128,129,1000,MAX_SIZE)) {
    Integer[] array=new Integer[size];
    Integer[] degenerateTreeArray=new Integer[size];
    for (int i=0; i < array.length; i++) {
      array[i]=i;
    }
    if (size < MAX_SIZE) {
      for (int i=0; i < degenerateTreeArray.length; i++) {
        degenerateTreeArray[i]=i;
      }
    }
    List<Node<Integer>> nodes=new ArrayList<>();
    nodes.add(Nodes.node(array));
    nodes.add(Nodes.node(Arrays.asList(array)));
    if (size < MAX_SIZE) {
      nodes.add(degenerateTree(Arrays.asList(array).iterator()));
    }
    nodes.add(tree(Arrays.asList(array),l -> Nodes.node(l.toArray(new Integer[l.size()]))));
    nodes.add(tree(Arrays.asList(array),l -> Nodes.node(l)));
    nodes.add(fill(array,Nodes.builder(array.length,LambdaTestHelpers.integerArrayGenerator)));
    nodes.add(fill(array,Nodes.builder()));
    for (int i=0; i < nodes.size(); i++) {
      params.add(new Object[]{array,nodes.get(i)});
    }
  }
  return params.toArray(new Object[0][]);
}"
63221,"private Object newInstanceFromSystemProperty(String property) throws Exception {
  String className=System.getProperty(property);
  return (className == null) ? null : ClassLoader.getSystemClassLoader().loadClass(className).getConstructor().newInstance();
}","private static Object newInstanceFromSystemProperty(String property) throws Exception {
  String className=System.getProperty(property);
  return (className == null) ? null : ClassLoader.getSystemClassLoader().loadClass(className).getConstructor().newInstance();
}"
63222,"private <T,U,E,S extends BaseStream<E,S>,D extends TestData<E,S>>void assertSecondFails(D data,Function<S,T> first,Function<S,U> second,Class<? extends Throwable> exception,String text){
  S stream=data.stream();
  @SuppressWarnings(""String_Node_Str"") T fr=first.apply(stream);
  try {
    @SuppressWarnings(""String_Node_Str"") U sr=second.apply(stream);
    fail(text + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    if (exception.isAssignableFrom(e.getClass())) {
    }
 else     if (e instanceof Error)     throw (Error)e;
 else     if (e instanceof RuntimeException)     throw (RuntimeException)e;
 else     throw new AssertionError(""String_Node_Str"" + e.getClass(),e);
  }
  stream=data.parallelStream();
  fr=first.apply(stream);
  try {
    @SuppressWarnings(""String_Node_Str"") U sr=second.apply(stream);
    fail(text + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    if (exception.isAssignableFrom(e.getClass())) {
    }
 else     if (e instanceof Error)     throw (Error)e;
 else     if (e instanceof RuntimeException)     throw (RuntimeException)e;
 else     throw new AssertionError(""String_Node_Str"" + e.getClass(),e);
  }
}","private <T,U,E,S extends BaseStream<E,S>,D extends TestData<E,S>>void assertSecondFails(D data,Function<S,T> first,Function<S,U> second,Class<? extends Throwable> exception,String text){
  S stream=data.stream();
  @SuppressWarnings(""String_Node_Str"") T fr=first.apply(stream);
  try {
    @SuppressWarnings(""String_Node_Str"") U sr=second.apply(stream);
    fail(text + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    if (exception.isAssignableFrom(e.getClass())) {
    }
 else     if (e instanceof Error) {
      throw (Error)e;
    }
 else     if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
 else {
      AssertionError ae=new AssertionError(""String_Node_Str"" + e.getClass());
      ae.initCause(e);
      throw ae;
    }
  }
  stream=data.parallelStream();
  fr=first.apply(stream);
  try {
    @SuppressWarnings(""String_Node_Str"") U sr=second.apply(stream);
    fail(text + ""String_Node_Str"");
  }
 catch (  Throwable e) {
    if (exception.isAssignableFrom(e.getClass())) {
    }
 else     if (e instanceof Error) {
      throw (Error)e;
    }
 else     if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
 else {
      AssertionError ae=new AssertionError(""String_Node_Str"" + e.getClass());
      ae.initCause(e);
      throw ae;
    }
  }
}"
63223,"static void assertArraysEqual(String[] actual,String[] expected){
  try {
    assertEquals(actual,expected,""String_Node_Str"");
  }
 catch (  AssertionError x) {
    throw new AssertionError(String.format(""String_Node_Str"",java.util.Arrays.toString(expected),java.util.Arrays.toString(actual)),x);
  }
}","static void assertArraysEqual(String[] actual,String[] expected){
  try {
    assertEquals(actual,expected,""String_Node_Str"");
  }
 catch (  AssertionError x) {
    AssertionError ae=new AssertionError(String.format(""String_Node_Str"",java.util.Arrays.toString(expected),java.util.Arrays.toString(actual)));
    ae.initCause(x);
    throw ae;
  }
}"
63224,"static String getDelegateeImplementationName(Spliterator<?> spliterator){
  try {
    if (spliterator == null || !""String_Node_Str"".equals(spliterator.getClass().getName())) {
      return null;
    }
    return (String)GET_IMPL_NAME.invoke(spliterator);
  }
 catch (  Exception e) {
    throw new Error(e);
  }
}","static String getDelegateeImplementationName(Spliterator<?> spliterator){
  try {
    if (spliterator == null || GET_IMPL_NAME == null || !""String_Node_Str"".equals(spliterator.getClass().getName())) {
      return null;
    }
    return (String)GET_IMPL_NAME.invoke(spliterator);
  }
 catch (  Exception e) {
    throw new Error(e);
  }
}"
63225,"static Method getDelegateeAccessMethod(){
  Method getImplName=null;
  try {
    Class<?> clazz=Class.forName(""String_Node_Str"");
    getImplName=clazz.getDeclaredMethod(""String_Node_Str"");
    getImplName.setAccessible(true);
  }
 catch (  Exception e) {
  }
  return getImplName;
}","static Method getDelegateeAccessMethod(){
  Method getImplName=null;
  try {
    Class<?> clazz=Class.forName(""String_Node_Str"");
    getImplName=clazz.getDeclaredMethod(""String_Node_Str"");
    getImplName.setAccessible(true);
  }
 catch (  Throwable ignore) {
  }
  return getImplName;
}"
63226,"/** 
 * CountedCompleter class javadoc code sample, version 3. 
 */
public static <E>void forEach3(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent);
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      int n=hi - lo;
      for (; n >= 2; n/=2) {
        addToPendingCount(1);
        new Task(this,lo + n / 2,lo + n).fork();
      }
      if (n > 0)       action.accept(array[lo]);
      propagateCompletion();
    }
  }
  new Task(null,0,array.length).invoke();
}","/** 
 * CountedCompleter class javadoc code sample, version 3. 
 */
private static <E>void forEach3(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent);
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      int n=hi - lo;
      for (; n >= 2; n/=2) {
        addToPendingCount(1);
        new Task(this,lo + n / 2,lo + n).fork();
      }
      if (n > 0)       action.accept(array[lo]);
      propagateCompletion();
    }
  }
  new Task(null,0,array.length).invoke();
}"
63227,"/** 
 * CountedCompleter class javadoc code sample, version 2. 
 */
public static <E>void forEach2(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent);
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      if (hi - lo >= 2) {
        int mid=(lo + hi) >>> 1;
        setPendingCount(1);
        new Task(this,mid,hi).fork();
        new Task(this,lo,mid).compute();
      }
 else {
        if (hi > lo)         action.accept(array[lo]);
        tryComplete();
      }
    }
  }
  new Task(null,0,array.length).invoke();
}","/** 
 * CountedCompleter class javadoc code sample, version 2. 
 */
private static <E>void forEach2(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent);
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      if (hi - lo >= 2) {
        int mid=(lo + hi) >>> 1;
        setPendingCount(1);
        new Task(this,mid,hi).fork();
        new Task(this,lo,mid).compute();
      }
 else {
        if (hi > lo)         action.accept(array[lo]);
        tryComplete();
      }
    }
  }
  new Task(null,0,array.length).invoke();
}"
63228,"/** 
 * CountedCompleter class javadoc code sample, version 4. 
 */
public static <E>void forEach4(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent,31 - Integer.numberOfLeadingZeros(hi - lo));
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      for (int n=hi - lo; n >= 2; n/=2)       new Task(this,lo + n / 2,lo + n).fork();
      action.accept(array[lo]);
      propagateCompletion();
    }
  }
  if (array.length > 0)   new Task(null,0,array.length).invoke();
}","/** 
 * CountedCompleter class javadoc code sample, version 4. 
 */
private static <E>void forEach4(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent,31 - Integer.numberOfLeadingZeros(hi - lo));
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      for (int n=hi - lo; n >= 2; n/=2)       new Task(this,lo + n / 2,lo + n).fork();
      action.accept(array[lo]);
      propagateCompletion();
    }
  }
  if (array.length > 0)   new Task(null,0,array.length).invoke();
}"
63229,"/** 
 * CountedCompleter class javadoc code sample, version 1. 
 */
public static <E>void forEach1(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent);
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      if (hi - lo >= 2) {
        int mid=(lo + hi) >>> 1;
        setPendingCount(2);
        new Task(this,mid,hi).fork();
        new Task(this,lo,mid).fork();
      }
 else       if (hi > lo)       action.accept(array[lo]);
      tryComplete();
    }
  }
  new Task(null,0,array.length).invoke();
}","/** 
 * CountedCompleter class javadoc code sample, version 1. 
 */
private static <E>void forEach1(E[] array,Consumer<E> action){
@SuppressWarnings(""String_Node_Str"") class Task extends CountedCompleter<Void> {
    final int lo, hi;
    Task(    Task parent,    int lo,    int hi){
      super(parent);
      this.lo=lo;
      this.hi=hi;
    }
    public void compute(){
      if (hi - lo >= 2) {
        int mid=(lo + hi) >>> 1;
        setPendingCount(2);
        new Task(this,mid,hi).fork();
        new Task(this,lo,mid).fork();
      }
 else       if (hi > lo)       action.accept(array[lo]);
      tryComplete();
    }
  }
  new Task(null,0,array.length).invoke();
}"
63230,"public ForkJoinWorkerThread newThread(ForkJoinPool p){
  if (++calls > 1)   return null;
  return new FailingFJWSubclass(p);
}","public ForkJoinWorkerThread newThread(ForkJoinPool p){
  if (calls.incrementAndGet() > 1)   return null;
  return new FailingFJWSubclass(p);
}"
63231,"static void fullFence(){
  U.putOrderedInt(x,OFF,0);
}","static void fullFence(){
  U.putIntVolatile(x,OFF,0);
}"
63232,"static void storeFence(){
  U.putIntVolatile(x,OFF,0);
}","static void storeFence(){
  U.putOrderedInt(x,OFF,0);
}"
63233,"private static void test(ExecutorService executor) throws Throwable {
  Thread.currentThread().setName(""String_Node_Str"");
  try {
    CompletableFuture<String> cf=supplyAsync(() -> ""String_Node_Str"");
    checkCompletedNormally(cf,cf.join());
    cf=supplyAsync(() -> ""String_Node_Str"",commonPool());
    checkCompletedNormally(cf,cf.join());
    cf=supplyAsync(() -> ""String_Node_Str"",executor);
    checkCompletedNormally(cf,cf.join());
    cf=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    checkCompletedExceptionally(cf);
    cf=supplyAsync(() -> {
      throw new RuntimeException();
    }
,commonPool());
    checkCompletedExceptionally(cf);
    cf=supplyAsync(() -> {
      throw new RuntimeException();
    }
,executor);
    checkCompletedExceptionally(cf);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Void> cf=runAsync(() -> {
    }
);
    checkCompletedNormally(cf,cf.join());
    cf=runAsync(() -> {
    }
,commonPool());
    checkCompletedNormally(cf,cf.join());
    cf=runAsync(() -> {
    }
,executor);
    checkCompletedNormally(cf,cf.join());
    cf=runAsync(() -> {
      throw new RuntimeException();
    }
);
    checkCompletedExceptionally(cf);
    cf=runAsync(() -> {
      throw new RuntimeException();
    }
,commonPool());
    checkCompletedExceptionally(cf);
    cf=runAsync(() -> {
      throw new RuntimeException();
    }
,executor);
    checkCompletedExceptionally(cf);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    final Phaser phaser=new Phaser(1);
    final int phase=phaser.getPhase();
    CompletableFuture<Integer> cf;
    cf=supplyAsync(() -> {
      phaser.awaitAdvance(phase);
      return 1;
    }
);
    cf.complete(2);
    phaser.arrive();
    checkCompletedNormally(cf,2);
    cf=supplyAsync(() -> {
      phaser.awaitAdvance(phase + 1);
      return 1;
    }
);
    cf.completeExceptionally(new Throwable());
    phaser.arrive();
    checkCompletedExceptionally(cf);
    cf=supplyAsync(() -> {
      phaser.awaitAdvance(phase + 2);
      return 1;
    }
);
    cf.cancel(true);
    phaser.arrive();
    checkCompletedExceptionally(cf,true);
    cf=supplyAsync(() -> {
      phaser.awaitAdvance(phase + 3);
      return 1;
    }
);
    check(cf.getNow(2) == 2);
    phaser.arrive();
    checkCompletedNormally(cf,1);
    check(cf.getNow(2) == 1);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Integer> cf2;
    CompletableFuture<String> cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenApply((x) -> {
      if (x.equals(""String_Node_Str""))       return 1;
 else       return 0;
    }
);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,1);
    cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenApplyAsync((x) -> {
      if (x.equals(""String_Node_Str""))       return 1;
 else       return 0;
    }
);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,1);
    cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenApplyAsync((x) -> {
      if (x.equals(""String_Node_Str""))       return 1;
 else       return 0;
    }
,executor);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,1);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenApply((x) -> {
      return 0;
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenApplyAsync((x) -> {
      return 0;
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenApplyAsync((x) -> {
      return 0;
    }
,executor);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Void> cf2;
    int before=atomicInt.get();
    CompletableFuture<String> cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenAccept((x) -> {
      if (x.equals(""String_Node_Str"")) {
        atomicInt.incrementAndGet();
        return;
      }
      throw new RuntimeException();
    }
);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenAcceptAsync((x) -> {
      if (x.equals(""String_Node_Str"")) {
        atomicInt.incrementAndGet();
        return;
      }
      throw new RuntimeException();
    }
);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenAcceptAsync((x) -> {
      if (x.equals(""String_Node_Str"")) {
        atomicInt.incrementAndGet();
        return;
      }
      throw new RuntimeException();
    }
,executor);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenAccept((x) -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenAcceptAsync((x) -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenAcceptAsync((x) -> {
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Void> cf2;
    int before=atomicInt.get();
    CompletableFuture<String> cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenRun(() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenRunAsync(() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> ""String_Node_Str"");
    cf2=cf1.thenRunAsync(() -> {
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedNormally(cf1,""String_Node_Str"");
    checkCompletedNormally(cf2,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenRun(() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenRunAsync(() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenRunAsync(() -> {
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Integer> cf3;
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    CompletableFuture<Integer> cf2=supplyAsync(() -> 1);
    cf3=cf1.thenCombine(cf2,(x,y) -> {
      return x + y;
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    checkCompletedNormally(cf3,2);
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 1);
    cf3=cf1.thenCombineAsync(cf2,(x,y) -> {
      return x + y;
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    checkCompletedNormally(cf3,2);
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 1);
    cf3=cf1.thenCombineAsync(cf2,(x,y) -> {
      return x + y;
    }
,executor);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    checkCompletedNormally(cf3,2);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> 1);
    cf3=cf1.thenCombine(cf2,(x,y) -> {
      return 0;
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedNormally(cf2,1);
    checkCompletedExceptionally(cf3);
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf1.thenCombineAsync(cf2,(x,y) -> {
      return 0;
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedExceptionally(cf2);
    checkCompletedExceptionally(cf3);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf1.thenCombineAsync(cf2,(x,y) -> {
      return 0;
    }
,executor);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    checkCompletedExceptionally(cf3);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Void> cf3;
    int before=atomicInt.get();
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    CompletableFuture<Integer> cf2=supplyAsync(() -> 1);
    cf3=cf1.thenAcceptBoth(cf2,(x,y) -> {
      check(x + y == 2);
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    checkCompletedNormally(cf3,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 1);
    cf3=cf1.thenAcceptBothAsync(cf2,(x,y) -> {
      check(x + y == 2);
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    checkCompletedNormally(cf3,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 1);
    cf3=cf1.thenAcceptBothAsync(cf2,(x,y) -> {
      check(x + y == 2);
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    checkCompletedNormally(cf3,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> 1);
    cf3=cf1.thenAcceptBoth(cf2,(x,y) -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedNormally(cf2,1);
    checkCompletedExceptionally(cf3);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf1.thenAcceptBothAsync(cf2,(x,y) -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedExceptionally(cf2);
    checkCompletedExceptionally(cf3);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf1.thenAcceptBothAsync(cf2,(x,y) -> {
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    checkCompletedExceptionally(cf3);
    check(atomicInt.get() == before);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Void> cf3;
    int before=atomicInt.get();
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    CompletableFuture<Integer> cf2=supplyAsync(() -> 1);
    cf3=cf1.runAfterBoth(cf2,() -> {
      check(cf1.isDone());
      check(cf2.isDone());
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    checkCompletedNormally(cf3,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    CompletableFuture<Integer> cfa=supplyAsync(() -> 1);
    CompletableFuture<Integer> cfb=supplyAsync(() -> 1);
    cf3=cfa.runAfterBothAsync(cfb,() -> {
      check(cfa.isDone());
      check(cfb.isDone());
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cfa,1);
    checkCompletedNormally(cfb,1);
    checkCompletedNormally(cf3,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    CompletableFuture<Integer> cfx=supplyAsync(() -> 1);
    CompletableFuture<Integer> cfy=supplyAsync(() -> 1);
    cf3=cfy.runAfterBothAsync(cfx,() -> {
      check(cfx.isDone());
      check(cfy.isDone());
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedNormally(cfx,1);
    checkCompletedNormally(cfy,1);
    checkCompletedNormally(cf3,null);
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    CompletableFuture<Integer> cf4=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    CompletableFuture<Integer> cf5=supplyAsync(() -> 1);
    cf3=cf5.runAfterBothAsync(cf4,() -> {
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedExceptionally(cf4);
    checkCompletedNormally(cf5,1);
    checkCompletedExceptionally(cf3);
    check(atomicInt.get() == before);
    before=atomicInt.get();
    cf4=supplyAsync(() -> 1);
    cf5=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf5.runAfterBothAsync(cf4,() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf4,1);
    checkCompletedExceptionally(cf5);
    checkCompletedExceptionally(cf3);
    check(atomicInt.get() == before);
    before=atomicInt.get();
    cf4=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf5=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf5.runAfterBoth(cf4,() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedExceptionally(cf4);
    checkCompletedExceptionally(cf5);
    checkCompletedExceptionally(cf3);
    check(atomicInt.get() == before);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Integer> cf3;
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    CompletableFuture<Integer> cf2=supplyAsync(() -> 2);
    cf3=cf1.applyToEither(cf2,(x) -> {
      check(x == 1 || x == 2);
      return x;
    }
);
    checkCompletedNormally(cf3,new Object[]{1,2});
    check(cf1.isDone() || cf2.isDone());
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 2);
    cf3=cf1.applyToEitherAsync(cf2,(x) -> {
      check(x == 1 || x == 2);
      return x;
    }
);
    checkCompletedNormally(cf3,new Object[]{1,2});
    check(cf1.isDone() || cf2.isDone());
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 2);
    cf3=cf1.applyToEitherAsync(cf2,(x) -> {
      check(x == 1 || x == 2);
      return x;
    }
,executor);
    checkCompletedNormally(cf3,new Object[]{1,2});
    check(cf1.isDone() || cf2.isDone());
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> 2);
    cf3=cf1.applyToEither(cf2,(x) -> {
      check(x == 2);
      return x;
    }
);
    try {
      check(cf3.join() == 2);
    }
 catch (    CompletionException x) {
      pass();
    }
    check(cf3.isDone());
    check(cf1.isDone() || cf2.isDone());
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf1.applyToEitherAsync(cf2,(x) -> {
      check(x == 1);
      return x;
    }
);
    try {
      check(cf3.join() == 1);
    }
 catch (    CompletionException x) {
      pass();
    }
    check(cf3.isDone());
    check(cf1.isDone() || cf2.isDone());
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf1.applyToEitherAsync(cf2,(x) -> {
      fail();
      return x;
    }
);
    checkCompletedExceptionally(cf3);
    check(cf1.isDone() || cf2.isDone());
    final Phaser cf3Done=new Phaser(2);
    cf1=supplyAsync(() -> {
      cf3Done.arriveAndAwaitAdvance();
      return 1;
    }
);
    cf2=supplyAsync(() -> 2);
    cf3=cf1.applyToEither(cf2,(x) -> {
      check(x == 2);
      return x;
    }
);
    checkCompletedNormally(cf3,2);
    checkCompletedNormally(cf2,2);
    check(!cf1.isDone());
    cf3Done.arrive();
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf3,2);
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> {
      cf3Done.arriveAndAwaitAdvance();
      return 2;
    }
);
    cf3=cf1.applyToEitherAsync(cf2,(x) -> {
      check(x == 1);
      return x;
    }
);
    checkCompletedNormally(cf3,1);
    checkCompletedNormally(cf1,1);
    check(!cf2.isDone());
    cf3Done.arrive();
    checkCompletedNormally(cf2,2);
    checkCompletedNormally(cf3,1);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Void> cf3;
    int before=atomicInt.get();
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    CompletableFuture<Integer> cf2=supplyAsync(() -> 2);
    cf3=cf1.acceptEither(cf2,(x) -> {
      check(x == 1 || x == 2);
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf3,null);
    check(cf1.isDone() || cf2.isDone());
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 2);
    cf3=cf1.acceptEitherAsync(cf2,(x) -> {
      check(x == 1 || x == 2);
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf3,null);
    check(cf1.isDone() || cf2.isDone());
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> 2);
    cf3=cf2.acceptEitherAsync(cf1,(x) -> {
      check(x == 1 || x == 2);
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedNormally(cf3,null);
    check(cf1.isDone() || cf2.isDone());
    check(atomicInt.get() == (before + 1));
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> 2);
    cf3=cf2.acceptEitherAsync(cf1,(x) -> {
      check(x == 2);
    }
,executor);
    try {
      check(cf3.join() == null);
    }
 catch (    CompletionException x) {
      pass();
    }
    check(cf3.isDone());
    check(cf1.isDone() || cf2.isDone());
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf2.acceptEitherAsync(cf1,(x) -> {
      check(x == 1);
    }
);
    try {
      check(cf3.join() == null);
    }
 catch (    CompletionException x) {
      pass();
    }
    check(cf3.isDone());
    check(cf1.isDone() || cf2.isDone());
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf2.acceptEitherAsync(cf1,(x) -> {
      fail();
    }
);
    checkCompletedExceptionally(cf3);
    check(cf1.isDone() || cf2.isDone());
    final Phaser cf3Done=new Phaser(2);
    cf1=supplyAsync(() -> {
      cf3Done.arriveAndAwaitAdvance();
      return 1;
    }
);
    cf2=supplyAsync(() -> 2);
    cf3=cf1.acceptEither(cf2,(x) -> {
      check(x == 2);
    }
);
    checkCompletedNormally(cf3,null);
    checkCompletedNormally(cf2,2);
    check(!cf1.isDone());
    cf3Done.arrive();
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf3,null);
    cf1=supplyAsync(() -> 1);
    cf2=supplyAsync(() -> {
      cf3Done.arriveAndAwaitAdvance();
      return 2;
    }
);
    cf3=cf1.acceptEitherAsync(cf2,(x) -> {
      check(x == 1);
    }
);
    checkCompletedNormally(cf3,null);
    checkCompletedNormally(cf1,1);
    check(!cf2.isDone());
    cf3Done.arrive();
    checkCompletedNormally(cf2,2);
    checkCompletedNormally(cf3,null);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Void> cf3;
    int before=atomicInt.get();
    CompletableFuture<Void> cf1=runAsync(() -> {
    }
);
    CompletableFuture<Void> cf2=runAsync(() -> {
    }
);
    cf3=cf1.runAfterEither(cf2,() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf3,null);
    check(cf1.isDone() || cf2.isDone());
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=runAsync(() -> {
    }
);
    cf2=runAsync(() -> {
    }
);
    cf3=cf1.runAfterEitherAsync(cf2,() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf3,null);
    check(cf1.isDone() || cf2.isDone());
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=runAsync(() -> {
    }
);
    cf2=runAsync(() -> {
    }
);
    cf3=cf2.runAfterEitherAsync(cf1,() -> {
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedNormally(cf3,null);
    check(cf1.isDone() || cf2.isDone());
    check(atomicInt.get() == (before + 1));
    before=atomicInt.get();
    cf1=runAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=runAsync(() -> {
    }
);
    cf3=cf2.runAfterEither(cf1,() -> {
      atomicInt.incrementAndGet();
    }
);
    try {
      check(cf3.join() == null);
      check(atomicInt.get() == (before + 1));
    }
 catch (    CompletionException x) {
      pass();
    }
    check(cf3.isDone());
    check(cf1.isDone() || cf2.isDone());
    before=atomicInt.get();
    cf1=runAsync(() -> {
    }
);
    cf2=runAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf1.runAfterEitherAsync(cf2,() -> {
      atomicInt.incrementAndGet();
    }
);
    try {
      check(cf3.join() == null);
      check(atomicInt.get() == (before + 1));
    }
 catch (    CompletionException x) {
      pass();
    }
    check(cf3.isDone());
    check(cf1.isDone() || cf2.isDone());
    before=atomicInt.get();
    cf1=runAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=runAsync(() -> {
      throw new RuntimeException();
    }
);
    cf3=cf2.runAfterEitherAsync(cf1,() -> {
      atomicInt.incrementAndGet();
    }
,executor);
    checkCompletedExceptionally(cf3);
    check(cf1.isDone() || cf2.isDone());
    check(atomicInt.get() == before);
    final Phaser cf3Done=new Phaser(2);
    before=atomicInt.get();
    cf1=runAsync(() -> {
      cf3Done.arriveAndAwaitAdvance();
    }
);
    cf2=runAsync(() -> {
    }
);
    cf3=cf1.runAfterEither(cf2,() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf3,null);
    checkCompletedNormally(cf2,null);
    check(!cf1.isDone());
    check(atomicInt.get() == (before + 1));
    cf3Done.arrive();
    checkCompletedNormally(cf1,null);
    checkCompletedNormally(cf3,null);
    before=atomicInt.get();
    cf1=runAsync(() -> {
    }
);
    cf2=runAsync(() -> {
      cf3Done.arriveAndAwaitAdvance();
    }
);
    cf3=cf1.runAfterEitherAsync(cf2,() -> {
      atomicInt.incrementAndGet();
    }
);
    checkCompletedNormally(cf3,null);
    checkCompletedNormally(cf1,null);
    check(!cf2.isDone());
    check(atomicInt.get() == (before + 1));
    cf3Done.arrive();
    checkCompletedNormally(cf2,null);
    checkCompletedNormally(cf3,null);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Integer> cf2;
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    cf2=cf1.thenCompose((x) -> {
      check(x == 1);
      return CompletableFuture.completedFuture(2);
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,2);
    cf1=supplyAsync(() -> 1);
    cf2=cf1.thenComposeAsync((x) -> {
      check(x == 1);
      return CompletableFuture.completedFuture(2);
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,2);
    cf1=supplyAsync(() -> 1);
    cf2=cf1.thenComposeAsync((x) -> {
      check(x == 1);
      return CompletableFuture.completedFuture(2);
    }
,executor);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,2);
    int before=atomicInt.get();
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenCompose((x) -> {
      atomicInt.incrementAndGet();
      return CompletableFuture.completedFuture(2);
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> {
      throw new RuntimeException();
    }
);
    cf2=cf1.thenComposeAsync((x) -> {
      atomicInt.incrementAndGet();
      return CompletableFuture.completedFuture(2);
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedExceptionally(cf2);
    check(atomicInt.get() == before);
    cf1=supplyAsync(() -> 1);
    cf2=cf1.thenComposeAsync((x) -> {
      throw new RuntimeException();
    }
,executor);
    checkCompletedNormally(cf1,1);
    checkCompletedExceptionally(cf2);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Object> cf3;
    for (int k=0; k < 10; k++) {
      CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
      CompletableFuture<Integer> cf2=supplyAsync(() -> 2);
      cf3=CompletableFuture.anyOf(cf1,cf2);
      checkCompletedNormally(cf3,new Object[]{1,2});
      check(cf1.isDone() || cf2.isDone());
    }
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<?> cf3;
    for (int k=0; k < 10; k++) {
      CompletableFuture<Integer>[] cfs=(CompletableFuture<Integer>[])Array.newInstance(CompletableFuture.class,10);
      for (int j=0; j < 10; j++) {
        final int v=j;
        cfs[j]=supplyAsync(() -> v);
      }
      cf3=CompletableFuture.allOf(cfs);
      for (int j=0; j < 10; j++)       checkCompletedNormally(cfs[j],j);
      checkCompletedNormally(cf3,null);
    }
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Integer> cf2;
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    cf2=cf1.exceptionally((t) -> {
      fail(""String_Node_Str"");
      return 2;
    }
);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,1);
    final RuntimeException t=new RuntimeException();
    cf1=supplyAsync(() -> {
      throw t;
    }
);
    cf2=cf1.exceptionally((x) -> {
      check(x.getCause() == t);
      return 2;
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedNormally(cf2,2);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  try {
    CompletableFuture<Integer> cf2;
    CompletableFuture<Integer> cf1=supplyAsync(() -> 1);
    cf2=cf1.handle((x,t) -> x + 1);
    checkCompletedNormally(cf1,1);
    checkCompletedNormally(cf2,2);
    final RuntimeException ex=new RuntimeException();
    cf1=supplyAsync(() -> {
      throw ex;
    }
);
    cf2=cf1.handle((x,t) -> {
      check(t.getCause() == ex);
      return 2;
    }
);
    checkCompletedExceptionally(cf1);
    checkCompletedNormally(cf2,2);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
}","@Test public static void test(){
  main(new String[]{});
}"
63234,"public static void main(String[] args) throws Throwable {
  try {
    realMain(args);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  System.out.printf(""String_Node_Str"",passed,failed);
  if (failed > 0)   throw new AssertionError(""String_Node_Str"");
}","public static void main(String[] args){
  try {
    realMain(args);
  }
 catch (  Throwable t) {
    unexpected(t);
  }
  System.out.printf(""String_Node_Str"",passed,failed);
  if (failed > 0)   throw new AssertionError(""String_Node_Str"");
}"
63235,"private void testDropWhileMulti(Consumer<Stream<Integer>> mRef,Consumer<IntStream> mInt,Consumer<LongStream> mLong,Consumer<DoubleStream> mDouble){
  Map<String,Supplier<Stream<Integer>>> sources=new HashMap<>();
  sources.put(""String_Node_Str"",() -> IntStreams.range(0,DROP_SOURCE_SIZE).boxed());
  sources.put(""String_Node_Str"",() -> IntStreams.range(0,DROP_SOURCE_SIZE).boxed().unordered());
  sources.put(""String_Node_Str"",() -> StreamSupport.stream(IntStreams.range(0,DROP_SOURCE_SIZE).boxed().collect((Collector<Integer,?,List<Integer>>)toCollection(LinkedList::new))));
  sources.put(""String_Node_Str"",() -> StreamSupport.stream(IntStreams.range(0,DROP_SOURCE_SIZE).boxed().collect((Collector<Integer,?,List<Integer>>)toCollection(LinkedList::new))).unordered());
  testWhileMulti(sources,mRef,mInt,mLong,mDouble);
}","private void testDropWhileMulti(Consumer<Stream<Integer>> mRef,Consumer<IntStream> mInt,Consumer<LongStream> mLong,Consumer<DoubleStream> mDouble){
  Map<String,Supplier<Stream<Integer>>> sources=new HashMap<>();
  sources.put(""String_Node_Str"",() -> IntStreams.range(0,DROP_SOURCE_SIZE).boxed());
  sources.put(""String_Node_Str"",() -> IntStreams.range(0,DROP_SOURCE_SIZE).boxed().unordered());
  sources.put(""String_Node_Str"",() -> StreamSupport.stream(IntStreams.range(0,DROP_SOURCE_SIZE).boxed().collect(toCollection(LinkedList::new))));
  sources.put(""String_Node_Str"",() -> StreamSupport.stream(IntStreams.range(0,DROP_SOURCE_SIZE).boxed().collect(toCollection(LinkedList::new))).unordered());
  testWhileMulti(sources,mRef,mInt,mLong,mDouble);
}"
63236,"private static <T>Spliterator<T> setSpliterator(Set<? extends T> c,String className){
  if (NATIVE_SPECIALIZATION || IS_ANDROID) {
    if (""String_Node_Str"".equals(className)) {
      return (Spliterator<T>)HMSpliterators.<Object,Object>getEntrySetSpliterator((Set<Map.Entry<Object,Object>>)c);
    }
    if (""String_Node_Str"".equals(className)) {
      return HMSpliterators.getKeySetSpliterator((Set<T>)c);
    }
    if (c instanceof HashSet) {
      return HMSpliterators.getHashSetSpliterator((HashSet<T>)c);
    }
  }
  if (c instanceof LinkedHashSet) {
    return spliterator(c,Spliterator.DISTINCT | Spliterator.ORDERED);
  }
  if (c instanceof SortedSet) {
    return new IteratorSpliterator<T>(c,Spliterator.DISTINCT | Spliterator.SORTED | Spliterator.ORDERED){
      @Override public Comparator<? super T> getComparator(){
        return ((SortedSet<T>)c).comparator();
      }
    }
;
  }
  if ((NATIVE_SPECIALIZATION || IS_ANDROID) && c instanceof CopyOnWriteArraySet) {
    return CopyOnWriteArraySetSpliterator.spliterator((CopyOnWriteArraySet<T>)c);
  }
  return Spliterators.spliterator(c,Spliterator.DISTINCT);
}","private static <T>Spliterator<T> setSpliterator(Set<? extends T> c,String className){
  if (NATIVE_SPECIALIZATION || IS_ANDROID) {
    if (""String_Node_Str"".equals(className)) {
      return (Spliterator<T>)HMSpliterators.<Object,Object>getEntrySetSpliterator((Set<Map.Entry<Object,Object>>)c);
    }
    if (""String_Node_Str"".equals(className)) {
      return HMSpliterators.getKeySetSpliterator((Set<T>)c);
    }
  }
  if (c instanceof LinkedHashSet) {
    return spliterator(c,Spliterator.DISTINCT | Spliterator.ORDERED);
  }
  if (NATIVE_SPECIALIZATION || IS_ANDROID) {
    if (c instanceof HashSet) {
      return HMSpliterators.getHashSetSpliterator((HashSet<T>)c);
    }
  }
  if (c instanceof SortedSet) {
    return new IteratorSpliterator<T>(c,Spliterator.DISTINCT | Spliterator.SORTED | Spliterator.ORDERED){
      @Override public Comparator<? super T> getComparator(){
        return ((SortedSet<T>)c).comparator();
      }
    }
;
  }
  if ((NATIVE_SPECIALIZATION || IS_ANDROID) && c instanceof CopyOnWriteArraySet) {
    return CopyOnWriteArraySetSpliterator.spliterator((CopyOnWriteArraySet<T>)c);
  }
  return Spliterators.spliterator(c,Spliterator.DISTINCT);
}"
63237,"/** 
 * Creates a TimSort instance to maintain the state of an ongoing sort.
 * @param a the array to be sorted
 * @param c the comparator to determine the order of the sort
 * @param work a workspace array (slice)
 * @param workBase origin of usable space in work array
 * @param workLen usable size of work array
 */
private TimSort(T[] a,Comparator<? super T> c,T[] work,int workBase,int workLen){
  this.a=a;
  this.c=c;
  int len=a.length;
  int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;
  if (work == null || workLen < tlen || workBase + tlen > work.length) {
    @SuppressWarnings(""String_Node_Str"") T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),tlen);
    tmp=newArray;
    tmpBase=0;
    tmpLen=tlen;
  }
 else {
    tmp=work;
    tmpBase=workBase;
    tmpLen=workLen;
  }
  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 40);
  runBase=new int[stackLen];
  runLen=new int[stackLen];
}","/** 
 * Creates a TimSort instance to maintain the state of an ongoing sort.
 * @param a the array to be sorted
 * @param c the comparator to determine the order of the sort
 * @param work a workspace array (slice)
 * @param workBase origin of usable space in work array
 * @param workLen usable size of work array
 */
private TimSort(T[] a,Comparator<? super T> c,T[] work,int workBase,int workLen){
  this.a=a;
  this.c=c;
  int len=a.length;
  int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;
  if (work == null || workLen < tlen || workBase + tlen > work.length) {
    @SuppressWarnings(""String_Node_Str"") T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),tlen);
    tmp=newArray;
    tmpBase=0;
    tmpLen=tlen;
  }
 else {
    tmp=work;
    tmpBase=workBase;
    tmpLen=workLen;
  }
  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 49);
  runBase=new int[stackLen];
  runLen=new int[stackLen];
}"
63238,"@SuppressWarnings(""String_Node_Str"") @Subscribe(thread=EventThread.IO,tags={@Tag(Constants.RxBusEventType.LOAD_BOOK_LIST)}) public void loadFileList(Integer type){
  File dir=Constants.DIR;
  if (dir.exists() && dir.isDirectory()) {
    File[] files=dir.listFiles();
    FileUtils.sortWithLastModified(files);
    if (files != null) {
      mFileModelList.clear();
      for (      File file : files) {
        handleFiles(file.getAbsolutePath(),file.length());
      }
    }
  }
  runOnUiThread(() -> {
    mSwipeRefreshLayout.setRefreshing(false);
    mAppshelfAdapter.notifyDataSetChanged();
  }
);
}","@SuppressWarnings(""String_Node_Str"") @Subscribe(thread=EventThread.IO,tags={@Tag(Constants.RxBusEventType.LOAD_BOOK_LIST)}) public void loadFileList(Integer type){
  File dir=Constants.DIR;
  if (dir.exists() && dir.isDirectory()) {
    File[] files=dir.listFiles();
    if (files == null) {
      return;
    }
    FileUtils.sortWithLastModified(files);
    mFileModelList.clear();
    for (    File file : files) {
      handleFiles(file.getAbsolutePath(),file.length());
    }
  }
  runOnUiThread(() -> {
    mSwipeRefreshLayout.setRefreshing(false);
    mAppshelfAdapter.notifyDataSetChanged();
  }
);
}"
63239,"/** 
 * Executes all the test entities in the collection.
 */
public void execute(TestExecutor executor) throws Throwable {
  setSummary(new TestResultsSummary(this));
  setExecutor(executor);
  computeNestedLevel();
  setupEntity();
  setFinishedTests(new Vector());
  if (getNestedCounter() < 1) {
    System.out.println();
    System.out.println(""String_Node_Str"" + getSummary().getName());
  }
  long startTime=System.nanoTime();
  for (Enumeration tests=getTests().elements(); tests.hasMoreElements(); ) {
    junit.framework.Test test=(junit.framework.Test)tests.nextElement();
    if ((TestExecutor.getDefaultJUnitTestResult() != null) && TestExecutor.getDefaultJUnitTestResult().shouldStop()) {
      break;
    }
    executor.execute(test);
    getFinishedTests().addElement(test);
  }
  long endTime=System.nanoTime();
  getSummary().setTotalTime(endTime - startTime);
  setFinishedTests((Vector)getTests().clone());
  if (getNestedCounter() < 1) {
    computeResultSummary();
    System.out.printf(""String_Node_Str"",getSummary().getPassed(),getSummary().getErrors() + getSummary().getSetupFailures(),getSummary().getFatalErrors(),getSummary().getWarnings() + getSummary().getProblems() + getSummary().getSetupWarnings(),getSummary().getTotalTime() / 1e9);
    System.out.println();
  }
}","/** 
 * Executes all the test entities in the collection.
 */
public void execute(TestExecutor executor) throws Throwable {
  setSummary(new TestResultsSummary(this));
  setExecutor(executor);
  computeNestedLevel();
  setupEntity();
  setFinishedTests(new Vector());
  if (getNestedCounter() < 1) {
    System.out.println();
    System.out.println(""String_Node_Str"" + getSummary().getName());
  }
  long startTime=System.nanoTime();
  for (Enumeration tests=getTests().elements(); tests.hasMoreElements(); ) {
    junit.framework.Test test=(junit.framework.Test)tests.nextElement();
    if ((TestExecutor.getDefaultJUnitTestResult() != null) && TestExecutor.getDefaultJUnitTestResult().shouldStop()) {
      break;
    }
    executor.execute(test);
    getFinishedTests().addElement(test);
  }
  long endTime=System.nanoTime();
  getSummary().setTotalTime(endTime - startTime);
  setFinishedTests((Vector)getTests().clone());
  if (getNestedCounter() < 1) {
    computeResultSummary();
    System.out.printf(""String_Node_Str"",getSummary().getPassed(),getSummary().getErrors() + getSummary().getSetupFailures(),getSummary().getFatalErrors(),getSummary().getWarnings() + getSummary().getProblems() + getSummary().getSetupWarnings(),getSummary().getTotalTime() / 1e9);
    System.out.println();
  }
  reset();
}"
63240,"/** 
 * You must add new tests to this method. If the new tests should be part of SRG as well then contact QA to update the SRG model.
 */
public void addTests(){
  if (!getTests().isEmpty()) {
    return;
  }
  Vector tests=new Vector();
  if (isLight) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  if (isAll) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  for (int index=0; index < tests.size(); ++index) {
    try {
      addTest((TestModel)Class.forName((String)tests.elementAt(index)).newInstance());
    }
 catch (    Throwable exception) {
      System.out.println(""String_Node_Str"" + tests.elementAt(index) + ""String_Node_Str""+ exception);
    }
  }
  Collections.sort(this.getTests(),new Comparator(){
    public int compare(    Object left,    Object right){
      return Helper.getShortClassName(left.getClass()).compareTo(Helper.getShortClassName(right.getClass()));
    }
  }
);
  testList=tests;
}","/** 
 * You must add new tests to this method. If the new tests should be part of SRG as well then contact QA to update the SRG model.
 */
public void addTests(){
  if (!getTests().isEmpty()) {
    return;
  }
  Vector tests=new Vector();
  if (isLight) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  if (isAll) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  for (int index=0; index < tests.size(); ++index) {
    try {
      addTest((TestModel)Class.forName((String)tests.elementAt(index)).newInstance());
    }
 catch (    Throwable exception) {
      System.out.println(""String_Node_Str"" + tests.elementAt(index) + ""String_Node_Str""+ exception);
    }
  }
  Collections.sort(this.getTests(),new Comparator(){
    public int compare(    Object left,    Object right){
      return Helper.getShortClassName(left.getClass()).compareTo(Helper.getShortClassName(right.getClass()));
    }
  }
);
  testList=tests;
}"
63241,"/** 
 * INTERNAL: Returns query to check whether given table exists. Returned query must be completely prepared so it can be just executed by calling code.
 * @param table database table meta-data
 * @return query to check whether given table exists
 */
public DataReadQuery getTableExistsQuery(final TableDefinition table){
  String column=null;
  for (  FieldDefinition field : table.getFields()) {
    if (column == null) {
      column=field.getName();
    }
 else     if (field.isPrimaryKey()) {
      column=field.getName();
      break;
    }
  }
  final String sql=""String_Node_Str"" + column + ""String_Node_Str""+ table.getFullName()+ ""String_Node_Str"";
  final DataReadQuery query=new DataReadQuery(sql);
  query.setMaxRows(1);
  return query;
}","/** 
 * INTERNAL: Returns query to check whether given table exists. Query execution throws an exception when no such table exists.
 * @param table database table meta-data
 * @return query to check whether given table exists
 */
protected DataReadQuery getTableExistsQuery(final TableDefinition table){
  final String sql=""String_Node_Str"" + table.getFullName();
  final DataReadQuery query=new DataReadQuery(sql);
  query.setMaxRows(1);
  return query;
}"
63242,"public DatabasePlatform(){
  this.tableQualifier=""String_Node_Str"";
  this.usesNativeSQL=false;
  this.usesByteArrayBinding=true;
  this.usesStringBinding=false;
  this.stringBindingSize=255;
  this.shouldTrimStrings=true;
  this.shouldBindAllParameters=true;
  this.shouldCacheAllStatements=false;
  this.shouldOptimizeDataConversion=true;
  this.statementCacheSize=50;
  this.shouldForceFieldNamesToUpperCase=false;
  this.maxBatchWritingSize=0;
  this.usesJDBCBatchWriting=true;
  this.transactionIsolation=-1;
  this.cursorCode=-10;
  this.supportsAutoCommit=true;
  this.usesNativeBatchWriting=false;
  this.castSizeForVarcharParameter=32672;
  this.startDelimiter=""String_Node_Str"";
  this.endDelimiter=""String_Node_Str"";
  this.useJDBCStoredProcedureSyntax=null;
  this.storedProcedureTerminationToken=""String_Node_Str"";
}","/** 
 * Creates an instance of default database platform.
 */
public DatabasePlatform(){
  this.tableQualifier=""String_Node_Str"";
  this.usesNativeSQL=false;
  this.usesByteArrayBinding=true;
  this.usesStringBinding=false;
  this.stringBindingSize=255;
  this.shouldTrimStrings=true;
  this.shouldBindAllParameters=true;
  this.shouldCacheAllStatements=false;
  this.shouldOptimizeDataConversion=true;
  this.statementCacheSize=50;
  this.shouldForceFieldNamesToUpperCase=false;
  this.maxBatchWritingSize=0;
  this.usesJDBCBatchWriting=true;
  this.transactionIsolation=-1;
  this.cursorCode=-10;
  this.supportsAutoCommit=true;
  this.usesNativeBatchWriting=false;
  this.castSizeForVarcharParameter=32672;
  this.startDelimiter=""String_Node_Str"";
  this.endDelimiter=""String_Node_Str"";
  this.useJDBCStoredProcedureSyntax=null;
  this.storedProcedureTerminationToken=""String_Node_Str"";
}"
63243,"public DatabasePlatform(){
  super();
}","/** 
 * Creates an instance of default database platform.
 */
public DatabasePlatform(){
  super();
}"
63244,"/** 
 * Pre-build the SQL statement from the expressions.
 */
@Override public void prepareUpdateAll(){
  ExpressionBuilder builder=((UpdateAllQuery)getQuery()).getExpressionBuilder();
  HashMap updateClauses=((UpdateAllQuery)getQuery()).getUpdateClauses();
  boolean updateClausesHasBeenCloned=false;
  OptimisticLockingPolicy policy=getDescriptor().getOptimisticLockingPolicy();
  if (policy != null) {
    if (policy.getWriteLockField() != null) {
      Expression writeLock=builder.getField(policy.getWriteLockField());
      Expression writeLockUpdateExpression=policy.getWriteLockUpdateExpression(builder,getQuery().getSession());
      if (writeLockUpdateExpression != null) {
        updateClauses=(HashMap)updateClauses.clone();
        updateClausesHasBeenCloned=true;
        updateClauses.put(writeLock,writeLockUpdateExpression);
      }
    }
  }
  if (getDescriptor().hasSerializedObjectPolicy()) {
    if (!updateClausesHasBeenCloned) {
      updateClauses=(HashMap)updateClauses.clone();
      updateClausesHasBeenCloned=true;
    }
    Expression sopFieldExpression=builder.getField(getDescriptor().getSerializedObjectPolicy().getField());
    updateClauses.put(sopFieldExpression,new ConstantExpression(null,sopFieldExpression));
  }
  HashMap tables_databaseFieldsToValues=new HashMap();
  HashMap<DatabaseTable,List<DatabaseField>> tablesToPrimaryKeyFields=new HashMap();
  Iterator it=updateClauses.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Object fieldObject=entry.getKey();
    DataExpression fieldExpression=null;
    Expression baseExpression=null;
    String attributeName=null;
    if (fieldObject instanceof String) {
      attributeName=(String)fieldObject;
    }
 else {
      fieldExpression=(DataExpression)fieldObject;
    }
    DatabaseField field=null;
    DatabaseMapping mapping=null;
    if (attributeName != null) {
      mapping=getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
      if (mapping != null && !mapping.getFields().isEmpty()) {
        field=mapping.getFields().get(0);
      }
      if (field == null) {
        throw QueryException.updateAllQueryAddUpdateDoesNotDefineField(getDescriptor(),getQuery(),attributeName);
      }
      baseExpression=((UpdateAllQuery)getQuery()).getExpressionBuilder().get(attributeName);
    }
 else     if (fieldExpression != null) {
      if (fieldExpression.getBaseExpression() instanceof ExpressionBuilder) {
        field=getDescriptor().getObjectBuilder().getFieldForQueryKeyName(fieldExpression.getName());
      }
      if (field == null) {
        DataExpression fieldExpressionClone=(DataExpression)fieldExpression.clone();
        fieldExpressionClone.getBuilder().setQueryClass(getQuery().getReferenceClass());
        fieldExpressionClone.getBuilder().setSession(getSession().getRootSession(null));
        field=fieldExpressionClone.getField();
        if (field == null) {
          throw QueryException.updateAllQueryAddUpdateDoesNotDefineField(getDescriptor(),getQuery(),fieldExpression.toString());
        }
      }
      mapping=getDescriptor().getObjectBuilder().getMappingForField(field);
      baseExpression=fieldExpression;
    }
    Object valueObject=entry.getValue();
    Vector fields;
    Vector values;
    Vector baseExpressions;
    if (mapping != null && mapping.isOneToOneMapping()) {
      fields=mapping.getFields();
      int fieldsSize=fields.size();
      values=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(fieldsSize);
      baseExpressions=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(fieldsSize);
      for (int i=0; i < fieldsSize; i++) {
        if (valueObject instanceof ConstantExpression) {
          valueObject=((ConstantExpression)valueObject).getValue();
        }
        if (valueObject == null) {
          values.add(null);
        }
 else {
          DatabaseField targetField=((OneToOneMapping)mapping).getSourceToTargetKeyFields().get(fields.get(i));
          if (valueObject instanceof Expression) {
            Expression exp=((Expression)((Expression)valueObject).clone()).getField(targetField);
            if (exp.isParameterExpression()) {
              ((ParameterExpression)exp).setType(targetField.getType());
            }
            values.add(exp);
          }
 else {
            values.add(((OneToOneMapping)mapping).getReferenceDescriptor().getObjectBuilder().extractValueFromObjectForField(valueObject,targetField,getSession()));
          }
        }
        baseExpressions.add(new FieldExpression((DatabaseField)fields.elementAt(i),((QueryKeyExpression)baseExpression).getBaseExpression()));
      }
    }
 else {
      fields=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(1);
      fields.add(field);
      values=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(1);
      values.add(valueObject);
      baseExpressions=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(1);
      baseExpressions.add(baseExpression);
    }
    int fieldsSize=fields.size();
    for (int i=0; i < fieldsSize; i++) {
      field=(DatabaseField)fields.elementAt(i);
      DatabaseTable table=field.getTable();
      if (!getDescriptor().getTables().contains(table)) {
        if (attributeName != null) {
          throw QueryException.updateAllQueryAddUpdateDefinesWrongField(getDescriptor(),getQuery(),attributeName,field.getQualifiedName());
        }
 else {
          throw QueryException.updateAllQueryAddUpdateDefinesWrongField(getDescriptor(),getQuery(),fieldExpression.toString(),field.getQualifiedName());
        }
      }
      HashMap databaseFieldsToValues=(HashMap)tables_databaseFieldsToValues.get(table);
      if (databaseFieldsToValues == null) {
        databaseFieldsToValues=new HashMap();
        tables_databaseFieldsToValues.put(table,databaseFieldsToValues);
        tablesToPrimaryKeyFields.put(table,getPrimaryKeyFieldsForTable(table));
      }
      Object value=values.elementAt(i);
      Expression valueExpression;
      if (valueObject instanceof Expression) {
        valueExpression=(Expression)value;
      }
 else {
        valueExpression=builder.value(value);
      }
      if (valueExpression.isValueExpression()) {
        valueExpression.setLocalBase((Expression)baseExpressions.elementAt(i));
      }
      databaseFieldsToValues.put(field,valueExpression);
    }
  }
  SQLCall selectCallForExist=null;
  SQLSelectStatement selectStatementForExist=createSQLSelectStatementForModifyAll(getSelectionCriteria());
  boolean isMainCase=selectStatementForExist.requiresAliases();
  if (isMainCase) {
    if (getExecutionSession().getPlatform().shouldAlwaysUseTempStorageForModifyAll()) {
      prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValues,tablesToPrimaryKeyFields);
      return;
    }
  }
  selectCallForExist=(SQLCall)selectStatementForExist.buildCall(getSession());
  ExpressionIterator expRequiresSelectIterator=new ExpressionIterator(){
    @Override public void iterate(    Expression each){
      if (getResult() == null) {
        return;
      }
      if (each instanceof DataExpression) {
        DataExpression dataExpression=(DataExpression)each;
        Expression baseExpression=dataExpression.getBaseExpression();
        if (baseExpression != null && !(baseExpression instanceof ExpressionBuilder)) {
          boolean stop=true;
          if (baseExpression instanceof DataExpression) {
            DataExpression baseDataExpression=(DataExpression)baseExpression;
            if (baseDataExpression.getMapping() != null && baseDataExpression.getMapping().isAggregateObjectMapping()) {
              stop=false;
            }
          }
          if (stop) {
            setResult(null);
            return;
          }
        }
        DatabaseField field=dataExpression.getField();
        if (field != null) {
          if (!field.getTable().equals((DatabaseTable)getResult())) {
            setResult(null);
            return;
          }
        }
      }
    }
    @Override public boolean shouldIterateOverSubSelects(){
      return true;
    }
  }
;
  HashMap tables_databaseFieldsToValuesCopy=new HashMap();
  it=tables_databaseFieldsToValues.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    DatabaseTable table=(DatabaseTable)entry.getKey();
    HashMap databaseFieldsToValues=(HashMap)entry.getValue();
    HashMap databaseFieldsToValuesCopy=new HashMap();
    tables_databaseFieldsToValuesCopy.put(table,databaseFieldsToValuesCopy);
    Iterator itFieldsToValues=databaseFieldsToValues.entrySet().iterator();
    while (itFieldsToValues.hasNext()) {
      Map.Entry entry2=(Map.Entry)itFieldsToValues.next();
      DatabaseField field=(DatabaseField)entry2.getKey();
      Expression value=(Expression)entry2.getValue();
      expRequiresSelectIterator.setResult(table);
      Expression valueClone=(Expression)value.clone();
      valueClone.getBuilder().setSession(getSession());
      valueClone.getBuilder().setQueryClass(getQuery().getReferenceClass());
      expRequiresSelectIterator.iterateOn(valueClone);
      if (expRequiresSelectIterator.getResult() == null) {
        if (getExecutionSession().getPlatform().shouldAlwaysUseTempStorageForModifyAll()) {
          prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValues,tablesToPrimaryKeyFields);
          return;
        }
        SQLSelectStatement selStatement=createSQLSelectStatementForAssignedExpressionForUpdateAll(value);
        databaseFieldsToValuesCopy.put(field,selStatement);
      }
 else {
        databaseFieldsToValuesCopy.put(field,valueClone);
      }
    }
  }
  HashMap tables_databaseFieldsToValuesOriginal=tables_databaseFieldsToValues;
  tables_databaseFieldsToValues=tables_databaseFieldsToValuesCopy;
  if (tables_databaseFieldsToValues.size() == 1) {
    Map.Entry entry=(Map.Entry)tables_databaseFieldsToValues.entrySet().iterator().next();
    DatabaseTable table=(DatabaseTable)entry.getKey();
    HashMap databaseFieldsToValues=(HashMap)entry.getValue();
    Collection primaryKeyFields=tablesToPrimaryKeyFields.values().iterator().next();
    setSQLStatement(buildUpdateAllStatement(table,databaseFieldsToValues,selectCallForExist,selectStatementForExist,primaryKeyFields));
  }
 else {
    ExpressionIterator expIterator=new ExpressionIterator(){
      @Override public void iterate(      Expression each){
        if (each instanceof DataExpression) {
          DataExpression dataExpression=(DataExpression)each;
          DatabaseField field=dataExpression.getField();
          if (field != null) {
            ((Collection)getResult()).add(field);
          }
        }
      }
      @Override public boolean shouldIterateOverSubSelects(){
        return true;
      }
    }
;
    HashSet selectCallForExistFields=new HashSet();
    if (selectCallForExist != null) {
      expIterator.setResult(selectCallForExistFields);
      expIterator.iterateOn(selectStatementForExist.getWhereClause());
    }
    HashMap tablesToLeftFields=new HashMap();
    HashMap tablesToRightFields=new HashMap();
    Vector beforeTables=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance();
    Vector afterTables=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance();
    HashMap simpleConflicts=new HashMap();
    it=tables_databaseFieldsToValues.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      DatabaseTable table=(DatabaseTable)entry.getKey();
      HashMap databaseFieldsToValues=(HashMap)entry.getValue();
      HashSet leftFields=new HashSet(databaseFieldsToValues.size());
      HashSet rightFields=(HashSet)selectCallForExistFields.clone();
      expIterator.setResult(rightFields);
      Iterator itDatabaseFieldsToValues=databaseFieldsToValues.entrySet().iterator();
      while (itDatabaseFieldsToValues.hasNext()) {
        Map.Entry databaseFieldValueEntry=(Map.Entry)itDatabaseFieldsToValues.next();
        DatabaseField field=(DatabaseField)databaseFieldValueEntry.getKey();
        leftFields.add(field);
        Object value=databaseFieldValueEntry.getValue();
        if (value instanceof Expression) {
          Expression valueExpression=(Expression)value;
          expIterator.iterateOn(valueExpression);
        }
 else {
          SQLSelectStatement selStatement=(SQLSelectStatement)value;
          expIterator.iterateOn((Expression)selStatement.getFields().get(0));
          expIterator.iterateOn(selStatement.getWhereClause());
        }
      }
      Iterator itProcessedTables=tablesToLeftFields.keySet().iterator();
      while (itProcessedTables.hasNext()) {
        DatabaseTable processedTable=(DatabaseTable)itProcessedTables.next();
        HashSet processedTableLeftFields=(HashSet)tablesToLeftFields.get(processedTable);
        HashSet processedTableRightFields=(HashSet)tablesToRightFields.get(processedTable);
        boolean tableBeforeProcessedTable=false;
        Iterator itProcessedTableLeftField=processedTableLeftFields.iterator();
        while (itProcessedTableLeftField.hasNext()) {
          if (rightFields.contains(itProcessedTableLeftField.next())) {
            tableBeforeProcessedTable=true;
            break;
          }
        }
        boolean processedTableBeforeTable=false;
        Iterator itLeftField=leftFields.iterator();
        while (itLeftField.hasNext()) {
          if (processedTableRightFields.contains(itLeftField.next())) {
            processedTableBeforeTable=true;
            break;
          }
        }
        if (tableBeforeProcessedTable && !processedTableBeforeTable) {
          beforeTables.add(table);
          afterTables.add(processedTable);
        }
 else         if (!tableBeforeProcessedTable && processedTableBeforeTable) {
          beforeTables.add(processedTable);
          afterTables.add(table);
        }
 else         if (tableBeforeProcessedTable && processedTableBeforeTable) {
          simpleConflicts.put(processedTable,table);
        }
      }
      tablesToLeftFields.put(table,leftFields);
      tablesToRightFields.put(table,rightFields);
    }
    if (!simpleConflicts.isEmpty()) {
      prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValuesOriginal,tablesToPrimaryKeyFields);
      return;
    }
    Vector orderedTables=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(tables_databaseFieldsToValues.size());
    while (!beforeTables.isEmpty()) {
      DatabaseTable firstTable=null;
      for (int i=0; i < beforeTables.size(); i++) {
        DatabaseTable beforeTable=(DatabaseTable)beforeTables.elementAt(i);
        if (!afterTables.contains(beforeTable)) {
          firstTable=beforeTable;
          break;
        }
      }
      if (firstTable == null) {
        prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValuesOriginal,tablesToPrimaryKeyFields);
        return;
      }
 else {
        for (int i=beforeTables.size() - 1; i >= 0; i--) {
          if (beforeTables.elementAt(i).equals(firstTable)) {
            beforeTables.remove(i);
            afterTables.remove(i);
          }
        }
        orderedTables.addElement(firstTable);
      }
    }
    Iterator itTables=tables_databaseFieldsToValues.keySet().iterator();
    while (itTables.hasNext()) {
      DatabaseTable table=(DatabaseTable)itTables.next();
      if (!orderedTables.contains(table)) {
        orderedTables.add(table);
      }
    }
    for (int i=0; i < orderedTables.size(); i++) {
      DatabaseTable table=(DatabaseTable)orderedTables.elementAt(i);
      HashMap databaseFieldsToValues=(HashMap)tables_databaseFieldsToValues.get(table);
      Collection primaryKeyFields=tablesToPrimaryKeyFields.get(table);
      getSQLStatements().addElement(buildUpdateAllStatement(table,databaseFieldsToValues,selectCallForExist,selectStatementForExist,primaryKeyFields));
    }
  }
  ((UpdateAllQuery)getQuery()).setIsPreparedUsingTempStorage(false);
  super.prepareUpdateAll();
}","/** 
 * Pre-build the SQL statement from the expressions.
 */
@Override public void prepareUpdateAll(){
  ExpressionBuilder builder=((UpdateAllQuery)getQuery()).getExpressionBuilder();
  HashMap updateClauses=((UpdateAllQuery)getQuery()).getUpdateClauses();
  boolean updateClausesHasBeenCloned=false;
  OptimisticLockingPolicy policy=getDescriptor().getOptimisticLockingPolicy();
  if (policy != null) {
    if (policy.getWriteLockField() != null) {
      Expression writeLock=builder.getField(policy.getWriteLockField());
      if (!isFieldInUpdate(writeLock,updateClauses)) {
        Expression writeLockUpdateExpression=policy.getWriteLockUpdateExpression(builder,getQuery().getSession());
        if (writeLockUpdateExpression != null) {
          updateClauses=(HashMap)updateClauses.clone();
          updateClausesHasBeenCloned=true;
          updateClauses.put(writeLock,writeLockUpdateExpression);
        }
      }
    }
  }
  if (getDescriptor().hasSerializedObjectPolicy()) {
    if (!updateClausesHasBeenCloned) {
      updateClauses=(HashMap)updateClauses.clone();
      updateClausesHasBeenCloned=true;
    }
    Expression sopFieldExpression=builder.getField(getDescriptor().getSerializedObjectPolicy().getField());
    updateClauses.put(sopFieldExpression,new ConstantExpression(null,sopFieldExpression));
  }
  HashMap tables_databaseFieldsToValues=new HashMap();
  HashMap<DatabaseTable,List<DatabaseField>> tablesToPrimaryKeyFields=new HashMap();
  Iterator it=updateClauses.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Object fieldObject=entry.getKey();
    DataExpression fieldExpression=null;
    Expression baseExpression=null;
    String attributeName=null;
    if (fieldObject instanceof String) {
      attributeName=(String)fieldObject;
    }
 else {
      fieldExpression=(DataExpression)fieldObject;
    }
    DatabaseField field=null;
    DatabaseMapping mapping=null;
    if (attributeName != null) {
      mapping=getDescriptor().getObjectBuilder().getMappingForAttributeName(attributeName);
      if (mapping != null && !mapping.getFields().isEmpty()) {
        field=mapping.getFields().get(0);
      }
      if (field == null) {
        throw QueryException.updateAllQueryAddUpdateDoesNotDefineField(getDescriptor(),getQuery(),attributeName);
      }
      baseExpression=((UpdateAllQuery)getQuery()).getExpressionBuilder().get(attributeName);
    }
 else     if (fieldExpression != null) {
      if (fieldExpression.getBaseExpression() instanceof ExpressionBuilder) {
        field=getDescriptor().getObjectBuilder().getFieldForQueryKeyName(fieldExpression.getName());
      }
      if (field == null) {
        DataExpression fieldExpressionClone=(DataExpression)fieldExpression.clone();
        fieldExpressionClone.getBuilder().setQueryClass(getQuery().getReferenceClass());
        fieldExpressionClone.getBuilder().setSession(getSession().getRootSession(null));
        field=fieldExpressionClone.getField();
        if (field == null) {
          throw QueryException.updateAllQueryAddUpdateDoesNotDefineField(getDescriptor(),getQuery(),fieldExpression.toString());
        }
      }
      mapping=getDescriptor().getObjectBuilder().getMappingForField(field);
      baseExpression=fieldExpression;
    }
    Object valueObject=entry.getValue();
    Vector fields;
    Vector values;
    Vector baseExpressions;
    if (mapping != null && mapping.isOneToOneMapping()) {
      fields=mapping.getFields();
      int fieldsSize=fields.size();
      values=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(fieldsSize);
      baseExpressions=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(fieldsSize);
      for (int i=0; i < fieldsSize; i++) {
        if (valueObject instanceof ConstantExpression) {
          valueObject=((ConstantExpression)valueObject).getValue();
        }
        if (valueObject == null) {
          values.add(null);
        }
 else {
          DatabaseField targetField=((OneToOneMapping)mapping).getSourceToTargetKeyFields().get(fields.get(i));
          if (valueObject instanceof Expression) {
            Expression exp=((Expression)((Expression)valueObject).clone()).getField(targetField);
            if (exp.isParameterExpression()) {
              ((ParameterExpression)exp).setType(targetField.getType());
            }
            values.add(exp);
          }
 else {
            values.add(((OneToOneMapping)mapping).getReferenceDescriptor().getObjectBuilder().extractValueFromObjectForField(valueObject,targetField,getSession()));
          }
        }
        baseExpressions.add(new FieldExpression((DatabaseField)fields.elementAt(i),((QueryKeyExpression)baseExpression).getBaseExpression()));
      }
    }
 else {
      fields=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(1);
      fields.add(field);
      values=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(1);
      values.add(valueObject);
      baseExpressions=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(1);
      baseExpressions.add(baseExpression);
    }
    int fieldsSize=fields.size();
    for (int i=0; i < fieldsSize; i++) {
      field=(DatabaseField)fields.elementAt(i);
      DatabaseTable table=field.getTable();
      if (!getDescriptor().getTables().contains(table)) {
        if (attributeName != null) {
          throw QueryException.updateAllQueryAddUpdateDefinesWrongField(getDescriptor(),getQuery(),attributeName,field.getQualifiedName());
        }
 else {
          throw QueryException.updateAllQueryAddUpdateDefinesWrongField(getDescriptor(),getQuery(),fieldExpression.toString(),field.getQualifiedName());
        }
      }
      HashMap databaseFieldsToValues=(HashMap)tables_databaseFieldsToValues.get(table);
      if (databaseFieldsToValues == null) {
        databaseFieldsToValues=new HashMap();
        tables_databaseFieldsToValues.put(table,databaseFieldsToValues);
        tablesToPrimaryKeyFields.put(table,getPrimaryKeyFieldsForTable(table));
      }
      Object value=values.elementAt(i);
      Expression valueExpression;
      if (valueObject instanceof Expression) {
        valueExpression=(Expression)value;
      }
 else {
        valueExpression=builder.value(value);
      }
      if (valueExpression.isValueExpression()) {
        valueExpression.setLocalBase((Expression)baseExpressions.elementAt(i));
      }
      databaseFieldsToValues.put(field,valueExpression);
    }
  }
  SQLCall selectCallForExist=null;
  SQLSelectStatement selectStatementForExist=createSQLSelectStatementForModifyAll(getSelectionCriteria());
  boolean isMainCase=selectStatementForExist.requiresAliases();
  if (isMainCase) {
    if (getExecutionSession().getPlatform().shouldAlwaysUseTempStorageForModifyAll()) {
      prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValues,tablesToPrimaryKeyFields);
      return;
    }
  }
  selectCallForExist=(SQLCall)selectStatementForExist.buildCall(getSession());
  ExpressionIterator expRequiresSelectIterator=new ExpressionIterator(){
    @Override public void iterate(    Expression each){
      if (getResult() == null) {
        return;
      }
      if (each instanceof DataExpression) {
        DataExpression dataExpression=(DataExpression)each;
        Expression baseExpression=dataExpression.getBaseExpression();
        if (baseExpression != null && !(baseExpression instanceof ExpressionBuilder)) {
          boolean stop=true;
          if (baseExpression instanceof DataExpression) {
            DataExpression baseDataExpression=(DataExpression)baseExpression;
            if (baseDataExpression.getMapping() != null && baseDataExpression.getMapping().isAggregateObjectMapping()) {
              stop=false;
            }
          }
          if (stop) {
            setResult(null);
            return;
          }
        }
        DatabaseField field=dataExpression.getField();
        if (field != null) {
          if (!field.getTable().equals((DatabaseTable)getResult())) {
            setResult(null);
            return;
          }
        }
      }
    }
    @Override public boolean shouldIterateOverSubSelects(){
      return true;
    }
  }
;
  HashMap tables_databaseFieldsToValuesCopy=new HashMap();
  it=tables_databaseFieldsToValues.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    DatabaseTable table=(DatabaseTable)entry.getKey();
    HashMap databaseFieldsToValues=(HashMap)entry.getValue();
    HashMap databaseFieldsToValuesCopy=new HashMap();
    tables_databaseFieldsToValuesCopy.put(table,databaseFieldsToValuesCopy);
    Iterator itFieldsToValues=databaseFieldsToValues.entrySet().iterator();
    while (itFieldsToValues.hasNext()) {
      Map.Entry entry2=(Map.Entry)itFieldsToValues.next();
      DatabaseField field=(DatabaseField)entry2.getKey();
      Expression value=(Expression)entry2.getValue();
      expRequiresSelectIterator.setResult(table);
      Expression valueClone=(Expression)value.clone();
      valueClone.getBuilder().setSession(getSession());
      valueClone.getBuilder().setQueryClass(getQuery().getReferenceClass());
      expRequiresSelectIterator.iterateOn(valueClone);
      if (expRequiresSelectIterator.getResult() == null) {
        if (getExecutionSession().getPlatform().shouldAlwaysUseTempStorageForModifyAll()) {
          prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValues,tablesToPrimaryKeyFields);
          return;
        }
        SQLSelectStatement selStatement=createSQLSelectStatementForAssignedExpressionForUpdateAll(value);
        databaseFieldsToValuesCopy.put(field,selStatement);
      }
 else {
        databaseFieldsToValuesCopy.put(field,valueClone);
      }
    }
  }
  HashMap tables_databaseFieldsToValuesOriginal=tables_databaseFieldsToValues;
  tables_databaseFieldsToValues=tables_databaseFieldsToValuesCopy;
  if (tables_databaseFieldsToValues.size() == 1) {
    Map.Entry entry=(Map.Entry)tables_databaseFieldsToValues.entrySet().iterator().next();
    DatabaseTable table=(DatabaseTable)entry.getKey();
    HashMap databaseFieldsToValues=(HashMap)entry.getValue();
    Collection primaryKeyFields=tablesToPrimaryKeyFields.values().iterator().next();
    setSQLStatement(buildUpdateAllStatement(table,databaseFieldsToValues,selectCallForExist,selectStatementForExist,primaryKeyFields));
  }
 else {
    ExpressionIterator expIterator=new ExpressionIterator(){
      @Override public void iterate(      Expression each){
        if (each instanceof DataExpression) {
          DataExpression dataExpression=(DataExpression)each;
          DatabaseField field=dataExpression.getField();
          if (field != null) {
            ((Collection)getResult()).add(field);
          }
        }
      }
      @Override public boolean shouldIterateOverSubSelects(){
        return true;
      }
    }
;
    HashSet selectCallForExistFields=new HashSet();
    if (selectCallForExist != null) {
      expIterator.setResult(selectCallForExistFields);
      expIterator.iterateOn(selectStatementForExist.getWhereClause());
    }
    HashMap tablesToLeftFields=new HashMap();
    HashMap tablesToRightFields=new HashMap();
    Vector beforeTables=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance();
    Vector afterTables=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance();
    HashMap simpleConflicts=new HashMap();
    it=tables_databaseFieldsToValues.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      DatabaseTable table=(DatabaseTable)entry.getKey();
      HashMap databaseFieldsToValues=(HashMap)entry.getValue();
      HashSet leftFields=new HashSet(databaseFieldsToValues.size());
      HashSet rightFields=(HashSet)selectCallForExistFields.clone();
      expIterator.setResult(rightFields);
      Iterator itDatabaseFieldsToValues=databaseFieldsToValues.entrySet().iterator();
      while (itDatabaseFieldsToValues.hasNext()) {
        Map.Entry databaseFieldValueEntry=(Map.Entry)itDatabaseFieldsToValues.next();
        DatabaseField field=(DatabaseField)databaseFieldValueEntry.getKey();
        leftFields.add(field);
        Object value=databaseFieldValueEntry.getValue();
        if (value instanceof Expression) {
          Expression valueExpression=(Expression)value;
          expIterator.iterateOn(valueExpression);
        }
 else {
          SQLSelectStatement selStatement=(SQLSelectStatement)value;
          expIterator.iterateOn((Expression)selStatement.getFields().get(0));
          expIterator.iterateOn(selStatement.getWhereClause());
        }
      }
      Iterator itProcessedTables=tablesToLeftFields.keySet().iterator();
      while (itProcessedTables.hasNext()) {
        DatabaseTable processedTable=(DatabaseTable)itProcessedTables.next();
        HashSet processedTableLeftFields=(HashSet)tablesToLeftFields.get(processedTable);
        HashSet processedTableRightFields=(HashSet)tablesToRightFields.get(processedTable);
        boolean tableBeforeProcessedTable=false;
        Iterator itProcessedTableLeftField=processedTableLeftFields.iterator();
        while (itProcessedTableLeftField.hasNext()) {
          if (rightFields.contains(itProcessedTableLeftField.next())) {
            tableBeforeProcessedTable=true;
            break;
          }
        }
        boolean processedTableBeforeTable=false;
        Iterator itLeftField=leftFields.iterator();
        while (itLeftField.hasNext()) {
          if (processedTableRightFields.contains(itLeftField.next())) {
            processedTableBeforeTable=true;
            break;
          }
        }
        if (tableBeforeProcessedTable && !processedTableBeforeTable) {
          beforeTables.add(table);
          afterTables.add(processedTable);
        }
 else         if (!tableBeforeProcessedTable && processedTableBeforeTable) {
          beforeTables.add(processedTable);
          afterTables.add(table);
        }
 else         if (tableBeforeProcessedTable && processedTableBeforeTable) {
          simpleConflicts.put(processedTable,table);
        }
      }
      tablesToLeftFields.put(table,leftFields);
      tablesToRightFields.put(table,rightFields);
    }
    if (!simpleConflicts.isEmpty()) {
      prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValuesOriginal,tablesToPrimaryKeyFields);
      return;
    }
    Vector orderedTables=org.eclipse.persistence.internal.helper.NonSynchronizedVector.newInstance(tables_databaseFieldsToValues.size());
    while (!beforeTables.isEmpty()) {
      DatabaseTable firstTable=null;
      for (int i=0; i < beforeTables.size(); i++) {
        DatabaseTable beforeTable=(DatabaseTable)beforeTables.elementAt(i);
        if (!afterTables.contains(beforeTable)) {
          firstTable=beforeTable;
          break;
        }
      }
      if (firstTable == null) {
        prepareUpdateAllUsingTempStorage(tables_databaseFieldsToValuesOriginal,tablesToPrimaryKeyFields);
        return;
      }
 else {
        for (int i=beforeTables.size() - 1; i >= 0; i--) {
          if (beforeTables.elementAt(i).equals(firstTable)) {
            beforeTables.remove(i);
            afterTables.remove(i);
          }
        }
        orderedTables.addElement(firstTable);
      }
    }
    Iterator itTables=tables_databaseFieldsToValues.keySet().iterator();
    while (itTables.hasNext()) {
      DatabaseTable table=(DatabaseTable)itTables.next();
      if (!orderedTables.contains(table)) {
        orderedTables.add(table);
      }
    }
    for (int i=0; i < orderedTables.size(); i++) {
      DatabaseTable table=(DatabaseTable)orderedTables.elementAt(i);
      HashMap databaseFieldsToValues=(HashMap)tables_databaseFieldsToValues.get(table);
      Collection primaryKeyFields=tablesToPrimaryKeyFields.get(table);
      getSQLStatements().addElement(buildUpdateAllStatement(table,databaseFieldsToValues,selectCallForExist,selectStatementForExist,primaryKeyFields));
    }
  }
  ((UpdateAllQuery)getQuery()).setIsPreparedUsingTempStorage(false);
  super.prepareUpdateAll();
}"
63245,"private void marshalStreamOrWriter(Object object,MarshalRecord marshalRecord,ABSTRACT_SESSION session,DESCRIPTOR descriptor,boolean isXMLRoot){
  marshalRecord.setMarshaller(this);
  if (isXMLRoot) {
    if (session == null || descriptor == null) {
      try {
        session=context.getSession(((Root)object).getObject());
        if (session != null) {
          descriptor=getDescriptor(((Root)object).getObject(),session);
        }
      }
 catch (      XMLMarshalException marshalException) {
        if (!isSimpleXMLRoot((Root)object)) {
          throw marshalException;
        }
      }
    }
  }
 else {
    Class objectClass=object.getClass();
    if (object instanceof Collection) {
      marshalRecord.startCollection();
      for (      Object o : (Collection)object) {
        marshal(o,marshalRecord);
      }
      marshalRecord.endCollection();
      marshalRecord.flush();
      return;
    }
 else     if (objectClass.isArray()) {
      marshalRecord.startCollection();
      int arrayLength=Array.getLength(object);
      for (int x=0; x < arrayLength; x++) {
        marshal(Array.get(object,x),marshalRecord);
      }
      marshalRecord.endCollection();
      marshalRecord.flush();
      return;
    }
    if (session == null || descriptor == null) {
      session=context.getSession(objectClass);
      descriptor=getDescriptor(objectClass,session);
    }
  }
  marshal(object,marshalRecord,session,descriptor,isXMLRoot);
  marshalRecord.flush();
}","private void marshalStreamOrWriter(Object object,MarshalRecord marshalRecord,ABSTRACT_SESSION session,DESCRIPTOR descriptor,boolean isXMLRoot){
  marshalRecord.setMarshaller(this);
  if (isXMLRoot) {
    if (session == null || descriptor == null) {
      try {
        session=context.getSession(((Root)object).getObject());
        if (session != null) {
          descriptor=getDescriptor(((Root)object).getObject(),session);
        }
 else         if (descriptor == null) {
          descriptor=context.getDescriptor(new QName(((Root)object).getNamespaceURI(),((Root)object).getLocalName()));
        }
      }
 catch (      XMLMarshalException marshalException) {
        if (!isSimpleXMLRoot((Root)object)) {
          throw marshalException;
        }
      }
    }
  }
 else {
    Class objectClass=object.getClass();
    if (object instanceof Collection) {
      marshalRecord.startCollection();
      for (      Object o : (Collection)object) {
        marshal(o,marshalRecord);
      }
      marshalRecord.endCollection();
      marshalRecord.flush();
      return;
    }
 else     if (objectClass.isArray()) {
      marshalRecord.startCollection();
      int arrayLength=Array.getLength(object);
      for (int x=0; x < arrayLength; x++) {
        marshal(Array.get(object,x),marshalRecord);
      }
      marshalRecord.endCollection();
      marshalRecord.flush();
      return;
    }
    if (session == null || descriptor == null) {
      session=context.getSession(objectClass);
      descriptor=getDescriptor(objectClass,session);
    }
  }
  marshal(object,marshalRecord,session,descriptor,isXMLRoot);
  marshalRecord.flush();
}"
63246,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.XmlElementsEnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.choice.InterfaceChoiceTestCases.class);
  suite.addTestSuite(InvalidTransientInterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.inheritance.interfaces.InterfacesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.HandleListenerExceptionsTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(XMLStreamReaderEndEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.ExtraPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.MissingPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.IgnoreInvalidNonPublicFieldTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeTwoDatesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.NonNegativeIntegerSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.CharTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(ObjectFactoryTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlAnyMixedTestCases.class);
  suite.addTestSuite(XmlPathWithMultipleEqualsCharactersTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalAutoDetectTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ValidationTestCases.class);
  suite.addTestSuite(AutoDetectMediaTypeTestCases.class);
  suite.addTestSuite(AutoDetectFailsTestCases.class);
  suite.addTestSuite(AutoDetectSmallDocTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(PrefixMapperContextTestCases.class);
  suite.addTestSuite(DefaultNSPrefixMapperSimpleTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  suite.addTestSuite(UnmappedElementsWarningTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.XmlElementsEnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.choice.InterfaceChoiceTestCases.class);
  suite.addTestSuite(InvalidTransientInterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.inheritance.interfaces.InterfacesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.HandleListenerExceptionsTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(XMLStreamReaderEndEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.ExtraPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.MissingPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.IgnoreInvalidNonPublicFieldTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeTwoDatesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.NonNegativeIntegerSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.CharTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(ObjectFactoryTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlAnyMixedTestCases.class);
  suite.addTestSuite(XmlPathWithMultipleEqualsCharactersTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalAutoDetectTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ValidationTestCases.class);
  suite.addTestSuite(AutoDetectMediaTypeTestCases.class);
  suite.addTestSuite(AutoDetectFailsTestCases.class);
  suite.addTestSuite(AutoDetectSmallDocTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(PrefixMapperPackageInfoTestCases.class);
  suite.addTestSuite(PrefixMapperContextTestCases.class);
  suite.addTestSuite(DefaultNSPrefixMapperSimpleTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  suite.addTestSuite(UnmappedElementsWarningTestCases.class);
  return suite;
}"
63247,"/** 
 * Build the class metadata for the class name using ASM to read the class byte codes.
 */
protected void buildClassMetadata(MetadataClass metadataClass,String className,boolean isLazy){
  ClassMetadataVisitor visitor=new ClassMetadataVisitor(metadataClass,isLazy);
  InputStream stream=null;
  try {
    String resourceString=className.replace('.','/') + ""String_Node_Str"";
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      final String f_resourceString=resourceString;
      stream=AccessController.doPrivileged(new PrivilegedAction<InputStream>(){
        @Override public InputStream run(){
          return m_loader.getResourceAsStream(f_resourceString);
        }
      }
);
    }
 else {
      stream=m_loader.getResourceAsStream(resourceString);
    }
    ClassReader reader=new ClassReader(stream);
    Attribute[] attributes=new Attribute[0];
    reader.accept(visitor,attributes,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
  }
 catch (  Exception exception) {
    metadataClass=new MetadataClass(this,className,false);
    if ((className.length() > 5) && className.substring(0,5).equals(""String_Node_Str"")) {
      try {
        Class reflectClass=Class.forName(className);
        if (reflectClass.getSuperclass() != null) {
          metadataClass.setSuperclassName(reflectClass.getSuperclass().getName());
        }
        for (        Class reflectInterface : reflectClass.getInterfaces()) {
          metadataClass.addInterface(reflectInterface.getName());
        }
      }
 catch (      Exception failed) {
        metadataClass.setIsAccessible(false);
      }
    }
 else {
      SessionLog log=getLogger().getSession() != null ? getLogger().getSession().getSessionLog() : AbstractSessionLog.getLog();
      if (log.shouldLog(SessionLog.SEVERE,SessionLog.METADATA)) {
        SessionLogEntry entry=new SessionLogEntry(getLogger().getSession(),SessionLog.SEVERE,SessionLog.METADATA,exception);
        entry.setMessage(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{className}));
        log.log(entry);
      }
      if (stream != null) {
        try {
          ClassReader reader=new EclipseLinkClassReader(stream);
          Attribute[] attributes=new Attribute[0];
          reader.accept(visitor,attributes,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
        }
 catch (        Exception e) {
          if (log.shouldLog(SessionLog.SEVERE,SessionLog.METADATA)) {
            SessionLogEntry entry=new SessionLogEntry(getLogger().getSession(),SessionLog.SEVERE,SessionLog.METADATA,exception);
            entry.setMessage(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{className}));
            log.log(entry);
          }
          metadataClass.setIsAccessible(false);
          addMetadataClass(metadataClass);
        }
      }
 else {
        metadataClass.setIsAccessible(false);
        addMetadataClass(metadataClass);
      }
    }
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException ignore) {
    }
  }
}","/** 
 * Build the class metadata for the class name using ASM to read the class byte codes.
 */
protected void buildClassMetadata(MetadataClass metadataClass,String className,boolean isLazy){
  ClassMetadataVisitor visitor=new ClassMetadataVisitor(metadataClass,isLazy);
  InputStream stream=null;
  try {
    String resourceString=className.replace('.','/') + ""String_Node_Str"";
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      final String f_resourceString=resourceString;
      stream=AccessController.doPrivileged(new PrivilegedAction<InputStream>(){
        @Override public InputStream run(){
          return m_loader.getResourceAsStream(f_resourceString);
        }
      }
);
    }
 else {
      stream=m_loader.getResourceAsStream(resourceString);
    }
    ClassReader reader=new ClassReader(stream);
    Attribute[] attributes=new Attribute[0];
    reader.accept(visitor,attributes,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
  }
 catch (  IllegalArgumentException iae) {
    SessionLog log=getLogger().getSession() != null ? getLogger().getSession().getSessionLog() : AbstractSessionLog.getLog();
    if (log.shouldLog(SessionLog.SEVERE,SessionLog.METADATA)) {
      SessionLogEntry entry=new SessionLogEntry(getLogger().getSession(),SessionLog.SEVERE,SessionLog.METADATA,iae);
      entry.setMessage(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{className}));
      log.log(entry);
    }
    if (stream != null) {
      try {
        ClassReader reader=new EclipseLinkClassReader(stream);
        Attribute[] attributes=new Attribute[0];
        reader.accept(visitor,attributes,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
      }
 catch (      Exception e) {
        if (log.shouldLog(SessionLog.SEVERE,SessionLog.METADATA)) {
          SessionLogEntry entry=new SessionLogEntry(getLogger().getSession(),SessionLog.SEVERE,SessionLog.METADATA,e);
          entry.setMessage(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{className}));
          log.log(entry);
        }
        addMetadataClass(getVirtualMetadataClass(className));
      }
    }
 else {
      addMetadataClass(getVirtualMetadataClass(className));
    }
  }
catch (  Exception exception) {
    SessionLog log=getLogger().getSession() != null ? getLogger().getSession().getSessionLog() : AbstractSessionLog.getLog();
    if (log.shouldLog(SessionLog.FINE,SessionLog.METADATA)) {
      log.logThrowable(SessionLog.FINE,SessionLog.METADATA,exception);
    }
    addMetadataClass(getVirtualMetadataClass(className));
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    IOException ignore) {
    }
  }
}"
63248,"/** 
 * Creates and stores primary key expression.
 */
public void createPrimaryKeyExpression(AbstractSession session){
  Expression expression=null;
  Expression builder=new ExpressionBuilder();
  Expression subExp1;
  Expression subExp2;
  Expression subExpression;
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  if (null != primaryKeyFields) {
    for (int index=0; index < primaryKeyFields.size(); index++) {
      DatabaseField primaryKeyField=(DatabaseField)primaryKeyFields.get(index);
      subExpression=session.getPlatform().createExpressionFor(primaryKeyField,builder);
      if (expression == null) {
        expression=subExpression;
      }
 else {
        expression=expression.and(subExpression);
      }
    }
  }
  setPrimaryKeyExpression(expression);
}","/** 
 * Creates and stores primary key expression.
 */
public void createPrimaryKeyExpression(AbstractSession session){
  Expression expression=null;
  Expression builder=new ExpressionBuilder();
  Expression subExp1;
  Expression subExp2;
  Expression subExpression;
  List primaryKeyFields=this.descriptor.getPrimaryKeyFields();
  if (null != primaryKeyFields) {
    for (int index=0; index < primaryKeyFields.size(); index++) {
      DatabaseField primaryKeyField=(DatabaseField)primaryKeyFields.get(index);
      subExpression=((DatasourcePlatform)session.getDatasourcePlatform()).createExpressionFor(primaryKeyField,builder);
      if (expression == null) {
        expression=subExpression;
      }
 else {
        expression=expression.and(subExpression);
      }
    }
  }
  setPrimaryKeyExpression(expression);
}"
63249,"@Test public void testComplexJPQLIN(){
  EntityManager em=emf.createEntityManager();
  Query q=em.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  q.getResultList();
  if (em.isOpen()) {
    em.clear();
    em.close();
  }
}","@Test public void testComplexJPQLIN(){
  if (getPlatform(emf) instanceof DerbyPlatform) {
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"",true);
    return;
  }
  EntityManager em=emf.createEntityManager();
  Query q=em.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  q.getResultList();
  if (em.isOpen()) {
    em.clear();
    em.close();
  }
}"
63250,"public void test() throws Exception {
  checkSelectForUpateSupported();
  if (getSession().getPlatform().isHANA()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (this.lockMode == ObjectBuildingQuery.LOCK_NOWAIT) {
    checkNoWaitSupported();
  }
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,(short)this.lockMode);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,(short)lockMode);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
  finally {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
  }
}","public void test() throws Exception {
  checkSelectForUpateSupported();
  if (getSession().getPlatform().isHANA()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  checkNoWaitSupported();
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,(short)lockMode);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
  finally {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
  }
}"
63251,"public void test() throws Exception {
  checkSelectForUpateSupported();
  if (getSession().getPlatform().isHANA()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (this.lockMode == ObjectBuildingQuery.LOCK_NOWAIT) {
    checkNoWaitSupported();
  }
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,(short)this.lockMode);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,org.eclipse.persistence.queries.ObjectBuildingQuery.LOCK_NOWAIT);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
  finally {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
  }
}","public void test() throws Exception {
  checkSelectForUpateSupported();
  if (getSession().getPlatform().isHANA()) {
    throw new TestWarningException(""String_Node_Str"");
  }
  if (this.lockMode == ObjectBuildingQuery.LOCK_NOWAIT) {
    checkNoWaitSupported();
  }
  uow=getSession().acquireUnitOfWork();
  this.employeeObject=(Employee)uow.registerObject(employeeObject);
  city=employeeObject.getAddress().getCity();
  employeeObject.getAddress().setCity(""String_Node_Str"");
  startTime=employeeObject.getStartTime();
  employeeObject.setStartTime(null);
  endDate=employeeObject.getPeriod().getEndDate();
  employeeObject.getPeriod().setEndDate(null);
  managerName=employeeObject.getManager().getFirstName();
  employeeObject.getManager().setFirstName(""String_Node_Str"");
  collectionSize=employeeObject.getPhoneNumbers().size();
  employeeObject.getPhoneNumbers().removeAllElements();
  responsibilityListSize=employeeObject.getResponsibilitiesList().size();
  employeeObject.getResponsibilitiesList().removeAllElements();
  uow.refreshAndLockObject(employeeObject,(short)this.lockMode);
  DatabaseSession session2=null;
  UnitOfWork uow2=null;
  try {
    if (getSession() instanceof org.eclipse.persistence.sessions.remote.RemoteSession) {
      session2=org.eclipse.persistence.testing.tests.remote.RemoteModel.getServerSession().getProject().createDatabaseSession();
    }
 else {
      session2=getSession().getProject().createDatabaseSession();
    }
    session2.setSessionLog(getSession().getSessionLog());
    session2.login();
    uow2=session2.acquireUnitOfWork();
    boolean isLocked=false;
    Object result=null;
    try {
      result=uow2.refreshAndLockObject(employeeObject,(short)lockMode);
    }
 catch (    EclipseLinkException exeception) {
      session2.logMessage(exeception.toString());
      isLocked=true;
    }
    if (result == null) {
      isLocked=true;
    }
    if (!isLocked) {
      throw new TestWarningException(""String_Node_Str"");
    }
  }
  finally {
    if (uow2 != null) {
      uow2.release();
    }
    if (session2 != null) {
      session2.logout();
    }
  }
}"
63252,"public void testQueryPESSIMISTIC_READLock(){
  if ((JUnitTestCase.getServerSession()).getPlatform().isHANA()) {
    return;
  }
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    PessimisticLockException pessimisticLockException=null;
    try {
      beginTransaction(em);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        List employees2=em2.createQuery(""String_Node_Str"").getResultList();
        Employee employee2=(Employee)employees2.get(0);
        List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_READ).getResultList();
        Employee employee=(Employee)employees.get(0);
        employee.setFirstName(""String_Node_Str"");
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(employee2,LockModeType.PESSIMISTIC_READ,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      javax.persistence.PessimisticLockException ex) {
        pessimisticLockException=ex;
      }
 finally {
        closeEntityManagerAndTransaction(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testQueryPESSIMISTIC_READLock(){
  if ((JUnitTestCase.getServerSession()).getPlatform().isHANA()) {
    return;
  }
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    PessimisticLockException pessimisticLockException=null;
    try {
      beginTransaction(em);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        List employees2=em2.createQuery(""String_Node_Str"").getResultList();
        Employee employee2=(Employee)employees2.get(0);
        List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_READ).getResultList();
        Employee employee=(Employee)employees.get(0);
        employee.setFirstName(""String_Node_Str"");
        em2.lock(employee2,LockModeType.PESSIMISTIC_READ);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      javax.persistence.PessimisticLockException ex) {
        pessimisticLockException=ex;
      }
 finally {
        closeEntityManagerAndTransaction(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
63253,"public void testQueryPESSIMISTIC_WRITELock(){
  if ((JUnitTestCase.getServerSession()).getPlatform().isHANA()) {
    return;
  }
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        List employees2=em2.createQuery(""String_Node_Str"").getResultList();
        Employee employee2=(Employee)employees2.get(0);
        List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_READ).getResultList();
        Employee employee=(Employee)employees.get(0);
        employee.setFirstName(""String_Node_Str"");
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(employee2,LockModeType.PESSIMISTIC_READ,properties);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      javax.persistence.PessimisticLockException ex) {
        pessimisticLockException=ex;
      }
 finally {
        closeEntityManagerAndTransaction(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testQueryPESSIMISTIC_WRITELock(){
  if ((JUnitTestCase.getServerSession()).getPlatform().isHANA()) {
    return;
  }
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        List employees2=em2.createQuery(""String_Node_Str"").getResultList();
        Employee employee2=(Employee)employees2.get(0);
        List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_READ).getResultList();
        Employee employee=(Employee)employees.get(0);
        employee.setFirstName(""String_Node_Str"");
        em2.lock(employee2,LockModeType.PESSIMISTIC_READ);
        employee2.setFirstName(""String_Node_Str"");
        commitTransaction(em2);
      }
 catch (      javax.persistence.PessimisticLockException ex) {
        pessimisticLockException=ex;
      }
 finally {
        closeEntityManagerAndTransaction(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
63254,"public void testLockWithSecondaryTable(){
  if ((JUnitTestCase.getServerSession()).getPlatform().isHANA()) {
    return;
  }
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        List employees2=em2.createQuery(""String_Node_Str"").getResultList();
        Employee employee2=(Employee)employees2.get(0);
        List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_WRITE).getResultList();
        Employee employee=(Employee)employees.get(0);
        employee.setSalary(90000);
        HashMap properties=new HashMap();
        properties.put(QueryHints.PESSIMISTIC_LOCK_TIMEOUT,0);
        em2.lock(employee2,LockModeType.PESSIMISTIC_WRITE,properties);
        employee2.setSalary(100000);
        commitTransaction(em2);
      }
 catch (      PessimisticLockException ex) {
        pessimisticLockException=ex;
      }
 finally {
        closeEntityManagerAndTransaction(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}","public void testLockWithSecondaryTable(){
  if ((JUnitTestCase.getServerSession()).getPlatform().isHANA()) {
    return;
  }
  if (!isOnServer() && isSelectForUpateSupported()) {
    EntityManager em=createEntityManager();
    Exception pessimisticLockException=null;
    try {
      beginTransaction(em);
      EntityManager em2=createEntityManager();
      try {
        beginTransaction(em2);
        List employees2=em2.createQuery(""String_Node_Str"").getResultList();
        Employee employee2=(Employee)employees2.get(0);
        List employees=em.createQuery(""String_Node_Str"").setLockMode(LockModeType.PESSIMISTIC_WRITE).getResultList();
        Employee employee=(Employee)employees.get(0);
        employee.setSalary(90000);
        em2.lock(employee2,LockModeType.PESSIMISTIC_WRITE);
        employee2.setSalary(100000);
        commitTransaction(em2);
      }
 catch (      PessimisticLockException ex) {
        pessimisticLockException=ex;
      }
 finally {
        closeEntityManagerAndTransaction(em2);
      }
      commitTransaction(em);
    }
 catch (    RuntimeException ex) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      throw ex;
    }
 finally {
      closeEntityManager(em);
    }
    assertFalse(""String_Node_Str"",pessimisticLockException == null);
  }
}"
63255,"private void resetMySQL(AbstractSession session){
  ArrayRecord record=null;
  try {
    record=(ArrayRecord)session.executeSQL(""String_Node_Str"").get(0);
    session.executeNonSelectingSQL(""String_Node_Str"" + record.get(""String_Node_Str""));
  }
 catch (  DatabaseException x) {
    AbstractSessionLog.getLog().warning(""String_Node_Str"");
    x.printStackTrace(System.err);
  }
 finally {
    if (record != null) {
      try {
        session.executeNonSelectingSQL(""String_Node_Str"" + record.get(""String_Node_Str""));
      }
 catch (      DatabaseException y) {
        AbstractSessionLog.getLog().warning(""String_Node_Str"");
        y.printStackTrace(System.err);
      }
    }
 else {
      DatabaseLogin databaseLogin=(DatabaseLogin)session.getDatasourceLogin();
      String url=databaseLogin.getDatabaseURL();
      Properties properties=new Properties();
      properties.put(""String_Node_Str"",databaseLogin.getUserName());
      properties.put(""String_Node_Str"",databaseLogin.getPassword());
      int databaseNameSeparatorIndex=url.lastIndexOf('/');
      String databaseName=url.substring(databaseNameSeparatorIndex + 1);
      int propertiesIndex=databaseName.indexOf('?');
      if (propertiesIndex > 0) {
        for (        String propertyString : databaseName.substring(propertiesIndex + 1).split(""String_Node_Str"")) {
          String[] propertyDetails=propertyString.split(""String_Node_Str"");
          properties.put(propertyDetails[0].trim(),propertyDetails[1].trim());
        }
        databaseName=databaseName.substring(0,propertiesIndex);
      }
      url=url.substring(0,databaseNameSeparatorIndex);
      try (Connection connection=DriverManager.getConnection(url,properties)){
        connection.prepareStatement(""String_Node_Str"" + databaseName).execute();
      }
 catch (      SQLException e) {
        e.printStackTrace(System.err);
      }
    }
  }
}","private void resetMySQL(AbstractSession session){
  ArrayRecord record=null;
  try {
    record=(ArrayRecord)session.executeSQL(""String_Node_Str"").get(0);
    session.executeNonSelectingSQL(""String_Node_Str"" + record.get(""String_Node_Str""));
  }
 catch (  DatabaseException x) {
    AbstractSessionLog.getLog().warning(""String_Node_Str"");
    x.printStackTrace(System.err);
  }
 finally {
    if (record != null) {
      session.executeNonSelectingSQL(""String_Node_Str"" + record.get(""String_Node_Str""));
    }
 else {
      DatabaseLogin databaseLogin=(DatabaseLogin)session.getDatasourceLogin();
      String url=databaseLogin.getDatabaseURL();
      Properties properties=new Properties();
      properties.put(""String_Node_Str"",databaseLogin.getUserName());
      properties.put(""String_Node_Str"",databaseLogin.getPassword());
      int databaseNameSeparatorIndex=url.lastIndexOf('/');
      String databaseName=url.substring(databaseNameSeparatorIndex + 1);
      int propertiesIndex=databaseName.indexOf('?');
      if (propertiesIndex > 0) {
        for (        String propertyString : databaseName.substring(propertiesIndex + 1).split(""String_Node_Str"")) {
          String[] propertyDetails=propertyString.split(""String_Node_Str"");
          properties.put(propertyDetails[0].trim(),propertyDetails[1].trim());
        }
        databaseName=databaseName.substring(0,propertiesIndex);
      }
      url=url.substring(0,databaseNameSeparatorIndex);
      try (Connection connection=DriverManager.getConnection(url,properties)){
        connection.prepareStatement(""String_Node_Str"" + databaseName).execute();
      }
 catch (      SQLException e) {
        e.printStackTrace(System.err);
      }
    }
  }
}"
63256,"/** 
 * Tests an execute update on a named stored procedure that does a select. NamedStoredProcedure defines a result class.
 */
public void testQueryExecuteOnStoredProcQueryBuiltFromJPAThatDoesNothing(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      getServerSession(getPersistenceUnitName()).executeQuery(((StoredProcedureQueryImpl)em.createNamedStoredProcedureQuery(""String_Node_Str"")).getDatabaseQuery());
    }
 catch (    Exception e) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      fail(""String_Node_Str"" + e);
    }
 finally {
      closeEntityManager(em);
    }
  }
}","/** 
 * Tests an execute update on a named stored procedure that does a select. NamedStoredProcedure defines a result class.
 */
public void testQueryExecuteOnStoredProcQueryBuiltFromJPAThatDoesNothing(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      getServerSession(getPersistenceUnitName()).executeQuery(em.createNamedStoredProcedureQuery(""String_Node_Str"").unwrap(StoredProcedureQueryImpl.class).getDatabaseQuery());
    }
 catch (    Exception e) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      fail(""String_Node_Str"" + e);
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
63257,"/** 
 * Tests a StoredProcedureQuery that does an update though EM API
 */
public void testQueryExecuteUpdate(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      String postalCodeTypo=""String_Node_Str"";
      String postalCodeCorrection=""String_Node_Str"";
      StoredProcedureQuery query=em.createStoredProcedureQuery(""String_Node_Str"");
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      try {
        query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
        fail(""String_Node_Str"");
      }
 catch (      TransactionRequiredException e) {
      }
      beginTransaction(em);
      Address address1=new Address();
      address1.setCity(""String_Node_Str"");
      address1.setPostalCode(postalCodeTypo);
      address1.setProvince(""String_Node_Str"");
      address1.setStreet(""String_Node_Str"");
      address1.setCountry(""String_Node_Str"");
      em.persist(address1);
      Address address2=new Address();
      address2.setCity(""String_Node_Str"");
      address2.setPostalCode(postalCodeTypo);
      address2.setProvince(""String_Node_Str"");
      address2.setStreet(""String_Node_Str"");
      address2.setCountry(""String_Node_Str"");
      em.persist(address2);
      em.flush();
      em.clear();
      clearCache();
      int results=query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
      assertTrue(""String_Node_Str"",results == 2);
      Address a1=em.find(Address.class,address1.getId());
      assertTrue(""String_Node_Str"",a1.getPostalCode().equals(postalCodeCorrection));
      Address a2=em.find(Address.class,address2.getId());
      assertTrue(""String_Node_Str"",a2.getPostalCode().equals(postalCodeCorrection));
    }
  finally {
      closeEntityManagerAndTransaction(em);
    }
  }
}","/** 
 * Tests a StoredProcedureQuery that does an update though EM API
 */
public void testQueryExecuteUpdate(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      String postalCodeTypo=""String_Node_Str"";
      String postalCodeCorrection=""String_Node_Str"";
      StoredProcedureQuery query=em.createStoredProcedureQuery(""String_Node_Str"");
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      try {
        query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
        fail(""String_Node_Str"");
      }
 catch (      TransactionRequiredException e) {
      }
      beginTransaction(em);
      Address address1=new Address();
      address1.setCity(""String_Node_Str"");
      address1.setPostalCode(postalCodeTypo);
      address1.setProvince(""String_Node_Str"");
      address1.setStreet(""String_Node_Str"");
      address1.setCountry(""String_Node_Str"");
      em.persist(address1);
      Address address2=new Address();
      address2.setCity(""String_Node_Str"");
      address2.setPostalCode(postalCodeTypo);
      address2.setProvince(""String_Node_Str"");
      address2.setStreet(""String_Node_Str"");
      address2.setCountry(""String_Node_Str"");
      em.persist(address2);
      em.flush();
      em.clear();
      clearCache();
      query=em.createStoredProcedureQuery(""String_Node_Str"");
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      int results=query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
      assertTrue(""String_Node_Str"",results == 2);
      Address a1=em.find(Address.class,address1.getId());
      assertTrue(""String_Node_Str"",a1.getPostalCode().equals(postalCodeCorrection));
      Address a2=em.find(Address.class,address2.getId());
      assertTrue(""String_Node_Str"",a2.getPostalCode().equals(postalCodeCorrection));
    }
  finally {
      closeEntityManagerAndTransaction(em);
    }
  }
}"
63258,"/** 
 * Tests an execute update on a named stored procedure that does a select. NamedStoredProcedure defines a result class.
 */
public void testQueryExecuteOnStoredProcQueryBuiltFromJPAThatDoesNothing(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      getServerSession(getPersistenceUnitName()).executeQuery(((StoredProcedureQueryImpl)em.createNamedStoredProcedureQuery(""String_Node_Str"")).getDatabaseQuery());
    }
 catch (    Exception e) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      fail(""String_Node_Str"" + e);
    }
 finally {
      closeEntityManager(em);
    }
  }
}","/** 
 * Tests an execute update on a named stored procedure that does a select. NamedStoredProcedure defines a result class.
 */
public void testQueryExecuteOnStoredProcQueryBuiltFromJPAThatDoesNothing(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      getServerSession(getPersistenceUnitName()).executeQuery(em.createNamedStoredProcedureQuery(""String_Node_Str"").unwrap(StoredProcedureQueryImpl.class).getDatabaseQuery());
    }
 catch (    Exception e) {
      if (isTransactionActive(em)) {
        rollbackTransaction(em);
      }
      fail(""String_Node_Str"" + e);
    }
 finally {
      closeEntityManager(em);
    }
  }
}"
63259,"/** 
 * Tests a StoredProcedureQuery that does an update though EM API
 */
public void testQueryExecuteUpdate(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      String postalCodeTypo=""String_Node_Str"";
      String postalCodeCorrection=""String_Node_Str"";
      StoredProcedureQuery query=em.createStoredProcedureQuery(""String_Node_Str"");
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      try {
        query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
        fail(""String_Node_Str"");
      }
 catch (      TransactionRequiredException e) {
      }
      beginTransaction(em);
      Address address1=new Address();
      address1.setCity(""String_Node_Str"");
      address1.setPostalCode(postalCodeTypo);
      address1.setProvince(""String_Node_Str"");
      address1.setStreet(""String_Node_Str"");
      address1.setCountry(""String_Node_Str"");
      em.persist(address1);
      Address address2=new Address();
      address2.setCity(""String_Node_Str"");
      address2.setPostalCode(postalCodeTypo);
      address2.setProvince(""String_Node_Str"");
      address2.setStreet(""String_Node_Str"");
      address2.setCountry(""String_Node_Str"");
      em.persist(address2);
      em.flush();
      em.clear();
      clearCache();
      int results=query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
      assertTrue(""String_Node_Str"",results == 2);
      Address a1=em.find(Address.class,address1.getId());
      assertTrue(""String_Node_Str"",a1.getPostalCode().equals(postalCodeCorrection));
      Address a2=em.find(Address.class,address2.getId());
      assertTrue(""String_Node_Str"",a2.getPostalCode().equals(postalCodeCorrection));
    }
  finally {
      closeEntityManagerAndTransaction(em);
    }
  }
}","/** 
 * Tests a StoredProcedureQuery that does an update though EM API
 */
public void testQueryExecuteUpdate(){
  if (supportsStoredProcedures() && getPlatform().isMySQL()) {
    EntityManager em=createEntityManager();
    try {
      String postalCodeTypo=""String_Node_Str"";
      String postalCodeCorrection=""String_Node_Str"";
      StoredProcedureQuery query=em.createStoredProcedureQuery(""String_Node_Str"");
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      try {
        query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
        fail(""String_Node_Str"");
      }
 catch (      TransactionRequiredException e) {
      }
      beginTransaction(em);
      Address address1=new Address();
      address1.setCity(""String_Node_Str"");
      address1.setPostalCode(postalCodeTypo);
      address1.setProvince(""String_Node_Str"");
      address1.setStreet(""String_Node_Str"");
      address1.setCountry(""String_Node_Str"");
      em.persist(address1);
      Address address2=new Address();
      address2.setCity(""String_Node_Str"");
      address2.setPostalCode(postalCodeTypo);
      address2.setProvince(""String_Node_Str"");
      address2.setStreet(""String_Node_Str"");
      address2.setCountry(""String_Node_Str"");
      em.persist(address2);
      em.flush();
      em.clear();
      clearCache();
      query=em.createStoredProcedureQuery(""String_Node_Str"");
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      query.registerStoredProcedureParameter(""String_Node_Str"",String.class,ParameterMode.IN);
      int results=query.setParameter(""String_Node_Str"",postalCodeCorrection).setParameter(""String_Node_Str"",postalCodeTypo).executeUpdate();
      assertTrue(""String_Node_Str"",results == 2);
      Address a1=em.find(Address.class,address1.getId());
      assertTrue(""String_Node_Str"",a1.getPostalCode().equals(postalCodeCorrection));
      Address a2=em.find(Address.class,address2.getId());
      assertTrue(""String_Node_Str"",a2.getPostalCode().equals(postalCodeCorrection));
    }
  finally {
      closeEntityManagerAndTransaction(em);
    }
  }
}"
63260,"/** 
 * test setup -uses existing connection to obtain DB info - username, pwd and connection string/schema name -creates new DB schema named '$existingSchema+""_MT""' -creates 2 data sources (first points to original schema, second to the newly created one) and 1 proxy datasource (wraps original DSs and all DB requests are going through this DS) -prepares tables in both DSs through the usage of proxy DS -stores properties necessary for proper EMF creation in emfProperties field
 */
public void testSetup(){
  if (!getPlatform().isMySQL()) {
    warning(""String_Node_Str"");
    return;
  }
  DatabaseSessionImpl databaseSession=getDatabaseSession();
  DatabaseLogin login=getDatabaseSession().getLogin();
  schema1=login.getConnectionString().substring(login.getConnectionString().lastIndexOf('/') + 1);
  schema2=schema1 + ""String_Node_Str"";
  assertNotNull(schema1);
  assertNotNull(schema2);
  databaseSession.executeNonSelectingSQL(""String_Node_Str"" + schema1 + ""String_Node_Str"");
  try {
    databaseSession.executeNonSelectingSQL(""String_Node_Str"" + schema2 + ""String_Node_Str"");
  }
 catch (  Throwable t) {
  }
  try {
    databaseSession.executeNonSelectingSQL(""String_Node_Str"" + schema2 + ""String_Node_Str"");
  }
 catch (  Throwable t) {
    skipTest=true;
    warning(""String_Node_Str"");
    databaseSession.logThrowable(SessionLog.WARNING,SessionLog.CONNECTION,t);
    return;
  }
 finally {
    databaseSession.logout();
  }
  Map<String,String> currentProps=JUnitTestCaseHelper.getDatabaseProperties(getPersistenceUnitName());
  TestDataSource ds1=new TestDataSource(login.getDriverClassName(),login.getConnectionString(),(Properties)login.getProperties().clone());
  TestDataSource ds2=new TestDataSource(login.getDriverClassName(),login.getConnectionString() + ""String_Node_Str"",(Properties)login.getProperties().clone());
  proxyDataSource=new ProxyDS(databaseSession,currentProps.get(PersistenceUnitProperties.JDBC_USER),currentProps.get(PersistenceUnitProperties.JDBC_PASSWORD));
  proxyDataSource.add(schema1,ds1);
  proxyDataSource.add(schema2,ds2);
  emfProperties=new Properties();
  emfProperties.putAll(currentProps);
  emfProperties.remove(PersistenceUnitProperties.JDBC_DRIVER);
  emfProperties.remove(PersistenceUnitProperties.JDBC_USER);
  emfProperties.remove(PersistenceUnitProperties.JDBC_URL);
  emfProperties.remove(PersistenceUnitProperties.JDBC_PASSWORD);
  emfProperties.put(PersistenceUnitProperties.NON_JTA_DATASOURCE,proxyDataSource);
  emfProperties.put(PersistenceUnitProperties.DDL_GENERATION,PersistenceUnitProperties.NONE);
  emfProperties.put(PersistenceUnitProperties.MULTITENANT_STRATEGY,""String_Node_Str"");
  proxyDataSource.setCurrentDS(schema1);
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(getPersistenceUnitName(),emfProperties);
  assertNotNull(emf);
  new AdvancedTableCreator().replaceTables(((EntityManagerFactoryImpl)emf).getServerSession());
  emf.close();
  proxyDataSource.setCurrentDS(schema2);
  emf=Persistence.createEntityManagerFactory(getPersistenceUnitName(),emfProperties);
  assertNotNull(emf);
  new AdvancedTableCreator().replaceTables(((EntityManagerFactoryImpl)emf).getServerSession());
  emf.close();
}","/** 
 * test setup -uses existing connection to obtain DB info - username, pwd and connection string/schema name -creates new DB schema named '$existingSchema+""_MT""' -creates 2 data sources (first points to original schema, second to the newly created one) and 1 proxy datasource (wraps original DSs and all DB requests are going through this DS) -prepares tables in both DSs through the usage of proxy DS -stores properties necessary for proper EMF creation in emfProperties field
 */
public void testSetup(){
  if (!getPlatform().isMySQL()) {
    warning(""String_Node_Str"");
    return;
  }
  DatabaseSessionImpl databaseSession=getDatabaseSession();
  DatabaseLogin login=getDatabaseSession().getLogin();
  String connectionString=login.getConnectionString();
  int schemaIdx=connectionString.lastIndexOf('/');
  int queryIdx=connectionString.indexOf('?',schemaIdx);
  schema1=connectionString.substring(schemaIdx + 1,queryIdx < 0 ? connectionString.length() : queryIdx);
  schema2=schema1 + ""String_Node_Str"";
  String connectionStringMT=queryIdx < 0 ? connectionString + ""String_Node_Str"" : connectionString.substring(0,queryIdx) + ""String_Node_Str"" + connectionString.substring(queryIdx);
  assertNotNull(schema1);
  assertNotNull(schema2);
  databaseSession.executeNonSelectingSQL(""String_Node_Str"" + schema1 + ""String_Node_Str"");
  try {
    databaseSession.executeNonSelectingSQL(""String_Node_Str"" + schema2 + ""String_Node_Str"");
  }
 catch (  Throwable t) {
  }
  try {
    databaseSession.executeNonSelectingSQL(""String_Node_Str"" + schema2 + ""String_Node_Str"");
  }
 catch (  Throwable t) {
    skipTest=true;
    warning(""String_Node_Str"");
    databaseSession.logThrowable(SessionLog.WARNING,SessionLog.CONNECTION,t);
    return;
  }
 finally {
    databaseSession.logout();
  }
  Map<String,String> currentProps=JUnitTestCaseHelper.getDatabaseProperties(getPersistenceUnitName());
  TestDataSource ds1=new TestDataSource(login.getDriverClassName(),connectionString,(Properties)login.getProperties().clone());
  TestDataSource ds2=new TestDataSource(login.getDriverClassName(),connectionStringMT,(Properties)login.getProperties().clone());
  proxyDataSource=new ProxyDS(databaseSession,currentProps.get(PersistenceUnitProperties.JDBC_USER),currentProps.get(PersistenceUnitProperties.JDBC_PASSWORD));
  proxyDataSource.add(schema1,ds1);
  proxyDataSource.add(schema2,ds2);
  emfProperties=new Properties();
  emfProperties.putAll(currentProps);
  emfProperties.remove(PersistenceUnitProperties.JDBC_DRIVER);
  emfProperties.remove(PersistenceUnitProperties.JDBC_USER);
  emfProperties.remove(PersistenceUnitProperties.JDBC_URL);
  emfProperties.remove(PersistenceUnitProperties.JDBC_PASSWORD);
  emfProperties.put(PersistenceUnitProperties.NON_JTA_DATASOURCE,proxyDataSource);
  emfProperties.put(PersistenceUnitProperties.DDL_GENERATION,PersistenceUnitProperties.NONE);
  emfProperties.put(PersistenceUnitProperties.MULTITENANT_STRATEGY,""String_Node_Str"");
  proxyDataSource.setCurrentDS(schema1);
  EntityManagerFactory emf=Persistence.createEntityManagerFactory(getPersistenceUnitName(),emfProperties);
  assertNotNull(emf);
  new AdvancedTableCreator().replaceTables(((EntityManagerFactoryImpl)emf).getServerSession());
  emf.close();
  proxyDataSource.setCurrentDS(schema2);
  emf=Persistence.createEntityManagerFactory(getPersistenceUnitName(),emfProperties);
  assertNotNull(emf);
  new AdvancedTableCreator().replaceTables(((EntityManagerFactoryImpl)emf).getServerSession());
  emf.close();
}"
63261,"public void testGetPersistenceUnitUtilOnCloseEMF(){
  EntityManagerFactory emf=getEntityManagerFactory();
  closeEntityManagerFactory();
  try {
    emf.getPersistenceUnitUtil();
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
}","public void testGetPersistenceUnitUtilOnCloseEMF(){
  EntityManagerFactory emf=getEntityManagerFactory();
  emf.close();
  try {
    emf.getPersistenceUnitUtil();
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
}"
63262,"public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  fullSuite.addTest(StoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(ConverterTestSuite.suite());
  fullSuite.addTest(CriteriaQueryTestSuite.suite());
  fullSuite.addTest(CriteriaQueryMetamodelTestSuite.suite());
  fullSuite.addTest(DDLTestSuite.suite());
  fullSuite.addTest(ForeignKeyTestSuite.suite());
  fullSuite.addTest(IndexTestSuite.suite());
  fullSuite.addTest(EntityManagerFactoryTestSuite.suite());
  fullSuite.addTest(EntityGraphTestSuite.suite());
  fullSuite.addTest(QueryTestSuite.suite());
  fullSuite.addTest(EntityManagerTestSuite.suite());
  fullSuite.addTest(XMLNamedStoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(XMLConverterTestSuite.suite());
  fullSuite.addTest(XMLForeignKeyTestSuite.suite());
  fullSuite.addTest(XMLIndexTestSuite.suite());
  fullSuite.addTest(XMLEntityGraphTestSuite.suite());
  fullSuite.addTest(WeaverTestSuite.suite());
  return fullSuite;
}","public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  fullSuite.addTest(StoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(ConverterTestSuite.suite());
  fullSuite.addTest(CriteriaQueryTestSuite.suite());
  fullSuite.addTest(CriteriaQueryMetamodelTestSuite.suite());
  fullSuite.addTest(DDLTestSuite.suite());
  fullSuite.addTest(ForeignKeyTestSuite.suite());
  fullSuite.addTest(IndexTestSuite.suite());
  fullSuite.addTest(EntityGraphTestSuite.suite());
  fullSuite.addTest(QueryTestSuite.suite());
  fullSuite.addTest(EntityManagerTestSuite.suite());
  fullSuite.addTest(XMLNamedStoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(XMLConverterTestSuite.suite());
  fullSuite.addTest(XMLForeignKeyTestSuite.suite());
  fullSuite.addTest(XMLIndexTestSuite.suite());
  fullSuite.addTest(XMLEntityGraphTestSuite.suite());
  fullSuite.addTest(WeaverTestSuite.suite());
  fullSuite.addTest(EntityManagerFactoryTestSuite.suite());
  return fullSuite;
}"
63263,"public void testGetPersistenceUnitUtilOnCloseEMF(){
  EntityManagerFactory emf=getEntityManagerFactory();
  closeEntityManagerFactory();
  try {
    emf.getPersistenceUnitUtil();
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
}","public void testGetPersistenceUnitUtilOnCloseEMF(){
  EntityManagerFactory emf=getEntityManagerFactory();
  emf.close();
  try {
    emf.getPersistenceUnitUtil();
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
}"
63264,"public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  fullSuite.addTest(StoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(ConverterTestSuite.suite());
  fullSuite.addTest(CriteriaQueryTestSuite.suite());
  fullSuite.addTest(CriteriaQueryMetamodelTestSuite.suite());
  fullSuite.addTest(DDLTestSuite.suite());
  fullSuite.addTest(ForeignKeyTestSuite.suite());
  fullSuite.addTest(IndexTestSuite.suite());
  fullSuite.addTest(EntityManagerFactoryTestSuite.suite());
  fullSuite.addTest(EntityGraphTestSuite.suite());
  fullSuite.addTest(QueryTestSuite.suite());
  fullSuite.addTest(EntityManagerTestSuite.suite());
  fullSuite.addTest(XMLNamedStoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(XMLConverterTestSuite.suite());
  fullSuite.addTest(XMLForeignKeyTestSuite.suite());
  fullSuite.addTest(XMLIndexTestSuite.suite());
  fullSuite.addTest(XMLEntityGraphTestSuite.suite());
  fullSuite.addTest(AnnotationsTestSuite.suite());
  fullSuite.addTest(MetadataASMFactoryTest.suite());
  return fullSuite;
}","public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  fullSuite.addTest(StoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(ConverterTestSuite.suite());
  fullSuite.addTest(CriteriaQueryTestSuite.suite());
  fullSuite.addTest(CriteriaQueryMetamodelTestSuite.suite());
  fullSuite.addTest(DDLTestSuite.suite());
  fullSuite.addTest(ForeignKeyTestSuite.suite());
  fullSuite.addTest(IndexTestSuite.suite());
  fullSuite.addTest(EntityGraphTestSuite.suite());
  fullSuite.addTest(QueryTestSuite.suite());
  fullSuite.addTest(EntityManagerTestSuite.suite());
  fullSuite.addTest(XMLNamedStoredProcedureQueryTestSuite.suite());
  fullSuite.addTest(XMLConverterTestSuite.suite());
  fullSuite.addTest(XMLForeignKeyTestSuite.suite());
  fullSuite.addTest(XMLIndexTestSuite.suite());
  fullSuite.addTest(XMLEntityGraphTestSuite.suite());
  fullSuite.addTest(AnnotationsTestSuite.suite());
  fullSuite.addTest(MetadataASMFactoryTest.suite());
  fullSuite.addTest(EntityManagerFactoryTestSuite.suite());
  return fullSuite;
}"
63265,"public int compile(String classpath,Object[] javaFiles){
  int jv=JavaSEPlatform.CURRENT.getMajor();
  final String javaVersion=""String_Node_Str"" + jv;
  final String[] args=new String[javaFiles.length + ((jv >= 9) ? 9 : 7)];
  final String javac=getJavaC();
  args[0]=javac;
  args[1]=""String_Node_Str"";
  args[2]=classpath;
  args[3]=""String_Node_Str"";
  args[4]=javaVersion;
  args[5]=""String_Node_Str"";
  args[6]=javaVersion;
  if (""String_Node_Str"".equals(javaVersion)) {
    args[7]=""String_Node_Str"";
    args[8]=""String_Node_Str"";
    System.arraycopy(javaFiles,0,args,9,javaFiles.length);
  }
 else {
    System.arraycopy(javaFiles,0,args,7,javaFiles.length);
  }
  int exitVal=-1;
  try {
    Process proc=Runtime.getRuntime().exec(args);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=br.readLine();
    if (line != null) {
      System.out.println(""String_Node_Str"");
      while (line != null) {
        System.out.println(line);
        if ((line=br.readLine()) == null) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    exitVal=proc.waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return exitVal;
}","public int compile(String classpath,Object[] javaFiles){
  int jv=JavaSEPlatform.CURRENT.getMajor();
  final String javaVersion=""String_Node_Str"" + ((jv >= 9) ? jv : JavaSEPlatform.CURRENT.toString());
  final String[] args=new String[javaFiles.length + ((jv >= 9) ? 9 : 7)];
  final String javac=getJavaC();
  args[0]=javac;
  args[1]=""String_Node_Str"";
  args[2]=classpath;
  args[3]=""String_Node_Str"";
  args[4]=javaVersion;
  args[5]=""String_Node_Str"";
  args[6]=javaVersion;
  if (9 >= jv) {
    args[7]=""String_Node_Str"";
    args[8]=""String_Node_Str"";
    System.arraycopy(javaFiles,0,args,9,javaFiles.length);
  }
 else {
    System.arraycopy(javaFiles,0,args,7,javaFiles.length);
  }
  int exitVal=-1;
  try {
    Process proc=Runtime.getRuntime().exec(args);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=br.readLine();
    if (line != null) {
      System.out.println(""String_Node_Str"");
      while (line != null) {
        System.out.println(line);
        if ((line=br.readLine()) == null) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    exitVal=proc.waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return exitVal;
}"
63266,"/** 
 * Check whether current Java SE is at least (greater or equal) provided platform.
 * @param platform Java SE platform to compare with.
 */
public static boolean atLeast(JavaSEPlatform platform){
  return CURRENT.atLeast(platform);
}","/** 
 * Check whether current Java SE is at least (greater or equal) provided platform.
 * @param platform Java SE platform to compare with.
 */
public static boolean atLeast(JavaSEPlatform platform){
  return CURRENT.gte(platform);
}"
63267,"public int compile(String classpath,Object[] javaFiles){
  final String[] args=new String[javaFiles.length + 7];
  final String javac=getJavaC();
  final String javaVersion=JavaSEPlatform.CURRENT.toString();
  args[0]=javac;
  args[1]=""String_Node_Str"";
  args[2]=classpath;
  args[3]=""String_Node_Str"";
  args[4]=javaVersion;
  args[5]=""String_Node_Str"";
  args[6]=javaVersion;
  System.arraycopy(javaFiles,0,args,7,javaFiles.length);
  int exitVal=-1;
  try {
    Process proc=Runtime.getRuntime().exec(args);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=br.readLine();
    if (line != null) {
      System.out.println(""String_Node_Str"");
      while (line != null) {
        System.out.println(line);
        if ((line=br.readLine()) == null) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    exitVal=proc.waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return exitVal;
}","public int compile(String classpath,Object[] javaFiles){
  int jv=JavaSEPlatform.CURRENT.getMajor();
  final String javaVersion=""String_Node_Str"" + jv;
  final String[] args=new String[javaFiles.length + ((jv >= 9) ? 9 : 7)];
  final String javac=getJavaC();
  args[0]=javac;
  args[1]=""String_Node_Str"";
  args[2]=classpath;
  args[3]=""String_Node_Str"";
  args[4]=javaVersion;
  args[5]=""String_Node_Str"";
  args[6]=javaVersion;
  if (""String_Node_Str"".equals(javaVersion)) {
    args[7]=""String_Node_Str"";
    args[8]=""String_Node_Str"";
    System.arraycopy(javaFiles,0,args,9,javaFiles.length);
  }
 else {
    System.arraycopy(javaFiles,0,args,7,javaFiles.length);
  }
  int exitVal=-1;
  try {
    Process proc=Runtime.getRuntime().exec(args);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=br.readLine();
    if (line != null) {
      System.out.println(""String_Node_Str"");
      while (line != null) {
        System.out.println(line);
        if ((line=br.readLine()) == null) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    exitVal=proc.waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return exitVal;
}"
63268,"/** 
 * Invoke static method of the specified class.
 * @param name Method name.
 * @param c Class containing method to invoke.
 * @param parameterTypes Method parameter array.
 * @param args An array of objects to be passed as arguments to the method call
 * @throws InvocationTargetException If the underlying constructor throws an exception.
 * @throws IllegalArgumentException  If an unwrapping conversion fails.
 * @throws IllegalAccessException    If the underlying field is either inaccessible or final.
 * @throws SecurityException         If a security manager is present and access to the field was denied.
 * @throws NoSuchMethodException     If a field with the specified name is not found.
 */
public static final Object invokeStaticMethod(final String name,final Class c,final Class<?>[] parameterTypes,final Object... args) throws ReflectiveOperationException {
  Method m=c.getDeclaredMethod(name,parameterTypes);
  boolean accessible=m.isAccessible();
  if (!accessible) {
    m.setAccessible(true);
  }
  Object result=m.invoke(null,args);
  if (!accessible) {
    m.setAccessible(accessible);
  }
  return result;
}","/** 
 * Invoke static method of the specified class.
 * @param name Method name.
 * @param c Class containing method to invoke.
 * @param parameterTypes Method parameter array.
 * @param returnType Class to be returned.
 * @param args An array of objects to be passed as arguments to the method call
 * @throws InvocationTargetException If the underlying constructor throws an exception.
 * @throws IllegalArgumentException  If an unwrapping conversion fails.
 * @throws IllegalAccessException    If the underlying field is either inaccessible or final.
 * @throws SecurityException         If a security manager is present and access to the field was denied.
 * @throws NoSuchMethodException     If a field with the specified name is not found.
 */
public static final <T>T invokeStaticMethod(final String name,final Class c,final Class<?>[] parameterTypes,final Class<T> returnType,final Object... args) throws ReflectiveOperationException {
  return returnType.cast(invokeStaticMethod(name,c,parameterTypes,args));
}"
63269,"/** 
 * Invoke a method of the specified class instance.
 * @param name Method name.
 * @param obj Class instance containing method to invoke.
 * @param parameterTypes Method parameter array.
 * @param args An array of objects to be passed as arguments to the method call
 * @throws InvocationTargetException If the underlying constructor throws an exception.
 * @throws IllegalArgumentException  If an unwrapping conversion fails.
 * @throws IllegalAccessException    If the underlying field is either inaccessible or final.
 * @throws SecurityException         If a security manager is present and access to the field was denied.
 * @throws NoSuchMethodException     If a field with the specified name is not found.
 */
public static final Object invokeMethod(final String name,final Object obj,final Class<?>[] parameterTypes,final Object... args) throws ReflectiveOperationException {
  Method m=obj.getClass().getDeclaredMethod(name,parameterTypes);
  boolean accessible=m.isAccessible();
  if (!accessible) {
    m.setAccessible(true);
  }
  Object result=m.invoke(obj,args);
  if (!accessible) {
    m.setAccessible(accessible);
  }
  return result;
}","/** 
 * Invoke a method of the specified class instance.
 * @param name Method name.
 * @param obj Class instance containing method to invoke.
 * @param parameterTypes Method parameter array.
 * @param returnType Class to be returned.
 * @param args An array of objects to be passed as arguments to the method call
 * @throws InvocationTargetException If the underlying constructor throws an exception.
 * @throws IllegalArgumentException  If an unwrapping conversion fails.
 * @throws IllegalAccessException    If the underlying field is either inaccessible or final.
 * @throws SecurityException         If a security manager is present and access to the field was denied.
 * @throws NoSuchMethodException     If a field with the specified name is not found.
 */
public static final <T>T invokeMethod(final String name,final Object obj,final Class<?>[] parameterTypes,final Class<T> returnType,final Object... args) throws ReflectiveOperationException {
  return returnType.cast(invokeMethod(name,obj,parameterTypes,args));
}"
63270,"public static TestSuite getDataTypeComparisonTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.tests.helper.JavaUtilTest.class);
  suite.addTest(new CompareArrayContentTest());
  suite.addTest(new CompareArrayLengthTest());
  suite.addTest(new CompareCharArrayLengthTest());
  suite.addTest(new CompareCharArrayContentTest());
  suite.addTest(new CheckAreVectorTypesAssignableWithNullVectorTest());
  suite.addTest(new CheckAreVectorTypesAssignableTest());
  suite.addTest(new CheckCompareByteArraysWithDifferentElementsTest());
  suite.addTest(new CheckCompareBigDecimalsTest());
  suite.addTest(new CheckClassIsSubclassWithNullSuperclassTest());
  suite.addTest(new BasicTest());
  suite.addTest(new TimeFromDateTest());
  suite.addTest(new TimeFromLongTest());
  suite.addTest(new TimeFromStringTest());
  suite.addTest(new TimestampFromDateTest());
  suite.addTest(new TimestampFromLongTest());
  suite.addTest(new TimestampFromStringTest());
  return suite;
}","public static TestSuite getDataTypeComparisonTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.tests.helper.JavaUtilTest.class);
  suite.addTestSuite(org.eclipse.persistence.testing.tests.helper.JavaVersionTest.class);
  suite.addTest(new CompareArrayContentTest());
  suite.addTest(new CompareArrayLengthTest());
  suite.addTest(new CompareCharArrayLengthTest());
  suite.addTest(new CompareCharArrayContentTest());
  suite.addTest(new CheckAreVectorTypesAssignableWithNullVectorTest());
  suite.addTest(new CheckAreVectorTypesAssignableTest());
  suite.addTest(new CheckCompareByteArraysWithDifferentElementsTest());
  suite.addTest(new CheckCompareBigDecimalsTest());
  suite.addTest(new CheckClassIsSubclassWithNullSuperclassTest());
  suite.addTest(new BasicTest());
  suite.addTest(new TimeFromDateTest());
  suite.addTest(new TimeFromLongTest());
  suite.addTest(new TimeFromStringTest());
  suite.addTest(new TimestampFromDateTest());
  suite.addTest(new TimestampFromLongTest());
  suite.addTest(new TimestampFromStringTest());
  return suite;
}"
63271,"/** 
 * Test major and minor version numbers pairs to <code>JavaSEPlatform</code> conversion.
 */
@Test public void testMajorMinorToPlatform(){
  int[][] valid={{1,1},{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{9,0}};
  int[][] invalid={{0,0},{0,1},{0,3},{0,5},{0,7},{0,9},{1,0},{2,0},{2,1},{2,2},{3,0},{4,0},{1,10}};
  for (  int[] version : valid) {
    int major=version[0];
    int minor=version[1];
    JavaSEPlatform platform=JavaSEPlatform.toValue(major,minor);
    assertNotNull(""String_Node_Str"" + ""String_Node_Str"",platform);
    assertTrue(""String_Node_Str"" + ""String_Node_Str"",major == platform.getMajor() && minor == platform.getMinor());
  }
  for (  int[] version : invalid) {
    int major=version[0];
    int minor=version[1];
    JavaSEPlatform platform=JavaSEPlatform.toValue(major,minor);
    assertNull(""String_Node_Str"" + ""String_Node_Str"",platform);
  }
}","/** 
 * Test major and minor version numbers pairs to <code>JavaSEPlatform</code> conversion.
 */
@Test public void testMajorMinorToPlatform(){
  for (  int[] version : VALID) {
    int major=version[0];
    int minor=version[1];
    JavaSEPlatform platform=JavaSEPlatform.toValue(major,minor);
    assertNotNull(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(major) + ""String_Node_Str""+ Integer.toString(minor)+ ""String_Node_Str"",platform);
    int[] result=resultMapping(version);
    assertTrue(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(major) + ""String_Node_Str""+ Integer.toString(minor)+ ""String_Node_Str"",result[0] == platform.getMajor() && result[1] == platform.getMinor());
  }
  for (  int[] version : INVALID) {
    int major=version[0];
    int minor=version[1];
    JavaSEPlatform platform=JavaSEPlatform.toValue(major,minor);
    assertTrue(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(major) + ""String_Node_Str""+ Integer.toString(minor)+ ""String_Node_Str"",LATEST.getMajor() == platform.getMajor() && LATEST.getMinor() == platform.getMinor());
  }
}"
63272,"/** 
 * Test   {@link String} with major and minor version numbers pairsto <code>JavaSEPlatform</code> conversion.
 */
@Test public void testStringToPlatform(){
  int[][] valid={{1,1},{1,2},{1,3},{1,4},{1,5},{1,6},{1,7},{1,8},{1,9},{9,0}};
  int[][] invalid={{0,0},{0,1},{0,3},{0,5},{0,7},{0,9},{1,0},{2,0},{2,1},{2,2},{3,0},{4,0},{1,10}};
  for (  int[] version : valid) {
    int major=version[0];
    int minor=version[1];
    String versionString=JavaSEPlatform.versionString(major,minor);
    JavaSEPlatform platform=JavaSEPlatform.toValue(versionString);
    assertNotNull(""String_Node_Str"" + ""String_Node_Str"",platform);
    assertTrue(""String_Node_Str"" + ""String_Node_Str"",major == platform.getMajor() && minor == platform.getMinor());
  }
  for (  int[] version : invalid) {
    int major=version[0];
    int minor=version[1];
    String versionString=JavaSEPlatform.versionString(major,minor);
    JavaSEPlatform platform=JavaSEPlatform.toValue(major,minor);
    assertNull(""String_Node_Str"" + ""String_Node_Str"",platform);
  }
}","/** 
 * Test   {@link String} with major and minor version numbers pairsto <code>JavaSEPlatform</code> conversion.
 */
@Test public void testStringToPlatform(){
  for (  int[] version : VALID) {
    int major=version[0];
    int minor=version[1];
    String versionString=JavaSEPlatform.versionString(major,minor);
    JavaSEPlatform platform=JavaSEPlatform.toValue(versionString);
    assertNotNull(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(major) + ""String_Node_Str""+ Integer.toString(minor)+ ""String_Node_Str"",platform);
    int[] result=resultMapping(version);
    assertTrue(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(major) + ""String_Node_Str""+ Integer.toString(minor)+ ""String_Node_Str"",result[0] == platform.getMajor() && result[1] == platform.getMinor());
  }
  for (  int[] version : INVALID) {
    int major=version[0];
    int minor=version[1];
    String versionString=JavaSEPlatform.versionString(major,minor);
    JavaSEPlatform platform=JavaSEPlatform.toValue(major,minor);
    assertTrue(""String_Node_Str"" + ""String_Node_Str"" + Integer.toString(major) + ""String_Node_Str""+ Integer.toString(minor)+ ""String_Node_Str"",LATEST.getMajor() == platform.getMajor() && LATEST.getMinor() == platform.getMinor());
  }
}"
63273,"public int compile(String classpath,Object[] javaFiles){
  int jv=JavaSEPlatform.CURRENT.getMajor();
  final String javaVersion=""String_Node_Str"" + ((jv >= 9) ? jv : JavaSEPlatform.CURRENT.toString());
  final String[] args=new String[javaFiles.length + ((jv >= 9) ? 9 : 7)];
  final String javac=getJavaC();
  args[0]=javac;
  args[1]=""String_Node_Str"";
  args[2]=classpath;
  args[3]=""String_Node_Str"";
  args[4]=javaVersion;
  args[5]=""String_Node_Str"";
  args[6]=javaVersion;
  if (9 >= jv) {
    args[7]=""String_Node_Str"";
    args[8]=""String_Node_Str"";
    System.arraycopy(javaFiles,0,args,9,javaFiles.length);
  }
 else {
    System.arraycopy(javaFiles,0,args,7,javaFiles.length);
  }
  int exitVal=-1;
  try {
    Process proc=Runtime.getRuntime().exec(args);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=br.readLine();
    if (line != null) {
      System.out.println(""String_Node_Str"");
      while (line != null) {
        System.out.println(line);
        if ((line=br.readLine()) == null) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    exitVal=proc.waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return exitVal;
}","public int compile(String classpath,Object[] javaFiles){
  int jv=JavaSEPlatform.CURRENT.getMajor();
  final String javaVersion=""String_Node_Str"" + ((jv >= 9) ? jv : JavaSEPlatform.CURRENT.toString());
  final String[] args=new String[javaFiles.length + ((jv >= 9) ? 9 : 7)];
  final String javac=getJavaC();
  args[0]=javac;
  args[1]=""String_Node_Str"";
  args[2]=classpath;
  args[3]=""String_Node_Str"";
  args[4]=javaVersion;
  args[5]=""String_Node_Str"";
  args[6]=javaVersion;
  if (jv >= 9) {
    args[7]=""String_Node_Str"";
    args[8]=""String_Node_Str"";
    System.arraycopy(javaFiles,0,args,9,javaFiles.length);
  }
 else {
    System.arraycopy(javaFiles,0,args,7,javaFiles.length);
  }
  int exitVal=-1;
  try {
    Process proc=Runtime.getRuntime().exec(args);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=br.readLine();
    if (line != null) {
      System.out.println(""String_Node_Str"");
      while (line != null) {
        System.out.println(line);
        if ((line=br.readLine()) == null) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    exitVal=proc.waitFor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return exitVal;
}"
63274,"/** 
 * Invoke   {@code Runtime.Version} method with given name ({@code major} or {@code minor}) to retrieve version numbers.
 * @param vClass {@code Runtime.Version} class.
 * @param vObj {@code Runtime.Version} class instance containing JDK version information.
 * @param name name of {@code Runtime.Version} instance method to invoke.
 */
private static Integer getRuntimeVersionNumber(final Object vObj,final String name){
  try {
    final Method m=vObj.getClass().getMethod(name);
    return (Integer)m.invoke(vObj);
  }
 catch (  ReflectiveOperationException e) {
    AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new String[]{RUNTIME_VERSION_METHOD_NAME,e.getClass().getName()});
  }
  return null;
}","/** 
 * Invoke   {@code Runtime.Version} method with given name ({@code major} or {@code minor}) to retrieve version numbers.
 * @param vClass {@code Runtime.Version} class.
 * @param vObj {@code Runtime.Version} class instance containing JDK version information.
 * @param name name of {@code Runtime.Version} instance method to invoke.
 */
private static Integer getRuntimeVersionNumber(final Object vObj,final String name){
  try {
    final Method m=vObj.getClass().getMethod(name);
    return (Integer)m.invoke(vObj);
  }
 catch (  ReflectiveOperationException e) {
    throw new IllegalStateException(e);
  }
}"
63275,"/** 
 * Invoke   {@code Runtime#version()} method to retrieve {@code Runtime.Version} instance.
 * @return {@code Runtime.Version} instance for JDK 9 and later or {@code null} otherwise.
 */
private static Object runtimeVersionObject(){
  try {
    final Method m=Runtime.class.getMethod(RUNTIME_VERSION_METHOD_NAME);
    return m.invoke(null);
  }
 catch (  NoSuchMethodException e) {
    AbstractSessionLog.getLog().log(SessionLog.FINEST,""String_Node_Str"",new String[]{RUNTIME_VERSION_METHOD_NAME,Runtime.class.getName()});
  }
catch (  ReflectiveOperationException e) {
    AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new String[]{RUNTIME_VERSION_METHOD_NAME,e.getClass().getName()});
  }
  return null;
}","/** 
 * Invoke   {@code Runtime#version()} method to retrieve {@code Runtime.Version} instance.
 * @return {@code Runtime.Version} instance for JDK 9 and later or {@code null} otherwise.
 */
private static Object runtimeVersionObject(){
  try {
    final Method m=Runtime.class.getMethod(RUNTIME_VERSION_METHOD_NAME);
    return m.invoke(null);
  }
 catch (  NoSuchMethodException e) {
    return null;
  }
catch (  ReflectiveOperationException e) {
    throw new IllegalStateException(e);
  }
}"
63276,"/** 
 * Drop table constraints
 */
public void dropTableConstraints(Session session){
  if (!SchemaManager.FAST_TABLE_CREATOR) {
    if (session.getLogin().getPlatform().isOracle()) {
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
    }
    try {
      if (session.getPlatform().supportsUniqueKeyConstraints() && !session.getPlatform().requiresUniqueConstraintCreationOnTableCreate()) {
        if (session.getPlatform().isMySQL()) {
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
        }
 else {
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
        }
      }
    }
 catch (    Exception ignore) {
    }
  }
}","/** 
 * Drop table constraints
 */
public void dropTableConstraints(Session session){
  if (!SchemaManager.FAST_TABLE_CREATOR) {
    if (session.getLogin().getPlatform().isOracle()) {
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      try {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
    }
    try {
      if (session.getPlatform().supportsUniqueKeyConstraints() && !session.getPlatform().requiresUniqueConstraintCreationOnTableCreate()) {
        if (!session.getPlatform().isMySQL()) {
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
          session.executeNonSelectingSQL(""String_Node_Str"");
        }
      }
    }
 catch (    Exception ignore) {
    }
  }
}"
63277,"/** 
 * Recreate the insurance database.
 */
public void createTables(DatabaseSession session){
  if (!SchemaManager.FAST_TABLE_CREATOR) {
    try {
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
    }
  }
  new InsuranceTableCreator().replaceTables(session);
}","/** 
 * Recreate the insurance database.
 */
public void createTables(DatabaseSession session){
  if (!SchemaManager.FAST_TABLE_CREATOR) {
    try {
      if (session.getPlatform().isMySQL()) {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
    }
 catch (    Exception e) {
      session.getSessionLog().logThrowable(SessionLog.WARNING,e);
    }
 finally {
      if (session.getPlatform().isMySQL()) {
        session.executeNonSelectingCall(new SQLCall(""String_Node_Str""));
      }
    }
  }
  new InsuranceTableCreator().replaceTables(session);
}"
63278,"private void validateOnCallbackEvent(DescriptorEvent event,String callbackEventName,Class[] validationGroup){
  Object source=event.getSource();
  Validator validator=getValidator(event);
  boolean isBeanConstrained=validator.getConstraintsForClass(source.getClass()).isBeanConstrained();
  boolean noOptimization=""String_Node_Str"".equalsIgnoreCase((String)event.getSession().getProperty(PersistenceUnitProperties.BEAN_VALIDATION_NO_OPTIMISATION));
  boolean shouldValidate=noOptimization || isBeanConstrained;
  if (shouldValidate) {
    Set<ConstraintViolation<Object>> constraintViolations=validate(source,validationGroup,validator);
    if (constraintViolations.size() > 0) {
      throw new ConstraintViolationException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{callbackEventName,source.getClass().getName()}),(Set<ConstraintViolation<?>>)(Object)constraintViolations);
    }
  }
}","private void validateOnCallbackEvent(DescriptorEvent event,String callbackEventName,Class[] validationGroup){
  Object source=event.getSource();
  Validator validator=getValidator(event);
  boolean isBeanConstrained=isBeanConstrained(source,validator);
  boolean noOptimization=""String_Node_Str"".equalsIgnoreCase((String)event.getSession().getProperty(PersistenceUnitProperties.BEAN_VALIDATION_NO_OPTIMISATION));
  boolean shouldValidate=noOptimization || isBeanConstrained;
  if (shouldValidate) {
    Set<ConstraintViolation<Object>> constraintViolations=validate(source,validationGroup,validator);
    if (constraintViolations.size() > 0) {
      throw new ConstraintViolationException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{callbackEventName,source.getClass().getName()}),(Set<ConstraintViolation<?>>)(Object)constraintViolations);
    }
  }
}"
63279,"@Before public void setUp() throws Exception {
  classLoader=new ValidationClassLoader(currentThread.getContextClassLoader());
  currentThread.setContextClassLoader(classLoader);
}","@Before public void setUp() throws Exception {
  classLoader=new ValidationClassLoader(currentThread.getContextClassLoader());
  currentThread.setContextClassLoader(classLoader);
  resetBeanValidation();
}"
63280,"private Boolean checkClassLoader(String className){
  try {
    ClassLoader loader=WebSpherePlatformDetector.class.getClassLoader();
    Class<?> cls=loader.loadClass(LIBERTY_PROFILE_INFO_INT);
    if (cls != null) {
      return Boolean.TRUE;
    }
  }
 catch (  Throwable t) {
  }
  return Boolean.FALSE;
}","private Boolean checkClassLoader(String className){
  try {
    ClassLoader loader=WebSpherePlatformDetector.class.getClassLoader();
    Class<?> cls=loader.loadClass(className);
    if (cls != null) {
      return Boolean.TRUE;
    }
  }
 catch (  Throwable t) {
  }
  return Boolean.FALSE;
}"
63281,"@Override public void addJoin(FromImpl from){
  if (this.joins == null) {
    this.joins=new HashSet<FromImpl>();
  }
  this.joins.add(from);
}","@Override public void addJoin(FromImpl from){
  if (this.joins == null) {
    this.joins=new LinkedHashSet<FromImpl>();
  }
  this.joins.add(from);
}"
63282,"public static Test suiteSpring(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suiteSpring(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63283,"private void validateOnCallbackEvent(DescriptorEvent event,String callbackEventName,Class[] validationGroup){
  Object source=event.getSource();
  Validator validator=getValidator(event);
  boolean isBeanConstrained=isBeanConstrained(source,validator);
  boolean noOptimization=""String_Node_Str"".equalsIgnoreCase((String)event.getSession().getProperty(PersistenceUnitProperties.BEAN_VALIDATION_NO_OPTIMISATION));
  boolean shouldValidate=noOptimization || isBeanConstrained;
  if (shouldValidate) {
    Set<ConstraintViolation<Object>> constraintViolations=validate(source,validationGroup,validator);
    if (constraintViolations.size() > 0) {
      throw new ConstraintViolationException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{callbackEventName,source.getClass().getName()}),(Set<ConstraintViolation<?>>)(Object)constraintViolations);
    }
  }
}","private void validateOnCallbackEvent(DescriptorEvent event,String callbackEventName,Class[] validationGroup){
  Object source=event.getSource();
  Validator validator=getValidator(event);
  boolean isBeanConstrained=validator.getConstraintsForClass(source.getClass()).isBeanConstrained();
  boolean noOptimization=""String_Node_Str"".equalsIgnoreCase((String)event.getSession().getProperty(PersistenceUnitProperties.BEAN_VALIDATION_NO_OPTIMISATION));
  boolean shouldValidate=noOptimization || isBeanConstrained;
  if (shouldValidate) {
    Set<ConstraintViolation<Object>> constraintViolations=validate(source,validationGroup,validator);
    if (constraintViolations.size() > 0) {
      throw new ConstraintViolationException(ExceptionLocalization.buildMessage(""String_Node_Str"",new Object[]{callbackEventName,source.getClass().getName()}),(Set<ConstraintViolation<?>>)(Object)constraintViolations);
    }
  }
}"
63284,"public ClassDescriptor buildWrappedSpatialDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(org.eclipse.persistence.testing.models.spatial.jgeometry.wrapped.WrappedSpatial.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.useRemoteSoftCacheWeakIdentityMap();
  descriptor.setRemoteIdentityMapSize(100);
  descriptor.setAlias(""String_Node_Str"");
  descriptor.setAmendmentClass(org.eclipse.persistence.testing.models.spatial.jgeometry.wrapped.TopLinkAfterLoad.class);
  descriptor.setAmendmentMethodName(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  ReadAllQuery namedQuery0=new ReadAllQuery(org.eclipse.persistence.testing.models.spatial.jgeometry.wrapped.WrappedSpatial.class);
  namedQuery0.setName(""String_Node_Str"");
  namedQuery0.setQueryTimeout(0);
  namedQuery0.setCacheUsage(ObjectLevelReadQuery.CheckCacheByPrimaryKey);
  namedQuery0.setLockMode(ObjectLevelReadQuery.NO_LOCK);
  descriptor.getQueryManager().addQuery(""String_Node_Str"",namedQuery0);
  descriptor.addDirectQueryKey(""String_Node_Str"",""String_Node_Str"");
  descriptor.addDirectQueryKey(""String_Node_Str"",""String_Node_Str"");
  DirectToFieldMapping idMapping=new DirectToFieldMapping();
  idMapping.setAttributeName(""String_Node_Str"");
  idMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(idMapping);
  DirectToFieldMapping geometryMapping=new DirectToFieldMapping();
  geometryMapping.setAttributeName(""String_Node_Str"");
  geometryMapping.setFieldName(""String_Node_Str"");
  geometryMapping.setFieldType(java.sql.Types.STRUCT);
  descriptor.addMapping(geometryMapping);
  descriptor.applyAmendmentMethod();
  return descriptor;
}","public ClassDescriptor buildWrappedSpatialDescriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(org.eclipse.persistence.testing.models.spatial.jgeometry.wrapped.WrappedSpatial.class);
  descriptor.addTableName(""String_Node_Str"");
  descriptor.addPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.useSoftCacheWeakIdentityMap();
  descriptor.setIdentityMapSize(100);
  descriptor.useRemoteSoftCacheWeakIdentityMap();
  descriptor.setRemoteIdentityMapSize(100);
  descriptor.setAlias(""String_Node_Str"");
  descriptor.setAmendmentClass(org.eclipse.persistence.testing.models.spatial.jgeometry.wrapped.TopLinkAfterLoad.class);
  descriptor.setAmendmentMethodName(""String_Node_Str"");
  descriptor.getQueryManager().checkCacheForDoesExist();
  ReadAllQuery namedQuery0=new ReadAllQuery(org.eclipse.persistence.testing.models.spatial.jgeometry.wrapped.WrappedSpatial.class);
  namedQuery0.setName(""String_Node_Str"");
  namedQuery0.setQueryTimeout(0);
  namedQuery0.setCacheUsage(ObjectLevelReadQuery.CheckCacheByPrimaryKey);
  namedQuery0.setLockMode(ObjectLevelReadQuery.NO_LOCK);
  descriptor.getQueryManager().addQuery(""String_Node_Str"",namedQuery0);
  descriptor.addDirectQueryKey(""String_Node_Str"",""String_Node_Str"");
  descriptor.addDirectQueryKey(""String_Node_Str"",""String_Node_Str"");
  DirectToFieldMapping idMapping=new DirectToFieldMapping();
  idMapping.setAttributeName(""String_Node_Str"");
  idMapping.setFieldName(""String_Node_Str"");
  descriptor.addMapping(idMapping);
  DirectToFieldMapping geometryMapping=new DirectToFieldMapping();
  geometryMapping.setAttributeName(""String_Node_Str"");
  ObjectRelationalDatabaseField f=new ObjectRelationalDatabaseField(""String_Node_Str"");
  geometryMapping.setField(f);
  geometryMapping.setFieldType(java.sql.Types.STRUCT);
  descriptor.addMapping(geometryMapping);
  descriptor.applyAmendmentMethod();
  return descriptor;
}"
63285,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  List<String> tests=new ArrayList<String>();
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
  }
  Collections.sort(tests);
  for (  String test : tests) {
    suite.addTest(new EntityManagerJUnitTestSuite(test));
  }
  if (!isJPA10()) {
    suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  List<String> tests=new ArrayList<String>();
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
  }
  Collections.sort(tests);
  for (  String test : tests) {
    suite.addTest(new EntityManagerJUnitTestSuite(test));
  }
  if (!isJPA10()) {
    suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  }
  return suite;
}"
63286,"/** 
 * Determine the load state of an entity belonging to the persistence unit. This method can be used to determine the load state of an entity passed as a reference. An entity is considered loaded if all attributes for which FetchType EAGER has been specified have been loaded. The isLoaded(Object, String) method should be used to determine the load state of an attribute. Not doing so might lead to unintended loading of state.
 * @param entity whose load state is to be determined
 * @return false if the entity has not been loaded, else true.
 */
public boolean isLoaded(Object entity){
  if (EntityManagerFactoryImpl.isLoaded(entity,session).equals(Boolean.TRUE)) {
    return true;
  }
  return false;
}","/** 
 * Determine the load state of an entity belonging to the persistence unit. This method can be used to determine the load state of an entity passed as a reference. An entity is considered loaded if all attributes for which FetchType EAGER has been specified have been loaded. The isLoaded(Object, String) method should be used to determine the load state of an attribute. Not doing so might lead to unintended loading of state.
 * @param entity whose load state is to be determined
 * @return false if the entity has not been loaded, else true.
 */
public boolean isLoaded(Object entity){
  if (Boolean.TRUE.equals(EntityManagerFactoryImpl.isLoaded(entity,session))) {
    return true;
  }
  return false;
}"
63287,"/** 
 * Convert the given object to the appropriate type by invoking the appropriate ConversionManager method.
 * @param sourceObject - will always be a string if read from XML
 * @param javaClass - the class that the object must be converted to
 * @param schemaTypeQName - the XML schema that the object is being converted from
 * @return - the newly converted object
 */
@Override public Object convertObject(Object sourceObject,Class javaClass,QName schemaTypeQName) throws ConversionException {
  if (schemaTypeQName == null) {
    return convertObject(sourceObject,javaClass);
  }
  if (sourceObject == null) {
    return super.convertObject(null,javaClass);
  }
 else   if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == CoreClassConstants.OBJECT)) {
    return sourceObject;
  }
 else   if ((javaClass == CoreClassConstants.CALENDAR) || (javaClass == CoreClassConstants.GREGORIAN_CALENDAR)) {
    return convertObjectToCalendar(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.ABYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteObjectArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteObjectArray(sourceObject);
    }
  }
 else   if (javaClass == CoreClassConstants.APBYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteArray(sourceObject);
    }
  }
 else   if ((javaClass == CoreClassConstants.List_Class) && (sourceObject instanceof String)) {
    return convertStringToList(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof List)) {
    return convertListToString(sourceObject,schemaTypeQName);
  }
 else   if (sourceObject instanceof byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromBytes((byte[])sourceObject);
    }
    return Helper.buildHexStringFromBytes((byte[])sourceObject);
  }
 else   if (sourceObject instanceof Byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromObjectBytes((Byte[])sourceObject);
    }
    return buildHexStringFromObjectBytes((Byte[])sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.UTILDATE)) {
    return convertObjectToUtilDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.SQLDATE) {
    return convertObjectToSQLDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIME) {
    return convertObjectToSQLTime(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIMESTAMP) {
    return convertObjectToTimestamp(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == Constants.QNAME_CLASS) && (sourceObject != null)) {
    return convertObjectToQName(sourceObject);
  }
 else   if (javaClass == CoreClassConstants.STRING) {
    return convertObjectToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == java.net.URI.class)) {
    return convertObjectToURI(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.XML_GREGORIAN_CALENDAR)) {
    return convertObjectToXMLGregorianCalendar(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.DURATION)) {
    return convertObjectToDuration(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.CHAR)) {
    return convertObjectToChar(sourceObject,schemaTypeQName);
  }
 else {
    try {
      return super.convertObject(sourceObject,javaClass);
    }
 catch (    ConversionException ex) {
      if (sourceObject.getClass() == CoreClassConstants.STRING) {
        return super.convertObject(((String)sourceObject).trim(),javaClass);
      }
      throw ex;
    }
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}","/** 
 * Convert the given object to the appropriate type by invoking the appropriate ConversionManager method.
 * @param sourceObject - will always be a string if read from XML
 * @param javaClass - the class that the object must be converted to
 * @param schemaTypeQName - the XML schema that the object is being converted from
 * @return - the newly converted object
 */
@Override public Object convertObject(Object sourceObject,Class javaClass,QName schemaTypeQName) throws ConversionException {
  if (schemaTypeQName == null) {
    return convertObject(sourceObject,javaClass);
  }
  if (sourceObject == null) {
    return super.convertObject(null,javaClass);
  }
 else   if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == CoreClassConstants.OBJECT)) {
    return sourceObject;
  }
 else   if ((javaClass == CoreClassConstants.CALENDAR) || (javaClass == CoreClassConstants.GREGORIAN_CALENDAR)) {
    return convertObjectToCalendar(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.ABYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteObjectArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteObjectArray(sourceObject);
    }
  }
 else   if (javaClass == CoreClassConstants.APBYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteArray(sourceObject);
    }
  }
 else   if ((javaClass == CoreClassConstants.List_Class) && (sourceObject instanceof String)) {
    return convertStringToList(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof List)) {
    return convertListToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof Object[])) {
    return convertArrayToString((Object[])sourceObject,schemaTypeQName);
  }
 else   if (sourceObject instanceof byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromBytes((byte[])sourceObject);
    }
    return Helper.buildHexStringFromBytes((byte[])sourceObject);
  }
 else   if (sourceObject instanceof Byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromObjectBytes((Byte[])sourceObject);
    }
    return buildHexStringFromObjectBytes((Byte[])sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.UTILDATE)) {
    return convertObjectToUtilDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.SQLDATE) {
    return convertObjectToSQLDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIME) {
    return convertObjectToSQLTime(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIMESTAMP) {
    return convertObjectToTimestamp(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == Constants.QNAME_CLASS) && (sourceObject != null)) {
    return convertObjectToQName(sourceObject);
  }
 else   if (javaClass == CoreClassConstants.STRING) {
    return convertObjectToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == java.net.URI.class)) {
    return convertObjectToURI(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.XML_GREGORIAN_CALENDAR)) {
    return convertObjectToXMLGregorianCalendar(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.DURATION)) {
    return convertObjectToDuration(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.CHAR)) {
    return convertObjectToChar(sourceObject,schemaTypeQName);
  }
 else {
    try {
      return super.convertObject(sourceObject,javaClass);
    }
 catch (    ConversionException ex) {
      if (sourceObject.getClass() == CoreClassConstants.STRING) {
        return super.convertObject(((String)sourceObject).trim(),javaClass);
      }
      throw ex;
    }
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}"
63288,"/** 
 * INTERNAL: Create an instance of the Id class or value from the object.
 */
public Object createPrimaryKeyInstance(Object object,AbstractSession session){
  KeyElementAccessor[] pkElementArray=this.getKeyClassFields();
  ObjectBuilder builder=getDescriptor().getObjectBuilder();
  if (pkElementArray.length == 1 && pkElementArray[0] instanceof KeyIsElementAccessor) {
    DatabaseMapping mapping=builder.getMappingForAttributeName(pkElementArray[0].getAttributeName());
    Object fieldValue=mapping.getRealAttributeValueFromObject(object,session);
    if (mapping.isObjectReferenceMapping()) {
      fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
    }
    return fieldValue;
  }
  Object keyInstance=getPKClassInstance();
  Set<ObjectReferenceMapping> usedObjectReferenceMappings=new HashSet<ObjectReferenceMapping>();
  for (int index=0; index < pkElementArray.length; index++) {
    Object keyObj=object;
    KeyElementAccessor accessor=pkElementArray[index];
    DatabaseField field=accessor.getDatabaseField();
    DatabaseMapping mapping=builder.getMappingForField(field);
    if (!mapping.isObjectReferenceMapping() || !usedObjectReferenceMappings.contains(mapping)) {
      while (mapping.isAggregateObjectMapping()) {
        keyObj=mapping.getRealAttributeValueFromObject(keyObj,session);
        mapping=mapping.getReferenceDescriptor().getObjectBuilder().getMappingForField(field);
      }
      Object fieldValue=mapping.getRealAttributeValueFromObject(keyObj,session);
      if (mapping.isObjectReferenceMapping()) {
        fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
        usedObjectReferenceMappings.add((ObjectReferenceMapping)mapping);
      }
      accessor.setValue(keyInstance,fieldValue);
    }
  }
  return keyInstance;
}","/** 
 * INTERNAL: Create an instance of the Id class or value from the object.
 */
public Object createPrimaryKeyInstance(Object object,AbstractSession session){
  KeyElementAccessor[] pkElementArray=this.getKeyClassFields();
  ObjectBuilder builder=getDescriptor().getObjectBuilder();
  if (pkElementArray.length == 1 && pkElementArray[0] instanceof KeyIsElementAccessor) {
    DatabaseMapping mapping=builder.getMappingForAttributeName(pkElementArray[0].getAttributeName());
    Object fieldValue=mapping.getRealAttributeValueFromObject(object,session);
    if (mapping.isObjectReferenceMapping()) {
      fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
    }
    return fieldValue;
  }
  Object keyInstance=getPKClassInstance();
  Set<ObjectReferenceMapping> usedObjectReferenceMappings=new HashSet<ObjectReferenceMapping>();
  for (int index=0; index < pkElementArray.length; index++) {
    Object keyObj=object;
    KeyElementAccessor accessor=pkElementArray[index];
    DatabaseField field=accessor.getDatabaseField();
    DatabaseMapping mapping=builder.getMappingForField(field);
    Object nestedKeyInstance=keyInstance;
    if (!mapping.isObjectReferenceMapping() || !usedObjectReferenceMappings.contains(mapping)) {
      while (mapping.isAggregateObjectMapping()) {
        keyObj=mapping.getRealAttributeValueFromObject(keyObj,session);
        mapping=mapping.getReferenceDescriptor().getObjectBuilder().getMappingForField(field);
        if (mapping.isAggregateMapping()) {
          Object nestedObject=mapping.getRealAttributeValueFromObject(nestedKeyInstance,session);
          if (nestedObject == null) {
            nestedObject=getClassInstance(mapping.getReferenceDescriptor().getJavaClass());
          }
          mapping.setRealAttributeValueInObject(nestedKeyInstance,nestedObject);
          nestedKeyInstance=nestedObject;
        }
      }
      Object fieldValue=mapping.getRealAttributeValueFromObject(keyObj,session);
      if (mapping.isObjectReferenceMapping()) {
        fieldValue=mapping.getReferenceDescriptor().getCMPPolicy().createPrimaryKeyInstance(fieldValue,session);
        usedObjectReferenceMappings.add((ObjectReferenceMapping)mapping);
      }
      accessor.setValue(nestedKeyInstance,fieldValue);
    }
  }
  return keyInstance;
}"
63289,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedCompositePKJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63290,"/** 
 * Extract primary key attribute values from the domainObject.
 */
public Object extractPrimaryKeyFromObject(Object domainObject,AbstractSession session,boolean shouldReturnNullIfNull){
  if (domainObject == null) {
    return null;
  }
  boolean isPersistenceEntity=(domainObject instanceof PersistenceEntity) && (!isXMLObjectBuilder());
  if (isPersistenceEntity) {
    Object primaryKey=((PersistenceEntity)domainObject)._persistence_getId();
    if (primaryKey != null) {
      return primaryKey;
    }
  }
  ClassDescriptor descriptor=this.descriptor;
  boolean isNull=false;
  if (descriptor.hasInheritance() && (domainObject.getClass() != descriptor.getJavaClass()) && (!domainObject.getClass().getSuperclass().equals(descriptor.getJavaClass()))) {
    return session.getDescriptor(domainObject).getObjectBuilder().extractPrimaryKeyFromObject(domainObject,session,shouldReturnNullIfNull);
  }
  CacheKeyType cacheKeyType=descriptor.getCachePolicy().getCacheKeyType();
  List<DatabaseField> primaryKeyFields=descriptor.getPrimaryKeyFields();
  Object[] primaryKeyValues=null;
  if (cacheKeyType != CacheKeyType.ID_VALUE) {
    primaryKeyValues=new Object[primaryKeyFields.size()];
  }
  List<DatabaseMapping> mappings=getPrimaryKeyMappings();
  int size=mappings.size();
  if (descriptor.hasSimplePrimaryKey()) {
    for (int index=0; index < size; index++) {
      AbstractColumnMapping mapping=(AbstractColumnMapping)mappings.get(index);
      Object keyValue=mapping.valueFromObject(domainObject,primaryKeyFields.get(index),session);
      if (isPrimaryKeyComponentInvalid(keyValue,index)) {
        if (shouldReturnNullIfNull) {
          return null;
        }
        isNull=true;
      }
      if (cacheKeyType == CacheKeyType.ID_VALUE) {
        if (isPersistenceEntity && (!isNull)) {
          ((PersistenceEntity)domainObject)._persistence_setId(keyValue);
        }
        return keyValue;
      }
 else {
        primaryKeyValues[index]=keyValue;
      }
    }
  }
 else {
    AbstractRecord databaseRow=createRecordForPKExtraction(size,session);
    for (int index=0; index < size; index++) {
      DatabaseMapping mapping=mappings.get(index);
      if (mapping != null) {
        mapping.writeFromObjectIntoRow(domainObject,databaseRow,session,WriteType.UNDEFINED);
      }
    }
    List<Class> primaryKeyClassifications=getPrimaryKeyClassifications();
    Platform platform=session.getPlatform(domainObject.getClass());
    for (int index=0; index < size; index++) {
      Class classification=primaryKeyClassifications.get(index);
      Object value=databaseRow.get(primaryKeyFields.get(index));
      if (isPrimaryKeyComponentInvalid(value,index)) {
        if (shouldReturnNullIfNull) {
          return null;
        }
        isNull=true;
      }
      value=platform.convertObject(value,classification);
      if (cacheKeyType == CacheKeyType.ID_VALUE) {
        if (isPersistenceEntity && (!isNull)) {
          ((PersistenceEntity)domainObject)._persistence_setId(value);
        }
        return value;
      }
 else {
        primaryKeyValues[index]=value;
      }
    }
  }
  CacheId id=new CacheId(primaryKeyValues);
  if (isPersistenceEntity && (!isNull)) {
    ((PersistenceEntity)domainObject)._persistence_setId(id);
  }
  return id;
}","/** 
 * Extract primary key attribute values from the domainObject.
 */
public Object extractPrimaryKeyFromObject(Object domainObject,AbstractSession session,boolean shouldReturnNullIfNull){
  if (domainObject == null) {
    return null;
  }
  boolean isPersistenceEntity=(domainObject instanceof PersistenceEntity) && (!isXMLObjectBuilder());
  if (isPersistenceEntity) {
    Object primaryKey=((PersistenceEntity)domainObject)._persistence_getId();
    if (primaryKey != null) {
      return primaryKey;
    }
  }
  ClassDescriptor descriptor=this.descriptor;
  boolean isNull=false;
  if (descriptor.hasInheritance() && (domainObject.getClass() != descriptor.getJavaClass()) && (!domainObject.getClass().getSuperclass().equals(descriptor.getJavaClass()))) {
    return session.getDescriptor(domainObject).getObjectBuilder().extractPrimaryKeyFromObject(domainObject,session,shouldReturnNullIfNull);
  }
  CacheKeyType cacheKeyType=descriptor.getCachePolicy().getCacheKeyType();
  List<DatabaseField> primaryKeyFields=descriptor.getPrimaryKeyFields();
  Object[] primaryKeyValues=null;
  if (cacheKeyType != CacheKeyType.ID_VALUE) {
    primaryKeyValues=new Object[primaryKeyFields.size()];
  }
  List<DatabaseMapping> mappings=getPrimaryKeyMappings();
  int size=mappings.size();
  if (descriptor.hasSimplePrimaryKey()) {
    for (int index=0; index < size; index++) {
      AbstractColumnMapping mapping=(AbstractColumnMapping)mappings.get(index);
      Object keyValue=mapping.valueFromObject(domainObject,primaryKeyFields.get(index),session);
      if (isPrimaryKeyComponentInvalid(keyValue,index)) {
        if (shouldReturnNullIfNull) {
          return null;
        }
        isNull=true;
      }
      if (cacheKeyType == CacheKeyType.ID_VALUE) {
        if (isPersistenceEntity && (!isNull)) {
          ((PersistenceEntity)domainObject)._persistence_setId(keyValue);
        }
        return keyValue;
      }
 else {
        primaryKeyValues[index]=keyValue;
      }
    }
  }
 else {
    AbstractRecord databaseRow=createRecordForPKExtraction(size,session);
    Set<DatabaseMapping> writtenMappings=new HashSet<DatabaseMapping>(size);
    for (int index=0; index < size; index++) {
      DatabaseMapping mapping=mappings.get(index);
      if (mapping != null && !writtenMappings.contains(mapping)) {
        mapping.writeFromObjectIntoRow(domainObject,databaseRow,session,WriteType.UNDEFINED);
        writtenMappings.add(mapping);
      }
    }
    List<Class> primaryKeyClassifications=getPrimaryKeyClassifications();
    Platform platform=session.getPlatform(domainObject.getClass());
    for (int index=0; index < size; index++) {
      Class classification=primaryKeyClassifications.get(index);
      Object value=databaseRow.get(primaryKeyFields.get(index));
      if (isPrimaryKeyComponentInvalid(value,index)) {
        if (shouldReturnNullIfNull) {
          return null;
        }
        isNull=true;
      }
      value=platform.convertObject(value,classification);
      if (cacheKeyType == CacheKeyType.ID_VALUE) {
        if (isPersistenceEntity && (!isNull)) {
          ((PersistenceEntity)domainObject)._persistence_setId(value);
        }
        return value;
      }
 else {
        primaryKeyValues[index]=value;
      }
    }
  }
  CacheId id=new CacheId(primaryKeyValues);
  if (isPersistenceEntity && (!isNull)) {
    ((PersistenceEntity)domainObject)._persistence_setId(id);
  }
  return id;
}"
63291,"/** 
 * Convert the given object to the appropriate type by invoking the appropriate ConversionManager method.
 * @param sourceObject - will always be a string if read from XML
 * @param javaClass - the class that the object must be converted to
 * @param schemaTypeQName - the XML schema that the object is being converted from
 * @return - the newly converted object
 */
@Override public Object convertObject(Object sourceObject,Class javaClass,QName schemaTypeQName) throws ConversionException {
  if (schemaTypeQName == null) {
    return convertObject(sourceObject,javaClass);
  }
  if (sourceObject == null) {
    return super.convertObject(null,javaClass);
  }
 else   if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == CoreClassConstants.OBJECT)) {
    return sourceObject;
  }
 else   if ((javaClass == CoreClassConstants.CALENDAR) || (javaClass == CoreClassConstants.GREGORIAN_CALENDAR)) {
    return convertObjectToCalendar(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.ABYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteObjectArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteObjectArray(sourceObject);
    }
  }
 else   if (javaClass == CoreClassConstants.APBYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteArray(sourceObject);
    }
  }
 else   if ((javaClass == CoreClassConstants.List_Class) && (sourceObject instanceof String)) {
    return convertStringToList(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof List)) {
    return convertListToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof Object[])) {
    return convertArrayToString((Object[])sourceObject,schemaTypeQName);
  }
 else   if (sourceObject instanceof byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromBytes((byte[])sourceObject);
    }
    return Helper.buildHexStringFromBytes((byte[])sourceObject);
  }
 else   if (sourceObject instanceof Byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromObjectBytes((Byte[])sourceObject);
    }
    return buildHexStringFromObjectBytes((Byte[])sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.UTILDATE)) {
    return convertObjectToUtilDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.SQLDATE) {
    return convertObjectToSQLDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIME) {
    return convertObjectToSQLTime(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIMESTAMP) {
    return convertObjectToTimestamp(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == Constants.QNAME_CLASS) && (sourceObject != null)) {
    return convertObjectToQName(sourceObject);
  }
 else   if (javaClass == CoreClassConstants.STRING) {
    return convertObjectToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == java.net.URI.class)) {
    return convertObjectToURI(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.XML_GREGORIAN_CALENDAR)) {
    return convertObjectToXMLGregorianCalendar(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.DURATION)) {
    return convertObjectToDuration(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.CHAR)) {
    return convertObjectToChar(sourceObject,schemaTypeQName);
  }
 else {
    try {
      return super.convertObject(sourceObject,javaClass);
    }
 catch (    ConversionException ex) {
      if (sourceObject.getClass() == CoreClassConstants.STRING) {
        return super.convertObject(((String)sourceObject).trim(),javaClass);
      }
      throw ex;
    }
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}","/** 
 * Convert the given object to the appropriate type by invoking the appropriate ConversionManager method.
 * @param sourceObject - will always be a string if read from XML
 * @param javaClass - the class that the object must be converted to
 * @param schemaTypeQName - the XML schema that the object is being converted from
 * @return - the newly converted object
 */
@Override public Object convertObject(Object sourceObject,Class javaClass,QName schemaTypeQName) throws ConversionException {
  if (schemaTypeQName == null) {
    return convertObject(sourceObject,javaClass);
  }
  if (sourceObject == null) {
    return super.convertObject(null,javaClass);
  }
 else   if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == CoreClassConstants.OBJECT)) {
    return sourceObject;
  }
 else   if ((javaClass == CoreClassConstants.CALENDAR) || (javaClass == CoreClassConstants.GREGORIAN_CALENDAR)) {
    return convertObjectToCalendar(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.ABYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteObjectArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteObjectArray(sourceObject);
    }
  }
 else   if (javaClass == CoreClassConstants.APBYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteArray(sourceObject);
    }
  }
 else   if ((javaClass == CoreClassConstants.List_Class) && (sourceObject instanceof String)) {
    return convertStringToList(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof List)) {
    return convertListToString(sourceObject,schemaTypeQName);
  }
 else   if (sourceObject instanceof byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromBytes((byte[])sourceObject);
    }
    return Helper.buildHexStringFromBytes((byte[])sourceObject);
  }
 else   if (sourceObject instanceof Byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromObjectBytes((Byte[])sourceObject);
    }
    return buildHexStringFromObjectBytes((Byte[])sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof Object[])) {
    return convertArrayToString((Object[])sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.UTILDATE)) {
    return convertObjectToUtilDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.SQLDATE) {
    return convertObjectToSQLDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIME) {
    return convertObjectToSQLTime(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIMESTAMP) {
    return convertObjectToTimestamp(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == Constants.QNAME_CLASS) && (sourceObject != null)) {
    return convertObjectToQName(sourceObject);
  }
 else   if (javaClass == CoreClassConstants.STRING) {
    return convertObjectToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == java.net.URI.class)) {
    return convertObjectToURI(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.XML_GREGORIAN_CALENDAR)) {
    return convertObjectToXMLGregorianCalendar(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.DURATION)) {
    return convertObjectToDuration(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.CHAR)) {
    return convertObjectToChar(sourceObject,schemaTypeQName);
  }
 else {
    try {
      return super.convertObject(sourceObject,javaClass);
    }
 catch (    ConversionException ex) {
      if (sourceObject.getClass() == CoreClassConstants.STRING) {
        return super.convertObject(((String)sourceObject).trim(),javaClass);
      }
      throw ex;
    }
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}"
63292,"/** 
 * INTERNAL: Adds a notification listener to the ApplicationRuntimeMBean instance with ""ApplicationName"" attribute equals to 'mapKey.applicationName'.  The listener will handle application re-deployment. If any errors occur, we will fail silently, i.e. the listener will not be added. This method should only be called when running in an active WLS instance.
 * @param applicationName
 */
private static void addWLSNotificationListener(String applicationName){
  try {
    if (getWLSMBeanServer() != null) {
      ObjectName service=new ObjectName(WLS_SERVICE_KEY);
      ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
      ObjectName[] appRuntimes=(ObjectName[])wlsMBeanServer.getAttribute(serverRuntime,WLS_APP_RUNTIMES);
      for (int i=0; i < appRuntimes.length; i++) {
        try {
          ObjectName appRuntime=appRuntimes[i];
          Object appName=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_NAME);
          Object appVersion=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_VERSION);
          String appIdentifier=null;
          if (appName != null) {
            if (appVersion != null) {
              appIdentifier=appName.toString() + ""String_Node_Str"" + appVersion.toString();
            }
 else {
              appIdentifier=appName.toString();
            }
            if (appIdentifier != null && appIdentifier.equals(applicationName)) {
              wlsMBeanServer.addNotificationListener(appRuntime,new MyNotificationListener(applicationName,WLS_IDENTIFIER),null,null);
              break;
            }
          }
        }
 catch (        Exception ex) {
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(""String_Node_Str"" + appRuntimes[i].toString() + ""String_Node_Str""+ ex.getMessage());
          }
        }
      }
    }
  }
 catch (  Exception x) {
    if (LOGGER.isLoggable(Level.WARNING)) {
      LOGGER.warning(""String_Node_Str"" + applicationName + ""String_Node_Str""+ x.getMessage());
    }
  }
}","/** 
 * INTERNAL: Adds a notification listener to the ApplicationRuntimeMBean instance with ""ApplicationName"" attribute equals to 'mapKey.applicationName'.  The listener will handle application re-deployment. If any errors occur, we will fail silently, i.e. the listener will not be added. This method should only be called when running in an active WLS instance.
 * @param applicationName
 */
private static void addWLSNotificationListener(String applicationName){
  try {
    if (getWLSMBeanServer() != null) {
      ObjectName service=new ObjectName(WLS_SERVICE_KEY);
      ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
      ObjectName[] appRuntimes=(ObjectName[])wlsMBeanServer.getAttribute(serverRuntime,WLS_APP_RUNTIMES);
      for (int i=0; i < appRuntimes.length; i++) {
        try {
          ObjectName appRuntime=appRuntimes[i];
          Object appName=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_NAME);
          Object appVersion=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_VERSION);
          String appIdentifier=null;
          if (appName != null) {
            if (appVersion != null) {
              appIdentifier=appName.toString() + ""String_Node_Str"" + appVersion.toString();
            }
 else {
              appIdentifier=appName.toString();
            }
            if (appIdentifier != null && appIdentifier.equals(applicationName)) {
              wlsMBeanServer.addNotificationListener(appRuntime,new MyNotificationListener(applicationName,WLS_IDENTIFIER),null,null);
              break;
            }
          }
        }
 catch (        Exception ex) {
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(""String_Node_Str"" + appRuntimes[i].toString() + ""String_Node_Str""+ Helper.printStackTraceToString(ex));
          }
        }
      }
    }
  }
 catch (  Exception x) {
    if (LOGGER.isLoggable(Level.WARNING)) {
      LOGGER.warning(""String_Node_Str"" + applicationName + ""String_Node_Str""+ Helper.printStackTraceToString(x));
    }
  }
}"
63293,"/** 
 * INTERNAL: Adds a notification listener to the ApplicationRuntimeMBean instance with ""ApplicationName"" attribute equals to 'mapKey.applicationName'.  The listener will handle application re-deployment. If any errors occur, we will fail silently, i.e. the listener will not be added. This method should only be called when running in an active WLS instance.
 * @param applicationName
 */
private static void addWLSNotificationListener(String applicationName){
  if (getWLSMBeanServer() != null) {
    try {
      ObjectName service=new ObjectName(WLS_SERVICE_KEY);
      ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
      ObjectName[] appRuntimes=(ObjectName[])wlsMBeanServer.getAttribute(serverRuntime,WLS_APP_RUNTIMES);
      for (int i=0; i < appRuntimes.length; i++) {
        try {
          ObjectName appRuntime=appRuntimes[i];
          Object appName=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_NAME);
          Object appVersion=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_VERSION);
          String appIdentifier=null;
          if (appName != null) {
            if (appVersion != null) {
              appIdentifier=appName.toString() + ""String_Node_Str"" + appVersion.toString();
            }
 else {
              appIdentifier=appName.toString();
            }
            if (appIdentifier != null && appIdentifier.equals(applicationName)) {
              wlsMBeanServer.addNotificationListener(appRuntime,new MyNotificationListener(applicationName,WLS_IDENTIFIER),null,null);
              break;
            }
          }
        }
 catch (        Exception ex) {
        }
      }
    }
 catch (    Exception x) {
    }
  }
}","/** 
 * INTERNAL: Adds a notification listener to the ApplicationRuntimeMBean instance with ""ApplicationName"" attribute equals to 'mapKey.applicationName'.  The listener will handle application re-deployment. If any errors occur, we will fail silently, i.e. the listener will not be added. This method should only be called when running in an active WLS instance.
 * @param applicationName
 */
private static void addWLSNotificationListener(String applicationName){
  try {
    if (getWLSMBeanServer() != null) {
      ObjectName service=new ObjectName(WLS_SERVICE_KEY);
      ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
      ObjectName[] appRuntimes=(ObjectName[])wlsMBeanServer.getAttribute(serverRuntime,WLS_APP_RUNTIMES);
      for (int i=0; i < appRuntimes.length; i++) {
        try {
          ObjectName appRuntime=appRuntimes[i];
          Object appName=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_NAME);
          Object appVersion=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_VERSION);
          String appIdentifier=null;
          if (appName != null) {
            if (appVersion != null) {
              appIdentifier=appName.toString() + ""String_Node_Str"" + appVersion.toString();
            }
 else {
              appIdentifier=appName.toString();
            }
            if (appIdentifier != null && appIdentifier.equals(applicationName)) {
              wlsMBeanServer.addNotificationListener(appRuntime,new MyNotificationListener(applicationName,WLS_IDENTIFIER),null,null);
              break;
            }
          }
        }
 catch (        Exception ex) {
          if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(""String_Node_Str"" + appRuntimes[i].toString() + ""String_Node_Str""+ ex.getMessage());
          }
        }
      }
    }
  }
 catch (  Exception x) {
    if (LOGGER.isLoggable(Level.WARNING)) {
      LOGGER.warning(""String_Node_Str"" + applicationName + ""String_Node_Str""+ x.getMessage());
    }
  }
}"
63294,"/** 
 * INTERNAL: Creates an instance of   {@link System} property getter with privileges enabled.Selects  {@link System} property getter with default value to be executed so getter will return {@code def}if property with   {@code key} does not exist.
 * @param key The name of the {@link System} property.
 * @since 2.7
 */
public PrivilegedGetSystemProperty(final String key,final String def){
  this.key=key;
  this.def=null;
}","/** 
 * INTERNAL: Creates an instance of   {@link System} property getter with privileges enabled.Selects  {@link System} property getter with default value to be executed so getter will return {@code def}if property with   {@code key} does not exist.
 * @param key The name of the {@link System} property.
 * @since 2.7
 */
public PrivilegedGetSystemProperty(final String key,final String def){
  this.key=key;
  this.def=def;
}"
63295,"public void cdata(String value){
  CDATASection cdata=document.createCDATASection(value);
  node.appendChild(cdata);
}","public void cdata(String value){
  for (  String part : MarshalRecord.splitCData(value)) {
    CDATASection cdata=document.createCDATASection(part);
    node.appendChild(cdata);
  }
}"
63296,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars,boolean isAttribute,OutputStream os){
  if (escapeChars) {
    CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
    if (escapeHandler != null) {
      try {
        CharArrayWriter out=new CharArrayWriter();
        escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,out);
        byte[] bytes=out.toString().getBytes();
        outputStreamWrite(bytes);
        out.close();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
  }
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)),os);
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)),os);
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)),os);
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)),os);
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)),os);
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP,os);
            break;
          }
case '<':
{
          outputStreamWrite(LT,os);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT,os);
        break;
      }
case '\n':
{
      if (isAttribute) {
        outputStreamWrite(SLASH_N,os);
      }
 else {
        outputStreamWrite((byte)character,os);
      }
      break;
    }
case '\r':
{
    outputStreamWrite(SLASH_R,os);
    break;
  }
default :
outputStreamWrite((byte)character,os);
}
}
 else {
outputStreamWrite((byte)character,os);
}
}
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars,boolean isAttribute,OutputStream os){
  if (escapeChars) {
    CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
    if (escapeHandler != null) {
      try {
        CharArrayWriter out=new CharArrayWriter();
        escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,out);
        byte[] bytes=out.toString().getBytes();
        outputStreamWrite(bytes);
        out.close();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
  }
  int nClosingSquareBracketsInRow=0;
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)),os);
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)),os);
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)),os);
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)),os);
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)),os);
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP,os);
            break;
          }
case '<':
{
          outputStreamWrite(LT,os);
          break;
        }
case '>':
{
        if (nClosingSquareBracketsInRow >= 2) {
          outputStreamWrite(GT,os);
        }
 else {
          outputStreamWrite((byte)character,os);
        }
        break;
      }
case '""':
{
      outputStreamWrite(QUOT,os);
      break;
    }
case '\n':
{
    if (isAttribute) {
      outputStreamWrite(SLASH_N,os);
    }
 else {
      outputStreamWrite((byte)character,os);
    }
    break;
  }
case '\r':
{
  outputStreamWrite(SLASH_R,os);
  break;
}
default :
outputStreamWrite((byte)character,os);
}
if (!isAttribute) {
if (']' == character) {
++nClosingSquareBracketsInRow;
}
 else {
nClosingSquareBracketsInRow=0;
}
}
}
 else {
outputStreamWrite((byte)character,os);
}
}
}
}"
63297,"/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      isStartElementOpen=false;
      outputStreamWrite(CLOSE_ELEMENT);
    }
    outputStreamWrite(OPEN_CDATA);
    outputStreamWrite(value.getBytes(Constants.DEFAULT_XML_ENCODING));
    outputStreamWrite(CLOSE_CDATA);
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void cdata(String value){
  try {
    if (isStartElementOpen) {
      isStartElementOpen=false;
      outputStreamWrite(CLOSE_ELEMENT);
    }
    for (    String part : MarshalRecord.splitCData(value)) {
      outputStreamWrite(OPEN_CDATA);
      outputStreamWrite(part.getBytes(Constants.DEFAULT_XML_ENCODING));
      outputStreamWrite(CLOSE_CDATA);
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63298,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,StringBuilder writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      StringWriter sw=new StringWriter();
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,sw);
      writer.append(sw.toString());
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  if (null == encoder) {
    encoder=Constants.DEFAULT_CHARSET.newEncoder();
    charset=defaultCharset;
  }
  char[] chars=value.toCharArray();
  for (int x=0, charsSize=chars.length; x < charsSize; x++) {
    char character=chars[x];
switch (character) {
case '&':
{
        writer.append(""String_Node_Str"");
        break;
      }
case '<':
{
      writer.append(""String_Node_Str"");
      break;
    }
case '""':
{
    writer.append(""String_Node_Str"");
    break;
  }
case '\n':
{
  if (isAttribute) {
    writer.append(""String_Node_Str"");
  }
 else {
    writer.append('\n');
  }
  break;
}
case '\r':
{
writer.append(""String_Node_Str"");
break;
}
default :
if (charset == defaultCharset) {
writer.append(character);
}
 else {
if (encoder.canEncode(character)) {
writer.append(character);
}
 else {
writer.append(""String_Node_Str"");
writer.append(Integer.toString(character));
writer.append(';');
}
}
}
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,StringBuilder writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      StringWriter sw=new StringWriter();
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,sw);
      writer.append(sw.toString());
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  if (null == encoder) {
    encoder=Constants.DEFAULT_CHARSET.newEncoder();
    charset=defaultCharset;
  }
  char[] chars=value.toCharArray();
  int nClosingSquareBracketsInRow=0;
  for (int x=0, charsSize=chars.length; x < charsSize; x++) {
    char character=chars[x];
switch (character) {
case '&':
{
        writer.append(""String_Node_Str"");
        break;
      }
case '<':
{
      writer.append(""String_Node_Str"");
      break;
    }
case '>':
{
    if (nClosingSquareBracketsInRow >= 2) {
      writer.append(""String_Node_Str"");
    }
 else {
      writer.append(character);
    }
    break;
  }
case '""':
{
  writer.append(""String_Node_Str"");
  break;
}
case '\n':
{
if (isAttribute) {
  writer.append(""String_Node_Str"");
}
 else {
  writer.append('\n');
}
break;
}
case '\r':
{
writer.append(""String_Node_Str"");
break;
}
default :
if (charset == defaultCharset) {
writer.append(character);
}
 else {
if (encoder.canEncode(character)) {
writer.append(character);
}
 else {
writer.append(""String_Node_Str"");
writer.append(Integer.toString(character));
writer.append(';');
}
}
}
if (!isAttribute) {
if (']' == character) {
++nClosingSquareBracketsInRow;
}
 else {
nClosingSquareBracketsInRow=0;
}
}
}
}"
63299,"/** 
 * INTERNAL:
 */
public void cdata(String value){
  if (isStartElementOpen) {
    isStartElementOpen=false;
    builder.append('>');
  }
  builder.append(""String_Node_Str"");
  builder.append(value);
  builder.append(""String_Node_Str"");
}","/** 
 * INTERNAL:
 */
public void cdata(String value){
  if (isStartElementOpen) {
    isStartElementOpen=false;
    builder.append('>');
  }
  for (  String part : MarshalRecord.splitCData(value)) {
    builder.append(""String_Node_Str"");
    builder.append(part);
    builder.append(""String_Node_Str"");
  }
}"
63300,"@Override public void cdata(String value){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    xmlEventWriter.add(xmlEventFactory.createCData(value));
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}","@Override public void cdata(String value){
  try {
    if (isStartElementOpen) {
      openAndCloseStartElement();
      isStartElementOpen=false;
    }
    for (    String part : MarshalRecord.splitCData(value)) {
      xmlEventWriter.add(xmlEventFactory.createCData(part));
    }
  }
 catch (  Exception e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63301,"public void cdata(String value){
  try {
    xmlStreamWriter.writeCData(value);
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void cdata(String value){
  try {
    for (    String part : MarshalRecord.splitCData(value)) {
      xmlStreamWriter.writeCData(part);
    }
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63302,"/** 
 * Merge the changes specified within the changeSet into the cache. The object passed in is the original object from the cache.
 */
protected Object mergeChangesIntoDistributedCache(Object original,ObjectChangeSet changeSet){
  AbstractSession session=this.session;
  Class localClassType=changeSet.getClassType(session);
  ClassDescriptor descriptor=session.getDescriptor(localClassType);
  if (changeSet.getSynchronizationType() == ClassDescriptor.INVALIDATE_CHANGED_OBJECTS) {
    session.getIdentityMapAccessorInstance().invalidateObject(changeSet.getId(),localClassType);
    return original;
  }
  if ((!changeSet.isNew()) && descriptor.usesVersionLocking()) {
    if ((session.getCommandManager() != null) && (session.getCommandManager().getCommandConverter() != null)) {
      changeSet.rebuildWriteLockValueFromUserFormat(descriptor,session);
    }
    int difference=descriptor.getOptimisticLockingPolicy().getVersionDifference(changeSet.getInitialWriteLockValue(),original,changeSet.getId(),session);
    if (difference < 0) {
      session.log(SessionLog.FINEST,SessionLog.PROPAGATION,""String_Node_Str"",changeSet.getClassName(),changeSet.getId());
      return original;
    }
 else     if (difference > 0) {
      session.log(SessionLog.FINEST,SessionLog.PROPAGATION,""String_Node_Str"",changeSet.getClassName(),changeSet.getId());
      session.getIdentityMapAccessorInstance().invalidateObject(changeSet.getId(),localClassType);
      return original;
    }
  }
  session.log(SessionLog.FINEST,SessionLog.PROPAGATION,""String_Node_Str"",changeSet.getClassName(),changeSet.getId());
  if (changeSet.isNew() || (changeSet.getSynchronizationType() != ClassDescriptor.DO_NOT_SEND_CHANGES)) {
    Object primaryKey=changeSet.getId();
    CacheKey cacheKey=changeSet.getActiveCacheKey();
    if (cacheKey == null || !cacheKey.isAcquired()) {
      cacheKey=session.getIdentityMapAccessorInstance().getWriteLockManager().appendLock(primaryKey,original,descriptor,this,session);
    }
    descriptor.getObjectBuilder().mergeChangesIntoObject(original,changeSet,null,this,session,false,false);
    if (descriptor.usesOptimisticLocking() && descriptor.getOptimisticLockingPolicy().isStoredInCache()) {
      cacheKey.setWriteLockValue(changeSet.getWriteLockValue());
    }
    cacheKey.setObject(original);
    if (descriptor.getCacheInvalidationPolicy().shouldUpdateReadTimeOnUpdate() || changeSet.isNew()) {
      cacheKey.setReadTime(getSystemTime());
    }
    cacheKey.updateAccess();
  }
  return original;
}","/** 
 * Merge the changes specified within the changeSet into the cache. The object passed in is the original object from the cache.
 */
protected Object mergeChangesIntoDistributedCache(Object original,ObjectChangeSet changeSet){
  AbstractSession session=this.session;
  Class localClassType=changeSet.getClassType(session);
  ClassDescriptor descriptor=session.getDescriptor(localClassType);
  if (changeSet.getSynchronizationType() == ClassDescriptor.INVALIDATE_CHANGED_OBJECTS) {
    session.getIdentityMapAccessorInstance().invalidateObject(changeSet.getId(),localClassType);
    return original;
  }
  if ((!changeSet.isNew()) && descriptor.usesVersionLocking()) {
    if ((session.getCommandManager() != null) && (session.getCommandManager().getCommandConverter() != null)) {
      changeSet.rebuildWriteLockValueFromUserFormat(descriptor,session);
    }
    int difference=descriptor.getOptimisticLockingPolicy().getVersionDifference(changeSet.getInitialWriteLockValue(),original,changeSet.getId(),session);
    if (difference < 0) {
      session.log(SessionLog.FINEST,SessionLog.PROPAGATION,""String_Node_Str"",changeSet.getClassName(),changeSet.getId());
      return original;
    }
 else     if (difference > 0) {
      session.log(SessionLog.FINEST,SessionLog.PROPAGATION,""String_Node_Str"",changeSet.getClassName(),changeSet.getId());
      session.getIdentityMapAccessorInstance().invalidateObject(changeSet.getId(),localClassType);
      return original;
    }
  }
  session.log(SessionLog.FINEST,SessionLog.PROPAGATION,""String_Node_Str"",changeSet.getClassName(),changeSet.getId());
  if (changeSet.isNew() || (changeSet.getSynchronizationType() != ClassDescriptor.DO_NOT_SEND_CHANGES)) {
    Object primaryKey=changeSet.getId();
    CacheKey cacheKey=changeSet.getActiveCacheKey();
    if (cacheKey == null || !cacheKey.isAcquired()) {
      cacheKey=session.getIdentityMapAccessorInstance().getWriteLockManager().appendLock(primaryKey,original,descriptor,this,session);
    }
    descriptor.getObjectBuilder().mergeChangesIntoObject(original,changeSet,null,this,session,false,false);
    if (descriptor.usesOptimisticLocking() && descriptor.getOptimisticLockingPolicy().isStoredInCache()) {
      cacheKey.setWriteLockValue(changeSet.getWriteLockValue());
    }
    if (descriptor.isProtectedIsolation() && changeSet.hasProtectedForeignKeys()) {
      descriptor.getObjectBuilder().cacheForeignKeyValues(changeSet.getProtectedForeignKeys(),cacheKey,session);
    }
    cacheKey.setObject(original);
    if (descriptor.getCacheInvalidationPolicy().shouldUpdateReadTimeOnUpdate() || changeSet.isNew()) {
      cacheKey.setReadTime(getSystemTime());
    }
    cacheKey.updateAccess();
  }
  return original;
}"
63303,"/** 
 * INTERNAL: Helper method to readObject.  Completely write this ObjectChangeSet to the stream
 */
public void writeCompleteChangeSet(java.io.ObjectOutputStream stream) throws java.io.IOException {
  ensureChanges();
  writeIdentityInformation(stream);
  stream.writeObject(this.changes);
  stream.writeObject(this.oldKey);
  stream.writeObject(this.newKey);
}","/** 
 * INTERNAL: Helper method to readObject.  Completely write this ObjectChangeSet to the stream
 */
public void writeCompleteChangeSet(java.io.ObjectOutputStream stream) throws java.io.IOException {
  ensureChanges();
  writeIdentityInformation(stream);
  stream.writeObject(this.changes);
  stream.writeObject(this.oldKey);
  stream.writeObject(this.newKey);
  stream.writeObject(this.protectedForeignKeys);
}"
63304,"/** 
 * INTERNAL: Helper method used by readObject to read a completely serialized change set from the stream.
 */
public void readCompleteChangeSet(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {
  readIdentityInformation(stream);
  this.changes=(List)stream.readObject();
  this.oldKey=stream.readObject();
  this.newKey=stream.readObject();
}","/** 
 * INTERNAL: Helper method used by readObject to read a completely serialized change set from the stream.
 */
public void readCompleteChangeSet(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {
  readIdentityInformation(stream);
  this.changes=(List)stream.readObject();
  this.oldKey=stream.readObject();
  this.newKey=stream.readObject();
  this.protectedForeignKeys=(AbstractRecord)stream.readObject();
}"
63305,"/** 
 * INTERNAL: Return a new UnitOfWorkChangeSet that only includes data require for the remote merge, for cache coordination.
 */
public UnitOfWorkChangeSet buildCacheCoordinationMergeChangeSet(AbstractSession session){
  Map writableChangeSets=new IdentityHashMap();
  for (  ObjectChangeSet changeSet : getAllChangeSets().values()) {
    ClassDescriptor descriptor=changeSet.getDescriptor();
    int syncType=descriptor.getCachePolicy().getCacheSynchronizationType();
    if ((syncType != ClassDescriptor.DO_NOT_SEND_CHANGES) && (!changeSet.isNew() || (syncType == ClassDescriptor.SEND_NEW_OBJECTS_WITH_CHANGES))) {
      writableChangeSets.put(changeSet,changeSet);
    }
  }
  Map sendableDeletedObjects=new IdentityHashMap();
  for (  ObjectChangeSet changeSet : getDeletedObjects().keySet()) {
    ClassDescriptor descriptor=changeSet.getDescriptor();
    int syncType=descriptor.getCacheSynchronizationType();
    if (syncType != ClassDescriptor.DO_NOT_SEND_CHANGES) {
      sendableDeletedObjects.put(changeSet,changeSet);
    }
  }
  if (writableChangeSets.isEmpty() && sendableDeletedObjects.isEmpty()) {
    return null;
  }
  UnitOfWorkChangeSet remoteChangeSet=new UnitOfWorkChangeSet();
  if (!writableChangeSets.isEmpty()) {
    remoteChangeSet.allChangeSets=writableChangeSets;
  }
  if (!sendableDeletedObjects.isEmpty()) {
    remoteChangeSet.deletedObjects=sendableDeletedObjects;
  }
  return remoteChangeSet;
}","/** 
 * INTERNAL: Return a new UnitOfWorkChangeSet that only includes data require for the remote merge, for cache coordination.
 */
public UnitOfWorkChangeSet buildCacheCoordinationMergeChangeSet(AbstractSession session){
  Map writableChangeSets=new IdentityHashMap();
  for (  ObjectChangeSet changeSet : getAllChangeSets().values()) {
    ClassDescriptor descriptor=changeSet.getDescriptor();
    int syncType=descriptor.getCachePolicy().getCacheSynchronizationType();
    if (descriptor.isProtectedIsolation()) {
      CacheKey activeCacheKey=changeSet.getActiveCacheKey();
      if (activeCacheKey != null && activeCacheKey.hasProtectedForeignKeys()) {
        changeSet.setProtectedForeignKeys(activeCacheKey.getProtectedForeignKeys().clone());
      }
    }
    if ((syncType != ClassDescriptor.DO_NOT_SEND_CHANGES) && (!changeSet.isNew() || (syncType == ClassDescriptor.SEND_NEW_OBJECTS_WITH_CHANGES))) {
      writableChangeSets.put(changeSet,changeSet);
    }
  }
  Map sendableDeletedObjects=new IdentityHashMap();
  for (  ObjectChangeSet changeSet : getDeletedObjects().keySet()) {
    ClassDescriptor descriptor=changeSet.getDescriptor();
    int syncType=descriptor.getCacheSynchronizationType();
    if (syncType != ClassDescriptor.DO_NOT_SEND_CHANGES) {
      sendableDeletedObjects.put(changeSet,changeSet);
    }
  }
  if (writableChangeSets.isEmpty() && sendableDeletedObjects.isEmpty()) {
    return null;
  }
  UnitOfWorkChangeSet remoteChangeSet=new UnitOfWorkChangeSet();
  if (!writableChangeSets.isEmpty()) {
    remoteChangeSet.allChangeSets=writableChangeSets;
  }
  if (!sendableDeletedObjects.isEmpty()) {
    remoteChangeSet.deletedObjects=sendableDeletedObjects;
  }
  return remoteChangeSet;
}"
63306,"/** 
 * INTERNAL: A combination of readFromRowIntoObject and buildClone. <p> buildClone assumes the attribute value exists on the original and can simply be copied. <p> readFromRowIntoObject assumes that one is building an original. <p> Both of the above assumptions are false in this method, and actually attempts to do both at the same time. <p> Extract value from the row and set the attribute to this value in the working copy clone. In order to bypass the shared cache when in transaction a UnitOfWork must be able to populate working copies directly from the row.
 */
@Override public void buildCloneFromRow(AbstractRecord databaseRow,JoinedAttributeManager joinManager,Object clone,CacheKey sharedCacheKey,ObjectBuildingQuery sourceQuery,UnitOfWorkImpl unitOfWork,AbstractSession executionSession){
  Object clonedAttributeValue=buildAggregateFromRow(databaseRow,clone,null,joinManager,sourceQuery,false,executionSession,true);
  ClassDescriptor descriptor=getReferenceDescriptor(clonedAttributeValue,unitOfWork);
  if (clonedAttributeValue != null) {
    descriptor.getObjectChangePolicy().setAggregateChangeListener(clone,clonedAttributeValue,unitOfWork,descriptor,getAttributeName());
  }
  setAttributeValueInObject(clone,clonedAttributeValue);
  return;
}","/** 
 * INTERNAL: A combination of readFromRowIntoObject and buildClone. <p> buildClone assumes the attribute value exists on the original and can simply be copied. <p> readFromRowIntoObject assumes that one is building an original. <p> Both of the above assumptions are false in this method, and actually attempts to do both at the same time. <p> Extract value from the row and set the attribute to this value in the working copy clone. In order to bypass the shared cache when in transaction a UnitOfWork must be able to populate working copies directly from the row.
 */
@Override public void buildCloneFromRow(AbstractRecord databaseRow,JoinedAttributeManager joinManager,Object clone,CacheKey sharedCacheKey,ObjectBuildingQuery sourceQuery,UnitOfWorkImpl unitOfWork,AbstractSession executionSession){
  Object clonedAttributeValue=buildAggregateFromRow(databaseRow,clone,sharedCacheKey,joinManager,sourceQuery,false,executionSession,true);
  if (clonedAttributeValue != null) {
    ClassDescriptor descriptor=getReferenceDescriptor(clonedAttributeValue,unitOfWork);
    descriptor.getObjectChangePolicy().setAggregateChangeListener(clone,clonedAttributeValue,unitOfWork,descriptor,getAttributeName());
  }
  setAttributeValueInObject(clone,clonedAttributeValue);
}"
63307,"/** 
 * INTERNAL: Build and return an aggregate object from the specified row. If a null value is allowed and all the appropriate fields in the row are NULL, return a null. If an aggregate is referenced by the target object, return it (maintain identity) Otherwise, simply create a new aggregate object and return it.
 */
public Object buildAggregateFromRow(AbstractRecord databaseRow,Object targetObject,CacheKey cacheKey,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,boolean buildShallowOriginal,AbstractSession executionSession,boolean targetIsProtected) throws DatabaseException {
  if (databaseRow.hasSopObject()) {
    Object sopAggregate=getAttributeValueFromObject(databaseRow.getSopObject());
    if ((targetObject != null) && (targetObject != databaseRow.getSopObject())) {
      setAttributeValueInObject(targetObject,sopAggregate);
    }
    return sopAggregate;
  }
  if (isNullAllowed() && allAggregateFieldsAreNull(databaseRow)) {
    return null;
  }
  Object aggregate=null;
  ClassDescriptor descriptor=getReferenceDescriptor();
  boolean refreshing=true;
  if (targetObject != null) {
    if (descriptor.hasInheritance()) {
      Class newAggregateClass=descriptor.getInheritancePolicy().classFromRow(databaseRow,executionSession);
      descriptor=getReferenceDescriptor(newAggregateClass,executionSession);
      aggregate=getMatchingAttributeValueFromObject(databaseRow,targetObject,executionSession,descriptor);
      if ((aggregate != null) && (aggregate.getClass() != newAggregateClass)) {
        aggregate=descriptor.getObjectBuilder().buildNewInstance();
        refreshing=false;
      }
    }
 else {
      aggregate=getMatchingAttributeValueFromObject(databaseRow,targetObject,executionSession,descriptor);
    }
  }
  if (aggregate == null) {
    aggregate=descriptor.getObjectBuilder().buildNewInstance();
    refreshing=false;
  }
  ObjectBuildingQuery nestedQuery=prepareNestedQuery(sourceQuery);
  FetchGroup targetFetchGroup=null;
  if (nestedQuery.isObjectLevelReadQuery()) {
    targetFetchGroup=((ObjectLevelReadQuery)nestedQuery).getFetchGroup();
    if (refreshing && descriptor.hasFetchGroupManager()) {
      descriptor.getFetchGroupManager().unionEntityFetchGroupIntoObject(aggregate,descriptor.getFetchGroupManager().getEntityFetchGroup(targetFetchGroup),executionSession,true);
    }
  }
  if (buildShallowOriginal) {
    descriptor.getObjectBuilder().buildAttributesIntoShallowObject(aggregate,databaseRow,nestedQuery);
  }
 else   if (executionSession.isUnitOfWork()) {
    descriptor.getObjectBuilder().buildAttributesIntoWorkingCopyClone(aggregate,buildWrapperCacheKeyForAggregate(cacheKey,targetIsProtected),nestedQuery,joinManager,databaseRow,(UnitOfWorkImpl)executionSession,refreshing);
  }
 else {
    descriptor.getObjectBuilder().buildAttributesIntoObject(aggregate,buildWrapperCacheKeyForAggregate(cacheKey,targetIsProtected),databaseRow,nestedQuery,joinManager,nestedQuery.getExecutionFetchGroup(descriptor),refreshing,executionSession);
  }
  if ((targetFetchGroup != null) && descriptor.hasFetchGroupManager() && !refreshing&& sourceQuery.shouldMaintainCache()&& !sourceQuery.shouldStoreBypassCache()) {
    EntityFetchGroup entityFetchGroup=descriptor.getFetchGroupManager().getEntityFetchGroup(targetFetchGroup);
    if (entityFetchGroup != null) {
      entityFetchGroup=(EntityFetchGroup)entityFetchGroup.clone();
      entityFetchGroup.setRootEntity((FetchGroupTracker)cacheKey.getObject());
      entityFetchGroup.setOnEntity(aggregate,executionSession);
    }
  }
  return aggregate;
}","/** 
 * INTERNAL: Build and return an aggregate object from the specified row. If a null value is allowed and all the appropriate fields in the row are NULL, return a null. If an aggregate is referenced by the target object, return it (maintain identity) Otherwise, simply create a new aggregate object and return it.
 */
public Object buildAggregateFromRow(AbstractRecord databaseRow,Object targetObject,CacheKey cacheKey,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,boolean buildShallowOriginal,AbstractSession executionSession,boolean targetIsProtected) throws DatabaseException {
  if (databaseRow.hasSopObject()) {
    Object sopAggregate=getAttributeValueFromObject(databaseRow.getSopObject());
    if ((targetObject != null) && (targetObject != databaseRow.getSopObject())) {
      setAttributeValueInObject(targetObject,sopAggregate);
    }
    return sopAggregate;
  }
  if (isNullAllowed() && allAggregateFieldsAreNull(databaseRow)) {
    return null;
  }
  Object aggregate=null;
  ClassDescriptor descriptor=getReferenceDescriptor();
  boolean refreshing=true;
  if (targetObject != null) {
    if (descriptor.hasInheritance()) {
      Class newAggregateClass=descriptor.getInheritancePolicy().classFromRow(databaseRow,executionSession);
      descriptor=getReferenceDescriptor(newAggregateClass,executionSession);
      aggregate=getMatchingAttributeValueFromObject(databaseRow,targetObject,executionSession,descriptor);
      if ((aggregate != null) && (aggregate.getClass() != newAggregateClass)) {
        aggregate=descriptor.getObjectBuilder().buildNewInstance();
        refreshing=false;
      }
    }
 else {
      aggregate=getMatchingAttributeValueFromObject(databaseRow,targetObject,executionSession,descriptor);
    }
  }
  if (aggregate == null || (aggregate != null && cacheKey == null)) {
    aggregate=descriptor.getObjectBuilder().buildNewInstance();
    refreshing=false;
  }
  ObjectBuildingQuery nestedQuery=prepareNestedQuery(sourceQuery);
  FetchGroup targetFetchGroup=null;
  if (nestedQuery.isObjectLevelReadQuery()) {
    targetFetchGroup=((ObjectLevelReadQuery)nestedQuery).getFetchGroup();
    if (refreshing && descriptor.hasFetchGroupManager()) {
      descriptor.getFetchGroupManager().unionEntityFetchGroupIntoObject(aggregate,descriptor.getFetchGroupManager().getEntityFetchGroup(targetFetchGroup),executionSession,true);
    }
  }
  if (buildShallowOriginal) {
    descriptor.getObjectBuilder().buildAttributesIntoShallowObject(aggregate,databaseRow,nestedQuery);
  }
 else   if (executionSession.isUnitOfWork()) {
    descriptor.getObjectBuilder().buildAttributesIntoWorkingCopyClone(aggregate,buildWrapperCacheKeyForAggregate(cacheKey,targetIsProtected),nestedQuery,joinManager,databaseRow,(UnitOfWorkImpl)executionSession,refreshing);
  }
 else {
    descriptor.getObjectBuilder().buildAttributesIntoObject(aggregate,buildWrapperCacheKeyForAggregate(cacheKey,targetIsProtected),databaseRow,nestedQuery,joinManager,nestedQuery.getExecutionFetchGroup(descriptor),refreshing,executionSession);
  }
  if ((targetFetchGroup != null) && descriptor.hasFetchGroupManager() && cacheKey != null && !refreshing && sourceQuery.shouldMaintainCache() && !sourceQuery.shouldStoreBypassCache()) {
    EntityFetchGroup entityFetchGroup=descriptor.getFetchGroupManager().getEntityFetchGroup(targetFetchGroup);
    if (entityFetchGroup != null) {
      entityFetchGroup=(EntityFetchGroup)entityFetchGroup.clone();
      entityFetchGroup.setRootEntity((FetchGroupTracker)cacheKey.getObject());
      entityFetchGroup.setOnEntity(aggregate,executionSession);
    }
  }
  return aggregate;
}"
63308,"public ComplexAggregateTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildCITYSLICKERTable());
  addTableDefinition(buildCOUNTRYDWELLERTable());
  addTableDefinition(buildWORLDTable());
  addTableDefinition(buildHOCKEYCOACHTable());
  addTableDefinition(buildHOCKEYPLAYERTable());
  addTableDefinition(buildHOCKEYTEAMTable());
  addTableDefinition(buildROLETable());
  addTableDefinition(buildPLAYERROLESTable());
  addTableDefinition(buildHockeyCoach_NICKNAMESTable());
  addTableDefinition(buildBODYTable());
  addTableDefinition(buildPLACETable());
}","public ComplexAggregateTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildCITYSLICKERTable());
  addTableDefinition(buildCOUNTRYDWELLERTable());
  addTableDefinition(buildWORLDTable());
  addTableDefinition(buildHOCKEYCOACHTable());
  addTableDefinition(buildHOCKEYPLAYERTable());
  addTableDefinition(buildHOCKEYTEAMTable());
  addTableDefinition(buildROLETable());
  addTableDefinition(buildPLAYERROLESTable());
  addTableDefinition(buildHockeyCoach_NICKNAMESTable());
  addTableDefinition(buildBODYTable());
  addTableDefinition(buildPLACETable());
  addTableDefinition(buildHOCKEY_PUCKTable());
  addTableDefinition(buildHOCKEY_RINKTable());
}"
63309,"/** 
 * Returns BeanValidationHelper.
 */
public BeanValidationHelper getBeanValidationHelper(){
  return beanValidationHelper;
}","/** 
 * Returns BeanValidationHelper. Can return null if bean validation jar is not on class path.
 */
public BeanValidationHelper getBeanValidationHelper(){
  return beanValidationHelper;
}"
63310,"/** 
 * Create a JAXBContext.  The XMLContext contains the metadata about the Object to XML mappings.
 */
public JAXBContext(XMLContext context,Generator generator,TypeMappingInfo[] boundTypes){
  contextState=new JAXBContextState(context,generator,boundTypes,null);
}","/** 
 * Create a JAXBContext.  The XMLContext contains the metadata about the Object to XML mappings.
 */
public JAXBContext(XMLContext context,Generator generator,TypeMappingInfo[] boundTypes){
  contextState=new JAXBContextState(context,generator,boundTypes,null);
  initBeanValidation();
}"
63311,"/** 
 * INTERNAL: Ensure the change set is populated for cache coordination.
 */
public void ensureChanges(){
  if (this.isNew && ((this.changes == null) || this.changes.isEmpty())) {
    AbstractSession unitOfWork=this.unitOfWorkChangeSet.getSession();
    if (unitOfWork != null && !unitOfWork.isRemoteUnitOfWork()) {
      ClassDescriptor descriptor=getDescriptor();
      if (descriptor != null) {
        FetchGroup fetchGroup=null;
        if (descriptor.hasFetchGroupManager()) {
          fetchGroup=descriptor.getFetchGroupManager().getObjectFetchGroup(this.cloneObject);
        }
        List mappings=descriptor.getMappings();
        int mappingsSize=mappings.size();
        for (int index=0; index < mappingsSize; index++) {
          DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
          if (fetchGroup == null || fetchGroup.containsAttributeInternal(mapping.getAttributeName())) {
            addChange(mapping.compareForChange(this.cloneObject,this.cloneObject,this,unitOfWork));
          }
        }
      }
    }
  }
}","/** 
 * INTERNAL: Ensure the change set is populated for cache coordination.
 */
public void ensureChanges(){
  if (this.isNew && ((this.changes == null) || this.changes.isEmpty() || cacheSynchronizationType != ClassDescriptor.SEND_NEW_OBJECTS_WITH_CHANGES)) {
    AbstractSession unitOfWork=this.unitOfWorkChangeSet.getSession();
    if (unitOfWork != null && !unitOfWork.isRemoteUnitOfWork()) {
      ClassDescriptor descriptor=getDescriptor();
      if (descriptor != null) {
        FetchGroup fetchGroup=null;
        if (descriptor.hasFetchGroupManager()) {
          fetchGroup=descriptor.getFetchGroupManager().getObjectFetchGroup(this.cloneObject);
        }
        List mappings=descriptor.getMappings();
        int mappingsSize=mappings.size();
        for (int index=0; index < mappingsSize; index++) {
          DatabaseMapping mapping=(DatabaseMapping)mappings.get(index);
          if (fetchGroup == null || fetchGroup.containsAttributeInternal(mapping.getAttributeName())) {
            addChange(mapping.compareForChange(this.cloneObject,this.cloneObject,this,unitOfWork));
          }
        }
      }
    }
  }
}"
63312,"public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(IsolatedHashMapTest.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  suite.addTest(AdvancedFetchGroupJunitTest.suite());
  suite.addTest(AdvancedMultiTenantJunitTest.suite());
  suite.addTest(AdvancedMultiTenantSchemaJunitTest.suite());
  suite.addTest(PessimisticLockingExtendedScopeTestSuite.suite());
  suite.addTest(PessimisticLockEntityRefreshTestSuite.suite());
  suite.addTest(UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(ComplexAggregateTestSuite.suite());
  suite.addTest(MetadataCachingTestSuite.suite());
  suite.addTest(OptimisticLockForceIncrementTestSuite.suite());
  suite.addTest(ConfigPUTestSuite.suite());
  suite.addTest(NamedQueryJUnitTest.suite());
  suite.addTest(EntityEmbeddableTest.suite());
  suite.addTest(InvalidNamedQueryTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.RelationshipModelJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.IsolatedCacheTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  TestSuite suiteFg=new TestSuite();
  suiteFg.setName(""String_Node_Str"");
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupTrackerWeavingTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleSerializeFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupMergeWithCacheTests.suite());
  suite.addTest(suiteFg);
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  suite.addTest(TablePerClassInheritanceDDLTest.suite());
  suite.addTest(ReportQueryMultipleReturnInheritanceTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(EMQueryJUnitTestSuite.suite());
  suite.addTest(ExpressionJUnitTestSuite.suite());
  suite.addTest(IsolatedCacheTestSuite.suite());
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  suite.addTest(TestKeyTypeToManyRelationship.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(JUnitJPQLQueryHelperTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  suite.addTest(JUnitNativeQueryTestSuite.suite());
  suite.addTest(AbstractEntityWithColumnDiscriminatorTest.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationExtendTablesJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.datatypes.DoesRelationConformTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCompositePKJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaSimpleTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(CacheableModelJunitTestEnableSelective.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  fullSuite.addTest(CascadeDeletesJUnitTestSuite.suite());
  fullSuite.addTest(QueryCastTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(FetchGroupAPITests.suite());
  suite.addTest(FetchGroupTrackerWeavingTests.suite());
  suite.addTest(SimpleDefaultFetchGroupTests.suite());
  suite.addTest(SimpleFetchGroupTests.suite());
  suite.addTest(SimpleNamedFetchGroupTests.suite());
  suite.addTest(SimpleSerializeFetchGroupTests.suite());
  suite.addTest(NestedDefaultFetchGroupTests.suite());
  suite.addTest(NestedFetchGroupTests.suite());
  suite.addTest(NestedNamedFetchGroupTests.suite());
  suite.addTest(FetchGroupMergeWithCacheTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(PartitionedTestSuite.suite());
  fullSuite.addTest(PartitionedXMLTestSuite.suite());
  fullSuite.addTest(PLSQLTestSuite.suite());
  fullSuite.addTest(XMLPLSQLTestSuite.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.composite.advanced.EntityManagerJUnitTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(ExtensibilityTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(XMLMappingMetadataCompleteJunitTestCase.suite());
  fullSuite.addTest(PersistenceUnitProcessorTest.suite());
  return fullSuite;
}","public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(IsolatedHashMapTest.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(JPARCMLocalChangeSetTestSuite.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  suite.addTest(AdvancedFetchGroupJunitTest.suite());
  suite.addTest(AdvancedMultiTenantJunitTest.suite());
  suite.addTest(AdvancedMultiTenantSchemaJunitTest.suite());
  suite.addTest(PessimisticLockingExtendedScopeTestSuite.suite());
  suite.addTest(PessimisticLockEntityRefreshTestSuite.suite());
  suite.addTest(UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(ComplexAggregateTestSuite.suite());
  suite.addTest(MetadataCachingTestSuite.suite());
  suite.addTest(OptimisticLockForceIncrementTestSuite.suite());
  suite.addTest(ConfigPUTestSuite.suite());
  suite.addTest(NamedQueryJUnitTest.suite());
  suite.addTest(EntityEmbeddableTest.suite());
  suite.addTest(InvalidNamedQueryTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.RelationshipModelJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.IsolatedCacheTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  TestSuite suiteFg=new TestSuite();
  suiteFg.setName(""String_Node_Str"");
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupTrackerWeavingTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleSerializeFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupMergeWithCacheTests.suite());
  suite.addTest(suiteFg);
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  suite.addTest(TablePerClassInheritanceDDLTest.suite());
  suite.addTest(ReportQueryMultipleReturnInheritanceTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(EMQueryJUnitTestSuite.suite());
  suite.addTest(ExpressionJUnitTestSuite.suite());
  suite.addTest(IsolatedCacheTestSuite.suite());
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  suite.addTest(TestKeyTypeToManyRelationship.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(JUnitJPQLQueryHelperTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  suite.addTest(JUnitNativeQueryTestSuite.suite());
  suite.addTest(AbstractEntityWithColumnDiscriminatorTest.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationExtendTablesJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.datatypes.DoesRelationConformTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCompositePKJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaSimpleTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(CacheableModelJunitTestEnableSelective.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  fullSuite.addTest(CascadeDeletesJUnitTestSuite.suite());
  fullSuite.addTest(QueryCastTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(FetchGroupAPITests.suite());
  suite.addTest(FetchGroupTrackerWeavingTests.suite());
  suite.addTest(SimpleDefaultFetchGroupTests.suite());
  suite.addTest(SimpleFetchGroupTests.suite());
  suite.addTest(SimpleNamedFetchGroupTests.suite());
  suite.addTest(SimpleSerializeFetchGroupTests.suite());
  suite.addTest(NestedDefaultFetchGroupTests.suite());
  suite.addTest(NestedFetchGroupTests.suite());
  suite.addTest(NestedNamedFetchGroupTests.suite());
  suite.addTest(FetchGroupMergeWithCacheTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(PartitionedTestSuite.suite());
  fullSuite.addTest(PartitionedXMLTestSuite.suite());
  fullSuite.addTest(PLSQLTestSuite.suite());
  fullSuite.addTest(XMLPLSQLTestSuite.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.composite.advanced.EntityManagerJUnitTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(ExtensibilityTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(XMLMappingMetadataCompleteJunitTestCase.suite());
  fullSuite.addTest(PersistenceUnitProcessorTest.suite());
  return fullSuite;
}"
63313,"Expression findQueryExpressionImp(String variableName){
  Expression expression=getQueryExpressionImp(variableName);
  if ((expression == null) && (parent != null)) {
    expression=parent.findQueryExpressionImp(variableName);
    if (expression != null && expression.isExpressionBuilder()) {
      expression=(Expression)expression.clone();
    }
  }
  return expression;
}","Expression findQueryExpressionImp(String variableName){
  Expression expression=getQueryExpressionImp(variableName);
  if ((expression == null) && (parent != null)) {
    expression=parent.findQueryExpressionImp(variableName);
  }
  return expression;
}"
63314,"public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
  addTableDefinition(buildCMP3_OYSTERTable());
  addTableDefinition(buildCMP3_PEARLTable());
  addTableDefinition(buildCMP3_PEARL_HISTTable());
  addTableDefinition(buildJobTable());
  addTableDefinition(buildEventTable());
  addTableDefinition(buildCMP3_TODOLISTTable());
  addTableDefinition(buildCMP3_TODOLISTITEMTable());
  addTableDefinition(buildJPA_WIDGETTable());
  addTableDefinition(buildJPA_WIDGET_PARTTable());
  addTableDefinition(buildJPA_WIDGET_HOLDER_ATable());
  addTableDefinition(buildJPA_WIDGET_HOLDER_BTable());
}","public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
  addTableDefinition(buildCMP3_OYSTERTable());
  addTableDefinition(buildCMP3_PEARLTable());
  addTableDefinition(buildCMP3_PEARL_HISTTable());
  addTableDefinition(buildJobTable());
  addTableDefinition(buildEventTable());
  addTableDefinition(buildCMP3_TODOLISTTable());
  addTableDefinition(buildCMP3_TODOLISTITEMTable());
}"
63315,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63316,"Expression findQueryExpressionImp(String variableName){
  Expression expression=getQueryExpressionImp(variableName);
  if ((expression == null) && (parent != null)) {
    expression=parent.findQueryExpressionImp(variableName);
  }
  return expression;
}","Expression findQueryExpressionImp(String variableName){
  Expression expression=getQueryExpressionImp(variableName);
  if ((expression == null) && (parent != null)) {
    expression=parent.findQueryExpressionImp(variableName);
    if (expression != null && expression.isExpressionBuilder()) {
      expression=(Expression)expression.clone();
    }
  }
  return expression;
}"
63317,"public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
  addTableDefinition(buildCMP3_OYSTERTable());
  addTableDefinition(buildCMP3_PEARLTable());
  addTableDefinition(buildCMP3_PEARL_HISTTable());
  addTableDefinition(buildJobTable());
  addTableDefinition(buildEventTable());
  addTableDefinition(buildCMP3_TODOLISTTable());
  addTableDefinition(buildCMP3_TODOLISTITEMTable());
}","public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
  addTableDefinition(buildCMP3_OYSTERTable());
  addTableDefinition(buildCMP3_PEARLTable());
  addTableDefinition(buildCMP3_PEARL_HISTTable());
  addTableDefinition(buildJobTable());
  addTableDefinition(buildEventTable());
  addTableDefinition(buildCMP3_TODOLISTTable());
  addTableDefinition(buildCMP3_TODOLISTITEMTable());
  addTableDefinition(buildJPA_WIDGETTable());
  addTableDefinition(buildJPA_WIDGET_PARTTable());
  addTableDefinition(buildJPA_WIDGET_HOLDER_ATable());
  addTableDefinition(buildJPA_WIDGET_HOLDER_BTable());
}"
63318,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63319,"public void testDeleteEmployee(){
  Employee employee=new Employee();
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.addResponsibility(""String_Node_Str"");
  employee.addResponsibility(""String_Node_Str"");
  employee.addProject(new Project());
  employee.setWorkWeek(new HashSet<Employee.Weekdays>());
  employee.getWorkWeek().add(Employee.Weekdays.MONDAY);
  employee.getWorkWeek().add(Employee.Weekdays.TUESDAY);
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(employee);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    employee=em.find(Employee.class,employee.getId());
    counter.getSqlStatements().clear();
    em.remove(employee);
    commitTransaction(em);
    if (isWeavingEnabled() && counter.getSqlStatements().size() > 13) {
      fail(""String_Node_Str"" + counter.getSqlStatements().size());
    }
    beginTransaction(em);
    verifyDelete(employee);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","public void testDeleteEmployee(){
  Employee employee=new Employee();
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.addPhoneNumber(new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  employee.addResponsibility(""String_Node_Str"");
  employee.addResponsibility(""String_Node_Str"");
  employee.addProject(new Project());
  employee.setWorkWeek(new HashSet<Employee.Weekdays>());
  employee.getWorkWeek().add(Employee.Weekdays.MONDAY);
  employee.getWorkWeek().add(Employee.Weekdays.TUESDAY);
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(employee);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    employee=em.find(Employee.class,employee.getId());
    counter.getSqlStatements().clear();
    em.remove(employee);
    commitTransaction(em);
    if (isWeavingEnabled() && counter.getSqlStatements().size() > 13) {
      fail(""String_Node_Str"" + counter.getSqlStatements().size());
    }
    beginTransaction(em);
    verifyDelete(employee);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    if (counter != null) {
      counter.remove();
    }
    closeEntityManager(em);
  }
}"
63320,"/** 
 * Test that deleting an employee works correctly. This test case was added in 8177 for 324321 and modified for 325605. The issue is that the status enum will be cascade deleted even if it is not instantiated (lazy) because the owning object does not know if the collection is empty without instantiating it. DB2 will therefore emit warning logs that are printed at FINEST in this lazy case. This test is a modification of testDeleteEmployee() that verifies instantiated lists are also ok 11/17/2010-2.2 Michael O'Brien - 325605: Filter out SQL warnings that are not SQL statements but are logged at a non-warning level.  This affects only implementors of SessionLog that perform log diagnostics/tracking in addition to logging.
 */
public void testDeleteEmployee_with_status_enum_collection_instantiated(){
  Employee employee=new Employee();
  PhoneNumber homePhone=new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhoneNumber faxPhone=new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  employee.addPhoneNumber(homePhone);
  employee.addPhoneNumber(faxPhone);
  employee.addResponsibility(""String_Node_Str"");
  employee.addResponsibility(""String_Node_Str"");
  employee.addProject(new Project());
  employee.setWorkWeek(new HashSet<Employee.Weekdays>());
  employee.getWorkWeek().add(Employee.Weekdays.MONDAY);
  employee.getWorkWeek().add(Employee.Weekdays.TUESDAY);
  employee.setStatus(Employee.EmployeeStatus.PART_TIME);
  homePhone.addStatus(PhoneNumber.PhoneStatus.ASSIGNED);
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(employee);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    employee=em.find(Employee.class,employee.getId());
    employee.getPhoneNumbers();
    counter.getSqlStatements().clear();
    em.remove(employee);
    commitTransaction(em);
    if (isWeavingEnabled() && counter.getSqlStatements().size() > 13) {
      fail(""String_Node_Str"" + counter.getSqlStatements().size());
    }
    beginTransaction(em);
    verifyDelete(employee);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","/** 
 * Test that deleting an employee works correctly. This test case was added in 8177 for 324321 and modified for 325605. The issue is that the status enum will be cascade deleted even if it is not instantiated (lazy) because the owning object does not know if the collection is empty without instantiating it. DB2 will therefore emit warning logs that are printed at FINEST in this lazy case. This test is a modification of testDeleteEmployee() that verifies instantiated lists are also ok 11/17/2010-2.2 Michael O'Brien - 325605: Filter out SQL warnings that are not SQL statements but are logged at a non-warning level.  This affects only implementors of SessionLog that perform log diagnostics/tracking in addition to logging.
 */
public void testDeleteEmployee_with_status_enum_collection_instantiated(){
  Employee employee=new Employee();
  PhoneNumber homePhone=new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  PhoneNumber faxPhone=new PhoneNumber(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  employee.addPhoneNumber(homePhone);
  employee.addPhoneNumber(faxPhone);
  employee.addResponsibility(""String_Node_Str"");
  employee.addResponsibility(""String_Node_Str"");
  employee.addProject(new Project());
  employee.setWorkWeek(new HashSet<Employee.Weekdays>());
  employee.getWorkWeek().add(Employee.Weekdays.MONDAY);
  employee.getWorkWeek().add(Employee.Weekdays.TUESDAY);
  employee.setStatus(Employee.EmployeeStatus.PART_TIME);
  homePhone.addStatus(PhoneNumber.PhoneStatus.ASSIGNED);
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    em.persist(employee);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    employee=em.find(Employee.class,employee.getId());
    employee.getPhoneNumbers();
    counter.getSqlStatements().clear();
    em.remove(employee);
    commitTransaction(em);
    if (isWeavingEnabled() && counter.getSqlStatements().size() > 13) {
      fail(""String_Node_Str"" + counter.getSqlStatements().size());
    }
    beginTransaction(em);
    verifyDelete(employee);
    commitTransaction(em);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    if (counter != null) {
      counter.remove();
    }
    closeEntityManager(em);
  }
}"
63321,"/** 
 * Bug #476018 This test verifies that EclipseLink prints server detection related log messages at appropriate level - FINE in session log, FINER in other cases
 */
public void testServerDetectionLogging(){
  if (isOnServer()) {
    return;
  }
  closeEntityManagerFactory();
  SessionLog original=AbstractSessionLog.getLog();
  try {
    Map<String,Object> properties=new HashMap<>();
    properties.putAll(JUnitTestCaseHelper.getDatabaseProperties());
    properties.put(PersistenceUnitProperties.LOGGING_LEVEL,original.getLevelString());
    properties.put(PersistenceUnitProperties.LOGGING_LOGGER,LogWrapper.class.getName());
    EntityManagerFactoryImpl emf=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(getPersistenceUnitName(),properties);
    SimpleSessionLogWrapper wr=(SimpleSessionLogWrapper)emf.getServerSession().getSessionLog();
    assertEquals(""String_Node_Str"",wr.getLevel() <= SessionLog.FINE,wr.expected());
    LogWrapper lw=new LogWrapper(""String_Node_Str"");
    AbstractSessionLog.setLog(lw);
    AbstractSessionLog.getLog().setSession(null);
    lw.setSession(null);
    ServerPlatformUtils.detectServerPlatform(null);
    assertEquals(""String_Node_Str"",lw.getLevel() <= SessionLog.FINER,lw.expected());
    lw=new LogWrapper(""String_Node_Str"");
    AbstractSessionLog.setLog(lw);
    Session ss=wr.getSession();
    AbstractSessionLog.getLog().setSession(ss);
    AbstractSessionLog.getLog().getSession().setSessionLog(lw);
    lw.setSession(ss);
    ServerPlatformUtils.detectServerPlatform((ServerSession)ss);
    assertEquals(""String_Node_Str"",lw.getLevel() <= SessionLog.FINER,lw.expected());
  }
  finally {
    AbstractSessionLog.setLog(original);
    closeEntityManagerFactory();
  }
}","/** 
 * Bug #476018 This test verifies that EclipseLink prints server detection related log messages at appropriate level - FINE in session log, FINER in other cases
 */
public void testServerDetectionLogging(){
  if (isOnServer()) {
    return;
  }
  closeEntityManagerFactory();
  SessionLog original=AbstractSessionLog.getLog();
  try {
    AbstractSessionLog.setLog(new LogWrapper());
    Map<String,Object> properties=new HashMap<>();
    properties.putAll(JUnitTestCaseHelper.getDatabaseProperties());
    properties.put(PersistenceUnitProperties.LOGGING_LEVEL,original.getLevelString());
    properties.put(PersistenceUnitProperties.LOGGING_LOGGER,LogWrapper.class.getName());
    EntityManagerFactoryImpl emf=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(getPersistenceUnitName(),properties);
    emf.refreshMetadata(properties);
    SimpleSessionLogWrapper wr=(SimpleSessionLogWrapper)emf.getServerSession().getSessionLog();
    assertEquals(""String_Node_Str"",wr.getLevel() <= SessionLog.FINE,wr.expected());
    LogWrapper lw=new LogWrapper(""String_Node_Str"");
    AbstractSessionLog.setLog(lw);
    AbstractSessionLog.getLog().setSession(null);
    lw.setSession(null);
    ServerPlatformUtils.detectServerPlatform(null);
    assertEquals(""String_Node_Str"",lw.getLevel() <= SessionLog.FINER,lw.expected());
    lw=new LogWrapper(""String_Node_Str"");
    AbstractSessionLog.setLog(lw);
    Session ss=wr.getSession();
    AbstractSessionLog.getLog().setSession(ss);
    AbstractSessionLog.getLog().getSession().setSessionLog(lw);
    lw.setSession(ss);
    ServerPlatformUtils.detectServerPlatform((ServerSession)ss);
    assertEquals(""String_Node_Str"",lw.getLevel() <= SessionLog.FINER,lw.expected());
  }
  finally {
    AbstractSessionLog.setLog(original);
    closeEntityManagerFactory();
  }
}"
63322,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  return suite;
}"
63323,"public java.sql.Timestamp convertStringToTimestamp(String sourceString,QName schemaType){
  XMLGregorianCalendar xmlGregorianCalender=null;
  try {
    xmlGregorianCalender=convertStringToXMLGregorianCalendar(sourceString);
  }
 catch (  Exception ex) {
    if (Constants.DATE_QNAME.equals(schemaType)) {
      throw ConversionException.incorrectDateFormat(sourceString);
    }
 else     if (Constants.TIME_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectTimestampTimeFormat(sourceString);
    }
 else     if (Constants.G_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGDayFormat(sourceString);
    }
 else     if (Constants.G_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthFormat(sourceString);
    }
 else     if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthDayFormat(sourceString);
    }
 else     if (Constants.G_YEAR_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearFormat(sourceString);
    }
 else     if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearMonthFormat(sourceString);
    }
 else     if (Constants.DURATION_QNAME.equals(schemaType)) {
      throw new IllegalArgumentException();
    }
 else {
      throw XMLConversionException.incorrectTimestampDateTimeFormat(sourceString);
    }
  }
  if (xmlGregorianCalender == null) {
    return null;
  }
  GregorianCalendar cal=xmlGregorianCalender.toGregorianCalendar();
  if (xmlGregorianCalender.getTimezone() == DatatypeConstants.FIELD_UNDEFINED) {
    cal.setTimeZone(getTimeZone());
  }
  QName calendarQName=xmlGregorianCalender.getXMLSchemaType();
  if (!calendarQName.equals(schemaType)) {
    if (Constants.DATE_QNAME.equals(schemaType)) {
      if (calendarQName.equals(Constants.DATE_TIME_QNAME)) {
        cal.clear(Calendar.HOUR_OF_DAY);
        cal.clear(Calendar.MINUTE);
        cal.clear(Calendar.SECOND);
        cal.clear(Calendar.MILLISECOND);
        return Helper.timestampFromCalendar(cal);
      }
 else {
        throw ConversionException.incorrectDateFormat(sourceString);
      }
    }
 else     if (Constants.TIME_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectTimestampTimeFormat(sourceString);
    }
 else     if (Constants.G_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGDayFormat(sourceString);
    }
 else     if (Constants.G_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthFormat(sourceString);
    }
 else     if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthDayFormat(sourceString);
    }
 else     if (Constants.G_YEAR_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearFormat(sourceString);
    }
 else     if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearMonthFormat(sourceString);
    }
 else     if (Constants.DURATION_QNAME.equals(schemaType)) {
      throw new IllegalArgumentException();
    }
 else     if (Constants.DATE_TIME_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectTimestampDateTimeFormat(sourceString);
    }
  }
  Timestamp timestamp=Helper.timestampFromCalendar(cal);
  String trimmedSourceString=sourceString.trim();
  int decimalIndex=trimmedSourceString.lastIndexOf('.');
  if (-1 == decimalIndex) {
    return timestamp;
  }
 else {
    int timeZoneIndex=trimmedSourceString.lastIndexOf(GMT_SUFFIX);
    if (-1 == timeZoneIndex) {
      timeZoneIndex=trimmedSourceString.lastIndexOf('-');
      if (timeZoneIndex < decimalIndex) {
        timeZoneIndex=-1;
      }
      if (-1 == timeZoneIndex) {
        timeZoneIndex=trimmedSourceString.lastIndexOf('+');
      }
    }
    String nsString;
    if (-1 == timeZoneIndex) {
      nsString=trimmedSourceString.substring(decimalIndex + 1);
    }
 else {
      nsString=trimmedSourceString.substring((decimalIndex + 1),timeZoneIndex);
    }
    double ns=Long.valueOf(nsString).doubleValue();
    ns=ns * Math.pow(10,9 - nsString.length());
    timestamp.setNanos((int)ns);
    return timestamp;
  }
}","public java.sql.Timestamp convertStringToTimestamp(String sourceString,QName schemaType){
  XMLGregorianCalendar xmlGregorianCalender=null;
  try {
    xmlGregorianCalender=convertStringToXMLGregorianCalendar(sourceString);
  }
 catch (  Exception ex) {
    if (Constants.DATE_QNAME.equals(schemaType)) {
      throw ConversionException.incorrectDateFormat(sourceString);
    }
 else     if (Constants.TIME_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectTimestampTimeFormat(sourceString);
    }
 else     if (Constants.G_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGDayFormat(sourceString);
    }
 else     if (Constants.G_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthFormat(sourceString);
    }
 else     if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthDayFormat(sourceString);
    }
 else     if (Constants.G_YEAR_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearFormat(sourceString);
    }
 else     if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearMonthFormat(sourceString);
    }
 else     if (Constants.DURATION_QNAME.equals(schemaType)) {
      throw new IllegalArgumentException();
    }
 else {
      throw XMLConversionException.incorrectTimestampDateTimeFormat(sourceString);
    }
  }
  if (xmlGregorianCalender == null) {
    return null;
  }
  Calendar cal=this.toCalendar(xmlGregorianCalender);
  if (xmlGregorianCalender.getTimezone() == DatatypeConstants.FIELD_UNDEFINED) {
    cal.setTimeZone(getTimeZone());
  }
  QName calendarQName=xmlGregorianCalender.getXMLSchemaType();
  if (!calendarQName.equals(schemaType)) {
    if (Constants.DATE_QNAME.equals(schemaType)) {
      if (calendarQName.equals(Constants.DATE_TIME_QNAME)) {
        cal.clear(Calendar.HOUR_OF_DAY);
        cal.clear(Calendar.MINUTE);
        cal.clear(Calendar.SECOND);
        cal.clear(Calendar.MILLISECOND);
        return Helper.timestampFromCalendar(cal);
      }
 else {
        throw ConversionException.incorrectDateFormat(sourceString);
      }
    }
 else     if (Constants.TIME_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectTimestampTimeFormat(sourceString);
    }
 else     if (Constants.G_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGDayFormat(sourceString);
    }
 else     if (Constants.G_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthFormat(sourceString);
    }
 else     if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGMonthDayFormat(sourceString);
    }
 else     if (Constants.G_YEAR_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearFormat(sourceString);
    }
 else     if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectGYearMonthFormat(sourceString);
    }
 else     if (Constants.DURATION_QNAME.equals(schemaType)) {
      throw new IllegalArgumentException();
    }
 else     if (Constants.DATE_TIME_QNAME.equals(schemaType)) {
      throw XMLConversionException.incorrectTimestampDateTimeFormat(sourceString);
    }
  }
  Timestamp timestamp=Helper.timestampFromCalendar(cal);
  String trimmedSourceString=sourceString.trim();
  int decimalIndex=trimmedSourceString.lastIndexOf('.');
  if (-1 == decimalIndex) {
    return timestamp;
  }
 else {
    int timeZoneIndex=trimmedSourceString.lastIndexOf(GMT_SUFFIX);
    if (-1 == timeZoneIndex) {
      timeZoneIndex=trimmedSourceString.lastIndexOf('-');
      if (timeZoneIndex < decimalIndex) {
        timeZoneIndex=-1;
      }
      if (-1 == timeZoneIndex) {
        timeZoneIndex=trimmedSourceString.lastIndexOf('+');
      }
    }
    String nsString;
    if (-1 == timeZoneIndex) {
      nsString=trimmedSourceString.substring(decimalIndex + 1);
    }
 else {
      nsString=trimmedSourceString.substring((decimalIndex + 1),timeZoneIndex);
    }
    double ns=Long.valueOf(nsString).doubleValue();
    ns=ns * Math.pow(10,9 - nsString.length());
    timestamp.setNanos((int)ns);
    return timestamp;
  }
}"
63324,"/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (Constants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string,sourceDate);
  }
  if (Constants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
  if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (Constants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setGregorianChange(new Date(Long.MIN_VALUE));
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string,sourceDate);
}","/** 
 * This method returns a string representing a given Timestamp based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
private String stringFromTimestamp(Timestamp sourceDate,QName schemaType){
  if (Constants.DATE_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTime(sourceDate);
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.TIME_QNAME.equals(schemaType)) {
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTimeInMillis(sourceDate.getTime());
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendNanos(string,sourceDate);
    return appendTimeZone(string,sourceDate);
  }
  if (Constants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
  if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    Calendar cal=Calendar.getInstance(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (Constants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  Calendar cal=Calendar.getInstance(getTimeZone());
  cal.setTime(sourceDate);
  if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
    xgc.setYear(-cal.get(Calendar.YEAR));
  }
 else {
    xgc.setYear(cal.get(Calendar.YEAR));
  }
  xgc.setMonth(cal.get(Calendar.MONTH) + 1);
  xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
  xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
  xgc.setMinute(cal.get(Calendar.MINUTE));
  xgc.setSecond(cal.get(Calendar.SECOND));
  String string=xgc.toXMLFormat();
  string=appendNanos(string,sourceDate);
  return appendTimeZone(string,sourceDate);
}"
63325,"/** 
 * INTERNAL: For CR#2456 if this is part of an objExp.equal(objExp), do not need to add additional expressions to normalizer both times, and the foreign key join replaces the equal expression.
 */
public Expression normalize(ExpressionNormalizer normalizer,Expression base,List<Expression> foreignKeyJoinPointer){
  if (this.hasBeenNormalized) {
    return this;
  }
  Expression clonedExpression=checkJoinForSubSelectWithParent(normalizer,base,foreignKeyJoinPointer);
  if (clonedExpression != null) {
    return clonedExpression;
  }
  super.normalize(normalizer);
  DatabaseMapping mapping=getMapping();
  SQLSelectStatement statement=normalizer.getStatement();
  if ((mapping != null) && mapping.isDirectToXMLTypeMapping()) {
    statement.setRequiresAliases(true);
  }
  if (isAttribute()) {
    return this;
  }
  ReadQuery query=normalizer.getStatement().getQuery();
  if ((query != null) && query.shouldCacheQueryResults()) {
    if ((mapping != null) && (mapping.getReferenceDescriptor().getJavaClass() != null)) {
      query.getQueryResultsCachePolicy().getInvalidationClasses().add(mapping.getReferenceDescriptor().getJavaClass());
    }
 else {
      QueryKey queryKey=getQueryKeyOrNull();
      if ((queryKey != null) && queryKey.isForeignReferenceQueryKey()) {
        query.getQueryResultsCachePolicy().getInvalidationClasses().add(((ForeignReferenceQueryKey)queryKey).getReferenceClass());
      }
    }
  }
  if ((mapping != null) && (mapping.isReferenceMapping() || mapping.isStructureMapping())) {
    statement.setRequiresAliases(true);
    return this;
  }
  if (shouldQueryToManyRelationship() && (!statement.isDistinctComputed()) && (!statement.isAggregateSelect())) {
    statement.useDistinct();
  }
  if ((mapping != null) && mapping.isNestedTableMapping()) {
    if (!shouldQueryToManyRelationship()) {
      return this;
    }
    statement.dontUseDistinct();
  }
  if (this.onClause != null) {
    this.onClause=this.onClause.normalize(normalizer);
  }
  Expression mappingExpression=mappingCriteria(base);
  if (mappingExpression != null) {
    mappingExpression=mappingExpression.normalize(normalizer);
  }
  if (mappingExpression != null) {
    if (shouldUseOuterJoin() && (getSession().getPlatform().isInformixOuterJoin())) {
      setOuterJoinExpIndex(statement.addOuterJoinExpressionsHolders(this,mappingExpression,null,null));
      normalizer.addAdditionalExpression(mappingExpression.and(additionalExpressionCriteria()));
      return this;
    }
 else     if ((shouldUseOuterJoin() && (!getSession().getPlatform().shouldPrintOuterJoinInWhereClause())) || (!getSession().getPlatform().shouldPrintInnerJoinInWhereClause())) {
      setOuterJoinExpIndex(statement.addOuterJoinExpressionsHolders(this,mappingExpression,additionalExpressionCriteriaMap(),null));
      if ((getDescriptor() != null) && (getDescriptor().getHistoryPolicy() != null)) {
        Expression historyOnClause=getDescriptor().getHistoryPolicy().additionalHistoryExpression(this,this,0);
        if (getOnClause() != null) {
          setOnClause(getOnClause().and(historyOnClause));
        }
 else {
          setOnClause(historyOnClause);
        }
      }
      return this;
    }
 else     if (isUsingOuterJoinForMultitableInheritance() && (!getSession().getPlatform().shouldPrintOuterJoinInWhereClause())) {
      setOuterJoinExpIndex(statement.addOuterJoinExpressionsHolders(null,null,additionalExpressionCriteriaMap(),mapping.getReferenceDescriptor()));
    }
    if (foreignKeyJoinPointer != null) {
      foreignKeyJoinPointer.add(mappingExpression.and(this.onClause));
    }
 else {
      normalizer.addAdditionalExpression(mappingExpression.and(additionalExpressionCriteria()).and(this.onClause));
    }
  }
  return this;
}","/** 
 * INTERNAL: For CR#2456 if this is part of an objExp.equal(objExp), do not need to add additional expressions to normalizer both times, and the foreign key join replaces the equal expression.
 */
public Expression normalize(ExpressionNormalizer normalizer,Expression base,List<Expression> foreignKeyJoinPointer){
  if (this.hasBeenNormalized) {
    return this;
  }
  Expression clonedExpression=checkJoinForSubSelectWithParent(normalizer,base,foreignKeyJoinPointer);
  if (clonedExpression != null) {
    return clonedExpression;
  }
  super.normalize(normalizer);
  DatabaseMapping mapping=getMapping();
  SQLSelectStatement statement=normalizer.getStatement();
  if ((mapping != null) && mapping.isDirectToXMLTypeMapping()) {
    statement.setRequiresAliases(true);
  }
  if (isAttribute()) {
    return this;
  }
  ReadQuery query=normalizer.getStatement().getQuery();
  if ((query != null) && query.shouldCacheQueryResults()) {
    if ((mapping != null) && (mapping.getReferenceDescriptor() != null) && (mapping.getReferenceDescriptor().getJavaClass() != null)) {
      query.getQueryResultsCachePolicy().getInvalidationClasses().add(mapping.getReferenceDescriptor().getJavaClass());
    }
 else {
      QueryKey queryKey=getQueryKeyOrNull();
      if ((queryKey != null) && queryKey.isForeignReferenceQueryKey()) {
        query.getQueryResultsCachePolicy().getInvalidationClasses().add(((ForeignReferenceQueryKey)queryKey).getReferenceClass());
      }
    }
  }
  if ((mapping != null) && (mapping.isReferenceMapping() || mapping.isStructureMapping())) {
    statement.setRequiresAliases(true);
    return this;
  }
  if (shouldQueryToManyRelationship() && (!statement.isDistinctComputed()) && (!statement.isAggregateSelect())) {
    statement.useDistinct();
  }
  if ((mapping != null) && mapping.isNestedTableMapping()) {
    if (!shouldQueryToManyRelationship()) {
      return this;
    }
    statement.dontUseDistinct();
  }
  if (this.onClause != null) {
    this.onClause=this.onClause.normalize(normalizer);
  }
  Expression mappingExpression=mappingCriteria(base);
  if (mappingExpression != null) {
    mappingExpression=mappingExpression.normalize(normalizer);
  }
  if (mappingExpression != null) {
    if (shouldUseOuterJoin() && (getSession().getPlatform().isInformixOuterJoin())) {
      setOuterJoinExpIndex(statement.addOuterJoinExpressionsHolders(this,mappingExpression,null,null));
      normalizer.addAdditionalExpression(mappingExpression.and(additionalExpressionCriteria()));
      return this;
    }
 else     if ((shouldUseOuterJoin() && (!getSession().getPlatform().shouldPrintOuterJoinInWhereClause())) || (!getSession().getPlatform().shouldPrintInnerJoinInWhereClause())) {
      setOuterJoinExpIndex(statement.addOuterJoinExpressionsHolders(this,mappingExpression,additionalExpressionCriteriaMap(),null));
      if ((getDescriptor() != null) && (getDescriptor().getHistoryPolicy() != null)) {
        Expression historyOnClause=getDescriptor().getHistoryPolicy().additionalHistoryExpression(this,this,0);
        if (getOnClause() != null) {
          setOnClause(getOnClause().and(historyOnClause));
        }
 else {
          setOnClause(historyOnClause);
        }
      }
      return this;
    }
 else     if (isUsingOuterJoinForMultitableInheritance() && (!getSession().getPlatform().shouldPrintOuterJoinInWhereClause())) {
      setOuterJoinExpIndex(statement.addOuterJoinExpressionsHolders(null,null,additionalExpressionCriteriaMap(),mapping.getReferenceDescriptor()));
    }
    if (foreignKeyJoinPointer != null) {
      foreignKeyJoinPointer.add(mappingExpression.and(this.onClause));
    }
 else {
      normalizer.addAdditionalExpression(mappingExpression.and(additionalExpressionCriteria()).and(this.onClause));
    }
  }
  return this;
}"
63326,"public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
  addTableDefinition(buildCMP3_OYSTERTable());
  addTableDefinition(buildCMP3_PEARLTable());
  addTableDefinition(buildCMP3_PEARL_HISTTable());
  addTableDefinition(buildJobTable());
  addTableDefinition(buildEventTable());
}","public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
  addTableDefinition(buildCMP3_OYSTERTable());
  addTableDefinition(buildCMP3_PEARLTable());
  addTableDefinition(buildCMP3_PEARL_HISTTable());
  addTableDefinition(buildJobTable());
  addTableDefinition(buildEventTable());
  addTableDefinition(buildCMP3_TODOLISTTable());
  addTableDefinition(buildCMP3_TODOLISTITEMTable());
}"
63327,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63328,"public TableDefinition buildCMP3_PEARL_HISTTable(){
  TableDefinition table=buildCMP3_PEARLTable();
  table.setName(table.getName() + ""String_Node_Str"");
  FieldDefinition fieldSTART=new FieldDefinition();
  fieldSTART.setName(""String_Node_Str"");
  fieldSTART.setTypeName(""String_Node_Str"");
  fieldSTART.setIsPrimaryKey(true);
  fieldSTART.setIsIdentity(false);
  fieldSTART.setUnique(false);
  fieldSTART.setShouldAllowNull(true);
  table.addField(fieldSTART);
  FieldDefinition fieldEND=new FieldDefinition();
  fieldEND.setName(""String_Node_Str"");
  fieldEND.setTypeName(""String_Node_Str"");
  fieldEND.setIsPrimaryKey(false);
  fieldEND.setIsIdentity(false);
  fieldEND.setUnique(false);
  fieldEND.setShouldAllowNull(true);
  table.addField(fieldEND);
  return table;
}","public TableDefinition buildCMP3_PEARL_HISTTable(){
  TableDefinition table=buildCMP3_PEARLTable();
  table.setName(table.getName() + ""String_Node_Str"");
  FieldDefinition fieldSTART=new FieldDefinition();
  fieldSTART.setName(""String_Node_Str"");
  fieldSTART.setTypeName(""String_Node_Str"");
  fieldSTART.setIsPrimaryKey(true);
  fieldSTART.setIsIdentity(false);
  fieldSTART.setUnique(false);
  fieldSTART.setShouldAllowNull(false);
  table.addField(fieldSTART);
  FieldDefinition fieldEND=new FieldDefinition();
  fieldEND.setName(""String_Node_Str"");
  fieldEND.setTypeName(""String_Node_Str"");
  fieldEND.setIsPrimaryKey(false);
  fieldEND.setIsIdentity(false);
  fieldEND.setUnique(false);
  fieldEND.setShouldAllowNull(true);
  table.addField(fieldEND);
  return table;
}"
63329,"/** 
 * INTERNAL: Return the original valueHolder object. Access to the underlying valueholder may be required when serializing the valueholder or converting the valueHolder to another type.
 */
@Override public Object getOriginalValueHolder(Object unitOfWorkIndirectionObject,AbstractSession session){
  if (!(unitOfWorkIndirectionObject instanceof IndirectContainer)) {
    return new ValueHolder();
  }
  IndirectContainer container=(IndirectContainer)unitOfWorkIndirectionObject;
  if (container.getValueHolder() instanceof WrappingValueHolder) {
    ValueHolderInterface valueHolder=((WrappingValueHolder)container.getValueHolder()).getWrappedValueHolder();
    if ((valueHolder == null) && session.isRemoteUnitOfWork()) {
      RemoteSessionController controller=((RemoteUnitOfWork)session).getParentSessionController();
      valueHolder=controller.getRemoteValueHolders().get(((UnitOfWorkValueHolder)container.getValueHolder()).getWrappedValueHolderRemoteID());
    }
    if (!session.isProtectedSession()) {
      while (valueHolder instanceof WrappingValueHolder && ((WrappingValueHolder)valueHolder).getWrappedValueHolder() != null) {
        valueHolder=((WrappingValueHolder)valueHolder).getWrappedValueHolder();
      }
    }
    return valueHolder;
  }
 else {
    return container.getValueHolder();
  }
}","/** 
 * INTERNAL: Return the original valueHolder object. Access to the underlying valueholder may be required when serializing the valueholder or converting the valueHolder to another type.
 */
@Override public Object getOriginalValueHolder(Object unitOfWorkIndirectionObject,AbstractSession session){
  if (!(unitOfWorkIndirectionObject instanceof IndirectContainer)) {
    return new ValueHolder();
  }
  IndirectContainer container=(IndirectContainer)unitOfWorkIndirectionObject;
  if (container.getValueHolder() instanceof WrappingValueHolder) {
    ValueHolderInterface valueHolder=((WrappingValueHolder)container.getValueHolder()).getWrappedValueHolder();
    if ((valueHolder == null) && session.isRemoteUnitOfWork()) {
      RemoteSessionController controller=((RemoteUnitOfWork)session).getParentSessionController();
      valueHolder=controller.getRemoteValueHolders().get(((UnitOfWorkValueHolder)container.getValueHolder()).getWrappedValueHolderRemoteID());
    }
    if (!session.isProtectedSession()) {
      while (valueHolder instanceof WrappingValueHolder && ((WrappingValueHolder)valueHolder).getWrappedValueHolder() != null) {
        valueHolder=((WrappingValueHolder)valueHolder).getWrappedValueHolder();
      }
    }
    if ((valueHolder != null) && (valueHolder instanceof DatabaseValueHolder)) {
      ((DatabaseValueHolder)valueHolder).releaseWrappedValueHolder(session);
    }
    return valueHolder;
  }
 else {
    return container.getValueHolder();
  }
}"
63330,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63331,"/** 
 * INTERNAL: Return the value of the reference attribute or a value holder. Check whether the mapping's attribute should be optimized through batch and joining.
 * @param shouldUseSopObject indicates whether sopObject stored in the row should be used to extract the value (and fields/values stored in the row ignored).
 */
protected Object valueFromRowInternal(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession,boolean shouldUseSopObject) throws DatabaseException {
  ReadQuery targetQuery=this.selectionQuery;
  if (shouldUseSopObject) {
    Object sopAttribute=getAttributeValueFromObject(row.getSopObject());
    Object sopRealAttribute;
    if (isCollectionMapping()) {
      if (sopAttribute == null) {
        return getContainerPolicy().containerInstance();
      }
      sopRealAttribute=getIndirectionPolicy().getRealAttributeValueFromObject(row.getSopObject(),sopAttribute);
      if (getContainerPolicy().isEmpty(sopRealAttribute)) {
        return sopAttribute;
      }
    }
 else {
      if (sopAttribute == null) {
        return this.indirectionPolicy.nullValueFromRow();
      }
      sopRealAttribute=getIndirectionPolicy().getRealAttributeValueFromObject(row.getSopObject(),sopAttribute);
      if (sopRealAttribute == null) {
        return sopAttribute;
      }
    }
    DatabaseRecord sopRow=new DatabaseRecord(0);
    sopRow.setSopObject(sopRealAttribute);
    row=sopRow;
  }
  if (targetQuery.isObjectLevelReadQuery() && targetQuery.getDescriptor().hasFetchGroupManager()) {
    FetchGroup sourceFG=sourceQuery.getExecutionFetchGroup(this.getDescriptor());
    if (sourceFG != null) {
      FetchGroup targetFetchGroup=sourceFG.getGroup(getAttributeName());
      if (targetFetchGroup != null) {
        if (targetQuery.shouldPrepare()) {
          targetQuery.checkPrepare(executionSession,row);
        }
        targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
        targetQuery.setIsExecutionClone(true);
        ((ObjectLevelReadQuery)targetQuery).setFetchGroup(targetFetchGroup);
      }
    }
  }
  if (!this.indirectionPolicy.usesIndirection() || shouldUseSopObject) {
    if (targetQuery == this.selectionQuery) {
      if (targetQuery.shouldPrepare()) {
        targetQuery.checkPrepare(executionSession,row);
      }
      targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
      targetQuery.setIsExecutionClone(true);
    }
    targetQuery.setQueryId(sourceQuery.getQueryId());
    if (sourceQuery.usesResultSetAccessOptimization()) {
      targetQuery.setAccessors(sourceQuery.getAccessors());
    }
    ((ObjectLevelReadQuery)targetQuery).setRequiresDeferredLocks(sourceQuery.requiresDeferredLocks());
  }
  if (targetQuery.isObjectLevelReadQuery()) {
    if (sourceQuery.shouldCascadeAllParts() || (this.isPrivateOwned && sourceQuery.shouldCascadePrivateParts()) || (this.cascadeRefresh && sourceQuery.shouldCascadeByMapping())) {
      if (targetQuery == this.selectionQuery) {
        if (targetQuery.shouldPrepare()) {
          targetQuery.checkPrepare(executionSession,row);
        }
        targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
        targetQuery.setIsExecutionClone(true);
      }
      ((ObjectLevelReadQuery)targetQuery).setShouldRefreshIdentityMapResult(sourceQuery.shouldRefreshIdentityMapResult());
      targetQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
      if (targetQuery.shouldMaintainCache()) {
        targetQuery.setShouldMaintainCache(sourceQuery.shouldMaintainCache());
      }
      if (((ObjectLevelReadQuery)sourceQuery).hasAsOfClause()) {
        targetQuery.setSelectionCriteria((Expression)targetQuery.getSelectionCriteria().clone());
        ((ObjectLevelReadQuery)targetQuery).setAsOfClause(((ObjectLevelReadQuery)sourceQuery).getAsOfClause());
      }
    }
    if (isExtendingPessimisticLockScope(sourceQuery)) {
      if (this.extendPessimisticLockScope == ExtendPessimisticLockScope.TARGET_QUERY) {
        if (targetQuery == this.selectionQuery) {
          if (targetQuery.shouldPrepare()) {
            targetQuery.checkPrepare(executionSession,row);
          }
          targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
          targetQuery.setIsExecutionClone(true);
        }
        extendPessimisticLockScopeInTargetQuery((ObjectLevelReadQuery)targetQuery,sourceQuery);
      }
 else       if (this.extendPessimisticLockScope == ExtendPessimisticLockScope.DEDICATED_QUERY) {
        ReadQuery dedicatedQuery=getExtendPessimisticLockScopeDedicatedQuery(executionSession,sourceQuery.getLockMode());
        executionSession.executeQuery(dedicatedQuery,row);
      }
    }
  }
  targetQuery=prepareHistoricalQuery(targetQuery,sourceQuery,executionSession);
  return this.indirectionPolicy.valueFromQuery(targetQuery,row,executionSession);
}","/** 
 * INTERNAL: Return the value of the reference attribute or a value holder. Check whether the mapping's attribute should be optimized through batch and joining.
 * @param shouldUseSopObject indicates whether sopObject stored in the row should be used to extract the value (and fields/values stored in the row ignored).
 */
protected Object valueFromRowInternal(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession,boolean shouldUseSopObject) throws DatabaseException {
  ReadQuery targetQuery=this.selectionQuery;
  if (shouldUseSopObject) {
    Object sopAttribute=getAttributeValueFromObject(row.getSopObject());
    Object sopRealAttribute;
    if (isCollectionMapping()) {
      if (sopAttribute == null) {
        return getContainerPolicy().containerInstance();
      }
      sopRealAttribute=getIndirectionPolicy().getRealAttributeValueFromObject(row.getSopObject(),sopAttribute);
      if (getContainerPolicy().isEmpty(sopRealAttribute)) {
        return sopAttribute;
      }
    }
 else {
      if (sopAttribute == null) {
        return this.indirectionPolicy.nullValueFromRow();
      }
      sopRealAttribute=getIndirectionPolicy().getRealAttributeValueFromObject(row.getSopObject(),sopAttribute);
      if (sopRealAttribute == null) {
        return sopAttribute;
      }
    }
    DatabaseRecord sopRow=new DatabaseRecord(0);
    sopRow.setSopObject(sopRealAttribute);
    row=sopRow;
  }
  if (executionSession.isHistoricalSession() && !targetQuery.isPrepared()) {
    targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
    targetQuery.setIsExecutionClone(true);
  }
  if (targetQuery.isObjectLevelReadQuery() && targetQuery.getDescriptor().hasFetchGroupManager()) {
    FetchGroup sourceFG=sourceQuery.getExecutionFetchGroup(this.getDescriptor());
    if (sourceFG != null) {
      FetchGroup targetFetchGroup=sourceFG.getGroup(getAttributeName());
      if (targetFetchGroup != null) {
        if (targetQuery.shouldPrepare()) {
          targetQuery.checkPrepare(executionSession,row);
        }
        targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
        targetQuery.setIsExecutionClone(true);
        ((ObjectLevelReadQuery)targetQuery).setFetchGroup(targetFetchGroup);
      }
    }
  }
  if (!this.indirectionPolicy.usesIndirection() || shouldUseSopObject) {
    if (targetQuery == this.selectionQuery) {
      if (targetQuery.shouldPrepare()) {
        targetQuery.checkPrepare(executionSession,row);
      }
      targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
      targetQuery.setIsExecutionClone(true);
    }
    targetQuery.setQueryId(sourceQuery.getQueryId());
    if (sourceQuery.usesResultSetAccessOptimization()) {
      targetQuery.setAccessors(sourceQuery.getAccessors());
    }
    ((ObjectLevelReadQuery)targetQuery).setRequiresDeferredLocks(sourceQuery.requiresDeferredLocks());
  }
  if (targetQuery.isObjectLevelReadQuery()) {
    if (sourceQuery.shouldCascadeAllParts() || (this.isPrivateOwned && sourceQuery.shouldCascadePrivateParts()) || (this.cascadeRefresh && sourceQuery.shouldCascadeByMapping())) {
      if (targetQuery == this.selectionQuery) {
        if (targetQuery.shouldPrepare()) {
          targetQuery.checkPrepare(executionSession,row);
        }
        targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
        targetQuery.setIsExecutionClone(true);
      }
      ((ObjectLevelReadQuery)targetQuery).setShouldRefreshIdentityMapResult(sourceQuery.shouldRefreshIdentityMapResult());
      targetQuery.setCascadePolicy(sourceQuery.getCascadePolicy());
      if (targetQuery.shouldMaintainCache()) {
        targetQuery.setShouldMaintainCache(sourceQuery.shouldMaintainCache());
      }
      if (((ObjectLevelReadQuery)sourceQuery).hasAsOfClause()) {
        targetQuery.setSelectionCriteria((Expression)targetQuery.getSelectionCriteria().clone());
        ((ObjectLevelReadQuery)targetQuery).setAsOfClause(((ObjectLevelReadQuery)sourceQuery).getAsOfClause());
      }
    }
    if (isExtendingPessimisticLockScope(sourceQuery)) {
      if (this.extendPessimisticLockScope == ExtendPessimisticLockScope.TARGET_QUERY) {
        if (targetQuery == this.selectionQuery) {
          if (targetQuery.shouldPrepare()) {
            targetQuery.checkPrepare(executionSession,row);
          }
          targetQuery=(ObjectLevelReadQuery)targetQuery.clone();
          targetQuery.setIsExecutionClone(true);
        }
        extendPessimisticLockScopeInTargetQuery((ObjectLevelReadQuery)targetQuery,sourceQuery);
      }
 else       if (this.extendPessimisticLockScope == ExtendPessimisticLockScope.DEDICATED_QUERY) {
        ReadQuery dedicatedQuery=getExtendPessimisticLockScopeDedicatedQuery(executionSession,sourceQuery.getLockMode());
        executionSession.executeQuery(dedicatedQuery,row);
      }
    }
  }
  targetQuery=prepareHistoricalQuery(targetQuery,sourceQuery,executionSession);
  return this.indirectionPolicy.valueFromQuery(targetQuery,row,executionSession);
}"
63332,"public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
}","public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_HINGETable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
  addTableDefinition(buildCMP3_OYSTERTable());
  addTableDefinition(buildCMP3_PEARLTable());
  addTableDefinition(buildCMP3_PEARL_HISTTable());
}"
63333,"public void testTimeStampLTZ(){
  int year=2000, month=3, date=21, hour=11, minute=45, second=50;
  Integer tsId=null;
  Calendar originalCal=null, dbCal;
  String zoneId=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneId));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,hour,minute,second);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsLTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
  }
 catch (  Exception e) {
    e.printStackTrace();
    rollbackTransaction(em);
    throw e;
  }
 finally {
    clearCache();
    dbCal=em.find(TStamp.class,tsId).getTsLTZ();
    closeEntityManager(em);
  }
  dbCal.setTimeZone(TimeZone.getTimeZone(zoneId));
  assertEquals(""String_Node_Str"",year,dbCal.get(Calendar.YEAR));
  assertEquals(""String_Node_Str"",month,dbCal.get(Calendar.MONTH));
  assertEquals(""String_Node_Str"",date,dbCal.get(Calendar.DATE));
  assertEquals(""String_Node_Str"",originalCal.get(Calendar.HOUR_OF_DAY),dbCal.get(Calendar.HOUR_OF_DAY));
  assertEquals(""String_Node_Str"",minute,dbCal.get(Calendar.MINUTE));
  assertEquals(""String_Node_Str"",second,dbCal.get(Calendar.SECOND));
}","public void testTimeStampLTZ(){
  int year=2000, month=3, date=21, hour=11, minute=45, second=50;
  Integer tsId=null;
  Calendar originalCal=null, dbCal;
  String zoneId=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneId));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,hour,minute,second);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsLTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
  }
 catch (  Exception e) {
    e.printStackTrace();
    rollbackTransaction(em);
    throw e;
  }
 finally {
    clearCache();
    dbCal=em.find(TStamp.class,tsId).getTsLTZ();
    closeEntityManager(em);
  }
  dbCal.getTime();
  dbCal.setTimeZone(TimeZone.getTimeZone(zoneId));
  assertEquals(""String_Node_Str"",year,dbCal.get(Calendar.YEAR));
  assertEquals(""String_Node_Str"",month,dbCal.get(Calendar.MONTH));
  assertEquals(""String_Node_Str"",date,dbCal.get(Calendar.DATE));
  assertEquals(""String_Node_Str"",originalCal.get(Calendar.HOUR_OF_DAY),dbCal.get(Calendar.HOUR_OF_DAY));
  assertEquals(""String_Node_Str"",minute,dbCal.get(Calendar.MINUTE));
  assertEquals(""String_Node_Str"",second,dbCal.get(Calendar.SECOND));
}"
63334,"public void addTests(){
  addTest(new ConcurrencyTest());
  addTest(new AppendLockTest());
  addTest(new UpdateCacheKeyPropertiesTest());
  addTest(getReadEmployeeTestSuite());
  addTest(getAboutToUpdateEventTestSuite());
  addTest(getDescriptorQueryManagerAddQueryTest());
  addTest(getQueryCacheMultithreadedTest());
  addTest(new ConcurrentDecryptionTest());
  addTest(new ConcurrentReadOneToOneInheritanceTest());
  addTest(new ConcurrentReadFetchJoinTest());
  addTest(new ConcurrentReadFetchJoinWithUOWLocksTest());
  addTest(AddDescriptorsMultithreadedTest.AddDescriptorsTest.createMultithreadedTest(3,0));
  addTest(AddDescriptorsMultithreadedTest.SequencePreallocationTest.createMultithreadedTest(10,10000));
  addTest(AddDescriptorsMultithreadedTest.SequencePreallocationTest.createMultithreadedTestWithAddDescriptors(1,100,10));
  addTest(AddDescriptorsMultithreadedTest.InsertTest.createMultithreadedTest(10,10000));
  addTest(AddDescriptorsMultithreadedTest.InsertTest.createMultithreadedTestWithAddDescriptors(1,100,10));
}","public void addTests(){
  addTest(new ConcurrencyTest());
  addTest(new AppendLockTest());
  addTest(new UpdateCacheKeyPropertiesTest());
  addTest(getReadEmployeeTestSuite());
  addTest(getAboutToUpdateEventTestSuite());
  addTest(getDescriptorQueryManagerAddQueryTest());
  addTest(getQueryCacheMultithreadedTest());
  addTest(new ConcurrentDecryptionTest());
  addTest(new ConcurrentReadOneToOneInheritanceTest());
  addTest(new ConcurrentReadFetchJoinTest());
  addTest(new ConcurrentReadFetchJoinWithUOWLocksTest());
  addTest(AddDescriptorsMultithreadedTest.AddDescriptorsTest.createMultithreadedTest(3,0));
  addTest(AddDescriptorsMultithreadedTest.SequencePreallocationTest.createMultithreadedTest(10,10000));
  addTest(AddDescriptorsMultithreadedTest.SequencePreallocationTest.createMultithreadedTestWithAddDescriptors(1,100,10));
  addTest(AddDescriptorsMultithreadedTest.InsertTest.createMultithreadedTest(10,10000));
  addTest(AddDescriptorsMultithreadedTest.InsertTest.createMultithreadedTestWithAddDescriptors(1,100,10));
  addTest(new ConcurrentQueryCacheQueryResultsTest());
}"
63335,"/** 
 * Insert a new element into the linked list of LinkedCacheKeys. New elements (Recently Used) are added at the end (last).
 * @return the added LinkedCacheKey
 */
protected LinkedCacheKey insertLink(LinkedCacheKey key){
  if (key == null) {
    return key;
  }
synchronized (this.first) {
    this.first.getNext().setPrevious(key);
    key.setNext(this.first.getNext());
    key.setPrevious(this.first);
    this.first.setNext(key);
  }
  return key;
}","/** 
 * Insert a new element into the linked list of LinkedCacheKeys. New elements (Recently Used) are added at the end (last). Callers of this method must synchronize on the start of the list (this.first).
 * @return the added LinkedCacheKey
 */
protected LinkedCacheKey insertLink(LinkedCacheKey key){
  if (key == null) {
    return key;
  }
  this.first.getNext().setPrevious(key);
  key.setNext(this.first.getNext());
  key.setPrevious(this.first);
  this.first.setNext(key);
  return key;
}"
63336,"/** 
 * Remove the LinkedCacheKey from the linked list.
 * @return the removed LinkedCacheKey.
 */
protected LinkedCacheKey removeLink(LinkedCacheKey key){
  if (key == null) {
    return key;
  }
synchronized (this.first) {
    if (key.getPrevious() == null || key.getNext() == null) {
      return key;
    }
    key.getPrevious().setNext(key.getNext());
    key.getNext().setPrevious(key.getPrevious());
    key.setNext(null);
    key.setPrevious(null);
  }
  return key;
}","/** 
 * Remove the LinkedCacheKey from the linked list. Callers of this method must synchronize on the start of the list (this.first).
 * @return the removed LinkedCacheKey.
 */
protected LinkedCacheKey removeLink(LinkedCacheKey key){
  if (key == null || key.getPrevious() == null || key.getNext() == null) {
    return key;
  }
  key.getPrevious().setNext(key.getNext());
  key.getNext().setPrevious(key.getPrevious());
  key.setNext(null);
  key.setPrevious(null);
  return key;
}"
63337,"/** 
 * Also insert the link if the cacheKey is put.
 */
protected CacheKey putCacheKeyIfAbsent(CacheKey searchKey){
  CacheKey cacheKey=super.putCacheKeyIfAbsent(searchKey);
  if (cacheKey == null) {
    insertLink((LinkedCacheKey)searchKey);
    ensureFixedSize();
  }
  return cacheKey;
}","/** 
 * Also insert the link if the cacheKey is put.
 */
protected CacheKey putCacheKeyIfAbsent(CacheKey searchKey){
synchronized (this.first) {
    CacheKey cacheKey=super.putCacheKeyIfAbsent(searchKey);
    if (cacheKey == null) {
      insertLink((LinkedCacheKey)searchKey);
      ensureFixedSize();
    }
    return cacheKey;
  }
}"
63338,"/** 
 * Remove the LinkedCacheKey from the cache as well as from the linked list.
 * @return the LinkedCacheKey to be removed.
 */
public Object remove(CacheKey key){
  super.remove(key);
  if (key == null) {
    return null;
  }
  return removeLink((LinkedCacheKey)key).getObject();
}","/** 
 * Remove the LinkedCacheKey from the cache as well as from the linked list.
 * @return the LinkedCacheKey to be removed.
 */
public Object remove(CacheKey key){
synchronized (this.first) {
    super.remove(key);
    if (key == null) {
      return null;
    }
    return removeLink((LinkedCacheKey)key).getObject();
  }
}"
63339,"/** 
 * Add a mapping to the list of mappings that require postCalculateChanges method to be called.
 */
public void addMappingsPostCalculateChanges(DatabaseMapping mapping){
  getMappingsPostCalculateChanges().add(mapping);
}","/** 
 * Add a mapping to the list of mappings that require postCalculateChanges method to be called.
 */
public void addMappingsPostCalculateChanges(DatabaseMapping mapping){
  if (mapping.getReferenceDescriptor() != null) {
    getMappingsPostCalculateChanges().add(mapping);
  }
}"
63340,"/** 
 * INTERNAL: Initialize the state of mapping.
 */
@Override public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.isPrivateOwned && (this.descriptor != null)) {
    this.descriptor.addMappingsPostCalculateChanges(this);
  }
  initializeReferenceDescriptor(session);
  initializeSelectionQuery(session);
  this.indirectionPolicy.initialize();
  if ((this.referenceDescriptor != null) && this.referenceDescriptor.getCachePolicy().isIsolated()) {
    this.isCacheable=false;
  }
}","/** 
 * INTERNAL: Initialize the state of mapping.
 */
@Override public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  initializeReferenceDescriptor(session);
  if (this.isPrivateOwned && (this.descriptor != null)) {
    this.descriptor.addMappingsPostCalculateChanges(this);
  }
  initializeSelectionQuery(session);
  this.indirectionPolicy.initialize();
  if ((this.referenceDescriptor != null) && this.referenceDescriptor.getCachePolicy().isIsolated()) {
    this.isCacheable=false;
  }
}"
63341,"public OrphanRemovalModelTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildVEHICLETable());
  addTableDefinition(buildCHASSISTable());
  addTableDefinition(buildENGINETable());
  addTableDefinition(buildSPARKPLUGTable());
  addTableDefinition(buildWHEELTable());
  addTableDefinition(buildWHEELRIMTable());
  addTableDefinition(buildWHEELNUTTable());
}","public OrphanRemovalModelTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildVEHICLETable());
  addTableDefinition(buildCHASSISTable());
  addTableDefinition(buildENGINETable());
  addTableDefinition(buildSPARKPLUGTable());
  addTableDefinition(buildWHEELTable());
  addTableDefinition(buildWHEELRIMTable());
  addTableDefinition(buildWHEELNUTTable());
  addTableDefinition(buildTIREDETAILTable());
}"
63342,"/** 
 * Test the cascade removal of objects
 */
public void test12MWithCascadeFromOR(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis=new Chassis(1l);
    vehicle.setChassis(chassis);
    Wheel wheel1=new Wheel(1l);
    chassis.addWheel(wheel1);
    WheelNut wheelNut1=new WheelNut();
    WheelNut wheelNut2=new WheelNut();
    WheelNut wheelNut3=new WheelNut();
    WheelNut wheelNut4=new WheelNut();
    wheel1.addWheelNut(wheelNut1);
    wheel1.addWheelNut(wheelNut2);
    wheel1.addWheelNut(wheelNut3);
    wheel1.addWheelNut(wheelNut4);
    em.persist(vehicle);
    WheelNut wheelNut5=new WheelNut();
    WheelNut wheelNut6=new WheelNut();
    wheel1.removeWheelNut(wheelNut3);
    wheel1.removeWheelNut(wheelNut4);
    wheel1.addWheelNut(wheelNut5);
    wheel1.addWheelNut(wheelNut6);
    Wheel wheel2=new Wheel(2l);
    chassis.addWheel(wheel2);
    em.persist(vehicle);
    wheel2.addWheelNut(wheelNut3);
    wheel2.addWheelNut(wheelNut4);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    WheelNut wheelNut3Read=em.find(WheelNut.class,wheelNut3.getId());
    compareObjects(wheelNut3,wheelNut3Read);
    WheelNut wheelNut4Read=em.find(WheelNut.class,wheelNut4.getId());
    compareObjects(wheelNut4,wheelNut4Read);
    Wheel wheel1Read=em.find(Wheel.class,wheel1.getId());
    compareObjects(wheel1,wheel1);
    Wheel wheel2Read=em.find(Wheel.class,wheel2.getId());
    compareObjects(wheel2,wheel2);
    em.remove(em.find(Vehicle.class,vehicle.getId()));
    for (    WheelNut wheelNut : wheel1Read.getWheelNuts()) {
      em.remove(wheelNut);
    }
    for (    WheelNut wheelNut : wheel2Read.getWheelNuts()) {
      em.remove(wheelNut);
    }
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}","/** 
 * Test the cascade removal of objects
 */
public void test12MWithCascadeFromOR(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis=new Chassis(1l);
    vehicle.setChassis(chassis);
    Wheel wheel1=new Wheel(1l);
    wheel1.setTire(new Tire());
    chassis.addWheel(wheel1);
    WheelNut wheelNut1=new WheelNut();
    WheelNut wheelNut2=new WheelNut();
    WheelNut wheelNut3=new WheelNut();
    WheelNut wheelNut4=new WheelNut();
    wheel1.addWheelNut(wheelNut1);
    wheel1.addWheelNut(wheelNut2);
    wheel1.addWheelNut(wheelNut3);
    wheel1.addWheelNut(wheelNut4);
    em.persist(vehicle);
    WheelNut wheelNut5=new WheelNut();
    WheelNut wheelNut6=new WheelNut();
    wheel1.removeWheelNut(wheelNut3);
    wheel1.removeWheelNut(wheelNut4);
    wheel1.addWheelNut(wheelNut5);
    wheel1.addWheelNut(wheelNut6);
    Wheel wheel2=new Wheel(2l);
    wheel2.setTire(new Tire());
    chassis.addWheel(wheel2);
    em.persist(vehicle);
    wheel2.addWheelNut(wheelNut3);
    wheel2.addWheelNut(wheelNut4);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    WheelNut wheelNut3Read=em.find(WheelNut.class,wheelNut3.getId());
    compareObjects(wheelNut3,wheelNut3Read);
    WheelNut wheelNut4Read=em.find(WheelNut.class,wheelNut4.getId());
    compareObjects(wheelNut4,wheelNut4Read);
    Wheel wheel1Read=em.find(Wheel.class,wheel1.getId());
    compareObjects(wheel1,wheel1);
    Wheel wheel2Read=em.find(Wheel.class,wheel2.getId());
    compareObjects(wheel2,wheel2);
    em.remove(em.find(Vehicle.class,vehicle.getId()));
    for (    WheelNut wheelNut : wheel1Read.getWheelNuts()) {
      em.remove(wheelNut);
    }
    for (    WheelNut wheelNut : wheel2Read.getWheelNuts()) {
      em.remove(wheelNut);
    }
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}"
63343,"public void test12MFromExistingObject(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis1=new Chassis(1l);
    vehicle.setChassis(chassis1);
    Wheel wheel1=new Wheel(1l);
    chassis1.addWheel(wheel1);
    Wheel wheel2=new Wheel(2l);
    chassis1.addWheel(wheel2);
    em.persist(vehicle);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleRead=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicle,vehicleRead);
    Chassis chassisRead=vehicleRead.getChassis();
    chassisRead.setSerialNumber(74923402);
    chassisRead.removeWheel(wheel1);
    chassisRead.removeWheel(wheel2);
    chassisRead.setWheels(null);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleReadAgain=em.find(Vehicle.class,vehicle.getId());
    assertNull(""String_Node_Str"",em.find(Wheel.class,wheel1.getId()));
    assertNull(""String_Node_Str"",em.find(Wheel.class,wheel2.getId()));
    em.remove(vehicleReadAgain);
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}","public void test12MFromExistingObject(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis1=new Chassis(1l);
    vehicle.setChassis(chassis1);
    Wheel wheel1=new Wheel(1l);
    wheel1.setTire(new Tire());
    chassis1.addWheel(wheel1);
    Wheel wheel2=new Wheel(2l);
    wheel2.setTire(new Tire());
    chassis1.addWheel(wheel2);
    em.persist(vehicle);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleRead=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicle,vehicleRead);
    Chassis chassisRead=vehicleRead.getChassis();
    chassisRead.setSerialNumber(74923402);
    chassisRead.removeWheel(wheel1);
    chassisRead.removeWheel(wheel2);
    chassisRead.setWheels(null);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleReadAgain=em.find(Vehicle.class,vehicle.getId());
    assertNull(""String_Node_Str"",em.find(Wheel.class,wheel1.getId()));
    assertNull(""String_Node_Str"",em.find(Wheel.class,wheel2.getId()));
    em.remove(vehicleReadAgain);
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}"
63344,"public void test12MFromExistingObjectModification(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis1=new Chassis(1l);
    vehicle.setChassis(chassis1);
    chassis1.addWheel(new Wheel(1l));
    chassis1.addWheel(new Wheel(2l));
    em.persist(vehicle);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleRead=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicle,vehicleRead);
    Chassis chassis=vehicleRead.getChassis();
    for (    Wheel wheel : chassis.getWheels()) {
      wheel.setSerialNumber(wheel.getSerialNumber() + 10);
    }
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleReadAgain=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicleRead,vehicleReadAgain);
    em.remove(vehicleReadAgain);
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}","public void test12MFromExistingObjectModification(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis1=new Chassis(1l);
    vehicle.setChassis(chassis1);
    Wheel wheel1=new Wheel(1l);
    Wheel wheel2=new Wheel(2l);
    wheel1.setTire(new Tire());
    wheel2.setTire(new Tire());
    chassis1.addWheel(wheel1);
    chassis1.addWheel(wheel2);
    em.persist(vehicle);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleRead=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicle,vehicleRead);
    Chassis chassis=vehicleRead.getChassis();
    for (    Wheel wheel : chassis.getWheels()) {
      wheel.setSerialNumber(wheel.getSerialNumber() + 10);
    }
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleReadAgain=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicleRead,vehicleReadAgain);
    em.remove(vehicleReadAgain);
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}"
63345,"/** 
 * The simplest test for orphan removal (1:M)
 */
public void test12M(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis=new Chassis(1);
    vehicle.setChassis(chassis);
    Wheel wheel1=new Wheel(1l);
    Wheel wheel2=new Wheel(2l);
    Wheel wheel3=new Wheel(3l);
    Wheel wheel4=new Wheel(4l);
    Wheel wheel5=new Wheel(5l);
    chassis.addWheel(wheel1);
    chassis.addWheel(wheel2);
    chassis.addWheel(wheel3);
    chassis.addWheel(wheel4);
    chassis.addWheel(wheel5);
    em.persist(vehicle);
    chassis.removeWheel(wheel5);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleRead=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicle,vehicleRead);
    Chassis chassisRead=em.find(Chassis.class,chassis.getId());
    compareObjects(chassis,chassisRead);
    Wheel wheel1Read=em.find(Wheel.class,wheel1.getId());
    compareObjects(wheel1,wheel1Read);
    Wheel wheel2Read=em.find(Wheel.class,wheel2.getId());
    compareObjects(wheel2,wheel2Read);
    Wheel wheel3Read=em.find(Wheel.class,wheel3.getId());
    compareObjects(wheel3,wheel3Read);
    Wheel wheel4Read=em.find(Wheel.class,wheel4.getId());
    compareObjects(wheel4,wheel4Read);
    assertNull(""String_Node_Str"",em.find(Wheel.class,wheel5.getId()));
    em.remove(vehicleRead);
    em.remove(chassisRead);
    em.remove(wheel1Read);
    em.remove(wheel2Read);
    em.remove(wheel3Read);
    em.remove(wheel4Read);
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}","/** 
 * The simplest test for orphan removal (1:M)
 */
public void test12M(){
  EntityManager em=createEntityManager();
  try {
    beginTransaction(em);
    Vehicle vehicle=new Vehicle(""String_Node_Str"");
    Chassis chassis=new Chassis(1);
    vehicle.setChassis(chassis);
    Wheel wheel1=new Wheel(1l);
    Wheel wheel2=new Wheel(2l);
    Wheel wheel3=new Wheel(3l);
    Wheel wheel4=new Wheel(4l);
    Wheel wheel5=new Wheel(5l);
    wheel1.setTire(new Tire());
    wheel2.setTire(new Tire());
    wheel3.setTire(new Tire());
    wheel4.setTire(new Tire());
    wheel5.setTire(new Tire());
    chassis.addWheel(wheel1);
    chassis.addWheel(wheel2);
    chassis.addWheel(wheel3);
    chassis.addWheel(wheel4);
    chassis.addWheel(wheel5);
    em.persist(vehicle);
    chassis.removeWheel(wheel5);
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager();
    beginTransaction(em);
    Vehicle vehicleRead=em.find(Vehicle.class,vehicle.getId());
    compareObjects(vehicle,vehicleRead);
    Chassis chassisRead=em.find(Chassis.class,chassis.getId());
    compareObjects(chassis,chassisRead);
    Wheel wheel1Read=em.find(Wheel.class,wheel1.getId());
    compareObjects(wheel1,wheel1Read);
    Wheel wheel2Read=em.find(Wheel.class,wheel2.getId());
    compareObjects(wheel2,wheel2Read);
    Wheel wheel3Read=em.find(Wheel.class,wheel3.getId());
    compareObjects(wheel3,wheel3Read);
    Wheel wheel4Read=em.find(Wheel.class,wheel4.getId());
    compareObjects(wheel4,wheel4Read);
    assertNull(""String_Node_Str"",em.find(Wheel.class,wheel5.getId()));
    em.remove(vehicleRead);
    em.remove(chassisRead);
    em.remove(wheel1Read);
    em.remove(wheel2Read);
    em.remove(wheel3Read);
    em.remove(wheel4Read);
    commitTransaction(em);
    closeEntityManager(em);
  }
 catch (  RuntimeException e) {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
    throw e;
  }
}"
63346,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
    suite.addTest(new OrphanRemovalJUnitTestCase(""String_Node_Str""));
  }
  return suite;
}"
63347,"/** 
 * INTERNAL: Clones the descriptor
 */
public Object clone(){
  ClassDescriptor clonedDescriptor=null;
  try {
    clonedDescriptor=(ClassDescriptor)super.clone();
  }
 catch (  Exception exception) {
    throw new AssertionError(exception);
  }
  Vector mappingsVector=NonSynchronizedVector.newInstance();
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping;
    mapping=(DatabaseMapping)((DatabaseMapping)mappingsEnum.nextElement()).clone();
    mapping.setDescriptor(clonedDescriptor);
    mappingsVector.addElement(mapping);
  }
  clonedDescriptor.setMappings(mappingsVector);
  Map queryKeys=new HashMap(getQueryKeys().size() + 2);
  for (  QueryKey queryKey : getQueryKeys().values()) {
    queryKey=(QueryKey)queryKey.clone();
    queryKey.setDescriptor(clonedDescriptor);
    queryKeys.put(queryKey.getName(),queryKey);
  }
  clonedDescriptor.setQueryKeys(queryKeys);
  List primaryKeyVector=new ArrayList(getPrimaryKeyFields().size());
  List primaryKeyFields=getPrimaryKeyFields();
  for (int index=0; index < primaryKeyFields.size(); index++) {
    DatabaseField primaryKey=((DatabaseField)primaryKeyFields.get(index)).clone();
    primaryKeyVector.add(primaryKey);
  }
  clonedDescriptor.setPrimaryKeyFields(primaryKeyVector);
  clonedDescriptor.setFields(NonSynchronizedVector.newInstance());
  if (clonedDescriptor.hasInheritance()) {
    clonedDescriptor.setInheritancePolicy((InheritancePolicy)getInheritancePolicy().clone());
    clonedDescriptor.getInheritancePolicy().setDescriptor(clonedDescriptor);
  }
  if (clonedDescriptor.hasSerializedObjectPolicy()) {
    clonedDescriptor.setSerializedObjectPolicy(getSerializedObjectPolicy().clone());
  }
  if (clonedDescriptor.hasReturningPolicy()) {
    clonedDescriptor.setReturningPolicy((ReturningPolicy)getReturningPolicy().clone());
    clonedDescriptor.getReturningPolicy().setDescriptor(clonedDescriptor);
  }
  clonedDescriptor.setObjectBuilder((ObjectBuilder)getObjectBuilder().clone());
  clonedDescriptor.getObjectBuilder().setDescriptor(clonedDescriptor);
  clonedDescriptor.setEventManager((DescriptorEventManager)getEventManager().clone());
  clonedDescriptor.getEventManager().setDescriptor(clonedDescriptor);
  clonedDescriptor.setQueryManager((DescriptorQueryManager)getQueryManager().clone());
  clonedDescriptor.getQueryManager().setDescriptor(clonedDescriptor);
  if (hasFetchGroupManager()) {
    clonedDescriptor.setFetchGroupManager((FetchGroupManager)getFetchGroupManager().clone());
  }
  if (this.cachePolicy != null) {
    clonedDescriptor.setCachePolicy(this.cachePolicy.clone());
  }
  if (this.instantiationPolicy != null) {
    clonedDescriptor.setInstantiationPolicy((InstantiationPolicy)getInstantiationPolicy().clone());
  }
  if (this.copyPolicy != null) {
    clonedDescriptor.setCopyPolicy((CopyPolicy)getCopyPolicy().clone());
  }
  if (getOptimisticLockingPolicy() != null) {
    clonedDescriptor.setOptimisticLockingPolicy((OptimisticLockingPolicy)getOptimisticLockingPolicy().clone());
  }
  clonedDescriptor.setObjectChangePolicy(this.getObjectChangePolicyInternal());
  Vector<DatabaseTable> tables=NonSynchronizedVector.newInstance(3);
  for (  DatabaseTable table : getTables()) {
    tables.add(table.clone());
  }
  clonedDescriptor.setTables(tables);
  if (getDefaultTable() != null) {
    clonedDescriptor.setDefaultTable(getDefaultTable().clone());
  }
  if (getCMPPolicy() != null) {
    clonedDescriptor.setCMPPolicy(getCMPPolicy().clone());
    clonedDescriptor.getCMPPolicy().setDescriptor(clonedDescriptor);
  }
  if (getSequenceNumberField() != null) {
    clonedDescriptor.setSequenceNumberField(getSequenceNumberField().clone());
  }
  if (hasMultitenantPolicy()) {
    clonedDescriptor.setMultitenantPolicy(getMultitenantPolicy().clone(clonedDescriptor));
  }
  return clonedDescriptor;
}","/** 
 * INTERNAL: Clones the descriptor
 */
public Object clone(){
  ClassDescriptor clonedDescriptor=null;
  try {
    clonedDescriptor=(ClassDescriptor)super.clone();
  }
 catch (  Exception exception) {
    throw new AssertionError(exception);
  }
  Vector mappingsVector=NonSynchronizedVector.newInstance();
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping;
    mapping=(DatabaseMapping)((DatabaseMapping)mappingsEnum.nextElement()).clone();
    mapping.setDescriptor(clonedDescriptor);
    mappingsVector.addElement(mapping);
  }
  clonedDescriptor.setMappings(mappingsVector);
  Map queryKeys=new HashMap(getQueryKeys().size() + 2);
  for (  QueryKey queryKey : getQueryKeys().values()) {
    queryKey=(QueryKey)queryKey.clone();
    queryKey.setDescriptor(clonedDescriptor);
    queryKeys.put(queryKey.getName(),queryKey);
  }
  clonedDescriptor.setQueryKeys(queryKeys);
  List primaryKeyVector=new ArrayList(getPrimaryKeyFields().size());
  List primaryKeyFields=getPrimaryKeyFields();
  for (int index=0; index < primaryKeyFields.size(); index++) {
    DatabaseField primaryKey=((DatabaseField)primaryKeyFields.get(index)).clone();
    primaryKeyVector.add(primaryKey);
  }
  clonedDescriptor.setPrimaryKeyFields(primaryKeyVector);
  clonedDescriptor.setFields(NonSynchronizedVector.newInstance());
  referencingClasses=new HashSet<>();
  if (this.mappingsPostCalculateChanges != null) {
    clonedDescriptor.mappingsPostCalculateChanges=new ArrayList<>();
    for (    DatabaseMapping databaseMapping : this.mappingsPostCalculateChanges) {
      clonedDescriptor.mappingsPostCalculateChanges.add((DatabaseMapping)databaseMapping.clone());
    }
  }
  if (this.mappingsPostCalculateChangesOnDeleted != null) {
    clonedDescriptor.mappingsPostCalculateChangesOnDeleted=new ArrayList<>();
    for (    DatabaseMapping databaseMapping : this.mappingsPostCalculateChangesOnDeleted) {
      clonedDescriptor.mappingsPostCalculateChangesOnDeleted.add((DatabaseMapping)databaseMapping.clone());
    }
  }
  if (clonedDescriptor.hasInheritance()) {
    clonedDescriptor.setInheritancePolicy((InheritancePolicy)getInheritancePolicy().clone());
    clonedDescriptor.getInheritancePolicy().setDescriptor(clonedDescriptor);
  }
  if (clonedDescriptor.hasSerializedObjectPolicy()) {
    clonedDescriptor.setSerializedObjectPolicy(getSerializedObjectPolicy().clone());
  }
  if (clonedDescriptor.hasReturningPolicy()) {
    clonedDescriptor.setReturningPolicy((ReturningPolicy)getReturningPolicy().clone());
    clonedDescriptor.getReturningPolicy().setDescriptor(clonedDescriptor);
  }
  clonedDescriptor.setObjectBuilder((ObjectBuilder)getObjectBuilder().clone());
  clonedDescriptor.getObjectBuilder().setDescriptor(clonedDescriptor);
  clonedDescriptor.setEventManager((DescriptorEventManager)getEventManager().clone());
  clonedDescriptor.getEventManager().setDescriptor(clonedDescriptor);
  clonedDescriptor.setQueryManager((DescriptorQueryManager)getQueryManager().clone());
  clonedDescriptor.getQueryManager().setDescriptor(clonedDescriptor);
  if (hasFetchGroupManager()) {
    clonedDescriptor.setFetchGroupManager((FetchGroupManager)getFetchGroupManager().clone());
  }
  if (this.cachePolicy != null) {
    clonedDescriptor.setCachePolicy(this.cachePolicy.clone());
  }
  if (this.instantiationPolicy != null) {
    clonedDescriptor.setInstantiationPolicy((InstantiationPolicy)getInstantiationPolicy().clone());
  }
  if (this.copyPolicy != null) {
    clonedDescriptor.setCopyPolicy((CopyPolicy)getCopyPolicy().clone());
  }
  if (getOptimisticLockingPolicy() != null) {
    clonedDescriptor.setOptimisticLockingPolicy((OptimisticLockingPolicy)getOptimisticLockingPolicy().clone());
  }
  clonedDescriptor.setObjectChangePolicy(this.getObjectChangePolicyInternal());
  Vector<DatabaseTable> tables=NonSynchronizedVector.newInstance(3);
  for (  DatabaseTable table : getTables()) {
    tables.add(table.clone());
  }
  clonedDescriptor.setTables(tables);
  if (getDefaultTable() != null) {
    clonedDescriptor.setDefaultTable(getDefaultTable().clone());
  }
  if (getCMPPolicy() != null) {
    clonedDescriptor.setCMPPolicy(getCMPPolicy().clone());
    clonedDescriptor.getCMPPolicy().setDescriptor(clonedDescriptor);
  }
  if (getSequenceNumberField() != null) {
    clonedDescriptor.setSequenceNumberField(getSequenceNumberField().clone());
  }
  if (hasMultitenantPolicy()) {
    clonedDescriptor.setMultitenantPolicy(getMultitenantPolicy().clone(clonedDescriptor));
  }
  return clonedDescriptor;
}"
63348,"/** 
 * PUBLIC: Return a new descriptor.
 */
public ClassDescriptor(){
  this.tables=NonSynchronizedVector.newInstance(3);
  this.mappings=NonSynchronizedVector.newInstance();
  this.primaryKeyFields=new ArrayList(2);
  this.fields=NonSynchronizedVector.newInstance();
  this.allFields=NonSynchronizedVector.newInstance();
  this.constraintDependencies=NonSynchronizedVector.newInstance(2);
  this.multipleTableForeignKeys=new HashMap(5);
  this.queryKeys=new HashMap(5);
  this.initializationStage=UNINITIALIZED;
  this.interfaceInitializationStage=UNINITIALIZED;
  this.descriptorType=NORMAL;
  this.shouldOrderMappings=true;
  this.shouldBeReadOnly=false;
  this.shouldAlwaysConformResultsInUnitOfWork=false;
  this.shouldAcquireCascadedLocks=false;
  this.hasSimplePrimaryKey=false;
  this.derivesIdMappings=new HashMap(5);
  this.referencingClasses=new HashSet<ClassDescriptor>();
  this.objectBuilder=new ObjectBuilder(this);
  this.cachePolicy=new CachePolicy();
  this.additionalWritableMapKeyFields=new ArrayList(2);
  this.foreignKeyValuesForCaching=new HashSet<DatabaseField>();
}","/** 
 * PUBLIC: Return a new descriptor.
 */
public ClassDescriptor(){
  this.tables=NonSynchronizedVector.newInstance(3);
  this.mappings=NonSynchronizedVector.newInstance();
  this.primaryKeyFields=new ArrayList(2);
  this.fields=NonSynchronizedVector.newInstance();
  this.allFields=NonSynchronizedVector.newInstance();
  this.constraintDependencies=NonSynchronizedVector.newInstance(2);
  this.multipleTableForeignKeys=new HashMap(5);
  this.queryKeys=new HashMap(5);
  this.initializationStage=UNINITIALIZED;
  this.interfaceInitializationStage=UNINITIALIZED;
  this.descriptorType=NORMAL;
  this.shouldOrderMappings=true;
  this.shouldBeReadOnly=false;
  this.shouldAlwaysConformResultsInUnitOfWork=false;
  this.shouldAcquireCascadedLocks=false;
  this.hasSimplePrimaryKey=false;
  this.derivesIdMappings=new HashMap(5);
  this.referencingClasses=new HashSet<>();
  this.objectBuilder=new ObjectBuilder(this);
  this.cachePolicy=new CachePolicy();
  this.additionalWritableMapKeyFields=new ArrayList(2);
  this.foreignKeyValuesForCaching=new HashSet<DatabaseField>();
}"
63349,"/** 
 * INTERNAL: Was PUBLIC: customer will be redirected to   {@link org.eclipse.persistence.sessions.Session}. Release the client session. This releases the client session back to it server. Normally this will logout of the client session's connection, and allow the client session to garbage collect.
 */
@Override public void release() throws DatabaseException {
  if (!this.isActive) {
    return;
  }
  if (this.eventManager != null) {
    this.eventManager.preReleaseClientSession();
  }
  if (hasWriteConnection()) {
    this.parent.releaseClientSession(this);
  }
  this.isActive=false;
  log(SessionLog.FINER,SessionLog.CONNECTION,""String_Node_Str"");
  if (this.eventManager != null) {
    this.eventManager.postReleaseClientSession();
  }
  incrementProfile(SessionProfiler.ClientSessionReleased);
}","/** 
 * INTERNAL: Was PUBLIC: customer will be redirected to   {@link org.eclipse.persistence.sessions.Session}. Release the client session. This releases the client session back to it server. Normally this will logout of the client session's connection, and allow the client session to garbage collect.
 */
@Override public void release() throws DatabaseException {
  for (  Map.Entry<Class,ClassDescriptor> entry : getDescriptors().entrySet()) {
    entry.getValue().clearReferencingClasses();
  }
  if (!this.isActive) {
    return;
  }
  if (this.eventManager != null) {
    this.eventManager.preReleaseClientSession();
  }
  if (hasWriteConnection()) {
    this.parent.releaseClientSession(this);
  }
  this.isActive=false;
  log(SessionLog.FINER,SessionLog.CONNECTION,""String_Node_Str"");
  if (this.eventManager != null) {
    this.eventManager.postReleaseClientSession();
  }
  incrementProfile(SessionProfiler.ClientSessionReleased);
}"
63350,"public void testTimeStampTZ(){
  int year=2000, month=1, date=10, hour=0, minute=0, second=0;
  Integer tsId=null;
  Calendar originalCal=null, dbCal=null;
  String zoneId=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneId));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,0,0,0);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager(""String_Node_Str"");
    dbCal=em.find(TStamp.class,tsId).getTsTZ();
    assertEquals(""String_Node_Str"",dbCal.getTimeZone().getID(),zoneId);
    assertTrue(""String_Node_Str"",Calendar.AM == dbCal.get(java.util.Calendar.AM_PM));
    assertTrue(""String_Node_Str"",year == dbCal.get(java.util.Calendar.YEAR));
    assertTrue(""String_Node_Str"",month == dbCal.get(java.util.Calendar.MONTH));
    assertTrue(""String_Node_Str"",date == dbCal.get(java.util.Calendar.DATE));
    assertTrue(""String_Node_Str"",hour == dbCal.get(java.util.Calendar.HOUR));
    assertTrue(""String_Node_Str"",minute == dbCal.get(java.util.Calendar.MINUTE));
    assertTrue(""String_Node_Str"",second == dbCal.get(java.util.Calendar.SECOND));
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","public void testTimeStampTZ(){
  int year=2000, month=1, date=10, hour=0, minute=0, second=0;
  Integer tsId;
  Calendar originalCal, dbCal;
  String zoneId=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneId));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,0,0,0);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager(""String_Node_Str"");
    dbCal=em.find(TStamp.class,tsId).getTsTZ();
    assertEquals(""String_Node_Str"",dbCal.getTimeZone().getID(),zoneId);
    assertEquals(""String_Node_Str"",Calendar.AM,dbCal.get(Calendar.AM_PM));
    assertEquals(""String_Node_Str"",year,dbCal.get(Calendar.YEAR));
    assertEquals(""String_Node_Str"",month,dbCal.get(Calendar.MONTH));
    assertEquals(""String_Node_Str"",date,dbCal.get(Calendar.DATE));
    assertEquals(""String_Node_Str"",hour,dbCal.get(Calendar.HOUR));
    assertEquals(""String_Node_Str"",minute,dbCal.get(Calendar.MINUTE));
    assertEquals(""String_Node_Str"",second,dbCal.get(Calendar.SECOND));
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}"
63351,"public void testTimeStampLTZ(){
  int year=2000, month=3, date=21, hour=11, minute=45, second=50;
  Integer tsId=null;
  Calendar originalCal=null, dbCal=null;
  String zoneId=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneId));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,hour,minute,second);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsLTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
  }
 catch (  Exception e) {
    e.printStackTrace();
    rollbackTransaction(em);
  }
 finally {
    clearCache();
    dbCal=em.find(TStamp.class,tsId).getTsLTZ();
    closeEntityManager(em);
  }
  assertTrue(""String_Node_Str"",year == dbCal.get(java.util.Calendar.YEAR));
  assertTrue(""String_Node_Str"",month == dbCal.get(java.util.Calendar.MONTH));
  assertTrue(""String_Node_Str"",date == dbCal.get(java.util.Calendar.DATE));
  int hourDiffFromDB=dbCal.get(Calendar.HOUR_OF_DAY) - originalCal.get(Calendar.HOUR_OF_DAY);
  int hourDiffFromZone=(dbCal.get(Calendar.ZONE_OFFSET) - originalCal.get(Calendar.ZONE_OFFSET)) / 3600000;
  assertTrue(""String_Node_Str"",hourDiffFromDB == hourDiffFromZone);
  assertTrue(""String_Node_Str"",minute == dbCal.get(java.util.Calendar.MINUTE));
  assertTrue(""String_Node_Str"",second == dbCal.get(java.util.Calendar.SECOND));
}","public void testTimeStampLTZ(){
  int year=2000, month=3, date=21, hour=11, minute=45, second=50;
  Integer tsId=null;
  Calendar originalCal=null, dbCal;
  String zoneId=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneId));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,hour,minute,second);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsLTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
  }
 catch (  Exception e) {
    e.printStackTrace();
    rollbackTransaction(em);
    throw e;
  }
 finally {
    clearCache();
    dbCal=em.find(TStamp.class,tsId).getTsLTZ();
    closeEntityManager(em);
  }
  dbCal.setTimeZone(TimeZone.getTimeZone(zoneId));
  assertEquals(""String_Node_Str"",year,dbCal.get(Calendar.YEAR));
  assertEquals(""String_Node_Str"",month,dbCal.get(Calendar.MONTH));
  assertEquals(""String_Node_Str"",date,dbCal.get(Calendar.DATE));
  assertEquals(""String_Node_Str"",originalCal.get(Calendar.HOUR_OF_DAY),dbCal.get(Calendar.HOUR_OF_DAY));
  assertEquals(""String_Node_Str"",minute,dbCal.get(Calendar.MINUTE));
  assertEquals(""String_Node_Str"",second,dbCal.get(Calendar.SECOND));
}"
63352,"public void testTimeStampTZDST(){
  int year=2008, month=2, date=10, hour=11, minute=0, second=0;
  Integer tsId=null;
  Calendar originalCal=null, dbCal=null;
  String zoneIdRemote=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneIdRemote));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,hour,minute,second);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsLTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager(""String_Node_Str"");
    dbCal=em.find(TStamp.class,tsId).getTsLTZ();
    int hourDiffFromDB=dbCal.get(Calendar.HOUR_OF_DAY) - originalCal.get(Calendar.HOUR_OF_DAY);
    int hourDiffFromZone=(dbCal.get(Calendar.ZONE_OFFSET) - originalCal.get(Calendar.ZONE_OFFSET)) / 3600000;
    assertTrue(""String_Node_Str"",(hourDiffFromZone + dbCal.get(Calendar.DST_OFFSET) / 3600000) == hourDiffFromDB);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}","public void testTimeStampTZDST(){
  int year=2008, month=2, date=10, hour=11, minute=0, second=0;
  Integer tsId;
  Calendar originalCal, dbCal;
  String zoneIdRemote=""String_Node_Str"";
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance(TimeZone.getTimeZone(zoneIdRemote));
    originalCal.set(Calendar.AM_PM,Calendar.AM);
    originalCal.set(year,month,date,hour,minute,second);
    originalCal.set(Calendar.MILLISECOND,0);
    ts.setTsLTZ(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
    closeEntityManager(em);
    clearCache();
    em=createEntityManager(""String_Node_Str"");
    dbCal=em.find(TStamp.class,tsId).getTsLTZ();
    int hourDiffFromDB=dbCal.get(Calendar.HOUR_OF_DAY) - originalCal.get(Calendar.HOUR_OF_DAY);
    int hourDiffFromZone=(dbCal.get(Calendar.ZONE_OFFSET) - originalCal.get(Calendar.ZONE_OFFSET)) / 3600000;
    assertEquals(""String_Node_Str"",(hourDiffFromZone + dbCal.get(Calendar.DST_OFFSET) / 3600000),hourDiffFromDB);
  }
  finally {
    if (isTransactionActive(em)) {
      rollbackTransaction(em);
    }
    closeEntityManager(em);
  }
}"
63353,"public void testNoZone(){
  int year=2000, month=1, date=10, hour=11, minute=21, second=31;
  Integer tsId=null;
  java.util.Calendar originalCal=null, dbCal=null;
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=java.util.Calendar.getInstance();
    originalCal.set(year,month,date,hour,minute,second);
    ts.setNoZone(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
  }
 catch (  Exception e) {
    e.printStackTrace();
    rollbackTransaction(em);
  }
 finally {
    clearCache();
    dbCal=em.find(TStamp.class,tsId).getNoZone();
    closeEntityManager(em);
  }
  assertEquals(""String_Node_Str"",dbCal,originalCal);
  assertTrue(""String_Node_Str"",year == dbCal.get(java.util.Calendar.YEAR));
  assertTrue(""String_Node_Str"",month == dbCal.get(java.util.Calendar.MONTH));
  assertTrue(""String_Node_Str"",date == dbCal.get(java.util.Calendar.DATE));
  assertTrue(""String_Node_Str"",hour == dbCal.get(java.util.Calendar.HOUR));
  assertTrue(""String_Node_Str"",minute == dbCal.get(java.util.Calendar.MINUTE));
  assertTrue(""String_Node_Str"",second == dbCal.get(java.util.Calendar.SECOND));
}","public void testNoZone(){
  int year=2000, month=1, date=10, hour=11, minute=21, second=31;
  Integer tsId=null;
  Calendar originalCal=null, dbCal;
  EntityManager em=createEntityManager(""String_Node_Str"");
  beginTransaction(em);
  try {
    TStamp ts=new TStamp();
    originalCal=Calendar.getInstance();
    originalCal.set(year,month,date,hour,minute,second);
    ts.setNoZone(originalCal);
    em.persist(ts);
    em.flush();
    tsId=ts.getId();
    commitTransaction(em);
  }
 catch (  Exception e) {
    e.printStackTrace();
    rollbackTransaction(em);
  }
 finally {
    clearCache();
    dbCal=em.find(TStamp.class,tsId).getNoZone();
    closeEntityManager(em);
  }
  assertEquals(""String_Node_Str"",dbCal,originalCal);
  assertEquals(""String_Node_Str"",year,dbCal.get(Calendar.YEAR));
  assertEquals(""String_Node_Str"",month,dbCal.get(Calendar.MONTH));
  assertEquals(""String_Node_Str"",date,dbCal.get(Calendar.DATE));
  assertEquals(""String_Node_Str"",hour,dbCal.get(Calendar.HOUR));
  assertEquals(""String_Node_Str"",minute,dbCal.get(Calendar.MINUTE));
  assertEquals(""String_Node_Str"",second,dbCal.get(Calendar.SECOND));
}"
63354,"/** 
 * Finalize.
 */
@Override public void finalize(){
  this.emf.close();
  this.emf=null;
  this.jaxbContext=null;
}","/** 
 * Finalize.
 */
@Override protected void finalize() throws Throwable {
  emf.close();
  super.finalize();
}"
63355,"/** 
 * {@inheritDoc}
 */
@Override public Object buildSingleResultQueryResponse(PersistenceContext context,Map<String,Object> queryParams,Object result,List<ReportItem> items,UriInfo uriInfo){
  final SingleResultQueryList response=new SingleResultQueryList();
  final List<JAXBElement> fields=new FeatureResponseBuilderImpl().createShellJAXBElementList(items,result);
  if (fields == null) {
    return null;
  }
  response.setFields(fields);
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public Object buildSingleResultQueryResponse(PersistenceContext context,Map<String,Object> queryParams,Object result,List<ReportItem> items,UriInfo uriInfo){
  final SingleResultQueryList response=new SingleResultQueryList();
  final List<JAXBElement> fields=new FeatureResponseBuilderImpl().createShellJAXBElementList(items,result);
  response.setFields(fields);
  return response;
}"
63356,"private ReportQueryResultList populateReportQueryResultList(List<Object[]> results,List<ReportItem> reportItems){
  ReportQueryResultList response=new ReportQueryResultList();
  for (  Object result : results) {
    ReportQueryResultListItem queryResultListItem=new ReportQueryResultListItem();
    List<JAXBElement> jaxbFields=createShellJAXBElementList(reportItems,result);
    if (jaxbFields == null) {
      return null;
    }
    queryResultListItem.setFields(jaxbFields);
    response.addItem(queryResultListItem);
  }
  return response;
}","private ReportQueryResultList populateReportQueryResultList(List<Object[]> results,List<ReportItem> reportItems){
  ReportQueryResultList response=new ReportQueryResultList();
  for (  Object result : results) {
    ReportQueryResultListItem queryResultListItem=new ReportQueryResultListItem();
    List<JAXBElement> jaxbFields=createShellJAXBElementList(reportItems,result);
    queryResultListItem.setFields(jaxbFields);
    response.addItem(queryResultListItem);
  }
  return response;
}"
63357,"/** 
 * Creates the shell jaxb element list.
 * @param reportItems the report items
 * @param record the record
 * @return the list
 */
public List<JAXBElement> createShellJAXBElementList(List<ReportItem> reportItems,Object record){
  List<JAXBElement> jaxbElements=new ArrayList<JAXBElement>(reportItems.size());
  if ((reportItems != null) && (reportItems.size() > 0)) {
    for (int index=0; index < reportItems.size(); index++) {
      ReportItem reportItem=reportItems.get(index);
      Object reportItemValue=record;
      if (record instanceof Object[]) {
        reportItemValue=((Object[])record)[index];
      }
      Class reportItemValueType=null;
      if (reportItemValue != null) {
        reportItemValueType=reportItemValue.getClass();
        if (reportItemValueType == null) {
          DatabaseMapping dbMapping=reportItem.getMapping();
          if (dbMapping != null) {
            reportItemValueType=dbMapping.getAttributeClassification();
          }
 else {
            ClassDescriptor desc=reportItem.getDescriptor();
            if (desc != null) {
              reportItemValueType=desc.getJavaClass();
            }
          }
        }
        JAXBElement element=new JAXBElement(new QName(reportItem.getName()),reportItemValueType,reportItemValue);
        jaxbElements.add(reportItem.getResultIndex(),element);
      }
    }
  }
  return jaxbElements;
}","/** 
 * Creates the shell jaxb element list.
 * @param reportItems the report items
 * @param record the record
 * @return the list. Returns an empty list if reportItems is null or empty.
 */
public List<JAXBElement> createShellJAXBElementList(List<ReportItem> reportItems,Object record){
  if (reportItems == null || reportItems.size() == 0) {
    return Collections.emptyList();
  }
  List<JAXBElement> jaxbElements=new ArrayList<>(reportItems.size());
  for (int index=0; index < reportItems.size(); index++) {
    ReportItem reportItem=reportItems.get(index);
    Object reportItemValue=record;
    if (record instanceof Object[]) {
      reportItemValue=((Object[])record)[index];
    }
    if (reportItemValue != null) {
      JAXBElement element=new JAXBElement(new QName(reportItem.getName()),reportItemValue.getClass(),reportItemValue);
      jaxbElements.add(reportItem.getResultIndex(),element);
    }
  }
  return jaxbElements;
}"
63358,"/** 
 * {@inheritDoc}
 */
@Override public SessionEventListener getSessionEventListener(AbstractSession session){
  return new PreLoginMappingAdapterV2(session);
}","/** 
 * {@inheritDoc}
 */
@Override public SessionEventListener getSessionEventListener(AbstractSession session){
  return new PreLoginMappingAdapterV2();
}"
63359,"/** 
 * {@inheritDoc}
 */
@Override public Object buildSingleResultQueryResponse(PersistenceContext context,Map<String,Object> queryParams,Object result,List<ReportItem> items,UriInfo uriInfo){
  final SingleResultQueryResult response=new SingleResultQueryResult();
  final List<JAXBElement> fields=createShellJAXBElementList(items,result);
  if (fields == null) {
    return null;
  }
  generateLinksInElementsList(context,fields);
  response.setFields(fields);
  response.addLink(new LinkV2(ReservedWords.JPARS_REL_SELF,uriInfo.getRequestUri().toString()));
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public Object buildSingleResultQueryResponse(PersistenceContext context,Map<String,Object> queryParams,Object result,List<ReportItem> items,UriInfo uriInfo){
  final SingleResultQueryResult response=new SingleResultQueryResult();
  final List<JAXBElement> fields=createShellJAXBElementList(items,result);
  generateLinksInElementsList(context,fields);
  response.setFields(fields);
  response.addLink(new LinkV2(ReservedWords.JPARS_REL_SELF,uriInfo.getRequestUri().toString()));
  return response;
}"
63360,"/** 
 * {@inheritDoc}
 */
@Override public Object buildReportQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object[]> results,List<ReportItem> items,UriInfo uriInfo){
  ReportQueryResultCollection response=new ReportQueryResultCollection();
  for (  Object result : results) {
    ReportQueryResultListItem queryResultListItem=new ReportQueryResultListItem();
    List<JAXBElement> jaxbFields=createShellJAXBElementList(items,result);
    if (jaxbFields == null) {
      return null;
    }
    generateLinksInElementsList(context,jaxbFields);
    queryResultListItem.setFields(jaxbFields);
    response.addItem(queryResultListItem);
  }
  response.addLink(new LinkV2(ReservedWords.JPARS_REL_SELF,uriInfo.getRequestUri().toString()));
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public Object buildReportQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object[]> results,List<ReportItem> items,UriInfo uriInfo){
  ReportQueryResultCollection response=new ReportQueryResultCollection();
  for (  Object result : results) {
    ReportQueryResultListItem queryResultListItem=new ReportQueryResultListItem();
    List<JAXBElement> jaxbFields=createShellJAXBElementList(items,result);
    generateLinksInElementsList(context,jaxbFields);
    queryResultListItem.setFields(jaxbFields);
    response.addItem(queryResultListItem);
  }
  response.addLink(new LinkV2(ReservedWords.JPARS_REL_SELF,uriInfo.getRequestUri().toString()));
  return response;
}"
63361,"/** 
 * Finds all bidirectional relationships of the given entity with Cascade=PERSIST and sets reference to the parent object. This method is called on creating new entities in JPARS v2.0 only.
 * @param context       the persistence context.
 * @param descriptor    descriptor of the entity passed in 'entity' parameter.
 * @param entity        entity to process.
 */
private void processBidirectionalRelationships(PersistenceContext context,ClassDescriptor descriptor,Object entity){
  final List<DatabaseMapping> mappings=descriptor.getMappings();
  for (  DatabaseMapping mapping : mappings) {
    if ((mapping != null) && (mapping instanceof ForeignReferenceMapping)) {
      final ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)mapping;
      final Object attributeValue=mapping.getAttributeAccessor().getAttributeValueFromObject(entity);
      if (jpaMapping != null && jpaMapping.isCascadePersist()) {
        if (jpaMapping.getMappedBy() != null) {
          final ClassDescriptor inverseDescriptor=context.getDescriptor(jpaMapping.getReferenceDescriptor().getAlias());
          if (inverseDescriptor != null) {
            final DatabaseMapping inverseMapping=inverseDescriptor.getMappingForAttributeName(jpaMapping.getMappedBy());
            if (inverseMapping != null) {
              if (attributeValue != null) {
                if (attributeValue instanceof ValueHolder) {
                  final ValueHolder holder=(ValueHolder)attributeValue;
                  final Object obj=holder.getValue();
                  if (obj != null) {
                    inverseMapping.setAttributeValueInObject(obj,entity);
                  }
                }
 else                 if (attributeValue instanceof Collection) {
                  final Collection collection=(Collection)attributeValue;
                  if (!collection.isEmpty()) {
                    for (                    Object obj : collection) {
                      inverseMapping.setAttributeValueInObject(obj,entity);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * Finds all bidirectional relationships of the given entity with Cascade=PERSIST and sets reference to the parent object. This method is called on creating new entities in JPARS v2.0 only.
 * @param context       the persistence context.
 * @param descriptor    descriptor of the entity passed in 'entity' parameter.
 * @param entity        entity to process.
 */
private void processBidirectionalRelationships(PersistenceContext context,ClassDescriptor descriptor,Object entity){
  final List<DatabaseMapping> mappings=descriptor.getMappings();
  for (  DatabaseMapping mapping : mappings) {
    if ((mapping != null) && (mapping instanceof ForeignReferenceMapping)) {
      final ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)mapping;
      final Object attributeValue=mapping.getAttributeAccessor().getAttributeValueFromObject(entity);
      if (jpaMapping.isCascadePersist()) {
        if (jpaMapping.getMappedBy() != null) {
          final ClassDescriptor inverseDescriptor=context.getDescriptor(jpaMapping.getReferenceDescriptor().getAlias());
          if (inverseDescriptor != null) {
            final DatabaseMapping inverseMapping=inverseDescriptor.getMappingForAttributeName(jpaMapping.getMappedBy());
            if (inverseMapping != null) {
              if (attributeValue != null) {
                if (attributeValue instanceof ValueHolder) {
                  final ValueHolder holder=(ValueHolder)attributeValue;
                  final Object obj=holder.getValue();
                  if (obj != null) {
                    inverseMapping.setAttributeValueInObject(obj,entity);
                  }
                }
 else                 if (attributeValue instanceof Collection) {
                  final Collection collection=(Collection)attributeValue;
                  if (!collection.isEmpty()) {
                    for (                    Object obj : collection) {
                      inverseMapping.setAttributeValueInObject(obj,entity);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}"
63362,"public static String stringifyId(Object entity,String typeName,PersistenceContext app){
  ClassDescriptor descriptor=app.getDescriptor(typeName);
  List<DatabaseMapping> pkMappings=descriptor.getObjectBuilder().getPrimaryKeyMappings();
  if (pkMappings.isEmpty()) {
    return ""String_Node_Str"";
  }
  List<SortableKey> pkIndices=new ArrayList<SortableKey>();
  int index=0;
  for (  DatabaseMapping mapping : pkMappings) {
    pkIndices.add(new SortableKey(mapping,index));
    index++;
  }
  Collections.sort(pkIndices);
  StringBuilder key=new StringBuilder();
  Iterator<SortableKey> sortableKeys=pkIndices.iterator();
  List<DatabaseField> refObjectdbFields=null;
  while (sortableKeys.hasNext()) {
    DatabaseMapping mapping=sortableKeys.next().getMapping();
    ClassDescriptor refDesc=mapping.getReferenceDescriptor();
    List<DatabaseField> dbFields=mapping.getDescriptor().getPrimaryKeyFields();
    if (refDesc != null) {
      refObjectdbFields=refDesc.getFields();
    }
    if ((refObjectdbFields != null) && (!refObjectdbFields.isEmpty())) {
      for (      DatabaseField dbField : dbFields) {
        String dbFieldName=dbField.getName();
        String refObjectDbFieldName=null;
        if (refDesc != null) {
          for (          DatabaseField refObjectDbField : refObjectdbFields) {
            refObjectDbFieldName=refObjectDbField.getName();
            if ((refObjectDbFieldName != null) && (dbFieldName != null)) {
              if (dbFieldName.equals(refObjectDbFieldName)) {
                List<DatabaseMapping> refMappings=refDesc.getMappings();
                for (                DatabaseMapping refMapping : refMappings) {
                  DatabaseField field=refMapping.getField();
                  if (field != null) {
                    String fieldName=field.getName();
                    if (mapping instanceof OneToOneMapping) {
                      Map<DatabaseField,DatabaseField> targetToSourceKeyFields=((OneToOneMapping)mapping).getTargetToSourceKeyFields();
                      Map<DatabaseField,DatabaseField> sourceToTargetFields=((OneToOneMapping)mapping).getTargetToSourceKeyFields();
                      if ((targetToSourceKeyFields != null) && (!targetToSourceKeyFields.isEmpty())) {
                        if (targetToSourceKeyFields.containsKey(refObjectDbField)) {
                          if ((sourceToTargetFields != null) && (!sourceToTargetFields.isEmpty())) {
                            if (sourceToTargetFields.containsKey(field)) {
                              if ((fieldName != null) && (dbFieldName.equals(fieldName))) {
                                Object value=descriptor.getObjectBuilder().getBaseValueForField(dbField,entity);
                                Object realAttributeValue=refMapping.getRealAttributeValueFromAttribute(refMapping.getAttributeValueFromObject(value),value,(AbstractSession)app.getServerSession());
                                key.append(realAttributeValue);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else {
      Object part=mapping.getAttributeValueFromObject(entity);
      key.append(part);
    }
    if (sortableKeys.hasNext()) {
      key.append(SEPARATOR_STRING);
      refObjectdbFields=null;
    }
  }
  return key.toString();
}","public static String stringifyId(Object entity,String typeName,PersistenceContext app){
  ClassDescriptor descriptor=app.getDescriptor(typeName);
  List<DatabaseMapping> pkMappings=descriptor.getObjectBuilder().getPrimaryKeyMappings();
  if (pkMappings.isEmpty()) {
    return ""String_Node_Str"";
  }
  List<SortableKey> pkIndices=new ArrayList<>();
  int index=0;
  for (  DatabaseMapping mapping : pkMappings) {
    pkIndices.add(new SortableKey(mapping,index));
    index++;
  }
  Collections.sort(pkIndices);
  StringBuilder key=new StringBuilder();
  Iterator<SortableKey> sortableKeys=pkIndices.iterator();
  List<DatabaseField> refObjectdbFields=null;
  while (sortableKeys.hasNext()) {
    DatabaseMapping mapping=sortableKeys.next().getMapping();
    ClassDescriptor refDesc=mapping.getReferenceDescriptor();
    List<DatabaseField> dbFields=mapping.getDescriptor().getPrimaryKeyFields();
    if (refDesc != null) {
      refObjectdbFields=refDesc.getFields();
    }
    if ((refObjectdbFields != null) && (!refObjectdbFields.isEmpty())) {
      for (      DatabaseField dbField : dbFields) {
        String dbFieldName=dbField.getName();
        String refObjectDbFieldName=null;
        if (refDesc != null) {
          for (          DatabaseField refObjectDbField : refObjectdbFields) {
            refObjectDbFieldName=refObjectDbField.getName();
            if ((refObjectDbFieldName != null) && (dbFieldName != null)) {
              if (dbFieldName.equals(refObjectDbFieldName)) {
                List<DatabaseMapping> refMappings=refDesc.getMappings();
                for (                DatabaseMapping refMapping : refMappings) {
                  DatabaseField field=refMapping.getField();
                  if (field != null) {
                    String fieldName=field.getName();
                    if (mapping instanceof OneToOneMapping) {
                      Map<DatabaseField,DatabaseField> targetToSourceKeyFields=((OneToOneMapping)mapping).getTargetToSourceKeyFields();
                      Map<DatabaseField,DatabaseField> sourceToTargetFields=((OneToOneMapping)mapping).getTargetToSourceKeyFields();
                      if ((targetToSourceKeyFields != null) && (!targetToSourceKeyFields.isEmpty())) {
                        if (targetToSourceKeyFields.containsKey(refObjectDbField)) {
                          if ((sourceToTargetFields != null) && (!sourceToTargetFields.isEmpty())) {
                            if (sourceToTargetFields.containsKey(field)) {
                              if ((fieldName != null) && (dbFieldName.equals(fieldName))) {
                                Object value=descriptor.getObjectBuilder().getBaseValueForField(dbField,entity);
                                Object realAttributeValue=refMapping.getRealAttributeValueFromAttribute(refMapping.getAttributeValueFromObject(value),value,(AbstractSession)app.getServerSession());
                                key.append(realAttributeValue);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else {
      Object part=mapping.getAttributeValueFromObject(entity);
      key.append(part);
    }
    if (sortableKeys.hasNext()) {
      key.append(SEPARATOR_STRING);
      refObjectdbFields=null;
    }
  }
  return key.toString();
}"
63363,"@SuppressWarnings(""String_Node_Str"") public static Object buildId(PersistenceContext app,String entityName,String idString){
  DatabaseSession session=app.getServerSession();
  ClassDescriptor descriptor=app.getDescriptor(entityName);
  List<DatabaseMapping> pkMappings=descriptor.getObjectBuilder().getPrimaryKeyMappings();
  List<SortableKey> pkIndices=new ArrayList<SortableKey>();
  int index=0;
  int multitenantPKMappings=0;
  for (  DatabaseMapping mapping : pkMappings) {
    if (mapping.isMultitenantPrimaryKeyMapping()) {
      multitenantPKMappings++;
    }
 else {
      pkIndices.add(new SortableKey(mapping,index));
      index++;
    }
  }
  Collections.sort(pkIndices);
  Object[] keyElements=new Object[pkMappings.size() - multitenantPKMappings];
  StringTokenizer tokenizer=new StringTokenizer(idString,SEPARATOR_STRING);
  int tokens=tokenizer.countTokens();
  if (tokens + multitenantPKMappings != pkMappings.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  index=0;
  Iterator<SortableKey> iterator=pkIndices.iterator();
  while (tokenizer.hasMoreTokens()) {
    SortableKey key=iterator.next();
    String token=tokenizer.nextToken();
    DatabaseMapping mapping=key.getMapping();
    Class attributeClasification=mapping.getAttributeClassification();
    if (attributeClasification == null) {
      if ((mapping.getFields() != null) && (!mapping.getFields().isEmpty())) {
        attributeClasification=mapping.getFields().get(0).getType();
      }
    }
    Object idValue=session.getDatasourcePlatform().getConversionManager().convertObject(token,attributeClasification);
    keyElements[key.getIndex()]=idValue;
    index++;
  }
  if (descriptor.hasCMPPolicy()) {
    CMP3Policy policy=(CMP3Policy)descriptor.getCMPPolicy();
    return policy.createPrimaryKeyInstanceFromPrimaryKeyValues((AbstractSession)session,new int[]{0},keyElements);
  }
  if (keyElements.length == 1) {
    return keyElements[0];
  }
  return keyElements;
}","@SuppressWarnings(""String_Node_Str"") public static Object buildId(PersistenceContext app,String entityName,String idString){
  DatabaseSession session=app.getServerSession();
  ClassDescriptor descriptor=app.getDescriptor(entityName);
  List<DatabaseMapping> pkMappings=descriptor.getObjectBuilder().getPrimaryKeyMappings();
  List<SortableKey> pkIndices=new ArrayList<>();
  int index=0;
  int multitenantPKMappings=0;
  for (  DatabaseMapping mapping : pkMappings) {
    if (mapping.isMultitenantPrimaryKeyMapping()) {
      multitenantPKMappings++;
    }
 else {
      pkIndices.add(new SortableKey(mapping,index));
      index++;
    }
  }
  Collections.sort(pkIndices);
  Object[] keyElements=new Object[pkMappings.size() - multitenantPKMappings];
  StringTokenizer tokenizer=new StringTokenizer(idString,SEPARATOR_STRING);
  int tokens=tokenizer.countTokens();
  if (tokens + multitenantPKMappings != pkMappings.size()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  index=0;
  Iterator<SortableKey> iterator=pkIndices.iterator();
  while (tokenizer.hasMoreTokens()) {
    SortableKey key=iterator.next();
    String token=tokenizer.nextToken();
    DatabaseMapping mapping=key.getMapping();
    Class attributeClasification=mapping.getAttributeClassification();
    if (attributeClasification == null) {
      if ((mapping.getFields() != null) && (!mapping.getFields().isEmpty())) {
        attributeClasification=mapping.getFields().get(0).getType();
      }
    }
    Object idValue=session.getDatasourcePlatform().getConversionManager().convertObject(token,attributeClasification);
    keyElements[key.getIndex()]=idValue;
    index++;
  }
  if (descriptor.hasCMPPolicy()) {
    CMP3Policy policy=(CMP3Policy)descriptor.getCMPPolicy();
    return policy.createPrimaryKeyInstanceFromPrimaryKeyValues((AbstractSession)session,new int[]{0},keyElements);
  }
  if (keyElements.length == 1) {
    return keyElements[0];
  }
  return keyElements;
}"
63364,"@Override public int compareTo(SortableKey o){
  return mapping.getAttributeName().compareTo(o.getMapping().getAttributeName());
}","@Override public int compareTo(SortableKey o){
  if (this.equals(o)) {
    return 0;
  }
 else   if (mapping.getAttributeName().equals(o.getMapping().getAttributeName())) {
    return Integer.compare(index,o.getIndex());
  }
 else {
    return mapping.getAttributeName().compareTo(o.getMapping().getAttributeName());
  }
}"
63365,"/** 
 * Instantiates a new method exit log data.
 * @param result the result
 */
public MethodExitLogData(Object[] result){
  super();
  this.result=result;
}","/** 
 * Instantiates a new method exit log data.
 * @param result the result
 */
public MethodExitLogData(Object[] result){
  super();
  if (result != null) {
    this.result=Arrays.copyOf(result,result.length);
  }
}"
63366,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void preLogin(SessionEvent event){
  Project project=event.getSession().getProject();
  ClassLoader cl=jpaSession.getDatasourcePlatform().getConversionManager().getLoader();
  DefaultXMLNameTransformer xmlNameTransformer=new DefaultXMLNameTransformer();
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    if (!PersistenceWeavedRest.class.isAssignableFrom(descriptor.getJavaClass())) {
      continue;
    }
    if (descriptor.isXMLDescriptor()) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)project.getAliasDescriptors().get(descriptorAlias);
      if (null != xmlDescriptor) {
        if (null == xmlDescriptor.getDefaultRootElement()) {
          xmlDescriptor.setDefaultRootElement(xmlNameTransformer.transformRootElementName(xmlDescriptor.getJavaClass().getName()));
          xmlDescriptor.setResultAlwaysXMLRoot(false);
        }
      }
    }
    XMLCompositeCollectionMapping relationshipMapping=new XMLCompositeCollectionMapping();
    relationshipMapping.setAttributeName(""String_Node_Str"");
    relationshipMapping.setGetMethodName(""String_Node_Str"");
    relationshipMapping.setSetMethodName(""String_Node_Str"");
    relationshipMapping.setDescriptor(descriptor);
    CollectionContainerPolicy containerPolicy=new CollectionContainerPolicy(ArrayList.class);
    relationshipMapping.setContainerPolicy(containerPolicy);
    relationshipMapping.setField(new XMLField(""String_Node_Str""));
    relationshipMapping.setReferenceClass(Link.class);
    XMLJavaTypeConverter converter=new XMLJavaTypeConverter(RelationshipLinkAdapter.class);
    converter.initialize(relationshipMapping,event.getSession());
    relationshipMapping.setConverter(converter);
    descriptor.addMapping(relationshipMapping);
    XMLCompositeObjectMapping hrefMapping=new XMLCompositeObjectMapping();
    hrefMapping.setAttributeName(""String_Node_Str"");
    hrefMapping.setGetMethodName(""String_Node_Str"");
    hrefMapping.setSetMethodName(""String_Node_Str"");
    hrefMapping.setDescriptor(descriptor);
    hrefMapping.setField(new XMLField(""String_Node_Str""));
    hrefMapping.setReferenceClass(Link.class);
    hrefMapping.setXPath(""String_Node_Str"");
    descriptor.addMapping(hrefMapping);
    XMLCompositeObjectMapping itemLinksMapping=new XMLCompositeObjectMapping();
    itemLinksMapping.setAttributeName(""String_Node_Str"");
    itemLinksMapping.setGetMethodName(""String_Node_Str"");
    itemLinksMapping.setSetMethodName(""String_Node_Str"");
    itemLinksMapping.setDescriptor(descriptor);
    itemLinksMapping.setReferenceClass(ItemLinks.class);
    itemLinksMapping.setXPath(""String_Node_Str"");
    descriptor.addMapping(itemLinksMapping);
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (mapping.isAbstractCompositeCollectionMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeCollectionMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
 else           if (mapping.isAbstractCompositeObjectMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeObjectMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping != null) && (dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              if (jpaMapping != null) {
                if (jpaMapping.getMappedBy() != null) {
                  ClassDescriptor inverseDescriptor=project.getDescriptorForAlias(jpaMapping.getReferenceDescriptor().getAlias());
                  if (inverseDescriptor != null) {
                    DatabaseMapping inverseMapping=inverseDescriptor.getMappingForAttributeName(jpaMapping.getMappedBy());
                    if (inverseMapping != null) {
                      convertMappingToXMLInverseReferenceMapping(inverseDescriptor,inverseMapping,jpaMapping);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    InheritancePolicy inheritancePolicy=descriptor.getInheritancePolicyOrNull();
    if ((inheritancePolicy != null) && (inheritancePolicy.isRootParentDescriptor())) {
      boolean isAbstract=Modifier.isAbstract(descriptor.getJavaClass().getModifiers());
      if (isAbstract) {
        Class subClassToInstantiate=null;
        Map<?,?> classIndicatorMapping=inheritancePolicy.getClassIndicatorMapping();
        for (        Map.Entry<?,?> entry : classIndicatorMapping.entrySet()) {
          Object value=entry.getValue();
          if (value instanceof Class) {
            subClassToInstantiate=(Class)value;
            isAbstract=Modifier.isAbstract(subClassToInstantiate.getModifiers());
            if ((subClassToInstantiate != null) && (!isAbstract)) {
              InstantiationPolicy instantiationPolicy=new InstantiationPolicy();
              instantiationPolicy.useFactoryInstantiationPolicy(new ConcreteSubclassFactory(subClassToInstantiate),""String_Node_Str"");
              descriptor.setInstantiationPolicy(instantiationPolicy);
              break;
            }
          }
        }
      }
    }
  }
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
              convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
            }
          }
 else           if (mapping instanceof XMLCompositeObjectMapping) {
            XMLCompositeObjectMapping jpaMapping=(XMLCompositeObjectMapping)mapping;
            ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
            if (jaxbDescriptor != null) {
              Class clazz=jpaMapping.getReferenceClass();
              if (clazz != null) {
                if ((jpaSession.getDescriptor(clazz) != null) && (jpaSession.getDescriptor(clazz).isEISDescriptor()))                 convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
              }
            }
          }
        }
      }
    }
  }
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void preLogin(SessionEvent event){
  Project project=event.getSession().getProject();
  ClassLoader cl=jpaSession.getDatasourcePlatform().getConversionManager().getLoader();
  DefaultXMLNameTransformer xmlNameTransformer=new DefaultXMLNameTransformer();
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    if (!PersistenceWeavedRest.class.isAssignableFrom(descriptor.getJavaClass())) {
      continue;
    }
    if (descriptor.isXMLDescriptor()) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)project.getAliasDescriptors().get(descriptorAlias);
      if (null != xmlDescriptor) {
        if (null == xmlDescriptor.getDefaultRootElement()) {
          xmlDescriptor.setDefaultRootElement(xmlNameTransformer.transformRootElementName(xmlDescriptor.getJavaClass().getName()));
          xmlDescriptor.setResultAlwaysXMLRoot(false);
        }
      }
    }
    XMLCompositeCollectionMapping relationshipMapping=new XMLCompositeCollectionMapping();
    relationshipMapping.setAttributeName(""String_Node_Str"");
    relationshipMapping.setGetMethodName(""String_Node_Str"");
    relationshipMapping.setSetMethodName(""String_Node_Str"");
    relationshipMapping.setDescriptor(descriptor);
    CollectionContainerPolicy containerPolicy=new CollectionContainerPolicy(ArrayList.class);
    relationshipMapping.setContainerPolicy(containerPolicy);
    relationshipMapping.setField(new XMLField(""String_Node_Str""));
    relationshipMapping.setReferenceClass(Link.class);
    XMLJavaTypeConverter converter=new XMLJavaTypeConverter(RelationshipLinkAdapter.class);
    converter.initialize(relationshipMapping,event.getSession());
    relationshipMapping.setConverter(converter);
    descriptor.addMapping(relationshipMapping);
    XMLCompositeObjectMapping hrefMapping=new XMLCompositeObjectMapping();
    hrefMapping.setAttributeName(""String_Node_Str"");
    hrefMapping.setGetMethodName(""String_Node_Str"");
    hrefMapping.setSetMethodName(""String_Node_Str"");
    hrefMapping.setDescriptor(descriptor);
    hrefMapping.setField(new XMLField(""String_Node_Str""));
    hrefMapping.setReferenceClass(Link.class);
    hrefMapping.setXPath(""String_Node_Str"");
    descriptor.addMapping(hrefMapping);
    XMLCompositeObjectMapping itemLinksMapping=new XMLCompositeObjectMapping();
    itemLinksMapping.setAttributeName(""String_Node_Str"");
    itemLinksMapping.setGetMethodName(""String_Node_Str"");
    itemLinksMapping.setSetMethodName(""String_Node_Str"");
    itemLinksMapping.setDescriptor(descriptor);
    itemLinksMapping.setReferenceClass(ItemLinks.class);
    itemLinksMapping.setXPath(""String_Node_Str"");
    descriptor.addMapping(itemLinksMapping);
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (mapping.isAbstractCompositeCollectionMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeCollectionMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
 else           if (mapping.isAbstractCompositeObjectMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeObjectMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping != null) && (dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              if (jpaMapping.getMappedBy() != null) {
                ClassDescriptor inverseDescriptor=project.getDescriptorForAlias(jpaMapping.getReferenceDescriptor().getAlias());
                if (inverseDescriptor != null) {
                  DatabaseMapping inverseMapping=inverseDescriptor.getMappingForAttributeName(jpaMapping.getMappedBy());
                  if (inverseMapping != null) {
                    convertMappingToXMLInverseReferenceMapping(inverseDescriptor,inverseMapping,jpaMapping);
                  }
                }
              }
            }
          }
        }
      }
    }
    InheritancePolicy inheritancePolicy=descriptor.getInheritancePolicyOrNull();
    if ((inheritancePolicy != null) && (inheritancePolicy.isRootParentDescriptor())) {
      boolean isAbstract=Modifier.isAbstract(descriptor.getJavaClass().getModifiers());
      if (isAbstract) {
        Class subClassToInstantiate=null;
        Map<?,?> classIndicatorMapping=inheritancePolicy.getClassIndicatorMapping();
        for (        Map.Entry<?,?> entry : classIndicatorMapping.entrySet()) {
          Object value=entry.getValue();
          if (value instanceof Class) {
            subClassToInstantiate=(Class)value;
            isAbstract=Modifier.isAbstract(subClassToInstantiate.getModifiers());
            if (!isAbstract) {
              InstantiationPolicy instantiationPolicy=new InstantiationPolicy();
              instantiationPolicy.useFactoryInstantiationPolicy(new ConcreteSubclassFactory(subClassToInstantiate),""String_Node_Str"");
              descriptor.setInstantiationPolicy(instantiationPolicy);
              break;
            }
          }
        }
      }
    }
  }
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
              convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
            }
          }
 else           if (mapping instanceof XMLCompositeObjectMapping) {
            XMLCompositeObjectMapping jpaMapping=(XMLCompositeObjectMapping)mapping;
            ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
            if (jaxbDescriptor != null) {
              Class clazz=jpaMapping.getReferenceClass();
              if (clazz != null) {
                if ((jpaSession.getDescriptor(clazz) != null) && (jpaSession.getDescriptor(clazz).isEISDescriptor()))                 convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
              }
            }
          }
        }
      }
    }
  }
}"
63367,"/** 
 * Instantiates a new pre login mapping adapter.
 * @param jpaSession the jpa session
 */
public PreLoginMappingAdapterV2(AbstractSession jpaSession){
  this.jpaSession=jpaSession;
}","/** 
 * Instantiates a new pre login mapping adapter.
 */
public PreLoginMappingAdapterV2(){
}"
63368,"@SuppressWarnings(""String_Node_Str"") @Override public T unmarshal(Object object) throws Exception {
  if (object == null) {
    return null;
  }
  PersistenceWeavedRest persistenceWeavedRest=null;
  Link link=null;
  if (object instanceof PersistenceWeavedRest) {
    persistenceWeavedRest=(PersistenceWeavedRest)object;
    link=persistenceWeavedRest._persistence_getHref();
  }
 else   if (object instanceof Link) {
    link=(Link)object;
  }
 else {
    return null;
  }
  if ((null == link) || ((link != null) && (link.getHref() == null))) {
    if (persistenceWeavedRest != null) {
      ClassDescriptor descriptor=context.getJAXBDescriptorForClass(persistenceWeavedRest.getClass());
      if (persistenceWeavedRest instanceof FetchGroupTracker && JpaHelper.getDatabaseSession(context.getEmf()).doesObjectExist(persistenceWeavedRest)) {
        if (context.doesExist(null,persistenceWeavedRest)) {
          FetchGroup fetchGroup=new FetchGroup();
          for (          DatabaseMapping mapping : descriptor.getMappings()) {
            if (!(mapping instanceof XMLInverseReferenceMapping)) {
              fetchGroup.addAttribute(mapping.getAttributeName());
            }
          }
          (new FetchGroupManager()).setObjectFetchGroup(persistenceWeavedRest,fetchGroup,null);
        }
      }
      return (T)persistenceWeavedRest;
    }
  }
  if ((link != null) && (link.getHref() != null)) {
    String uri=link.getHref().replace(""String_Node_Str"",""String_Node_Str"");
    String entityType=uri.substring(uri.indexOf(""String_Node_Str""),uri.lastIndexOf('/'));
    entityType=entityType.substring(entityType.lastIndexOf(""String_Node_Str"") + 1);
    String entityId=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
    ClassDescriptor descriptor=context.getDescriptor(entityType);
    Object id=IdHelper.buildId(context,descriptor.getAlias(),entityId);
    T foundEntity=(T)getObjectById(entityType,id);
    return foundEntity;
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public T unmarshal(Object object) throws Exception {
  if (object == null) {
    return null;
  }
  PersistenceWeavedRest persistenceWeavedRest=null;
  Link link;
  if (object instanceof PersistenceWeavedRest) {
    persistenceWeavedRest=(PersistenceWeavedRest)object;
    link=persistenceWeavedRest._persistence_getHref();
  }
 else   if (object instanceof Link) {
    link=(Link)object;
  }
 else {
    return null;
  }
  if (null == link || link.getHref() == null) {
    if (persistenceWeavedRest != null) {
      ClassDescriptor descriptor=context.getJAXBDescriptorForClass(persistenceWeavedRest.getClass());
      if (persistenceWeavedRest instanceof FetchGroupTracker && JpaHelper.getDatabaseSession(context.getEmf()).doesObjectExist(persistenceWeavedRest)) {
        if (context.doesExist(null,persistenceWeavedRest)) {
          FetchGroup fetchGroup=new FetchGroup();
          for (          DatabaseMapping mapping : descriptor.getMappings()) {
            if (!(mapping instanceof XMLInverseReferenceMapping)) {
              fetchGroup.addAttribute(mapping.getAttributeName());
            }
          }
          (new FetchGroupManager()).setObjectFetchGroup(persistenceWeavedRest,fetchGroup,null);
        }
      }
      return (T)persistenceWeavedRest;
    }
  }
  if ((link != null) && (link.getHref() != null)) {
    String uri=link.getHref().replace(""String_Node_Str"",""String_Node_Str"");
    String entityType=uri.substring(uri.indexOf(""String_Node_Str""),uri.lastIndexOf('/'));
    entityType=entityType.substring(entityType.lastIndexOf(""String_Node_Str"") + 1);
    String entityId=uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1);
    ClassDescriptor descriptor=context.getDescriptor(entityType);
    Object id=IdHelper.buildId(context,descriptor.getAlias(),entityId);
    T foundEntity=(T)getObjectById(entityType,id);
    return foundEntity;
  }
  return null;
}"
63369,"private static Method[] getMethods(Class<?> cls){
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    return AccessController.doPrivileged(new PrivilegedGetDeclaredMethods(cls));
  }
  return PrivilegedAccessHelper.getMethods(cls);
}","private static Method[] getMethods(Class<?> cls){
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    return AccessController.doPrivileged(new PrivilegedGetMethods(cls));
  }
  return PrivilegedAccessHelper.getMethods(cls);
}"
63370,"/** 
 * {@inheritDoc}
 */
@Override public Object buildAttributeResponse(PersistenceContext context,Map<String,Object> queryParams,String attribute,Object results,UriInfo uriInfo){
  if (results instanceof List) {
    final List<Object> items=(List<Object>)results;
    if (containsDomainObjects(items)) {
      if (!items.isEmpty()) {
        ReadAllQueryResultCollection response=new ReadAllQueryResultCollection();
        response.setItems(items);
        return populatePagedCollectionLinks(queryParams,uriInfo,response);
      }
    }
  }
  return results;
}","/** 
 * {@inheritDoc}
 */
@Override public Object buildAttributeResponse(PersistenceContext context,Map<String,Object> queryParams,String attribute,Object results,UriInfo uriInfo){
  if (results instanceof List) {
    ReadAllQueryResultCollection response=new ReadAllQueryResultCollection();
    response.setItems((List<Object>)results);
    return populatePagedCollectionLinks(queryParams,uriInfo,response);
  }
  return results;
}"
63371,"/** 
 * This test checks a special case that can occur with lazily loaded relationships: <ul> <li>Read Project proj1 and remove it.</li> <li>Read Employee emp1 with relationship to proj1 (lazy loading).</li> <li>Assign the set of emp1's projects to a new employee emp2 (forces implicit loading on flush).</li> <li>Flush -> IllegalStateException expected because of relation emp2 -> proj1 (removed).</li> </ul>
 */
@Test @Bugzilla(bugid=317760) public void testRelationshipToRemovedLazy(){
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    Department dep=new Department(201,""String_Node_Str"");
    Employee emp1=new Employee(202,""String_Node_Str"",""String_Node_Str"",dep);
    Project proj=new Project(""String_Node_Str"");
    Set<Project> emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    Set<Employee> projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(dep.getId()));
    proj=em.find(Project.class,proj.getId());
    em.remove(proj);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    Employee emp2=new Employee(203,""String_Node_Str"",""String_Node_Str"",dep);
    proj.addEmployee(emp2);
    emp2.setProjects(emp1.getProjects());
    em.persist(emp2);
    boolean flushFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(204,""String_Node_Str"");
    emp1=new Employee(205,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(dep.getId()));
    proj=em.find(Project.class,proj.getId());
    em.remove(proj);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    emp2=new Employee(206,""String_Node_Str"",""String_Node_Str"",dep);
    emp2.setProjects(emp1.getProjects());
    em.persist(emp2);
    flushFailed=false;
    try {
      env.commitTransactionAndClear(em);
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushFailed,""String_Node_Str"");
    em.clear();
  }
  finally {
    closeEntityManager(em);
  }
}","/** 
 * This test checks a special case that can occur with lazily loaded relationships: <ul> <li>Read Project proj1 and remove it.</li> <li>Read Employee emp1 with relationship to proj1 (lazy loading).</li> <li>Assign the set of emp1's projects to a new employee emp2 (forces implicit loading on flush).</li> <li>Flush -> IllegalStateException expected because of relation emp2 -> proj1 (removed).</li> </ul>
 */
@Test @Bugzilla(bugid=311760) public void testRelationshipToRemovedLazy(){
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    Department dep=new Department(201,""String_Node_Str"");
    Employee emp1=new Employee(202,""String_Node_Str"",""String_Node_Str"",dep);
    Project proj=new Project(""String_Node_Str"");
    Set<Project> emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    Set<Employee> projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(dep.getId()));
    proj=em.find(Project.class,proj.getId());
    em.remove(proj);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    Employee emp2=new Employee(203,""String_Node_Str"",""String_Node_Str"",dep);
    proj.addEmployee(emp2);
    emp2.setProjects(emp1.getProjects());
    em.persist(emp2);
    boolean flushFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(204,""String_Node_Str"");
    emp1=new Employee(205,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    dep=em.find(Department.class,new Integer(dep.getId()));
    proj=em.find(Project.class,proj.getId());
    em.remove(proj);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    emp2=new Employee(206,""String_Node_Str"",""String_Node_Str"",dep);
    emp2.setProjects(emp1.getProjects());
    em.persist(emp2);
    flushFailed=false;
    try {
      env.commitTransactionAndClear(em);
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushFailed,""String_Node_Str"");
    em.clear();
  }
  finally {
    closeEntityManager(em);
  }
}"
63372,"@SuppressWarnings(""String_Node_Str"") @Test @Bugzilla(bugid=317760) public void testRelationshipToRemoved(){
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    Department dep=new Department(101,""String_Node_Str"");
    Employee emp1=new Employee(102,""String_Node_Str"",""String_Node_Str"",dep);
    Cubicle cub1=new Cubicle(new Integer(103),new Integer(103),""String_Node_Str"",emp1);
    emp1.setCubicle(cub1);
    env.beginTransaction(em);
    em.persist(dep);
    em.persist(emp1);
    em.persist(cub1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    cub1=em.find(Cubicle.class,cub1.getId());
    cub1.setEmployee(null);
    em.remove(cub1);
    boolean flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(104,""String_Node_Str"");
    emp1=new Employee(105,""String_Node_Str"",""String_Node_Str"",dep);
    Project proj=new Project(""String_Node_Str"");
    Set<Project> emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    Set<Employee> projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    proj=em.find(Project.class,proj.getId());
    emp1.getProjects().size();
    em.remove(proj);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(107,""String_Node_Str"");
    emp1=new Employee(108,""String_Node_Str"",""String_Node_Str"",dep);
    Employee emp2=new Employee(109,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    Set<Project> emp2Projects=new HashSet<Project>();
    emp2Projects.add(proj);
    emp2.setProjects(emp2Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    projEmployees.add(emp2);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    em.persist(emp2);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    emp2=em.find(Employee.class,new Integer(emp2.getId()));
    proj=em.find(Project.class,proj.getId());
    emp1.getProjects().size();
    proj.getEmployees().size();
    em.remove(emp2);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(111,""String_Node_Str"");
    emp1=new Employee(112,""String_Node_Str"",""String_Node_Str"",dep);
    cub1=new Cubicle(new Integer(113),new Integer(112),""String_Node_Str"",emp1);
    env.beginTransaction(em);
    em.persist(dep);
    em.persist(emp1);
    em.persist(cub1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    cub1=em.find(Cubicle.class,cub1.getId());
    em.remove(cub1);
    em.flush();
    emp1.setCubicle(cub1);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(114,""String_Node_Str"");
    emp1=new Employee(115,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    env.beginTransaction(em);
    em.persist(dep);
    em.persist(emp1);
    em.persist(proj);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    proj=em.find(Project.class,proj.getId());
    em.remove(proj);
    em.flush();
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(117,""String_Node_Str"");
    emp1=new Employee(118,""String_Node_Str"",""String_Node_Str"",dep);
    emp2=new Employee(119,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    em.persist(emp2);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    emp2=em.find(Employee.class,new Integer(emp2.getId()));
    proj=em.find(Project.class,proj.getId());
    emp1.getProjects().size();
    projEmployees=proj.getEmployees();
    projEmployees.size();
    em.remove(emp2);
    em.flush();
    emp2Projects=new HashSet<Project>();
    emp2Projects.add(proj);
    emp2.setProjects(emp2Projects);
    projEmployees.add(emp2);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
  }
  finally {
    closeEntityManager(em);
  }
}","@SuppressWarnings(""String_Node_Str"") @Test @Bugzilla(bugid=311760) public void testRelationshipToRemoved(){
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    Department dep=new Department(101,""String_Node_Str"");
    Employee emp1=new Employee(102,""String_Node_Str"",""String_Node_Str"",dep);
    Cubicle cub1=new Cubicle(new Integer(103),new Integer(103),""String_Node_Str"",emp1);
    emp1.setCubicle(cub1);
    env.beginTransaction(em);
    em.persist(dep);
    em.persist(emp1);
    em.persist(cub1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    cub1=em.find(Cubicle.class,cub1.getId());
    cub1.setEmployee(null);
    em.remove(cub1);
    boolean flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(104,""String_Node_Str"");
    emp1=new Employee(105,""String_Node_Str"",""String_Node_Str"",dep);
    Project proj=new Project(""String_Node_Str"");
    Set<Project> emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    Set<Employee> projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    proj=em.find(Project.class,proj.getId());
    emp1.getProjects().size();
    em.remove(proj);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(107,""String_Node_Str"");
    emp1=new Employee(108,""String_Node_Str"",""String_Node_Str"",dep);
    Employee emp2=new Employee(109,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    Set<Project> emp2Projects=new HashSet<Project>();
    emp2Projects.add(proj);
    emp2.setProjects(emp2Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    projEmployees.add(emp2);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    em.persist(emp2);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    emp2=em.find(Employee.class,new Integer(emp2.getId()));
    proj=em.find(Project.class,proj.getId());
    emp1.getProjects().size();
    proj.getEmployees().size();
    em.remove(emp2);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(111,""String_Node_Str"");
    emp1=new Employee(112,""String_Node_Str"",""String_Node_Str"",dep);
    cub1=new Cubicle(new Integer(113),new Integer(112),""String_Node_Str"",emp1);
    env.beginTransaction(em);
    em.persist(dep);
    em.persist(emp1);
    em.persist(cub1);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    cub1=em.find(Cubicle.class,cub1.getId());
    em.remove(cub1);
    em.flush();
    emp1.setCubicle(cub1);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(114,""String_Node_Str"");
    emp1=new Employee(115,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    env.beginTransaction(em);
    em.persist(dep);
    em.persist(emp1);
    em.persist(proj);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    proj=em.find(Project.class,proj.getId());
    em.remove(proj);
    em.flush();
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
    dep=new Department(117,""String_Node_Str"");
    emp1=new Employee(118,""String_Node_Str"",""String_Node_Str"",dep);
    emp2=new Employee(119,""String_Node_Str"",""String_Node_Str"",dep);
    proj=new Project(""String_Node_Str"");
    emp1Projects=new HashSet<Project>();
    emp1Projects.add(proj);
    emp1.setProjects(emp1Projects);
    projEmployees=new HashSet<Employee>();
    projEmployees.add(emp1);
    proj.setEmployees(projEmployees);
    env.beginTransaction(em);
    em.persist(proj);
    em.persist(dep);
    em.persist(emp1);
    em.persist(emp2);
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    emp1=em.find(Employee.class,new Integer(emp1.getId()));
    emp2=em.find(Employee.class,new Integer(emp2.getId()));
    proj=em.find(Project.class,proj.getId());
    emp1.getProjects().size();
    projEmployees=proj.getEmployees();
    projEmployees.size();
    em.remove(emp2);
    em.flush();
    emp2Projects=new HashSet<Project>();
    emp2Projects.add(proj);
    emp2.setProjects(emp2Projects);
    projEmployees.add(emp2);
    flushOrCommmitFailed=false;
    try {
      em.flush();
    }
 catch (    IllegalStateException e) {
      flushOrCommmitFailed=true;
      verify(env.isTransactionMarkedForRollback(em),""String_Node_Str"");
      env.rollbackTransactionAndClear(em);
    }
    try {
      if (env.isTransactionActive(em)) {
        env.commitTransactionAndClear(em);
      }
    }
 catch (    RuntimeException e) {
      if (!checkForIllegalStateException(e)) {
        throw e;
      }
      flushOrCommmitFailed=true;
    }
    verify(!env.isTransactionActive(em),""String_Node_Str"");
    verify(flushOrCommmitFailed,""String_Node_Str"");
    em.clear();
  }
  finally {
    closeEntityManager(em);
  }
}"
63373,"@Test @Bugzilla(bugid=338783,databaseNames={""String_Node_Str"",""String_Node_Str""}) public void testDeleteAllDepartments() throws SQLException {
  EntityManager em=getEnvironment().getEntityManager();
  try {
    init();
    getEnvironment().beginTransaction(em);
    Query emplyoeeDelete=em.createQuery(""String_Node_Str"");
    emplyoeeDelete.executeUpdate();
    Query query=em.createQuery(""String_Node_Str"");
    int count=query.executeUpdate();
    if (!""String_Node_Str"".equals(getEnvironment().getPropertyValue(em,PersistenceUnitProperties.BATCH_WRITING))) {
      verify(count == 2,""String_Node_Str"" + count);
    }
    getEnvironment().commitTransaction(em);
    verifyCountOnDatabase(0,""String_Node_Str"");
    init();
    getEnvironment().beginTransaction(em);
    emplyoeeDelete=em.createQuery(""String_Node_Str"");
    emplyoeeDelete.executeUpdate();
    query=em.createQuery(""String_Node_Str"");
    count=query.executeUpdate();
    if (!""String_Node_Str"".equals(getEnvironment().getPropertyValue(em,PersistenceUnitProperties.BATCH_WRITING))) {
      verify(count == 1,""String_Node_Str"" + count);
    }
    getEnvironment().commitTransaction(em);
    verifyCountOnDatabase(1,""String_Node_Str"");
  }
  finally {
    closeEntityManager(em);
  }
}","@Test public void testDeleteAllDepartments() throws SQLException {
  EntityManager em=getEnvironment().getEntityManager();
  try {
    init();
    getEnvironment().beginTransaction(em);
    Query emplyoeeDelete=em.createQuery(""String_Node_Str"");
    emplyoeeDelete.executeUpdate();
    Query query=em.createQuery(""String_Node_Str"");
    int count=query.executeUpdate();
    if (!""String_Node_Str"".equals(getEnvironment().getPropertyValue(em,PersistenceUnitProperties.BATCH_WRITING))) {
      verify(count == 2,""String_Node_Str"" + count);
    }
    getEnvironment().commitTransaction(em);
    verifyCountOnDatabase(0,""String_Node_Str"");
    init();
    getEnvironment().beginTransaction(em);
    emplyoeeDelete=em.createQuery(""String_Node_Str"");
    emplyoeeDelete.executeUpdate();
    query=em.createQuery(""String_Node_Str"");
    count=query.executeUpdate();
    if (!""String_Node_Str"".equals(getEnvironment().getPropertyValue(em,PersistenceUnitProperties.BATCH_WRITING))) {
      verify(count == 1,""String_Node_Str"" + count);
    }
    getEnvironment().commitTransaction(em);
    verifyCountOnDatabase(1,""String_Node_Str"");
  }
  finally {
    closeEntityManager(em);
  }
}"
63374,"@Test public void testExchange() throws SQLException {
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    final int newId;
    env.beginTransaction(em);
    Employee emp=em.find(Employee.class,HANS_ID);
    verify(emp != null,""String_Node_Str"");
    Set<Project> projects=emp.getProjects();
    Iterator<Project> iter=projects.iterator();
    Project project=(Project)iter.next();
    int removedId=project.getId().intValue();
    em.remove(project);
    iter.remove();
    Project p7=new Project(""String_Node_Str"");
    em.persist(p7);
    newId=p7.getId().intValue();
    projects.add(p7);
    emp.clearPostUpdate();
    env.commitTransactionAndClear(em);
    verify(emp.postUpdateWasCalled(),""String_Node_Str"");
    Set<Pair> expected=new HashSet<Pair>(SEED_SET);
    expected.remove(new Pair(HANS_ID_VALUE,removedId));
    expected.remove(new Pair(FRED_ID_VALUE,removedId));
    expected.add(new Pair(HANS_ID_VALUE,newId));
    checkJoinTable(expected);
    env.beginTransaction(em);
    emp=em.find(Employee.class,HANS_ID);
    projects=emp.getProjects();
    verify(projects.size() == 3,""String_Node_Str"" + projects.size());
    env.rollbackTransactionAndClear(em);
  }
  finally {
    env.evictAll(em);
    closeEntityManager(em);
  }
}","@Test public void testExchange() throws SQLException {
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    final int newId;
    env.beginTransaction(em);
    Employee emp=em.find(Employee.class,HANS_ID);
    verify(emp != null,""String_Node_Str"");
    Set<Project> projects=emp.getProjects();
    Iterator<Project> iter=projects.iterator();
    Project project=iter.next();
    int removedId=project.getId().intValue();
    em.remove(project);
    iter.remove();
    Project p7=new Project(""String_Node_Str"");
    em.persist(p7);
    newId=p7.getId().intValue();
    projects.add(p7);
    emp.clearPostUpdate();
    env.commitTransactionAndClear(em);
    verify(emp.postUpdateWasCalled(),""String_Node_Str"");
    Set<Pair> expected=new HashSet<Pair>(SEED_SET);
    expected.remove(new Pair(HANS_ID_VALUE,removedId));
    expected.remove(new Pair(FRED_ID_VALUE,removedId));
    expected.add(new Pair(HANS_ID_VALUE,newId));
    checkJoinTable(expected);
    env.beginTransaction(em);
    emp=em.find(Employee.class,HANS_ID);
    projects=emp.getProjects();
    verify(projects.size() == 3,""String_Node_Str"" + projects.size());
    env.rollbackTransactionAndClear(em);
  }
  finally {
    env.evictAll(em);
    closeEntityManager(em);
  }
}"
63375,"@Test @Bugzilla(bugid=338783,databaseNames={""String_Node_Str"",""String_Node_Str""}) public void testCascadeMerge() throws IOException, ClassNotFoundException {
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    env.beginTransaction(em);
    em.createQuery(""String_Node_Str"").executeUpdate();
    em.createQuery(""String_Node_Str"").executeUpdate();
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    Bicycle bicycle=new Bicycle();
    em.persist(bicycle);
    Short bikeId=bicycle.getId();
    env.commitTransaction(em);
    bicycle=em.find(Bicycle.class,bikeId);
    em.clear();
    bicycle=AbstractBaseTest.serializeDeserialize(bicycle);
    Employee emp=new Employee(9999,""String_Node_Str"",""String_Node_Str"",null);
    emp.clearPostPersist();
    bicycle.setRiders(Collections.singleton(emp));
    env.beginTransaction(em);
    Bicycle mergedBike=em.merge(bicycle);
    env.commitTransactionAndClear(em);
    Employee mergedEmp=mergedBike.getRiders().iterator().next();
    verify(mergedEmp.postPersistWasCalled(),""String_Node_Str"");
    verify(em.find(Employee.class,9999) != null,""String_Node_Str"");
  }
  finally {
    closeEntityManager(em);
  }
}","@Test public void testCascadeMerge() throws IOException, ClassNotFoundException {
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    env.beginTransaction(em);
    em.createQuery(""String_Node_Str"").executeUpdate();
    em.createQuery(""String_Node_Str"").executeUpdate();
    env.commitTransactionAndClear(em);
    env.beginTransaction(em);
    Bicycle bicycle=new Bicycle();
    em.persist(bicycle);
    Short bikeId=bicycle.getId();
    env.commitTransaction(em);
    bicycle=em.find(Bicycle.class,bikeId);
    em.clear();
    bicycle=AbstractBaseTest.serializeDeserialize(bicycle);
    Employee emp=new Employee(9999,""String_Node_Str"",""String_Node_Str"",null);
    emp.clearPostPersist();
    bicycle.setRiders(Collections.singleton(emp));
    env.beginTransaction(em);
    Bicycle mergedBike=em.merge(bicycle);
    env.commitTransactionAndClear(em);
    Employee mergedEmp=mergedBike.getRiders().iterator().next();
    verify(mergedEmp.postPersistWasCalled(),""String_Node_Str"");
    verify(em.find(Employee.class,9999) != null,""String_Node_Str"");
  }
  finally {
    closeEntityManager(em);
  }
}"
63376,"/** 
 * Create an instance of   {@link ServerPlatform} from parameters passed in.
 * @param session {@link DatabaseSession} which will be passed to the constructor of {@link ServerPlatform}
 * @param platformClass fully qualified name of the {@link ServerPlatform} implementation to initialize
 * @param loader {@link ClassLoader} to look up given platformClass
 * @return initialized instance of {@link ServerPlatform}
 * @throws NullPointerException if platformClass is null
 * @throws ServerPlatformException if supplied platformClass is not found or can not be initialized
 * @see ServerPlatformBase#ServerPlatformBase(DatabaseSession)
 */
public static ServerPlatform createServerPlatform(DatabaseSession session,String platformClass,ClassLoader loader){
  if (platformClass == null) {
    throw new NullPointerException();
  }
  Class cls=null;
  try {
    cls=findClass(platformClass,loader);
  }
 catch (  ClassNotFoundException|PrivilegedActionException ex) {
    ClassLoader cl=ServerPlatformUtils.class.getClassLoader();
    if (loader != cl) {
      try {
        cls=findClass(platformClass,cl);
      }
 catch (      ClassNotFoundException|PrivilegedActionException ex1) {
        throw ServerPlatformException.serverPlatformClassNotFound(platformClass,ex);
      }
    }
 else {
      throw ServerPlatformException.serverPlatformClassNotFound(platformClass,ex);
    }
  }
  final Class[] paramTypes=new Class[]{DatabaseSession.class};
  final Object[] params=new Object[]{session};
  ServerPlatform platform=null;
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      Constructor constructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(cls,paramTypes,false));
      platform=(ServerPlatform)AccessController.doPrivileged(new PrivilegedInvokeConstructor(constructor,params));
    }
 catch (    PrivilegedActionException ex) {
      throw ServerPlatformException.invalidServerPlatformClass(platformClass,ex);
    }
  }
 else {
    try {
      Constructor constructor=PrivilegedAccessHelper.getConstructorFor(cls,paramTypes,false);
      platform=(ServerPlatform)PrivilegedAccessHelper.invokeConstructor(constructor,params);
    }
 catch (    NoSuchMethodException|IllegalAccessException|InvocationTargetException|InstantiationException ex) {
      throw ServerPlatformException.invalidServerPlatformClass(platformClass,ex);
    }
  }
  return platform;
}","/** 
 * Create an instance of   {@link ServerPlatform} from parameters passed in.
 * @param session {@link DatabaseSession} which will be passed to the constructor of {@link ServerPlatform}
 * @param platformClass fully qualified name of the {@link ServerPlatform} implementation to initialize
 * @param loader {@link ClassLoader} to look up given platformClass
 * @return initialized instance of {@link ServerPlatform}
 * @throws ServerPlatformException if supplied platformClass is not found, can not be initialized, or is null.
 * @see ServerPlatformBase#ServerPlatformBase(DatabaseSession)
 */
public static ServerPlatform createServerPlatform(DatabaseSession session,String platformClass,ClassLoader loader){
  if (platformClass == null) {
    throw ServerPlatformException.invalidServerPlatformClass(platformClass,null);
  }
  Class cls=null;
  try {
    cls=findClass(platformClass,loader);
  }
 catch (  ClassNotFoundException|PrivilegedActionException ex) {
    ClassLoader cl=ServerPlatformUtils.class.getClassLoader();
    if (loader != cl) {
      try {
        cls=findClass(platformClass,cl);
      }
 catch (      ClassNotFoundException|PrivilegedActionException ex1) {
        throw ServerPlatformException.serverPlatformClassNotFound(platformClass,ex);
      }
    }
 else {
      throw ServerPlatformException.serverPlatformClassNotFound(platformClass,ex);
    }
  }
  final Class[] paramTypes=new Class[]{DatabaseSession.class};
  final Object[] params=new Object[]{session};
  ServerPlatform platform=null;
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      Constructor constructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(cls,paramTypes,false));
      platform=(ServerPlatform)AccessController.doPrivileged(new PrivilegedInvokeConstructor(constructor,params));
    }
 catch (    PrivilegedActionException ex) {
      throw ServerPlatformException.invalidServerPlatformClass(platformClass,ex);
    }
  }
 else {
    try {
      Constructor constructor=PrivilegedAccessHelper.getConstructorFor(cls,paramTypes,false);
      platform=(ServerPlatform)PrivilegedAccessHelper.invokeConstructor(constructor,params);
    }
 catch (    NoSuchMethodException|IllegalAccessException|InvocationTargetException|InstantiationException ex) {
      throw ServerPlatformException.invalidServerPlatformClass(platformClass,ex);
    }
  }
  return platform;
}"
63377,"/** 
 * INTERNAL:
 */
public Map<String,ATTRIBUTE_ITEM> getItems(){
  if (this.items == null) {
    this.items=new HashMap();
  }
  return this.items;
}","/** 
 * INTERNAL:
 * @return Non-null Map of attributes in the group mapped to their AttributeItems
 */
public Map<String,ATTRIBUTE_ITEM> getItems(){
  if (this.items == null) {
    this.items=new HashMap();
  }
  return this.items;
}"
63378,"@Override public int hashCode(){
  Map<String,ATTRIBUTE_ITEM> items=getItems();
  int result=superClassGroup != null ? superClassGroup.hashCode() : 0;
  result=31 * result + (items != null ? items.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  int result=superClassGroup != null ? superClassGroup.hashCode() : 0;
  result=31 * result + getItems().hashCode();
  return result;
}"
63379,"@Override public int hashCode(){
  Object[] typePropertyValues=getTypePropertyValues();
  boolean[] typePropertiesIsSetStatus=getTypePropertiesIsSetStatus();
  Map openContentValues=getOpenContentValues();
  int result=dataObject != null ? dataObject.hashCode() : 0;
  result=31 * result + (typePropertyValues != null ? Arrays.hashCode(typePropertyValues) : 0);
  result=31 * result + (typePropertiesIsSetStatus != null ? Arrays.hashCode(typePropertiesIsSetStatus) : 0);
  result=31 * result + (openContentValues != null ? openContentValues.hashCode() : 0);
  return result;
}","@Override public int hashCode(){
  Object[] typePropertyValues=getTypePropertyValues();
  boolean[] typePropertiesIsSetStatus=getTypePropertiesIsSetStatus();
  int result=dataObject != null ? dataObject.hashCode() : 0;
  result=31 * result + (typePropertyValues != null ? Arrays.hashCode(typePropertyValues) : 0);
  result=31 * result + (typePropertiesIsSetStatus != null ? Arrays.hashCode(typePropertiesIsSetStatus) : 0);
  result=31 * result + getOpenContentValues().hashCode();
  return result;
}"
63380,"/** 
 * INTERNAL:
 * @return Map of values for open content properties
 */
public Map getOpenContentValues(){
  if (openContentValues == null) {
    openContentValues=new HashMap();
  }
  return openContentValues;
}","/** 
 * INTERNAL:
 * @return Non-null Map of values for open content properties
 */
public Map getOpenContentValues(){
  if (openContentValues == null) {
    openContentValues=new HashMap();
  }
  return openContentValues;
}"
63381,"public void addTests(){
  addSRGTests();
  addTest(new QueryTimeoutTest());
  addTest(new ServerSessionTestAdapter(new PessimisticLockNoLockJoinedTest()));
  addTest(new ReadAllNoDistinctTest());
  addTest(new PartialAttributeTestWithJoinAttribute());
  addTest(new PartialAttributeDistinctOrderByTest());
  addTest(new FourPartialAttributeTestsWithJoinAttribute());
  addTest(buildReadOnlyQueryTest());
  addTest(buildGetSQLTest());
  addTest(buildJoinSubclassesQueryTest());
  addTest(buildRecordTest());
  addTest(new ConformResultsWithMultitableAndJoiningTest());
  addTest(new CachedUpdateCallsQueryClearTest());
  addTest(new ZeroPrimaryKeyExistenceCheckTest(true));
  addTest(new ZeroPrimaryKeyExistenceCheckTest(false));
  addTest(new QueryTimeoutConnectionReleasedTest());
  addTest(new QueryExecutionTimeSetOnBuildObjectTest());
  addTest(new PartialAttributeWithCustomSQLTest());
  addTest(buildArgumentValuesTest());
  addTest(new ScrollableCursorForwardOnlyResultSetTest());
  addTest(new ConformResultsSubclassesTest());
  addTest(new ScrollableCursorJoinedAttributeTest());
  addTest(new ScrollableCursorJoiningVerificationTest());
  addTest(new MultipleOrderByWithSameFieldNameNullsFirstTest());
  addTest(new MultipleOrderByWithSameFieldNameTest());
  addTest(buildUnionTest());
}","public void addTests(){
  addSRGTests();
  addTest(new QueryTimeoutTest());
  addTest(new ServerSessionTestAdapter(new PessimisticLockNoLockJoinedTest()));
  addTest(new ReadAllNoDistinctTest());
  addTest(new ObjectLevelReadQueryTest.CustomQueryRaceConditionsInReadAllQueryTest());
  addTest(new ObjectLevelReadQueryTest.CustomQueryRaceConditionsInReadObjectQueryTest());
  addTest(new PartialAttributeTestWithJoinAttribute());
  addTest(new PartialAttributeDistinctOrderByTest());
  addTest(new FourPartialAttributeTestsWithJoinAttribute());
  addTest(buildReadOnlyQueryTest());
  addTest(buildGetSQLTest());
  addTest(buildJoinSubclassesQueryTest());
  addTest(buildRecordTest());
  addTest(new ConformResultsWithMultitableAndJoiningTest());
  addTest(new CachedUpdateCallsQueryClearTest());
  addTest(new ZeroPrimaryKeyExistenceCheckTest(true));
  addTest(new ZeroPrimaryKeyExistenceCheckTest(false));
  addTest(new QueryTimeoutConnectionReleasedTest());
  addTest(new QueryExecutionTimeSetOnBuildObjectTest());
  addTest(new PartialAttributeWithCustomSQLTest());
  addTest(buildArgumentValuesTest());
  addTest(new ScrollableCursorForwardOnlyResultSetTest());
  addTest(new ConformResultsSubclassesTest());
  addTest(new ScrollableCursorJoinedAttributeTest());
  addTest(new ScrollableCursorJoiningVerificationTest());
  addTest(new MultipleOrderByWithSameFieldNameNullsFirstTest());
  addTest(new MultipleOrderByWithSameFieldNameTest());
  addTest(buildUnionTest());
}"
63382,"/** 
 * INTERNAL: PERF: Set if this query will use the descriptor custom query instead of executing itself.
 */
protected void setIsCustomQueryUsed(boolean isCustomQueryUsed){
  if (isCustomQueryUsed) {
    this.isCustomQueryUsed=Boolean.TRUE;
  }
 else {
    this.isCustomQueryUsed=Boolean.FALSE;
  }
}","/** 
 * INTERNAL: PERF: Set if this query will use the descriptor custom query instead of executing itself.
 * @param isCustomQueryUsed Custom query flag as {@code boolean}.
 */
protected void setIsCustomQueryUsed(final boolean isCustomQueryUsed){
  this.isCustomQueryUsed=isCustomQueryUsed;
}"
63383,"protected XMLDescriptor buildServiceDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DBWSModel.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping name=new XMLDirectMapping();
  name.setAttributeName(""String_Node_Str"");
  name.setXPath(""String_Node_Str"");
  descriptor.addMapping(name);
  XMLDirectMapping sessionFile=new XMLDirectMapping();
  sessionFile.setAttributeName(""String_Node_Str"");
  sessionFile.setXPath(""String_Node_Str"");
  descriptor.addMapping(sessionFile);
  XMLChoiceCollectionMapping operationsMapping=new XMLChoiceCollectionMapping();
  operationsMapping.setAttributeName(""String_Node_Str"");
  operationsMapping.setAttributeAccessor(new AttributeAccessor(){
    public Object getAttributeValueFromObject(    Object object){
      return ((XRServiceModel)object).getOperationsList();
    }
    public void setAttributeValueInObject(    Object object,    Object value){
      Vector v=(Vector)value;
      XRServiceModel dbwsModel=(XRServiceModel)object;
      Map<String,Operation> operations=dbwsModel.getOperations();
      for (Iterator i=v.iterator(); i.hasNext(); ) {
        Object obj=i.next();
        if (obj instanceof Operation) {
          Operation op=(Operation)obj;
          operations.put(op.getName(),op);
        }
      }
    }
  }
);
  operationsMapping.addChoiceElement(""String_Node_Str"",InsertOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",QueryOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",UpdateOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",DeleteOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",BatchQueryOperation.class);
  descriptor.addMapping(operationsMapping);
  return descriptor;
}","protected XMLDescriptor buildServiceDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DBWSModel.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping name=new XMLDirectMapping();
  name.setAttributeName(""String_Node_Str"");
  name.setXPath(""String_Node_Str"");
  descriptor.addMapping(name);
  XMLDirectMapping sessionFile=new XMLDirectMapping();
  sessionFile.setAttributeName(""String_Node_Str"");
  sessionFile.setXPath(""String_Node_Str"");
  descriptor.addMapping(sessionFile);
  XMLChoiceCollectionMapping operationsMapping=new XMLChoiceCollectionMapping();
  operationsMapping.setAttributeName(""String_Node_Str"");
  operationsMapping.setAttributeAccessor(new AttributeAccessor(){
    @Override public Object getAttributeValueFromObject(    Object object){
      return ((XRServiceModel)object).getOperationsList();
    }
    @Override public void setAttributeValueInObject(    Object object,    Object value){
      Vector v=(Vector)value;
      XRServiceModel dbwsModel=(XRServiceModel)object;
      Map<String,Operation> operations=dbwsModel.getOperations();
      for (Iterator i=v.iterator(); i.hasNext(); ) {
        Object obj=i.next();
        if (obj instanceof Operation) {
          Operation op=(Operation)obj;
          operations.put(op.getName(),op);
        }
      }
    }
  }
);
  operationsMapping.addChoiceElement(""String_Node_Str"",InsertOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",QueryOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",UpdateOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",DeleteOperation.class);
  operationsMapping.addChoiceElement(""String_Node_Str"",BatchQueryOperation.class);
  descriptor.addMapping(operationsMapping);
  return descriptor;
}"
63384,"@SuppressWarnings(""String_Node_Str"") public void init(ClassLoader parentClassLoader,ServletContext sc,boolean mtomEnabled){
  this.parentClassLoader=parentClassLoader;
  this.mtomEnabled=mtomEnabled;
  InputStream xrServiceStream=initXRServiceStream(parentClassLoader,sc);
  DBWSModelProject xrServiceModelProject=new DBWSModelProject();
  XMLContext xmlContext=new XMLContext(xrServiceModelProject);
  XMLUnmarshaller unmarshaller=xmlContext.createUnmarshaller();
  XRServiceModel xrServiceModel;
  try {
    xrServiceModel=(XRServiceModel)unmarshaller.unmarshal(xrServiceStream);
  }
 catch (  XMLMarshalException e) {
    throw new WebServiceException(DBWSException.couldNotParseDBWSFile());
  }
 finally {
    try {
      xrServiceStream.close();
    }
 catch (    IOException e) {
    }
  }
  xrSchemaStream=initXRSchemaStream(parentClassLoader,sc);
  try {
    buildService(xrServiceModel);
  }
 catch (  Exception e) {
    throw new WebServiceException(e);
  }
  DBWSAdapter dbwsAdapter=(DBWSAdapter)xrService;
  InputStream wsdlInputStream=initWSDLInputStream(parentClassLoader,sc);
  try {
    StringWriter sw=new StringWriter();
    StreamSource wsdlStreamSource=new StreamSource(wsdlInputStream);
    Transformer t=TransformerFactory.newInstance().newTransformer(new StreamSource(new StringReader(MATCH_SCHEMA)));
    StreamResult streamResult=new StreamResult(sw);
    t.transform(wsdlStreamSource,streamResult);
    sw.toString();
    wsdlInputStream.close();
    SchemaModelProject schemaProject=new SchemaModelProject();
    XMLContext xmlContext2=new XMLContext(schemaProject);
    unmarshaller=xmlContext2.createUnmarshaller();
    Schema extendedSchema=(Schema)unmarshaller.unmarshal(new StringReader(sw.toString()));
    dbwsAdapter.setExtendedSchema(extendedSchema);
  }
 catch (  Exception e) {
  }
 finally {
    try {
      wsdlInputStream.close();
    }
 catch (    IOException e) {
    }
  }
  String tns=dbwsAdapter.getExtendedSchema().getTargetNamespace();
  Project oxProject=dbwsAdapter.getOXSession().getProject();
  XMLDescriptor invocationDescriptor=new XMLDescriptor();
  invocationDescriptor.setJavaClass(Invocation.class);
  NamespaceResolver nr=new NamespaceResolver();
  invocationDescriptor.setNamespaceResolver(nr);
  nr.put(SERVICE_NAMESPACE_PREFIX,tns);
  nr.setDefaultNamespaceURI(tns);
  XMLAnyCollectionMapping parametersMapping=new XMLAnyCollectionMapping();
  parametersMapping.setAttributeName(""String_Node_Str"");
  parametersMapping.setAttributeAccessor(new AttributeAccessor(){
    Project oxProject;
    DBWSAdapter dbwsAdapter;
    @Override public Object getAttributeValueFromObject(    Object object){
      return ((Invocation)object).getParameters();
    }
    @Override public void setAttributeValueInObject(    Object object,    Object value){
      Invocation invocation=(Invocation)object;
      Vector values=(Vector)value;
      for (Iterator i=values.iterator(); i.hasNext(); ) {
        Object o=i.next();
        if (o instanceof Element) {
          Element e=(Element)o;
          String key=e.getLocalName();
          if (""String_Node_Str"".equals(key)) {
            NodeList nl=e.getChildNodes();
            for (int j=0; j < nl.getLength(); j++) {
              Node n=nl.item(j);
              if (n.getNodeType() == Node.ELEMENT_NODE) {
                try {
                  Object theInstance=dbwsAdapter.getXMLContext().createUnmarshaller().unmarshal(n);
                  if (theInstance instanceof XMLRoot) {
                    theInstance=((XMLRoot)theInstance).getObject();
                  }
                  invocation.setParameter(key,theInstance);
                  break;
                }
 catch (                XMLMarshalException xmlMarshallException) {
                  throw new WebServiceException(xmlMarshallException);
                }
              }
            }
          }
 else {
            ClassDescriptor desc=null;
            for (            XMLDescriptor xdesc : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
              XMLSchemaReference schemaReference=xdesc.getSchemaReference();
              if (schemaReference != null && schemaReference.getSchemaContext().equalsIgnoreCase(key)) {
                desc=xdesc;
                break;
              }
            }
            if (desc != null) {
              try {
                Object theObject=dbwsAdapter.getXMLContext().createUnmarshaller().unmarshal(e,desc.getJavaClass());
                if (theObject instanceof XMLRoot) {
                  theObject=((XMLRoot)theObject).getObject();
                }
                invocation.setParameter(key,theObject);
              }
 catch (              XMLMarshalException xmlMarshallException) {
                throw new WebServiceException(xmlMarshallException);
              }
            }
 else {
              String serviceName=e.getParentNode().getLocalName();
              boolean found=false;
              for (              Operation op : dbwsAdapter.getOperationsList()) {
                if (op.getName().equals(serviceName)) {
                  for (                  Parameter p : op.getParameters()) {
                    if (p.getName().equals(key)) {
                      desc=dbwsAdapter.getDescriptorsByQName().get(p.getType());
                      if (desc != null) {
                        found=true;
                      }
                      break;
                    }
                  }
                }
                if (found) {
                  break;
                }
              }
              if (found) {
                Object theObject=dbwsAdapter.getXMLContext().createUnmarshaller().unmarshal(e,desc.getJavaClass());
                if (theObject instanceof XMLRoot) {
                  theObject=((XMLRoot)theObject).getObject();
                }
                invocation.setParameter(key,theObject);
              }
 else {
                StringBuilder sb=new StringBuilder();
                NodeList childNodes=e.getChildNodes();
                for (int idx=0; idx < childNodes.getLength(); idx++) {
                  if (childNodes.item(idx).getNodeType() == Node.TEXT_NODE) {
                    sb.append(childNodes.item(idx).getNodeValue());
                  }
                }
                invocation.setParameter(key,sb.toString());
              }
            }
          }
        }
 else {
          XMLDescriptor descriptor=(XMLDescriptor)oxProject.getDescriptor(o.getClass());
          String key=descriptor.getDefaultRootElement();
          int idx=key.indexOf(':');
          if (idx != -1) {
            key=key.substring(idx + 1);
          }
          invocation.setParameter(key,o);
        }
      }
    }
    public AttributeAccessor setProjectAndAdapter(    Project oxProject,    DBWSAdapter dbwsAdapter){
      this.oxProject=oxProject;
      this.dbwsAdapter=dbwsAdapter;
      return this;
    }
  }
.setProjectAndAdapter(oxProject,dbwsAdapter));
  parametersMapping.setKeepAsElementPolicy(KEEP_UNKNOWN_AS_ELEMENT);
  invocationDescriptor.addMapping(parametersMapping);
  oxProject.addDescriptor(invocationDescriptor);
  ((DatabaseSessionImpl)dbwsAdapter.getOXSession()).initializeDescriptorIfSessionAlive(invocationDescriptor);
  dbwsAdapter.getXMLContext().storeXMLDescriptorByQName(invocationDescriptor);
  responseWriter=new SOAPResponseWriter(dbwsAdapter);
  responseWriter.initialize();
}","@SuppressWarnings(""String_Node_Str"") public void init(ClassLoader parentClassLoader,ServletContext sc,boolean mtomEnabled){
  this.parentClassLoader=parentClassLoader;
  this.mtomEnabled=mtomEnabled;
  InputStream xrServiceStream=initXRServiceStream(parentClassLoader,sc);
  DBWSModelProject xrServiceModelProject=new DBWSModelProject();
  XMLContext xmlContext=new XMLContext(xrServiceModelProject);
  XMLUnmarshaller unmarshaller=xmlContext.createUnmarshaller();
  XRServiceModel xrServiceModel;
  try {
    xrServiceModel=(XRServiceModel)unmarshaller.unmarshal(xrServiceStream);
  }
 catch (  XMLMarshalException e) {
    throw new WebServiceException(DBWSException.couldNotParseDBWSFile());
  }
 finally {
    try {
      xrServiceStream.close();
    }
 catch (    IOException e) {
    }
  }
  xrSchemaStream=initXRSchemaStream(parentClassLoader,sc);
  try {
    buildService(xrServiceModel);
  }
 catch (  Exception e) {
    throw new WebServiceException(e);
  }
  DBWSAdapter dbwsAdapter=(DBWSAdapter)xrService;
  try (InputStream wsdlInputStream=initWSDLInputStream(parentClassLoader,sc)){
    StringWriter sw=new StringWriter();
    StreamSource wsdlStreamSource=new StreamSource(wsdlInputStream);
    Transformer t=TransformerFactory.newInstance().newTransformer(new StreamSource(new StringReader(MATCH_SCHEMA)));
    StreamResult streamResult=new StreamResult(sw);
    t.transform(wsdlStreamSource,streamResult);
    SchemaModelProject schemaProject=new SchemaModelProject();
    XMLContext xmlContext2=new XMLContext(schemaProject);
    unmarshaller=xmlContext2.createUnmarshaller();
    Schema extendedSchema=(Schema)unmarshaller.unmarshal(new StringReader(sw.toString()));
    dbwsAdapter.setExtendedSchema(extendedSchema);
  }
 catch (  IOException|TransformerException e) {
  }
  String tns=dbwsAdapter.getExtendedSchema().getTargetNamespace();
  Project oxProject=dbwsAdapter.getOXSession().getProject();
  XMLDescriptor invocationDescriptor=new XMLDescriptor();
  invocationDescriptor.setJavaClass(Invocation.class);
  NamespaceResolver nr=new NamespaceResolver();
  invocationDescriptor.setNamespaceResolver(nr);
  nr.put(SERVICE_NAMESPACE_PREFIX,tns);
  nr.setDefaultNamespaceURI(tns);
  XMLAnyCollectionMapping parametersMapping=new XMLAnyCollectionMapping();
  parametersMapping.setAttributeName(""String_Node_Str"");
  parametersMapping.setAttributeAccessor(new AttributeAccessor(){
    Project oxProject;
    DBWSAdapter dbwsAdapter;
    @Override public Object getAttributeValueFromObject(    Object object){
      return ((Invocation)object).getParameters();
    }
    @Override public void setAttributeValueInObject(    Object object,    Object value){
      Invocation invocation=(Invocation)object;
      Vector values=(Vector)value;
      for (Iterator i=values.iterator(); i.hasNext(); ) {
        Object o=i.next();
        if (o instanceof Element) {
          Element e=(Element)o;
          String key=e.getLocalName();
          if (""String_Node_Str"".equals(key)) {
            NodeList nl=e.getChildNodes();
            for (int j=0; j < nl.getLength(); j++) {
              Node n=nl.item(j);
              if (n.getNodeType() == Node.ELEMENT_NODE) {
                try {
                  Object theInstance=dbwsAdapter.getXMLContext().createUnmarshaller().unmarshal(n);
                  if (theInstance instanceof XMLRoot) {
                    theInstance=((XMLRoot)theInstance).getObject();
                  }
                  invocation.setParameter(key,theInstance);
                  break;
                }
 catch (                XMLMarshalException xmlMarshallException) {
                  throw new WebServiceException(xmlMarshallException);
                }
              }
            }
          }
 else {
            ClassDescriptor desc=null;
            for (            XMLDescriptor xdesc : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
              XMLSchemaReference schemaReference=xdesc.getSchemaReference();
              if (schemaReference != null && schemaReference.getSchemaContext().equalsIgnoreCase(key)) {
                desc=xdesc;
                break;
              }
            }
            if (desc != null) {
              try {
                Object theObject=dbwsAdapter.getXMLContext().createUnmarshaller().unmarshal(e,desc.getJavaClass());
                if (theObject instanceof XMLRoot) {
                  theObject=((XMLRoot)theObject).getObject();
                }
                invocation.setParameter(key,theObject);
              }
 catch (              XMLMarshalException xmlMarshallException) {
                throw new WebServiceException(xmlMarshallException);
              }
            }
 else {
              String serviceName=e.getParentNode().getLocalName();
              boolean found=false;
              for (              Operation op : dbwsAdapter.getOperationsList()) {
                if (op.getName().equals(serviceName)) {
                  for (                  Parameter p : op.getParameters()) {
                    if (p.getName().equals(key)) {
                      desc=dbwsAdapter.getDescriptorsByQName().get(p.getType());
                      if (desc != null) {
                        found=true;
                      }
                      break;
                    }
                  }
                }
                if (found) {
                  break;
                }
              }
              if (found) {
                Object theObject=dbwsAdapter.getXMLContext().createUnmarshaller().unmarshal(e,desc.getJavaClass());
                if (theObject instanceof XMLRoot) {
                  theObject=((XMLRoot)theObject).getObject();
                }
                invocation.setParameter(key,theObject);
              }
 else {
                StringBuilder sb=new StringBuilder();
                NodeList childNodes=e.getChildNodes();
                for (int idx=0; idx < childNodes.getLength(); idx++) {
                  if (childNodes.item(idx).getNodeType() == Node.TEXT_NODE) {
                    sb.append(childNodes.item(idx).getNodeValue());
                  }
                }
                invocation.setParameter(key,sb.toString());
              }
            }
          }
        }
 else {
          XMLDescriptor descriptor=(XMLDescriptor)oxProject.getDescriptor(o.getClass());
          String key=descriptor.getDefaultRootElement();
          int idx=key.indexOf(':');
          if (idx != -1) {
            key=key.substring(idx + 1);
          }
          invocation.setParameter(key,o);
        }
      }
    }
    public AttributeAccessor setProjectAndAdapter(    Project oxProject,    DBWSAdapter dbwsAdapter){
      this.oxProject=oxProject;
      this.dbwsAdapter=dbwsAdapter;
      return this;
    }
  }
.setProjectAndAdapter(oxProject,dbwsAdapter));
  parametersMapping.setKeepAsElementPolicy(KEEP_UNKNOWN_AS_ELEMENT);
  invocationDescriptor.addMapping(parametersMapping);
  oxProject.addDescriptor(invocationDescriptor);
  ((DatabaseSessionImpl)dbwsAdapter.getOXSession()).initializeDescriptorIfSessionAlive(invocationDescriptor);
  dbwsAdapter.getXMLContext().storeXMLDescriptorByQName(invocationDescriptor);
  responseWriter=new SOAPResponseWriter(dbwsAdapter);
  responseWriter.initialize();
}"
63385,"public Object buildAttributeValue(Record record,Object object,Session session){
  if (null == record) {
    return null;
  }
  String value=(String)record.get(xPath);
  if (null == value) {
    return null;
  }
  QName qName=null;
  int index=value.lastIndexOf(COLON);
  if (index > -1) {
    String prefix=value.substring(0,index);
    String localName=value.substring(index + 1);
    String namespaceURI=((XMLRecord)record).resolveNamespacePrefix(prefix);
    if (W3C_XML_SCHEMA_NS_URI.equals(namespaceURI)) {
      qName=SCHEMA_QNAMES.get(localName);
      if (qName == null) {
        qName=new QName(W3C_XML_SCHEMA_NS_URI,localName,prefix == null ? DEFAULT_NS_PREFIX : prefix);
      }
    }
 else {
      qName=new QName(namespaceURI == null ? NULL_NS_URI : namespaceURI,localName,prefix == null ? DEFAULT_NS_PREFIX : prefix);
    }
    return qName;
  }
 else {
    String namespaceURI=((XMLRecord)record).resolveNamespacePrefix(DEFAULT_NAMESPACE_PREFIX);
    qName=new QName(namespaceURI,value);
  }
  return qName;
}","@Override public Object buildAttributeValue(Record record,Object object,Session session){
  if (null == record) {
    return null;
  }
  String value=(String)record.get(xPath);
  if (null == value) {
    return null;
  }
  QName qName=null;
  int index=value.lastIndexOf(COLON);
  if (index > -1) {
    String prefix=value.substring(0,index);
    String localName=value.substring(index + 1);
    String namespaceURI=((XMLRecord)record).resolveNamespacePrefix(prefix);
    if (W3C_XML_SCHEMA_NS_URI.equals(namespaceURI)) {
      qName=SCHEMA_QNAMES.get(localName);
      if (qName == null) {
        qName=new QName(W3C_XML_SCHEMA_NS_URI,localName,prefix == null ? DEFAULT_NS_PREFIX : prefix);
      }
    }
 else {
      qName=new QName(namespaceURI == null ? NULL_NS_URI : namespaceURI,localName,prefix == null ? DEFAULT_NS_PREFIX : prefix);
    }
    return qName;
  }
 else {
    String namespaceURI=((XMLRecord)record).resolveNamespacePrefix(DEFAULT_NAMESPACE_PREFIX);
    qName=new QName(namespaceURI,value);
  }
  return qName;
}"
63386,"public Object buildFieldValue(Object instance,String fieldName,Session session){
  if (null == instance) {
    return null;
  }
  QName qName=(QName)transformationMapping.getAttributeValueFromObject(instance);
  if (null == qName.getNamespaceURI()) {
    return qName.getLocalPart();
  }
 else {
    String namespaceURI=qName.getNamespaceURI();
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      return qName.getLocalPart();
    }
 else {
      return prefix + COLON + qName.getLocalPart();
    }
  }
}","@Override public Object buildFieldValue(Object instance,String fieldName,Session session){
  if (null == instance) {
    return null;
  }
  QName qName=(QName)transformationMapping.getAttributeValueFromObject(instance);
  if (null == qName.getNamespaceURI()) {
    return qName.getLocalPart();
  }
 else {
    String namespaceURI=qName.getNamespaceURI();
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      return qName.getLocalPart();
    }
 else {
      return prefix + COLON + qName.getLocalPart();
    }
  }
}"
63387,"public void initialize(AbstractTransformationMapping mapping){
  transformationMapping=mapping;
  namespaceResolver=((XMLDescriptor)mapping.getDescriptor()).getNamespaceResolver();
}","@Override public void initialize(AbstractTransformationMapping mapping){
  transformationMapping=mapping;
  namespaceResolver=((XMLDescriptor)mapping.getDescriptor()).getNamespaceResolver();
}"
63388,"public Object createSimpleXMLFormat(XRServiceAdapter xrService,Object value){
  XMLRoot xmlRoot=new XMLRoot();
  SimpleXMLFormat simpleXMLFormat=result.getSimpleXMLFormat();
  String tempSimpleXMLFormatTag=SimpleXMLFormat.DEFAULT_SIMPLE_XML_FORMAT_TAG;
  String simpleXMLFormatTag=simpleXMLFormat.getSimpleXMLFormatTag();
  if (simpleXMLFormatTag != null && !EMPTY_STR.equals(simpleXMLFormatTag)) {
    tempSimpleXMLFormatTag=simpleXMLFormatTag;
  }
  xmlRoot.setLocalName(tempSimpleXMLFormatTag);
  String tempXMLTag=DEFAULT_SIMPLE_XML_TAG;
  String xmlTag=simpleXMLFormat.getXMLTag();
  if (xmlTag != null && !EMPTY_STR.equals(xmlTag)) {
    tempXMLTag=xmlTag;
  }
  Vector<DatabaseRecord> records=null;
  if (value instanceof ArrayList) {
    JPAQuery jpaQuery=(JPAQuery)queryHandler.getDatabaseQuery();
    List<DatabaseField> paramFlds=new ArrayList<DatabaseField>();
    DatasourceCall dsCall=(DatasourceCall)jpaQuery.getDatabaseQuery().getDatasourceCall();
    for (    Object obj : dsCall.getParameters()) {
      if (obj instanceof OutputParameterForCallableStatement) {
        paramFlds.add(((OutputParameterForCallableStatement)obj).getOutputField());
      }
 else       if (obj instanceof Object[]) {
        Object[] objArray=(Object[])obj;
        for (int i=0; i < objArray.length; i++) {
          Object o=objArray[i];
          if (o instanceof OutputParameterForCallableStatement) {
            paramFlds.add(((OutputParameterForCallableStatement)o).getOutputField());
          }
        }
      }
    }
    DatabaseRecord dr=new DatabaseRecord();
    if (paramFlds.size() > 0) {
      for (int i=0; i < ((ArrayList)value).size(); i++) {
        dr.add(paramFlds.get(i),((ArrayList)value).get(i));
      }
    }
 else {
      dr.add(new DatabaseField(RESULT_STR),((ArrayList)value).get(0));
    }
    records=new Vector<DatabaseRecord>();
    records.add(dr);
  }
 else   if (value instanceof Vector) {
    Class vectorContent=((Vector)value).firstElement().getClass();
    if (DatabaseRecord.class.isAssignableFrom(vectorContent)) {
      records=(Vector<DatabaseRecord>)value;
    }
 else {
      records=new Vector<DatabaseRecord>();
      DatabaseRecord dr=new DatabaseRecord();
      dr.add(new DatabaseField(RESULT_STR),((Vector)value).firstElement());
      records.add(dr);
    }
  }
 else {
    records=new Vector<DatabaseRecord>();
    DatabaseRecord dr=new DatabaseRecord();
    dr.add(new DatabaseField(RESULT_STR),value);
    records.add(dr);
  }
  SimpleXMLFormatModel simpleXMLFormatModel=new SimpleXMLFormatModel();
  XMLConversionManager conversionManager=(XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager();
  for (  DatabaseRecord dr : records) {
    Element rowElement=TEMP_DOC.createElement(tempXMLTag);
    for (    DatabaseField field : dr.getFields()) {
      if (field instanceof ObjectRelationalDatabaseField) {
        ObjectRelationalDatabaseField ordtField=(ObjectRelationalDatabaseField)field;
        if (xrService.getOXSession().getDescriptor(ordtField.getType()) != null) {
          xrService.getXMLContext().createMarshaller().marshal(dr.get(field),rowElement);
          continue;
        }
      }
      Object fieldValue=dr.get(field);
      if (fieldValue != null) {
        if (fieldValue instanceof Calendar) {
          Calendar cValue=(Calendar)fieldValue;
          fieldValue=conversionManager.convertObject(cValue,STRING,DATE_TIME_QNAME);
        }
        if (fieldValue instanceof Date) {
          Date dValue=(Date)fieldValue;
          fieldValue=conversionManager.convertObject(dValue,STRING,DATE_QNAME);
        }
 else         if (fieldValue instanceof Time) {
          Time tValue=(Time)fieldValue;
          fieldValue=conversionManager.convertObject(tValue,STRING,TIME_QNAME);
        }
 else         if (fieldValue instanceof Timestamp) {
          Timestamp tsValue=(Timestamp)fieldValue;
          fieldValue=conversionManager.convertObject(tsValue,STRING,DATE_TIME_QNAME);
        }
 else         if (fieldValue instanceof Blob) {
          fieldValue=conversionManager.convertObject(fieldValue,ClassConstants.APBYTE);
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLESQLXML_STR)) {
          try {
            Class oracleSQLXML;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleSQLXML=AccessController.doPrivileged(new PrivilegedClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader()));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{}));
              fieldValue=AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleSQLXML=PrivilegedAccessHelper.getClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader());
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{});
              fieldValue=PrivilegedAccessHelper.invokeMethod(getStringMethod,fieldValue,new Object[]{});
            }
          }
 catch (          Exception x) {
          }
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLEOPAQUE_STR)) {
          try {
            Class oracleOPAQUE;
            Class xmlTypeFactoryClass;
            Constructor xmlTypeFactoryConstructor;
            Object xmlTypeFactory;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleOPAQUE=AccessController.doPrivileged(new PrivilegedClassForName(ORACLEOPAQUE_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryClass=AccessController.doPrivileged(new PrivilegedClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryConstructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(xmlTypeFactoryClass,new Class[0],true));
              xmlTypeFactory=AccessController.doPrivileged(new PrivilegedInvokeConstructor(xmlTypeFactoryConstructor,new Object[0]));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE}));
              fieldValue=AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleOPAQUE=PrivilegedAccessHelper.getClassForName(ORACLEOPAQUE_STR,false,this.getClass().getClassLoader());
              xmlTypeFactoryClass=PrivilegedAccessHelper.getClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader());
              xmlTypeFactoryConstructor=PrivilegedAccessHelper.getConstructorFor(xmlTypeFactoryClass,new Class[0],true);
              xmlTypeFactory=PrivilegedAccessHelper.invokeConstructor(xmlTypeFactoryConstructor,new Object[0]);
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE});
              fieldValue=PrivilegedAccessHelper.invokeMethod(getStringMethod,xmlTypeFactory,new Object[]{fieldValue});
            }
          }
 catch (          Exception x) {
          }
        }
        String elementName;
        if (field.getName() == null || (elementName=sqlToXmlName(field.getName())).equals(EMPTY_STR)) {
          elementName=RESULT_STR;
        }
        Element columnElement=TEMP_DOC.createElement(elementName);
        rowElement.appendChild(columnElement);
        String fieldValueString=fieldValue.toString();
        if (result.getType().equals(BASE_64_BINARY_QNAME)) {
          fieldValueString=Helper.buildHexStringFromBytes(Base64.base64Encode((byte[])fieldValue));
          columnElement.setAttributeNS(XMLNS_URL,XSD_STR,SCHEMA_URL);
          columnElement.setAttributeNS(XMLNS_URL,XSI_STR,SCHEMA_INSTANCE_URL);
          columnElement.setAttributeNS(SCHEMA_INSTANCE_URL,XSITYPE_STR,BASE64_BINARY_STR);
        }
        columnElement.appendChild(TEMP_DOC.createTextNode(fieldValueString));
      }
    }
    simpleXMLFormatModel.simpleXML.add(rowElement);
  }
  xmlRoot.setObject(simpleXMLFormatModel);
  return xmlRoot;
}","public Object createSimpleXMLFormat(XRServiceAdapter xrService,Object value){
  XMLRoot xmlRoot=new XMLRoot();
  SimpleXMLFormat simpleXMLFormat=result.getSimpleXMLFormat();
  String tempSimpleXMLFormatTag=SimpleXMLFormat.DEFAULT_SIMPLE_XML_FORMAT_TAG;
  String simpleXMLFormatTag=simpleXMLFormat.getSimpleXMLFormatTag();
  if (simpleXMLFormatTag != null && !EMPTY_STR.equals(simpleXMLFormatTag)) {
    tempSimpleXMLFormatTag=simpleXMLFormatTag;
  }
  xmlRoot.setLocalName(tempSimpleXMLFormatTag);
  String tempXMLTag=DEFAULT_SIMPLE_XML_TAG;
  String xmlTag=simpleXMLFormat.getXMLTag();
  if (xmlTag != null && !EMPTY_STR.equals(xmlTag)) {
    tempXMLTag=xmlTag;
  }
  Vector<DatabaseRecord> records=null;
  if (value instanceof ArrayList) {
    JPAQuery jpaQuery=(JPAQuery)queryHandler.getDatabaseQuery();
    List<DatabaseField> paramFlds=new ArrayList<DatabaseField>();
    DatasourceCall dsCall=(DatasourceCall)jpaQuery.getDatabaseQuery().getDatasourceCall();
    for (    Object obj : dsCall.getParameters()) {
      if (obj instanceof OutputParameterForCallableStatement) {
        paramFlds.add(((OutputParameterForCallableStatement)obj).getOutputField());
      }
 else       if (obj instanceof Object[]) {
        Object[] objArray=(Object[])obj;
        for (int i=0; i < objArray.length; i++) {
          Object o=objArray[i];
          if (o instanceof OutputParameterForCallableStatement) {
            paramFlds.add(((OutputParameterForCallableStatement)o).getOutputField());
          }
        }
      }
    }
    DatabaseRecord dr=new DatabaseRecord();
    if (paramFlds.size() > 0) {
      for (int i=0; i < ((ArrayList)value).size(); i++) {
        dr.add(paramFlds.get(i),((ArrayList)value).get(i));
      }
    }
 else {
      dr.add(new DatabaseField(RESULT_STR),((ArrayList)value).get(0));
    }
    records=new Vector<DatabaseRecord>();
    records.add(dr);
  }
 else   if (value instanceof Vector) {
    Class vectorContent=((Vector)value).firstElement().getClass();
    if (DatabaseRecord.class.isAssignableFrom(vectorContent)) {
      records=(Vector<DatabaseRecord>)value;
    }
 else {
      records=new Vector<DatabaseRecord>();
      DatabaseRecord dr=new DatabaseRecord();
      dr.add(new DatabaseField(RESULT_STR),((Vector)value).firstElement());
      records.add(dr);
    }
  }
 else {
    records=new Vector<DatabaseRecord>();
    DatabaseRecord dr=new DatabaseRecord();
    dr.add(new DatabaseField(RESULT_STR),value);
    records.add(dr);
  }
  SimpleXMLFormatModel simpleXMLFormatModel=new SimpleXMLFormatModel();
  XMLConversionManager conversionManager=(XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager();
  for (  DatabaseRecord dr : records) {
    Element rowElement=TEMP_DOC.createElement(tempXMLTag);
    for (    DatabaseField field : dr.getFields()) {
      if (field instanceof ObjectRelationalDatabaseField) {
        ObjectRelationalDatabaseField ordtField=(ObjectRelationalDatabaseField)field;
        if (xrService.getOXSession().getDescriptor(ordtField.getType()) != null) {
          xrService.getXMLContext().createMarshaller().marshal(dr.get(field),rowElement);
          continue;
        }
      }
      Object fieldValue=dr.get(field);
      if (fieldValue != null) {
        if (fieldValue instanceof Calendar) {
          Calendar cValue=(Calendar)fieldValue;
          fieldValue=conversionManager.convertObject(cValue,STRING,DATE_TIME_QNAME);
        }
        if (fieldValue instanceof Date) {
          Date dValue=(Date)fieldValue;
          fieldValue=conversionManager.convertObject(dValue,STRING,DATE_QNAME);
        }
 else         if (fieldValue instanceof Time) {
          Time tValue=(Time)fieldValue;
          fieldValue=conversionManager.convertObject(tValue,STRING,TIME_QNAME);
        }
 else         if (fieldValue instanceof Timestamp) {
          Timestamp tsValue=(Timestamp)fieldValue;
          fieldValue=conversionManager.convertObject(tsValue,STRING,DATE_TIME_QNAME);
        }
 else         if (fieldValue instanceof Blob) {
          fieldValue=conversionManager.convertObject(fieldValue,ClassConstants.APBYTE);
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLESQLXML_STR)) {
          try {
            Class oracleSQLXML;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleSQLXML=AccessController.doPrivileged(new PrivilegedClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader()));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{}));
              fieldValue=AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleSQLXML=PrivilegedAccessHelper.getClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader());
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{});
              fieldValue=PrivilegedAccessHelper.invokeMethod(getStringMethod,fieldValue,new Object[]{});
            }
          }
 catch (          RuntimeException re) {
            throw re;
          }
catch (          ReflectiveOperationException|PrivilegedActionException x) {
          }
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLEOPAQUE_STR)) {
          try {
            Class oracleOPAQUE;
            Class xmlTypeFactoryClass;
            Constructor xmlTypeFactoryConstructor;
            Object xmlTypeFactory;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleOPAQUE=AccessController.doPrivileged(new PrivilegedClassForName(ORACLEOPAQUE_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryClass=AccessController.doPrivileged(new PrivilegedClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryConstructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(xmlTypeFactoryClass,new Class[0],true));
              xmlTypeFactory=AccessController.doPrivileged(new PrivilegedInvokeConstructor(xmlTypeFactoryConstructor,new Object[0]));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE}));
              fieldValue=AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleOPAQUE=PrivilegedAccessHelper.getClassForName(ORACLEOPAQUE_STR,false,this.getClass().getClassLoader());
              xmlTypeFactoryClass=PrivilegedAccessHelper.getClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader());
              xmlTypeFactoryConstructor=PrivilegedAccessHelper.getConstructorFor(xmlTypeFactoryClass,new Class[0],true);
              xmlTypeFactory=PrivilegedAccessHelper.invokeConstructor(xmlTypeFactoryConstructor,new Object[0]);
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE});
              fieldValue=PrivilegedAccessHelper.invokeMethod(getStringMethod,xmlTypeFactory,new Object[]{fieldValue});
            }
          }
 catch (          RuntimeException x) {
            throw x;
          }
catch (          ReflectiveOperationException|PrivilegedActionException e) {
          }
        }
        String elementName;
        if (field.getName() == null || (elementName=sqlToXmlName(field.getName())).equals(EMPTY_STR)) {
          elementName=RESULT_STR;
        }
        Element columnElement=TEMP_DOC.createElement(elementName);
        rowElement.appendChild(columnElement);
        String fieldValueString=fieldValue.toString();
        if (result.getType().equals(BASE_64_BINARY_QNAME)) {
          fieldValueString=Helper.buildHexStringFromBytes(Base64.base64Encode((byte[])fieldValue));
          columnElement.setAttributeNS(XMLNS_URL,XSD_STR,SCHEMA_URL);
          columnElement.setAttributeNS(XMLNS_URL,XSI_STR,SCHEMA_INSTANCE_URL);
          columnElement.setAttributeNS(SCHEMA_INSTANCE_URL,XSITYPE_STR,BASE64_BINARY_STR);
        }
        columnElement.appendChild(TEMP_DOC.createTextNode(fieldValueString));
      }
    }
    simpleXMLFormatModel.simpleXML.add(rowElement);
  }
  xmlRoot.setObject(simpleXMLFormatModel);
  return xmlRoot;
}"
63389,"public int hashCode(){
  return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode());
}","@Override public int hashCode(){
  List<Object> results=getResults();
  Object id=getId();
  int result=results != null ? results.hashCode() : 0;
  result=31 * result + (id != null ? id.hashCode() : 0);
  return result;
}"
63390,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  suite.addTest(new AdvancedCriteriaQueryTestSuite(""String_Node_Str""));
  return suite;
}"
63391,"public void testNewContextGeneratedWithResolverReturned(){
  final SDOHelperContext foo=new SDOHelperContext(""String_Node_Str"");
  SDOHelperContext.setHelperContextResolver(new SDOHelperContext.HelperContextResolver(){
    @Override public HelperContext getHelperContext(    String id,    ClassLoader classLoader){
      return foo;
    }
  }
);
  SDOHelperContext hc=(SDOHelperContext)SDOHelperContext.getHelperContext(""String_Node_Str"");
  assertEquals(""String_Node_Str"",hc,foo);
  SDOHelperContext.setHelperContextResolver(null);
  hc=(SDOHelperContext)SDOHelperContext.getHelperContext(""String_Node_Str"");
  assertFalse(""String_Node_Str"",foo.equals(hc));
}","public void testNewContextGeneratedWithResolverReturned(){
  final SDOHelperContext foo=new SDOHelperContext(""String_Node_Str"");
  SDOHelperContext.setHelperContextResolver((id,classLoader) -> foo);
  SDOHelperContext hc=(SDOHelperContext)SDOHelperContext.getHelperContext(""String_Node_Str"");
  assertEquals(""String_Node_Str"",hc,foo);
  SDOHelperContext.setHelperContextResolver(null);
  hc=(SDOHelperContext)SDOHelperContext.getHelperContext(""String_Node_Str"");
  assertFalse(""String_Node_Str"",foo.equals(hc));
}"
63392,"/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new SDOXSDHelperTestSuite().suite());
  suite.addTest(new SDOTypeHelperTestSuite().suite());
  suite.addTest(new SDODataFactoryTestSuite().suite());
  suite.addTest(new SDOXMLHelperTestSuite().suite());
  suite.addTestSuite(SDOHelperTestCases.class);
  return suite;
}","/** 
 * Inherited suite method for generating all test cases.
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new SDOXSDHelperTestSuite().suite());
  suite.addTest(new SDOTypeHelperTestSuite().suite());
  suite.addTest(new SDODataFactoryTestSuite().suite());
  suite.addTest(new SDOXMLHelperTestSuite().suite());
  suite.addTestSuite(SDOHelperTestCases.class);
  suite.addTestSuite(SDOHelperContextTest.class);
  return suite;
}"
63393,"/** 
 * Return the local helper context with the given identifier, or create one if it does not already exist.
 */
public static HelperContext getHelperContext(String identifier,ClassLoader classLoader){
  ConcurrentMap<String,String> aliasEntries=getAliasMap();
  if (aliasEntries.containsKey(identifier)) {
    identifier=aliasEntries.get(identifier);
  }
  HelperContext helperContext=getUserSetHelperContext(identifier,classLoader);
  if (helperContext != null) {
    return helperContext;
  }
  ConcurrentMap<String,HelperContext> contextMap=getContextMap();
  helperContext=contextMap.get(identifier);
  if (null == helperContext) {
    helperContext=new SDOHelperContext(identifier,classLoader);
    HelperContext existingContext=contextMap.putIfAbsent(identifier,helperContext);
    if (existingContext != null) {
      helperContext=existingContext;
    }
  }
  return helperContext;
}","@Override public HelperContext getHelperContext(String id,ClassLoader classLoader){
  LOGGER.fine(String.format(""String_Node_Str"",id,classLoader));
  return new SDOHelperContext(id,classLoader);
}"
63394,"public void addTests(){
  addSRGTests();
  addTest(new QueryTimeoutTest());
  addTest(new ServerSessionTestAdapter(new PessimisticLockNoLockJoinedTest()));
  addTest(new ReadAllNoDistinctTest());
  addTest(ObjectLevelReadQueryTest.suite());
  addTest(new PartialAttributeTestWithJoinAttribute());
  addTest(new PartialAttributeDistinctOrderByTest());
  addTest(new FourPartialAttributeTestsWithJoinAttribute());
  addTest(buildReadOnlyQueryTest());
  addTest(buildGetSQLTest());
  addTest(buildJoinSubclassesQueryTest());
  addTest(buildRecordTest());
  addTest(new ConformResultsWithMultitableAndJoiningTest());
  addTest(new CachedUpdateCallsQueryClearTest());
  addTest(new ZeroPrimaryKeyExistenceCheckTest(true));
  addTest(new ZeroPrimaryKeyExistenceCheckTest(false));
  addTest(new QueryTimeoutConnectionReleasedTest());
  addTest(new QueryExecutionTimeSetOnBuildObjectTest());
  addTest(new PartialAttributeWithCustomSQLTest());
  addTest(buildArgumentValuesTest());
  addTest(new ScrollableCursorForwardOnlyResultSetTest());
  addTest(new ConformResultsSubclassesTest());
  addTest(new ScrollableCursorJoinedAttributeTest());
  addTest(new ScrollableCursorJoiningVerificationTest());
  addTest(new MultipleOrderByWithSameFieldNameNullsFirstTest());
  addTest(new MultipleOrderByWithSameFieldNameTest());
  addTest(buildUnionTest());
}","public void addTests(){
  addSRGTests();
  addTest(new QueryTimeoutTest());
  addTest(new ServerSessionTestAdapter(new PessimisticLockNoLockJoinedTest()));
  addTest(new ReadAllNoDistinctTest());
  addTest(new PartialAttributeTestWithJoinAttribute());
  addTest(new PartialAttributeDistinctOrderByTest());
  addTest(new FourPartialAttributeTestsWithJoinAttribute());
  addTest(buildReadOnlyQueryTest());
  addTest(buildGetSQLTest());
  addTest(buildJoinSubclassesQueryTest());
  addTest(buildRecordTest());
  addTest(new ConformResultsWithMultitableAndJoiningTest());
  addTest(new CachedUpdateCallsQueryClearTest());
  addTest(new ZeroPrimaryKeyExistenceCheckTest(true));
  addTest(new ZeroPrimaryKeyExistenceCheckTest(false));
  addTest(new QueryTimeoutConnectionReleasedTest());
  addTest(new QueryExecutionTimeSetOnBuildObjectTest());
  addTest(new PartialAttributeWithCustomSQLTest());
  addTest(buildArgumentValuesTest());
  addTest(new ScrollableCursorForwardOnlyResultSetTest());
  addTest(new ConformResultsSubclassesTest());
  addTest(new ScrollableCursorJoinedAttributeTest());
  addTest(new ScrollableCursorJoiningVerificationTest());
  addTest(new MultipleOrderByWithSameFieldNameNullsFirstTest());
  addTest(new MultipleOrderByWithSameFieldNameTest());
  addTest(buildUnionTest());
}"
63395,"/** 
 * INTERNAL: PERF: Set if this query will use the descriptor custom query instead of executing itself.
 * @param isCustomQueryUsed Custom query flag as {@code boolean}.
 */
protected void setIsCustomQueryUsed(final boolean isCustomQueryUsed){
  this.isCustomQueryUsed=isCustomQueryUsed;
}","/** 
 * INTERNAL: PERF: Set if this query will use the descriptor custom query instead of executing itself.
 */
protected void setIsCustomQueryUsed(boolean isCustomQueryUsed){
  if (isCustomQueryUsed) {
    this.isCustomQueryUsed=Boolean.TRUE;
  }
 else {
    this.isCustomQueryUsed=Boolean.FALSE;
  }
}"
63396,"public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  suite.addTest(AdvancedFetchGroupJunitTest.suite());
  suite.addTest(AdvancedMultiTenantJunitTest.suite());
  suite.addTest(AdvancedMultiTenantSchemaJunitTest.suite());
  suite.addTest(PessimisticLockingExtendedScopeTestSuite.suite());
  suite.addTest(PessimisticLockEntityRefreshTestSuite.suite());
  suite.addTest(UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(ComplexAggregateTestSuite.suite());
  suite.addTest(MetadataCachingTestSuite.suite());
  suite.addTest(OptimisticLockForceIncrementTestSuite.suite());
  suite.addTest(ConfigPUTestSuite.suite());
  suite.addTest(NamedQueryJUnitTest.suite());
  suite.addTest(EntityEmbeddableTest.suite());
  suite.addTest(InvalidNamedQueryTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.RelationshipModelJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.IsolatedCacheTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  TestSuite suiteFg=new TestSuite();
  suiteFg.setName(""String_Node_Str"");
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupTrackerWeavingTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleSerializeFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupMergeWithCacheTests.suite());
  suite.addTest(suiteFg);
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  suite.addTest(TablePerClassInheritanceDDLTest.suite());
  suite.addTest(ReportQueryMultipleReturnInheritanceTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(EMQueryJUnitTestSuite.suite());
  suite.addTest(ExpressionJUnitTestSuite.suite());
  suite.addTest(IsolatedCacheTestSuite.suite());
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  suite.addTest(TestKeyTypeToManyRelationship.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(JUnitJPQLQueryHelperTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  suite.addTest(JUnitNativeQueryTestSuite.suite());
  suite.addTest(AbstractEntityWithColumnDiscriminatorTest.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationExtendTablesJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.datatypes.DoesRelationConformTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCompositePKJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaSimpleTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(CacheableModelJunitTestEnableSelective.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  fullSuite.addTest(CascadeDeletesJUnitTestSuite.suite());
  fullSuite.addTest(QueryCastTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(FetchGroupAPITests.suite());
  suite.addTest(FetchGroupTrackerWeavingTests.suite());
  suite.addTest(SimpleDefaultFetchGroupTests.suite());
  suite.addTest(SimpleFetchGroupTests.suite());
  suite.addTest(SimpleNamedFetchGroupTests.suite());
  suite.addTest(SimpleSerializeFetchGroupTests.suite());
  suite.addTest(NestedDefaultFetchGroupTests.suite());
  suite.addTest(NestedFetchGroupTests.suite());
  suite.addTest(NestedNamedFetchGroupTests.suite());
  suite.addTest(FetchGroupMergeWithCacheTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(PartitionedTestSuite.suite());
  fullSuite.addTest(PartitionedXMLTestSuite.suite());
  fullSuite.addTest(PLSQLTestSuite.suite());
  fullSuite.addTest(XMLPLSQLTestSuite.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.composite.advanced.EntityManagerJUnitTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(ExtensibilityTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(XMLMappingMetadataCompleteJunitTestCase.suite());
  return fullSuite;
}","public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  suite.addTest(AdvancedFetchGroupJunitTest.suite());
  suite.addTest(AdvancedMultiTenantJunitTest.suite());
  suite.addTest(AdvancedMultiTenantSchemaJunitTest.suite());
  suite.addTest(PessimisticLockingExtendedScopeTestSuite.suite());
  suite.addTest(PessimisticLockEntityRefreshTestSuite.suite());
  suite.addTest(UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(ComplexAggregateTestSuite.suite());
  suite.addTest(MetadataCachingTestSuite.suite());
  suite.addTest(OptimisticLockForceIncrementTestSuite.suite());
  suite.addTest(ConfigPUTestSuite.suite());
  suite.addTest(NamedQueryJUnitTest.suite());
  suite.addTest(EntityEmbeddableTest.suite());
  suite.addTest(InvalidNamedQueryTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.RelationshipModelJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.IsolatedCacheTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  TestSuite suiteFg=new TestSuite();
  suiteFg.setName(""String_Node_Str"");
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupTrackerWeavingTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleSerializeFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupMergeWithCacheTests.suite());
  suite.addTest(suiteFg);
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  suite.addTest(TablePerClassInheritanceDDLTest.suite());
  suite.addTest(ReportQueryMultipleReturnInheritanceTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(EMQueryJUnitTestSuite.suite());
  suite.addTest(ExpressionJUnitTestSuite.suite());
  suite.addTest(IsolatedCacheTestSuite.suite());
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  suite.addTest(TestKeyTypeToManyRelationship.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(JUnitJPQLQueryHelperTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  suite.addTest(JUnitNativeQueryTestSuite.suite());
  suite.addTest(AbstractEntityWithColumnDiscriminatorTest.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationExtendTablesJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.datatypes.DoesRelationConformTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCompositePKJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaSimpleTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(CacheableModelJunitTestEnableSelective.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  fullSuite.addTest(CascadeDeletesJUnitTestSuite.suite());
  fullSuite.addTest(QueryCastTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(FetchGroupAPITests.suite());
  suite.addTest(FetchGroupTrackerWeavingTests.suite());
  suite.addTest(SimpleDefaultFetchGroupTests.suite());
  suite.addTest(SimpleFetchGroupTests.suite());
  suite.addTest(SimpleNamedFetchGroupTests.suite());
  suite.addTest(SimpleSerializeFetchGroupTests.suite());
  suite.addTest(NestedDefaultFetchGroupTests.suite());
  suite.addTest(NestedFetchGroupTests.suite());
  suite.addTest(NestedNamedFetchGroupTests.suite());
  suite.addTest(FetchGroupMergeWithCacheTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(PartitionedTestSuite.suite());
  fullSuite.addTest(PartitionedXMLTestSuite.suite());
  fullSuite.addTest(PLSQLTestSuite.suite());
  fullSuite.addTest(XMLPLSQLTestSuite.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.composite.advanced.EntityManagerJUnitTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(ExtensibilityTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(XMLMappingMetadataCompleteJunitTestCase.suite());
  fullSuite.addTest(PersistenceUnitProcessorTest.suite());
  return fullSuite;
}"
63397,"/** 
 * Determine the URL path to the persistence unit
 * @param pxmlURL - Encoded URL containing the pu
 * @return
 * @throws IOException
 */
public static URL computePURootURL(URL pxmlURL,String descriptorLocation) throws IOException, URISyntaxException {
  StringTokenizer tokenizer=new StringTokenizer(descriptorLocation,""String_Node_Str"");
  int descriptorDepth=tokenizer.countTokens() - 1;
  URL result;
  String protocol=pxmlURL.getProtocol();
  if (""String_Node_Str"".equals(protocol)) {
    StringBuffer path=new StringBuffer();
    boolean firstElement=true;
    for (int i=0; i < descriptorDepth; i++) {
      if (!firstElement) {
        path.append(""String_Node_Str"");
      }
      path.append(""String_Node_Str"");
      firstElement=false;
    }
    result=new URL(pxmlURL,path.toString());
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    JarURLConnection conn=JarURLConnection.class.cast(pxmlURL.openConnection());
    result=conn.getJarFileURL();
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    String spec=pxmlURL.getFile();
    int separator=spec.lastIndexOf(""String_Node_Str"");
    if (separator == -1) {
      separator=spec.length() - 1;
    }
    result=new URL(""String_Node_Str"",""String_Node_Str"",spec.substring(0,separator++));
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    String spec=pxmlURL.getFile();
    int separator=spec.lastIndexOf(""String_Node_Str"");
    if (separator == -1) {
      separator=spec.length();
    }
 else {
      separator+=2;
      if (spec.regionMatches(true,separator - 6,""String_Node_Str"",0,4) && spec.regionMatches(true,separator,WEBINF_CLASSES_STR,0,WEBINF_CLASSES_LEN)) {
        separator+=WEBINF_CLASSES_LEN;
      }
    }
    result=new URL(""String_Node_Str"",""String_Node_Str"",spec.substring(0,separator));
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    result=new URL(""String_Node_Str"" + pxmlURL.getAuthority());
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    result=new URL(""String_Node_Str"" + pxmlURL.getAuthority());
  }
 else {
    StringBuffer path=new StringBuffer();
    for (int i=0; i < descriptorDepth; i++) {
      path.append(""String_Node_Str"");
    }
    result=new URL(pxmlURL,path.toString());
  }
  result=fixUNC(result);
  return result;
}","/** 
 * Determine the URL path to the persistence unit
 * @param pxmlURL - Encoded URL containing the pu
 * @return
 * @throws IOException
 */
public static URL computePURootURL(URL pxmlURL,String descriptorLocation) throws IOException, URISyntaxException {
  StringTokenizer tokenizer=new StringTokenizer(descriptorLocation,""String_Node_Str"");
  int descriptorDepth=tokenizer.countTokens() - 1;
  URL result;
  String protocol=pxmlURL.getProtocol();
  if (""String_Node_Str"".equals(protocol)) {
    StringBuffer path=new StringBuffer();
    boolean firstElement=true;
    for (int i=0; i < descriptorDepth; i++) {
      if (!firstElement) {
        path.append(""String_Node_Str"");
      }
      path.append(""String_Node_Str"");
      firstElement=false;
    }
    result=new URL(pxmlURL,path.toString());
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    JarURLConnection conn=JarURLConnection.class.cast(pxmlURL.openConnection());
    result=conn.getJarFileURL();
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    String spec=pxmlURL.getFile();
    int separator=spec.lastIndexOf(""String_Node_Str"");
    if (separator == -1) {
      separator=spec.length() - 1;
    }
    result=new File(spec.substring(0,separator++)).toURL();
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    String spec=pxmlURL.getFile();
    int separator=spec.lastIndexOf(""String_Node_Str"");
    if (separator == -1) {
      separator=spec.length();
    }
 else {
      separator+=2;
      if (spec.regionMatches(true,separator - 6,""String_Node_Str"",0,4) && spec.regionMatches(true,separator,WEBINF_CLASSES_STR,0,WEBINF_CLASSES_LEN)) {
        separator+=WEBINF_CLASSES_LEN;
      }
    }
    result=new URL(""String_Node_Str"",""String_Node_Str"",spec.substring(0,separator));
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    result=new URL(""String_Node_Str"" + pxmlURL.getAuthority());
  }
 else   if (""String_Node_Str"".equals(protocol)) {
    result=new URL(""String_Node_Str"" + pxmlURL.getAuthority());
  }
 else {
    StringBuffer path=new StringBuffer();
    for (int i=0; i < descriptorDepth; i++) {
      path.append(""String_Node_Str"");
    }
    result=new URL(pxmlURL,path.toString());
  }
  result=fixUNC(result);
  return result;
}"
63398,"public void addTests(){
  addSRGTests();
  addTest(new QueryTimeoutTest());
  addTest(new ServerSessionTestAdapter(new PessimisticLockNoLockJoinedTest()));
  addTest(new ReadAllNoDistinctTest());
  addTest(new PartialAttributeTestWithJoinAttribute());
  addTest(new PartialAttributeDistinctOrderByTest());
  addTest(new FourPartialAttributeTestsWithJoinAttribute());
  addTest(buildReadOnlyQueryTest());
  addTest(buildGetSQLTest());
  addTest(buildJoinSubclassesQueryTest());
  addTest(buildRecordTest());
  addTest(new ConformResultsWithMultitableAndJoiningTest());
  addTest(new CachedUpdateCallsQueryClearTest());
  addTest(new ZeroPrimaryKeyExistenceCheckTest(true));
  addTest(new ZeroPrimaryKeyExistenceCheckTest(false));
  addTest(new QueryTimeoutConnectionReleasedTest());
  addTest(new QueryExecutionTimeSetOnBuildObjectTest());
  addTest(new PartialAttributeWithCustomSQLTest());
  addTest(buildArgumentValuesTest());
  addTest(new ScrollableCursorForwardOnlyResultSetTest());
  addTest(new ConformResultsSubclassesTest());
  addTest(new ScrollableCursorJoinedAttributeTest());
  addTest(new ScrollableCursorJoiningVerificationTest());
  addTest(new MultipleOrderByWithSameFieldNameNullsFirstTest());
  addTest(new MultipleOrderByWithSameFieldNameTest());
  addTest(buildUnionTest());
}","public void addTests(){
  addSRGTests();
  addTest(new QueryTimeoutTest());
  addTest(new ServerSessionTestAdapter(new PessimisticLockNoLockJoinedTest()));
  addTest(new ReadAllNoDistinctTest());
  addTest(ObjectLevelReadQueryTest.suite());
  addTest(new PartialAttributeTestWithJoinAttribute());
  addTest(new PartialAttributeDistinctOrderByTest());
  addTest(new FourPartialAttributeTestsWithJoinAttribute());
  addTest(buildReadOnlyQueryTest());
  addTest(buildGetSQLTest());
  addTest(buildJoinSubclassesQueryTest());
  addTest(buildRecordTest());
  addTest(new ConformResultsWithMultitableAndJoiningTest());
  addTest(new CachedUpdateCallsQueryClearTest());
  addTest(new ZeroPrimaryKeyExistenceCheckTest(true));
  addTest(new ZeroPrimaryKeyExistenceCheckTest(false));
  addTest(new QueryTimeoutConnectionReleasedTest());
  addTest(new QueryExecutionTimeSetOnBuildObjectTest());
  addTest(new PartialAttributeWithCustomSQLTest());
  addTest(buildArgumentValuesTest());
  addTest(new ScrollableCursorForwardOnlyResultSetTest());
  addTest(new ConformResultsSubclassesTest());
  addTest(new ScrollableCursorJoinedAttributeTest());
  addTest(new ScrollableCursorJoiningVerificationTest());
  addTest(new MultipleOrderByWithSameFieldNameNullsFirstTest());
  addTest(new MultipleOrderByWithSameFieldNameTest());
  addTest(buildUnionTest());
}"
63399,"/** 
 * INTERNAL: PERF: Set if this query will use the descriptor custom query instead of executing itself.
 */
protected void setIsCustomQueryUsed(boolean isCustomQueryUsed){
  if (isCustomQueryUsed) {
    this.isCustomQueryUsed=Boolean.TRUE;
  }
 else {
    this.isCustomQueryUsed=Boolean.FALSE;
  }
}","/** 
 * INTERNAL: PERF: Set if this query will use the descriptor custom query instead of executing itself.
 * @param isCustomQueryUsed Custom query flag as {@code boolean}.
 */
protected void setIsCustomQueryUsed(final boolean isCustomQueryUsed){
  this.isCustomQueryUsed=isCustomQueryUsed;
}"
63400,"/** 
 * Test JPQL.
 */
public void testSimpleJPQL(){
  testSetup();
  EntityManager em=createEntityManager();
  try {
    Query query=em.createQuery(""String_Node_Str"");
    List results=query.getResultList();
    if (results.size() != 10) {
      fail(""String_Node_Str"" + results);
    }
    Order order=(Order)results.get(0);
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 9) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    results=query.getResultList();
    if (results.size() != 10) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    results=query.getResultList();
    if (results.size() != 0) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 10) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 0) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
  }
  finally {
    closeEntityManager(em);
  }
}","/** 
 * Test JPQL.
 */
public void testSimpleJPQL(){
  testSetup();
  EntityManager em=createEntityManager();
  try {
    Query query=em.createQuery(""String_Node_Str"");
    List results=query.getResultList();
    if (results.size() != 10) {
      fail(""String_Node_Str"" + results);
    }
    Order order=(Order)results.get(0);
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 9) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    results=query.getResultList();
    if (results.size() != 10) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",""String_Node_Str"");
    results=query.getResultList();
    if (results.size() != 0) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 10) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 0) {
      fail(""String_Node_Str"" + results);
    }
    query=em.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",order.id);
    results=query.getResultList();
    if (results.size() != 1) {
      fail(""String_Node_Str"" + results);
    }
  }
  finally {
    closeEntityManager(em);
  }
}"
63401,"/** 
 * Append the expression and recursively to the query row.
 */
protected void appendExpressionToQueryRow(Expression expression,AbstractRecord row,DatabaseQuery query){
  if (expression.isRelationExpression()) {
    RelationExpression relation=(RelationExpression)expression;
    Object left=extractValueFromExpression(relation.getFirstChild(),query);
    Object right=extractValueFromExpression(relation.getSecondChild(),query);
    if (relation.getOperator().getSelector() == ExpressionOperator.Equal) {
      row.put(left,right);
    }
 else {
      DatabaseRecord nested=new DatabaseRecord();
      if (relation.getOperator().getSelector() == ExpressionOperator.GreaterThan) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.LessThan) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.LessThanEqual) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.GreaterThanEqual) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.NotEqual) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.In) {
        nested.put(""String_Node_Str"",right);
        row.put(left,nested);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.NotIn) {
        nested.put(""String_Node_Str"",right);
        row.put(left,nested);
      }
 else {
        throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
      }
      row.put(left,nested);
    }
  }
 else   if (expression.isLogicalExpression()) {
    LogicalExpression logic=(LogicalExpression)expression;
    DatabaseRecord first=new DatabaseRecord();
    DatabaseRecord second=new DatabaseRecord();
    appendExpressionToQueryRow(logic.getFirstChild(),first,query);
    appendExpressionToQueryRow(logic.getSecondChild(),second,query);
    List nested=new Vector();
    nested.add(first);
    nested.add(second);
    if (logic.getOperator().getSelector() == ExpressionOperator.And) {
      row.put(""String_Node_Str"",nested);
    }
 else     if (logic.getOperator().getSelector() == ExpressionOperator.Or) {
      row.put(""String_Node_Str"",nested);
    }
 else {
      throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
    }
  }
 else   if (expression.isFunctionExpression()) {
    FunctionExpression function=(FunctionExpression)expression;
    if (function.getOperator().getSelector() == ExpressionOperator.Like) {
      Object left=extractValueFromExpression((Expression)function.getChildren().get(0),query);
      Object right=extractValueFromExpression((Expression)function.getChildren().get(1),query);
      if (!(right instanceof String)) {
        throw new EISException(""String_Node_Str"" + right + ""String_Node_Str""+ query);
      }
      String pattern=(String)right;
      DatabaseRecord nested=new DatabaseRecord();
      if (!this.isLikeRegex) {
        pattern=Helper.convertLikeToRegex(pattern);
      }
      nested.put(""String_Node_Str"",pattern);
      row.put(left,nested);
    }
 else     if (function.getOperator().getSelector() == ExpressionOperator.Not) {
      DatabaseRecord nested=new DatabaseRecord();
      appendExpressionToQueryRow((Expression)function.getChildren().get(0),nested,query);
      row.put(""String_Node_Str"",nested);
    }
 else {
      throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
    }
  }
 else {
    throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
  }
}","/** 
 * Append the expression and recursively to the query row.
 */
protected void appendExpressionToQueryRow(Expression expression,AbstractRecord row,DatabaseQuery query){
  if (expression.isRelationExpression()) {
    RelationExpression relation=(RelationExpression)expression;
    Object left=extractValueFromExpression(relation.getFirstChild(),query);
    Object right=extractValueFromExpression(relation.getSecondChild(),query);
    if (relation.getOperator().getSelector() == ExpressionOperator.Equal) {
      row.put(left,right);
    }
 else {
      DatabaseRecord nested=new DatabaseRecord();
      if (relation.getOperator().getSelector() == ExpressionOperator.GreaterThan) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.LessThan) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.LessThanEqual) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.GreaterThanEqual) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.NotEqual) {
        nested.put(""String_Node_Str"",right);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.In) {
        nested.put(""String_Node_Str"",right);
        row.put(left,nested);
      }
 else       if (relation.getOperator().getSelector() == ExpressionOperator.NotIn) {
        nested.put(""String_Node_Str"",right);
        row.put(left,nested);
      }
 else {
        throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
      }
      row.put(left,nested);
    }
  }
 else   if (expression.isLogicalExpression()) {
    LogicalExpression logic=(LogicalExpression)expression;
    DatabaseRecord first=new DatabaseRecord();
    DatabaseRecord second=new DatabaseRecord();
    appendExpressionToQueryRow(logic.getFirstChild(),first,query);
    appendExpressionToQueryRow(logic.getSecondChild(),second,query);
    List nested=new Vector();
    nested.add(first);
    nested.add(second);
    if (logic.getOperator().getSelector() == ExpressionOperator.And) {
      row.put(""String_Node_Str"",nested);
    }
 else     if (logic.getOperator().getSelector() == ExpressionOperator.Or) {
      row.put(""String_Node_Str"",nested);
    }
 else {
      throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
    }
  }
 else   if (expression.isFunctionExpression()) {
    FunctionExpression function=(FunctionExpression)expression;
    if (function.getOperator().getSelector() == ExpressionOperator.Like) {
      Object left=extractValueFromExpression((Expression)function.getChildren().get(0),query);
      Object right=extractValueFromExpression((Expression)function.getChildren().get(1),query);
      if (!(right instanceof String)) {
        throw new EISException(""String_Node_Str"" + right + ""String_Node_Str""+ query);
      }
      String pattern=(String)right;
      DatabaseRecord nested=new DatabaseRecord();
      if (!this.isLikeRegex) {
        pattern=Helper.convertLikeToRegex(pattern);
      }
      nested.put(""String_Node_Str"",pattern);
      row.put(left,nested);
    }
 else     if (function.getOperator().getSelector() == ExpressionOperator.Not) {
      Expression expr=(Expression)function.getChildren().get(0);
      if (expr.isRelationExpression()) {
        RelationExpression relation=(RelationExpression)expr;
        Object left=extractValueFromExpression(relation.getFirstChild(),query);
        Object right=extractValueFromExpression(relation.getSecondChild(),query);
        DatabaseRecord nested=new DatabaseRecord();
        if (expr.getOperator().getSelector() == ExpressionOperator.Equal) {
          nested.put(""String_Node_Str"",right);
        }
 else {
          nested.put(""String_Node_Str"",right);
        }
        row.put(left,nested);
      }
 else {
        throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
      }
    }
 else {
      throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
    }
  }
 else {
    throw new EISException(""String_Node_Str"" + expression + ""String_Node_Str""+ query);
  }
}"
63402,"@Test public void testExchange() throws SQLException {
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    final int newId;
    env.beginTransaction(em);
    Employee emp=em.find(Employee.class,HANS_ID);
    verify(emp != null,""String_Node_Str"");
    Set<Project> projects=emp.getProjects();
    Iterator<Project> iter=projects.iterator();
    Project project=(Project)iter.next();
    int removedId=project.getId().intValue();
    em.remove(project);
    iter.remove();
    Project p7=new Project(""String_Node_Str"");
    em.persist(p7);
    newId=p7.getId().intValue();
    projects.add(p7);
    emp.clearPostUpdate();
    env.commitTransactionAndClear(em);
    verify(emp.postUpdateWasCalled(),""String_Node_Str"");
    Set<Pair> expected=new HashSet<Pair>(SEED_SET);
    expected.remove(new Pair(HANS_ID_VALUE,removedId));
    expected.add(new Pair(HANS_ID_VALUE,newId));
    checkJoinTable(expected);
    env.beginTransaction(em);
    emp=em.find(Employee.class,HANS_ID);
    projects=emp.getProjects();
    verify(projects.size() == 3,""String_Node_Str"" + projects.size());
    env.rollbackTransactionAndClear(em);
  }
  finally {
    env.evictAll(em);
    closeEntityManager(em);
  }
}","@Test public void testExchange() throws SQLException {
  JPAEnvironment env=getEnvironment();
  EntityManager em=env.getEntityManager();
  try {
    final int newId;
    env.beginTransaction(em);
    Employee emp=em.find(Employee.class,HANS_ID);
    verify(emp != null,""String_Node_Str"");
    Set<Project> projects=emp.getProjects();
    Iterator<Project> iter=projects.iterator();
    Project project=(Project)iter.next();
    int removedId=project.getId().intValue();
    em.remove(project);
    iter.remove();
    Project p7=new Project(""String_Node_Str"");
    em.persist(p7);
    newId=p7.getId().intValue();
    projects.add(p7);
    emp.clearPostUpdate();
    env.commitTransactionAndClear(em);
    verify(emp.postUpdateWasCalled(),""String_Node_Str"");
    Set<Pair> expected=new HashSet<Pair>(SEED_SET);
    expected.remove(new Pair(HANS_ID_VALUE,removedId));
    expected.remove(new Pair(FRED_ID_VALUE,removedId));
    expected.add(new Pair(HANS_ID_VALUE,newId));
    checkJoinTable(expected);
    env.beginTransaction(em);
    emp=em.find(Employee.class,HANS_ID);
    projects=emp.getProjects();
    verify(projects.size() == 3,""String_Node_Str"" + projects.size());
    env.rollbackTransactionAndClear(em);
  }
  finally {
    env.evictAll(em);
    closeEntityManager(em);
  }
}"
63403,"public DataHandler getAttachmentAsDataHandler(String id){
  String attachmentRefId=id;
  if (attachmentRefId.startsWith(""String_Node_Str"")) {
    attachmentRefId=attachmentRefId.substring(4);
  }
  return attachments.get(attachmentRefId);
}","@Override public DataHandler getAttachmentAsDataHandler(String id){
  String attachmentRefId=id;
  if (attachmentRefId.startsWith(""String_Node_Str"")) {
    attachmentRefId=attachmentRefId.substring(4);
  }
  return attachments.get(attachmentRefId);
}"
63404,"public boolean isXOPPackage(){
  return true;
}","@Override public boolean isXOPPackage(){
  return true;
}"
63405,"@SuppressWarnings({""String_Node_Str""}) public SOAPMessage invoke(SOAPMessage request){
  Map<String,DataHandler> attachments=null;
  if (mtomEnabled) {
    attachments=(Map<String,DataHandler>)mc.get(INBOUND_MESSAGE_ATTACHMENTS);
  }
  SOAPMessage response=null;
  boolean usesSOAP12=false;
  DBWSAdapter dbwsAdapter=(DBWSAdapter)xrService;
  SOAPEnvelope envelope=null;
  try {
    envelope=request.getSOAPPart().getEnvelope();
  }
 catch (  SOAPException se) {
    throw new WebServiceException(se.getMessage(),se);
  }
  String namespaceURI=envelope.getNamespaceURI();
  usesSOAP12=namespaceURI.equals(URI_NS_SOAP_1_2_ENVELOPE);
  SOAPElement body;
  try {
    body=getSOAPBodyElement(envelope);
  }
 catch (  SOAPException se) {
    throw new WebServiceException(se.getMessage(),se);
  }
  if (body == null) {
    SOAPFault soapFault=null;
    try {
      SOAPFactory soapFactory=null;
      if (usesSOAP12) {
        soapFactory=SOAPFactory.newInstance(SOAP_1_2_PROTOCOL);
      }
 else {
        soapFactory=SOAPFactory.newInstance();
      }
      QName faultCodeQName=null;
      if (usesSOAP12) {
        faultCodeQName=SENDER_QNAME;
      }
 else {
        faultCodeQName=CLIENT_QNAME;
      }
      soapFault=soapFactory.createFault(""String_Node_Str"",faultCodeQName);
    }
 catch (    SOAPException se) {
    }
    throw new SOAPFaultException(soapFault);
  }
  XMLRoot xmlRoot=null;
  try {
    XMLContext xmlContext=dbwsAdapter.getXMLContext();
    XMLUnmarshaller unmarshaller=xmlContext.createUnmarshaller();
    if (attachments != null && attachments.size() > 0) {
      unmarshaller.setAttachmentUnmarshaller(new XMLAttachmentUnmarshaller(){
        Map<String,DataHandler> attachments;
        public XMLAttachmentUnmarshaller setAttachments(        Map<String,DataHandler> attachments){
          this.attachments=attachments;
          return this;
        }
        public boolean isXOPPackage(){
          return true;
        }
        public DataHandler getAttachmentAsDataHandler(        String id){
          String attachmentRefId=id;
          if (attachmentRefId.startsWith(""String_Node_Str"")) {
            attachmentRefId=attachmentRefId.substring(4);
          }
          return attachments.get(attachmentRefId);
        }
        public byte[] getAttachmentAsByteArray(        String id){
          ByteArrayOutputStream out=null;
          try {
            DataHandler dh=attachments.get(id);
            if (dh == null) {
              return null;
            }
            InputStream in=dh.getInputStream();
            out=new ByteArrayOutputStream(1024);
            byte[] buf=new byte[1024];
            int len;
            while ((len=in.read(buf)) > 0) {
              out.write(buf,0,len);
            }
          }
 catch (          IOException e) {
          }
          if (out != null) {
            return out.toByteArray();
          }
          return null;
        }
      }
.setAttachments(attachments));
      dbwsAdapter.setCurrentAttachmentUnmarshaller(unmarshaller.getAttachmentUnmarshaller());
    }
    xmlRoot=(XMLRoot)unmarshaller.unmarshal(body,Invocation.class);
  }
 catch (  Exception e) {
    SOAPFault soapFault=null;
    try {
      SOAPFactory soapFactory=null;
      if (usesSOAP12) {
        soapFactory=SOAPFactory.newInstance(SOAP_1_2_PROTOCOL);
      }
 else {
        soapFactory=SOAPFactory.newInstance();
      }
      QName faultCodeQName=null;
      if (usesSOAP12) {
        faultCodeQName=SENDER_QNAME;
      }
 else {
        faultCodeQName=CLIENT_QNAME;
      }
      Throwable e1=e;
      if (e.getCause() != null) {
        e1=e.getCause();
      }
      soapFault=soapFactory.createFault(""String_Node_Str"" + e1,faultCodeQName);
    }
 catch (    SOAPException se) {
    }
    throw new SOAPFaultException(soapFault);
  }
  Invocation invocation=(Invocation)xmlRoot.getObject();
  invocation.setName(xmlRoot.getLocalName());
  Operation op=dbwsAdapter.getOperation(invocation.getName());
  org.eclipse.persistence.internal.oxm.schema.model.Element invocationElement=(org.eclipse.persistence.internal.oxm.schema.model.Element)dbwsAdapter.getExtendedSchema().getTopLevelElements().get(invocation.getName());
  String typeName=invocationElement.getType();
  int idx=typeName.indexOf(':');
  if (idx != -1) {
    typeName=typeName.substring(idx + 1);
  }
  ComplexType complexType=(ComplexType)dbwsAdapter.getExtendedSchema().getTopLevelComplexTypes().get(typeName);
  if (complexType.getSequence() != null) {
    for (Iterator i=complexType.getSequence().getOrderedElements().iterator(); i.hasNext(); ) {
      org.eclipse.persistence.internal.oxm.schema.model.Element e=(org.eclipse.persistence.internal.oxm.schema.model.Element)i.next();
      String argName=e.getName();
      Object argValue=invocation.getParameter(argName);
      String argType=e.getType();
      if (argType != null) {
        String argTypePrefix=null;
        String nameSpaceURI=null;
        idx=argType.indexOf(':');
        if (idx != -1) {
          argTypePrefix=argType.substring(0,idx);
          argType=argType.substring(idx + 1);
          nameSpaceURI=dbwsAdapter.getSchema().getNamespaceResolver().resolveNamespacePrefix(argTypePrefix);
        }
        QName argQName=argTypePrefix == null ? new QName(nameSpaceURI,argType) : new QName(nameSpaceURI,argType,argTypePrefix);
        Class<?> clz=SCHEMA_2_CLASS.get(argQName);
        if (clz != null) {
          argValue=((XMLConversionManager)dbwsAdapter.getOXSession().getDatasourcePlatform().getConversionManager()).convertObject(argValue,clz,argQName);
          invocation.setParameter(argName,argValue);
        }
      }
    }
  }
  Object result=null;
  try {
    result=op.invoke(dbwsAdapter,invocation);
    if (result instanceof ValueObject) {
      result=((ValueObject)result).value;
    }
    response=responseWriter.generateResponse(op,usesSOAP12,result);
  }
 catch (  SOAPException se) {
    throw new WebServiceException(se.getMessage(),se);
  }
catch (  Exception e) {
    try {
      response=responseWriter.generateResponse(op,usesSOAP12,e);
    }
 catch (    SOAPException soape1) {
      SOAPFault soapFault=null;
      try {
        SOAPFactory soapFactory=null;
        if (usesSOAP12) {
          soapFactory=SOAPFactory.newInstance(SOAP_1_2_PROTOCOL);
        }
 else {
          soapFactory=SOAPFactory.newInstance();
        }
        QName faultCodeQName=null;
        if (usesSOAP12) {
          faultCodeQName=RECEIVER_QNAME;
        }
 else {
          faultCodeQName=SERVER_QNAME;
        }
        soapFault=soapFactory.createFault(""String_Node_Str"" + e.getMessage(),faultCodeQName);
      }
 catch (      SOAPException soape2) {
      }
      throw new SOAPFaultException(soapFault);
    }
  }
  return response;
}","@SuppressWarnings({""String_Node_Str""}) public SOAPMessage invoke(SOAPMessage request){
  Map<String,DataHandler> attachments=null;
  if (mtomEnabled) {
    attachments=(Map<String,DataHandler>)mc.get(INBOUND_MESSAGE_ATTACHMENTS);
  }
  SOAPMessage response=null;
  boolean usesSOAP12=false;
  DBWSAdapter dbwsAdapter=(DBWSAdapter)xrService;
  SOAPEnvelope envelope=null;
  try {
    envelope=request.getSOAPPart().getEnvelope();
  }
 catch (  SOAPException se) {
    throw new WebServiceException(se.getMessage(),se);
  }
  String namespaceURI=envelope.getNamespaceURI();
  usesSOAP12=namespaceURI.equals(URI_NS_SOAP_1_2_ENVELOPE);
  SOAPElement body;
  try {
    body=getSOAPBodyElement(envelope);
  }
 catch (  SOAPException se) {
    throw new WebServiceException(se.getMessage(),se);
  }
  if (body == null) {
    SOAPFault soapFault=null;
    try {
      SOAPFactory soapFactory=null;
      if (usesSOAP12) {
        soapFactory=SOAPFactory.newInstance(SOAP_1_2_PROTOCOL);
      }
 else {
        soapFactory=SOAPFactory.newInstance();
      }
      QName faultCodeQName=null;
      if (usesSOAP12) {
        faultCodeQName=SENDER_QNAME;
      }
 else {
        faultCodeQName=CLIENT_QNAME;
      }
      soapFault=soapFactory.createFault(""String_Node_Str"",faultCodeQName);
    }
 catch (    SOAPException se) {
      throw new WebServiceException(se.getMessage(),se);
    }
    throw new SOAPFaultException(soapFault);
  }
  XMLRoot xmlRoot=null;
  try {
    XMLContext xmlContext=dbwsAdapter.getXMLContext();
    XMLUnmarshaller unmarshaller=xmlContext.createUnmarshaller();
    if (attachments != null && attachments.size() > 0) {
      unmarshaller.setAttachmentUnmarshaller(new XMLAttachmentUnmarshaller(){
        Map<String,DataHandler> attachments;
        public XMLAttachmentUnmarshaller setAttachments(        Map<String,DataHandler> attachments){
          this.attachments=attachments;
          return this;
        }
        @Override public boolean isXOPPackage(){
          return true;
        }
        @Override public DataHandler getAttachmentAsDataHandler(        String id){
          String attachmentRefId=id;
          if (attachmentRefId.startsWith(""String_Node_Str"")) {
            attachmentRefId=attachmentRefId.substring(4);
          }
          return attachments.get(attachmentRefId);
        }
        @Override public byte[] getAttachmentAsByteArray(        String id){
          ByteArrayOutputStream out=null;
          try {
            DataHandler dh=attachments.get(id);
            if (dh == null) {
              return null;
            }
            InputStream in=dh.getInputStream();
            out=new ByteArrayOutputStream(1024);
            byte[] buf=new byte[1024];
            int len;
            while ((len=in.read(buf)) > 0) {
              out.write(buf,0,len);
            }
          }
 catch (          IOException e) {
          }
          if (out != null) {
            return out.toByteArray();
          }
          return null;
        }
      }
.setAttachments(attachments));
      dbwsAdapter.setCurrentAttachmentUnmarshaller(unmarshaller.getAttachmentUnmarshaller());
    }
    xmlRoot=(XMLRoot)unmarshaller.unmarshal(body,Invocation.class);
  }
 catch (  Exception e) {
    SOAPFault soapFault=null;
    try {
      SOAPFactory soapFactory=null;
      if (usesSOAP12) {
        soapFactory=SOAPFactory.newInstance(SOAP_1_2_PROTOCOL);
      }
 else {
        soapFactory=SOAPFactory.newInstance();
      }
      QName faultCodeQName=null;
      if (usesSOAP12) {
        faultCodeQName=SENDER_QNAME;
      }
 else {
        faultCodeQName=CLIENT_QNAME;
      }
      Throwable e1=e;
      if (e.getCause() != null) {
        e1=e.getCause();
      }
      soapFault=soapFactory.createFault(""String_Node_Str"" + e1,faultCodeQName);
    }
 catch (    SOAPException se) {
      throw new WebServiceException(se.getMessage(),se);
    }
    throw new SOAPFaultException(soapFault);
  }
  Invocation invocation=(Invocation)xmlRoot.getObject();
  invocation.setName(xmlRoot.getLocalName());
  Operation op=dbwsAdapter.getOperation(invocation.getName());
  org.eclipse.persistence.internal.oxm.schema.model.Element invocationElement=(org.eclipse.persistence.internal.oxm.schema.model.Element)dbwsAdapter.getExtendedSchema().getTopLevelElements().get(invocation.getName());
  String typeName=invocationElement.getType();
  int idx=typeName.indexOf(':');
  if (idx != -1) {
    typeName=typeName.substring(idx + 1);
  }
  ComplexType complexType=(ComplexType)dbwsAdapter.getExtendedSchema().getTopLevelComplexTypes().get(typeName);
  if (complexType.getSequence() != null) {
    for (Iterator i=complexType.getSequence().getOrderedElements().iterator(); i.hasNext(); ) {
      org.eclipse.persistence.internal.oxm.schema.model.Element e=(org.eclipse.persistence.internal.oxm.schema.model.Element)i.next();
      String argName=e.getName();
      Object argValue=invocation.getParameter(argName);
      String argType=e.getType();
      if (argType != null) {
        String argTypePrefix=null;
        String nameSpaceURI=null;
        idx=argType.indexOf(':');
        if (idx != -1) {
          argTypePrefix=argType.substring(0,idx);
          argType=argType.substring(idx + 1);
          nameSpaceURI=dbwsAdapter.getSchema().getNamespaceResolver().resolveNamespacePrefix(argTypePrefix);
        }
        QName argQName=argTypePrefix == null ? new QName(nameSpaceURI,argType) : new QName(nameSpaceURI,argType,argTypePrefix);
        Class<?> clz=SCHEMA_2_CLASS.get(argQName);
        if (clz != null) {
          argValue=((XMLConversionManager)dbwsAdapter.getOXSession().getDatasourcePlatform().getConversionManager()).convertObject(argValue,clz,argQName);
          invocation.setParameter(argName,argValue);
        }
      }
    }
  }
  Object result=null;
  try {
    result=op.invoke(dbwsAdapter,invocation);
    if (result instanceof ValueObject) {
      result=((ValueObject)result).value;
    }
    response=responseWriter.generateResponse(op,usesSOAP12,result);
  }
 catch (  SOAPException se) {
    throw new WebServiceException(se.getMessage(),se);
  }
catch (  Exception e) {
    try {
      response=responseWriter.generateResponse(op,usesSOAP12,e);
    }
 catch (    SOAPException soape1) {
      SOAPFault soapFault=null;
      try {
        SOAPFactory soapFactory=null;
        if (usesSOAP12) {
          soapFactory=SOAPFactory.newInstance(SOAP_1_2_PROTOCOL);
        }
 else {
          soapFactory=SOAPFactory.newInstance();
        }
        QName faultCodeQName=null;
        if (usesSOAP12) {
          faultCodeQName=RECEIVER_QNAME;
        }
 else {
          faultCodeQName=SERVER_QNAME;
        }
        soapFault=soapFactory.createFault(""String_Node_Str"" + e.getMessage(),faultCodeQName);
      }
 catch (      SOAPException soape2) {
        throw new WebServiceException(soape2.getMessage(),soape2);
      }
      throw new SOAPFaultException(soapFault);
    }
  }
  return response;
}"
63406,"public byte[] getAttachmentAsByteArray(String id){
  ByteArrayOutputStream out=null;
  try {
    DataHandler dh=attachments.get(id);
    if (dh == null) {
      return null;
    }
    InputStream in=dh.getInputStream();
    out=new ByteArrayOutputStream(1024);
    byte[] buf=new byte[1024];
    int len;
    while ((len=in.read(buf)) > 0) {
      out.write(buf,0,len);
    }
  }
 catch (  IOException e) {
  }
  if (out != null) {
    return out.toByteArray();
  }
  return null;
}","@Override public byte[] getAttachmentAsByteArray(String id){
  ByteArrayOutputStream out=null;
  try {
    DataHandler dh=attachments.get(id);
    if (dh == null) {
      return null;
    }
    InputStream in=dh.getInputStream();
    out=new ByteArrayOutputStream(1024);
    byte[] buf=new byte[1024];
    int len;
    while ((len=in.read(buf)) > 0) {
      out.write(buf,0,len);
    }
  }
 catch (  IOException e) {
  }
  if (out != null) {
    return out.toByteArray();
  }
  return null;
}"
63407,"/** 
 * Execute <tt>SELECT</tt> operation on the database
 * @param xrService parent <code>XRService</code> that owns this <code>Operation</code>
 * @param invocation contains runtime argument values to be bound to the list of{@link Parameter}'s.
 * @return  result - the result of the underlying <tt>SELECT</tt> operation onthe database, or <code>null</code>.
 * @see  {@link Operation}
 */
@Override public Object invoke(XRServiceAdapter xrService,Invocation invocation){
  DatabaseQuery query=queryHandler.getDatabaseQuery();
  if (query.getProperty(DATABASEQUERY_STR) != null) {
    query=(DatabaseQuery)query.getProperty(DATABASEQUERY_STR);
  }
  if (query.getArguments().size() == 0) {
    int idx=0;
    for (    Parameter param : getParameters()) {
      query.addArgument(Integer.toString(++idx),Util.SCHEMA_2_CLASS.get(param.getType()));
      query.addArgumentValue(invocation.getParameter(param.getName()));
    }
  }
 else {
    List<Object> argVals=new ArrayList<Object>();
    for (    Parameter param : getParameters()) {
      argVals.add(invocation.getParameter(param.getName()));
    }
    query.setArgumentValues(argVals);
  }
  if (isSimpleXMLFormat() && query.isDataReadQuery()) {
    ((DataReadQuery)query).setResultType(DataReadQuery.MAP);
  }
  Object value=xrService.getORSession().getActiveSession().executeQuery(query);
  if (value != null) {
    if (result != null && (result.getType() == INT_QNAME || result.getType().equals(SXF_QNAME))) {
      if (value instanceof ArrayList && ((ArrayList)value).isEmpty()) {
        ((ArrayList)value).add(1);
      }
 else       if (value instanceof Vector && ((Vector)value).isEmpty()) {
        ((Vector)value).add(1);
      }
    }
    if (value instanceof ArrayList) {
      ArrayList returnedList=(ArrayList)value;
      if (returnedList.size() > 0 && returnedList.get(0) instanceof Object[]) {
        Object[] objs=(Object[])returnedList.get(0);
        if (isCollection()) {
          value=new ArrayList();
          for (          Object obj : objs) {
            ((ArrayList)value).add(obj);
          }
        }
 else {
          value=objs[0];
        }
      }
    }
    if (isSimpleXMLFormat()) {
      value=createSimpleXMLFormat(xrService,value);
    }
 else {
      if (!isCollection() && value instanceof Vector) {
        if (((Vector)value).isEmpty()) {
          return null;
        }
        value=((Vector)value).firstElement();
      }
      QName resultType=getResultType();
      if (resultType != null) {
        if (isAttachment() || (!isCollection() && resultType.equals(BASE_64_BINARY_QNAME))) {
          String mimeType=DEFAULT_ATTACHMENT_MIMETYPE;
          if (isAttachment() && result.getAttachment().getMimeType() != null) {
            mimeType=result.getAttachment().getMimeType();
          }
          if (value instanceof Blob) {
            value=((XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager()).convertObject((Blob)value,ClassConstants.APBYTE);
          }
          return AttachmentHelper.buildAttachmentHandler((byte[])value,mimeType);
        }
        if (resultType.getNamespaceURI().equals(SCHEMA_URL)) {
          ValueObject vo=new ValueObject();
          vo.value=value;
          value=vo;
        }
 else {
          Object targetObject=value;
          if (xrService.descriptorsByQName.containsKey(resultType)) {
            XMLDescriptor xdesc=xrService.descriptorsByQName.get(resultType);
            ClassDescriptor desc=xrService.getORSession().getDescriptorForAlias(xdesc.getAlias());
            if (desc.isAggregateDescriptor() && !desc.isObjectRelationalDataTypeDescriptor() && !desc.isRelationalDescriptor()) {
              if (isCollection()) {
                XRDynamicEntity_CollectionWrapper xrCollWrapper=new XRDynamicEntity_CollectionWrapper();
                Vector<AbstractRecord> results=(Vector<AbstractRecord>)value;
                for (int i=0, len=results.size(); i < len; i++) {
                  Object o=desc.getObjectBuilder().buildNewInstance();
                  populateTargetObjectFromRecord(desc.getMappings(),results.get(i),o,(AbstractSession)xrService.getORSession());
                  xrCollWrapper.add(o);
                }
                targetObject=xrCollWrapper;
              }
 else {
                targetObject=desc.getObjectBuilder().buildNewInstance();
                populateTargetObjectFromRecord(desc.getMappings(),(AbstractRecord)value,targetObject,(AbstractSession)xrService.getORSession());
              }
            }
 else             if (isCollection() && value instanceof Vector) {
              if (((Vector)value).size() > 0 && !(((Vector)value).get(0) instanceof AbstractRecord)) {
                return value;
              }
              XRDynamicEntity_CollectionWrapper xrCollWrapper=new XRDynamicEntity_CollectionWrapper();
              Vector<AbstractRecord> results=(Vector<AbstractRecord>)value;
              for (int i=0, len=results.size(); i < len; i++) {
                Object o=desc.getObjectBuilder().buildNewInstance();
                populateTargetObjectFromRecord(desc.getMappings(),results.get(i),o,(AbstractSession)xrService.getORSession());
                xrCollWrapper.add(o);
              }
              targetObject=xrCollWrapper;
            }
 else             if (value instanceof AbstractRecord) {
              targetObject=desc.getObjectBuilder().buildNewInstance();
              populateTargetObjectFromRecord(desc.getMappings(),(AbstractRecord)value,targetObject,(AbstractSession)xrService.getORSession());
            }
          }
          if (value instanceof ArrayList) {
            XMLDescriptor xdesc=xrService.descriptorsByQName.get(resultType);
            ClassDescriptor desc=xrService.getORSession().getDescriptorForAlias(xdesc.getAlias());
            targetObject=desc.getObjectBuilder().buildNewInstance();
            Object[] objs=new Object[1];
            objs[0]=((ArrayList)value).get(0);
            DatabaseRecord dr=new DatabaseRecord();
            dr.add(new DatabaseField(ITEMS_STR),objs);
            populateTargetObjectFromRecord(desc.getMappings(),(AbstractRecord)dr,targetObject,(AbstractSession)xrService.getORSession());
          }
          value=targetObject;
        }
      }
    }
  }
  return value;
}","/** 
 * Execute <tt>SELECT</tt> operation on the database
 * @param xrService parent <code>XRService</code> that owns this <code>Operation</code>
 * @param invocation contains runtime argument values to be bound to the list of{@link Parameter}'s.
 * @return  result - the result of the underlying <tt>SELECT</tt> operation onthe database, or <code>null</code>.
 * @see  {@link Operation}
 */
@Override public Object invoke(XRServiceAdapter xrService,Invocation invocation){
  DatabaseQuery query=queryHandler.getDatabaseQuery();
  if (query.getProperty(DATABASEQUERY_STR) != null) {
    query=(DatabaseQuery)query.getProperty(DATABASEQUERY_STR);
  }
  if (query.getArguments().size() == 0) {
    int idx=0;
    for (    Parameter param : getParameters()) {
      query.addArgument(Integer.toString(++idx),Util.SCHEMA_2_CLASS.get(param.getType()));
      query.addArgumentValue(invocation.getParameter(param.getName()));
    }
  }
 else {
    List<Object> argVals=new ArrayList<Object>();
    for (    Parameter param : getParameters()) {
      argVals.add(invocation.getParameter(param.getName()));
    }
    query.setArgumentValues(argVals);
  }
  if (isSimpleXMLFormat() && query.isDataReadQuery()) {
    ((DataReadQuery)query).setResultType(DataReadQuery.MAP);
  }
  Object value=xrService.getORSession().getActiveSession().executeQuery(query);
  if (value != null) {
    if (result != null && (result.getType() == INT_QNAME || result.getType().equals(SXF_QNAME))) {
      if (value instanceof ArrayList && ((ArrayList)value).isEmpty()) {
        ((ArrayList)value).add(1);
      }
 else       if (value instanceof Vector && ((Vector)value).isEmpty()) {
        ((Vector)value).add(1);
      }
    }
    if (value instanceof ArrayList) {
      ArrayList returnedList=(ArrayList)value;
      if (returnedList.size() > 0 && returnedList.get(0) instanceof Object[]) {
        Object[] objs=(Object[])returnedList.get(0);
        if (isCollection()) {
          value=new ArrayList();
          for (          Object obj : objs) {
            ((ArrayList)value).add(obj);
          }
        }
 else {
          value=objs[0];
        }
      }
    }
    if (isSimpleXMLFormat()) {
      value=createSimpleXMLFormat(xrService,value);
    }
 else {
      if (!isCollection() && value instanceof Vector) {
        if (((Vector)value).isEmpty()) {
          return null;
        }
        value=((Vector)value).firstElement();
      }
      QName resultType=getResultType();
      if (resultType != null) {
        if (isAttachment() || (!isCollection() && resultType.equals(BASE_64_BINARY_QNAME))) {
          String mimeType=DEFAULT_ATTACHMENT_MIMETYPE;
          if (isAttachment() && result.getAttachment().getMimeType() != null) {
            mimeType=result.getAttachment().getMimeType();
          }
          if (value instanceof Blob) {
            value=((XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.APBYTE);
          }
          return AttachmentHelper.buildAttachmentHandler((byte[])value,mimeType);
        }
        if (resultType.getNamespaceURI().equals(SCHEMA_URL)) {
          ValueObject vo=new ValueObject();
          vo.value=value;
          value=vo;
        }
 else {
          Object targetObject=value;
          if (xrService.descriptorsByQName.containsKey(resultType)) {
            XMLDescriptor xdesc=xrService.descriptorsByQName.get(resultType);
            ClassDescriptor desc=xrService.getORSession().getDescriptorForAlias(xdesc.getAlias());
            if (desc.isAggregateDescriptor() && !desc.isObjectRelationalDataTypeDescriptor() && !desc.isRelationalDescriptor()) {
              if (isCollection()) {
                XRDynamicEntity_CollectionWrapper xrCollWrapper=new XRDynamicEntity_CollectionWrapper();
                Vector<AbstractRecord> results=(Vector<AbstractRecord>)value;
                for (int i=0, len=results.size(); i < len; i++) {
                  Object o=desc.getObjectBuilder().buildNewInstance();
                  populateTargetObjectFromRecord(desc.getMappings(),results.get(i),o,(AbstractSession)xrService.getORSession());
                  xrCollWrapper.add(o);
                }
                targetObject=xrCollWrapper;
              }
 else {
                targetObject=desc.getObjectBuilder().buildNewInstance();
                populateTargetObjectFromRecord(desc.getMappings(),(AbstractRecord)value,targetObject,(AbstractSession)xrService.getORSession());
              }
            }
 else             if (isCollection() && value instanceof Vector) {
              if (((Vector)value).size() > 0 && !(((Vector)value).get(0) instanceof AbstractRecord)) {
                return value;
              }
              XRDynamicEntity_CollectionWrapper xrCollWrapper=new XRDynamicEntity_CollectionWrapper();
              Vector<AbstractRecord> results=(Vector<AbstractRecord>)value;
              for (int i=0, len=results.size(); i < len; i++) {
                Object o=desc.getObjectBuilder().buildNewInstance();
                populateTargetObjectFromRecord(desc.getMappings(),results.get(i),o,(AbstractSession)xrService.getORSession());
                xrCollWrapper.add(o);
              }
              targetObject=xrCollWrapper;
            }
 else             if (value instanceof AbstractRecord) {
              targetObject=desc.getObjectBuilder().buildNewInstance();
              populateTargetObjectFromRecord(desc.getMappings(),(AbstractRecord)value,targetObject,(AbstractSession)xrService.getORSession());
            }
          }
          if (value instanceof ArrayList) {
            XMLDescriptor xdesc=xrService.descriptorsByQName.get(resultType);
            ClassDescriptor desc=xrService.getORSession().getDescriptorForAlias(xdesc.getAlias());
            targetObject=desc.getObjectBuilder().buildNewInstance();
            Object[] objs=new Object[1];
            objs[0]=((ArrayList)value).get(0);
            DatabaseRecord dr=new DatabaseRecord();
            dr.add(new DatabaseField(ITEMS_STR),objs);
            populateTargetObjectFromRecord(desc.getMappings(),(AbstractRecord)dr,targetObject,(AbstractSession)xrService.getORSession());
          }
          value=targetObject;
        }
      }
    }
  }
  return value;
}"
63408,"public void initializeCall(XRServiceAdapter xrService,QueryOperation queryOperation,DatabaseQuery databaseQuery){
}","@Override public void initializeCall(XRServiceAdapter xrService,QueryOperation queryOperation,DatabaseQuery databaseQuery){
}"
63409,"public Object createSimpleXMLFormat(XRServiceAdapter xrService,Object value){
  XMLRoot xmlRoot=new XMLRoot();
  SimpleXMLFormat simpleXMLFormat=result.getSimpleXMLFormat();
  String tempSimpleXMLFormatTag=SimpleXMLFormat.DEFAULT_SIMPLE_XML_FORMAT_TAG;
  String simpleXMLFormatTag=simpleXMLFormat.getSimpleXMLFormatTag();
  if (simpleXMLFormatTag != null && !EMPTY_STR.equals(simpleXMLFormatTag)) {
    tempSimpleXMLFormatTag=simpleXMLFormatTag;
  }
  xmlRoot.setLocalName(tempSimpleXMLFormatTag);
  String tempXMLTag=DEFAULT_SIMPLE_XML_TAG;
  String xmlTag=simpleXMLFormat.getXMLTag();
  if (xmlTag != null && !EMPTY_STR.equals(xmlTag)) {
    tempXMLTag=xmlTag;
  }
  Vector<DatabaseRecord> records=null;
  if (value instanceof ArrayList) {
    JPAQuery jpaQuery=(JPAQuery)queryHandler.getDatabaseQuery();
    List<DatabaseField> paramFlds=new ArrayList<DatabaseField>();
    DatasourceCall dsCall=(DatasourceCall)jpaQuery.getDatabaseQuery().getDatasourceCall();
    for (    Object obj : dsCall.getParameters()) {
      if (obj instanceof OutputParameterForCallableStatement) {
        paramFlds.add(((OutputParameterForCallableStatement)obj).getOutputField());
      }
 else       if (obj instanceof Object[]) {
        Object[] objArray=(Object[])obj;
        for (int i=0; i < objArray.length; i++) {
          Object o=objArray[i];
          if (o instanceof OutputParameterForCallableStatement) {
            paramFlds.add(((OutputParameterForCallableStatement)o).getOutputField());
          }
        }
      }
    }
    DatabaseRecord dr=new DatabaseRecord();
    if (paramFlds.size() > 0) {
      for (int i=0; i < ((ArrayList)value).size(); i++) {
        dr.add(paramFlds.get(i),((ArrayList)value).get(i));
      }
    }
 else {
      dr.add(new DatabaseField(RESULT_STR),((ArrayList)value).get(0));
    }
    records=new Vector<DatabaseRecord>();
    records.add(dr);
  }
 else   if (value instanceof Vector) {
    Class vectorContent=((Vector)value).firstElement().getClass();
    if (DatabaseRecord.class.isAssignableFrom(vectorContent)) {
      records=(Vector<DatabaseRecord>)value;
    }
 else {
      records=new Vector<DatabaseRecord>();
      DatabaseRecord dr=new DatabaseRecord();
      dr.add(new DatabaseField(RESULT_STR),((Vector)value).firstElement());
      records.add(dr);
    }
  }
 else {
    records=new Vector<DatabaseRecord>();
    DatabaseRecord dr=new DatabaseRecord();
    dr.add(new DatabaseField(RESULT_STR),value);
    records.add(dr);
  }
  SimpleXMLFormatModel simpleXMLFormatModel=new SimpleXMLFormatModel();
  XMLConversionManager conversionManager=(XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager();
  for (  DatabaseRecord dr : records) {
    Element rowElement=TEMP_DOC.createElement(tempXMLTag);
    for (    DatabaseField field : (Vector<DatabaseField>)dr.getFields()) {
      if (field instanceof ObjectRelationalDatabaseField) {
        ObjectRelationalDatabaseField ordtField=(ObjectRelationalDatabaseField)field;
        if (xrService.getOXSession().getDescriptor(ordtField.getType()) != null) {
          xrService.getXMLContext().createMarshaller().marshal(dr.get(field),rowElement);
          continue;
        }
      }
      Object fieldValue=dr.get(field);
      if (fieldValue != null) {
        if (fieldValue instanceof Calendar) {
          Calendar cValue=(Calendar)fieldValue;
          fieldValue=conversionManager.convertObject(cValue,STRING,DATE_TIME_QNAME);
        }
        if (fieldValue instanceof Date) {
          Date dValue=(Date)fieldValue;
          fieldValue=conversionManager.convertObject(dValue,STRING,DATE_QNAME);
        }
 else         if (fieldValue instanceof Time) {
          Time tValue=(Time)fieldValue;
          fieldValue=conversionManager.convertObject(tValue,STRING,TIME_QNAME);
        }
 else         if (fieldValue instanceof Timestamp) {
          Timestamp tsValue=(Timestamp)fieldValue;
          fieldValue=conversionManager.convertObject(tsValue,STRING,DATE_TIME_QNAME);
        }
 else         if (fieldValue instanceof Blob) {
          fieldValue=conversionManager.convertObject((Blob)fieldValue,ClassConstants.APBYTE);
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLESQLXML_STR)) {
          try {
            Class oracleSQLXML;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleSQLXML=AccessController.doPrivileged(new PrivilegedClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader()));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{}));
              fieldValue=(String)AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleSQLXML=PrivilegedAccessHelper.getClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader());
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{});
              fieldValue=(String)PrivilegedAccessHelper.invokeMethod(getStringMethod,fieldValue,new Object[]{});
            }
          }
 catch (          Exception x) {
          }
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLEOPAQUE_STR)) {
          try {
            Class oracleOPAQUE;
            Class xmlTypeFactoryClass;
            Constructor xmlTypeFactoryConstructor;
            Object xmlTypeFactory;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleOPAQUE=AccessController.doPrivileged(new PrivilegedClassForName(ORACLEOPAQUE_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryClass=AccessController.doPrivileged(new PrivilegedClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryConstructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(xmlTypeFactoryClass,new Class[0],true));
              xmlTypeFactory=AccessController.doPrivileged(new PrivilegedInvokeConstructor(xmlTypeFactoryConstructor,new Object[0]));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE}));
              fieldValue=(String)AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleOPAQUE=PrivilegedAccessHelper.getClassForName(ORACLEOPAQUE_STR,false,this.getClass().getClassLoader());
              xmlTypeFactoryClass=PrivilegedAccessHelper.getClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader());
              xmlTypeFactoryConstructor=PrivilegedAccessHelper.getConstructorFor(xmlTypeFactoryClass,new Class[0],true);
              xmlTypeFactory=PrivilegedAccessHelper.invokeConstructor(xmlTypeFactoryConstructor,new Object[0]);
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE});
              fieldValue=(String)PrivilegedAccessHelper.invokeMethod(getStringMethod,xmlTypeFactory,new Object[]{fieldValue});
            }
          }
 catch (          Exception x) {
          }
        }
        String elementName;
        if (field.getName() == null || (elementName=sqlToXmlName(field.getName())).equals(EMPTY_STR)) {
          elementName=RESULT_STR;
        }
        Element columnElement=TEMP_DOC.createElement(elementName);
        rowElement.appendChild(columnElement);
        String fieldValueString=fieldValue.toString();
        if (result.getType().equals(BASE_64_BINARY_QNAME)) {
          fieldValueString=Helper.buildHexStringFromBytes(Base64.base64Encode((byte[])fieldValue));
          columnElement.setAttributeNS(XMLNS_URL,XSD_STR,SCHEMA_URL);
          columnElement.setAttributeNS(XMLNS_URL,XSI_STR,SCHEMA_INSTANCE_URL);
          columnElement.setAttributeNS(SCHEMA_INSTANCE_URL,XSITYPE_STR,BASE64_BINARY_STR);
        }
        columnElement.appendChild(TEMP_DOC.createTextNode(fieldValueString));
      }
    }
    simpleXMLFormatModel.simpleXML.add(rowElement);
  }
  xmlRoot.setObject(simpleXMLFormatModel);
  return xmlRoot;
}","public Object createSimpleXMLFormat(XRServiceAdapter xrService,Object value){
  XMLRoot xmlRoot=new XMLRoot();
  SimpleXMLFormat simpleXMLFormat=result.getSimpleXMLFormat();
  String tempSimpleXMLFormatTag=SimpleXMLFormat.DEFAULT_SIMPLE_XML_FORMAT_TAG;
  String simpleXMLFormatTag=simpleXMLFormat.getSimpleXMLFormatTag();
  if (simpleXMLFormatTag != null && !EMPTY_STR.equals(simpleXMLFormatTag)) {
    tempSimpleXMLFormatTag=simpleXMLFormatTag;
  }
  xmlRoot.setLocalName(tempSimpleXMLFormatTag);
  String tempXMLTag=DEFAULT_SIMPLE_XML_TAG;
  String xmlTag=simpleXMLFormat.getXMLTag();
  if (xmlTag != null && !EMPTY_STR.equals(xmlTag)) {
    tempXMLTag=xmlTag;
  }
  Vector<DatabaseRecord> records=null;
  if (value instanceof ArrayList) {
    JPAQuery jpaQuery=(JPAQuery)queryHandler.getDatabaseQuery();
    List<DatabaseField> paramFlds=new ArrayList<DatabaseField>();
    DatasourceCall dsCall=(DatasourceCall)jpaQuery.getDatabaseQuery().getDatasourceCall();
    for (    Object obj : dsCall.getParameters()) {
      if (obj instanceof OutputParameterForCallableStatement) {
        paramFlds.add(((OutputParameterForCallableStatement)obj).getOutputField());
      }
 else       if (obj instanceof Object[]) {
        Object[] objArray=(Object[])obj;
        for (int i=0; i < objArray.length; i++) {
          Object o=objArray[i];
          if (o instanceof OutputParameterForCallableStatement) {
            paramFlds.add(((OutputParameterForCallableStatement)o).getOutputField());
          }
        }
      }
    }
    DatabaseRecord dr=new DatabaseRecord();
    if (paramFlds.size() > 0) {
      for (int i=0; i < ((ArrayList)value).size(); i++) {
        dr.add(paramFlds.get(i),((ArrayList)value).get(i));
      }
    }
 else {
      dr.add(new DatabaseField(RESULT_STR),((ArrayList)value).get(0));
    }
    records=new Vector<DatabaseRecord>();
    records.add(dr);
  }
 else   if (value instanceof Vector) {
    Class vectorContent=((Vector)value).firstElement().getClass();
    if (DatabaseRecord.class.isAssignableFrom(vectorContent)) {
      records=(Vector<DatabaseRecord>)value;
    }
 else {
      records=new Vector<DatabaseRecord>();
      DatabaseRecord dr=new DatabaseRecord();
      dr.add(new DatabaseField(RESULT_STR),((Vector)value).firstElement());
      records.add(dr);
    }
  }
 else {
    records=new Vector<DatabaseRecord>();
    DatabaseRecord dr=new DatabaseRecord();
    dr.add(new DatabaseField(RESULT_STR),value);
    records.add(dr);
  }
  SimpleXMLFormatModel simpleXMLFormatModel=new SimpleXMLFormatModel();
  XMLConversionManager conversionManager=(XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager();
  for (  DatabaseRecord dr : records) {
    Element rowElement=TEMP_DOC.createElement(tempXMLTag);
    for (    DatabaseField field : dr.getFields()) {
      if (field instanceof ObjectRelationalDatabaseField) {
        ObjectRelationalDatabaseField ordtField=(ObjectRelationalDatabaseField)field;
        if (xrService.getOXSession().getDescriptor(ordtField.getType()) != null) {
          xrService.getXMLContext().createMarshaller().marshal(dr.get(field),rowElement);
          continue;
        }
      }
      Object fieldValue=dr.get(field);
      if (fieldValue != null) {
        if (fieldValue instanceof Calendar) {
          Calendar cValue=(Calendar)fieldValue;
          fieldValue=conversionManager.convertObject(cValue,STRING,DATE_TIME_QNAME);
        }
        if (fieldValue instanceof Date) {
          Date dValue=(Date)fieldValue;
          fieldValue=conversionManager.convertObject(dValue,STRING,DATE_QNAME);
        }
 else         if (fieldValue instanceof Time) {
          Time tValue=(Time)fieldValue;
          fieldValue=conversionManager.convertObject(tValue,STRING,TIME_QNAME);
        }
 else         if (fieldValue instanceof Timestamp) {
          Timestamp tsValue=(Timestamp)fieldValue;
          fieldValue=conversionManager.convertObject(tsValue,STRING,DATE_TIME_QNAME);
        }
 else         if (fieldValue instanceof Blob) {
          fieldValue=conversionManager.convertObject(fieldValue,ClassConstants.APBYTE);
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLESQLXML_STR)) {
          try {
            Class oracleSQLXML;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleSQLXML=AccessController.doPrivileged(new PrivilegedClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader()));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{}));
              fieldValue=AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleSQLXML=PrivilegedAccessHelper.getClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader());
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{});
              fieldValue=PrivilegedAccessHelper.invokeMethod(getStringMethod,fieldValue,new Object[]{});
            }
          }
 catch (          Exception x) {
          }
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLEOPAQUE_STR)) {
          try {
            Class oracleOPAQUE;
            Class xmlTypeFactoryClass;
            Constructor xmlTypeFactoryConstructor;
            Object xmlTypeFactory;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleOPAQUE=AccessController.doPrivileged(new PrivilegedClassForName(ORACLEOPAQUE_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryClass=AccessController.doPrivileged(new PrivilegedClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryConstructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(xmlTypeFactoryClass,new Class[0],true));
              xmlTypeFactory=AccessController.doPrivileged(new PrivilegedInvokeConstructor(xmlTypeFactoryConstructor,new Object[0]));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE}));
              fieldValue=AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleOPAQUE=PrivilegedAccessHelper.getClassForName(ORACLEOPAQUE_STR,false,this.getClass().getClassLoader());
              xmlTypeFactoryClass=PrivilegedAccessHelper.getClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader());
              xmlTypeFactoryConstructor=PrivilegedAccessHelper.getConstructorFor(xmlTypeFactoryClass,new Class[0],true);
              xmlTypeFactory=PrivilegedAccessHelper.invokeConstructor(xmlTypeFactoryConstructor,new Object[0]);
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE});
              fieldValue=PrivilegedAccessHelper.invokeMethod(getStringMethod,xmlTypeFactory,new Object[]{fieldValue});
            }
          }
 catch (          Exception x) {
          }
        }
        String elementName;
        if (field.getName() == null || (elementName=sqlToXmlName(field.getName())).equals(EMPTY_STR)) {
          elementName=RESULT_STR;
        }
        Element columnElement=TEMP_DOC.createElement(elementName);
        rowElement.appendChild(columnElement);
        String fieldValueString=fieldValue.toString();
        if (result.getType().equals(BASE_64_BINARY_QNAME)) {
          fieldValueString=Helper.buildHexStringFromBytes(Base64.base64Encode((byte[])fieldValue));
          columnElement.setAttributeNS(XMLNS_URL,XSD_STR,SCHEMA_URL);
          columnElement.setAttributeNS(XMLNS_URL,XSI_STR,SCHEMA_INSTANCE_URL);
          columnElement.setAttributeNS(SCHEMA_INSTANCE_URL,XSITYPE_STR,BASE64_BINARY_STR);
        }
        columnElement.appendChild(TEMP_DOC.createTextNode(fieldValueString));
      }
    }
    simpleXMLFormatModel.simpleXML.add(rowElement);
  }
  xmlRoot.setObject(simpleXMLFormatModel);
  return xmlRoot;
}"
63410,"public void initializeArguments(XRServiceAdapter xrService,QueryOperation queryOperation,DatabaseQuery databaseQuery){
}","@Override public void initializeArguments(XRServiceAdapter xrService,QueryOperation queryOperation,DatabaseQuery databaseQuery){
}"
63411,"@Override public Object getAttributeValueFromObject(Object object) throws DescriptorException {
  Object result=null;
  InputStream is=null;
  DataHandler dataHandler=(DataHandler)object;
  try {
    result=dataHandler.getContent();
    if (result instanceof InputStream) {
      is=(InputStream)result;
      byte[] buf=new byte[2048];
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      int bytesRead=is.read(buf);
      while (bytesRead >= 0) {
        baos.write(buf,0,bytesRead);
        bytesRead=is.read(buf);
      }
      result=baos.toByteArray();
    }
  }
 catch (  IOException e) {
  }
 finally {
    try {
      is.close();
    }
 catch (    IOException e) {
    }
  }
  return result;
}","@Override public Object getAttributeValueFromObject(Object object) throws DescriptorException {
  Object result=null;
  DataHandler dataHandler=(DataHandler)object;
  try {
    result=dataHandler.getContent();
    if (result instanceof InputStream) {
      try (InputStream is=(InputStream)result){
        byte[] buf=new byte[2048];
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        int bytesRead=is.read(buf);
        while (bytesRead >= 0) {
          baos.write(buf,0,bytesRead);
          bytesRead=is.read(buf);
        }
        result=baos.toByteArray();
      }
     }
  }
 catch (  IOException e) {
  }
  return result;
}"
63412,"@Override public void initialize(XRServiceAdapter xrService){
  super.initialize(xrService);
  if (queryHandler == null) {
    DatabaseQuery dq=xrService.getORSession().getQuery(name);
    if (dq != null) {
      queryHandler=new QueryHandler(){
        public void initializeDatabaseQuery(        XRServiceAdapter xrService,        QueryOperation queryOperation){
        }
        public void initializeArguments(        XRServiceAdapter xrService,        QueryOperation queryOperation,        DatabaseQuery databaseQuery){
        }
        public void initializeCall(        XRServiceAdapter xrService,        QueryOperation queryOperation,        DatabaseQuery databaseQuery){
        }
      }
;
      queryHandler.setDatabaseQuery(dq);
    }
  }
  if (queryHandler == null) {
    throw DBWSException.couldNotLocateQueryForSession(name,xrService.getORSession().getName());
  }
  queryHandler.initialize(xrService,this);
  Session oxSession=xrService.getOXSession();
  QName resultType=result == null ? null : result.getType();
  addSimpleXMLFormatModelDescriptor(xrService);
  addValueObjectDescriptor(xrService);
  if (resultType == null) {
    if (isAttachment()) {
      Attachment attachment=result.getAttachment();
      XMLDescriptor descriptor=(XMLDescriptor)oxSession.getProject().getClassDescriptor(DataHandler.class);
      if (descriptor == null) {
        descriptor=new XMLDescriptor();
        descriptor.setAlias(DATAHANDLER_STR);
        descriptor.setJavaClass(DataHandler.class);
        descriptor.setInstantiationPolicy(new DataHandlerInstantiationPolicy(attachment.getMimeType()));
        XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
        mapping.setAttributeName(RESULTS_STR);
        mapping.setAttributeAccessor(new AttributeAccessor(){
          @Override public Object getAttributeValueFromObject(          Object object) throws DescriptorException {
            Object result=null;
            InputStream is=null;
            DataHandler dataHandler=(DataHandler)object;
            try {
              result=dataHandler.getContent();
              if (result instanceof InputStream) {
                is=(InputStream)result;
                byte[] buf=new byte[2048];
                ByteArrayOutputStream baos=new ByteArrayOutputStream();
                int bytesRead=is.read(buf);
                while (bytesRead >= 0) {
                  baos.write(buf,0,bytesRead);
                  bytesRead=is.read(buf);
                }
                result=baos.toByteArray();
              }
            }
 catch (            IOException e) {
            }
 finally {
              try {
                is.close();
              }
 catch (              IOException e) {
              }
            }
            return result;
          }
          @Override public void setAttributeValueInObject(          Object object,          Object value) throws DescriptorException {
          }
        }
);
        mapping.setXPath(DEFAULT_SIMPLE_XML_FORMAT_TAG + SLASH_CHAR + DEFAULT_SIMPLE_XML_TAG+ ATTACHMENT_STR);
        mapping.setSwaRef(true);
        mapping.setShouldInlineBinaryData(false);
        mapping.setMimeType(attachment.getMimeType());
        descriptor.addMapping(mapping);
        NamespaceResolver nr=new NamespaceResolver();
        descriptor.setNamespaceResolver(nr);
        oxSession.getProject().addDescriptor(descriptor);
        ((DatabaseSessionImpl)oxSession).initializeDescriptorIfSessionAlive(descriptor);
        xrService.getXMLContext().storeXMLDescriptorByQName(descriptor);
      }
    }
  }
}","@Override public void initialize(XRServiceAdapter xrService){
  super.initialize(xrService);
  if (queryHandler == null) {
    DatabaseQuery dq=xrService.getORSession().getQuery(name);
    if (dq != null) {
      queryHandler=new QueryHandler(){
        @Override public void initializeDatabaseQuery(        XRServiceAdapter xrService,        QueryOperation queryOperation){
        }
        @Override public void initializeArguments(        XRServiceAdapter xrService,        QueryOperation queryOperation,        DatabaseQuery databaseQuery){
        }
        @Override public void initializeCall(        XRServiceAdapter xrService,        QueryOperation queryOperation,        DatabaseQuery databaseQuery){
        }
      }
;
      queryHandler.setDatabaseQuery(dq);
    }
  }
  if (queryHandler == null) {
    throw DBWSException.couldNotLocateQueryForSession(name,xrService.getORSession().getName());
  }
  queryHandler.initialize(xrService,this);
  Session oxSession=xrService.getOXSession();
  QName resultType=result == null ? null : result.getType();
  addSimpleXMLFormatModelDescriptor(xrService);
  addValueObjectDescriptor(xrService);
  if (resultType == null) {
    if (isAttachment()) {
      Attachment attachment=result.getAttachment();
      XMLDescriptor descriptor=(XMLDescriptor)oxSession.getProject().getClassDescriptor(DataHandler.class);
      if (descriptor == null) {
        descriptor=new XMLDescriptor();
        descriptor.setAlias(DATAHANDLER_STR);
        descriptor.setJavaClass(DataHandler.class);
        descriptor.setInstantiationPolicy(new DataHandlerInstantiationPolicy(attachment.getMimeType()));
        XMLBinaryDataMapping mapping=new XMLBinaryDataMapping();
        mapping.setAttributeName(RESULTS_STR);
        mapping.setAttributeAccessor(new AttributeAccessor(){
          @Override public Object getAttributeValueFromObject(          Object object) throws DescriptorException {
            Object result=null;
            DataHandler dataHandler=(DataHandler)object;
            try {
              result=dataHandler.getContent();
              if (result instanceof InputStream) {
                try (InputStream is=(InputStream)result){
                  byte[] buf=new byte[2048];
                  ByteArrayOutputStream baos=new ByteArrayOutputStream();
                  int bytesRead=is.read(buf);
                  while (bytesRead >= 0) {
                    baos.write(buf,0,bytesRead);
                    bytesRead=is.read(buf);
                  }
                  result=baos.toByteArray();
                }
               }
            }
 catch (            IOException e) {
            }
            return result;
          }
          @Override public void setAttributeValueInObject(          Object object,          Object value) throws DescriptorException {
          }
        }
);
        mapping.setXPath(DEFAULT_SIMPLE_XML_FORMAT_TAG + SLASH_CHAR + DEFAULT_SIMPLE_XML_TAG+ ATTACHMENT_STR);
        mapping.setSwaRef(true);
        mapping.setShouldInlineBinaryData(false);
        mapping.setMimeType(attachment.getMimeType());
        descriptor.addMapping(mapping);
        NamespaceResolver nr=new NamespaceResolver();
        descriptor.setNamespaceResolver(nr);
        oxSession.getProject().addDescriptor(descriptor);
        ((DatabaseSessionImpl)oxSession).initializeDescriptorIfSessionAlive(descriptor);
        xrService.getXMLContext().storeXMLDescriptorByQName(descriptor);
      }
    }
  }
}"
63413,"public void initializeDatabaseQuery(XRServiceAdapter xrService,QueryOperation queryOperation){
}","@Override public void initializeDatabaseQuery(XRServiceAdapter xrService,QueryOperation queryOperation){
}"
63414,"public void testJtaDataSource() throws Exception {
  if (!shouldRunPureJdbcTests) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (!serverSession.getLogin().shouldUseExternalTransactionController()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  TransactionManager mngr=((JTATransactionController)serverSession.getExternalTransactionController()).getTransactionManager();
  DataSource jtaDs=((JNDIConnector)serverSession.getLogin().getConnector()).getDataSource();
  Properties props=new Properties();
  props.setProperty(OracleConnection.PROXY_USER_NAME,System.getProperty(""String_Node_Str""));
  mngr.begin();
  Connection conn=jtaDs.getConnection();
  OracleConnection oracleConn;
  if (conn instanceof OracleConnection) {
    oracleConn=(OracleConnection)conn;
  }
 else {
    oracleConn=(OracleConnection)serverSession.getServerPlatform().unwrapConnection(conn);
  }
  oracleConn.openProxySession(OracleConnection.PROXYTYPE_USER_NAME,props);
  System.out.println(""String_Node_Str"");
  mngr.rollback();
  mngr.begin();
  conn=jtaDs.getConnection();
  if (conn instanceof OracleConnection) {
    oracleConn=(OracleConnection)conn;
  }
 else {
    oracleConn=(OracleConnection)serverSession.getServerPlatform().unwrapConnection(conn);
  }
  try {
    if (oracleConn.isProxySession()) {
      oracleConn.close(OracleConnection.PROXY_SESSION);
      fail(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
  }
  finally {
    try {
      conn.close();
    }
 catch (    SQLException ex) {
    }
    mngr.rollback();
    System.out.println(""String_Node_Str"");
  }
}","public void testJtaDataSource() throws Exception {
  if (!shouldRunPureJdbcTests) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (!serverSession.getLogin().shouldUseExternalTransactionController()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  TransactionManager mngr=((JTATransactionController)serverSession.getExternalTransactionController()).getTransactionManager();
  DataSource jtaDs=((JNDIConnector)serverSession.getLogin().getConnector()).getDataSource();
  Properties props=new Properties();
  props.setProperty(OracleConnection.PROXY_USER_NAME,System.getProperty(""String_Node_Str""));
  mngr.begin();
  Connection conn=jtaDs.getConnection();
  OracleConnection oracleConn;
  if (conn instanceof OracleConnection) {
    oracleConn=(OracleConnection)conn;
  }
 else {
    oracleConn=(OracleConnection)serverSession.getServerPlatform().unwrapConnection(conn);
  }
  oracleConn.openProxySession(OracleConnection.PROXYTYPE_USER_NAME,props);
  oracleConn.setAutoCommit(false);
  System.out.println(""String_Node_Str"");
  mngr.rollback();
  mngr.begin();
  conn=jtaDs.getConnection();
  if (conn instanceof OracleConnection) {
    oracleConn=(OracleConnection)conn;
  }
 else {
    oracleConn=(OracleConnection)serverSession.getServerPlatform().unwrapConnection(conn);
  }
  try {
    if (oracleConn.isProxySession()) {
      oracleConn.close(OracleConnection.PROXY_SESSION);
      fail(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
  }
  finally {
    try {
      conn.close();
    }
 catch (    SQLException ex) {
    }
    mngr.rollback();
    System.out.println(""String_Node_Str"");
  }
}"
63415,"/** 
 * INTERNAL: Applies customization to connection. Called only if connection is not already customized (isActive()==false). The method may throw SQLException wrapped into DatabaseException. isActive method called after this method should return true only in case the connection was actually customized.
 */
public void customize(){
  if (proxyProperties == null) {
    buildProxyProperties();
  }
  Connection connection=accessor.getConnection();
  if (connection instanceof OracleConnection) {
    oracleConnection=(OracleConnection)connection;
  }
 else {
    connection=session.getServerPlatform().unwrapConnection(connection);
    if (connection instanceof OracleConnection) {
      oracleConnection=(OracleConnection)connection;
    }
 else {
      throw ValidationException.oracleJDBC10_1_0_2ProxyConnectorRequiresOracleConnection();
    }
  }
  try {
    clearConnectionCache();
    Object[] args=null;
    if (this.session.shouldLog(SessionLog.FINEST,SessionLog.CONNECTION)) {
      Properties logProperties=proxyProperties;
      if (proxyProperties.containsKey(OracleConnection.PROXY_USER_PASSWORD)) {
        logProperties=(Properties)proxyProperties.clone();
        logProperties.setProperty(OracleConnection.PROXY_USER_PASSWORD,""String_Node_Str"");
      }
      args=new Object[]{oracleConnection,logProperties};
    }
    if (oracleConnection.isProxySession()) {
      try {
        if (args != null) {
          ((AbstractSession)this.session).log(SessionLog.FINEST,SessionLog.CONNECTION,""String_Node_Str"",args);
        }
        oracleConnection.close(OracleConnection.PROXY_SESSION);
      }
 catch (      SQLException exception) {
        this.session.getSessionLog().logThrowable(SessionLog.WARNING,SessionLog.CONNECTION,exception);
      }
    }
    oracleConnection.openProxySession(proxyType,proxyProperties);
    if (args != null) {
      ((AbstractSession)this.session).log(SessionLog.FINEST,SessionLog.CONNECTION,""String_Node_Str"",args);
    }
  }
 catch (  SQLException exception) {
    oracleConnection=null;
    throw DatabaseException.sqlException(exception);
  }
catch (  NoSuchMethodError noSuchMethodError) {
    oracleConnection=null;
    throw ValidationException.oracleJDBC10_1_0_2ProxyConnectorRequiresOracleConnectionVersion();
  }
}","/** 
 * INTERNAL: Applies customization to connection. Called only if connection is not already customized (isActive()==false). The method may throw SQLException wrapped into DatabaseException. isActive method called after this method should return true only in case the connection was actually customized.
 */
public void customize(){
  if (proxyProperties == null) {
    buildProxyProperties();
  }
  Connection connection=accessor.getConnection();
  if (connection instanceof OracleConnection) {
    oracleConnection=(OracleConnection)connection;
  }
 else {
    connection=session.getServerPlatform().unwrapConnection(connection);
    if (connection instanceof OracleConnection) {
      oracleConnection=(OracleConnection)connection;
    }
 else {
      throw ValidationException.oracleJDBC10_1_0_2ProxyConnectorRequiresOracleConnection();
    }
  }
  try {
    clearConnectionCache();
    Object[] args=null;
    if (this.session.shouldLog(SessionLog.FINEST,SessionLog.CONNECTION)) {
      Properties logProperties=proxyProperties;
      if (proxyProperties.containsKey(OracleConnection.PROXY_USER_PASSWORD)) {
        logProperties=(Properties)proxyProperties.clone();
        logProperties.setProperty(OracleConnection.PROXY_USER_PASSWORD,""String_Node_Str"");
      }
      args=new Object[]{oracleConnection,logProperties};
    }
    if (oracleConnection.isProxySession()) {
      try {
        if (args != null) {
          ((AbstractSession)this.session).log(SessionLog.FINEST,SessionLog.CONNECTION,""String_Node_Str"",args);
        }
        oracleConnection.close(OracleConnection.PROXY_SESSION);
      }
 catch (      SQLException exception) {
        this.session.getSessionLog().logThrowable(SessionLog.WARNING,SessionLog.CONNECTION,exception);
      }
    }
    oracleConnection.openProxySession(proxyType,proxyProperties);
    oracleConnection.setAutoCommit(false);
    if (args != null) {
      ((AbstractSession)this.session).log(SessionLog.FINEST,SessionLog.CONNECTION,""String_Node_Str"",args);
    }
  }
 catch (  SQLException exception) {
    oracleConnection=null;
    throw DatabaseException.sqlException(exception);
  }
catch (  NoSuchMethodError noSuchMethodError) {
    oracleConnection=null;
    throw ValidationException.oracleJDBC10_1_0_2ProxyConnectorRequiresOracleConnectionVersion();
  }
}"
63416,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    NodeValue unmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != unmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (unmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)unmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      try {
        if (isIncludedInAttributeGroup) {
          unmarshalNodeValue.endElement(xPathFragment,this);
        }
 else {
          resetStringBuffer();
        }
      }
 catch (      EclipseLinkException e) {
        if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
          throw e;
        }
 else {
          SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
          xmlReader.getErrorHandler().warning(saxParseException);
        }
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (textNode.isWhitespaceAware()) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping() && isXsiNil) {
              Object nullValue=((DirectMapping)mapping).getNullValue();
              if (!(Constants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
 else {
              textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
            }
            isXsiNil=false;
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping() && !isXsiNil && ((DirectMapping)mapping).getNullPolicy().isNullRepresentedByXsiNil()) {
              removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
            }
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if ((null != xPathFragment && xPathFragment.nameIsText()) || (xpathNodeIsMixedContent && xPathNode.getParent() != null)) {
      xPathNode=xPathNode.getParent();
    }
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue && xPathNodeUnmarshalNodeValue.isContainerValue()) {
      predictedNextXPathNode=xPathNode;
    }
 else {
      predictedNextXPathNode=xPathNode.getNextNode();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=parentRecord;
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      Locator locator=xmlReader.getLocator();
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    NodeValue unmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != unmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (unmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)unmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      try {
        if (isIncludedInAttributeGroup) {
          unmarshalNodeValue.endElement(xPathFragment,this);
        }
 else {
          resetStringBuffer();
        }
      }
 catch (      EclipseLinkException e) {
        if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
          throw e;
        }
 else {
          SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
          xmlReader.getErrorHandler().warning(saxParseException);
        }
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (textNode.isWhitespaceAware()) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping() && isNil()) {
              Object nullValue=((DirectMapping)mapping).getNullValue();
              if (!(Constants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
 else {
              textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
            }
            setNil(false);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping() && !isNil() && ((DirectMapping)mapping).getNullPolicy().isNullRepresentedByXsiNil()) {
              removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
            }
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if ((null != xPathFragment && xPathFragment.nameIsText()) || (xpathNodeIsMixedContent && xPathNode.getParent() != null)) {
      xPathNode=xPathNode.getParent();
    }
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue && xPathNodeUnmarshalNodeValue.isContainerValue()) {
      predictedNextXPathNode=xPathNode;
    }
 else {
      predictedNextXPathNode=xPathNode.getNextNode();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (isNil() && levelIndex > 0) {
      setNil(false);
    }
    if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=parentRecord;
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      Locator locator=xmlReader.getLocator();
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}"
63417,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (currentObject == null) {
    initializeRecord(atts);
  }
  XPathFragment xPathNodeXPathFragment=xPathNode.getXPathFragment();
  if ((null != xPathNodeXPathFragment && xPathNodeXPathFragment.nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (xPathNodeUnmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)xPathNodeUnmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      if (isIncludedInAttributeGroup) {
        xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
        if (xPathNode.getParent() != null) {
          xPathNode=xPathNode.getParent();
        }
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=null;
    if (null != predictedNextXPathNode) {
      XPathFragment xpf=predictedNextXPathNode.getXPathFragment();
      if (null != xpf && xPathNode == predictedNextXPathNode.getParent() && (localName == xpf.getLocalName() || localName.equals(xpf.getLocalName())) && (namespaceURI == xpf.getNamespaceURI() || namespaceURI.equals(xpf.getNamespaceURI())) && null == xpf.getPredicate() && !xpf.containsIndex()) {
        updateXPathFragment(qName,localName,namespaceURI);
        node=predictedNextXPathNode;
      }
    }
    if (null == node) {
      node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    }
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      String xsiNilValue=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
      if (xsiNilValue != null) {
        isXsiNil=xsiNilValue.equals(Constants.BOOLEAN_STRING_TRUE) || xsiNilValue.equals(""String_Node_Str"");
      }
      if (node.getNullCapableValue() != null) {
        getNullCapableValues().add(node.getNullCapableValue());
      }
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        boolean isIncludedInAttributeGroup=true;
        if (nodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)nodeValue).getMapping();
          isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
        }
        if (!isIncludedInAttributeGroup || !nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if (qname != null) {
              int qnameLength=qname.length();
              if (qnameLength > 0) {
                int idx=qname.indexOf(Constants.COLON);
                if (idx > 0) {
                  attLocalName=qname.substring(idx + 1,qnameLength);
                  String attPrefix=qname.substring(0,idx);
                  if (attPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
 else {
                  attLocalName=qname;
                  if (attLocalName.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                if (attributeNodeValue.isMappingNodeValue()) {
                  Mapping mapping=((MappingNodeValue)attributeNodeValue).getMapping();
                  if (!unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName())) {
                    continue;
                  }
                }
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (currentObject == null) {
    initializeRecord(atts);
  }
  XPathFragment xPathNodeXPathFragment=xPathNode.getXPathFragment();
  if ((null != xPathNodeXPathFragment && xPathNodeXPathFragment.nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (xPathNodeUnmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)xPathNodeUnmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      if (isIncludedInAttributeGroup) {
        xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
        if (xPathNode.getParent() != null) {
          xPathNode=xPathNode.getParent();
        }
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=null;
    if (null != predictedNextXPathNode) {
      XPathFragment xpf=predictedNextXPathNode.getXPathFragment();
      if (null != xpf && xPathNode == predictedNextXPathNode.getParent() && (localName == xpf.getLocalName() || localName.equals(xpf.getLocalName())) && (namespaceURI == xpf.getNamespaceURI() || namespaceURI.equals(xpf.getNamespaceURI())) && null == xpf.getPredicate() && !xpf.containsIndex()) {
        updateXPathFragment(qName,localName,namespaceURI);
        node=predictedNextXPathNode;
      }
    }
    if (null == node) {
      node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    }
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      String xsiNilValue=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
      if (xsiNilValue != null) {
        setNil(xsiNilValue.equals(Constants.BOOLEAN_STRING_TRUE) || xsiNilValue.equals(""String_Node_Str""));
      }
      if (node.getNullCapableValue() != null) {
        getNullCapableValues().add(node.getNullCapableValue());
      }
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        boolean isIncludedInAttributeGroup=true;
        if (nodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)nodeValue).getMapping();
          isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
        }
        if (!isIncludedInAttributeGroup || !nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if (qname != null) {
              int qnameLength=qname.length();
              if (qnameLength > 0) {
                int idx=qname.indexOf(Constants.COLON);
                if (idx > 0) {
                  attLocalName=qname.substring(idx + 1,qnameLength);
                  String attPrefix=qname.substring(0,idx);
                  if (attPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
 else {
                  attLocalName=qname;
                  if (attLocalName.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                if (attributeNodeValue.isMappingNodeValue()) {
                  Mapping mapping=((MappingNodeValue)attributeNodeValue).getMapping();
                  if (!unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName())) {
                    continue;
                  }
                }
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
63418,"public void endUnmappedElement(String namespaceURI,String localName,String qName) throws SAXException {
  typeQName=null;
  levelIndex--;
  if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
    endDocument();
    UnmarshalRecord pRec=parentRecord;
    while (pRec.isSelfRecord()) {
      pRec=pRec.getParentRecord();
    }
    pRec.endElement(namespaceURI,localName,qName);
    xmlReader.setContentHandler(pRec);
    xmlReader.setLexicalHandler(pRec);
  }
}","public void endUnmappedElement(String namespaceURI,String localName,String qName) throws SAXException {
  typeQName=null;
  levelIndex--;
  if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
    endDocument();
    UnmarshalRecord pRec=parentRecord;
    while (pRec.isSelfRecord()) {
      pRec=pRec.getParentRecord();
    }
    pRec.endElement(namespaceURI,localName,qName);
    xmlReader.setContentHandler(pRec);
    xmlReader.setLexicalHandler(pRec);
  }
  setNil(false);
}"
63419,"FlushModeProp(){
  super(EntityManagerProperties.PERSISTENCE_CONTEXT_FLUSH_MODE,FlushModeType.AUTO.toString());
  valueArray=new Object[]{FlushModeType.AUTO.toString(),FlushModeType.COMMIT.toString()};
}","FlushModeProp(){
  super(EntityManagerProperties.PERSISTENCE_CONTEXT_FLUSH_MODE,""String_Node_Str"");
  valueArray=new Object[]{""String_Node_Str"",""String_Node_Str""};
}"
63420,"public SDOXMLHelperDelegate(HelperContext aContext,ClassLoader aClassLoader){
  aHelperContext=aContext;
  loader=new SDOClassLoader(aClassLoader,aContext);
  xmlMarshallerMap=new WeakHashMap<Thread,XMLMarshaller>();
  xmlUnmarshallerMap=new WeakHashMap<Thread,XMLUnmarshaller>();
}","public SDOXMLHelperDelegate(HelperContext aContext,ClassLoader aClassLoader){
  aHelperContext=aContext;
  loader=new SDOClassLoader(aClassLoader,aContext);
  xmlMarshallerMap=Collections.synchronizedMap(new WeakHashMap<Thread,XMLMarshaller>());
  xmlUnmarshallerMap=Collections.synchronizedMap(new WeakHashMap<Thread,XMLUnmarshaller>());
}"
63421,"/** 
 * Add the StructConverters that were specified by annotation on the DatabasePlatform This method must be called after the DatabasePlatform has been detected
 * @param session
 * @param structConverters
 */
public void addStructConverters(){
  if (this.compositeMemberEmSetupImpls == null) {
    for (    StructConverter structConverter : structConverters) {
      if (session.getPlatform().getTypeConverters().get(structConverter.getJavaType()) != null) {
        throw ValidationException.twoStructConvertersAddedForSameClass(structConverter.getJavaType().getName());
      }
      session.getPlatform().addStructConverter(structConverter);
    }
  }
 else {
    for (    EntityManagerSetupImpl compositeMemberEmSetupImpl : this.compositeMemberEmSetupImpls) {
      if (!compositeMemberEmSetupImpl.structConverters.isEmpty()) {
        String compositeMemberPuName=compositeMemberEmSetupImpl.getPersistenceUnitInfo().getPersistenceUnitName();
        compositeMemberEmSetupImpl.session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{""String_Node_Str"",compositeMemberPuName,state});
        compositeMemberEmSetupImpl.addStructConverters();
        compositeMemberEmSetupImpl.session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{""String_Node_Str"",compositeMemberPuName,state});
      }
    }
  }
}","/** 
 * Add the StructConverters that were specified by annotation on the DatabasePlatform This method must be called after the DatabasePlatform has been detected
 */
public void addStructConverters(){
  if (this.compositeMemberEmSetupImpls == null) {
    for (    StructConverter structConverter : structConverters) {
      if (session.getPlatform().getTypeConverters().get(structConverter.getJavaType()) != null) {
        throw ValidationException.twoStructConvertersAddedForSameClass(structConverter.getJavaType().getName());
      }
      session.getPlatform().addStructConverter(structConverter);
    }
  }
 else {
    for (    EntityManagerSetupImpl compositeMemberEmSetupImpl : this.compositeMemberEmSetupImpls) {
      if (!compositeMemberEmSetupImpl.structConverters.isEmpty()) {
        String compositeMemberPuName=compositeMemberEmSetupImpl.getPersistenceUnitInfo().getPersistenceUnitName();
        compositeMemberEmSetupImpl.session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{""String_Node_Str"",compositeMemberPuName,state});
        compositeMemberEmSetupImpl.addStructConverters();
        compositeMemberEmSetupImpl.session.log(SessionLog.FINEST,SessionLog.PROPERTIES,""String_Node_Str"",new Object[]{""String_Node_Str"",compositeMemberPuName,state});
      }
    }
  }
}"
63422,"/** 
 * Deploy a persistence session and return an EntityManagerFactory. Deployment takes a session that was partially created in the predeploy call and makes it whole. This means doing any configuration that requires the real class definitions for the entities.  In the predeploy phase we were in a stage where we were not let allowed to load the real classes. Deploy could be called several times - but only the first call does the actual deploying - additional calls allow to update session properties (in case the session is not connected). Note that there is no need to synchronize deploy method - it doesn't alter factoryCount and while deploy is executed no other method can alter the current state (predeploy call would just increment factoryCount; undeploy call would not drop factoryCount to 0). However precautions should be taken to handle concurrent calls to deploy, because those may alter the current state or connect the session.
 * @param realClassLoader The class loader that was used to load the entity classes. This loaderwill be maintained for the lifespan of the loaded classes.
 * @param additionalProperties added to persistence unit properties for updateServerSession overriding existing properties.In JSE case it allows to alter properties in main (as opposed to preMain where preDeploy is called).
 * @return An EntityManagerFactory to be used by the Container to obtain EntityManagers
 */
public AbstractSession deploy(ClassLoader realClassLoader,Map additionalProperties){
  if (this.state != STATE_PREDEPLOYED && this.state != STATE_DEPLOYED && this.state != STATE_HALF_DEPLOYED) {
    if (mustBeCompositeMember()) {
      throw new PersistenceException(EntityManagerSetupException.compositeMemberCannotBeUsedStandalone(this.persistenceUnitInfo.getPersistenceUnitName()));
    }
    throw new PersistenceException(EntityManagerSetupException.cannotDeployWithoutPredeploy(this.persistenceUnitInfo.getPersistenceUnitName(),this.state,this.persistenceException));
  }
  this.session.log(SessionLog.FINEST,SessionLog.JPA,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),this.session.getName(),this.state,this.factoryCount});
  ClassLoader classLoaderToUse=realClassLoader;
  if (additionalProperties.containsKey(PersistenceUnitProperties.CLASSLOADER)) {
    classLoaderToUse=(ClassLoader)additionalProperties.get(PersistenceUnitProperties.CLASSLOADER);
  }
 else   if ((this.processor != null) && (this.processor.getProject() != null) && (this.processor.getProject().hasVirtualClasses())&& (this.state == STATE_PREDEPLOYED)&& (!(classLoaderToUse instanceof DynamicClassLoader))) {
    classLoaderToUse=new DynamicClassLoader(classLoaderToUse);
  }
  boolean isLockAcquired=false;
  try {
    Map deployProperties=mergeMaps(additionalProperties,this.persistenceUnitInfo.getProperties());
    updateTunerPreDeploy(deployProperties,classLoaderToUse);
    translateOldProperties(deployProperties,this.session);
    if (isComposite()) {
      updateCompositeMembersProperties(deployProperties);
    }
    if (this.state == STATE_PREDEPLOYED) {
      this.deployLock.acquire();
      isLockAcquired=true;
      if (this.state == STATE_PREDEPLOYED) {
        if (this.shouldBuildProject && !this.isSessionLoadedFromSessionsXML) {
          if (isComposite()) {
            deployCompositeMembers(deployProperties,classLoaderToUse);
          }
 else {
            if (this.processor.getMetadataSource() != null) {
              Map metadataProperties=this.processor.getMetadataSource().getPropertyOverrides(deployProperties,classLoaderToUse,this.session.getSessionLog());
              if (metadataProperties != null && !metadataProperties.isEmpty()) {
                translateOldProperties(metadataProperties,this.session);
                deployProperties=mergeMaps(metadataProperties,deployProperties);
              }
            }
            this.processor.setClassLoader(classLoaderToUse);
            this.processor.createDynamicClasses();
            if (classLoaderToUse instanceof DynamicClassLoader) {
              this.processor.createRestInterfaces();
            }
            this.processor.addEntityListeners();
            if (this.projectCacheAccessor != null) {
              this.projectCacheAccessor.storeProject(this.session.getProject(),deployProperties,this.session.getSessionLog());
            }
            this.session.getProject().convertClassNamesToClasses(classLoaderToUse);
            if (!isCompositeMember()) {
              addBeanValidationListeners(deployProperties,classLoaderToUse);
            }
            this.processor.processCustomizers();
          }
          this.processor=null;
        }
 else {
          this.session.getProject().convertClassNamesToClasses(classLoaderToUse);
          if (!this.shouldBuildProject) {
            if (!isCompositeMember()) {
              addBeanValidationListeners(deployProperties,classLoaderToUse);
            }
            processDescriptorsFromCachedProject(classLoaderToUse);
          }
        }
        finishProcessingDescriptorEvents(classLoaderToUse);
        this.structConverters=getStructConverters(classLoaderToUse);
        updateRemote(deployProperties,classLoaderToUse);
        initSession();
        if (this.session.getIntegrityChecker().hasErrors()) {
          this.session.handleException(new IntegrityException(session.getIntegrityChecker()));
        }
        this.session.getDatasourcePlatform().getConversionManager().setLoader(classLoaderToUse);
        this.state=STATE_HALF_DEPLOYED;
      }
 else {
        this.deployLock.release();
        isLockAcquired=false;
        if (this.state == STATE_DEPLOY_FAILED) {
          throw persistenceException;
        }
      }
    }
    if (!isCompositeMember()) {
      if (this.session.isDatabaseSession() && !((DatabaseSessionImpl)session).isLoggedIn()) {
        if (!isLockAcquired) {
          this.deployLock.acquire();
          isLockAcquired=true;
        }
        if (!((DatabaseSessionImpl)this.session).isLoggedIn()) {
          if (this.state == STATE_DEPLOY_FAILED) {
            throw persistenceException;
          }
          this.session.setProperties(deployProperties);
          updateSession(deployProperties,classLoaderToUse);
          if (isValidationOnly(deployProperties,false)) {
            if (this.state == STATE_HALF_DEPLOYED) {
              getDatabaseSession().initializeDescriptors();
              this.state=STATE_DEPLOYED;
            }
          }
 else {
            try {
              updateTunerDeploy(deployProperties,classLoaderToUse);
              updateFreeMemory(deployProperties);
              if (this.isSessionLoadedFromSessionsXML) {
                getDatabaseSession().login();
              }
 else {
                login(getDatabaseSession(),deployProperties,requiresConnection);
              }
              DatabasePlatform platform=getDatabaseSession().getPlatform();
              PropertiesUtils.set(platform,PersistenceUnitProperties.TARGET_DATABASE_PROPERTIES,(String)deployProperties.get(PersistenceUnitProperties.TARGET_DATABASE_PROPERTIES));
              if (this.session.hasExternalTransactionController()) {
                if (this.session.getExternalTransactionController().getExceptionHandler() == null) {
                  this.session.getExternalTransactionController().setExceptionHandler(new ExceptionHandler(){
                    public Object handleException(                    RuntimeException exception){
                      if (exception instanceof org.eclipse.persistence.exceptions.OptimisticLockException) {
                        throw new OptimisticLockException(exception);
                      }
 else                       if (exception instanceof EclipseLinkException) {
                        throw new PersistenceException(exception);
                      }
 else {
                        throw exception;
                      }
                    }
                  }
);
                }
              }
              this.state=STATE_DEPLOYED;
            }
 catch (            Throwable loginException) {
              if (this.state == STATE_HALF_DEPLOYED) {
                if (this.session.isConnected()) {
                  try {
                    getDatabaseSession().logout();
                  }
 catch (                  Throwable logoutException) {
                  }
                  this.state=STATE_DEPLOY_FAILED;
                }
              }
              throw loginException;
            }
            if (!this.isSessionLoadedFromSessionsXML) {
              addStructConverters();
            }
            writeDDL(deployProperties,getDatabaseSession(deployProperties),classLoaderToUse);
          }
        }
        updateTunerPostDeploy(deployProperties,classLoaderToUse);
        this.deployLock.release();
        isLockAcquired=false;
      }
      try {
        this.getMetamodel(classLoaderToUse);
      }
 catch (      Exception e) {
        this.session.log(SessionLog.FINEST,SessionLog.METAMODEL,""String_Node_Str"",new Object[]{e.getMessage()});
      }
    }
    if (this.weaver != null) {
      this.weaver.clear();
      this.weaver=null;
    }
    return this.session;
  }
 catch (  Throwable exception) {
    if (this.state == STATE_PREDEPLOYED) {
      this.state=STATE_DEPLOY_FAILED;
    }
    PersistenceException persistenceEx;
    if (this.state == STATE_DEPLOY_FAILED) {
      if (exception == persistenceException) {
        persistenceEx=new PersistenceException(EntityManagerSetupException.cannotDeployWithoutPredeploy(this.persistenceUnitInfo.getPersistenceUnitName(),this.state,this.persistenceException));
      }
 else {
        persistenceEx=createDeployFailedPersistenceException(exception);
      }
    }
 else {
      if (exception instanceof PersistenceException) {
        persistenceEx=(PersistenceException)exception;
      }
 else {
        persistenceEx=new PersistenceException(exception);
      }
    }
    if (isLockAcquired) {
      this.deployLock.release();
    }
    this.session.logThrowable(SessionLog.SEVERE,SessionLog.EJB,exception);
    throw persistenceEx;
  }
 finally {
    this.session.log(SessionLog.FINEST,SessionLog.JPA,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),this.session.getName(),this.state,this.factoryCount});
  }
}","/** 
 * Deploy a persistence session and return an EntityManagerFactory. Deployment takes a session that was partially created in the predeploy call and makes it whole. This means doing any configuration that requires the real class definitions for the entities.  In the predeploy phase we were in a stage where we were not let allowed to load the real classes. Deploy could be called several times - but only the first call does the actual deploying - additional calls allow to update session properties (in case the session is not connected). Note that there is no need to synchronize deploy method - it doesn't alter factoryCount and while deploy is executed no other method can alter the current state (predeploy call would just increment factoryCount; undeploy call would not drop factoryCount to 0). However precautions should be taken to handle concurrent calls to deploy, because those may alter the current state or connect the session.
 * @param realClassLoader The class loader that was used to load the entity classes. This loaderwill be maintained for the lifespan of the loaded classes.
 * @param additionalProperties added to persistence unit properties for updateServerSession overriding existing properties.In JSE case it allows to alter properties in main (as opposed to preMain where preDeploy is called).
 * @return An EntityManagerFactory to be used by the Container to obtain EntityManagers
 */
public AbstractSession deploy(ClassLoader realClassLoader,Map additionalProperties){
  if (this.state != STATE_PREDEPLOYED && this.state != STATE_DEPLOYED && this.state != STATE_HALF_DEPLOYED) {
    if (mustBeCompositeMember()) {
      throw new PersistenceException(EntityManagerSetupException.compositeMemberCannotBeUsedStandalone(this.persistenceUnitInfo.getPersistenceUnitName()));
    }
    throw new PersistenceException(EntityManagerSetupException.cannotDeployWithoutPredeploy(this.persistenceUnitInfo.getPersistenceUnitName(),this.state,this.persistenceException));
  }
  this.session.log(SessionLog.FINEST,SessionLog.JPA,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),this.session.getName(),this.state,this.factoryCount});
  ClassLoader classLoaderToUse=realClassLoader;
  if (additionalProperties.containsKey(PersistenceUnitProperties.CLASSLOADER)) {
    classLoaderToUse=(ClassLoader)additionalProperties.get(PersistenceUnitProperties.CLASSLOADER);
  }
 else   if ((this.processor != null) && (this.processor.getProject() != null) && (this.processor.getProject().hasVirtualClasses())&& (this.state == STATE_PREDEPLOYED)&& (!(classLoaderToUse instanceof DynamicClassLoader))) {
    classLoaderToUse=new DynamicClassLoader(classLoaderToUse);
  }
  boolean isLockAcquired=false;
  try {
    Map deployProperties=mergeMaps(additionalProperties,this.persistenceUnitInfo.getProperties());
    updateTunerPreDeploy(deployProperties,classLoaderToUse);
    translateOldProperties(deployProperties,this.session);
    if (isComposite()) {
      updateCompositeMembersProperties(deployProperties);
    }
    if (this.state == STATE_PREDEPLOYED) {
      this.deployLock.acquire();
      isLockAcquired=true;
      if (this.state == STATE_PREDEPLOYED) {
        if (this.shouldBuildProject && !this.isSessionLoadedFromSessionsXML) {
          if (isComposite()) {
            deployCompositeMembers(deployProperties,classLoaderToUse);
          }
 else {
            if (this.processor.getMetadataSource() != null) {
              Map metadataProperties=this.processor.getMetadataSource().getPropertyOverrides(deployProperties,classLoaderToUse,this.session.getSessionLog());
              if (metadataProperties != null && !metadataProperties.isEmpty()) {
                translateOldProperties(metadataProperties,this.session);
                deployProperties=mergeMaps(metadataProperties,deployProperties);
              }
            }
            this.processor.setClassLoader(classLoaderToUse);
            this.processor.createDynamicClasses();
            if (classLoaderToUse instanceof DynamicClassLoader) {
              this.processor.createRestInterfaces();
            }
            this.processor.addEntityListeners();
            if (this.projectCacheAccessor != null) {
              this.projectCacheAccessor.storeProject(this.session.getProject(),deployProperties,this.session.getSessionLog());
            }
            this.session.getProject().convertClassNamesToClasses(classLoaderToUse);
            if (!isCompositeMember()) {
              addBeanValidationListeners(deployProperties,classLoaderToUse);
            }
            this.processor.processCustomizers();
          }
          this.processor=null;
        }
 else {
          this.session.getProject().convertClassNamesToClasses(classLoaderToUse);
          if (!this.shouldBuildProject) {
            if (!isCompositeMember()) {
              addBeanValidationListeners(deployProperties,classLoaderToUse);
            }
            processDescriptorsFromCachedProject(classLoaderToUse);
          }
        }
        finishProcessingDescriptorEvents(classLoaderToUse);
        this.structConverters=getStructConverters(classLoaderToUse);
        updateRemote(deployProperties,classLoaderToUse);
        initSession();
        if (this.session.getIntegrityChecker().hasErrors()) {
          this.session.handleException(new IntegrityException(session.getIntegrityChecker()));
        }
        this.session.getDatasourcePlatform().getConversionManager().setLoader(classLoaderToUse);
        this.state=STATE_HALF_DEPLOYED;
      }
 else {
        this.deployLock.release();
        isLockAcquired=false;
        if (this.state == STATE_DEPLOY_FAILED) {
          throw persistenceException;
        }
      }
    }
    if (!isCompositeMember()) {
      if (this.session.isDatabaseSession() && !((DatabaseSessionImpl)session).isLoggedIn()) {
        if (!isLockAcquired) {
          this.deployLock.acquire();
          isLockAcquired=true;
        }
        if (!((DatabaseSessionImpl)this.session).isLoggedIn()) {
          if (this.state == STATE_DEPLOY_FAILED) {
            throw persistenceException;
          }
          this.session.setProperties(deployProperties);
          updateSession(deployProperties,classLoaderToUse);
          if (isValidationOnly(deployProperties,false)) {
            if (this.state == STATE_HALF_DEPLOYED) {
              getDatabaseSession().initializeDescriptors();
              this.state=STATE_DEPLOYED;
            }
          }
 else {
            try {
              updateTunerDeploy(deployProperties,classLoaderToUse);
              updateFreeMemory(deployProperties);
              if (this.isSessionLoadedFromSessionsXML) {
                getDatabaseSession().login();
              }
 else {
                login(getDatabaseSession(),deployProperties,requiresConnection);
              }
              final Platform platform=getDatabaseSession().getDatasourcePlatform();
              PropertiesUtils.set(platform,PersistenceUnitProperties.TARGET_DATABASE_PROPERTIES,(String)deployProperties.get(PersistenceUnitProperties.TARGET_DATABASE_PROPERTIES));
              if (this.session.hasExternalTransactionController()) {
                if (this.session.getExternalTransactionController().getExceptionHandler() == null) {
                  this.session.getExternalTransactionController().setExceptionHandler(new ExceptionHandler(){
                    public Object handleException(                    RuntimeException exception){
                      if (exception instanceof org.eclipse.persistence.exceptions.OptimisticLockException) {
                        throw new OptimisticLockException(exception);
                      }
 else                       if (exception instanceof EclipseLinkException) {
                        throw new PersistenceException(exception);
                      }
 else {
                        throw exception;
                      }
                    }
                  }
);
                }
              }
              this.state=STATE_DEPLOYED;
            }
 catch (            Throwable loginException) {
              if (this.state == STATE_HALF_DEPLOYED) {
                if (this.session.isConnected()) {
                  try {
                    getDatabaseSession().logout();
                  }
 catch (                  Throwable logoutException) {
                  }
                  this.state=STATE_DEPLOY_FAILED;
                }
              }
              throw loginException;
            }
            if (!this.isSessionLoadedFromSessionsXML) {
              addStructConverters();
            }
            writeDDL(deployProperties,getDatabaseSession(deployProperties),classLoaderToUse);
          }
        }
        updateTunerPostDeploy(deployProperties,classLoaderToUse);
        this.deployLock.release();
        isLockAcquired=false;
      }
      try {
        this.getMetamodel(classLoaderToUse);
      }
 catch (      Exception e) {
        this.session.log(SessionLog.FINEST,SessionLog.METAMODEL,""String_Node_Str"",new Object[]{e.getMessage()});
      }
    }
    if (this.weaver != null) {
      this.weaver.clear();
      this.weaver=null;
    }
    return this.session;
  }
 catch (  Throwable exception) {
    if (this.state == STATE_PREDEPLOYED) {
      this.state=STATE_DEPLOY_FAILED;
    }
    PersistenceException persistenceEx;
    if (this.state == STATE_DEPLOY_FAILED) {
      if (exception == persistenceException) {
        persistenceEx=new PersistenceException(EntityManagerSetupException.cannotDeployWithoutPredeploy(this.persistenceUnitInfo.getPersistenceUnitName(),this.state,this.persistenceException));
      }
 else {
        persistenceEx=createDeployFailedPersistenceException(exception);
      }
    }
 else {
      if (exception instanceof PersistenceException) {
        persistenceEx=(PersistenceException)exception;
      }
 else {
        persistenceEx=new PersistenceException(exception);
      }
    }
    if (isLockAcquired) {
      this.deployLock.release();
    }
    this.session.logThrowable(SessionLog.SEVERE,SessionLog.EJB,exception);
    throw persistenceEx;
  }
 finally {
    this.session.log(SessionLog.FINEST,SessionLog.JPA,""String_Node_Str"",new Object[]{getPersistenceUnitInfo().getPersistenceUnitName(),this.session.getName(),this.state,this.factoryCount});
  }
}"
63423,"/** 
 * Normally when a property is missing nothing should be applied to the session. However there are several session attributes that defaulted in EJB3 to the values different from EclipseLink defaults. This function applies defaults for such properties and registers the session. All other session-related properties are applied in updateServerSession. Note that updateSession may be called several times on the same session (before login), but initSession is called just once - before the first call to updateSession.
 * @param properties the persistence unit properties.
 */
protected void initSession(){
  assignCMP3Policy();
  if (!isCompositeMember()) {
    addSessionToGlobalSessionManager();
  }
}","/** 
 * Normally when a property is missing nothing should be applied to the session. However there are several session attributes that defaulted in EJB3 to the values different from EclipseLink defaults. This function applies defaults for such properties and registers the session. All other session-related properties are applied in updateServerSession. Note that updateSession may be called several times on the same session (before login), but initSession is called just once - before the first call to updateSession.
 */
protected void initSession(){
  assignCMP3Policy();
  if (!isCompositeMember()) {
    addSessionToGlobalSessionManager();
  }
}"
63424,"/** 
 * As of EclipseLink 2.6.0 this returns Java SE 7- compatible provider by default on Java SE 7 and Java SE 8+ compatible provider if Java SE 8+ is detected.
 * @return default provider responsible for creating Java SE specific implementationsof  {@link IndirectCollection}s
 */
private static IndirectCollectionsProvider getProvider(){
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      final Class support=(Class)AccessController.doPrivileged(new PrivilegedClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader()));
      return AccessController.doPrivileged(new PrivilegedAction<IndirectCollectionsProvider>(){
        @Override public IndirectCollectionsProvider run(){
          try {
            return (IndirectCollectionsProvider)support.newInstance();
          }
 catch (          InstantiationException|IllegalAccessException ex) {
            throw new RuntimeException(ex);
          }
        }
      }
);
    }
 else {
      Class support=PrivilegedAccessHelper.getClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader());
      return (IndirectCollectionsProvider)PrivilegedAccessHelper.newInstanceFromClass(support);
    }
  }
 catch (  Throwable t) {
    AbstractSessionLog.getLog().logThrowable(SessionLog.FINEST,SessionLog.MISC,t);
  }
  return new DefaultProvider();
}","/** 
 * As of EclipseLink 2.6.0 this returns Java SE 7- compatible provider by default on Java SE 7 and Java SE 8+ compatible provider if Java SE 8+ is detected.
 * @return default provider responsible for creating Java SE specific implementationsof  {@link IndirectCollection}s
 */
private static IndirectCollectionsProvider getProvider(){
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      final Class support=(Class)AccessController.doPrivileged(new PrivilegedClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader()));
      return AccessController.doPrivileged(new PrivilegedAction<IndirectCollectionsProvider>(){
        @Override public IndirectCollectionsProvider run(){
          try {
            return (IndirectCollectionsProvider)support.newInstance();
          }
 catch (          InstantiationException|IllegalAccessException ex) {
            throw new RuntimeException(ex);
          }
        }
      }
);
    }
 else {
      Class support=PrivilegedAccessHelper.getClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader());
      return (IndirectCollectionsProvider)PrivilegedAccessHelper.newInstanceFromClass(support);
    }
  }
 catch (  Throwable t) {
    AbstractSessionLog.getLog().finest(""String_Node_Str"");
  }
  return new DefaultProvider();
}"
63425,"/** 
 * {@inheritDoc}
 */
@Override public Object buildAttributeResponse(PersistenceContext context,Map<String,Object> queryParams,String attribute,Object results,UriInfo uriInfo){
  if (results instanceof Collection) {
    if (containsDomainObjects(results)) {
      List<Object> items=(Vector)results;
      if ((items != null) && (!items.isEmpty())) {
        ReadAllQueryResultCollection response=new ReadAllQueryResultCollection();
        response.setItems(items);
        response.setCount(items.size());
        return populatePagedCollectionLinks(queryParams,uriInfo,response);
      }
    }
  }
  return results;
}","/** 
 * {@inheritDoc}
 */
@Override public Object buildAttributeResponse(PersistenceContext context,Map<String,Object> queryParams,String attribute,Object results,UriInfo uriInfo){
  if (results instanceof Collection) {
    if (containsDomainObjects(results)) {
      final List<Object> items=(Vector)results;
      if ((items != null) && (!items.isEmpty())) {
        ReadAllQueryResultCollection response=new ReadAllQueryResultCollection();
        response.setItems(items);
        return populatePagedCollectionLinks(queryParams,uriInfo,response);
      }
    }
  }
  return results;
}"
63426,"private PageableCollection populatePagedCollectionLinks(Map<String,Object> queryParams,UriInfo uriInfo,PageableCollection resultCollection){
  final ItemLinksBuilder itemLinksBuilder=new ItemLinksBuilder();
  int limit=Integer.parseInt((String)queryParams.get(QueryParameters.JPARS_PAGING_LIMIT));
  int offset=Integer.parseInt((String)queryParams.get(QueryParameters.JPARS_PAGING_OFFSET));
  String nextOffset;
  String prevOffset;
  if (limit > offset) {
    nextOffset=String.valueOf(limit);
    prevOffset=NO_PREVIOUS_CHUNK;
  }
 else {
    nextOffset=String.valueOf(limit + offset);
    prevOffset=String.valueOf(offset - limit);
  }
  UriBuilder uriBuilder;
  if (resultCollection.getCount() != null) {
    int actualCount=resultCollection.getCount();
    if (actualCount >= limit) {
      uriBuilder=UriBuilder.fromUri(uriInfo.getRequestUri());
      uriBuilder.replaceQueryParam(QueryParameters.JPARS_PAGING_OFFSET,nextOffset);
      itemLinksBuilder.addNext(uriBuilder.build().toString());
      resultCollection.setHasMore(true);
    }
 else {
      resultCollection.setHasMore(false);
    }
  }
  if (!NO_PREVIOUS_CHUNK.equals(prevOffset)) {
    uriBuilder=UriBuilder.fromUri(uriInfo.getRequestUri());
    uriBuilder.replaceQueryParam(QueryParameters.JPARS_PAGING_OFFSET,prevOffset);
    itemLinksBuilder.addPrev(uriBuilder.build().toString());
  }
  itemLinksBuilder.addSelf(uriInfo.getRequestUri().toString());
  resultCollection.setLinks(itemLinksBuilder.build().getLinks());
  resultCollection.setOffset(offset);
  resultCollection.setLimit(limit);
  return resultCollection;
}","private PageableCollection populatePagedCollectionLinks(Map<String,Object> queryParams,UriInfo uriInfo,PageableCollection resultCollection){
  final ItemLinksBuilder itemLinksBuilder=new ItemLinksBuilder();
  final int limit=Integer.parseInt((String)queryParams.get(QueryParameters.JPARS_PAGING_LIMIT));
  final int offset=Integer.parseInt((String)queryParams.get(QueryParameters.JPARS_PAGING_OFFSET));
  final UriBuilder uriBuilder=UriBuilder.fromUri(uriInfo.getRequestUri());
  if (resultCollection.getItems() != null) {
    final int actualCount=resultCollection.getItems().size();
    if (actualCount > limit) {
      resultCollection.getItems().remove(actualCount - 1);
      resultCollection.setCount(actualCount - 1);
      uriBuilder.replaceQueryParam(QueryParameters.JPARS_PAGING_OFFSET,String.valueOf(limit + offset));
      itemLinksBuilder.addNext(uriBuilder.build().toString());
      resultCollection.setHasMore(true);
    }
 else {
      resultCollection.setHasMore(false);
      resultCollection.setCount(actualCount);
    }
  }
 else {
    resultCollection.setCount(0);
  }
  if (offset != 0) {
    if (offset > limit) {
      uriBuilder.replaceQueryParam(QueryParameters.JPARS_PAGING_OFFSET,String.valueOf(offset - limit));
    }
 else {
      uriBuilder.replaceQueryParam(QueryParameters.JPARS_PAGING_OFFSET,""String_Node_Str"");
    }
    itemLinksBuilder.addPrev(uriBuilder.build().toString());
  }
  itemLinksBuilder.addSelf(uriInfo.getRequestUri().toString());
  resultCollection.setLinks(itemLinksBuilder.build().getLinks());
  resultCollection.setOffset(offset);
  resultCollection.setLimit(limit);
  return resultCollection;
}"
63427,"/** 
 * {@inheritDoc}
 */
@Override public Object buildReadAllQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object> items,UriInfo uriInfo){
  ReadAllQueryResultCollection response=new ReadAllQueryResultCollection();
  for (  Object item : items) {
    response.addItem(populatePagedReadAllQueryItemLinks(context,item));
  }
  response.setCount(items.size());
  return populatePagedCollectionLinks(queryParams,uriInfo,response);
}","/** 
 * {@inheritDoc}
 */
@Override public Object buildReadAllQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object> items,UriInfo uriInfo){
  ReadAllQueryResultCollection response=new ReadAllQueryResultCollection();
  for (  Object item : items) {
    response.addItem(populatePagedReadAllQueryItemLinks(context,item));
  }
  return populatePagedCollectionLinks(queryParams,uriInfo,response);
}"
63428,"protected Response findAttributeInternal(String version,String persistenceUnit,String type,String id,String attribute,HttpHeaders headers,UriInfo uriInfo){
  JPARSLogger.entering(CLASS_NAME,""String_Node_Str"",new Object[]{""String_Node_Str"",version,persistenceUnit,type,id,attribute,uriInfo.getRequestUri().toASCIIString()});
  EntityManager em=null;
  try {
    PersistenceContext context=getPersistenceContext(persistenceUnit,type,uriInfo.getBaseUri(),version,null);
    Object entityId=IdHelper.buildId(context,type,id);
    em=context.getEmf().createEntityManager(getMatrixParameters(uriInfo,persistenceUnit));
    Object entity=em.find(context.getClass(type),entityId,getQueryParameters(uriInfo));
    DatabaseSession serverSession=context.getServerSession();
    ClassDescriptor descriptor=serverSession.getClassDescriptor(context.getClass(type));
    if (descriptor == null) {
      throw JPARSException.classOrClassDescriptorCouldNotBeFoundForEntity(type,persistenceUnit);
    }
    DatabaseMapping attributeMapping=descriptor.getMappingForAttributeName(attribute);
    if ((attributeMapping == null) || (entity == null)) {
      throw JPARSException.databaseMappingCouldNotBeFoundForEntityAttribute(attribute,type,id,persistenceUnit);
    }
    if (!attributeMapping.isCollectionMapping()) {
      Object result=attributeMapping.getRealAttributeValueFromAttribute(attributeMapping.getAttributeValueFromObject(entity),entity,(AbstractSession)serverSession);
      if (result == null) {
        JPARSLogger.error(""String_Node_Str"",new Object[]{attribute,type,id,persistenceUnit});
        throw JPARSException.attributeCouldNotBeFoundForEntity(attribute,type,id,persistenceUnit);
      }
      final FeatureResponseBuilder responseBuilder=context.getSupportedFeatureSet().getResponseBuilder(Feature.NO_PAGING);
      return findAttributeResponse(context,attribute,type,id,persistenceUnit,result,getQueryParameters(uriInfo),headers,uriInfo,responseBuilder);
    }
    ReadQuery query=(ReadQuery)((((ForeignReferenceMapping)attributeMapping).getSelectionQuery()).clone());
    if (query == null) {
      throw JPARSException.selectionQueryForAttributeCouldNotBeFoundForEntity(attribute,type,id,persistenceUnit);
    }
    final FeatureSet featureSet=context.getSupportedFeatureSet();
    final AbstractSession clientSession=context.getClientSession(em);
    if (featureSet.isSupported(Feature.PAGING)) {
      final PageableFieldValidator validator=new PageableFieldValidator(entity.getClass(),attribute,uriInfo);
      if (validator.isFeatureApplicable()) {
        query.setMaxRows(validator.getLimit() + validator.getOffset());
        query.setFirstResult(validator.getOffset());
        final Map<String,Object> queryParams=getQueryParameters(uriInfo);
        queryParams.put(QueryParameters.JPARS_PAGING_LIMIT,String.valueOf(validator.getLimit()));
        queryParams.put(QueryParameters.JPARS_PAGING_OFFSET,String.valueOf(validator.getOffset()));
        checkOrderBy(query);
        final Object result=clientSession.executeQuery(query,descriptor.getObjectBuilder().buildRow(entity,clientSession,WriteType.INSERT));
        final FeatureResponseBuilder responseBuilder=context.getSupportedFeatureSet().getResponseBuilder(Feature.PAGING);
        return findAttributeResponse(context,attribute,type,id,persistenceUnit,result,queryParams,headers,uriInfo,responseBuilder);
      }
    }
    final Object result=clientSession.executeQuery(query,descriptor.getObjectBuilder().buildRow(entity,clientSession,WriteType.INSERT));
    final FeatureResponseBuilder responseBuilder=context.getSupportedFeatureSet().getResponseBuilder(Feature.NO_PAGING);
    return findAttributeResponse(context,attribute,type,id,persistenceUnit,result,getQueryParameters(uriInfo),headers,uriInfo,responseBuilder);
  }
 catch (  Exception ex) {
    throw JPARSException.exceptionOccurred(ex);
  }
 finally {
    if (em != null) {
      if (em.isOpen()) {
        em.close();
      }
    }
  }
}","protected Response findAttributeInternal(String version,String persistenceUnit,String type,String id,String attribute,HttpHeaders headers,UriInfo uriInfo){
  JPARSLogger.entering(CLASS_NAME,""String_Node_Str"",new Object[]{""String_Node_Str"",version,persistenceUnit,type,id,attribute,uriInfo.getRequestUri().toASCIIString()});
  EntityManager em=null;
  try {
    PersistenceContext context=getPersistenceContext(persistenceUnit,type,uriInfo.getBaseUri(),version,null);
    Object entityId=IdHelper.buildId(context,type,id);
    em=context.getEmf().createEntityManager(getMatrixParameters(uriInfo,persistenceUnit));
    Object entity=em.find(context.getClass(type),entityId,getQueryParameters(uriInfo));
    DatabaseSession serverSession=context.getServerSession();
    ClassDescriptor descriptor=serverSession.getClassDescriptor(context.getClass(type));
    if (descriptor == null) {
      throw JPARSException.classOrClassDescriptorCouldNotBeFoundForEntity(type,persistenceUnit);
    }
    DatabaseMapping attributeMapping=descriptor.getMappingForAttributeName(attribute);
    if ((attributeMapping == null) || (entity == null)) {
      throw JPARSException.databaseMappingCouldNotBeFoundForEntityAttribute(attribute,type,id,persistenceUnit);
    }
    if (!attributeMapping.isCollectionMapping()) {
      Object result=attributeMapping.getRealAttributeValueFromAttribute(attributeMapping.getAttributeValueFromObject(entity),entity,(AbstractSession)serverSession);
      if (result == null) {
        JPARSLogger.error(""String_Node_Str"",new Object[]{attribute,type,id,persistenceUnit});
        throw JPARSException.attributeCouldNotBeFoundForEntity(attribute,type,id,persistenceUnit);
      }
      final FeatureResponseBuilder responseBuilder=context.getSupportedFeatureSet().getResponseBuilder(Feature.NO_PAGING);
      return findAttributeResponse(context,attribute,type,id,persistenceUnit,result,getQueryParameters(uriInfo),headers,uriInfo,responseBuilder);
    }
    ReadQuery query=(ReadQuery)((((ForeignReferenceMapping)attributeMapping).getSelectionQuery()).clone());
    if (query == null) {
      throw JPARSException.selectionQueryForAttributeCouldNotBeFoundForEntity(attribute,type,id,persistenceUnit);
    }
    final FeatureSet featureSet=context.getSupportedFeatureSet();
    final AbstractSession clientSession=context.getClientSession(em);
    if (featureSet.isSupported(Feature.PAGING)) {
      final PageableFieldValidator validator=new PageableFieldValidator(entity.getClass(),attribute,uriInfo);
      if (validator.isFeatureApplicable()) {
        query.setMaxRows(validator.getLimit() + validator.getOffset() + 1);
        query.setFirstResult(validator.getOffset());
        final Map<String,Object> queryParams=getQueryParameters(uriInfo);
        queryParams.put(QueryParameters.JPARS_PAGING_LIMIT,String.valueOf(validator.getLimit()));
        queryParams.put(QueryParameters.JPARS_PAGING_OFFSET,String.valueOf(validator.getOffset()));
        checkOrderBy(query);
        final Object result=clientSession.executeQuery(query,descriptor.getObjectBuilder().buildRow(entity,clientSession,WriteType.INSERT));
        final FeatureResponseBuilder responseBuilder=context.getSupportedFeatureSet().getResponseBuilder(Feature.PAGING);
        return findAttributeResponse(context,attribute,type,id,persistenceUnit,result,queryParams,headers,uriInfo,responseBuilder);
      }
    }
    final Object result=clientSession.executeQuery(query,descriptor.getObjectBuilder().buildRow(entity,clientSession,WriteType.INSERT));
    final FeatureResponseBuilder responseBuilder=context.getSupportedFeatureSet().getResponseBuilder(Feature.NO_PAGING);
    return findAttributeResponse(context,attribute,type,id,persistenceUnit,result,getQueryParameters(uriInfo),headers,uriInfo,responseBuilder);
  }
 catch (  Exception ex) {
    throw JPARSException.exceptionOccurred(ex);
  }
 finally {
    if (em != null) {
      if (em.isOpen()) {
        em.close();
      }
    }
  }
}"
63429,"private Response processPageableQuery(PersistenceContext context,String queryName,DatabaseQuery dbQuery,Query query,HttpHeaders headers,UriInfo uriInfo){
  final PageableQueryValidator validator=new PageableQueryValidator(context,queryName,uriInfo);
  if (validator.isFeatureApplicable()) {
    query.setFirstResult(validator.getOffset());
    query.setMaxResults(validator.getLimit());
    return namedQueryResponse(context,queryName,dbQuery,query,headers,uriInfo,new PagingResponseBuilder());
  }
 else {
    return namedQueryResponse(context,queryName,dbQuery,query,headers,uriInfo,new SelfLinksResponseBuilder());
  }
}","private Response processPageableQuery(PersistenceContext context,String queryName,DatabaseQuery dbQuery,Query query,HttpHeaders headers,UriInfo uriInfo){
  final PageableQueryValidator validator=new PageableQueryValidator(context,queryName,uriInfo);
  if (validator.isFeatureApplicable()) {
    query.setFirstResult(validator.getOffset());
    query.setMaxResults(validator.getLimit() + 1);
    return namedQueryResponse(context,queryName,dbQuery,query,headers,uriInfo,new PagingResponseBuilder());
  }
 else {
    return namedQueryResponse(context,queryName,dbQuery,query,headers,uriInfo,new SelfLinksResponseBuilder());
  }
}"
63430,"@SuppressWarnings(""String_Node_Str"") private Response namedQueryResponse(PersistenceContext context,String queryName,DatabaseQuery dbQuery,Query query,HttpHeaders headers,UriInfo uriInfo,FeatureResponseBuilder responseBuilder){
  final Map<String,Object> queryParams=getQueryParameters(uriInfo);
  if (query.getMaxResults() != Integer.MAX_VALUE) {
    queryParams.put(QueryParameters.JPARS_PAGING_LIMIT,String.valueOf(query.getMaxResults()));
    queryParams.put(QueryParameters.JPARS_PAGING_OFFSET,String.valueOf(query.getFirstResult()));
  }
  if (dbQuery instanceof ReportQuery) {
    List<ReportItem> reportItems=((ReportQuery)dbQuery).getItems();
    List<Object[]> queryResults=query.getResultList();
    if ((queryResults != null) && (!queryResults.isEmpty())) {
      Object list=responseBuilder.buildReportQueryResponse(context,queryParams,queryResults,reportItems,uriInfo);
      if (list != null) {
        return Response.ok(new StreamingOutputMarshaller(context,list,headers.getAcceptableMediaTypes())).build();
      }
 else {
        throw JPARSException.responseCouldNotBeBuiltForNamedQueryRequest(queryName,context.getName());
      }
    }
    return Response.ok(new StreamingOutputMarshaller(context,queryResults,headers.getAcceptableMediaTypes())).build();
  }
  List<Object> results=query.getResultList();
  if ((results != null) && (!results.isEmpty())) {
    Object list=responseBuilder.buildReadAllQueryResponse(context,queryParams,results,uriInfo);
    return Response.ok(new StreamingOutputMarshaller(context,list,headers.getAcceptableMediaTypes())).build();
  }
  return Response.ok(new StreamingOutputMarshaller(context,results,headers.getAcceptableMediaTypes())).build();
}","@SuppressWarnings(""String_Node_Str"") private Response namedQueryResponse(PersistenceContext context,String queryName,DatabaseQuery dbQuery,Query query,HttpHeaders headers,UriInfo uriInfo,FeatureResponseBuilder responseBuilder){
  final Map<String,Object> queryParams=getQueryParameters(uriInfo);
  if (query.getMaxResults() != Integer.MAX_VALUE) {
    queryParams.put(QueryParameters.JPARS_PAGING_LIMIT,String.valueOf(query.getMaxResults() - 1));
    queryParams.put(QueryParameters.JPARS_PAGING_OFFSET,String.valueOf(query.getFirstResult()));
  }
  if (dbQuery instanceof ReportQuery) {
    List<ReportItem> reportItems=((ReportQuery)dbQuery).getItems();
    List<Object[]> queryResults=query.getResultList();
    if ((queryResults != null) && (!queryResults.isEmpty())) {
      Object list=responseBuilder.buildReportQueryResponse(context,queryParams,queryResults,reportItems,uriInfo);
      if (list != null) {
        return Response.ok(new StreamingOutputMarshaller(context,list,headers.getAcceptableMediaTypes())).build();
      }
 else {
        throw JPARSException.responseCouldNotBeBuiltForNamedQueryRequest(queryName,context.getName());
      }
    }
    return Response.ok(new StreamingOutputMarshaller(context,queryResults,headers.getAcceptableMediaTypes())).build();
  }
  List<Object> results=query.getResultList();
  if ((results != null) && (!results.isEmpty())) {
    Object list=responseBuilder.buildReadAllQueryResponse(context,queryParams,results,uriInfo);
    return Response.ok(new StreamingOutputMarshaller(context,list,headers.getAcceptableMediaTypes())).build();
  }
  return Response.ok(new StreamingOutputMarshaller(context,results,headers.getAcceptableMediaTypes())).build();
}"
63431,"@Test public void testPageableFieldOffset() throws URISyntaxException {
  final Map<String,String> hints=new HashMap<>(1);
  hints.put(""String_Node_Str"",""String_Node_Str"");
  final String queryResult=RestUtils.restFindAttribute(context,1,Basket.class.getSimpleName(),""String_Node_Str"",null,hints,MediaType.APPLICATION_XML_TYPE);
  logger.info(queryResult);
  assertFalse(queryResult.contains(""String_Node_Str""));
  assertFalse(queryResult.contains(""String_Node_Str""));
  assertTrue(queryResult.contains(""String_Node_Str""));
  assertTrue(queryResult.contains(""String_Node_Str""));
  assertFalse(queryResult.contains(""String_Node_Str""));
  assertTrue(checkLinkXml(queryResult,""String_Node_Str"",""String_Node_Str"") || checkLinkXml(queryResult,""String_Node_Str"",""String_Node_Str""));
  assertFalse(queryResult.contains(""String_Node_Str""));
  checkItemsXml(queryResult,2,2,2,true);
}","@Test public void testPageableFieldOffset() throws URISyntaxException {
  final Map<String,String> hints=new HashMap<>(1);
  hints.put(""String_Node_Str"",""String_Node_Str"");
  final String queryResult=RestUtils.restFindAttribute(context,1,Basket.class.getSimpleName(),""String_Node_Str"",null,hints,MediaType.APPLICATION_XML_TYPE);
  logger.info(queryResult);
  assertFalse(queryResult.contains(""String_Node_Str""));
  assertFalse(queryResult.contains(""String_Node_Str""));
  assertTrue(queryResult.contains(""String_Node_Str""));
  assertTrue(queryResult.contains(""String_Node_Str""));
  assertFalse(queryResult.contains(""String_Node_Str""));
  assertTrue(checkLinkXml(queryResult,""String_Node_Str"",""String_Node_Str""));
  assertTrue(checkLinkXml(queryResult,""String_Node_Str"",""String_Node_Str""));
  checkItemsXml(queryResult,2,2,2,true);
}"
63432,"public TableDefinition buildCMP3_HINGETable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(15);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(false);
  fieldID.setUnique(false);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldDOOR_ID=new FieldDefinition();
  fieldDOOR_ID.setName(""String_Node_Str"");
  fieldDOOR_ID.setTypeName(""String_Node_Str"");
  fieldDOOR_ID.setSize(10);
  fieldDOOR_ID.setIsPrimaryKey(true);
  fieldDOOR_ID.setIsIdentity(false);
  fieldDOOR_ID.setUnique(false);
  fieldDOOR_ID.setShouldAllowNull(true);
  table.addField(fieldDOOR_ID);
  ForeignKeyConstraint foreignKeyCMP3_HINGE_CMP3_DOOR=new ForeignKeyConstraint();
  foreignKeyCMP3_HINGE_CMP3_DOOR.setName(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.setTargetTable(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addSourceField(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyCMP3_HINGE_CMP3_DOOR);
  return table;
}","public TableDefinition buildCMP3_HINGETable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(15);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(false);
  fieldID.setUnique(false);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldDOOR_ID=new FieldDefinition();
  fieldDOOR_ID.setName(""String_Node_Str"");
  fieldDOOR_ID.setTypeName(""String_Node_Str"");
  fieldDOOR_ID.setSize(10);
  fieldDOOR_ID.setIsPrimaryKey(true);
  fieldDOOR_ID.setIsIdentity(false);
  fieldDOOR_ID.setUnique(false);
  fieldDOOR_ID.setShouldAllowNull(false);
  table.addField(fieldDOOR_ID);
  ForeignKeyConstraint foreignKeyCMP3_HINGE_CMP3_DOOR=new ForeignKeyConstraint();
  foreignKeyCMP3_HINGE_CMP3_DOOR.setName(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.setTargetTable(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addSourceField(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyCMP3_HINGE_CMP3_DOOR);
  return table;
}"
63433,"/** 
 * INTERNAL: Print the SQL representation of the statement on a stream, storing the fields in the DatabaseCall.  This implementation works MaxRows and FirstResult into the SQL using DB2's ROWNUMBER() OVER() to filter values if shouldUseRownumFiltering is true.  
 */
@Override public void printSQLSelectStatement(DatabaseCall call,ExpressionSQLPrinter printer,SQLSelectStatement statement){
  int max=0;
  int firstRow=0;
  if (statement.getQuery() != null) {
    max=statement.getQuery().getMaxRows();
    firstRow=statement.getQuery().getFirstResult();
  }
  if (!(this.shouldUseRownumFiltering()) || (!(max > 0) && !(firstRow > 0))) {
    super.printSQLSelectStatement(call,printer,statement);
    return;
  }
 else   if (max > 0) {
    statement.setUseUniqueFieldAliases(true);
    printer.printString(""String_Node_Str"");
    printer.printString(""String_Node_Str"");
    call.setFields(statement.printSQL(printer));
    printer.printString(""String_Node_Str"");
    printer.printParameter(DatabaseCall.MAXROW_FIELD);
    printer.printString(""String_Node_Str"");
    printer.printParameter(DatabaseCall.FIRSTRESULT_FIELD);
  }
 else {
    statement.setUseUniqueFieldAliases(true);
    printer.printString(""String_Node_Str"");
    call.setFields(statement.printSQL(printer));
    printer.printString(""String_Node_Str"");
    printer.printParameter(DatabaseCall.FIRSTRESULT_FIELD);
  }
  call.setIgnoreFirstRowSetting(true);
  call.setIgnoreMaxResultsSetting(true);
}","/** 
 * INTERNAL: Print the SQL representation of the statement on a stream, storing the fields in the DatabaseCall.  This implementation works MaxRows and FirstResult into the SQL using DB2's ROWNUMBER() OVER() to filter values if shouldUseRownumFiltering is true.  
 */
@Override public void printSQLSelectStatement(DatabaseCall call,ExpressionSQLPrinter printer,SQLSelectStatement statement){
  int max=0;
  int firstRow=0;
  if (statement.getQuery() != null) {
    max=statement.getQuery().getMaxRows();
    firstRow=statement.getQuery().getFirstResult();
  }
  if (!(this.shouldUseRownumFiltering()) || (!(max > 0) && !(firstRow > 0))) {
    super.printSQLSelectStatement(call,printer,statement);
    statement.appendForUpdateClause(printer);
    return;
  }
 else   if (max > 0) {
    statement.setUseUniqueFieldAliases(true);
    printer.printString(""String_Node_Str"");
    printer.printString(""String_Node_Str"");
    call.setFields(statement.printSQL(printer));
    printer.printString(""String_Node_Str"");
    printer.printParameter(DatabaseCall.MAXROW_FIELD);
    printer.printString(""String_Node_Str"");
    printer.printParameter(DatabaseCall.FIRSTRESULT_FIELD);
    statement.appendForUpdateClause(printer);
  }
 else {
    statement.setUseUniqueFieldAliases(true);
    printer.printString(""String_Node_Str"");
    call.setFields(statement.printSQL(printer));
    printer.printString(""String_Node_Str"");
    printer.printParameter(DatabaseCall.FIRSTRESULT_FIELD);
    statement.appendForUpdateClause(printer);
  }
  call.setIgnoreFirstRowSetting(true);
  call.setIgnoreMaxResultsSetting(true);
}"
63434,"private EntityManagerFactory createContainerEntityManagerFactoryImpl(PersistenceUnitInfo info,Map properties,boolean requiresConnection){
  JavaSECMPInitializer.setIsInContainer(true);
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  EntityManagerSetupImpl emSetupImpl=null;
  if (EntityManagerSetupImpl.mustBeCompositeMember(info)) {
    emSetupImpl=new EntityManagerSetupImpl(info.getPersistenceUnitName(),info.getPersistenceUnitName());
    emSetupImpl.predeploy(info,nonNullProperties);
  }
 else {
    boolean isNew=false;
    ClassTransformer transformer=null;
    String uniqueName=PersistenceUnitProcessor.buildPersistenceUnitName(info.getPersistenceUnitRootUrl(),info.getPersistenceUnitName());
    String sessionName=EntityManagerSetupImpl.getOrBuildSessionName(nonNullProperties,info,uniqueName);
synchronized (EntityManagerFactoryProvider.emSetupImpls) {
      emSetupImpl=EntityManagerFactoryProvider.getEntityManagerSetupImpl(sessionName);
      if (emSetupImpl == null) {
        emSetupImpl=new EntityManagerSetupImpl(uniqueName,sessionName);
        isNew=true;
        emSetupImpl.setIsInContainerMode(true);
        transformer=emSetupImpl.predeploy(info,nonNullProperties);
        EntityManagerFactoryProvider.addEntityManagerSetupImpl(sessionName,emSetupImpl);
      }
    }
    if (!isNew) {
      if (!uniqueName.equals(emSetupImpl.getPersistenceUnitUniqueName())) {
        throw PersistenceUnitLoadingException.sessionNameAlreadyInUse(sessionName,uniqueName,emSetupImpl.getPersistenceUnitUniqueName());
      }
      boolean undeployed=false;
synchronized (emSetupImpl) {
        if (emSetupImpl.isUndeployed()) {
          undeployed=true;
        }
 else {
          transformer=emSetupImpl.predeploy(emSetupImpl.getPersistenceUnitInfo(),nonNullProperties);
        }
      }
      if (undeployed) {
        return createContainerEntityManagerFactory(info,properties);
      }
    }
    if (transformer != null) {
      info.addTransformer(transformer);
    }
  }
  EntityManagerFactoryImpl factory=null;
  try {
    factory=new EntityManagerFactoryImpl(emSetupImpl,nonNullProperties);
    emSetupImpl.setRequiresConnection(requiresConnection);
    emSetupImpl.preInitializeCanonicalMetamodel(factory);
    if (emSetupImpl.shouldGetSessionOnCreateFactory(nonNullProperties)) {
      factory.getDatabaseSession();
    }
    return factory;
  }
 catch (  RuntimeException ex) {
    if (factory != null) {
      factory.close();
    }
 else {
      emSetupImpl.undeploy();
    }
    throw ex;
  }
}","protected EntityManagerFactory createContainerEntityManagerFactoryImpl(PersistenceUnitInfo info,Map properties,boolean requiresConnection){
  JavaSECMPInitializer.setIsInContainer(true);
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  EntityManagerSetupImpl emSetupImpl=null;
  if (EntityManagerSetupImpl.mustBeCompositeMember(info)) {
    emSetupImpl=new EntityManagerSetupImpl(info.getPersistenceUnitName(),info.getPersistenceUnitName());
    emSetupImpl.predeploy(info,nonNullProperties);
  }
 else {
    boolean isNew=false;
    ClassTransformer transformer=null;
    String uniqueName=PersistenceUnitProcessor.buildPersistenceUnitName(info.getPersistenceUnitRootUrl(),info.getPersistenceUnitName());
    String sessionName=EntityManagerSetupImpl.getOrBuildSessionName(nonNullProperties,info,uniqueName);
synchronized (EntityManagerFactoryProvider.emSetupImpls) {
      emSetupImpl=EntityManagerFactoryProvider.getEntityManagerSetupImpl(sessionName);
      if (emSetupImpl == null) {
        emSetupImpl=new EntityManagerSetupImpl(uniqueName,sessionName);
        isNew=true;
        emSetupImpl.setIsInContainerMode(true);
        transformer=emSetupImpl.predeploy(info,nonNullProperties);
        EntityManagerFactoryProvider.addEntityManagerSetupImpl(sessionName,emSetupImpl);
      }
    }
    if (!isNew) {
      if (!uniqueName.equals(emSetupImpl.getPersistenceUnitUniqueName())) {
        throw PersistenceUnitLoadingException.sessionNameAlreadyInUse(sessionName,uniqueName,emSetupImpl.getPersistenceUnitUniqueName());
      }
      boolean undeployed=false;
synchronized (emSetupImpl) {
        if (emSetupImpl.isUndeployed()) {
          undeployed=true;
        }
 else {
          transformer=emSetupImpl.predeploy(emSetupImpl.getPersistenceUnitInfo(),nonNullProperties);
        }
      }
      if (undeployed) {
        return createContainerEntityManagerFactory(info,properties);
      }
    }
    if (transformer != null) {
      info.addTransformer(transformer);
    }
  }
  EntityManagerFactoryImpl factory=null;
  try {
    factory=new EntityManagerFactoryImpl(emSetupImpl,nonNullProperties);
    emSetupImpl.setRequiresConnection(requiresConnection);
    emSetupImpl.preInitializeCanonicalMetamodel(factory);
    if (emSetupImpl.shouldGetSessionOnCreateFactory(nonNullProperties)) {
      factory.getDatabaseSession();
    }
    return factory;
  }
 catch (  RuntimeException ex) {
    if (factory != null) {
      factory.close();
    }
 else {
      emSetupImpl.undeploy();
    }
    throw ex;
  }
}"
63435,"/** 
 * This test checks the situation there ComponentInvocationContext is not available. In this case ApplicationAccess class is used. Mocked ApplicationAccess is used here.
 */
public void testInitUsingApplicationAccess() throws Exception {
  final ApplicationAccessWLS appAccess=new ApplicationAccessWLS(){
    @Override public void initUsingCic() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
      throw new NoSuchMethodException();
    }
  }
;
  assertEquals(appAccess.getApplicationName(Thread.currentThread().getContextClassLoader()),""String_Node_Str"");
}","/** 
 * This test checks the situation there ComponentInvocationContext is not available. In this case ApplicationAccess class is used. Mocked ApplicationAccess is used here.
 */
public void testInitUsingApplicationAccess() throws Exception {
  final ApplicationAccessWLS appAccess=new ApplicationAccessWLS(){
    @Override public boolean initUsingCic(){
      return false;
    }
  }
;
  assertEquals(appAccess.getApplicationName(Thread.currentThread().getContextClassLoader()),""String_Node_Str"");
}"
63436,"@Override public void initUsingCic() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  throw new NoSuchMethodException();
}","@Override public boolean initUsingCic(){
  return false;
}"
63437,"/** 
 * Create and initialize.
 */
public ApplicationAccessWLS(){
  try {
    initUsingCic();
    LOGGER.fine(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"",e);
    cicManagerInstance=null;
    try {
      initUsingApplicationAccess();
      LOGGER.fine(""String_Node_Str"");
    }
 catch (    Exception ex) {
      LOGGER.log(Level.FINE,""String_Node_Str"",ex);
      applicationAccessInstance=null;
    }
  }
}","/** 
 * Create and initialize.
 */
public ApplicationAccessWLS(){
  if (initUsingCic()) {
    LOGGER.fine(""String_Node_Str"");
    return;
  }
  cicManagerInstance=null;
  if (initUsingApplicationAccess()) {
    LOGGER.fine(""String_Node_Str"");
    return;
  }
  applicationAccessInstance=null;
  LOGGER.fine(""String_Node_Str"");
}"
63438,"/** 
 * Initializes CIC.
 */
protected void initUsingCic() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  final Class cicManagerClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
  final Method getInstance=PrivilegedAccessHelper.getDeclaredMethod(cicManagerClass,""String_Node_Str"",new Class[]{});
  cicManagerInstance=PrivilegedAccessHelper.invokeMethod(getInstance,cicManagerClass);
  getCurrentCicMethod=PrivilegedAccessHelper.getMethod(cicManagerClass,""String_Node_Str"",new Class[]{},true);
  final Class cicClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
  getApplicationIdMethod=PrivilegedAccessHelper.getDeclaredMethod(cicClass,""String_Node_Str"",new Class[]{});
}","/** 
 * Initializes CIC. Returns true on success.
 */
protected boolean initUsingCic(){
  if (ApplicationAccessWLS.class.getClassLoader().getResource(CIC_MANAGER_CLASS_NAME) == null) {
    return false;
  }
  try {
    final Class cicManagerClass=PrivilegedAccessHelper.getClassForName(CIC_MANAGER_CLASS_NAME);
    final Method getInstance=PrivilegedAccessHelper.getDeclaredMethod(cicManagerClass,""String_Node_Str"",new Class[]{});
    cicManagerInstance=PrivilegedAccessHelper.invokeMethod(getInstance,cicManagerClass);
    getCurrentCicMethod=PrivilegedAccessHelper.getMethod(cicManagerClass,""String_Node_Str"",new Class[]{},true);
    final Class cicClass=PrivilegedAccessHelper.getClassForName(CIC_CLASS_NAME);
    getApplicationIdMethod=PrivilegedAccessHelper.getDeclaredMethod(cicClass,""String_Node_Str"",new Class[]{});
    return true;
  }
 catch (  ClassNotFoundException|NoSuchMethodException|InvocationTargetException|IllegalAccessException e) {
    LOGGER.log(Level.FINE,""String_Node_Str"",e);
    return false;
  }
}"
63439,"/** 
 * Initializes ApplicationAccess.
 */
protected void initUsingApplicationAccess() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  final Class applicationAccessClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
  final Method getApplicationAccessMethod=PrivilegedAccessHelper.getDeclaredMethod(applicationAccessClass,""String_Node_Str"",new Class[]{});
  applicationAccessInstance=PrivilegedAccessHelper.invokeMethod(getApplicationAccessMethod,applicationAccessClass);
  final Class[] methodParameterTypes=new Class[]{ClassLoader.class};
  getApplicationNameMethod=PrivilegedAccessHelper.getMethod(applicationAccessClass,""String_Node_Str"",methodParameterTypes,true);
  getApplicationVersionMethod=PrivilegedAccessHelper.getMethod(applicationAccessClass,""String_Node_Str"",methodParameterTypes,true);
}","/** 
 * Initializes ApplicationAccess.
 */
protected boolean initUsingApplicationAccess(){
  try {
    final Class applicationAccessClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
    final Method getApplicationAccessMethod=PrivilegedAccessHelper.getDeclaredMethod(applicationAccessClass,""String_Node_Str"",new Class[]{});
    applicationAccessInstance=PrivilegedAccessHelper.invokeMethod(getApplicationAccessMethod,applicationAccessClass);
    final Class[] methodParameterTypes=new Class[]{ClassLoader.class};
    getApplicationNameMethod=PrivilegedAccessHelper.getMethod(applicationAccessClass,""String_Node_Str"",methodParameterTypes,true);
    getApplicationVersionMethod=PrivilegedAccessHelper.getMethod(applicationAccessClass,""String_Node_Str"",methodParameterTypes,true);
    return true;
  }
 catch (  ClassNotFoundException|NoSuchMethodException|InvocationTargetException|IllegalAccessException ex) {
    LOGGER.log(Level.FINE,""String_Node_Str"",ex);
    return false;
  }
}"
63440,"public void testDescriptorsSize(){
  List descriptors=((org.eclipse.persistence.jaxb.JAXBContext)jaxbContext).getXMLContext().getSession(0).getProject().getOrderedDescriptors();
  assertEquals(1,descriptors.size());
}","public void testDescriptorsSize(){
  List<ClassDescriptor> descriptors=((org.eclipse.persistence.jaxb.JAXBContext)jaxbContext).getXMLContext().getSession(0).getProject().getOrderedDescriptors();
  assertEquals(2,descriptors.size());
}"
63441,"/** 
 * Return true if the two TypeMappingInfoObjects should generate the same complex type in the XSD
 */
private static boolean generatesSameComplexType(TypeMappingInfo tmi1,TypeMappingInfo tmi2,ClassLoader loader){
  org.eclipse.persistence.jaxb.xmlmodel.XmlElement element1=null;
  org.eclipse.persistence.jaxb.xmlmodel.XmlElement element2=null;
  if (tmi1.getXmlElement() != null) {
    element1=(org.eclipse.persistence.jaxb.xmlmodel.XmlElement)getXmlElement(tmi1.getXmlElement(),loader);
  }
  if (tmi2.getXmlElement() != null) {
    element2=(org.eclipse.persistence.jaxb.xmlmodel.XmlElement)getXmlElement(tmi2.getXmlElement(),loader);
  }
  Type actualType1=getActualType(tmi1,element1);
  Type actualType2=getActualType(tmi2,element2);
  if (!areTypesEqual(actualType1,actualType2)) {
    return false;
  }
  boolean isXmlList1=isXmlList(tmi1,element1);
  boolean isXmlList2=isXmlList(tmi2,element2);
  if (isXmlList1) {
    if (!isXmlList2) {
      return false;
    }
  }
 else   if (isXmlList2) {
    return false;
  }
  return true;
}","/** 
 * Return true if the two TypeMappingInfoObjects should generate the same complex type in the XSD
 */
private static boolean generatesSameComplexType(TypeMappingInfo tmi1,TypeMappingInfo tmi2,ClassLoader loader){
  org.eclipse.persistence.jaxb.xmlmodel.XmlElement element1=null;
  org.eclipse.persistence.jaxb.xmlmodel.XmlElement element2=null;
  if (tmi1.getXmlElement() != null) {
    element1=(org.eclipse.persistence.jaxb.xmlmodel.XmlElement)getXmlElement(tmi1.getXmlElement(),loader);
  }
  if (tmi2.getXmlElement() != null) {
    element2=(org.eclipse.persistence.jaxb.xmlmodel.XmlElement)getXmlElement(tmi2.getXmlElement(),loader);
  }
  Type actualType1=getActualType(tmi1,element1);
  Type actualType2=getActualType(tmi2,element2);
  if (!areTypesEqual(actualType1,actualType2)) {
    return false;
  }
  if (!hasSameClassName(tmi1,tmi2)) {
    return false;
  }
  boolean isXmlList1=isXmlList(tmi1,element1);
  boolean isXmlList2=isXmlList(tmi2,element2);
  if (isXmlList1) {
    if (!isXmlList2) {
      return false;
    }
  }
 else   if (isXmlList2) {
    return false;
  }
  return true;
}"
63442,"/** 
 * As of EclipseLink 2.6.0 this returns Java SE 7- compatible provider by default on Java SE 7 and Java SE 8+ compatible provider if Java SE 8+ is detected.
 * @return default provider responsible for creating Java SE specific implementationsof  {@link IndirectCollection}s
 */
private static IndirectCollectionsProvider getProvider(){
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      final Class support=(Class)AccessController.doPrivileged(new PrivilegedClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader()));
      return AccessController.doPrivileged(new PrivilegedAction<IndirectCollectionsProvider>(){
        @Override public IndirectCollectionsProvider run(){
          try {
            return (IndirectCollectionsProvider)support.newInstance();
          }
 catch (          InstantiationException|IllegalAccessException ex) {
            throw new RuntimeException(ex);
          }
        }
      }
);
    }
 else {
      Class support=PrivilegedAccessHelper.getClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader());
      return (IndirectCollectionsProvider)PrivilegedAccessHelper.newInstanceFromClass(support);
    }
  }
 catch (  Throwable t) {
    AbstractSessionLog.getLog().finest(""String_Node_Str"");
  }
  return new DefaultProvider();
}","/** 
 * As of EclipseLink 2.6.0 this returns Java SE 7- compatible provider by default on Java SE 7 and Java SE 8+ compatible provider if Java SE 8+ is detected.
 * @return default provider responsible for creating Java SE specific implementationsof  {@link IndirectCollection}s
 */
private static IndirectCollectionsProvider getProvider(){
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      final Class support=(Class)AccessController.doPrivileged(new PrivilegedClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader()));
      return AccessController.doPrivileged(new PrivilegedAction<IndirectCollectionsProvider>(){
        @Override public IndirectCollectionsProvider run(){
          try {
            return (IndirectCollectionsProvider)support.newInstance();
          }
 catch (          InstantiationException|IllegalAccessException ex) {
            throw new RuntimeException(ex);
          }
        }
      }
);
    }
 else {
      Class support=PrivilegedAccessHelper.getClassForName(JDK8_SUPPORT_PROVIDER,true,IndirectCollectionsFactory.class.getClassLoader());
      return (IndirectCollectionsProvider)PrivilegedAccessHelper.newInstanceFromClass(support);
    }
  }
 catch (  Throwable t) {
    SessionLogEntry sle=new SessionLogEntry(null,t);
    sle.setMessage(""String_Node_Str"");
    sle.setLevel(SessionLog.FINEST);
    sle.setNameSpace(SessionLog.MISC);
    sle.setDate(null);
    AbstractSessionLog.getLog().log(sle);
  }
  return new DefaultProvider();
}"
63443,"public TableDefinition buildCMP3_HINGETable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(15);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(false);
  fieldID.setUnique(false);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldDOOR_ID=new FieldDefinition();
  fieldDOOR_ID.setName(""String_Node_Str"");
  fieldDOOR_ID.setTypeName(""String_Node_Str"");
  fieldDOOR_ID.setSize(10);
  fieldDOOR_ID.setIsPrimaryKey(true);
  fieldDOOR_ID.setIsIdentity(false);
  fieldDOOR_ID.setUnique(false);
  fieldDOOR_ID.setShouldAllowNull(false);
  table.addField(fieldDOOR_ID);
  ForeignKeyConstraint foreignKeyCMP3_HINGE_CMP3_DOOR=new ForeignKeyConstraint();
  foreignKeyCMP3_HINGE_CMP3_DOOR.setName(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.setTargetTable(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addSourceField(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyCMP3_HINGE_CMP3_DOOR);
  return table;
}","public TableDefinition buildCMP3_HINGETable(){
  TableDefinition table=new TableDefinition();
  table.setName(""String_Node_Str"");
  FieldDefinition fieldID=new FieldDefinition();
  fieldID.setName(""String_Node_Str"");
  fieldID.setTypeName(""String_Node_Str"");
  fieldID.setSize(15);
  fieldID.setIsPrimaryKey(true);
  fieldID.setIsIdentity(false);
  fieldID.setUnique(false);
  fieldID.setShouldAllowNull(false);
  table.addField(fieldID);
  FieldDefinition fieldDOOR_ID=new FieldDefinition();
  fieldDOOR_ID.setName(""String_Node_Str"");
  fieldDOOR_ID.setTypeName(""String_Node_Str"");
  fieldDOOR_ID.setSize(15);
  fieldDOOR_ID.setIsPrimaryKey(true);
  fieldDOOR_ID.setIsIdentity(false);
  fieldDOOR_ID.setUnique(false);
  fieldDOOR_ID.setShouldAllowNull(false);
  table.addField(fieldDOOR_ID);
  ForeignKeyConstraint foreignKeyCMP3_HINGE_CMP3_DOOR=new ForeignKeyConstraint();
  foreignKeyCMP3_HINGE_CMP3_DOOR.setName(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.setTargetTable(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addSourceField(""String_Node_Str"");
  foreignKeyCMP3_HINGE_CMP3_DOOR.addTargetField(""String_Node_Str"");
  table.addForeignKeyConstraint(foreignKeyCMP3_HINGE_CMP3_DOOR);
  return table;
}"
63444,"/** 
 * Return the ""real"" attribute value, as opposed to any wrapper. This will trigger the wrapper to instantiate the value. In a weaved policy, this will also call the initial setter method to coordinate the values of the valueholder with the underlying data.
 */
public Object getRealAttributeValueFromObject(Object object,Object attribute){
  boolean wasInstantiated=((ValueHolderInterface)attribute).isInstantiated();
  Object value=super.getRealAttributeValueFromObject(object,attribute);
  if (!wasInstantiated && (value != attribute)) {
    updateValueInObject(object,value,attribute);
  }
  return value;
}","/** 
 * Return the ""real"" attribute value, as opposed to any wrapper. This will trigger the wrapper to instantiate the value. In a weaved policy, this will also call the initial setter method to coordinate the values of the valueholder with the underlying data.
 */
public Object getRealAttributeValueFromObject(Object object,Object attribute){
  boolean wasInstantiated=attribute != null && attribute instanceof ValueHolderInterface && ((ValueHolderInterface)attribute).isInstantiated();
  Object value=super.getRealAttributeValueFromObject(object,attribute);
  if (!wasInstantiated && (value != attribute)) {
    updateValueInObject(object,value,attribute);
  }
  return value;
}"
63445,"/** 
 * INTERNAL: Set the session in which we expect this expression to be translated. Stored session shall always be root session.
 */
public void setSession(AbstractSession session){
  this.session=session.getRootSession(null);
}","/** 
 * INTERNAL: Set the session in which we expect this expression to be translated. Stored session shall always be root session.
 */
public void setSession(AbstractSession session){
  if (session != null) {
    this.session=session.getRootSession(null);
  }
 else {
    this.session=null;
  }
}"
63446,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  suite.addTest(new DDLTestSuite(""String_Node_Str""));
  return suite;
}"
63447,"/** 
 * Create database schemas and/or tables and/or create DDL scripts as  determined by the supplied properties. <p> Called by the Persistence class when schema generation is to occur as a  separate phase from creation of the entity manager factory. <p>
 * @param persistenceUnitName the name of the persistence unit
 * @param properties properties for schema generation; these may also contain provider-specific properties. The value of these  properties override any values that may have been configured  elsewhere.
 * @throws PersistenceException if insufficient or inconsistentconfiguration information is provided of if schema generation  otherwise fails
 * @since Java Persistence 2.1
 */
public boolean generateSchema(String persistenceUnitName,Map properties){
  String puName=(persistenceUnitName == null) ? ""String_Node_Str"" : persistenceUnitName;
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  if (checkForProviderProperty(nonNullProperties)) {
    JPAInitializer initializer=getInitializer(puName,nonNullProperties);
    SEPersistenceUnitInfo puInfo=initializer.findPersistenceUnitInfo(puName,nonNullProperties);
    if (puInfo != null) {
      generateSchema(puInfo,nonNullProperties);
      return true;
    }
  }
  return false;
}","/** 
 * Create database schemas and/or tables and/or create DDL scripts as  determined by the supplied properties. <p> Called by the Persistence class when schema generation is to occur as a  separate phase from creation of the entity manager factory. <p>
 * @param persistenceUnitName the name of the persistence unit
 * @param properties properties for schema generation; these may also contain provider-specific properties. The value of these  properties override any values that may have been configured  elsewhere.
 * @throws PersistenceException if insufficient or inconsistentconfiguration information is provided of if schema generation  otherwise fails
 * @since Java Persistence 2.1
 */
public boolean generateSchema(String persistenceUnitName,Map properties){
  String puName=(persistenceUnitName == null) ? ""String_Node_Str"" : persistenceUnitName;
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  if (checkForProviderProperty(nonNullProperties)) {
    JPAInitializer initializer=getInitializer(puName,nonNullProperties);
    SEPersistenceUnitInfo puInfo=initializer.findPersistenceUnitInfo(puName,nonNullProperties);
    if (puInfo != null && checkForProviderProperty(properties)) {
      createEntityManagerFactoryImpl(puInfo,properties,false).close();
      return true;
    }
  }
  return false;
}"
63448,"/** 
 * Called by the container when an EntityManagerFactory is to be created.
 * @param info Metadata for use by the persistence provider
 * @return EntityManagerFactory for the persistence unitspecified by the metadata
 * @param properties A Map of integration-level properties for useby the persistence provider.
 */
public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info,Map properties){
  JavaSECMPInitializer.setIsInContainer(true);
  Map nonNullProperties=(properties == null) ? new HashMap() : properties;
  EntityManagerSetupImpl emSetupImpl=null;
  if (EntityManagerSetupImpl.mustBeCompositeMember(info)) {
    emSetupImpl=new EntityManagerSetupImpl(info.getPersistenceUnitName(),info.getPersistenceUnitName());
    emSetupImpl.predeploy(info,nonNullProperties);
  }
 else {
    boolean isNew=false;
    ClassTransformer transformer=null;
    String uniqueName=PersistenceUnitProcessor.buildPersistenceUnitName(info.getPersistenceUnitRootUrl(),info.getPersistenceUnitName());
    String sessionName=EntityManagerSetupImpl.getOrBuildSessionName(nonNullProperties,info,uniqueName);
synchronized (EntityManagerFactoryProvider.emSetupImpls) {
      emSetupImpl=EntityManagerFactoryProvider.getEntityManagerSetupImpl(sessionName);
      if (emSetupImpl == null) {
        emSetupImpl=new EntityManagerSetupImpl(uniqueName,sessionName);
        isNew=true;
        emSetupImpl.setIsInContainerMode(true);
        transformer=emSetupImpl.predeploy(info,nonNullProperties);
        EntityManagerFactoryProvider.addEntityManagerSetupImpl(sessionName,emSetupImpl);
      }
    }
    if (!isNew) {
      if (!uniqueName.equals(emSetupImpl.getPersistenceUnitUniqueName())) {
        throw PersistenceUnitLoadingException.sessionNameAlreadyInUse(sessionName,uniqueName,emSetupImpl.getPersistenceUnitUniqueName());
      }
      boolean undeployed=false;
synchronized (emSetupImpl) {
        if (emSetupImpl.isUndeployed()) {
          undeployed=true;
        }
 else {
          transformer=emSetupImpl.predeploy(emSetupImpl.getPersistenceUnitInfo(),nonNullProperties);
        }
      }
      if (undeployed) {
        return createContainerEntityManagerFactory(info,properties);
      }
    }
    if (transformer != null) {
      info.addTransformer(transformer);
    }
  }
  EntityManagerFactoryImpl factory=null;
  try {
    factory=new EntityManagerFactoryImpl(emSetupImpl,nonNullProperties);
    emSetupImpl.preInitializeCanonicalMetamodel(factory);
    if (emSetupImpl.shouldGetSessionOnCreateFactory(nonNullProperties)) {
      factory.getDatabaseSession();
    }
    return factory;
  }
 catch (  RuntimeException ex) {
    if (factory != null) {
      factory.close();
    }
 else {
      emSetupImpl.undeploy();
    }
    throw ex;
  }
}","/** 
 * Called by the container when an EntityManagerFactory is to be created.
 * @param info Metadata for use by the persistence provider
 * @return EntityManagerFactory for the persistence unitspecified by the metadata
 * @param properties A Map of integration-level properties for useby the persistence provider.
 */
public EntityManagerFactory createContainerEntityManagerFactory(PersistenceUnitInfo info,Map properties){
  return createContainerEntityManagerFactoryImpl(info,properties,true);
}"
63449,"/** 
 * Create and initialize.
 */
public ApplicationAccessWLS(){
  try {
    initUsingCic();
  }
 catch (  Exception e) {
    cicInstance=null;
    try {
      initUsingApplicationAccess();
    }
 catch (    Exception ex) {
      applicationAccessInstance=null;
    }
  }
}","/** 
 * Create and initialize.
 */
public ApplicationAccessWLS(){
  try {
    initUsingCic();
    LOGGER.fine(""String_Node_Str"");
  }
 catch (  Exception e) {
    LOGGER.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"",e);
    cicManagerInstance=null;
    try {
      initUsingApplicationAccess();
      LOGGER.fine(""String_Node_Str"");
    }
 catch (    Exception ex) {
      LOGGER.log(Level.FINE,""String_Node_Str"",ex);
      applicationAccessInstance=null;
    }
  }
}"
63450,"/** 
 * Gets a unique application name. Uses CIC if possible. If not using ApplicationAccess.
 * @param classLoader   the class loader
 * @return unique application name.
 */
public String getApplicationName(ClassLoader classLoader){
  if (cicInstance != null) {
    try {
      return getAppNameUsingCic();
    }
 catch (    Exception e) {
      return null;
    }
  }
  if (applicationAccessInstance != null) {
    try {
      return getAppNameUsingApplicationAccess(classLoader);
    }
 catch (    Exception e) {
      return null;
    }
  }
  return null;
}","/** 
 * Gets a unique application name.
 * @param classLoader   the class loader
 * @return unique application name.
 */
public String getApplicationName(ClassLoader classLoader){
  if (appNames.containsKey(classLoader)) {
    return appNames.get(classLoader);
  }
 else {
synchronized (appNames) {
      if (appNames.containsKey(classLoader)) {
        return appNames.get(classLoader);
      }
 else {
        final String appName=getApplicationNameInternal(classLoader);
        appNames.put(classLoader,appName);
        return appName;
      }
    }
  }
}"
63451,"/** 
 * Initializes CIC.
 */
protected void initUsingCic() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  final Class cicManagerClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
  final Method getInstance=PrivilegedAccessHelper.getDeclaredMethod(cicManagerClass,""String_Node_Str"",new Class[]{});
  final Object cicManager=PrivilegedAccessHelper.invokeMethod(getInstance,cicManagerClass);
  final Method getCurrentCic=PrivilegedAccessHelper.getMethod(cicManagerClass,""String_Node_Str"",new Class[]{},true);
  cicInstance=PrivilegedAccessHelper.invokeMethod(getCurrentCic,cicManager);
  getApplicationId=PrivilegedAccessHelper.getDeclaredMethod(cicInstance.getClass(),""String_Node_Str"",new Class[]{});
}","/** 
 * Initializes CIC.
 */
protected void initUsingCic() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  final Class cicManagerClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
  final Method getInstance=PrivilegedAccessHelper.getDeclaredMethod(cicManagerClass,""String_Node_Str"",new Class[]{});
  cicManagerInstance=PrivilegedAccessHelper.invokeMethod(getInstance,cicManagerClass);
  getCurrentCicMethod=PrivilegedAccessHelper.getMethod(cicManagerClass,""String_Node_Str"",new Class[]{},true);
  final Class cicClass=PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
  getApplicationIdMethod=PrivilegedAccessHelper.getDeclaredMethod(cicClass,""String_Node_Str"",new Class[]{});
}"
63452,"/** 
 * Gets unique application name using CIC. Calls cicInstance.getApplicationId().
 */
private String getAppNameUsingCic() throws InvocationTargetException, IllegalAccessException {
  return (String)PrivilegedAccessHelper.invokeMethod(getApplicationId,cicInstance);
}","/** 
 * Gets unique application name using CIC. Calls cicInstance.getApplicationIdMethod().
 */
private String getAppNameUsingCic() throws InvocationTargetException, IllegalAccessException {
  final Object cicInstance=PrivilegedAccessHelper.invokeMethod(getCurrentCicMethod,cicManagerInstance);
  return (String)PrivilegedAccessHelper.invokeMethod(getApplicationIdMethod,cicInstance);
}"
63453,"public String getQualifiedTableName(){
  return getQualified(getTableName());
}","public String getQualifiedTableName(){
  return getQualified(getTable().getName());
}"
63454,"public void onConnect(){
  if (this.table.getName().length() == 0) {
    this.table.setName(((DatabasePlatform)getDatasourcePlatform()).getDefaultSequenceTableName());
  }
  super.onConnect();
}","public void onConnect(){
  if (this.table.getName().length() == 0) {
    this.table.setName(((DatabasePlatform)getDatasourcePlatform()).getDefaultSequenceTableName());
  }
  if ((this.qualifier == null || this.qualifier.length() == 0) && (this.table.getTableQualifier() != null && this.table.getTableQualifier().length() != 0)) {
    this.qualifier=this.table.getTableQualifier();
  }
  super.onConnect();
}"
63455,"/** 
 * INTERNAL: Return the SQL to delete the row from the sequence table. If we're dealing with create creation, then delegate to the table so that is dropped outright since we will delete the schema. 
 */
public Writer buildDeletionWriter(AbstractSession session,Writer writer) throws ValidationException {
  if (shouldDropTableDefinition()) {
    return tableDefinition.buildDeletionWriter(session,writer);
  }
 else {
    try {
      writer.write(""String_Node_Str"");
      writer.write(getSequenceTableName());
      writer.write(""String_Node_Str"" + getSequenceNameFieldName());
      writer.write(""String_Node_Str"" + getName() + ""String_Node_Str"");
    }
 catch (    IOException ioException) {
      throw ValidationException.fileError(ioException);
    }
    return writer;
  }
}","/** 
 * INTERNAL: Return the SQL to delete the row from the sequence table. If we're dealing with create creation, then delegate to the table so that is dropped outright since we will delete the schema. 
 */
public Writer buildDeletionWriter(AbstractSession session,Writer writer) throws ValidationException {
  if (shouldDropTableDefinition()) {
    return tableDefinition.buildDeletionWriter(session,writer);
  }
 else {
    try {
      writer.write(""String_Node_Str"");
      writer.write(getSequenceTableQualifiedName());
      writer.write(""String_Node_Str"" + getSequenceNameFieldName());
      writer.write(""String_Node_Str"" + getName() + ""String_Node_Str"");
    }
 catch (    IOException ioException) {
      throw ValidationException.fileError(ioException);
    }
    return writer;
  }
}"
63456,"/** 
 * PUBLIC:
 */
public String getSequenceTableName(){
  return getTableSequence().getTableName();
}","/** 
 * PUBLIC:
 */
public String getSequenceTableName(){
  return getSequenceTable().getName();
}"
63457,"/** 
 * INTERNAL: Return the SQL required to insert the sequence row into the sequence table. Assume that the sequence table exists.
 */
public Writer buildCreationWriter(AbstractSession session,Writer writer) throws ValidationException {
  try {
    writer.write(""String_Node_Str"");
    writer.write(getSequenceTableName());
    writer.write(""String_Node_Str"" + getSequenceNameFieldName());
    writer.write(""String_Node_Str"" + getSequenceCounterFieldName());
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + getName() + ""String_Node_Str""+ Integer.toString(sequence.getInitialValue() - 1)+ ""String_Node_Str"");
  }
 catch (  IOException ioException) {
    throw ValidationException.fileError(ioException);
  }
  return writer;
}","/** 
 * INTERNAL: Return the SQL required to insert the sequence row into the sequence table. Assume that the sequence table exists.
 */
public Writer buildCreationWriter(AbstractSession session,Writer writer) throws ValidationException {
  try {
    writer.write(""String_Node_Str"");
    writer.write(getSequenceTableQualifiedName());
    writer.write(""String_Node_Str"" + getSequenceNameFieldName());
    writer.write(""String_Node_Str"" + getSequenceCounterFieldName());
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + getName() + ""String_Node_Str""+ Integer.toString(sequence.getInitialValue() - 1)+ ""String_Node_Str"");
  }
 catch (  IOException ioException) {
    throw ValidationException.fileError(ioException);
  }
  return writer;
}"
63458,"/** 
 * INTERAL: Execute the SQL required to insert the sequence row into the sequence table. Assume that the sequence table exists.
 */
public boolean checkIfExist(AbstractSession session) throws DatabaseException {
  Vector results=session.priviledgedExecuteSelectingCall(new org.eclipse.persistence.queries.SQLCall(""String_Node_Str"" + getSequenceTableName() + ""String_Node_Str""+ getSequenceNameFieldName()+ ""String_Node_Str""+ getName()+ ""String_Node_Str""));
  return !results.isEmpty();
}","/** 
 * INTERAL: Execute the SQL required to insert the sequence row into the sequence table. Assume that the sequence table exists.
 */
public boolean checkIfExist(AbstractSession session) throws DatabaseException {
  StringBuilder buffer=new StringBuilder();
  buffer.append(""String_Node_Str"");
  buffer.append(getSequenceTableQualifiedName());
  buffer.append(""String_Node_Str"");
  buffer.append(getSequenceNameFieldName());
  buffer.append(""String_Node_Str"");
  buffer.append(getName());
  buffer.append(""String_Node_Str"");
  Vector results=session.priviledgedExecuteSelectingCall(new org.eclipse.persistence.queries.SQLCall(buffer.toString()));
  return !results.isEmpty();
}"
63459,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  return suite;
}"
63460,"@Test public void createSimpleA(){
  DynamicType simpleTypeA=dynamicHelper.getType(""String_Node_Str"");
  Assert.assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  DynamicType typeC=dynamicHelper.getType(""String_Node_Str"");
  assertEquals(a.get(""String_Node_Str"").getClass(),typeC.newDynamicEntity().getClass());
  DynamicEntity c=a.<DynamicEntity>get(""String_Node_Str"");
  assertNotNull(c);
  assertEquals(((Number)c.get(""String_Node_Str"")).doubleValue(),0.0);
  assertFalse(c.isSet(""String_Node_Str""));
}","@Test public void createSimpleA(){
  DynamicType simpleTypeA=dynamicHelper.getType(""String_Node_Str"");
  Assert.assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  DynamicType typeC=dynamicHelper.getType(""String_Node_Str"");
  assertEquals(a.get(""String_Node_Str"").getClass(),typeC.newDynamicEntity().getClass());
  DynamicEntity c=a.get(""String_Node_Str"");
  assertNotNull(c);
  assertEquals(((Number)c.get(""String_Node_Str"")).doubleValue(),0.0,0.01);
  assertFalse(c.isSet(""String_Node_Str""));
}"
63461,"@Test public void createSimpleA(){
  DynamicType simpleTypeA=dynamicHelper.getType(""String_Node_Str"");
  Assert.assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(a.get(""String_Node_Str""),false);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(((Number)a.get(""String_Node_Str"")).doubleValue(),0.0);
  assertFalse(a.isSet(""String_Node_Str""));
}","@Test public void createSimpleA(){
  DynamicType simpleTypeA=dynamicHelper.getType(""String_Node_Str"");
  Assert.assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(a.get(""String_Node_Str""),false);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(((Number)a.get(""String_Node_Str"")).doubleValue(),0.0,0.01);
  assertFalse(a.isSet(""String_Node_Str""));
}"
63462,"@Test public void createSimpleA(){
  DynamicTypeImpl simpleTypeA=(DynamicTypeImpl)helper.getType(""String_Node_Str"");
  assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  DynamicType typeC=helper.getType(""String_Node_Str"");
  assertEquals(a.get(""String_Node_Str"").getClass(),typeC.newDynamicEntity().getClass());
  DynamicEntity c=a.<DynamicEntity>get(""String_Node_Str"");
  assertNotNull(c);
  assertEquals(((Number)c.get(""String_Node_Str"")).doubleValue(),0.0);
  assertFalse(c.isSet(""String_Node_Str""));
}","@Test public void createSimpleA(){
  DynamicTypeImpl simpleTypeA=(DynamicTypeImpl)helper.getType(""String_Node_Str"");
  assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  assertFalse(a.isSet(""String_Node_Str""));
  DynamicType typeC=helper.getType(""String_Node_Str"");
  assertEquals(a.get(""String_Node_Str"").getClass(),typeC.newDynamicEntity().getClass());
  DynamicEntity c=a.get(""String_Node_Str"");
  assertNotNull(c);
  assertEquals(((Number)c.get(""String_Node_Str"")).doubleValue(),0.0,0.01);
  assertFalse(c.isSet(""String_Node_Str""));
}"
63463,"@Test public void createSimpleA(){
  DynamicType simpleTypeA=helper.getType(""String_Node_Str"");
  assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(a.get(""String_Node_Str""),false);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(((Number)a.get(""String_Node_Str"")).doubleValue(),0.0);
  assertFalse(a.isSet(""String_Node_Str""));
}","@Test public void createSimpleA(){
  DynamicType simpleTypeA=helper.getType(""String_Node_Str"");
  assertNotNull(simpleTypeA);
  DynamicEntity a=simpleTypeA.newDynamicEntity();
  assertNotNull(a);
  assertEquals(((Number)a.get(""String_Node_Str"")).intValue(),0);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(a.get(""String_Node_Str""),false);
  assertFalse(a.isSet(""String_Node_Str""));
  assertEquals(((Number)a.get(""String_Node_Str"")).doubleValue(),0.0,0.01);
  assertFalse(a.isSet(""String_Node_Str""));
}"
63464,"public TestSuite getSessionManagerTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new SessionManagerGetSessionStringStringTest());
  suite.addTest(new SessionManagerGetSessionNotFoundTest());
  suite.addTest(new MWConfigModelEncryptionTest());
  suite.addTestSuite(SessionManagerTest.class);
  return suite;
}","public TestSuite getSessionManagerTestSuite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new SessionManagerGetSessionStringStringTest());
  suite.addTest(new SessionManagerGetSessionNotFoundTest());
  suite.addTest(new MWConfigModelEncryptionTest());
  return suite;
}"
63465,"/** 
 * PUBLIC: Iterate through the exception list printing out the stack traces.
 */
public void printStackTrace(PrintWriter writer){
  super.printStackTrace(writer);
  if (getExceptionList() != null) {
    writer.println(""String_Node_Str"");
    Iterator<Throwable> exceptionList=getExceptionList().iterator();
    while (exceptionList.hasNext()) {
      writer.write(""String_Node_Str"");
      writer.write(cr());
      exceptionList.next().printStackTrace(writer);
      writer.write(cr());
    }
  }
  writer.flush();
}","/** 
 * PUBLIC: Iterate through the exception list printing out the stack traces.
 */
public void printStackTrace(PrintWriter writer){
  super.printStackTrace(writer);
  if (getExceptionList() != null) {
    writer.println(""String_Node_Str"");
    Iterator exceptionList=getExceptionList().iterator();
    while (exceptionList.hasNext()) {
      writer.write(""String_Node_Str"");
      writer.write(cr());
      ((Throwable)exceptionList.next()).printStackTrace(writer);
      writer.write(cr());
    }
  }
  writer.flush();
}"
63466,"public void setExceptionList(Vector<Throwable> list){
  this.exceptionList=list;
}","public void setExceptionList(Vector list){
  this.exceptionList=list;
}"
63467,"public Vector<Throwable> getExceptionList(){
  return this.exceptionList;
}","public Vector getExceptionList(){
  return this.exceptionList;
}"
63468,"public String toString(){
  if (getErrorCode() == FINAL_EXCEPTION) {
    StringBuffer buffer=new StringBuffer();
    buffer.append(getMessage());
    buffer.append(cr());
    Iterator<Throwable> exceptionList=getExceptionList().iterator();
    while (exceptionList.hasNext()) {
      buffer.append(""String_Node_Str"");
      buffer.append(cr());
      buffer.append(exceptionList.next().toString());
      buffer.append(cr());
    }
    return buffer.toString();
  }
 else {
    return super.toString();
  }
}","public String toString(){
  if (getErrorCode() == FINAL_EXCEPTION) {
    StringBuffer buffer=new StringBuffer();
    buffer.append(getMessage());
    buffer.append(cr());
    Iterator exceptionList=getExceptionList().iterator();
    while (exceptionList.hasNext()) {
      buffer.append(""String_Node_Str"");
      buffer.append(cr());
      buffer.append(exceptionList.next().toString());
      buffer.append(cr());
    }
    return buffer.toString();
  }
 else {
    return super.toString();
  }
}"
63469,"public void startUnmappedElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (xmlReader.getMediaType().isApplicationXML() && null == selfRecords && !isSelfRecord) {
    ErrorHandler errorHandler=xmlReader.getErrorHandler();
    if (null != errorHandler) {
      StringBuilder messageBuilder=new StringBuilder(""String_Node_Str"");
      if (null != namespaceURI) {
        messageBuilder.append(namespaceURI);
      }
      messageBuilder.append(""String_Node_Str"");
      messageBuilder.append(localName);
      messageBuilder.append(""String_Node_Str"");
      List<XPathNode> nonAttributeChildren=xPathNode.getNonAttributeChildren();
      if (nonAttributeChildren == null || nonAttributeChildren.size() == 0) {
        messageBuilder.append(""String_Node_Str"");
      }
 else {
        for (int x=0, size=nonAttributeChildren.size(); x < size; x++) {
          XPathFragment nonAttributeChildXPathFragment=nonAttributeChildren.get(x).getXPathFragment();
          messageBuilder.append(""String_Node_Str"");
          String nonAttributeChildXPathFragmentNamespaceURI=nonAttributeChildXPathFragment.getNamespaceURI();
          if (null != nonAttributeChildXPathFragmentNamespaceURI) {
            messageBuilder.append(nonAttributeChildXPathFragmentNamespaceURI);
          }
          messageBuilder.append('}');
          messageBuilder.append(nonAttributeChildXPathFragment.getLocalName());
          messageBuilder.append('>');
          if (x < size - 1) {
            messageBuilder.append(',');
          }
        }
      }
      errorHandler.warning(new SAXParseException(messageBuilder.toString(),getDocumentLocator()));
    }
  }
  if ((null != selfRecords) || (null == xmlReader) || isSelfRecord()) {
    if (-1 == unmappedLevel) {
      this.unmappedLevel=this.levelIndex;
    }
    return;
  }
  Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
  UnmappedContentHandler unmappedContentHandler;
  if (null == unmappedContentHandlerClass) {
    unmappedContentHandler=DEFAULT_UNMAPPED_CONTENT_HANDLER;
  }
 else {
    try {
      PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
      unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
    }
 catch (    ClassCastException e) {
      throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
    }
catch (    IllegalAccessException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
catch (    InstantiationException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
  }
  UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(this,unmappedContentHandler);
  unmappedContentHandlerWrapper.startElement(namespaceURI,localName,qName,atts);
  xmlReader.setContentHandler(unmappedContentHandlerWrapper);
  xmlReader.setLexicalHandler(unmappedContentHandlerWrapper);
}","public void startUnmappedElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (xmlReader.getMediaType().isApplicationXML() && null == selfRecords && !isSelfRecord) {
    ErrorHandler errorHandler=xmlReader.getErrorHandler();
    if (null != errorHandler && unmarshaller.shouldWarnOnUnmappedElement()) {
      StringBuilder messageBuilder=new StringBuilder(""String_Node_Str"");
      if (null != namespaceURI) {
        messageBuilder.append(namespaceURI);
      }
      messageBuilder.append(""String_Node_Str"");
      messageBuilder.append(localName);
      messageBuilder.append(""String_Node_Str"");
      List<XPathNode> nonAttributeChildren=xPathNode.getNonAttributeChildren();
      if (nonAttributeChildren == null || nonAttributeChildren.size() == 0) {
        messageBuilder.append(""String_Node_Str"");
      }
 else {
        for (int x=0, size=nonAttributeChildren.size(); x < size; x++) {
          XPathFragment nonAttributeChildXPathFragment=nonAttributeChildren.get(x).getXPathFragment();
          messageBuilder.append(""String_Node_Str"");
          String nonAttributeChildXPathFragmentNamespaceURI=nonAttributeChildXPathFragment.getNamespaceURI();
          if (null != nonAttributeChildXPathFragmentNamespaceURI) {
            messageBuilder.append(nonAttributeChildXPathFragmentNamespaceURI);
          }
          messageBuilder.append('}');
          messageBuilder.append(nonAttributeChildXPathFragment.getLocalName());
          messageBuilder.append('>');
          if (x < size - 1) {
            messageBuilder.append(',');
          }
        }
      }
      errorHandler.warning(new SAXParseException(messageBuilder.toString(),getDocumentLocator()));
    }
  }
  if ((null != selfRecords) || (null == xmlReader) || isSelfRecord()) {
    if (-1 == unmappedLevel) {
      this.unmappedLevel=this.levelIndex;
    }
    return;
  }
  Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
  UnmappedContentHandler unmappedContentHandler;
  if (null == unmappedContentHandlerClass) {
    unmappedContentHandler=DEFAULT_UNMAPPED_CONTENT_HANDLER;
  }
 else {
    try {
      PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
      unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
    }
 catch (    ClassCastException e) {
      throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
    }
catch (    IllegalAccessException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
catch (    InstantiationException e) {
      throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
    }
  }
  UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(this,unmappedContentHandler);
  unmappedContentHandlerWrapper.startElement(namespaceURI,localName,qName,atts);
  xmlReader.setContentHandler(unmappedContentHandlerWrapper);
  xmlReader.setLexicalHandler(unmappedContentHandlerWrapper);
}"
63470,"@Test public void testEntityOptions() throws URISyntaxException {
  final Response response=metadataResource.getEntityOptions(version,pu,""String_Node_Str"",TestHttpHeaders.generateHTTPHeader(MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON),new TestURIInfo());
  assertTrue(response.getMetadata().containsKey(""String_Node_Str""));
  final String link=""String_Node_Str"" + RestUtils.getServerURI(context.getVersion()) + context.getName()+ ""String_Node_Str"";
  assertTrue(response.getMetadata().get(""String_Node_Str"").get(0).equals(link));
}","@Test public void testEntityOptions() throws URISyntaxException {
  final EntityResource entityResource=new EntityResource();
  entityResource.setPersistenceFactory(factory);
  final Response response=entityResource.getEntityOptions(version,pu,""String_Node_Str"",TestHttpHeaders.generateHTTPHeader(MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON),new TestURIInfo());
  assertTrue(response.getMetadata().containsKey(""String_Node_Str""));
  final String link=""String_Node_Str"" + RestUtils.getServerURI(context.getVersion()) + context.getName()+ ""String_Node_Str"";
  assertTrue(response.getMetadata().get(""String_Node_Str"").get(0).equals(link));
}"
63471,"@Test public void testQueryOptions() throws URISyntaxException {
  final Response response=metadataResource.getQueryOptions(version,pu,""String_Node_Str"",TestHttpHeaders.generateHTTPHeader(MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON),new TestURIInfo());
  assertTrue(response.getMetadata().containsKey(""String_Node_Str""));
  final String link=""String_Node_Str"" + RestUtils.getServerURI(context.getVersion()) + context.getName()+ ""String_Node_Str"";
  assertTrue(response.getMetadata().get(""String_Node_Str"").get(0).equals(link));
}","@Test public void testQueryOptions() throws URISyntaxException {
  final QueryResource queryResource=new QueryResource();
  queryResource.setPersistenceFactory(factory);
  final Response response=queryResource.getQueryOptions(version,pu,""String_Node_Str"",TestHttpHeaders.generateHTTPHeader(MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON),new TestURIInfo());
  assertTrue(response.getMetadata().containsKey(""String_Node_Str""));
  final String link=""String_Node_Str"" + RestUtils.getServerURI(context.getVersion()) + context.getName()+ ""String_Node_Str"";
  assertTrue(response.getMetadata().get(""String_Node_Str"").get(0).equals(link));
}"
63472,"public void test() throws Exception {
  String[][] EJBQLTestString={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  verifyCustomQuery(EJBQLTestString);
}","public void test() throws Exception {
  String[][] EJBQLTestString={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  verifyCustomQuery(EJBQLTestString);
}"
63473,"/** 
 * Return true if the specific mark is existing and not quoted around.
 */
private boolean hasArgumentMark(String string,char mark){
  int quoteIndex=-1;
  int lastEndQuoteIndex=-1;
  do {
    int markIndex=string.indexOf(mark,lastEndQuoteIndex + 1);
    if (markIndex == -1) {
      return false;
    }
    quoteIndex=string.lastIndexOf('\'',markIndex);
    if (quoteIndex == -1) {
      return true;
    }
 else {
      boolean hasPairedQuoteBeforeMark=false;
      while (quoteIndex != -1 && quoteIndex >= lastEndQuoteIndex) {
        if ((quoteIndex=string.lastIndexOf('\'',quoteIndex - 1)) != -1) {
          hasPairedQuoteBeforeMark=!hasPairedQuoteBeforeMark;
        }
      }
      if (hasPairedQuoteBeforeMark) {
        return true;
      }
 else {
        lastEndQuoteIndex=string.indexOf('\'',markIndex + 1);
        if (lastEndQuoteIndex == -1) {
          return true;
        }
      }
    }
  }
 while (true);
}","/** 
 * Return true if the specific mark is existing and not quoted around.
 * @param string    string to search
 * @param mark      mark to find
 * @param quote     quote char (usually ' or "")
 */
private boolean hasArgumentMark(String string,char mark,char quote){
  int quoteIndex=-1;
  int lastEndQuoteIndex=-1;
  do {
    int markIndex=string.indexOf(mark,lastEndQuoteIndex + 1);
    if (markIndex == -1) {
      return false;
    }
    quoteIndex=string.lastIndexOf(quote,markIndex);
    if (quoteIndex == -1) {
      return true;
    }
 else {
      boolean hasPairedQuoteBeforeMark=false;
      while (quoteIndex != -1 && quoteIndex >= lastEndQuoteIndex) {
        if ((quoteIndex=string.lastIndexOf(quote,quoteIndex - 1)) != -1) {
          hasPairedQuoteBeforeMark=!hasPairedQuoteBeforeMark;
        }
      }
      if (hasPairedQuoteBeforeMark) {
        return true;
      }
 else {
        lastEndQuoteIndex=string.indexOf(quote,markIndex + 1);
        if (lastEndQuoteIndex == -1) {
          return true;
        }
      }
    }
  }
 while (true);
}"
63474,"/** 
 * INTERNAL: Parse the query string for # markers for custom query based on a query language. This is used by SQLCall and XQuery call, but can be reused by other query languages.
 */
public void translateCustomQuery(){
  if (this.shouldProcessTokenInQuotes) {
    if (getQueryString().indexOf(this.query.getParameterDelimiter()) == -1) {
      if (this.getQuery().shouldBindAllParameters() && getQueryString().indexOf(""String_Node_Str"") == -1) {
        return;
      }
      translatePureSQLCustomQuery();
      return;
    }
  }
 else {
    if (!hasArgumentMark(getQueryString(),this.query.getParameterDelimiterChar())) {
      if (this.getQuery().shouldBindAllParameters() && !hasArgumentMark(getQueryString(),'?')) {
        return;
      }
      translatePureSQLCustomQuery();
      return;
    }
  }
  int lastIndex=0;
  String queryString=getQueryString();
  Writer writer=new CharArrayWriter(queryString.length() + 50);
  try {
    while (lastIndex != -1) {
      int poundIndex=queryString.indexOf(this.query.getParameterDelimiterChar(),lastIndex);
      String token;
      if (poundIndex == -1) {
        token=queryString.substring(lastIndex,queryString.length());
        lastIndex=-1;
      }
 else {
        if (this.shouldProcessTokenInQuotes) {
          token=queryString.substring(lastIndex,poundIndex);
        }
 else {
          boolean hasPairedQuoteBeforePound=true;
          int quotePairIndex=poundIndex;
          do {
            quotePairIndex=queryString.lastIndexOf('\'',quotePairIndex - 1);
            if (quotePairIndex != -1 && quotePairIndex > lastIndex) {
              hasPairedQuoteBeforePound=!hasPairedQuoteBeforePound;
            }
 else {
              break;
            }
          }
 while (true);
          int endQuoteIndex=-1;
          if (!hasPairedQuoteBeforePound) {
            endQuoteIndex=queryString.indexOf('\'',poundIndex + 1);
          }
          if (endQuoteIndex != -1) {
            token=queryString.substring(lastIndex,endQuoteIndex + 1);
            poundIndex=-1;
            lastIndex=endQuoteIndex + 1;
          }
 else {
            token=queryString.substring(lastIndex,poundIndex);
            lastIndex=poundIndex + 1;
          }
        }
      }
      writer.write(token);
      if (poundIndex != -1) {
        int wordEndIndex=poundIndex + 1;
        while ((wordEndIndex < queryString.length()) && (whitespace().indexOf(queryString.charAt(wordEndIndex)) == -1)) {
          wordEndIndex=wordEndIndex + 1;
        }
        if (queryString.charAt(poundIndex + 1) == this.query.getParameterDelimiterChar()) {
          if (queryString.charAt(poundIndex + 2) == this.query.getParameterDelimiterChar()) {
            if (queryString.charAt(poundIndex + 3) == this.query.getParameterDelimiterChar()) {
              String fieldName=queryString.substring(poundIndex + 4,wordEndIndex);
              DatabaseField field=createField(fieldName);
              appendInOut(writer,field);
            }
 else {
              String fieldName=queryString.substring(poundIndex + 3,wordEndIndex);
              DatabaseField field=createField(fieldName);
              appendOut(writer,field);
            }
          }
 else {
            String fieldName=queryString.substring(poundIndex + 2,wordEndIndex);
            DatabaseField field=createField(fieldName);
            appendModify(writer,field);
          }
        }
 else {
          String fieldName=queryString.substring(poundIndex + 1,wordEndIndex);
          DatabaseField field=createField(fieldName);
          appendIn(writer,field);
        }
        lastIndex=wordEndIndex;
      }
    }
    setQueryString(writer.toString());
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}","/** 
 * INTERNAL: Parse the query string for # markers for custom query based on a query language. This is used by SQLCall and XQuery call, but can be reused by other query languages.
 */
public void translateCustomQuery(){
  if (this.shouldProcessTokenInQuotes) {
    if (getQueryString().indexOf(this.query.getParameterDelimiter()) == -1) {
      if (this.getQuery().shouldBindAllParameters() && getQueryString().indexOf(""String_Node_Str"") == -1) {
        return;
      }
      translatePureSQLCustomQuery();
      return;
    }
  }
 else {
    if (!hasArgumentMark(getQueryString(),this.query.getParameterDelimiterChar(),'\'') || !hasArgumentMark(getQueryString(),this.query.getParameterDelimiterChar(),'\""') || !hasArgumentMark(getQueryString(),this.query.getParameterDelimiterChar(),'`')) {
      if (this.getQuery().shouldBindAllParameters() && !hasArgumentMark(getQueryString(),'?','\'')) {
        return;
      }
      translatePureSQLCustomQuery();
      return;
    }
  }
  int lastIndex=0;
  String queryString=getQueryString();
  Writer writer=new CharArrayWriter(queryString.length() + 50);
  try {
    while (lastIndex != -1) {
      int poundIndex=queryString.indexOf(this.query.getParameterDelimiterChar(),lastIndex);
      String token;
      if (poundIndex == -1) {
        token=queryString.substring(lastIndex,queryString.length());
        lastIndex=-1;
      }
 else {
        if (this.shouldProcessTokenInQuotes) {
          token=queryString.substring(lastIndex,poundIndex);
        }
 else {
          boolean hasPairedQuoteBeforePound=true;
          int quotePairIndex=poundIndex;
          do {
            quotePairIndex=queryString.lastIndexOf('\'',quotePairIndex - 1);
            if (quotePairIndex != -1 && quotePairIndex > lastIndex) {
              hasPairedQuoteBeforePound=!hasPairedQuoteBeforePound;
            }
 else {
              break;
            }
          }
 while (true);
          int endQuoteIndex=-1;
          if (!hasPairedQuoteBeforePound) {
            endQuoteIndex=queryString.indexOf('\'',poundIndex + 1);
          }
          if (endQuoteIndex != -1) {
            token=queryString.substring(lastIndex,endQuoteIndex + 1);
            poundIndex=-1;
            lastIndex=endQuoteIndex + 1;
          }
 else {
            token=queryString.substring(lastIndex,poundIndex);
            lastIndex=poundIndex + 1;
          }
        }
      }
      writer.write(token);
      if (poundIndex != -1) {
        int wordEndIndex=poundIndex + 1;
        while ((wordEndIndex < queryString.length()) && (whitespace().indexOf(queryString.charAt(wordEndIndex)) == -1)) {
          wordEndIndex=wordEndIndex + 1;
        }
        if (queryString.charAt(poundIndex + 1) == this.query.getParameterDelimiterChar()) {
          if (queryString.charAt(poundIndex + 2) == this.query.getParameterDelimiterChar()) {
            if (queryString.charAt(poundIndex + 3) == this.query.getParameterDelimiterChar()) {
              String fieldName=queryString.substring(poundIndex + 4,wordEndIndex);
              DatabaseField field=createField(fieldName);
              appendInOut(writer,field);
            }
 else {
              String fieldName=queryString.substring(poundIndex + 3,wordEndIndex);
              DatabaseField field=createField(fieldName);
              appendOut(writer,field);
            }
          }
 else {
            String fieldName=queryString.substring(poundIndex + 2,wordEndIndex);
            DatabaseField field=createField(fieldName);
            appendModify(writer,field);
          }
        }
 else {
          String fieldName=queryString.substring(poundIndex + 1,wordEndIndex);
          DatabaseField field=createField(fieldName);
          appendIn(writer,field);
        }
        lastIndex=wordEndIndex;
      }
    }
    setQueryString(writer.toString());
  }
 catch (  IOException exception) {
    throw ValidationException.fileError(exception);
  }
}"
63475,"public static void main(String[] args){
  System.out.println(Version.getProduct() + ""String_Node_Str"" + Version.getVersion());
  System.out.println(""String_Node_Str"" + Version.getVersionString() + ""String_Node_Str""+ Version.getBuildDate());
  System.out.println(""String_Node_Str"" + JavaSEPlatform.current.toString());
}","public static void main(String[] args){
  System.out.println(Version.getProduct() + ""String_Node_Str"" + Version.getVersion());
  System.out.println(""String_Node_Str"" + Version.getVersionString() + ""String_Node_Str""+ Version.getBuildDate());
  System.out.println(""String_Node_Str"" + JavaSEPlatform.CURRENT.toString());
}"
63476,"/** 
 * Do we run with at least Java SE 1.8?
 * @return Value of {@code true} when we run with Java SE 1.8 or higheror  {@code false} otherwise.
 */
private static final boolean atLeastJava8(){
  return JavaSEPlatform.current.atLeast(JavaSEPlatform.v1_8);
}","/** 
 * Do we run with at least Java SE 1.8?
 * @return Value of {@code true} when we run with Java SE 1.8 or higheror  {@code false} otherwise.
 */
private static final boolean atLeastJava8(){
  return JavaSEPlatform.CURRENT.atLeast(JavaSEPlatform.v1_8);
}"
63477,"/** 
 * INTERNAL: Return the JDK version we are using.
 * @deprecated Use {@see JavaSEPlatform.current} instead.Will be removed in 2.7.
 */
public static int getJDKVersion(){
switch (JavaSEPlatform.current) {
case v1_7:
    JDK_VERSION=JDK_1_7;
  break;
case v1_8:
JDK_VERSION=JDK_1_8;
break;
case v1_9:
JDK_VERSION=JDK_1_9;
break;
}
return JDK_VERSION;
}","/** 
 * INTERNAL: Return the JDK version we are using.
 * @deprecated Use {@see JavaSEPlatform.current} instead.Will be removed in 2.7.
 */
public static int getJDKVersion(){
switch (JavaSEPlatform.CURRENT) {
case v1_7:
    JDK_VERSION=JDK_1_7;
  break;
case v1_8:
JDK_VERSION=JDK_1_8;
break;
case v1_9:
JDK_VERSION=JDK_1_9;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + JavaSEPlatform.CURRENT.toString());
}
return JDK_VERSION;
}"
63478,"/** 
 * Check whether we are running on Java SE 1.6. This will always return   {@code false} because Java SE 1.6 is notsupported by current EclipseLink.
 * @return Value of {@code true} when we do and value of {@code false}when we do not run on Java SE 1.6.
 * @deprecated Use {@code JavaSEPlatform.current.equals(JavaSEPlatform.v1_6)}instead. Will be removed in 2.7.
 */
public static boolean isJDK16(){
  return JavaSEPlatform.current.equals(JavaSEPlatform.v1_6);
}","/** 
 * Check whether we are running on Java SE 1.6. This will always return   {@code false} because Java SE 1.6 is notsupported by current EclipseLink.
 * @return Value of {@code true} when we do and value of {@code false}when we do not run on Java SE 1.6.
 */
public static boolean isJDK16(){
  return JavaSEPlatform.is(JavaSEPlatform.v1_6);
}"
63479,"/** 
 * Check whether we are running on Java SE 1.5. This will always return   {@code false} because Java SE 1.5 is notsupported by current EclipseLink.
 * @return Value of {@code true} when we do and value of {@code false}when we do not run on Java SE 1.5.
 * @deprecated Use {@code JavaSEPlatform.current.equals(JavaSEPlatform.v1_5)}instead. Will be removed in 2.7.
 */
public static boolean isJDK15(){
  return JavaSEPlatform.current.equals(JavaSEPlatform.v1_5);
}","/** 
 * Check whether we are running on Java SE 1.5. This will always return   {@code false} because Java SE 1.5 is notsupported by current EclipseLink.
 * @return Value of {@code true} when we do and value of {@code false}when we do not run on Java SE 1.5.
 */
public static boolean isJDK15(){
  return JavaSEPlatform.is(JavaSEPlatform.v1_5);
}"
63480,"/** 
 * INTERNAL: Get the version of JDK being used from the Version class.
 * @return JDKPlatform a platform appropriate for the version of JDK being used.
 */
protected static JDKPlatform getPlatform(){
  if (platform == null) {
    if (JavaSEPlatform.current.equals(JavaSEPlatform.v1_6)) {
      try {
        Class platformClass=null;
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            platformClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(""String_Node_Str""));
          }
 catch (          PrivilegedActionException exception) {
          }
        }
 else {
          platformClass=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
        }
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            platform=(JDKPlatform)AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(platformClass));
          }
 catch (          PrivilegedActionException exception) {
          }
        }
 else {
          platform=(JDKPlatform)PrivilegedAccessHelper.newInstanceFromClass(platformClass);
        }
      }
 catch (      Exception exception) {
      }
    }
    if (platform == null) {
      platform=new JDK15Platform();
    }
  }
  return platform;
}","/** 
 * INTERNAL: Get the version of JDK being used from the Version class.
 * @return JDKPlatform a platform appropriate for the version of JDK being used.
 */
protected static JDKPlatform getPlatform(){
  if (platform == null) {
    if (JavaSEPlatform.CURRENT.equals(JavaSEPlatform.v1_6)) {
      try {
        Class platformClass=null;
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            platformClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(""String_Node_Str""));
          }
 catch (          PrivilegedActionException exception) {
          }
        }
 else {
          platformClass=org.eclipse.persistence.internal.security.PrivilegedAccessHelper.getClassForName(""String_Node_Str"");
        }
        if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
          try {
            platform=(JDKPlatform)AccessController.doPrivileged(new PrivilegedNewInstanceFromClass(platformClass));
          }
 catch (          PrivilegedActionException exception) {
          }
        }
 else {
          platform=(JDKPlatform)PrivilegedAccessHelper.newInstanceFromClass(platformClass);
        }
      }
 catch (      Exception exception) {
      }
    }
    if (platform == null) {
      platform=new JDK15Platform();
    }
  }
  return platform;
}"
63481,"/** 
 * Builds object graph for specified object using given filter.
 * @param object the object to build object graph for. Mandatory.
 * @param filter the filter (included or excluded fields) to use. Optional.
 * @return constructed object graph.
 */
public ObjectGraph createObjectGraph(Object object,FieldsFilter filter){
  final Node root=new Node();
  if (PersistenceWeavedRest.class.isAssignableFrom(object.getClass())) {
    createNodeForEntity(object,root);
  }
 else   if (object instanceof SingleResultQueryResult) {
    root.addAttributeNode(""String_Node_Str"");
    root.addSubNode(""String_Node_Str"");
    final SingleResultQueryResult singleResultQueryResult=(SingleResultQueryResult)object;
    replaceEntitiesWithLinks(singleResultQueryResult.getFields());
  }
 else   if (object instanceof ReadAllQueryResultCollection) {
    createNodeForPageableCollection((PageableCollection)object,root);
  }
 else {
    return null;
  }
  ObjectGraph objectGraph=context.getJAXBContext().createObjectGraph(object.getClass());
  fillObjectGraphFromNode(objectGraph,root,filter);
  return objectGraph;
}","/** 
 * Builds object graph for specified object using given filter.
 * @param object the object to build object graph for. Mandatory.
 * @param filter the filter (included or excluded fields) to use. Optional.
 * @return constructed object graph.
 */
public ObjectGraph createObjectGraph(Object object,FieldsFilter filter){
  final Node root=new Node();
  if (PersistenceWeavedRest.class.isAssignableFrom(object.getClass())) {
    createNodeForEntity(object,root);
  }
 else   if (object instanceof SingleResultQueryResult) {
    root.addAttributeNode(""String_Node_Str"");
    final SingleResultQueryResult singleResultQueryResult=(SingleResultQueryResult)object;
    processFieldsList(root.addSubNode(""String_Node_Str""),singleResultQueryResult.getFields());
  }
 else   if (object instanceof ReadAllQueryResultCollection) {
    createNodeForPageableCollection((PageableCollection)object,root);
  }
 else {
    return null;
  }
  ObjectGraph objectGraph=context.getJAXBContext().createObjectGraph(object.getClass());
  fillObjectGraphFromNode(objectGraph,root,filter);
  return objectGraph;
}"
63482,"private void createNodeForPageableCollection(PageableCollection collection,Node node){
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  if (collection.getItems() != null && !collection.getItems().isEmpty()) {
    final Node subNode=node.addSubNode(""String_Node_Str"");
    if (collection instanceof ReportQueryResultCollection) {
      subNode.addAttributeNode(""String_Node_Str"");
      final ReportQueryResultCollection reportQueryResultCollection=(ReportQueryResultCollection)collection;
      for (      ReportQueryResultListItem item : reportQueryResultCollection.getItems()) {
        replaceEntitiesWithLinks(item.getFields());
      }
    }
 else {
      createNodeForEntity(collection.getItems().get(0),subNode);
    }
  }
}","private void createNodeForPageableCollection(PageableCollection collection,Node node){
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  node.addAttributeNode(""String_Node_Str"");
  if (collection.getItems() != null && !collection.getItems().isEmpty()) {
    final Node subNode=node.addSubNode(""String_Node_Str"");
    if (collection instanceof ReportQueryResultCollection) {
      final ReportQueryResultCollection reportQueryResultCollection=(ReportQueryResultCollection)collection;
      processFieldsList(subNode.addSubNode(""String_Node_Str""),reportQueryResultCollection.getItems().get(0).getFields());
    }
 else {
      createNodeForEntity(collection.getItems().get(0),subNode);
    }
  }
}"
63483,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((Root)originalValue).getSchemaType();
    setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters(qname,value,null,false);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((Root)originalValue).getSchemaType();
    setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    if (item != null) {
      if (item.getGroup() != null && null != xmlRootFragment.getLocalName()) {
        CoreAttributeItem nestedItem=item.getGroup().getItem(xmlRootFragment.getLocalName());
        if (null != nestedItem) {
          nestedGroup=item.getGroup();
        }
 else {
          return;
        }
      }
    }
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters(qname,value,null,false);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
63484,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  Descriptor descriptor;
  ObjectBuilder objectBuilder;
  CoreAbstractSession childSession;
  Marshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((Root)value).getObject();
    if (null == value) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(Descriptor)childSession.getDescriptor(value);
    objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      throw XMLMarshalException.defaultRootElementNotSpecified(descriptor);
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,value);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  Descriptor descriptor;
  ObjectBuilder objectBuilder;
  CoreAbstractSession childSession;
  Marshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((Root)value).getObject();
    if (null == value) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(Descriptor)childSession.getDescriptor(value);
    pushAttributeGroup(marshalRecord,descriptor,getMapping().getAttributeName());
    objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      throw XMLMarshalException.defaultRootElementNotSpecified(descriptor);
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      pushAttributeGroup(marshalRecord,descriptor,rootFragment.getLocalName());
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,value);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
      marshalRecord.popAttributeGroup();
    }
    marshalRecord.popAttributeGroup();
  }
  return true;
}"
63485,"/** 
 * INTERNAL: Return the JDK version we are using.
 * @deprecated Use {@see JavaSEPlatform.current} instead.Will be removed in 2.7.
 */
public static int getJDKVersion(){
switch (JavaSEPlatform.CURRENT) {
case v1_7:
    JDK_VERSION=JDK_1_7;
  break;
case v1_8:
JDK_VERSION=JDK_1_8;
break;
case v1_9:
JDK_VERSION=JDK_1_9;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + JavaSEPlatform.CURRENT.toString());
}
return JDK_VERSION;
}","/** 
 * INTERNAL: Return the JDK version we are using.
 * @deprecated Use {@code JavaSEPlatform.CURRENT} instead.Will be removed in 2.7.
 */
public static int getJDKVersion(){
switch (JavaSEPlatform.CURRENT) {
case v1_7:
    JDK_VERSION=JDK_1_7;
  break;
case v1_8:
JDK_VERSION=JDK_1_8;
break;
case v1_9:
JDK_VERSION=JDK_1_9;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + JavaSEPlatform.CURRENT.toString());
}
return JDK_VERSION;
}"
63486,"/** 
 * Set 1.5 as current Java SE version.
 * @throws UnsupportedOperationException when invoked because Java SE 1.5is not supported by current EclipseLink.
 * @deprecated Use {@see JavaSEPlatform} instead. Will be removed in 2.7.
 */
public static void useJDK15(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Set 1.5 as current Java SE version.
 * @throws UnsupportedOperationException when invoked because Java SE 1.5is not supported by current EclipseLink.
 * @deprecated Use {@link JavaSEPlatform} instead. Will be removed in 2.7.
 */
public static void useJDK15(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
63487,"/** 
 * Set 1.6 as current Java SE version.
 * @throws UnsupportedOperationException when invoked because Java SE 1.6is not supported by current EclipseLink.
 * @deprecated Use {@see JavaSEPlatform} instead. Will be removed in 2.7.
 */
public static void useJDK16(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Set 1.6 as current Java SE version.
 * @throws UnsupportedOperationException when invoked because Java SE 1.6is not supported by current EclipseLink.
 * @deprecated Use {@link JavaSEPlatform} instead. Will be removed in 2.7.
 */
public static void useJDK16(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
63488,"/** 
 * Returns version   {@see String} containing three part version numberand build qualifier.
 * @return Version {@see String}.
 */
public static String getVersionString(){
  StringBuilder sb=new StringBuilder(version.length() + 1 + qualifier.length());
  sb.append(version);
  sb.append(SEPARATOR);
  sb.append(qualifier);
  return sb.toString();
}","/** 
 * Returns version   {@link String} containing three part version numberand build qualifier.
 * @return Version {@link String}.
 */
public static String getVersionString(){
  StringBuilder sb=new StringBuilder(version.length() + 1 + qualifier.length());
  sb.append(version);
  sb.append(SEPARATOR);
  sb.append(qualifier);
  return sb.toString();
}"
63489,"@Override protected Object instantiate() throws DatabaseException {
  if (this.session == null) {
    throw ValidationException.instantiatingValueholderWithNullSession();
  }
  Integer refreshCascade=null;
  if (wrappedValueHolder instanceof QueryBasedValueHolder) {
    refreshCascade=((QueryBasedValueHolder)getWrappedValueHolder()).getRefreshCascadePolicy();
  }
  return mapping.buildCloneForPartObject(this.wrappedValueHolder.getValue(),null,null,null,this.session,refreshCascade,true,true);
}","@Override protected Object instantiate() throws DatabaseException {
  if (this.session == null) {
    throw ValidationException.instantiatingValueholderWithNullSession();
  }
  Integer refreshCascade=null;
  if (wrappedValueHolder instanceof QueryBasedValueHolder) {
    refreshCascade=((QueryBasedValueHolder)getWrappedValueHolder()).getRefreshCascadePolicy();
  }
  Object clone=mapping.buildCloneForPartObject(this.wrappedValueHolder.getValue(),null,null,null,this.session,refreshCascade,true,true);
  if (wrappedValueHolder.isInstantiated() && refreshCascade != null) {
    ((QueryBasedValueHolder)getWrappedValueHolder()).setRefreshCascadePolicy(null);
  }
  return clone;
}"
63490,"/** 
 * Clone the original attribute value.
 */
public Object buildCloneFor(Object originalAttributeValue){
  Integer refreshCascade=null;
  if (wrappedValueHolder instanceof QueryBasedValueHolder) {
    refreshCascade=((QueryBasedValueHolder)getWrappedValueHolder()).getRefreshCascadePolicy();
  }
  return this.mapping.buildCloneForPartObject(originalAttributeValue,null,null,this.relationshipSourceObject,getUnitOfWork(),refreshCascade,true,true);
}","/** 
 * Clone the original attribute value.
 */
public Object buildCloneFor(Object originalAttributeValue){
  Integer refreshCascade=null;
  if (wrappedValueHolder instanceof QueryBasedValueHolder) {
    refreshCascade=((QueryBasedValueHolder)getWrappedValueHolder()).getRefreshCascadePolicy();
  }
  Object clone=this.mapping.buildCloneForPartObject(originalAttributeValue,null,null,this.relationshipSourceObject,getUnitOfWork(),refreshCascade,true,true);
  if (wrappedValueHolder.isInstantiated() && refreshCascade != null) {
    ((QueryBasedValueHolder)getWrappedValueHolder()).setRefreshCascadePolicy(null);
  }
  return clone;
}"
63491,"public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
}","public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
  addTableDefinition(buildCmp3EmbedVisitorTable());
  addTableDefinition(buildCMP3_CANOETable());
  addTableDefinition(buildCMP3_LAKETable());
}"
63492,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  List<String> tests=new ArrayList<String>();
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  Collections.sort(tests);
  for (  String test : tests) {
    suite.addTest(new EntityManagerJUnitTestSuite(test));
  }
  if (!isJPA10()) {
    suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  }
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  List<String> tests=new ArrayList<String>();
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  Collections.sort(tests);
  for (  String test : tests) {
    suite.addTest(new EntityManagerJUnitTestSuite(test));
  }
  if (!isJPA10()) {
    suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  }
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}"
63493,"/** 
 * INTERNAL:
 * @param session               typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null
 */
public final void resolveReferences(final CoreAbstractSession session,final IDResolver userSpecifiedResolver,final ErrorHandler handler){
}","/** 
 * INTERNAL:
 * @param session               typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null
 */
public final void resolveReferences(final CoreAbstractSession session,final IDResolver userSpecifiedResolver,final ErrorHandler handler){
  final Collection<Reference> luckyReferences=referencesMap.values();
  final Iterator<Reference> itLucky=luckyReferences.iterator();
  final Iterator<Reference> itUnlucky=unluckyReferences.iterator();
  Integer lastValue=unluckyRefPositions.peekLast();
  boolean[] a;
  if (lastValue == null) {
    lastValue=-1;
    a=new boolean[1];
  }
 else {
    a=new boolean[lastValue + 1];
    for (    final Integer integer : unluckyRefPositions) {
      a[integer]=true;
    }
  }
  for (int i=0, totalLength=luckyReferences.size() + unluckyReferences.size(); i < totalLength; i++) {
    final Reference reference;
    if (i <= lastValue && a[i]) {
      reference=itUnlucky.next();
    }
 else {
      reference=itLucky.next();
    }
    perform(session,userSpecifiedResolver,handler,reference);
  }
  resetContainers();
}"
63494,"/** 
 * INTERNAL: Adds a notification listener to the ApplicationRuntimeMBean instance with ""ApplicationName""  attribute equals to 'mapKey.applicationName'.  The listener will handle application  re-deployment. If any errors occur, we will fail silently, i.e. the listener will not be added. This method should only be called when running in an active WLS instance.
 * @param applicationName
 */
private static void addWLSNotificationListener(String applicationName){
  if (getWLSMBeanServer() != null) {
    try {
      ObjectName service=new ObjectName(WLS_SERVICE_KEY);
      ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
      ObjectName[] appRuntimes=(ObjectName[])wlsMBeanServer.getAttribute(serverRuntime,WLS_APP_RUNTIMES);
      for (int i=0; i < appRuntimes.length; i++) {
        try {
          ObjectName appRuntime=appRuntimes[i];
          Object appName=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_NAME);
          if (appName != null && appName.toString().equals(applicationName)) {
            wlsMBeanServer.addNotificationListener(appRuntime,new MyNotificationListener(applicationName,WLS_IDENTIFIER),null,null);
            break;
          }
        }
 catch (        Exception ex) {
        }
      }
    }
 catch (    Exception x) {
    }
  }
}","/** 
 * INTERNAL: Adds a notification listener to the ApplicationRuntimeMBean instance with ""ApplicationName""  attribute equals to 'mapKey.applicationName'.  The listener will handle application  re-deployment. If any errors occur, we will fail silently, i.e. the listener will not be added. This method should only be called when running in an active WLS instance.
 * @param applicationName
 */
private static void addWLSNotificationListener(String applicationName){
  if (getWLSMBeanServer() != null) {
    try {
      ObjectName service=new ObjectName(WLS_SERVICE_KEY);
      ObjectName serverRuntime=(ObjectName)wlsMBeanServer.getAttribute(service,WLS_SERVER_RUNTIME);
      ObjectName[] appRuntimes=(ObjectName[])wlsMBeanServer.getAttribute(serverRuntime,WLS_APP_RUNTIMES);
      for (int i=0; i < appRuntimes.length; i++) {
        try {
          ObjectName appRuntime=appRuntimes[i];
          Object appName=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_NAME);
          Object appVersion=wlsMBeanServer.getAttribute(appRuntime,WLS_APPLICATION_VERSION);
          String appIdentifier=null;
          if (appName != null) {
            if (appVersion != null) {
              appIdentifier=appName.toString() + ""String_Node_Str"" + appVersion.toString();
            }
 else {
              appIdentifier=appName.toString();
            }
            if (appIdentifier != null && appIdentifier.equals(applicationName)) {
              wlsMBeanServer.addNotificationListener(appRuntime,new MyNotificationListener(applicationName,WLS_IDENTIFIER),null,null);
              break;
            }
          }
        }
 catch (        Exception ex) {
        }
      }
    }
 catch (    Exception x) {
    }
  }
}"
63495,"/** 
 * INTERNAL: This method will set this listener to ignore events not issues by EclipseLink
 */
public void processEvents(){
  this.ignoreEvents=false;
}","/** 
 * INTERNAL: This method will set this listener to ignore events not issues by EclipseLink
 */
public void processEvents(){
  --ignoreDepth;
  if (ignoreDepth == 0) {
    this.ignoreEvents=false;
  }
}"
63496,"/** 
 * INTERNAL: This method will set this listener to ignore events not issues by EclipseLink
 */
public void ignoreEvents(){
  this.ignoreEvents=true;
}","/** 
 * INTERNAL: This method will set this listener to ignore events not issues by EclipseLink
 */
public void ignoreEvents(){
  ++ignoreDepth;
  this.ignoreEvents=true;
}"
63497,"public AdvancedFetchGroupTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildHOCKEYGEARTable());
  addTableDefinition(buildPADSTable());
  addTableDefinition(buildCHESTPROTECTORTable());
}","public AdvancedFetchGroupTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildHOCKEYGEARTable());
  addTableDefinition(buildPADSTable());
  addTableDefinition(buildCHESTPROTECTORTable());
  addTableDefinition(buildHELMETTable());
  addTableDefinition(buildHELMET_PROPERTIESTable());
}"
63498,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedFetchGroupJunitTest(""String_Node_Str""));
  return suite;
}"
63499,"public ReferenceKey(Object sourceObject,Mapping mapping){
  this.sourceObject=sourceObject;
  this.mapping=mapping;
}","public ReferenceKey(final Reference ref){
  this.sourceObject=ref.getSourceObject();
  this.mapping=ref.getMapping();
}"
63500,"public void setMapping(Mapping mapping){
  this.mapping=mapping;
}","public void setMapping(final ObjectReferenceMapping mapping){
  this.mapping=mapping;
}"
63501,"/** 
 * Add a Reference object to the list - these References will be resolved after unmarshalling is complete.
 * @param ref
 */
public void addReference(Reference ref){
  references.add(ref);
}","/** 
 * Add a Reference object to the list - these References will be resolved after unmarshalling is complete.
 */
public final void addReference(final Reference ref){
  final ReferenceKey key=new ReferenceKey(ref);
  final Reference previous=referencesMap.get(key);
  if (previous != null || ref.getSourceObject() instanceof Collection) {
    unluckyRefPositions.add(referencesMap.size() + unluckyReferences.size());
    unluckyReferences.add(ref);
  }
 else {
    referencesMap.put(key,ref);
  }
}"
63502,"/** 
 * The default constructor initializes the list of References.
 */
public ReferenceResolver(){
  references=new ArrayList();
  lookupKey=new ReferenceKey(null,null);
  cache=new HashMap<Class,Map<Object,Object>>();
}","/** 
 * The default constructor initializes the list of References.
 */
public ReferenceResolver(){
  referencesMap=new LinkedHashMap<ReferenceKey,Reference>();
  unluckyReferences=new ArrayList<Reference>();
  unluckyRefPositions=new LinkedList<Integer>();
  cache=new HashMap<Class,Map<Object,Object>>();
  refKey=new ReferenceKey();
}"
63503,"private Object getValue(Class clazz,CacheId primaryKey){
  Map<Object,Object> keyToObject=cache.get(clazz);
  if (null != keyToObject) {
    return keyToObject.get(primaryKey);
  }
  return null;
}","/** 
 * Retrieves value from   {@link #cache}.
 */
private Object getValue(Class clazz,CacheId primaryKey){
  Map<Object,Object> keyToObject=cache.get(clazz);
  if (null != keyToObject) {
    return keyToObject.get(primaryKey);
  }
  return null;
}"
63504,"@Override public int hashCode(){
  return this.mapping.hashCode() ^ this.sourceObject.hashCode();
}","@Override public final int hashCode(){
  int result=System.identityHashCode(sourceObject);
  result=31 * result + System.identityHashCode(mapping);
  return result;
}"
63505,"public void setSourceObject(Object obj){
  this.sourceObject=obj;
}","public void setSourceObject(final Object sourceObject){
  this.sourceObject=sourceObject;
}"
63506,"@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (obj.getClass() != this.getClass()) {
    return false;
  }
  ReferenceKey key=(ReferenceKey)obj;
  return this.sourceObject == key.getSourceObject() && this.mapping == key.getMapping();
}","@Override public final boolean equals(final Object o){
  if (this == o)   return true;
  if (!(o instanceof ReferenceKey))   return false;
  ReferenceKey that=(ReferenceKey)o;
  return sourceObject == that.sourceObject && mapping == that.mapping;
}"
63507,"/** 
 * INTERNAL:
 * @param session typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null 
 */
public void resolveReferences(CoreAbstractSession session,IDResolver userSpecifiedResolver,ErrorHandler handler){
  for (int x=0, referencesSize=references.size(); x < referencesSize; x++) {
    Reference reference=(Reference)references.get(x);
    Object referenceSourceObject=reference.getSourceObject();
    if (reference.getMapping() instanceof CollectionReferenceMapping) {
      CollectionReferenceMapping mapping=(CollectionReferenceMapping)reference.getMapping();
      CoreContainerPolicy cPolicy=mapping.getContainerPolicy();
      Object container=reference.getContainer();
      createPKVectorsFromMap(reference,mapping);
      if (reference.getPrimaryKey() == null) {
        continue;
      }
      Object value=null;
      if (!mapping.isWriteOnly()) {
        for (Iterator pkIt=((Vector)reference.getPrimaryKey()).iterator(); pkIt.hasNext(); ) {
          CacheId primaryKey=(CacheId)pkIt.next();
          if (userSpecifiedResolver != null) {
            final Callable c;
            try {
              if (primaryKey.getPrimaryKey().length > 1) {
                Map<String,Object> idWrapper=new HashMap<String,Object>();
                for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
                  ObjectReferenceMapping refMapping=(ObjectReferenceMapping)reference.getMapping();
                  String idName=(String)refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().get(y);
                  Object idValue=primaryKey.getPrimaryKey()[y];
                  idWrapper.put(idName,idValue);
                }
                c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
              }
 else {
                c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
              }
              if (c != null) {
                value=c.call();
              }
            }
 catch (            Exception e) {
              throw XMLMarshalException.unmarshalException(e);
            }
          }
 else {
            value=getValue(session,reference,primaryKey,handler);
          }
          if (value != null) {
            cPolicy.addInto(value,container,session);
          }
        }
      }
      mapping.setAttributeValueInObject(referenceSourceObject,container);
      InverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null && value != null) {
        CoreAttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        CoreContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(referenceSourceObject,backpointerContainer,session);
        }
      }
    }
 else     if (reference.getMapping() instanceof ObjectReferenceMapping) {
      CacheId primaryKey=(CacheId)reference.getPrimaryKey();
      Object value=null;
      if (userSpecifiedResolver != null) {
        final Callable c;
        try {
          if (primaryKey.getPrimaryKey().length > 1) {
            Map<String,Object> idWrapper=new HashMap<String,Object>();
            for (int y=0; y < primaryKey.getPrimaryKey().length; y++) {
              ObjectReferenceMapping refMapping=(ObjectReferenceMapping)reference.getMapping();
              String idName=(String)refMapping.getReferenceDescriptor().getPrimaryKeyFieldNames().get(y);
              Object idValue=primaryKey.getPrimaryKey()[y];
              idWrapper.put(idName,idValue);
            }
            c=userSpecifiedResolver.resolve(idWrapper,reference.getTargetClass());
          }
 else {
            c=userSpecifiedResolver.resolve(primaryKey.getPrimaryKey()[0],reference.getTargetClass());
          }
          if (c != null) {
            value=c.call();
          }
        }
 catch (        Exception e) {
          throw XMLMarshalException.unmarshalException(e);
        }
      }
 else {
        value=getValue(session,reference,primaryKey,handler);
      }
      ObjectReferenceMapping mapping=(ObjectReferenceMapping)reference.getMapping();
      if (value != null) {
        mapping.setAttributeValueInObject(reference.getSourceObject(),value);
      }
      if (null != reference.getSetting()) {
        reference.getSetting().setValue(value);
      }
      InverseReferenceMapping inverseReferenceMapping=mapping.getInverseReferenceMapping();
      if (inverseReferenceMapping != null) {
        CoreAttributeAccessor backpointerAccessor=inverseReferenceMapping.getAttributeAccessor();
        CoreContainerPolicy backpointerContainerPolicy=inverseReferenceMapping.getContainerPolicy();
        if (backpointerContainerPolicy == null) {
          backpointerAccessor.setAttributeValueInObject(value,referenceSourceObject);
        }
 else {
          Object backpointerContainer=backpointerAccessor.getAttributeValueFromObject(value);
          if (backpointerContainer == null) {
            backpointerContainer=backpointerContainerPolicy.containerInstance();
            backpointerAccessor.setAttributeValueInObject(value,backpointerContainer);
          }
          backpointerContainerPolicy.addInto(reference.getSourceObject(),backpointerContainer,session);
        }
      }
    }
  }
  references=new ArrayList<Reference>();
  cache.clear();
}","/** 
 * INTERNAL:
 * @param session               typically will be a unit of work
 * @param userSpecifiedResolver a user-provided subclass of IDResolver, may be null
 */
public final void resolveReferences(final CoreAbstractSession session,final IDResolver userSpecifiedResolver,final ErrorHandler handler){
}"
63508,"/** 
 * Store an instance by key based on a mapped class.  These values will be  used when it comes time to resolve the references.
 * @since EclipseLink 2.5.0
 */
public void putValue(Class clazz,Object key,Object object){
  Map<Object,Object> keyToObject=cache.get(clazz);
  if (null == keyToObject) {
    keyToObject=new HashMap<Object,Object>();
    cache.put(clazz,keyToObject);
  }
  keyToObject.put(key,object);
}","/** 
 * Store an instance by key based on a mapped class.  These values will be used when it comes time to resolve the references.
 * @since EclipseLink 2.5.0
 */
public final void putValue(final Class clazz,final Object key,final Object object){
  Map<Object,Object> keyToObject=cache.get(clazz);
  if (null == keyToObject) {
    keyToObject=new HashMap<Object,Object>();
    cache.put(clazz,keyToObject);
  }
  keyToObject.put(key,object);
}"
63509,"/** 
 * INTERNAL: Create primary key values to be used for cache lookup.  The map of primary keys on the reference is keyed on the reference descriptors primary key field names.  Each of these primary keys contains all of the values for a particular key - in the order that they we read in from the document.  For example, if the key field names are A, B, and C, and there are three reference object instances, then the hashmap would have the following: (A=[1,2,3], B=[X,Y,Z], C=[Jim, Joe, Jane]).  If the primary key field names on the reference descriptor contained [B, C, A], then the result of this method call would be reference.primaryKeys=([X, Jim, 1], [Y, Joe, 2], [Z, Jane, 3]).
 * @param reference
 */
private void createPKVectorsFromMap(Reference reference,CollectionReferenceMapping mapping){
  CoreDescriptor referenceDescriptor=mapping.getReferenceDescriptor();
  Vector pks=new Vector();
  if (null == referenceDescriptor) {
    CacheId pkVals=(CacheId)reference.getPrimaryKeyMap().get(null);
    if (null == pkVals) {
      return;
    }
    for (int x=0; x < pkVals.getPrimaryKey().length; x++) {
      Object[] values=new Object[1];
      values[0]=pkVals.getPrimaryKey()[x];
      pks.add(new CacheId(values));
    }
  }
 else {
    List pkFields=referenceDescriptor.getPrimaryKeyFieldNames();
    if (pkFields.isEmpty()) {
      return;
    }
    boolean init=true;
    for (Iterator pkFieldNameIt=pkFields.iterator(); pkFieldNameIt.hasNext(); ) {
      CacheId pkVals=(CacheId)reference.getPrimaryKeyMap().get(pkFieldNameIt.next());
      if (pkVals == null) {
        return;
      }
      if (init) {
        for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
          pks.add(new CacheId(new Object[0]));
        }
        init=false;
      }
      for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
        Object val=pkVals.getPrimaryKey()[i];
        ((CacheId)pks.get(i)).add(val);
      }
    }
  }
  reference.setPrimaryKey(pks);
}","/** 
 * INTERNAL: Create primary key values to be used for cache lookup.  The map of primary keys on the reference is keyed on the reference descriptors primary key field names.  Each of these primary keys contains all of the values for a particular key - in the order that they we read in from the document.  For example, if the key field names are A, B, and C, and there are three reference object instances, then the hashmap would have the following: (A=[1,2,3], B=[X,Y,Z], C=[Jim, Joe, Jane]).  If the primary key field names on the reference descriptor contained [B, C, A], then the result of this method call would be reference.primaryKeys=([X, Jim, 1], [Y, Joe, 2], [Z, Jane, 3]).
 */
private void createPKVectorsFromMap(final Reference reference,final CollectionReferenceMapping mapping){
  final CoreDescriptor referenceDescriptor=mapping.getReferenceDescriptor();
  final Vector<CacheId> pks=new Vector<CacheId>();
  if (null == referenceDescriptor) {
    final CacheId pkVals=(CacheId)reference.getPrimaryKeyMap().get(null);
    if (null == pkVals) {
      return;
    }
    for (int x=0; x < pkVals.getPrimaryKey().length; x++) {
      final Object[] values=new Object[1];
      values[0]=pkVals.getPrimaryKey()[x];
      pks.add(new CacheId(values));
    }
  }
 else {
    final List pkFields=referenceDescriptor.getPrimaryKeyFieldNames();
    if (pkFields.isEmpty()) {
      return;
    }
    boolean init=true;
    for (    Object pkField : pkFields) {
      final CacheId pkVals=(CacheId)reference.getPrimaryKeyMap().get(pkField);
      if (pkVals == null) {
        return;
      }
      if (init) {
        for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
          pks.add(new CacheId(new Object[0]));
        }
        init=false;
      }
      for (int i=0; i < pkVals.getPrimaryKey().length; i++) {
        final Object val=pkVals.getPrimaryKey()[i];
        (pks.get(i)).add(val);
      }
    }
  }
  reference.setPrimaryKey(pks);
}"
63510,"/** 
 * Return a reference for the given mapping and source object, that doesn't already contain an entry for the provided field. 
 * @return
 */
public Reference getReference(ObjectReferenceMapping mapping,Object sourceObject,Field xmlField){
  Field targetField=(Field)mapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
  String tgtXpath=null;
  if (!(mapping.getReferenceClass() == null || mapping.getReferenceClass() == Object.class)) {
    if (targetField != null) {
      tgtXpath=targetField.getXPath();
    }
  }
  for (int x=0; x < references.size(); x++) {
    Reference reference=(Reference)references.get(x);
    if (reference.getMapping() == mapping && reference.getSourceObject() == sourceObject) {
      if (reference.getPrimaryKeyMap().get(tgtXpath) == null) {
        return reference;
      }
    }
  }
  return null;
}","/** 
 * Return a reference for the given mapping and source object, that doesn't already contain an entry for the provided field.
 */
public final Reference getReference(final ObjectReferenceMapping mapping,final Object sourceObject,final Field xmlField){
  final Field targetField=(Field)mapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
  String tgtXpath=null;
  if (!(mapping.getReferenceClass() == null || mapping.getReferenceClass() == Object.class)) {
    if (targetField != null) {
      tgtXpath=targetField.getXPath();
    }
  }
  final ReferenceKey key=new ReferenceKey(sourceObject,mapping);
  Reference reference=referencesMap.get(key);
  if (reference != null && reference.getPrimaryKeyMap().get(tgtXpath) == null) {
    return reference;
  }
  for (  Reference reference1 : unluckyReferences) {
    if (reference1.getMapping() == mapping && reference1.getSourceObject() == sourceObject) {
      if (reference1.getPrimaryKeyMap().get(tgtXpath) == null) {
        return reference1;
      }
    }
  }
  return null;
}"
63511,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBCaseInsensitivityPerfTestCase.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JAXBCaseInsensitivityPerfTestCase.class);
  suite.addTestSuite(PerformanceReferenceResolverTestCase.class);
  return suite;
}"
63512,"@Column(name=""String_Node_Str"") @Temporal(TIMESTAMP) public Calendar getCalendar(){
  return calendar;
}","@Column(name=""String_Node_Str"") public Calendar getCalendar(){
  return calendar;
}"
63513,"public DateTime(java.sql.Date date,Time time,Timestamp timestamp,Date utilDate,Calendar calendar){
  this.date=date;
  this.time=time;
  this.timestamp=timestamp;
  this.utilDate=utilDate;
  this.calendar=calendar;
}","public DateTime(java.sql.Date date,Time time,Timestamp timestamp,Date utilDate,Calendar calendar){
  this.date=date;
  this.time=time;
  this.timestamp=timestamp;
  this.utilDate=utilDate;
  this.calendar=calendar;
  uniSelfMap=new HashMap<Date,DateTime>();
  uniSelfMap.put(new Date(),this);
}"
63514,"@Column(name=""String_Node_Str"") @Temporal(TIMESTAMP) public Date getUtilDate(){
  return utilDate;
}","@Column(name=""String_Node_Str"") @Temporal(TemporalType.TIMESTAMP) public Date getUtilDate(){
  return utilDate;
}"
63515,"public DateTimeTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildDateTimeTable());
}","public DateTimeTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildDateTimeTable());
  addTableDefinition(buildDateTimeSelfTable());
}"
63516,"public Mason(){
  awards=new HashMap<Date,String>();
}","public Mason(){
  awards=new HashMap<Date,String>();
  hoursWorked=new HashMap<Date,Integer>();
  uniSelf=new HashMap<Date,Mason>();
}"
63517,"public Map<String,String> getPrefixesToNamespaces(){
  if (null == prefixesToNamespaces) {
    prefixesToNamespaces=new HashMap<String,String>();
  }
  return prefixesToNamespaces;
}","public Map<String,String> getPrefixesToNamespaces(){
  if (null == prefixesToNamespaces) {
    prefixesToNamespaces=new LinkedHashMap<String,String>();
  }
  return prefixesToNamespaces;
}"
63518,"/** 
 * Adds a namespace to the collection of namespaces on the NamespaceResolver
 * @param prefix  The prefix for a namespace
 * @param namespaceURI  The namespace URI associated with the specified prefix
 */
public void put(String prefix,String namespaceURI){
  if (null == prefix || 0 == prefix.length()) {
    defaultNamespaceURI=namespaceURI;
  }
 else {
    getPrefixesToNamespaces().put(prefix,namespaceURI.intern());
  }
}","/** 
 * Adds a namespace to the collection of namespaces on the NamespaceResolver
 * @param prefix  The prefix for a namespace
 * @param namespaceURI  The namespace URI associated with the specified prefix
 */
public void put(String prefix,String namespaceURI){
  if (null == prefix || 0 == prefix.length()) {
    defaultNamespaceURI=namespaceURI;
  }
 else {
    Map<String,String> removedItems=null;
    if (getPrefixesToNamespaces().containsValue(namespaceURI.intern())) {
      removedItems=new LinkedHashMap<String,String>();
      for (      Map.Entry<String,String> prefixEntry : getPrefixesToNamespaces().entrySet()) {
        if (namespaceURI.intern().equals(prefixEntry.getValue())) {
          removedItems.put(prefixEntry.getKey(),prefixEntry.getValue());
        }
      }
    }
    if (null != removedItems) {
      for (      String key : removedItems.keySet()) {
        getPrefixesToNamespaces().remove(key);
      }
    }
    getPrefixesToNamespaces().put(prefix,namespaceURI.intern());
    if (null != removedItems) {
      for (      Map.Entry<String,String> removedEntry : removedItems.entrySet()) {
        getPrefixesToNamespaces().put(removedEntry.getKey(),removedEntry.getValue());
      }
    }
  }
}"
63519,"/** 
 * INTERNAL: Set the namespaces on the namespace resolver based on the specified Vector of Namespace objects Used for deployment XML
 * @param names A Vector of namespace URIs
 */
public void setNamespaces(Vector names){
  prefixesToNamespaces=new HashMap<String,String>(names.size());
  for (  Namespace namespace : (Vector<Namespace>)names) {
    if ((namespace.getPrefix() != null) && (namespace.getNamespaceURI() != null)) {
      prefixesToNamespaces.put(namespace.getPrefix(),namespace.getNamespaceURI());
    }
  }
}","/** 
 * INTERNAL: Set the namespaces on the namespace resolver based on the specified Vector of Namespace objects Used for deployment XML
 * @param names A Vector of namespace URIs
 */
public void setNamespaces(Vector names){
  prefixesToNamespaces=new LinkedHashMap<String,String>(names.size());
  for (  Namespace namespace : (Vector<Namespace>)names) {
    if ((namespace.getPrefix() != null) && (namespace.getNamespaceURI() != null)) {
      prefixesToNamespaces.put(namespace.getPrefix(),namespace.getNamespaceURI());
    }
  }
}"
63520,"/** 
 * Copy Constructor
 * @since EclipseLink 2.5.0
 */
public NamespaceResolver(NamespaceResolver namespaceResolver){
  this.defaultNamespaceURI=namespaceResolver.defaultNamespaceURI;
  Map<String,String> namespaceResolverPrefixesToNamespaces=namespaceResolver.prefixesToNamespaces;
  if (namespaceResolverPrefixesToNamespaces != null) {
    this.prefixesToNamespaces=new HashMap<String,String>(namespaceResolverPrefixesToNamespaces.size());
    this.prefixesToNamespaces.putAll(namespaceResolver.prefixesToNamespaces);
  }
  this.prefixCounter=namespaceResolver.prefixCounter;
  this.dom=namespaceResolver.dom;
}","/** 
 * Copy Constructor
 * @since EclipseLink 2.5.0
 */
public NamespaceResolver(NamespaceResolver namespaceResolver){
  this.defaultNamespaceURI=namespaceResolver.defaultNamespaceURI;
  Map<String,String> namespaceResolverPrefixesToNamespaces=namespaceResolver.prefixesToNamespaces;
  if (namespaceResolverPrefixesToNamespaces != null) {
    this.prefixesToNamespaces=new LinkedHashMap<String,String>(namespaceResolverPrefixesToNamespaces.size());
    this.prefixesToNamespaces.putAll(namespaceResolver.prefixesToNamespaces);
  }
  this.prefixCounter=namespaceResolver.prefixCounter;
  this.dom=namespaceResolver.dom;
}"
63521,"public void setFieldToNodeValues(Map<Field,NodeValue> fieldToNodeValues){
  this.fieldToNodeValues=fieldToNodeValues;
  this.classToNodeValues=new HashMap<Class,NodeValue>();
  for (  Field nextField : fieldToNodeValues.keySet()) {
    Class associatedClass=((Map<Field,Class>)this.xmlChoiceCollectionMapping.getFieldToClassMappings()).get(nextField);
    this.classToNodeValues.put(associatedClass,fieldToNodeValues.get(nextField));
  }
  Collection classes=this.classToNodeValues.keySet();
  for (  Class nextClass : ((Map<Class,Mapping>)this.xmlChoiceCollectionMapping.getChoiceElementMappingsByClass()).keySet()) {
    if (!(classes.contains(nextClass))) {
      Field field=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(nextClass);
      NodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceCollectionMapping,xmlField,(Mapping)xmlChoiceCollectionMapping.getChoiceElementMappingsByClass().get(nextClass));
      this.classToNodeValues.put(nextClass,nodeValue);
      NodeValue nodeValueForField=fieldToNodeValues.get(field);
      nodeValue.setXPathNode(nodeValueForField.getXPathNode());
    }
  }
}","public void setFieldToNodeValues(Map<Field,NodeValue> fieldToNodeValues){
  this.fieldToNodeValues=fieldToNodeValues;
  this.classToNodeValues=new HashMap<Class,List<FieldNodeValue>>();
  for (  Field nextField : fieldToNodeValues.keySet()) {
    Class associatedClass=((Map<Field,Class>)this.xmlChoiceCollectionMapping.getFieldToClassMappings()).get(nextField);
    if (classToNodeValues.containsKey(associatedClass)) {
      classToNodeValues.get(associatedClass).add(new FieldNodeValue(nextField,fieldToNodeValues.get(nextField)));
    }
 else {
      List<FieldNodeValue> newFieldToNodeValuesList=new ArrayList<FieldNodeValue>();
      newFieldToNodeValuesList.add(new FieldNodeValue(nextField,fieldToNodeValues.get(nextField)));
      this.classToNodeValues.put(associatedClass,newFieldToNodeValuesList);
    }
  }
  Collection classes=this.classToNodeValues.keySet();
  for (  Class nextClass : ((Map<Class,Mapping>)this.xmlChoiceCollectionMapping.getChoiceElementMappingsByClass()).keySet()) {
    if (!(classes.contains(nextClass))) {
      Field field=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(nextClass);
      NodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceCollectionMapping,xmlField,(Mapping)xmlChoiceCollectionMapping.getChoiceElementMappingsByClass().get(nextClass));
      List<FieldNodeValue> newFieldToNodeValuesList=new ArrayList<FieldNodeValue>();
      newFieldToNodeValuesList.add(new FieldNodeValue(field,nodeValue));
      this.classToNodeValues.put(nextClass,newFieldToNodeValuesList);
      NodeValue nodeValueForField=fieldToNodeValues.get(field);
      nodeValue.setXPathNode(nodeValueForField.getXPathNode());
    }
  }
}"
63522,"private NodeValue getNodeValueForValue(Object value){
  if (value == null) {
    Iterator<NodeValue> nodeValues=fieldToNodeValues.values().iterator();
    while (nodeValues.hasNext()) {
      XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalNodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)nodeValues.next();
      NodeValue nextNodeValue=unmarshalNodeValue.getChoiceElementMarshalNodeValue();
      if (nextNodeValue instanceof MappingNodeValue) {
        Mapping nextMapping=((MappingNodeValue)nextNodeValue).getMapping();
        if (nextMapping.isAbstractCompositeCollectionMapping()) {
          if (((CompositeCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
          if (((DirectCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping instanceof BinaryDataCollectionMapping) {
          if (((BinaryDataCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
      }
    }
    return null;
  }
  Field associatedField=null;
  NodeValue nodeValue=null;
  if (value instanceof Root) {
    Root rootValue=(Root)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    Object fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      if (xmlChoiceCollectionMapping.isAny()) {
        return this.anyNodeValue;
      }
      Class theClass=fieldValue.getClass();
      while (associatedField == null) {
        associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
        if (theClass.getSuperclass() != null) {
          theClass=theClass.getSuperclass();
        }
 else {
          break;
        }
      }
    }
    if (associatedField != null) {
      nodeValue=this.fieldToNodeValues.get(associatedField);
    }
  }
 else {
    Class theClass=value.getClass();
    while (associatedField == null) {
      associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
      nodeValue=classToNodeValues.get(theClass);
      if (theClass.getSuperclass() != null) {
        theClass=theClass.getSuperclass();
      }
 else {
        break;
      }
    }
  }
  if (associatedField == null) {
    List<Field> sourceFields=null;
    Class theClass=value.getClass();
    while (theClass != null) {
      sourceFields=(List<Field>)xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(theClass);
      if (sourceFields != null) {
        break;
      }
      theClass=theClass.getSuperclass();
    }
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
      nodeValue=fieldToNodeValues.get(associatedField);
    }
  }
  if (nodeValue != null) {
    return nodeValue;
  }
  if (associatedField != null) {
    return fieldToNodeValues.get(associatedField);
  }
  if (xmlChoiceCollectionMapping.isMixedContent() && value instanceof String) {
    return this;
  }
  if (xmlChoiceCollectionMapping.isAny()) {
    return anyNodeValue;
  }
  return null;
}","private NodeValue getNodeValueForValue(Object value){
  if (value == null) {
    Iterator<NodeValue> nodeValues=fieldToNodeValues.values().iterator();
    while (nodeValues.hasNext()) {
      XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalNodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)nodeValues.next();
      NodeValue nextNodeValue=unmarshalNodeValue.getChoiceElementMarshalNodeValue();
      if (nextNodeValue instanceof MappingNodeValue) {
        Mapping nextMapping=((MappingNodeValue)nextNodeValue).getMapping();
        if (nextMapping.isAbstractCompositeCollectionMapping()) {
          if (((CompositeCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
          if (((DirectCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping instanceof BinaryDataCollectionMapping) {
          if (((BinaryDataCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
      }
    }
    return null;
  }
  Field associatedField=null;
  NodeValue nodeValue=null;
  if (value instanceof Root) {
    Root rootValue=(Root)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    Object fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      if (xmlChoiceCollectionMapping.isAny()) {
        return this.anyNodeValue;
      }
      Class theClass=fieldValue.getClass();
      while (associatedField == null) {
        associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
        if (theClass.getSuperclass() != null) {
          theClass=theClass.getSuperclass();
        }
 else {
          break;
        }
      }
    }
    if (associatedField != null) {
      nodeValue=this.fieldToNodeValues.get(associatedField);
    }
  }
 else {
    Class theClass=value.getClass();
    while (associatedField == null) {
      associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
      List<FieldNodeValue> fieldNodes=classToNodeValues.get(theClass);
      nodeValue=null;
      if (null != fieldNodes) {
        if (null != associatedField && fieldNodes.size() > 1) {
          for (          FieldNodeValue fieldNode : fieldNodes) {
            if (fieldNode.getField().equals(associatedField)) {
              nodeValue=fieldNode.getNodeValue();
            }
          }
        }
        if (null == nodeValue && fieldNodes.size() > 0) {
          nodeValue=fieldNodes.get(0).getNodeValue();
        }
      }
      if (theClass.getSuperclass() != null) {
        theClass=theClass.getSuperclass();
      }
 else {
        break;
      }
    }
  }
  if (associatedField == null) {
    List<Field> sourceFields=null;
    Class theClass=value.getClass();
    while (theClass != null) {
      sourceFields=(List<Field>)xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(theClass);
      if (sourceFields != null) {
        break;
      }
      theClass=theClass.getSuperclass();
    }
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
      nodeValue=fieldToNodeValues.get(associatedField);
    }
  }
  if (nodeValue != null) {
    return nodeValue;
  }
  if (associatedField != null) {
    return fieldToNodeValues.get(associatedField);
  }
  if (xmlChoiceCollectionMapping.isMixedContent() && value instanceof String) {
    return this;
  }
  if (xmlChoiceCollectionMapping.isAny()) {
    return anyNodeValue;
  }
  return null;
}"
63523,"public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null != nonAttributeChildren && !nonAttributeChildren.contains(textXPathNode)) {
        nonAttributeChildren.add(textXPathNode);
      }
      if (aNodeValue instanceof XMLCompositeObjectMappingNodeValue) {
        if (null == selfChildren) {
          selfChildren=new ArrayList<XPathNode>();
        }
        selfChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      if (null != textNode) {
        nonAttributeChildren.add(textNode);
      }
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new HashMap();
    }
    if (anXPathFragment != null && Constants.SCHEMA_TYPE_ATTRIBUTE.equals(anXPathFragment.getLocalName())) {
      hasTypeChild=true;
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue || (aNodeValue instanceof XMLVariableXPathObjectMappingNodeValue && ((XMLVariableXPathObjectMappingNodeValue)aNodeValue).getMapping().isAttribute()) || (aNodeValue instanceof XMLVariableXPathCollectionMappingNodeValue && ((XMLVariableXPathCollectionMappingNodeValue)aNodeValue).getMapping().isAttribute())) {
      setAnyAttributeNodeValue((MappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  this.hasPredicateChildren=hasPredicateChildren || anXPathFragment.getPredicate() != null;
  if (this.getNonAttributeChildren() != null && this.hasPredicateChildren) {
    for (    XPathNode nextChild : this.getNonAttributeChildren()) {
      XPathFragment nextFrag=nextChild.getXPathFragment();
      if (nextFrag != null && nextFrag.equals(anXPathFragment,true)) {
        if (nextFrag.getPredicate() == null && anXPathFragment.getPredicate() != null) {
          nextChild.setHasPredicateSiblings(true);
        }
 else         if (anXPathFragment.getPredicate() == null && nextFrag.getPredicate() != null) {
          xPathNode.setHasPredicateSiblings(true);
        }
      }
    }
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}","public XPathNode addChild(XPathFragment anXPathFragment,NodeValue aNodeValue,NamespaceResolver namespaceResolver){
  if (null != anXPathFragment && anXPathFragment.nameIsText()) {
    if (aNodeValue.isOwningNode(anXPathFragment)) {
      XPathNode textXPathNode=this.getTextNode();
      if (textXPathNode == null) {
        textXPathNode=new XPathNode();
      }
      textXPathNode.setParent(this);
      textXPathNode.setXPathFragment(anXPathFragment);
      if (aNodeValue.isMarshalNodeValue()) {
        textXPathNode.setMarshalNodeValue(aNodeValue);
      }
      if (aNodeValue.isUnmarshalNodeValue()) {
        textXPathNode.setUnmarshalNodeValue(aNodeValue);
      }
      this.setTextNode(textXPathNode);
      if (null != nonAttributeChildren && !nonAttributeChildren.contains(textXPathNode)) {
        nonAttributeChildren.add(textXPathNode);
      }
      if (aNodeValue instanceof XMLCompositeObjectMappingNodeValue) {
        if (null == selfChildren) {
          selfChildren=new ArrayList<XPathNode>();
        }
        selfChildren.add(textXPathNode);
      }
      return textXPathNode;
    }
  }
  if (anXPathFragment != null && namespaceResolver != null && anXPathFragment.getNamespaceURI() == null && !anXPathFragment.nameIsText()) {
    if (!anXPathFragment.isAttribute()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
 else     if (anXPathFragment.hasNamespace()) {
      anXPathFragment.setNamespaceURI(namespaceResolver.resolveNamespacePrefix(anXPathFragment.getPrefix()));
    }
  }
  XPathNode xPathNode=new XPathNode();
  xPathNode.setXPathFragment(anXPathFragment);
  List children;
  Map childrenMap;
  if ((anXPathFragment != null) && anXPathFragment.isAttribute()) {
    if (null == attributeChildren) {
      attributeChildren=new ArrayList();
    }
    if (null == attributeChildrenMap) {
      attributeChildrenMap=new HashMap();
    }
    children=attributeChildren;
    childrenMap=attributeChildrenMap;
  }
 else {
    if (null == nonAttributeChildren) {
      nonAttributeChildren=new ArrayList();
      if (null != textNode) {
        nonAttributeChildren.add(textNode);
      }
    }
    if (null == nonAttributeChildrenMap) {
      nonAttributeChildrenMap=new LinkedHashMap();
    }
    if (anXPathFragment != null && Constants.SCHEMA_TYPE_ATTRIBUTE.equals(anXPathFragment.getLocalName())) {
      hasTypeChild=true;
    }
    children=nonAttributeChildren;
    childrenMap=nonAttributeChildrenMap;
  }
  if (null == anXPathFragment) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
    xPathNode.setParent(this);
    if (aNodeValue instanceof XMLAnyAttributeMappingNodeValue || (aNodeValue instanceof XMLVariableXPathObjectMappingNodeValue && ((XMLVariableXPathObjectMappingNodeValue)aNodeValue).getMapping().isAttribute()) || (aNodeValue instanceof XMLVariableXPathCollectionMappingNodeValue && ((XMLVariableXPathCollectionMappingNodeValue)aNodeValue).getMapping().isAttribute())) {
      setAnyAttributeNodeValue((MappingNodeValue)aNodeValue);
      anyAttributeNode=xPathNode;
    }
 else {
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      setAnyNode(xPathNode);
    }
    return xPathNode;
  }
  this.hasPredicateChildren=hasPredicateChildren || anXPathFragment.getPredicate() != null;
  if (this.getNonAttributeChildren() != null && this.hasPredicateChildren) {
    for (    XPathNode nextChild : this.getNonAttributeChildren()) {
      XPathFragment nextFrag=nextChild.getXPathFragment();
      if (nextFrag != null && nextFrag.equals(anXPathFragment,true)) {
        if (nextFrag.getPredicate() == null && anXPathFragment.getPredicate() != null) {
          nextChild.setHasPredicateSiblings(true);
        }
 else         if (anXPathFragment.getPredicate() == null && nextFrag.getPredicate() != null) {
          xPathNode.setHasPredicateSiblings(true);
        }
      }
    }
  }
  boolean isSelfFragment=XPathFragment.SELF_FRAGMENT.equals(anXPathFragment);
  if (isSelfFragment) {
    children.add(xPathNode);
    if (null == selfChildren) {
      selfChildren=new ArrayList<XPathNode>();
    }
    selfChildren.add(xPathNode);
  }
 else {
    int index=children.indexOf(xPathNode);
    if (index >= 0) {
      xPathNode=(XPathNode)children.get(index);
    }
 else {
      xPathNode.setParent(this);
      if (!children.contains(xPathNode)) {
        children.add(xPathNode);
      }
      childrenMap.put(anXPathFragment,xPathNode);
    }
  }
  if (aNodeValue.isOwningNode(anXPathFragment)) {
    if (aNodeValue.isMarshalNodeValue()) {
      xPathNode.setMarshalNodeValue(aNodeValue);
    }
    if (aNodeValue.isUnmarshalNodeValue() && xPathNode.getUnmarshalNodeValue() == null) {
      xPathNode.setUnmarshalNodeValue(aNodeValue);
    }
  }
 else {
    XPathFragment nextFragment=anXPathFragment.getNextFragment();
    xPathNode.addChild(nextFragment,aNodeValue,namespaceResolver);
  }
  return xPathNode;
}"
63524,"@Embedded @AttributeOverrides({@AttributeOverride(name=""String_Node_Str"",column=@Column(name=""String_Node_Str"",nullable=false)),@AttributeOverride(name=""String_Node_Str"",column=@Column(name=""String_Node_Str"",nullable=true))}) public EmploymentPeriod getPeriod(){
  return period;
}","@Embedded @AttributeOverrides({@AttributeOverride(name=""String_Node_Str"",column=@Column(nullable=false)),@AttributeOverride(name=""String_Node_Str"",column=@Column(name=""String_Node_Str"",nullable=true))}) public EmploymentPeriod getPeriod(){
  return period;
}"
63525,"/** 
 * INTERNAL: Process the attribute overrides for the given embedded mapping. Attribute  overrides are used to apply the correct field name translations of direct  fields. Note an embedded object mapping may be supported as the map key to an element-collection, 1-M and M-M mapping.
 */
protected void processAttributeOverrides(List<AttributeOverrideMetadata> attributeOverrides,AggregateObjectMapping aggregateObjectMapping,MetadataDescriptor embeddableDescriptor){
  Map<String,AttributeOverrideMetadata> mergedAttributeOverrides=getAttributeOverrides(attributeOverrides);
  for (  String attributeName : mergedAttributeOverrides.keySet()) {
    AttributeOverrideMetadata attributeOverride=mergedAttributeOverrides.get(attributeName);
    MappingAccessor mappingAccessor=embeddableDescriptor.getMappingAccessor(attributeName);
    if (mappingAccessor == null) {
      throw ValidationException.embeddableAttributeOverrideNotFound(embeddableDescriptor.getJavaClass(),attributeName,getJavaClass(),getAttributeName());
    }
 else     if (!mappingAccessor.isBasic()) {
      throw ValidationException.invalidEmbeddableAttributeForAttributeOverride(embeddableDescriptor.getJavaClass(),attributeName,getJavaClass(),getAttributeName());
    }
 else {
      addFieldNameTranslation(aggregateObjectMapping,attributeName,attributeOverride.getColumn().getDatabaseField(),mappingAccessor);
    }
  }
}","/** 
 * INTERNAL: Process the attribute overrides for the given embedded mapping. Attribute  overrides are used to apply the correct field name translations of direct  fields. Note an embedded object mapping may be supported as the map key to an element-collection, 1-M and M-M mapping.
 */
protected void processAttributeOverrides(List<AttributeOverrideMetadata> attributeOverrides,AggregateObjectMapping aggregateObjectMapping,MetadataDescriptor embeddableDescriptor){
  Map<String,AttributeOverrideMetadata> mergedAttributeOverrides=getAttributeOverrides(attributeOverrides);
  for (  String attributeName : mergedAttributeOverrides.keySet()) {
    AttributeOverrideMetadata attributeOverride=mergedAttributeOverrides.get(attributeName);
    MappingAccessor mappingAccessor=embeddableDescriptor.getMappingAccessor(attributeName);
    String colName=attributeOverride.getColumn().getName();
    if (colName == null || colName.isEmpty()) {
      String prevName=mappingAccessor.getDefaultAttributeName();
      attributeOverride.getColumn().setName(prevName);
    }
    if (mappingAccessor == null) {
      throw ValidationException.embeddableAttributeOverrideNotFound(embeddableDescriptor.getJavaClass(),attributeName,getJavaClass(),getAttributeName());
    }
 else     if (!mappingAccessor.isBasic()) {
      throw ValidationException.invalidEmbeddableAttributeForAttributeOverride(embeddableDescriptor.getJavaClass(),attributeName,getJavaClass(),getAttributeName());
    }
 else {
      addFieldNameTranslation(aggregateObjectMapping,attributeName,attributeOverride.getColumn().getDatabaseField(),mappingAccessor);
    }
  }
}"
63526,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(XmlAdapterCompositeTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeDirectCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterDirectTestCases.class);
  suite.addTestSuite(XmlAdapterDirectNullTestCases.class);
  suite.addTestSuite(XmlAdapterDirectExceptionTestCases.class);
  suite.addTestSuite(ListToStringAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdaptersTestCases.class);
  suite.addTestSuite(ClassLevelAdapterTestCases.class);
  suite.addTestSuite(JAXBMapWithAdapterTestCases.class);
  suite.addTestSuite(ObjectListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefTestCases.class);
  suite.addTestSuite(XmlAdapterHexBinaryTestCases.class);
  suite.addTestSuite(XmlAdapterListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterNestedListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterListMultipleBarTestCases.class);
  suite.addTestSuite(AdapterWithElementsTestCases.class);
  suite.addTestSuite(AdapterWithGenericsTestCases.class);
  suite.addTestSuite(XmlAdapterDirectCollectionArrayTestCases.class);
  suite.addTestSuite(ByteArrayTestCases.class);
  suite.addTestSuite(CollapsedStringListTestCases.class);
  suite.addTestSuite(CollapsedStringTestCases.class);
  suite.addTestSuite(NormalizedStringListTestCases.class);
  suite.addTestSuite(NormalizedStringTestCases.class);
  suite.addTestSuite(AdapterWithInheritanceTestCases.class);
  suite.addTestSuite(AdapterEnumTestCases.class);
  suite.addTestSuite(GenericAdapterTestCases.class);
  suite.addTestSuite(NoArgCtorAdapterTestCases.class);
  suite.addTestSuite(XmlAdapterSchemaTypeTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(XmlAdapterCompositeTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeDirectCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterDirectTestCases.class);
  suite.addTestSuite(XmlAdapterDirectNullTestCases.class);
  suite.addTestSuite(XmlAdapterDirectExceptionTestCases.class);
  suite.addTestSuite(ListToStringAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdaptersTestCases.class);
  suite.addTestSuite(ClassLevelAdapterTestCases.class);
  suite.addTestSuite(JAXBMapWithAdapterTestCases.class);
  suite.addTestSuite(ObjectListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefTestCases.class);
  suite.addTestSuite(XmlAdapterHexBinaryTestCases.class);
  suite.addTestSuite(XmlAdapterListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterNestedListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterListMultipleBarTestCases.class);
  suite.addTestSuite(AdapterWithElementsTestCases.class);
  suite.addTestSuite(AdapterWithGenericsTestCases.class);
  suite.addTestSuite(XmlAdapterDirectCollectionArrayTestCases.class);
  suite.addTestSuite(ByteArrayTestCases.class);
  suite.addTestSuite(CollapsedStringListTestCases.class);
  suite.addTestSuite(CollapsedStringTestCases.class);
  suite.addTestSuite(NormalizedStringListTestCases.class);
  suite.addTestSuite(NormalizedStringTestCases.class);
  suite.addTestSuite(AdapterWithInheritanceTestCases.class);
  suite.addTestSuite(AdapterEnumTestCases.class);
  suite.addTestSuite(AdapterEnumMoreGenericTestCases.class);
  suite.addTestSuite(GenericAdapterTestCases.class);
  suite.addTestSuite(NoArgCtorAdapterTestCases.class);
  suite.addTestSuite(XmlAdapterSchemaTypeTestCases.class);
  return suite;
}"
63527,"public Object createEntityListenerAndInjectDependancies(Class entityListenerClass) throws NamingException {
  AnnotatedType<Object> aType=beanManager.createAnnotatedType(entityListenerClass);
  InjectionTarget<Object> injectionTarget=beanManager.<Object>createInjectionTarget(aType);
  Object entityListener=injectionTarget.produce(beanManager.<Object>createCreationalContext(null));
synchronized (injectionTargets) {
    injectionTargets.put(entityListener,injectionTarget);
  }
  injectionTarget.postConstruct(entityListener);
  creationalContext=beanManager.<Object>createCreationalContext(null);
  injectionTarget.inject(entityListener,creationalContext);
  return entityListener;
}","public Object createEntityListenerAndInjectDependancies(Class entityListenerClass) throws NamingException {
  AnnotatedType<Object> aType=beanManager.createAnnotatedType(entityListenerClass);
  InjectionTarget<Object> injectionTarget=beanManager.<Object>createInjectionTarget(aType);
  Object entityListener=injectionTarget.produce(beanManager.<Object>createCreationalContext(null));
synchronized (injectionTargets) {
    injectionTargets.put(entityListener,injectionTarget);
  }
  creationalContext=beanManager.<Object>createCreationalContext(null);
  injectionTarget.inject(entityListener,creationalContext);
  injectionTarget.postConstruct(entityListener);
  return entityListener;
}"
63528,"/** 
 * INTERNAL: Traverse the object to find references to objects not registered in this unit of work. Any unregistered new objects found will be persisted or an error will be thrown depending on the mapping's cascade persist. References to deleted objects will also currently cause them to be undeleted.
 */
public void discoverUnregisteredNewObjects(Map clones,Map newObjects,Map unregisteredExistingObjects,Map visitedObjects){
  if (this.discoverUnregisteredNewObjectsWithoutPersist) {
    super.discoverUnregisteredNewObjects(clones,newObjects,unregisteredExistingObjects,visitedObjects);
  }
 else {
    Set<Object> cascadePersistErrors=new HashSet<Object>();
    for (Iterator clonesEnum=clones.keySet().iterator(); clonesEnum.hasNext(); ) {
      discoverAndPersistUnregisteredNewObjects(clonesEnum.next(),false,newObjects,unregisteredExistingObjects,visitedObjects,cascadePersistErrors);
    }
    if (!cascadePersistErrors.isEmpty()) {
      throw new IllegalStateException(ExceptionLocalization.buildMessage(""String_Node_Str"",cascadePersistErrors.toArray()));
    }
  }
}","/** 
 * INTERNAL: Traverse the object to find references to objects not registered in this unit of work. Any unregistered new objects found will be persisted or an error will be thrown depending on the mapping's cascade persist. References to deleted objects will also currently cause them to be undeleted.
 */
public void discoverUnregisteredNewObjects(Map clones,Map newObjects,Map unregisteredExistingObjects,Map visitedObjects){
  if (this.discoverUnregisteredNewObjectsWithoutPersist) {
    super.discoverUnregisteredNewObjects(clones,newObjects,unregisteredExistingObjects,visitedObjects);
  }
 else {
    Set<Object> cascadePersistErrors=new IdentityHashSet();
    for (Iterator clonesEnum=clones.keySet().iterator(); clonesEnum.hasNext(); ) {
      discoverAndPersistUnregisteredNewObjects(clonesEnum.next(),false,newObjects,unregisteredExistingObjects,visitedObjects,cascadePersistErrors);
    }
    if (!cascadePersistErrors.isEmpty()) {
      throw new IllegalStateException(ExceptionLocalization.buildMessage(""String_Node_Str"",cascadePersistErrors.toArray()));
    }
  }
}"
63529,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  List<String> tests=new ArrayList<String>();
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  Collections.sort(tests);
  for (  String test : tests) {
    suite.addTest(new EntityManagerJUnitTestSuite(test));
  }
  if (!isJPA10()) {
    suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  }
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  List<String> tests=new ArrayList<String>();
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  tests.add(""String_Node_Str"");
  if (!isJPA10()) {
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
    tests.add(""String_Node_Str"");
  }
  Collections.sort(tests);
  for (  String test : tests) {
    suite.addTest(new EntityManagerJUnitTestSuite(test));
  }
  if (!isJPA10()) {
    suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  }
  suite.addTest(new EntityManagerJUnitTestSuite(""String_Node_Str""));
  return suite;
}"
63530,"/** 
 * INTERNAL: Allow the inheritance properties of the descriptor to be initialized. The descriptor's parent must first be initialized.
 */
public void initializeFromParent(CachePolicy parentPolicy,ClassDescriptor descriptor,ClassDescriptor descriptorDescriptor,AbstractSession session) throws DescriptorException {
  if (!parentPolicy.isSharedIsolation()) {
    if (!isIsolated() && (getCacheIsolation() != parentPolicy.getCacheIsolation())) {
      session.log(SessionLog.WARNING,SessionLog.METADATA,""String_Node_Str"",new Object[]{descriptorDescriptor.getAlias(),parentPolicy.getCacheIsolation(),descriptor.getAlias(),getCacheIsolation()});
      setCacheIsolation(parentPolicy.getCacheIsolation());
    }
  }
  for (  CacheIndex index : parentPolicy.getCacheIndexes().values()) {
    addCacheIndex(index);
  }
  if ((getDatabaseChangeNotificationType() == null) && (parentPolicy.getDatabaseChangeNotificationType() != null)) {
    setDatabaseChangeNotificationType(parentPolicy.getDatabaseChangeNotificationType());
  }
  if ((getCacheSynchronizationType() == UNDEFINED_OBJECT_CHANGE_BEHAVIOR) && (parentPolicy.getCacheSynchronizationType() != UNDEFINED_OBJECT_CHANGE_BEHAVIOR)) {
    setCacheSynchronizationType(parentPolicy.getCacheSynchronizationType());
  }
}","/** 
 * INTERNAL: Allow the inheritance properties of the descriptor to be initialized. The descriptor's parent must first be initialized.
 */
public void initializeFromParent(CachePolicy parentPolicy,ClassDescriptor descriptor,ClassDescriptor descriptorDescriptor,AbstractSession session) throws DescriptorException {
  if (!parentPolicy.isSharedIsolation()) {
    boolean copyParrent=cacheable == null || cacheable == false;
    if (!isIsolated() && (getCacheIsolation() != parentPolicy.getCacheIsolation()) && copyParrent) {
      session.log(SessionLog.WARNING,SessionLog.METADATA,""String_Node_Str"",new Object[]{descriptorDescriptor.getAlias(),parentPolicy.getCacheIsolation(),descriptor.getAlias(),getCacheIsolation()});
      setCacheIsolation(parentPolicy.getCacheIsolation());
    }
  }
  for (  CacheIndex index : parentPolicy.getCacheIndexes().values()) {
    addCacheIndex(index);
  }
  if ((getDatabaseChangeNotificationType() == null) && (parentPolicy.getDatabaseChangeNotificationType() != null)) {
    setDatabaseChangeNotificationType(parentPolicy.getDatabaseChangeNotificationType());
  }
  if ((getCacheSynchronizationType() == UNDEFINED_OBJECT_CHANGE_BEHAVIOR) && (parentPolicy.getCacheSynchronizationType() != UNDEFINED_OBJECT_CHANGE_BEHAVIOR)) {
    setCacheSynchronizationType(parentPolicy.getCacheSynchronizationType());
  }
}"
63531,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
  }
  return suite;
}"
63532,"/** 
 * INTERNAL: Set the cacheable value of this descriptor.
 */
public void setCacheable(Boolean cacheable){
  m_cacheable=cacheable;
}","/** 
 * INTERNAL: Set entity @Cacheable annotation value.
 * @param cacheable Entity @Cacheable annotation value. This value refersto current class only and does not contain inherited value from parent classes.
 */
public void setCacheable(Boolean cacheable){
  m_cacheable=cacheable;
}"
63533,"/** 
 * INTERNAL: Process a caching metadata for this entity accessor logging ignore warnings where necessary.
 */
@Override protected void processCaching(){
  if (getProject().isSharedCacheModeAll()) {
    if (getDescriptor().isCacheableFalse()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_FALSE,getJavaClass());
    }
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeNone()) {
    if (getDescriptor().isCacheableTrue()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_TRUE,getJavaClass());
    }
    getDescriptor().useNoCache();
  }
 else   if (getProject().isSharedCacheModeEnableSelective()) {
    if (!getDescriptor().isCacheableTrue()) {
      getDescriptor().useNoCache();
    }
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeDisableSelective() || getProject().isSharedCacheModeUnspecified()) {
    if (getDescriptor().isCacheableFalse()) {
      getDescriptor().useNoCache();
    }
    processCachingMetadata();
  }
}","/** 
 * INTERNAL: Process a caching metadata for this entity accessor logging ignore warnings where necessary.
 */
@Override protected void processCaching(){
  if (getProject().isSharedCacheModeAll()) {
    if (getDescriptor().isCacheableFalse()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_FALSE,getJavaClass());
    }
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeNone()) {
    if (getDescriptor().isCacheableTrue()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_TRUE,getJavaClass());
    }
    getDescriptor().useNoCache();
  }
 else   if (getProject().isSharedCacheModeEnableSelective()) {
    if (!getDescriptor().isCacheableTrue()) {
      getDescriptor().useNoCache();
    }
    getDescriptor().setCacheableInDescriptor();
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeDisableSelective() || getProject().isSharedCacheModeUnspecified()) {
    if (getDescriptor().isCacheableFalse()) {
      getDescriptor().useNoCache();
    }
    getDescriptor().setCacheableInDescriptor();
    processCachingMetadata();
  }
}"
63534,"public EntityListenerInjectionManagerImpl(Object beanManager) throws NamingException {
  if (beanManager != null) {
    this.beanManager=(BeanManager)beanManager;
  }
 else {
    Context context=new InitialContext();
    beanManager=(BeanManager)context.lookup(""String_Node_Str"");
  }
  injectionTargets=new HashMap<Object,InjectionTarget<Object>>();
}","public EntityListenerInjectionManagerImpl(Object beanManagerInstance) throws NamingException {
  if (beanManagerInstance == null) {
    Context context=new InitialContext();
    beanManagerInstance=context.lookup(""String_Node_Str"");
  }
  beanManager=(BeanManager)beanManagerInstance;
  injectionTargets=new HashMap<Object,InjectionTarget<Object>>();
}"
63535,"public DatabaseField buildField(DatabaseField field,DatabaseTable relationTable){
  DatabaseField builtField=getObjectBuilder().getFieldsMap().get(field);
  if (builtField == null) {
    builtField=field;
    DatabaseTable table;
    if (relationTable != null && field.hasTableName() && field.getTableName().equals(relationTable.getName())) {
      table=relationTable;
    }
 else     if (field.hasTableName()) {
      table=getTable(field.getTableName());
    }
 else {
      table=getDefaultTable();
    }
    field.setTable(table);
    getObjectBuilder().getFieldsMap().put(builtField,builtField);
  }
  return builtField;
}","public DatabaseField buildField(DatabaseField field,DatabaseTable relationTable){
  DatabaseField builtField=getObjectBuilder().getFieldsMap().get(field);
  if (builtField == null) {
    builtField=field;
    DatabaseTable table;
    if (relationTable != null && field.hasTableName() && field.getTableName().equals(relationTable.getName())) {
      table=relationTable;
    }
 else     if (relationTable != null && !field.hasTableName()) {
      table=relationTable;
    }
 else     if (field.hasTableName()) {
      table=getTable(field.getTableName());
    }
 else {
      table=getDefaultTable();
    }
    field.setTable(table);
    getObjectBuilder().getFieldsMap().put(builtField,builtField);
  }
  return builtField;
}"
63536,"public RelationshipsTableManager(){
  setName(""String_Node_Str"");
  addTableDefinition(buildCMP3_CUSTOMERTable());
  addTableDefinition(buildCMP3_ITEMTable());
  addTableDefinition(buildCMP3_ISOLATEDITEMTable());
  addTableDefinition(buildCMP3_ORDERTable());
  addTableDefinition(buildORDERCARDTable());
  addTableDefinition(buildORDERLABELTable());
  addTableDefinition(buildAUDITORTable());
  addTableDefinition(buildORDER_AUDITORTable());
  addTableDefinition(buildORDER_ORDERCARDTable());
  addTableDefinition(buildORDER_ORDERLABELTable());
  addTableDefinition(buildCMP3_SALESPERSONTable());
  addTableDefinition(buildCUSTOMER_CUSTOMERTable());
  addTableDefinition(buildCUSTOMER_CUSTOMER2Table());
  addTableDefinition(buildCMP3_ENTITYATable());
  addTableDefinition(buildCMP3_ENTITYBTable());
  addTableDefinition(buildCMP3_ENTITYA_ENTITYBTable());
  addTableDefinition(buildCMP3_ENTITYCTable());
  addTableDefinition(buildCMP3_ENTITYDTable());
  addTableDefinition(buildCMP3_UNIDIR_ENTITYC_ENTITYDTable());
  addTableDefinition(buildMATTELTable());
  addTableDefinition(buildLEGOTable());
  addTableDefinition(buildMEGABRANDSTable());
  addTableDefinition(buildNAMCOTable());
  addTableDefinition(buildServiceCallTable());
  addTableDefinition(buildCustomerServiceRepTable());
  addTableDefinition(buildCustRepTable());
}","public RelationshipsTableManager(){
  setName(""String_Node_Str"");
  addTableDefinition(buildCMP3_CUSTOMERTable());
  addTableDefinition(buildCMP3_ITEMTable());
  addTableDefinition(buildCMP3_ISOLATEDITEMTable());
  addTableDefinition(buildCMP3_ORDERTable());
  addTableDefinition(buildORDERCARDTable());
  addTableDefinition(buildORDERLABELTable());
  addTableDefinition(buildAUDITORTable());
  addTableDefinition(buildORDER_AUDITORTable());
  addTableDefinition(buildORDER_ORDERCARDTable());
  addTableDefinition(buildORDER_ORDERLABELTable());
  addTableDefinition(buildCMP3_SALESPERSONTable());
  addTableDefinition(buildCUSTOMER_CUSTOMERTable());
  addTableDefinition(buildCUSTOMER_CUSTOMER2Table());
  addTableDefinition(buildCMP3_ENTITYATable());
  addTableDefinition(buildCMP3_ENTITYBTable());
  addTableDefinition(buildCMP3_ENTITYA_ENTITYBTable());
  addTableDefinition(buildCMP3_ENTITYCTable());
  addTableDefinition(buildCMP3_ENTITYDTable());
  addTableDefinition(buildCMP3_UNIDIR_ENTITYC_ENTITYDTable());
  addTableDefinition(buildMATTELTable());
  addTableDefinition(buildLEGOTable());
  addTableDefinition(buildMEGABRANDSTable());
  addTableDefinition(buildNAMCOTable());
  addTableDefinition(buildServiceCallTable());
  addTableDefinition(buildCustomerServiceRepTable());
  addTableDefinition(buildCustRepTable());
  addTableDefinition(buildMtoMEntityATable());
  addTableDefinition(buildMtoMEntityBTable());
  addTableDefinition(buildMtoMEntityJoinTable());
  addTableDefinition(buildMtoMEntityDefaultJoinTable());
}"
63537,"public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  suite.addTest(AdvancedFetchGroupJunitTest.suite());
  suite.addTest(AdvancedMultiTenantJunitTest.suite());
  suite.addTest(PessimisticLockingExtendedScopeTestSuite.suite());
  suite.addTest(PessimisticLockEntityRefreshTestSuite.suite());
  suite.addTest(UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(ComplexAggregateTestSuite.suite());
  suite.addTest(MetadataCachingTestSuite.suite());
  suite.addTest(OptimisticLockForceIncrementTestSuite.suite());
  suite.addTest(ConfigPUTestSuite.suite());
  suite.addTest(NamedQueryJUnitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.RelationshipModelJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.IsolatedCacheTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  TestSuite suiteFg=new TestSuite();
  suiteFg.setName(""String_Node_Str"");
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupTrackerWeavingTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleSerializeFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupMergeWithCacheTests.suite());
  suite.addTest(suiteFg);
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  suite.addTest(TablePerClassInheritanceDDLTest.suite());
  suite.addTest(ReportQueryMultipleReturnInheritanceTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(EMQueryJUnitTestSuite.suite());
  suite.addTest(ExpressionJUnitTestSuite.suite());
  suite.addTest(IsolatedCacheTestSuite.suite());
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(JUnitJPQLQueryHelperTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  suite.addTest(JUnitNativeQueryTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationExtendTablesJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.datatypes.DoesRelationConformTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCompositePKJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaSimpleTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(CacheableModelJunitTestEnableSelective.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  fullSuite.addTest(CascadeDeletesJUnitTestSuite.suite());
  fullSuite.addTest(QueryCastTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(FetchGroupAPITests.suite());
  suite.addTest(FetchGroupTrackerWeavingTests.suite());
  suite.addTest(SimpleDefaultFetchGroupTests.suite());
  suite.addTest(SimpleFetchGroupTests.suite());
  suite.addTest(SimpleNamedFetchGroupTests.suite());
  suite.addTest(SimpleSerializeFetchGroupTests.suite());
  suite.addTest(NestedDefaultFetchGroupTests.suite());
  suite.addTest(NestedFetchGroupTests.suite());
  suite.addTest(NestedNamedFetchGroupTests.suite());
  suite.addTest(FetchGroupMergeWithCacheTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(PartitionedTestSuite.suite());
  fullSuite.addTest(PartitionedXMLTestSuite.suite());
  fullSuite.addTest(PLSQLTestSuite.suite());
  fullSuite.addTest(XMLPLSQLTestSuite.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.composite.advanced.EntityManagerJUnitTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(ExtensibilityTests.suite());
  fullSuite.addTest(suite);
  return fullSuite;
}","public static Test suite(){
  TestSuite fullSuite=new TestSuite();
  fullSuite.setName(""String_Node_Str"");
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleJUnitTest.suite());
  suite.addTest(ConcurrencyTest.suite());
  suite.addTest(CacheImplJUnitTest.suite());
  suite.addTest(CallbackEventJUnitTestSuite.suite());
  suite.addTest(EntityManagerJUnitTestSuite.suite());
  suite.addTest(SQLResultSetMappingTestSuite.suite());
  suite.addTest(JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(ReportQueryAdvancedJUnitTest.suite());
  suite.addTest(ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(AdvancedJPAJunitTest.suite());
  suite.addTest(AdvancedJunitTest.suite());
  suite.addTest(AdvancedCompositePKJunitTest.suite());
  suite.addTest(AdvancedFetchGroupJunitTest.suite());
  suite.addTest(AdvancedMultiTenantJunitTest.suite());
  suite.addTest(PessimisticLockingExtendedScopeTestSuite.suite());
  suite.addTest(PessimisticLockEntityRefreshTestSuite.suite());
  suite.addTest(UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(ComplexAggregateTestSuite.suite());
  suite.addTest(MetadataCachingTestSuite.suite());
  suite.addTest(OptimisticLockForceIncrementTestSuite.suite());
  suite.addTest(ConfigPUTestSuite.suite());
  suite.addTest(NamedQueryJUnitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.NamedNativeQueryJUnitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.CallbackEventJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.EntityManagerJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.SQLResultSetMappingTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.JoinedAttributeAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryMultipleReturnTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ExtendedPersistenceContextJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.ReportQueryConstructorExpressionTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.OptimisticConcurrencyJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJPAJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.AdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.advanced.UpdateAllQueryAdvancedJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.ExpressionJUnitTestSuite.class);
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.RelationshipModelJUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.IsolatedCacheTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.relationships.JAXBTestSuite.suite());
  TestSuite suiteFg=new TestSuite();
  suiteFg.setName(""String_Node_Str"");
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupTrackerWeavingTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.SimpleSerializeFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedDefaultFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.NestedNamedFetchGroupTests.suite());
  suiteFg.addTest(org.eclipse.persistence.testing.tests.jpa.fieldaccess.fetchgroups.FetchGroupMergeWithCacheTests.suite());
  suite.addTest(suiteFg);
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(LifecycleCallbackJunitTest.suite());
  suite.addTest(DeleteAllQueryInheritanceJunitTest.suite());
  suite.addTest(EntityManagerJUnitTestCase.suite());
  suite.addTest(MixedInheritanceJUnitTestCase.suite());
  suite.addTest(JoinedAttributeInheritanceJunitTest.suite());
  suite.addTest(TablePerClassInheritanceJUnitTest.suite());
  suite.addTest(TablePerClassInheritanceDDLTest.suite());
  suite.addTest(ReportQueryMultipleReturnInheritanceTestSuite.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(OrderedListJunitTest.suite());
  suite.addTest(OrderedListAttributeChangeTrackingJunitTest.suite());
  suite.addTest(InheritedModelJunitTest.suite());
  suite.addTest(InheritedCallbacksJunitTest.suite());
  suite.addTest(EmbeddableSuperclassJunitTest.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(EMQueryJUnitTestSuite.suite());
  suite.addTest(ExpressionJUnitTestSuite.suite());
  suite.addTest(IsolatedCacheTestSuite.suite());
  suite.addTest(VirtualAttributeTestSuite.suite());
  suite.addTest(ValidationTestSuite.suite());
  suite.addTest(QueryParameterValidationTestSuite.suite());
  suite.addTest(UniAndBiDirectionalMappingTestSuite.suite());
  suite.addTest(RelationshipModelJUnitTestSuite.suite());
  suite.addTest(TestKeyTypeToManyRelationship.suite());
  fullSuite.addTest(suite);
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(JUnitJPQLUnitTestSuite.suite());
  suite.addTest(JUnitJPQLSimpleTestSuite.suite());
  suite.addTest(JUnitJPQLComplexTestSuite.suite());
  suite.addTest(JUnitJPQLInheritanceTestSuite.suite());
  suite.addTest(JUnitJPQLValidationTestSuite.suite());
  suite.addTest(JUnitJPQLComplexAggregateTestSuite.suite());
  suite.addTest(JUnitJPQLDateTimeTestSuite.suite());
  suite.addTest(JUnitJPQLParameterTestSuite.suite());
  suite.addTest(JUnitJPQLExamplesTestSuite.suite());
  suite.addTest(JUnitJPQLModifyTestSuite.suite());
  suite.addTest(JUnitJPQLQueryHelperTestSuite.suite());
  suite.addTest(AdvancedQueryTestSuite.suite());
  suite.addTest(JUnitNativeQueryTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(EntityMappingsJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationJUnitTestSuite.suite());
  fullSuite.addTest(DDLGenerationExtendTablesJUnitTestSuite.suite());
  fullSuite.addTest(JPAAdvPropertiesJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.NullBindingJUnitTestCase.suite());
  fullSuite.addTestSuite(org.eclipse.persistence.testing.tests.jpa.datatypes.DoesRelationConformTest.class);
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datatypes.arraypks.PrimitiveArrayPKCachingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.datetime.NullBindingJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.lob.LobJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.privateowned.PrivateOwnedJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.orphanremoval.OrphanRemovalJUnitTestCase.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.metamodel.MetamodelTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaUnitTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCompositePKJunitTest.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedCriteriaQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.AdvancedQueryTestSuite.suite());
  suite.addTest(org.eclipse.persistence.testing.tests.jpa.criteria.JUnitCriteriaSimpleTestSuite.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(CacheableModelJunitTest.suite());
  fullSuite.addTest(CacheableModelJunitTestEnableSelective.suite());
  fullSuite.addTest(DelimitedPUTestSuite.suite());
  fullSuite.addTest(CascadeDeletesJUnitTestSuite.suite());
  fullSuite.addTest(QueryCastTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(FetchGroupAPITests.suite());
  suite.addTest(FetchGroupTrackerWeavingTests.suite());
  suite.addTest(SimpleDefaultFetchGroupTests.suite());
  suite.addTest(SimpleFetchGroupTests.suite());
  suite.addTest(SimpleNamedFetchGroupTests.suite());
  suite.addTest(SimpleSerializeFetchGroupTests.suite());
  suite.addTest(NestedDefaultFetchGroupTests.suite());
  suite.addTest(NestedFetchGroupTests.suite());
  suite.addTest(NestedNamedFetchGroupTests.suite());
  suite.addTest(FetchGroupMergeWithCacheTests.suite());
  fullSuite.addTest(suite);
  fullSuite.addTest(PartitionedTestSuite.suite());
  fullSuite.addTest(PartitionedXMLTestSuite.suite());
  fullSuite.addTest(PLSQLTestSuite.suite());
  fullSuite.addTest(XMLPLSQLTestSuite.suite());
  fullSuite.addTest(org.eclipse.persistence.testing.tests.jpa.composite.advanced.EntityManagerJUnitTestSuite.suite());
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(ExtensibilityTests.suite());
  fullSuite.addTest(suite);
  return fullSuite;
}"
63538,"/** 
 * INTERNAL: Allow the inheritance properties of the descriptor to be initialized. The descriptor's parent must first be initialized.
 */
public void initializeFromParent(CachePolicy parentPolicy,ClassDescriptor descriptor,ClassDescriptor descriptorDescriptor,AbstractSession session) throws DescriptorException {
  if (!parentPolicy.isSharedIsolation()) {
    boolean copyParrent=cacheable == null || cacheable == false;
    if (!isIsolated() && (getCacheIsolation() != parentPolicy.getCacheIsolation()) && copyParrent) {
      session.log(SessionLog.WARNING,SessionLog.METADATA,""String_Node_Str"",new Object[]{descriptorDescriptor.getAlias(),parentPolicy.getCacheIsolation(),descriptor.getAlias(),getCacheIsolation()});
      setCacheIsolation(parentPolicy.getCacheIsolation());
    }
  }
  for (  CacheIndex index : parentPolicy.getCacheIndexes().values()) {
    addCacheIndex(index);
  }
  if ((getDatabaseChangeNotificationType() == null) && (parentPolicy.getDatabaseChangeNotificationType() != null)) {
    setDatabaseChangeNotificationType(parentPolicy.getDatabaseChangeNotificationType());
  }
  if ((getCacheSynchronizationType() == UNDEFINED_OBJECT_CHANGE_BEHAVIOR) && (parentPolicy.getCacheSynchronizationType() != UNDEFINED_OBJECT_CHANGE_BEHAVIOR)) {
    setCacheSynchronizationType(parentPolicy.getCacheSynchronizationType());
  }
}","/** 
 * INTERNAL: Allow the inheritance properties of the descriptor to be initialized. The descriptor's parent must first be initialized.
 */
public void initializeFromParent(CachePolicy parentPolicy,ClassDescriptor descriptor,ClassDescriptor descriptorDescriptor,AbstractSession session) throws DescriptorException {
  if (!parentPolicy.isSharedIsolation()) {
    if (!isIsolated() && (getCacheIsolation() != parentPolicy.getCacheIsolation())) {
      session.log(SessionLog.WARNING,SessionLog.METADATA,""String_Node_Str"",new Object[]{descriptorDescriptor.getAlias(),parentPolicy.getCacheIsolation(),descriptor.getAlias(),getCacheIsolation()});
      setCacheIsolation(parentPolicy.getCacheIsolation());
    }
  }
  for (  CacheIndex index : parentPolicy.getCacheIndexes().values()) {
    addCacheIndex(index);
  }
  if ((getDatabaseChangeNotificationType() == null) && (parentPolicy.getDatabaseChangeNotificationType() != null)) {
    setDatabaseChangeNotificationType(parentPolicy.getDatabaseChangeNotificationType());
  }
  if ((getCacheSynchronizationType() == UNDEFINED_OBJECT_CHANGE_BEHAVIOR) && (parentPolicy.getCacheSynchronizationType() != UNDEFINED_OBJECT_CHANGE_BEHAVIOR)) {
    setCacheSynchronizationType(parentPolicy.getCacheSynchronizationType());
  }
}"
63539,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
    suite.addTest(new CacheableModelJunitTestEnableSelective(""String_Node_Str""));
  }
  return suite;
}"
63540,"/** 
 * INTERNAL: Set entity @Cacheable annotation value.
 * @param cacheable Entity @Cacheable annotation value. This value refersto current class only and does not contain inherited value from parent classes.
 */
public void setCacheable(Boolean cacheable){
  m_cacheable=cacheable;
}","/** 
 * INTERNAL: Set the cacheable value of this descriptor.
 */
public void setCacheable(Boolean cacheable){
  m_cacheable=cacheable;
}"
63541,"/** 
 * INTERNAL: Process a caching metadata for this entity accessor logging ignore warnings where necessary.
 */
@Override protected void processCaching(){
  if (getProject().isSharedCacheModeAll()) {
    if (getDescriptor().isCacheableFalse()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_FALSE,getJavaClass());
    }
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeNone()) {
    if (getDescriptor().isCacheableTrue()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_TRUE,getJavaClass());
    }
    getDescriptor().useNoCache();
  }
 else   if (getProject().isSharedCacheModeEnableSelective()) {
    if (!getDescriptor().isCacheableTrue()) {
      getDescriptor().useNoCache();
    }
    getDescriptor().setCacheableInDescriptor();
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeDisableSelective() || getProject().isSharedCacheModeUnspecified()) {
    if (getDescriptor().isCacheableFalse()) {
      getDescriptor().useNoCache();
    }
    getDescriptor().setCacheableInDescriptor();
    processCachingMetadata();
  }
}","/** 
 * INTERNAL: Process a caching metadata for this entity accessor logging ignore warnings where necessary.
 */
@Override protected void processCaching(){
  if (getProject().isSharedCacheModeAll()) {
    if (getDescriptor().isCacheableFalse()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_FALSE,getJavaClass());
    }
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeNone()) {
    if (getDescriptor().isCacheableTrue()) {
      getLogger().logConfigMessage(MetadataLogger.IGNORE_CACHEABLE_TRUE,getJavaClass());
    }
    getDescriptor().useNoCache();
  }
 else   if (getProject().isSharedCacheModeEnableSelective()) {
    if (!getDescriptor().isCacheableTrue()) {
      getDescriptor().useNoCache();
    }
    processCachingMetadata();
  }
 else   if (getProject().isSharedCacheModeDisableSelective() || getProject().isSharedCacheModeUnspecified()) {
    if (getDescriptor().isCacheableFalse()) {
      getDescriptor().useNoCache();
    }
    processCachingMetadata();
  }
}"
63542,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    processNamespacesForText(text.getTextContent(),(Element)parent);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + Constants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(Constants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + Constants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI, attributeQName, attributeValue;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    attributeQName=atts.getQName(x);
    attributeValue=atts.getValue(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && attributeQName.startsWith(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
      attributeNamespaceURI=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
    }
    element.setAttributeNS(attributeNamespaceURI,attributeQName,attributeValue == null ? Constants.EMPTY_STRING : attributeValue);
    if (attributeValue != null) {
      processNamespacesForText(attributeValue,element);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (!mixedContent) {
    boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
    if (bufferContainsOnlyWhitespace) {
      stringBuffer.reset();
    }
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    processNamespacesForText(text.getTextContent(),(Element)parent);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + Constants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(Constants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + Constants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI, attributeQName, attributeValue;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    attributeQName=atts.getQName(x);
    attributeValue=atts.getValue(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && attributeQName.startsWith(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
      attributeNamespaceURI=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
    }
    element.setAttributeNS(attributeNamespaceURI,attributeQName,attributeValue == null ? Constants.EMPTY_STRING : attributeValue);
    if (attributeValue != null) {
      processNamespacesForText(attributeValue,element);
    }
  }
}"
63543,"protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  try {
    String namespaceURI=Constants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + unmarshalRecord.getNamespaceSeparator() + qName;
    }
    if (!(unmarshalRecord.getPrefixesForFragment().isEmpty())) {
      for (      Entry<String,String> next : ((Map<String,String>)unmarshalRecord.getPrefixesForFragment()).entrySet()) {
        builder.startPrefixMapping(next.getKey(),next.getValue());
      }
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
}","protected void setupHandlerForKeepAsElementPolicy(UnmarshalRecord unmarshalRecord,XPathFragment xPathFragment,Attributes atts){
  SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
  builder.setOwningRecord(unmarshalRecord);
  builder.setMixedContent(xPathNode.getUnmarshalNodeValue().isMixedContentNodeValue());
  try {
    String namespaceURI=Constants.EMPTY_STRING;
    if (xPathFragment.getNamespaceURI() != null) {
      namespaceURI=xPathFragment.getNamespaceURI();
    }
    String qName=xPathFragment.getLocalName();
    if (xPathFragment.getPrefix() != null) {
      qName=xPathFragment.getPrefix() + unmarshalRecord.getNamespaceSeparator() + qName;
    }
    if (!(unmarshalRecord.getPrefixesForFragment().isEmpty())) {
      for (      Entry<String,String> next : ((Map<String,String>)unmarshalRecord.getPrefixesForFragment()).entrySet()) {
        builder.startPrefixMapping(next.getKey(),next.getValue());
      }
    }
    builder.startElement(namespaceURI,xPathFragment.getLocalName(),qName,atts);
    XMLReader xmlReader=unmarshalRecord.getXMLReader();
    xmlReader.setContentHandler(builder);
    xmlReader.setLexicalHandler(null);
  }
 catch (  SAXException ex) {
  }
}"
63544,"/** 
 * {@inheritDoc}
 */
public JPQLQueryBNF getQueryBNF(){
  return getQueryBNF(EntityTypeExpressionBNF.ID);
}","/** 
 * {@inheritDoc}
 */
public JPQLQueryBNF getQueryBNF(){
  return getQueryBNF(EntityTypeLiteralBNF.ID);
}"
63545,"/** 
 * INTERNAL: Write fields needed for insert into the template for with null values.
 */
@Override public void writeInsertFieldsIntoRow(AbstractRecord databaseRow,AbstractSession session){
  if (isReadOnly()) {
    return;
  }
  AbstractRecord targetRow=buildTemplateInsertRow(session);
  for (Enumeration keyEnum=targetRow.keys(); keyEnum.hasMoreElements(); ) {
    DatabaseField field=(DatabaseField)keyEnum.nextElement();
    Object value=targetRow.get(field);
    databaseRow.add(field,value);
  }
}","/** 
 * INTERNAL: Write fields needed for insert into the template for with null values.
 */
@Override public void writeInsertFieldsIntoRow(AbstractRecord databaseRow,AbstractSession session){
  if (isReadOnly()) {
    return;
  }
  AbstractRecord targetRow=buildTemplateInsertRow(session);
  for (Enumeration keyEnum=targetRow.keys(); keyEnum.hasMoreElements(); ) {
    DatabaseField field=(DatabaseField)keyEnum.nextElement();
    if (field.isInsertable()) {
      Object value=targetRow.get(field);
      databaseRow.add(field,value);
    }
  }
}"
63546,"public ComplexAggregateTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildCITYSLICKERTable());
  addTableDefinition(buildCOUNTRYDWELLERTable());
  addTableDefinition(buildWORLDTable());
  addTableDefinition(buildHOCKEYCOACHTable());
  addTableDefinition(buildHOCKEYPLAYERTable());
  addTableDefinition(buildHOCKEYTEAMTable());
  addTableDefinition(buildROLETable());
  addTableDefinition(buildPLAYERROLESTable());
  addTableDefinition(buildHockeyCoach_NICKNAMESTable());
  addTableDefinition(buildBODYTable());
}","public ComplexAggregateTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildCITYSLICKERTable());
  addTableDefinition(buildCOUNTRYDWELLERTable());
  addTableDefinition(buildWORLDTable());
  addTableDefinition(buildHOCKEYCOACHTable());
  addTableDefinition(buildHOCKEYPLAYERTable());
  addTableDefinition(buildHOCKEYTEAMTable());
  addTableDefinition(buildROLETable());
  addTableDefinition(buildPLAYERROLESTable());
  addTableDefinition(buildHockeyCoach_NICKNAMESTable());
  addTableDefinition(buildBODYTable());
  addTableDefinition(buildPLACETable());
}"
63547,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  suite.addTest(new ComplexAggregateTestSuite(""String_Node_Str""));
  return suite;
}"
63548,"public void addUOWConformObjectTests(){
  PopulationManager manager=PopulationManager.getDefaultManager();
  Employee example=(Employee)manager.getObject(Employee.class,""String_Node_Str"");
  ExpressionBuilder builder=new ExpressionBuilder();
  ReadObjectQuery query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").greaterThan(example.getId().subtract(new BigDecimal(1))).and(builder.get(""String_Node_Str"").lessThanEqual(example.getId())));
  query.conformResultsInUnitOfWork();
  UnitOfWorkConformObjectTest test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str"").or(builder.get(""String_Node_Str"").equal(""String_Node_Str"")));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str"").and(builder.get(""String_Node_Str"").equal(null)));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,false);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str"").and(builder.get(""String_Node_Str"").equal(null)));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str""));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str""));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,false);
  test.setName(""String_Node_Str"");
  addTest(test);
  addTest(new UnitOfWorkConformLikeTest());
  addTest(new UnitOfWorkConformLikeSpecialCharacterTest());
  addTest(new NamedQueryConformNullPointerException());
  addTest(new MemoryQueryAcrossOneToOneMapping());
  addTest(new MemoryQueryAcrossNestedOneToManyMapping());
  addTest(new MemoryQueryAcrossOneToManyMapping());
  addTest(new MemoryQueryForFunctionsAcrossOneToManyMapping());
  addTest(new MemoryQueryForFunctionsAcrossOneToManyAcrossOneToOneMapping());
  addTest(new MemoryQueryAcrossOneToManyMapping2());
  addTest(new MemoryQueryAcrossOneToManyAcrossOneToOneMapping());
  addTest(new MemoryQueryAcrossManyToManyMapping());
  addTest(new MemoryQueryAcrossManyToManyAcrossOneToManyMapping());
  addTest(new MemoryQueryAcrossDirectCollectionMapping());
  addTest(new MemoryQueryAcrossAggregateCollectionMapping(Agent.class));
  addTest(new MemoryQueryAcrossAggregateCollectionMapping(Builder.class));
  addTest(new NamedQueryConformNullPointerException());
  addTest(new MemoryQueryTriggerIndirection());
  addTest(new MemoryQueryReturnConformedOnIndirection());
  addTest(new MemoryQueryReturnNotConformedOnIndirection());
  addTest(new MemoryQueryThrowExceptionOnIndirection());
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(null));
  DescriptorUnitOfWorkConformObjectTest test2=new DescriptorUnitOfWorkConformObjectTest(query,true);
  test2.setName(""String_Node_Str"");
  addTest(test2);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str""));
  test2=new DescriptorUnitOfWorkConformObjectTest(query,false);
  test2.setName(""String_Node_Str"");
  addTest(test2);
  addTest(new MemoryQueryLike());
}","public void addUOWConformObjectTests(){
  PopulationManager manager=PopulationManager.getDefaultManager();
  Employee example=(Employee)manager.getObject(Employee.class,""String_Node_Str"");
  ExpressionBuilder builder=new ExpressionBuilder();
  ReadObjectQuery query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").greaterThan(example.getId().subtract(new BigDecimal(1))).and(builder.get(""String_Node_Str"").lessThanEqual(example.getId())));
  query.conformResultsInUnitOfWork();
  UnitOfWorkConformObjectTest test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str"").or(builder.get(""String_Node_Str"").equal(""String_Node_Str"")));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str"").and(builder.get(""String_Node_Str"").equal(null)));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,false);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str"").and(builder.get(""String_Node_Str"").equal(null)));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str""));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,true);
  test.setName(""String_Node_Str"");
  addTest(test);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str""));
  query.conformResultsInUnitOfWork();
  test=new UnitOfWorkConformObjectTest(query,false);
  test.setName(""String_Node_Str"");
  addTest(test);
  addTest(new UnitOfWorkConformLikeTest());
  addTest(new UnitOfWorkConformLikeSpecialCharacterTest());
  addTest(new NamedQueryConformNullPointerException());
  addTest(new MemoryQueryAcrossOneToOneMapping());
  addTest(new MemoryQueryAcrossNestedOneToManyMapping());
  addTest(new MemoryQueryAcrossOneToManyMapping());
  addTest(new MemoryQueryForFunctionsAcrossOneToManyMapping());
  addTest(new MemoryQueryForFunctionsAcrossOneToManyAcrossOneToOneMapping());
  addTest(new MemoryQueryAcrossOneToManyMapping2());
  addTest(new MemoryQueryAcrossOneToManyAcrossOneToOneMapping());
  addTest(new MemoryQueryAcrossManyToManyMapping());
  addTest(new MemoryQueryAcrossManyToManyAcrossOneToManyMapping());
  addTest(new MemoryQueryAcrossDirectCollectionMapping());
  addTest(new MemoryQueryAcrossAggregateCollectionMapping(Agent.class));
  addTest(new MemoryQueryAcrossAggregateCollectionMapping(Builder.class));
  addTest(new NamedQueryConformNullPointerException());
  addTest(new MemoryQueryTriggerIndirection());
  addTest(new MemoryQueryReturnConformedOnIndirection());
  addTest(new MemoryQueryReturnNotConformedOnIndirection());
  addTest(new MemoryQueryThrowExceptionOnIndirection());
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(null));
  DescriptorUnitOfWorkConformObjectTest test2=new DescriptorUnitOfWorkConformObjectTest(query,true);
  test2.setName(""String_Node_Str"");
  addTest(test2);
  builder=new ExpressionBuilder();
  query=new ReadObjectQuery(Employee.class,builder.get(""String_Node_Str"").equal(""String_Node_Str""));
  test2=new DescriptorUnitOfWorkConformObjectTest(query,false);
  test2.setName(""String_Node_Str"");
  addTest(test2);
  addTest(new MemoryQueryLike());
  addTest(new UnitOfWorkConformReadObjectWithCriteriaTest());
}"
63549,"/** 
 * Perform a cache lookup for the query This is only called from read object query. The query has already checked that the cache should be checked.
 */
@Override public Object checkCacheForObject(AbstractRecord translationRow,AbstractSession session){
  ReadObjectQuery query=getReadObjectQuery();
  ClassDescriptor descriptor=getDescriptor();
  boolean conforming=false;
  UnitOfWorkImpl uow=null;
  if (session.isUnitOfWork()) {
    conforming=query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork();
    uow=(UnitOfWorkImpl)session;
  }
  int policyToUse=query.getInMemoryQueryIndirectionPolicyState();
  if (conforming && (policyToUse != InMemoryQueryIndirectionPolicy.SHOULD_TRIGGER_INDIRECTION)) {
    policyToUse=InMemoryQueryIndirectionPolicy.SHOULD_IGNORE_EXCEPTION_RETURN_CONFORMED;
  }
  Object cachedObject=null;
  Expression selectionCriteria=getSelectionCriteria();
  Object selectionKey=query.getSelectionId();
  Object selectionObject=query.getSelectionObject();
  if ((selectionKey != null) || (selectionObject != null)) {
    if (selectionKey == null) {
      selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(selectionObject,session,true);
      if (selectionKey == null) {
        return InvalidObject.instance;
      }
      query.setSelectionId(selectionKey);
    }
    if (query.requiresDeferredLocks()) {
      cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
    }
 else {
      cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
    }
  }
 else {
    if (translationRow != null && translationRow.hasSopObject()) {
      if (query.requiresDeferredLocks()) {
        cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(descriptor.getObjectBuilder().extractPrimaryKeyFromObject(translationRow.getSopObject(),session),query.getReferenceClass(),false,descriptor);
      }
 else {
        cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(descriptor.getObjectBuilder().extractPrimaryKeyFromObject(translationRow.getSopObject(),session),query.getReferenceClass(),false,descriptor);
      }
    }
 else {
      if (selectionCriteria == null) {
        if (query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork() || query.shouldCheckCacheOnly()|| query.shouldCheckCacheThenDatabase()) {
          cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(null,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
        }
      }
 else {
        selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(true,selectionCriteria,translationRow,session);
        if ((selectionKey != null) || query.shouldCheckCacheByExactPrimaryKey()) {
          if (selectionKey != null) {
            if (selectionKey == InvalidObject.instance) {
              return selectionKey;
            }
            if (query.requiresDeferredLocks()) {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
            }
 else {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
            }
          }
        }
 else {
          Object inexactSelectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(false,selectionCriteria,translationRow,session);
          if (inexactSelectionKey != null) {
            if (selectionKey == InvalidObject.instance) {
              return selectionKey;
            }
            if (query.requiresDeferredLocks()) {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
            }
 else {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
            }
          }
 else {
            CacheKey cacheKey=descriptor.getCachePolicy().checkCacheByIndex(selectionCriteria,translationRow,descriptor,session);
            if (cacheKey != null) {
              if (query.requiresDeferredLocks()) {
                cacheKey.checkDeferredLock();
              }
 else {
                cacheKey.checkReadLock();
              }
              cachedObject=cacheKey.getObject();
            }
          }
          if (cachedObject != null) {
            try {
              ExpressionBuilder builder=selectionCriteria.getBuilder();
              builder.setSession(session.getRootSession(null));
              builder.setQueryClass(descriptor.getJavaClass());
              if (!selectionCriteria.doesConform(cachedObject,session,translationRow,policyToUse)) {
                cachedObject=null;
              }
            }
 catch (            QueryException exception) {
              if (query.shouldCheckCacheOnly()) {
                throw exception;
              }
              cachedObject=null;
            }
          }
          boolean conformingButOutsideUnitOfWork=((query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork()) && !session.isUnitOfWork());
          if ((cachedObject == null) && (conforming || (!query.shouldCheckCacheByPrimaryKey() && !conformingButOutsideUnitOfWork))) {
            if (selectionCriteria != null) {
              ExpressionBuilder builder=selectionCriteria.getBuilder();
              builder.setSession(session.getRootSession(null));
              builder.setQueryClass(descriptor.getJavaClass());
            }
            try {
              cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
            }
 catch (            QueryException exception) {
              if (query.shouldCheckCacheOnly()) {
                throw exception;
              }
            }
          }
        }
      }
    }
  }
  if (conforming) {
    if (cachedObject == null) {
      if (selectionKey != null) {
        cachedObject=uow.getObjectFromNewObjects(query.getReferenceClass(),selectionKey);
      }
 else {
        if (selectionCriteria != null) {
          ExpressionBuilder builder=selectionCriteria.getBuilder();
          builder.setSession(session.getRootSession(null));
          builder.setQueryClass(descriptor.getJavaClass());
        }
        try {
          cachedObject=uow.getObjectFromNewObjects(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse);
        }
 catch (        QueryException exception) {
        }
      }
    }
    if (cachedObject != null) {
      if (uow.isObjectDeleted(cachedObject)) {
        if (selectionKey != null) {
          return InvalidObject.instance;
        }
 else {
          cachedObject=null;
        }
      }
    }
  }
  if (cachedObject != null) {
    if (descriptor.hasFetchGroupManager()) {
      if (descriptor.getFetchGroupManager().isPartialObject(cachedObject)) {
        FetchGroup fetchGroup=query.getExecutionFetchGroup(descriptor);
        EntityFetchGroup entityFetchGroup=null;
        if (fetchGroup != null) {
          entityFetchGroup=descriptor.getFetchGroupManager().getEntityFetchGroup(fetchGroup);
        }
        if (!descriptor.getFetchGroupManager().isObjectValidForFetchGroup(cachedObject,entityFetchGroup)) {
          cachedObject=null;
        }
      }
    }
  }
  if ((cachedObject == null) && query.shouldCheckCacheOnly() && ((uow == null) || (!uow.isNestedUnitOfWork() && descriptor.getCachePolicy().shouldIsolateObjectsInUnitOfWork()))) {
    return InvalidObject.instance;
  }
  return cachedObject;
}","/** 
 * Perform a cache lookup for the query This is only called from read object query. The query has already checked that the cache should be checked.
 */
@Override public Object checkCacheForObject(AbstractRecord translationRow,AbstractSession session){
  ReadObjectQuery query=getReadObjectQuery();
  ClassDescriptor descriptor=getDescriptor();
  boolean conforming=false;
  UnitOfWorkImpl uow=null;
  if (session.isUnitOfWork()) {
    conforming=query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork();
    uow=(UnitOfWorkImpl)session;
  }
  int policyToUse=query.getInMemoryQueryIndirectionPolicyState();
  if (conforming && (policyToUse != InMemoryQueryIndirectionPolicy.SHOULD_TRIGGER_INDIRECTION)) {
    policyToUse=InMemoryQueryIndirectionPolicy.SHOULD_IGNORE_EXCEPTION_RETURN_NOT_CONFORMED;
  }
  Object cachedObject=null;
  Expression selectionCriteria=getSelectionCriteria();
  Object selectionKey=query.getSelectionId();
  Object selectionObject=query.getSelectionObject();
  if ((selectionKey != null) || (selectionObject != null)) {
    if (selectionKey == null) {
      selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(selectionObject,session,true);
      if (selectionKey == null) {
        return InvalidObject.instance;
      }
      query.setSelectionId(selectionKey);
    }
    if (query.requiresDeferredLocks()) {
      cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
    }
 else {
      cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
    }
  }
 else {
    if (translationRow != null && translationRow.hasSopObject()) {
      if (query.requiresDeferredLocks()) {
        cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(descriptor.getObjectBuilder().extractPrimaryKeyFromObject(translationRow.getSopObject(),session),query.getReferenceClass(),false,descriptor);
      }
 else {
        cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(descriptor.getObjectBuilder().extractPrimaryKeyFromObject(translationRow.getSopObject(),session),query.getReferenceClass(),false,descriptor);
      }
    }
 else {
      if (selectionCriteria == null) {
        if (query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork() || query.shouldCheckCacheOnly()|| query.shouldCheckCacheThenDatabase()) {
          cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(null,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
        }
      }
 else {
        selectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(true,selectionCriteria,translationRow,session);
        if ((selectionKey != null) || query.shouldCheckCacheByExactPrimaryKey()) {
          if (selectionKey != null) {
            if (selectionKey == InvalidObject.instance) {
              return selectionKey;
            }
            if (query.requiresDeferredLocks()) {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(selectionKey,query.getReferenceClass(),false,descriptor);
            }
 else {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(selectionKey,query.getReferenceClass(),false,descriptor);
            }
          }
        }
 else {
          Object inexactSelectionKey=descriptor.getObjectBuilder().extractPrimaryKeyFromExpression(false,selectionCriteria,translationRow,session);
          if (inexactSelectionKey != null) {
            if (selectionKey == InvalidObject.instance) {
              return selectionKey;
            }
            if (query.requiresDeferredLocks()) {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMapWithDeferredLock(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
            }
 else {
              cachedObject=session.getIdentityMapAccessorInstance().getFromLocalIdentityMap(inexactSelectionKey,query.getReferenceClass(),false,descriptor);
            }
          }
 else {
            CacheKey cacheKey=descriptor.getCachePolicy().checkCacheByIndex(selectionCriteria,translationRow,descriptor,session);
            if (cacheKey != null) {
              if (query.requiresDeferredLocks()) {
                cacheKey.checkDeferredLock();
              }
 else {
                cacheKey.checkReadLock();
              }
              cachedObject=cacheKey.getObject();
            }
          }
          if (cachedObject != null) {
            try {
              ExpressionBuilder builder=selectionCriteria.getBuilder();
              builder.setSession(session.getRootSession(null));
              builder.setQueryClass(descriptor.getJavaClass());
              if (!selectionCriteria.doesConform(cachedObject,session,translationRow,policyToUse)) {
                cachedObject=null;
              }
            }
 catch (            QueryException exception) {
              if (query.shouldCheckCacheOnly()) {
                throw exception;
              }
              cachedObject=null;
            }
          }
          boolean conformingButOutsideUnitOfWork=((query.shouldConformResultsInUnitOfWork() || descriptor.shouldAlwaysConformResultsInUnitOfWork()) && !session.isUnitOfWork());
          if ((cachedObject == null) && (conforming || (!query.shouldCheckCacheByPrimaryKey() && !conformingButOutsideUnitOfWork))) {
            if (selectionCriteria != null) {
              ExpressionBuilder builder=selectionCriteria.getBuilder();
              builder.setSession(session.getRootSession(null));
              builder.setQueryClass(descriptor.getJavaClass());
            }
            try {
              cachedObject=session.getIdentityMapAccessorInstance().getFromIdentityMap(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse,conforming,false,descriptor);
            }
 catch (            QueryException exception) {
              if (query.shouldCheckCacheOnly()) {
                throw exception;
              }
            }
          }
        }
      }
    }
  }
  if (conforming) {
    if (cachedObject == null) {
      if (selectionKey != null) {
        cachedObject=uow.getObjectFromNewObjects(query.getReferenceClass(),selectionKey);
      }
 else {
        if (selectionCriteria != null) {
          ExpressionBuilder builder=selectionCriteria.getBuilder();
          builder.setSession(session.getRootSession(null));
          builder.setQueryClass(descriptor.getJavaClass());
        }
        try {
          cachedObject=uow.getObjectFromNewObjects(selectionCriteria,query.getReferenceClass(),translationRow,policyToUse);
        }
 catch (        QueryException exception) {
        }
      }
    }
    if (cachedObject != null) {
      if (uow.isObjectDeleted(cachedObject)) {
        if (selectionKey != null) {
          return InvalidObject.instance;
        }
 else {
          cachedObject=null;
        }
      }
    }
  }
  if (cachedObject != null) {
    if (descriptor.hasFetchGroupManager()) {
      if (descriptor.getFetchGroupManager().isPartialObject(cachedObject)) {
        FetchGroup fetchGroup=query.getExecutionFetchGroup(descriptor);
        EntityFetchGroup entityFetchGroup=null;
        if (fetchGroup != null) {
          entityFetchGroup=descriptor.getFetchGroupManager().getEntityFetchGroup(fetchGroup);
        }
        if (!descriptor.getFetchGroupManager().isObjectValidForFetchGroup(cachedObject,entityFetchGroup)) {
          cachedObject=null;
        }
      }
    }
  }
  if ((cachedObject == null) && query.shouldCheckCacheOnly() && ((uow == null) || (!uow.isNestedUnitOfWork() && descriptor.getCachePolicy().shouldIsolateObjectsInUnitOfWork()))) {
    return InvalidObject.instance;
  }
  return cachedObject;
}"
63550,"private void generateManyValueClass(ClassWriter cw,TypeMappingInfo typeMappingInfo,String namespace,Class superType,String classNameSeparatedBySlash,JavaClass componentType,JavaClass containerType){
  String componentClassNameSeparatedBySlash=getObjectType(componentType).getQualifiedName().replace(DOT_CHR,SLASH_CHR);
  String containerClassNameSeperatedBySlash=containerType.getQualifiedName().replace(DOT_CHR,SLASH_CHR);
  if (""String_Node_Str"".equals(componentClassNameSeparatedBySlash)) {
    cw.visit(Opcodes.V1_5,Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,classNameSeparatedBySlash,""String_Node_Str"" + Type.getInternalName(superType) + ""String_Node_Str""+ componentClassNameSeparatedBySlash+ ""String_Node_Str"",Type.getInternalName(superType),null);
  }
 else {
    cw.visit(Opcodes.V1_5,Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,classNameSeparatedBySlash,""String_Node_Str"" + Type.getInternalName(superType) + ""String_Node_Str""+ componentClassNameSeparatedBySlash+ ""String_Node_Str"",Type.getInternalName(superType),null);
  }
  AnnotationVisitor av=cw.visitAnnotation(""String_Node_Str"",true);
  if (null != namespace) {
    av.visit(""String_Node_Str"",namespace);
  }
  if (classNameSeparatedBySlash.startsWith(ARRAY_PACKAGE_NAME.replace('.','/')) && classNameSeparatedBySlash.contains(""String_Node_Str"")) {
    av.visit(""String_Node_Str"",classNameSeparatedBySlash.substring(classNameSeparatedBySlash.lastIndexOf('/') + 1));
  }
  av.visitEnd();
  MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(superType),""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  if (!componentType.isPrimitive() && ArrayValue.class.isAssignableFrom(superType)) {
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    Label l0=new Label();
    mv.visitJumpInsn(Opcodes.IFNONNULL,l0);
    mv.visitInsn(Opcodes.ACONST_NULL);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitLabel(l0);
    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    mv.visitVarInsn(Opcodes.ISTORE,1);
    mv.visitVarInsn(Opcodes.ILOAD,1);
    mv.visitTypeInsn(Opcodes.ANEWARRAY,componentClassNameSeparatedBySlash);
    mv.visitVarInsn(Opcodes.ASTORE,2);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(Opcodes.ALOAD,2);
    mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
    mv.visitInsn(Opcodes.POP);
    mv.visitVarInsn(Opcodes.ALOAD,2);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitMaxs(2,3);
    mv.visitEnd();
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"");
    mv.visitVarInsn(Opcodes.ASTORE,2);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,2);
    mv.visitMethodInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    mv.visitFieldInsn(Opcodes.PUTFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    mv.visitInsn(Opcodes.RETURN);
    mv.visitMaxs(2,3);
    mv.visitEnd();
  }
  if (""String_Node_Str"".equals(componentClassNameSeparatedBySlash)) {
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"",null);
  }
 else {
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"",null);
  }
  boolean hasXmlList=false;
  Annotation[] annotations;
  if (typeMappingInfo != null && ((annotations=getAnnotations(typeMappingInfo)) != null)) {
    for (    Annotation annotation : annotations) {
      if (!(annotation instanceof XmlElement || annotation instanceof XmlJavaTypeAdapter)) {
        Class<? extends Annotation> annotationType=annotation.annotationType();
        if (annotation instanceof XmlList) {
          hasXmlList=true;
        }
        av=mv.visitAnnotation(L + annotationType.getName().replace(DOT_CHR,SLASH_CHR) + SEMI_COLON,true);
        for (        Method next : annotation.annotationType().getDeclaredMethods()) {
          try {
            Object nextValue=next.invoke(annotation,new Object[]{});
            if (nextValue instanceof Class) {
              nextValue=Type.getType(L + ((Class)nextValue).getName().replace(DOT_CHR,SLASH_CHR) + SEMI_COLON);
            }
            av.visit(next.getName(),nextValue);
          }
 catch (          InvocationTargetException ex) {
          }
catch (          IllegalAccessException ex) {
          }
        }
        av.visitEnd();
      }
    }
  }
  if (hasXmlList) {
    av=mv.visitAnnotation(""String_Node_Str"",true);
    av.visitEnd();
  }
 else {
    av=mv.visitAnnotation(""String_Node_Str"",true);
    av.visit(""String_Node_Str"",ITEM);
    av.visit(""String_Node_Str"",true);
    av.visitEnd();
  }
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(superType),""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.ARETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"",null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitVarInsn(Opcodes.ALOAD,1);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(superType),""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(2,2);
  mv.visitEnd();
  mv=cw.visitMethod(Opcodes.ACC_PROTECTED,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  mv.visitCode();
  if (componentType.isPrimitive()) {
    mv.visitFieldInsn(Opcodes.GETSTATIC,getObjectType(componentType).getQualifiedName().replace(DOT_CHR,SLASH_CHR),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (containerClassNameSeperatedBySlash.contains(""String_Node_Str"")) {
      mv.visitLdcInsn(Type.getType(containerClassNameSeperatedBySlash));
    }
 else {
      mv.visitLdcInsn(Type.getType(""String_Node_Str"" + containerClassNameSeperatedBySlash + ""String_Node_Str""));
    }
  }
  mv.visitInsn(Opcodes.ARETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
}","private void generateManyValueClass(ClassWriter cw,TypeMappingInfo typeMappingInfo,String namespace,Class superType,String classNameSeparatedBySlash,JavaClass componentType,JavaClass containerType){
  String componentClassNameSeparatedBySlash=getObjectType(componentType).getQualifiedName().replace(DOT_CHR,SLASH_CHR);
  String containerClassNameSeperatedBySlash=containerType.getQualifiedName().replace(DOT_CHR,SLASH_CHR);
  if (""String_Node_Str"".equals(componentClassNameSeparatedBySlash)) {
    cw.visit(Opcodes.V1_5,Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,classNameSeparatedBySlash,""String_Node_Str"" + Type.getInternalName(superType) + ""String_Node_Str""+ componentClassNameSeparatedBySlash+ ""String_Node_Str"",Type.getInternalName(superType),null);
  }
 else {
    cw.visit(Opcodes.V1_5,Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,classNameSeparatedBySlash,""String_Node_Str"" + Type.getInternalName(superType) + ""String_Node_Str""+ componentClassNameSeparatedBySlash+ ""String_Node_Str"",Type.getInternalName(superType),null);
  }
  AnnotationVisitor av=cw.visitAnnotation(""String_Node_Str"",true);
  if (null != namespace) {
    av.visit(""String_Node_Str"",namespace);
  }
  if (classNameSeparatedBySlash.startsWith(ARRAY_PACKAGE_NAME.replace('.','/')) && classNameSeparatedBySlash.contains(""String_Node_Str"")) {
    av.visit(""String_Node_Str"",classNameSeparatedBySlash.substring(classNameSeparatedBySlash.lastIndexOf('/') + 1));
  }
  av.visitEnd();
  MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(superType),""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  if (!componentType.isPrimitive() && ArrayValue.class.isAssignableFrom(superType)) {
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    Label l0=new Label();
    mv.visitJumpInsn(Opcodes.IFNONNULL,l0);
    mv.visitInsn(Opcodes.ACONST_NULL);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitLabel(l0);
    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
    mv.visitVarInsn(Opcodes.ISTORE,1);
    mv.visitVarInsn(Opcodes.ILOAD,1);
    mv.visitTypeInsn(Opcodes.ANEWARRAY,componentClassNameSeparatedBySlash);
    mv.visitVarInsn(Opcodes.ASTORE,2);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitFieldInsn(Opcodes.GETFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    mv.visitVarInsn(Opcodes.ALOAD,2);
    mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
    mv.visitInsn(Opcodes.POP);
    mv.visitVarInsn(Opcodes.ALOAD,2);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitMaxs(2,3);
    mv.visitEnd();
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"");
    mv.visitVarInsn(Opcodes.ASTORE,2);
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,2);
    mv.visitMethodInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    mv.visitFieldInsn(Opcodes.PUTFIELD,classNameSeparatedBySlash,""String_Node_Str"",""String_Node_Str"");
    mv.visitInsn(Opcodes.RETURN);
    mv.visitMaxs(2,3);
    mv.visitEnd();
  }
  if (""String_Node_Str"".equals(componentClassNameSeparatedBySlash)) {
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"",null);
  }
 else {
    mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"",null);
  }
  boolean hasXmlList=false;
  Annotation[] annotations;
  if (typeMappingInfo != null && ((annotations=getAnnotations(typeMappingInfo)) != null)) {
    for (    Annotation annotation : annotations) {
      if (!(annotation instanceof XmlElement || annotation instanceof XmlJavaTypeAdapter)) {
        Class<? extends Annotation> annotationType=annotation.annotationType();
        if (annotation instanceof XmlList) {
          hasXmlList=true;
        }
        av=mv.visitAnnotation(L + annotationType.getName().replace(DOT_CHR,SLASH_CHR) + SEMI_COLON,true);
        for (        Method next : annotation.annotationType().getDeclaredMethods()) {
          try {
            Object nextValue=next.invoke(annotation,new Object[]{});
            if (nextValue instanceof Class) {
              nextValue=Type.getType(L + ((Class)nextValue).getName().replace(DOT_CHR,SLASH_CHR) + SEMI_COLON);
            }
            av.visit(next.getName(),nextValue);
          }
 catch (          InvocationTargetException ex) {
          }
catch (          IllegalAccessException ex) {
          }
        }
        av.visitEnd();
      }
    }
  }
  if (hasXmlList) {
    av=mv.visitAnnotation(""String_Node_Str"",true);
    av.visitEnd();
  }
 else {
    av=mv.visitAnnotation(""String_Node_Str"",true);
    av.visit(""String_Node_Str"",ITEM);
    av.visit(""String_Node_Str"",true);
    av.visitEnd();
  }
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(superType),""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.ARETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  mv=cw.visitMethod(Opcodes.ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + componentClassNameSeparatedBySlash + ""String_Node_Str"",null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitVarInsn(Opcodes.ALOAD,1);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(superType),""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(2,2);
  mv.visitEnd();
  mv=cw.visitMethod(Opcodes.ACC_PROTECTED,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
  mv.visitCode();
  if (componentType.isPrimitive()) {
    mv.visitFieldInsn(Opcodes.GETSTATIC,getObjectType(componentType).getQualifiedName().replace(DOT_CHR,SLASH_CHR),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (containerClassNameSeperatedBySlash.contains(""String_Node_Str"")) {
      mv.visitLdcInsn(Type.getType(containerClassNameSeperatedBySlash));
    }
 else {
      mv.visitLdcInsn(Type.getType(""String_Node_Str"" + containerClassNameSeperatedBySlash + ""String_Node_Str""));
    }
  }
  mv.visitInsn(Opcodes.ARETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
}"
63551,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  int size=marshalRecord.getCycleDetectionStack().size();
  if ((isInverseReference || xmlCompositeCollectionMapping.getInverseReferenceMapping() != null) && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    try {
      if (cp.contains(owner,collection,session)) {
        return false;
      }
    }
 catch (    ClassCastException e) {
    }
  }
  marshalRecord.startCollection();
  iterator=cp.iteratorFor(collection);
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  int size=marshalRecord.getCycleDetectionStack().size();
  if ((isInverseReference || xmlCompositeCollectionMapping.getInverseReferenceMapping() != null) && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    try {
      if (cp.contains(owner,collection,session)) {
        return false;
      }
    }
 catch (    ClassCastException e) {
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  marshalRecord.startCollection();
  iterator=cp.iteratorFor(collection);
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
63552,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(XmlInverseRefBidirectionalTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectional2TestCases.class);
  suite.addTestSuite(XmlInverseRefEmployeeTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalSubTestCases.class);
  suite.addTestSuite(XmlInverseRefObjectsTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalListTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalList2TestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalList3TestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalList4TestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalListObjectsTestCases.class);
  suite.addTestSuite(InverseBindingsTestCases.class);
  suite.addTestSuite(InverseWriteableBindingsTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(XmlInverseRefBidirectionalTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectional2TestCases.class);
  suite.addTestSuite(XmlInverseRefEmployeeTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalSubTestCases.class);
  suite.addTestSuite(XmlInverseRefObjectsTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalListTestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalList2TestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalList3TestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalList4TestCases.class);
  suite.addTestSuite(XmlInverseRefBidirectionalListObjectsTestCases.class);
  suite.addTestSuite(XmlInverseRefWithWrapperTestCases.class);
  suite.addTestSuite(InverseBindingsTestCases.class);
  suite.addTestSuite(InverseWriteableBindingsTestCases.class);
  return suite;
}"
63553,"/** 
 * <p>INTERNAL: Perform any post-load descriptor modifications, such as altering attribute classification on a given mapping, or converting class names to classes.  In addition, JAXB and JPA Embeddables will have the descriptor alias set to the class name (w/o package), which will contain an upper case first character, meaning that the OR/OX descriptors will  have to be aligned in some cases. 
 */
protected static void prepareDescriptors(Project oxProject,Project orProject,XRDynamicClassLoader xrdcl){
  if (oxProject.getAliasDescriptors() != null) {
    for (    Object alias : oxProject.getAliasDescriptors().keySet()) {
      if (alias.equals(SIMPLE_XML_FORMAT_STR)) {
        continue;
      }
      XMLDescriptor xdesc=(XMLDescriptor)oxProject.getAliasDescriptors().get(alias);
      for (      DatabaseMapping mapping : xdesc.getMappings()) {
        if (mapping instanceof XMLBinaryDataMapping) {
          ((XMLBinaryDataMapping)mapping).setAttributeClassification(APBYTE);
          ((XMLBinaryDataMapping)mapping).setAttributeClassificationName(APBYTE.getName());
        }
      }
      ClassDescriptor odesc=(ClassDescriptor)orProject.getAliasDescriptors().get(alias);
      if (odesc != null) {
        odesc.convertClassNamesToClasses(xrdcl);
      }
    }
  }
}","/** 
 * <p>INTERNAL: Perform any post-load descriptor modifications, such as altering attribute classification on a given mapping, or converting class names to classes.  In addition, JAXB and JPA Embeddables will have the descriptor alias set to the class name (w/o package), which will contain an upper case first character, meaning that the OR/OX descriptors will  have to be aligned in some cases. 
 */
protected static void prepareDescriptors(Project oxProject,Project orProject,XRDynamicClassLoader xrdcl){
  if (orProject.getAliasDescriptors() != null) {
    orProject.getAliasDescriptors().remove(""String_Node_Str"");
  }
  if (oxProject.getAliasDescriptors() != null) {
    for (    Object alias : oxProject.getAliasDescriptors().keySet()) {
      if (alias.equals(SIMPLE_XML_FORMAT_STR)) {
        continue;
      }
      XMLDescriptor xdesc=(XMLDescriptor)oxProject.getAliasDescriptors().get(alias);
      for (      DatabaseMapping mapping : xdesc.getMappings()) {
        if (mapping instanceof XMLBinaryDataMapping) {
          ((XMLBinaryDataMapping)mapping).setAttributeClassification(APBYTE);
          ((XMLBinaryDataMapping)mapping).setAttributeClassificationName(APBYTE.getName());
        }
      }
      ClassDescriptor odesc=(ClassDescriptor)orProject.getAliasDescriptors().get(alias);
      if (odesc != null) {
        ClassDescriptor orderedDescriptor=getDescriptorForClassName(orProject,odesc.getJavaClassName());
        if (orderedDescriptor != null) {
          orderedDescriptor.setAlias(alias.toString());
          orderedDescriptor.setJavaClassName(odesc.getJavaClassName());
          orderedDescriptor.convertClassNamesToClasses(xrdcl);
          orProject.addAlias(orderedDescriptor.getAlias(),orderedDescriptor);
        }
      }
    }
  }
}"
63554,"@Test public void getEmpRecordTest(){
  System.out.println(DBWS_OR_STREAM);
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",69);
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.setFormattedOutput(true);
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(RECORD_XML));
  removeEmptyTextNodes(doc);
  removeEmptyTextNodes(controlDoc);
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}","@Test public void getEmpRecordTest(){
  Invocation invocation=new Invocation(""String_Node_Str"");
  invocation.setParameter(""String_Node_Str"",69);
  Operation op=xrService.getOperation(invocation.getName());
  Object result=op.invoke(xrService,invocation);
  assertNotNull(""String_Node_Str"",result);
  Document doc=xmlPlatform.createDocument();
  XMLMarshaller marshaller=xrService.getXMLContext().createMarshaller();
  marshaller.setFormattedOutput(true);
  marshaller.marshal(result,doc);
  Document controlDoc=xmlParser.parse(new StringReader(RECORD_XML));
  removeEmptyTextNodes(doc);
  removeEmptyTextNodes(controlDoc);
  assertTrue(""String_Node_Str"" + documentToString(controlDoc) + ""String_Node_Str""+ documentToString(doc),comparer.isNodeEqual(controlDoc,doc));
}"
63555,"@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_PACKAGE_TEST_TYPES,ddlDebug);
    runDdl(conn,CREATE_PACKAGE_BODY_TEST_TYPES,ddlDebug);
    runDdl(conn,CREATE_XMLTYPEDATA_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_XMLTYPEDATA_TABLE.length; i++) {
        stmt.addBatch(POPULATE_XMLTYPEDATA_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}","@BeforeClass public static void setUp() throws WSDLException {
  if (conn == null) {
    try {
      conn=buildConnection();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  String ddlCreateProp=System.getProperty(DATABASE_DDL_CREATE_KEY,DEFAULT_DATABASE_DDL_CREATE);
  if (""String_Node_Str"".equalsIgnoreCase(ddlCreateProp)) {
    ddlCreate=true;
  }
  String ddlDropProp=System.getProperty(DATABASE_DDL_DROP_KEY,DEFAULT_DATABASE_DDL_DROP);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDropProp)) {
    ddlDrop=true;
  }
  String ddlDebugProp=System.getProperty(DATABASE_DDL_DEBUG_KEY,DEFAULT_DATABASE_DDL_DEBUG);
  if (""String_Node_Str"".equalsIgnoreCase(ddlDebugProp)) {
    ddlDebug=true;
  }
  if (ddlCreate) {
    runDdl(conn,CREATE_PACKAGE_TEST_TYPES,ddlDebug);
    runDdl(conn,CREATE_PACKAGE_BODY_TEST_TYPES,ddlDebug);
    runDdl(conn,CREATE_XMLTYPEDATA_TABLE,ddlDebug);
    try {
      Statement stmt=conn.createStatement();
      for (int i=0; i < POPULATE_XMLTYPEDATA_TABLE.length; i++) {
        stmt.addBatch(POPULATE_XMLTYPEDATA_TABLE[i]);
      }
      stmt.executeBatch();
    }
 catch (    SQLException e) {
    }
  }
  DBWS_BUILDER_XML_USERNAME=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DBWS_BUILDER_XML_PASSWORD=""String_Node_Str"";
  DBWS_BUILDER_XML_URL=""String_Node_Str"";
  DBWS_BUILDER_XML_DRIVER=""String_Node_Str"";
  DBWS_BUILDER_XML_PLATFORM=""String_Node_Str"";
  DBWS_BUILDER_XML_MAIN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  builder=new DBWSBuilder();
  DBWSTestSuite.setUp(""String_Node_Str"");
}"
63556,"/** 
 * Generate an XMLEntityMappings instance based on a given OR Project's Queries and Descriptors.
 * @param orProject the ORM Project instance containing Queries and Descriptors to be used to generate an XMLEntityMappings
 * @param complexTypes list of composite database types used to generate metadata for advanced Oracle and PL/SQL types
 * @param crudOperations map of maps keyed on table name - the second map are operation name to SQL string entries
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static XMLEntityMappings generateXmlEntityMappings(Project orProject,List<CompositeDatabaseType> complexTypes,Map<String,Map<String,String>> crudOperations){
  List<ClassDescriptor> descriptors=orProject.getOrderedDescriptors();
  List<DatabaseQuery> queries=orProject.getQueries();
  XMLEntityMappings xmlEntityMappings=new XMLEntityMappings();
  xmlEntityMappings.setEmbeddables(new ArrayList<EmbeddableAccessor>());
  xmlEntityMappings.setEntities(new ArrayList<EntityAccessor>());
  xmlEntityMappings.setPLSQLRecords(new ArrayList<PLSQLRecordMetadata>());
  xmlEntityMappings.setPLSQLTables(new ArrayList<PLSQLTableMetadata>());
  xmlEntityMappings.setOracleObjectTypes(new ArrayList<OracleObjectTypeMetadata>());
  xmlEntityMappings.setOracleArrayTypes(new ArrayList<OracleArrayTypeMetadata>());
  List<PLSQLRecordMetadata> plsqlRecords=null;
  List<PLSQLTableMetadata> plsqlTables=null;
  List<OracleObjectTypeMetadata> objectTypes=null;
  List<OracleArrayTypeMetadata> arrayTypes=null;
  List<ComplexTypeMetadata> complexTypeMetadata=processCompositeTypes(complexTypes,orProject);
  for (  ComplexTypeMetadata cTypeMetadata : complexTypeMetadata) {
    if (cTypeMetadata.isOracleComplexTypeMetadata()) {
      OracleComplexTypeMetadata octMetadata=(OracleComplexTypeMetadata)cTypeMetadata;
      if (octMetadata.isOracleArrayTypeMetadata()) {
        if (arrayTypes == null) {
          arrayTypes=new ArrayList<OracleArrayTypeMetadata>();
        }
        arrayTypes.add((OracleArrayTypeMetadata)octMetadata);
      }
 else {
        if (objectTypes == null) {
          objectTypes=new ArrayList<OracleObjectTypeMetadata>();
        }
        objectTypes.add((OracleObjectTypeMetadata)octMetadata);
      }
    }
 else {
      PLSQLComplexTypeMetadata plsqlctMetadata=(PLSQLComplexTypeMetadata)cTypeMetadata;
      if (plsqlctMetadata.isPLSQLRecordMetadata()) {
        if (plsqlRecords == null) {
          plsqlRecords=new ArrayList<PLSQLRecordMetadata>();
        }
        plsqlRecords.add((PLSQLRecordMetadata)plsqlctMetadata);
      }
 else {
        if (plsqlTables == null) {
          plsqlTables=new ArrayList<PLSQLTableMetadata>();
        }
        plsqlTables.add((PLSQLTableMetadata)plsqlctMetadata);
      }
    }
  }
  xmlEntityMappings.setPLSQLRecords(plsqlRecords);
  xmlEntityMappings.setPLSQLTables(plsqlTables);
  xmlEntityMappings.setOracleObjectTypes(objectTypes);
  xmlEntityMappings.setOracleArrayTypes(arrayTypes);
  List<NamedPLSQLStoredProcedureQueryMetadata> plsqlStoredProcs=null;
  List<NamedPLSQLStoredFunctionQueryMetadata> plsqlStoredFuncs=null;
  List<NamedStoredProcedureQueryMetadata> storedProcs=null;
  List<NamedStoredFunctionQueryMetadata> storedFuncs=null;
  List<NamedNativeQueryMetadata> namedNativeQueries=null;
  for (  DatabaseQuery query : queries) {
    if (query.getCall().isStoredFunctionCall()) {
      if (query.getCall() instanceof PLSQLStoredFunctionCall) {
        PLSQLStoredFunctionCall call=(PLSQLStoredFunctionCall)query.getCall();
        NamedPLSQLStoredFunctionQueryMetadata metadata=new NamedPLSQLStoredFunctionQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        List<PLSQLParameterMetadata> params=new ArrayList<PLSQLParameterMetadata>();
        if (plsqlStoredFuncs == null) {
          plsqlStoredFuncs=new ArrayList<NamedPLSQLStoredFunctionQueryMetadata>();
        }
        PLSQLargument arg;
        PLSQLParameterMetadata param;
        List<PLSQLargument> types=call.getArguments();
        for (int i=0; i < types.size(); i++) {
          arg=types.get(i);
          param=new PLSQLParameterMetadata();
          param.setName(arg.name);
          String dbType=arg.databaseType.getTypeName();
          if (arg.databaseType == XMLType) {
            dbType=XMLType.name();
          }
 else {
            if (!(getJDBCTypeFromTypeName(dbType) == Types.OTHER)) {
              if (!dbType.equals(BOOLEAN_STR)) {
                dbType=dbType.concat(_TYPE_STR);
              }
            }
          }
          param.setDatabaseType(dbType);
          if (i == 0) {
            metadata.setReturnParameter(param);
            if (arg.cursorOutput) {
              param.setDirection(CURSOR_STR);
            }
          }
 else {
            param.setDirection(getDirectionAsString(arg.direction));
            params.add(param);
          }
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        plsqlStoredFuncs.add(metadata);
      }
 else {
        StoredFunctionCall call=(StoredFunctionCall)query.getCall();
        NamedStoredFunctionQueryMetadata metadata=new NamedStoredFunctionQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        List<StoredProcedureParameterMetadata> params=new ArrayList<StoredProcedureParameterMetadata>();
        if (storedFuncs == null) {
          storedFuncs=new ArrayList<NamedStoredFunctionQueryMetadata>();
        }
        DatabaseField arg;
        StoredProcedureParameterMetadata param;
        List<DatabaseField> paramFields=call.getParameters();
        List<Integer> types=call.getParameterTypes();
        for (int i=0; i < paramFields.size(); i++) {
          arg=paramFields.get(i);
          param=new StoredProcedureParameterMetadata();
          param.setTypeName(arg.getTypeName());
          if (arg.getSqlType() != DatabaseField.NULL_SQL_TYPE) {
            param.setJdbcType(arg.getSqlType());
          }
          if (arg.isObjectRelationalDatabaseField()) {
            param.setJdbcTypeName(((ObjectRelationalDatabaseField)arg).getSqlTypeName());
          }
          if (i == 0) {
            metadata.setReturnParameter(param);
            if ((Integer)types.get(i) == 8) {
              addQueryHint(metadata);
            }
          }
 else {
            param.setName(arg.getName());
            param.setMode(getParameterModeAsString((Integer)types.get(i)));
            params.add(param);
          }
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        storedFuncs.add(metadata);
      }
    }
 else     if (query.getCall().isStoredProcedureCall()) {
      if (query.getCall() instanceof PLSQLStoredProcedureCall) {
        PLSQLStoredProcedureCall call=(PLSQLStoredProcedureCall)query.getCall();
        if (plsqlStoredProcs == null) {
          plsqlStoredProcs=new ArrayList<NamedPLSQLStoredProcedureQueryMetadata>();
        }
        NamedPLSQLStoredProcedureQueryMetadata metadata=new NamedPLSQLStoredProcedureQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        PLSQLParameterMetadata param;
        List<PLSQLParameterMetadata> params=new ArrayList<PLSQLParameterMetadata>();
        List<PLSQLargument> types=call.getArguments();
        for (        PLSQLargument arg : types) {
          param=new PLSQLParameterMetadata();
          param.setName(arg.name);
          String dbType=processTypeName(arg.databaseType.getTypeName());
          if (arg.cursorOutput) {
            param.setDirection(CURSOR_STR);
          }
 else {
            param.setDirection(getDirectionAsString(arg.direction));
          }
          if (arg.databaseType == XMLType) {
            param.setDatabaseType(XMLType.name());
          }
 else {
            param.setDatabaseType(dbType);
          }
          params.add(param);
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        plsqlStoredProcs.add(metadata);
      }
 else {
        StoredProcedureCall call=(StoredProcedureCall)query.getCall();
        NamedStoredProcedureQueryMetadata metadata=new NamedStoredProcedureQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        metadata.setReturnsResultSet(false);
        List<StoredProcedureParameterMetadata> params=new ArrayList<StoredProcedureParameterMetadata>();
        DatabaseField arg;
        StoredProcedureParameterMetadata param;
        List paramFields=call.getParameters();
        List<Integer> types=call.getParameterTypes();
        for (int i=0; i < paramFields.size(); i++) {
          if (types.get(i) == DatabaseCall.INOUT) {
            arg=(DatabaseField)((Object[])paramFields.get(i))[1];
          }
 else {
            arg=(DatabaseField)paramFields.get(i);
          }
          param=new StoredProcedureParameterMetadata();
          param.setName(arg.getName());
          param.setTypeName(arg.getTypeName());
          if (arg.getSqlType() != DatabaseField.NULL_SQL_TYPE) {
            param.setJdbcType(arg.getSqlType());
          }
          if (arg.isObjectRelationalDatabaseField()) {
            param.setJdbcTypeName(((ObjectRelationalDatabaseField)arg).getSqlTypeName());
          }
          param.setMode(getParameterModeAsString((Integer)types.get(i)));
          if ((Integer)types.get(i) == 8) {
            addQueryHint(metadata);
          }
          params.add(param);
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        if (storedProcs == null) {
          storedProcs=new ArrayList<NamedStoredProcedureQueryMetadata>();
        }
        storedProcs.add(metadata);
      }
    }
 else {
      NamedNativeQueryMetadata namedQuery=new NamedNativeQueryMetadata();
      namedQuery.setName(query.getName());
      namedQuery.setQuery(query.getSQLString());
      namedQuery.setResultClassName(query.getReferenceClassName());
      if (namedNativeQueries == null) {
        namedNativeQueries=new ArrayList<NamedNativeQueryMetadata>();
      }
      namedNativeQueries.add(namedQuery);
    }
  }
  if (plsqlStoredProcs != null) {
    xmlEntityMappings.setNamedPLSQLStoredProcedureQueries(plsqlStoredProcs);
  }
  if (plsqlStoredFuncs != null) {
    xmlEntityMappings.setNamedPLSQLStoredFunctionQueries(plsqlStoredFuncs);
  }
  if (storedProcs != null) {
    xmlEntityMappings.setNamedStoredProcedureQueries(storedProcs);
  }
  if (storedFuncs != null) {
    xmlEntityMappings.setNamedStoredFunctionQueries(storedFuncs);
  }
  if (namedNativeQueries != null) {
    xmlEntityMappings.setNamedNativeQueries(namedNativeQueries);
  }
  List<String> embeddables=new ArrayList<String>();
  Map<String,ClassAccessor> accessors=new HashMap<String,ClassAccessor>();
  for (  ClassDescriptor cdesc : descriptors) {
    boolean embeddable=false;
    ClassAccessor classAccessor;
    if (cdesc.isAggregateDescriptor()) {
      embeddable=true;
      classAccessor=new EmbeddableAccessor();
      embeddables.add(cdesc.getJavaClassName());
    }
 else {
      classAccessor=new EntityAccessor();
    }
    classAccessor.setClassName(cdesc.getJavaClassName());
    classAccessor.setAccess(EL_ACCESS_VIRTUAL);
    if (cdesc.isObjectRelationalDataTypeDescriptor()) {
      ObjectRelationalDataTypeDescriptor odesc=(ObjectRelationalDataTypeDescriptor)cdesc;
      if (odesc.getOrderedFields().size() > 0) {
        StructMetadata struct=new StructMetadata();
        struct.setName(odesc.getStructureName());
        struct.setFields(odesc.getOrderedFields());
        classAccessor.setStruct(struct);
      }
    }
    if (!embeddable && cdesc.getTableName() != null) {
      TableMetadata table=new TableMetadata();
      table.setName(cdesc.getTableName());
      ((EntityAccessor)classAccessor).setTable(table);
    }
    if (!embeddable) {
      List<NamedNativeQueryMetadata> namedNatQueries=new ArrayList<NamedNativeQueryMetadata>();
      NamedNativeQueryMetadata namedQuery;
      DatabaseQuery dbQuery;
      for (Iterator<DatabaseQuery> queryIt=cdesc.getQueryManager().getAllQueries().iterator(); queryIt.hasNext(); ) {
        dbQuery=queryIt.next();
        namedQuery=new NamedNativeQueryMetadata();
        namedQuery.setName(dbQuery.getName());
        namedQuery.setQuery(dbQuery.getSQLString());
        namedQuery.setResultClassName(dbQuery.getReferenceClassName());
        namedNatQueries.add(namedQuery);
      }
      Map<String,String> crudOps=crudOperations.get(cdesc.getTableName());
      if (!crudOps.isEmpty()) {
        for (        String opName : crudOps.keySet()) {
          String crudSql=crudOps.get(opName);
          NamedNativeQueryMetadata crudQuery=new NamedNativeQueryMetadata();
          crudQuery.setName(opName);
          crudQuery.setQuery(crudSql);
          if (namedNatQueries == null) {
            namedNatQueries=new ArrayList<NamedNativeQueryMetadata>();
          }
          namedNatQueries.add(crudQuery);
        }
      }
      if (namedNatQueries.size() > 0) {
        ((EntityAccessor)classAccessor).setNamedNativeQueries(namedNatQueries);
      }
    }
    classAccessor.setAttributes(new XMLAttributes());
    classAccessor.getAttributes().setIds(new ArrayList<IdAccessor>());
    classAccessor.getAttributes().setBasics(new ArrayList<BasicAccessor>());
    classAccessor.getAttributes().setArrays(new ArrayList<ArrayAccessor>());
    classAccessor.getAttributes().setStructures(new ArrayList<StructureAccessor>());
    classAccessor.getAttributes().setEmbeddeds(new ArrayList<EmbeddedAccessor>());
    if (embeddable) {
      xmlEntityMappings.getEmbeddables().add((EmbeddableAccessor)classAccessor);
    }
 else {
      xmlEntityMappings.getEntities().add((EntityAccessor)classAccessor);
    }
    accessors.put(cdesc.getJavaClassName(),classAccessor);
  }
  for (  ClassDescriptor cdesc : descriptors) {
    ClassAccessor classAccessor=accessors.get(cdesc.getJavaClassName());
    MappingAccessor mapAccessor;
    for (    DatabaseMapping dbMapping : cdesc.getMappings()) {
      mapAccessor=generateMappingAccessor(dbMapping,embeddables);
      if (mapAccessor == null) {
        continue;
      }
      if (mapAccessor.isId()) {
        classAccessor.getAttributes().getIds().add((IdAccessor)mapAccessor);
      }
 else       if (mapAccessor.isBasic()) {
        classAccessor.getAttributes().getBasics().add((BasicAccessor)mapAccessor);
      }
 else       if (mapAccessor instanceof ArrayAccessor) {
        classAccessor.getAttributes().getArrays().add((ArrayAccessor)mapAccessor);
      }
 else       if (mapAccessor instanceof StructureAccessor) {
        classAccessor.getAttributes().getStructures().add((StructureAccessor)mapAccessor);
      }
 else {
        classAccessor.getAttributes().getEmbeddeds().add((EmbeddedAccessor)mapAccessor);
      }
    }
  }
  return xmlEntityMappings;
}","/** 
 * Generate an XMLEntityMappings instance based on a given OR Project's Queries and Descriptors.
 * @param orProject the ORM Project instance containing Queries and Descriptors to be used to generate an XMLEntityMappings
 * @param complexTypes list of composite database types used to generate metadata for advanced Oracle and PL/SQL types
 * @param crudOperations map of maps keyed on table name - the second map are operation name to SQL string entries
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static XMLEntityMappings generateXmlEntityMappings(Project orProject,List<CompositeDatabaseType> complexTypes,Map<String,Map<String,String>> crudOperations){
  List<ClassDescriptor> descriptors=orProject.getOrderedDescriptors();
  List<DatabaseQuery> queries=orProject.getQueries();
  XMLEntityMappings xmlEntityMappings=new XMLEntityMappings();
  xmlEntityMappings.setEmbeddables(new ArrayList<EmbeddableAccessor>());
  xmlEntityMappings.setEntities(new ArrayList<EntityAccessor>());
  xmlEntityMappings.setPLSQLRecords(new ArrayList<PLSQLRecordMetadata>());
  xmlEntityMappings.setPLSQLTables(new ArrayList<PLSQLTableMetadata>());
  xmlEntityMappings.setOracleObjectTypes(new ArrayList<OracleObjectTypeMetadata>());
  xmlEntityMappings.setOracleArrayTypes(new ArrayList<OracleArrayTypeMetadata>());
  List<PLSQLRecordMetadata> plsqlRecords=null;
  List<PLSQLTableMetadata> plsqlTables=null;
  List<OracleObjectTypeMetadata> objectTypes=null;
  List<OracleArrayTypeMetadata> arrayTypes=null;
  List<ComplexTypeMetadata> complexTypeMetadata=processCompositeTypes(complexTypes,orProject);
  for (  ComplexTypeMetadata cTypeMetadata : complexTypeMetadata) {
    if (cTypeMetadata.isOracleComplexTypeMetadata()) {
      OracleComplexTypeMetadata octMetadata=(OracleComplexTypeMetadata)cTypeMetadata;
      if (octMetadata.isOracleArrayTypeMetadata()) {
        if (arrayTypes == null) {
          arrayTypes=new ArrayList<OracleArrayTypeMetadata>();
        }
        arrayTypes.add((OracleArrayTypeMetadata)octMetadata);
      }
 else {
        if (objectTypes == null) {
          objectTypes=new ArrayList<OracleObjectTypeMetadata>();
        }
        objectTypes.add((OracleObjectTypeMetadata)octMetadata);
      }
    }
 else {
      PLSQLComplexTypeMetadata plsqlctMetadata=(PLSQLComplexTypeMetadata)cTypeMetadata;
      if (plsqlctMetadata.isPLSQLRecordMetadata()) {
        if (plsqlRecords == null) {
          plsqlRecords=new ArrayList<PLSQLRecordMetadata>();
        }
        plsqlRecords.add((PLSQLRecordMetadata)plsqlctMetadata);
      }
 else {
        if (plsqlTables == null) {
          plsqlTables=new ArrayList<PLSQLTableMetadata>();
        }
        plsqlTables.add((PLSQLTableMetadata)plsqlctMetadata);
      }
    }
  }
  xmlEntityMappings.setPLSQLRecords(plsqlRecords);
  xmlEntityMappings.setPLSQLTables(plsqlTables);
  xmlEntityMappings.setOracleObjectTypes(objectTypes);
  xmlEntityMappings.setOracleArrayTypes(arrayTypes);
  List<NamedPLSQLStoredProcedureQueryMetadata> plsqlStoredProcs=null;
  List<NamedPLSQLStoredFunctionQueryMetadata> plsqlStoredFuncs=null;
  List<NamedStoredProcedureQueryMetadata> storedProcs=null;
  List<NamedStoredFunctionQueryMetadata> storedFuncs=null;
  List<NamedNativeQueryMetadata> namedNativeQueries=null;
  for (  DatabaseQuery query : queries) {
    if (query.getCall().isStoredFunctionCall()) {
      if (query.getCall() instanceof PLSQLStoredFunctionCall) {
        PLSQLStoredFunctionCall call=(PLSQLStoredFunctionCall)query.getCall();
        NamedPLSQLStoredFunctionQueryMetadata metadata=new NamedPLSQLStoredFunctionQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        List<PLSQLParameterMetadata> params=new ArrayList<PLSQLParameterMetadata>();
        if (plsqlStoredFuncs == null) {
          plsqlStoredFuncs=new ArrayList<NamedPLSQLStoredFunctionQueryMetadata>();
        }
        PLSQLargument arg;
        PLSQLParameterMetadata param;
        List<PLSQLargument> types=call.getArguments();
        for (int i=0; i < types.size(); i++) {
          arg=types.get(i);
          param=new PLSQLParameterMetadata();
          param.setName(arg.name);
          String dbType=arg.databaseType.getTypeName();
          if (arg.databaseType == XMLType) {
            dbType=XMLType.name();
          }
 else           if (arg.databaseType == PLSQLBoolean) {
            dbType=PLSQLBoolean.name();
          }
 else {
            if (!(getJDBCTypeFromTypeName(dbType) == Types.OTHER)) {
              dbType=dbType.concat(_TYPE_STR);
            }
          }
          param.setDatabaseType(dbType);
          if (i == 0) {
            metadata.setReturnParameter(param);
            if (arg.cursorOutput) {
              param.setDirection(CURSOR_STR);
            }
          }
 else {
            param.setDirection(getDirectionAsString(arg.direction));
            params.add(param);
          }
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        plsqlStoredFuncs.add(metadata);
      }
 else {
        StoredFunctionCall call=(StoredFunctionCall)query.getCall();
        NamedStoredFunctionQueryMetadata metadata=new NamedStoredFunctionQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        List<StoredProcedureParameterMetadata> params=new ArrayList<StoredProcedureParameterMetadata>();
        if (storedFuncs == null) {
          storedFuncs=new ArrayList<NamedStoredFunctionQueryMetadata>();
        }
        DatabaseField arg;
        StoredProcedureParameterMetadata param;
        List<DatabaseField> paramFields=call.getParameters();
        List<Integer> types=call.getParameterTypes();
        for (int i=0; i < paramFields.size(); i++) {
          arg=paramFields.get(i);
          param=new StoredProcedureParameterMetadata();
          param.setTypeName(arg.getTypeName());
          if (arg.getSqlType() != DatabaseField.NULL_SQL_TYPE) {
            param.setJdbcType(arg.getSqlType());
          }
          if (arg.isObjectRelationalDatabaseField()) {
            param.setJdbcTypeName(((ObjectRelationalDatabaseField)arg).getSqlTypeName());
          }
          if (i == 0) {
            metadata.setReturnParameter(param);
            if ((Integer)types.get(i) == 8) {
              addQueryHint(metadata);
            }
          }
 else {
            param.setName(arg.getName());
            param.setMode(getParameterModeAsString((Integer)types.get(i)));
            params.add(param);
          }
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        storedFuncs.add(metadata);
      }
    }
 else     if (query.getCall().isStoredProcedureCall()) {
      if (query.getCall() instanceof PLSQLStoredProcedureCall) {
        PLSQLStoredProcedureCall call=(PLSQLStoredProcedureCall)query.getCall();
        if (plsqlStoredProcs == null) {
          plsqlStoredProcs=new ArrayList<NamedPLSQLStoredProcedureQueryMetadata>();
        }
        NamedPLSQLStoredProcedureQueryMetadata metadata=new NamedPLSQLStoredProcedureQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        PLSQLParameterMetadata param;
        List<PLSQLParameterMetadata> params=new ArrayList<PLSQLParameterMetadata>();
        List<PLSQLargument> types=call.getArguments();
        for (        PLSQLargument arg : types) {
          param=new PLSQLParameterMetadata();
          param.setName(arg.name);
          String dbType=processTypeName(arg.databaseType.getTypeName());
          if (arg.cursorOutput) {
            param.setDirection(CURSOR_STR);
          }
 else {
            param.setDirection(getDirectionAsString(arg.direction));
          }
          if (arg.databaseType == XMLType) {
            param.setDatabaseType(XMLType.name());
          }
 else           if (arg.databaseType == PLSQLBoolean) {
            param.setDatabaseType(PLSQLBoolean.name());
          }
 else {
            param.setDatabaseType(dbType);
          }
          params.add(param);
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        plsqlStoredProcs.add(metadata);
      }
 else {
        StoredProcedureCall call=(StoredProcedureCall)query.getCall();
        NamedStoredProcedureQueryMetadata metadata=new NamedStoredProcedureQueryMetadata();
        metadata.setName(query.getName());
        metadata.setProcedureName(call.getProcedureName());
        metadata.setReturnsResultSet(false);
        List<StoredProcedureParameterMetadata> params=new ArrayList<StoredProcedureParameterMetadata>();
        DatabaseField arg;
        StoredProcedureParameterMetadata param;
        List paramFields=call.getParameters();
        List<Integer> types=call.getParameterTypes();
        for (int i=0; i < paramFields.size(); i++) {
          if (types.get(i) == DatabaseCall.INOUT) {
            arg=(DatabaseField)((Object[])paramFields.get(i))[1];
          }
 else {
            arg=(DatabaseField)paramFields.get(i);
          }
          param=new StoredProcedureParameterMetadata();
          param.setName(arg.getName());
          param.setTypeName(arg.getTypeName());
          if (arg.getSqlType() != DatabaseField.NULL_SQL_TYPE) {
            param.setJdbcType(arg.getSqlType());
          }
          if (arg.isObjectRelationalDatabaseField()) {
            param.setJdbcTypeName(((ObjectRelationalDatabaseField)arg).getSqlTypeName());
          }
          param.setMode(getParameterModeAsString((Integer)types.get(i)));
          if ((Integer)types.get(i) == 8) {
            addQueryHint(metadata);
          }
          params.add(param);
        }
        if (params.size() > 0) {
          metadata.setParameters(params);
        }
        if (storedProcs == null) {
          storedProcs=new ArrayList<NamedStoredProcedureQueryMetadata>();
        }
        storedProcs.add(metadata);
      }
    }
 else {
      NamedNativeQueryMetadata namedQuery=new NamedNativeQueryMetadata();
      namedQuery.setName(query.getName());
      namedQuery.setQuery(query.getSQLString());
      namedQuery.setResultClassName(query.getReferenceClassName());
      if (namedNativeQueries == null) {
        namedNativeQueries=new ArrayList<NamedNativeQueryMetadata>();
      }
      namedNativeQueries.add(namedQuery);
    }
  }
  if (plsqlStoredProcs != null) {
    xmlEntityMappings.setNamedPLSQLStoredProcedureQueries(plsqlStoredProcs);
  }
  if (plsqlStoredFuncs != null) {
    xmlEntityMappings.setNamedPLSQLStoredFunctionQueries(plsqlStoredFuncs);
  }
  if (storedProcs != null) {
    xmlEntityMappings.setNamedStoredProcedureQueries(storedProcs);
  }
  if (storedFuncs != null) {
    xmlEntityMappings.setNamedStoredFunctionQueries(storedFuncs);
  }
  if (namedNativeQueries != null) {
    xmlEntityMappings.setNamedNativeQueries(namedNativeQueries);
  }
  List<String> embeddables=new ArrayList<String>();
  Map<String,ClassAccessor> accessors=new HashMap<String,ClassAccessor>();
  for (  ClassDescriptor cdesc : descriptors) {
    boolean embeddable=false;
    ClassAccessor classAccessor;
    if (cdesc.isAggregateDescriptor()) {
      embeddable=true;
      classAccessor=new EmbeddableAccessor();
      embeddables.add(cdesc.getJavaClassName());
    }
 else {
      classAccessor=new EntityAccessor();
    }
    classAccessor.setClassName(cdesc.getJavaClassName());
    classAccessor.setAccess(EL_ACCESS_VIRTUAL);
    if (cdesc.isObjectRelationalDataTypeDescriptor()) {
      ObjectRelationalDataTypeDescriptor odesc=(ObjectRelationalDataTypeDescriptor)cdesc;
      if (odesc.getOrderedFields().size() > 0) {
        StructMetadata struct=new StructMetadata();
        struct.setName(odesc.getStructureName());
        struct.setFields(odesc.getOrderedFields());
        classAccessor.setStruct(struct);
      }
    }
    if (!embeddable && cdesc.getTableName() != null) {
      TableMetadata table=new TableMetadata();
      table.setName(cdesc.getTableName());
      ((EntityAccessor)classAccessor).setTable(table);
    }
    if (!embeddable) {
      List<NamedNativeQueryMetadata> namedNatQueries=new ArrayList<NamedNativeQueryMetadata>();
      NamedNativeQueryMetadata namedQuery;
      DatabaseQuery dbQuery;
      for (Iterator<DatabaseQuery> queryIt=cdesc.getQueryManager().getAllQueries().iterator(); queryIt.hasNext(); ) {
        dbQuery=queryIt.next();
        namedQuery=new NamedNativeQueryMetadata();
        namedQuery.setName(dbQuery.getName());
        namedQuery.setQuery(dbQuery.getSQLString());
        namedQuery.setResultClassName(dbQuery.getReferenceClassName());
        namedNatQueries.add(namedQuery);
      }
      Map<String,String> crudOps=crudOperations.get(cdesc.getTableName());
      if (!crudOps.isEmpty()) {
        for (        String opName : crudOps.keySet()) {
          String crudSql=crudOps.get(opName);
          NamedNativeQueryMetadata crudQuery=new NamedNativeQueryMetadata();
          crudQuery.setName(opName);
          crudQuery.setQuery(crudSql);
          if (namedNatQueries == null) {
            namedNatQueries=new ArrayList<NamedNativeQueryMetadata>();
          }
          namedNatQueries.add(crudQuery);
        }
      }
      if (namedNatQueries.size() > 0) {
        ((EntityAccessor)classAccessor).setNamedNativeQueries(namedNatQueries);
      }
    }
    classAccessor.setAttributes(new XMLAttributes());
    classAccessor.getAttributes().setIds(new ArrayList<IdAccessor>());
    classAccessor.getAttributes().setBasics(new ArrayList<BasicAccessor>());
    classAccessor.getAttributes().setArrays(new ArrayList<ArrayAccessor>());
    classAccessor.getAttributes().setStructures(new ArrayList<StructureAccessor>());
    classAccessor.getAttributes().setEmbeddeds(new ArrayList<EmbeddedAccessor>());
    if (embeddable) {
      xmlEntityMappings.getEmbeddables().add((EmbeddableAccessor)classAccessor);
    }
 else {
      xmlEntityMappings.getEntities().add((EntityAccessor)classAccessor);
    }
    accessors.put(cdesc.getJavaClassName(),classAccessor);
  }
  for (  ClassDescriptor cdesc : descriptors) {
    ClassAccessor classAccessor=accessors.get(cdesc.getJavaClassName());
    MappingAccessor mapAccessor;
    for (    DatabaseMapping dbMapping : cdesc.getMappings()) {
      mapAccessor=generateMappingAccessor(dbMapping,embeddables);
      if (mapAccessor == null) {
        continue;
      }
      if (mapAccessor.isId()) {
        classAccessor.getAttributes().getIds().add((IdAccessor)mapAccessor);
      }
 else       if (mapAccessor.isBasic()) {
        classAccessor.getAttributes().getBasics().add((BasicAccessor)mapAccessor);
      }
 else       if (mapAccessor instanceof ArrayAccessor) {
        classAccessor.getAttributes().getArrays().add((ArrayAccessor)mapAccessor);
      }
 else       if (mapAccessor instanceof StructureAccessor) {
        classAccessor.getAttributes().getStructures().add((StructureAccessor)mapAccessor);
      }
 else {
        classAccessor.getAttributes().getEmbeddeds().add((EmbeddedAccessor)mapAccessor);
      }
    }
  }
  return xmlEntityMappings;
}"
63557,"public static TableDefinition buildISOLATEDCHILDTable(){
  TableDefinition tabledefinition=new TableDefinition();
  tabledefinition.setName(""String_Node_Str"");
  FieldDefinition field=new FieldDefinition();
  field.setName(""String_Node_Str"");
  field.setTypeName(""String_Node_Str"");
  field.setSize(15);
  field.setShouldAllowNull(false);
  field.setIsPrimaryKey(true);
  field.setUnique(false);
  field.setIsIdentity(true);
  tabledefinition.addField(field);
  FieldDefinition field1=new FieldDefinition();
  field1.setName(""String_Node_Str"");
  field1.setTypeName(""String_Node_Str"");
  field1.setSize(15);
  field1.setShouldAllowNull(false);
  field1.setIsPrimaryKey(true);
  field1.setUnique(false);
  field1.setIsIdentity(false);
  field1.setForeignKeyFieldName(""String_Node_Str"");
  tabledefinition.addField(field1);
  FieldDefinition field2=new FieldDefinition();
  field2.setName(""String_Node_Str"");
  field2.setTypeName(""String_Node_Str"");
  field2.setSize(100);
  field2.setShouldAllowNull(false);
  field2.setIsPrimaryKey(true);
  field2.setUnique(false);
  field2.setIsIdentity(false);
  tabledefinition.addField(field2);
  return tabledefinition;
}","public static TableDefinition buildISOLATEDCHILDTable(){
  TableDefinition tabledefinition=new TableDefinition();
  tabledefinition.setName(""String_Node_Str"");
  FieldDefinition field=new FieldDefinition();
  field.setName(""String_Node_Str"");
  field.setTypeName(""String_Node_Str"");
  field.setSize(15);
  field.setShouldAllowNull(false);
  field.setIsPrimaryKey(true);
  field.setUnique(false);
  field.setIsIdentity(true);
  tabledefinition.addField(field);
  FieldDefinition field1=new FieldDefinition();
  field1.setName(""String_Node_Str"");
  field1.setTypeName(""String_Node_Str"");
  field1.setSize(15);
  field1.setShouldAllowNull(false);
  field1.setIsPrimaryKey(false);
  field1.setUnique(false);
  field1.setIsIdentity(false);
  field1.setForeignKeyFieldName(""String_Node_Str"");
  tabledefinition.addField(field1);
  FieldDefinition field2=new FieldDefinition();
  field2.setName(""String_Node_Str"");
  field2.setTypeName(""String_Node_Str"");
  field2.setSize(100);
  field2.setShouldAllowNull(false);
  field2.setIsPrimaryKey(false);
  field2.setUnique(false);
  field2.setIsIdentity(false);
  tabledefinition.addField(field2);
  FieldDefinition field3=new FieldDefinition();
  field3.setName(""String_Node_Str"");
  field3.setTypeName(""String_Node_Str"");
  field3.setSize(1);
  field3.setShouldAllowNull(false);
  field3.setIsPrimaryKey(false);
  field3.setUnique(false);
  field3.setIsIdentity(false);
  tabledefinition.addField(field3);
  return tabledefinition;
}"
63558,"public XMLBinder(XMLContext context){
  this.context=new XMLContext(context.getXMLContextState());
  marshaller=this.context.createMarshaller();
  unmarshaller=this.context.createUnmarshaller();
  saxUnmarshaller=new SAXUnmarshaller(unmarshaller,null);
  documentPreservationPolicy=new XMLBinderPolicy();
  reader=new DOMReader(unmarshaller);
}","public XMLBinder(XMLContext context,XMLMarshaller marshaller,XMLUnmarshaller unmarshaller){
  this.context=new XMLContext(context.getXMLContextState());
  this.marshaller=marshaller;
  this.unmarshaller=unmarshaller;
  initialize();
}"
63559,"/** 
 * Create a new XMLBinder
 * @return an XMLBinder based on this XMLContext
 */
public XMLBinder createBinder(){
  return new XMLBinder(this);
}","/** 
 * Create a new XMLBinder with supplied marshaller and unmarshaller instances.
 * @return an XMLBinder based on this XMLContext,
 */
public XMLBinder createBinder(XMLMarshaller marshaller,XMLUnmarshaller unmarshaller){
  return new XMLBinder(this,marshaller,unmarshaller);
}"
63560,"public JAXBBinder(XMLContext xmlContext){
  this.xmlContext=xmlContext;
  this.xmlBinder=this.xmlContext.createBinder();
  this.xmlBinder.getDocumentPreservationPolicy().setNodeOrderingPolicy(new RelativePositionOrderingPolicy());
  this.xmlBinder.setErrorHandler(new JAXBErrorHandler(JAXBContext.DEFAULT_VALIDATION_EVENT_HANDER));
}","public JAXBBinder(JAXBContext xmlContext,XMLMarshaller marshaller,XMLUnmarshaller unmarshaller){
  this.jaxbContext=xmlContext;
  this.xmlBinder=this.jaxbContext.getXMLContext().createBinder(marshaller,unmarshaller);
  this.xmlBinder.getDocumentPreservationPolicy().setNodeOrderingPolicy(new RelativePositionOrderingPolicy());
  this.xmlBinder.setErrorHandler(new JAXBErrorHandler(JAXBContext.DEFAULT_VALIDATION_EVENT_HANDER));
}"
63561,"/** 
 * Create a JAXBBinder.  The JAXBBinder is used to preserve unmapped XML Data.
 * @param nodeClass The DOM Node class to use
 */
public <T>JAXBBinder createBinder(Class<T> nodeClass){
  if (nodeClass.getName().equals(""String_Node_Str"")) {
    return new JAXBBinder(getXMLContext());
  }
 else {
    throw new UnsupportedOperationException(JAXBException.unsupportedNodeClass(nodeClass.getName()));
  }
}","public JAXBBinder createBinder(JAXBContext context){
  XMLMarshaller marshaller=null;
  XMLUnmarshaller unmarshaller=null;
  try {
    marshaller=createMarshaller(context).getXMLMarshaller();
    unmarshaller=createUnmarshaller(context).getXMLUnmarshaller();
  }
 catch (  javax.xml.bind.JAXBException e) {
    marshaller=context.getXMLContext().createMarshaller();
    unmarshaller=context.getXMLContext().createUnmarshaller();
  }
  return new JAXBBinder(context,marshaller,unmarshaller);
}"
63562,"/** 
 * INTERNAL: Return if the expression is not a valid primary key expression and add all primary key fields to the set.
 */
@Override public boolean extractFields(boolean requireExactMatch,boolean primaryKey,ClassDescriptor descriptor,List<DatabaseField> searchFields,Set<DatabaseField> foundFields){
  if (this.operator.getSelector() != ExpressionOperator.And) {
    if (requireExactMatch || (this.operator.getSelector() != ExpressionOperator.Or)) {
      return false;
    }
  }
  boolean validExpression=this.firstChild.extractFields(requireExactMatch,primaryKey,descriptor,searchFields,foundFields);
  if (requireExactMatch && (!validExpression)) {
    return false;
  }
  return this.secondChild.extractFields(requireExactMatch,primaryKey,descriptor,searchFields,foundFields);
}","/** 
 * INTERNAL: Return if the expression is not a valid primary key expression and add all primary key fields to the set.
 */
@Override public boolean extractFields(boolean requireExactMatch,boolean primaryKey,ClassDescriptor descriptor,List<DatabaseField> searchFields,Set<DatabaseField> foundFields){
  if (this.operator.getSelector() != ExpressionOperator.And) {
    if (requireExactMatch || (this.operator.getSelector() != ExpressionOperator.Or)) {
      return false;
    }
  }
  if (this.secondChild.getSession() == null && this.firstChild.getSession() != null) {
    this.secondChild.getBuilder().setSession(this.firstChild.getSession());
  }
 else   if (this.firstChild.getSession() == null && this.secondChild.getSession() != null) {
    this.firstChild.getBuilder().setSession(this.secondChild.getSession());
  }
  boolean validExpression=this.firstChild.extractFields(requireExactMatch,primaryKey,descriptor,searchFields,foundFields);
  if (requireExactMatch && (!validExpression)) {
    return false;
  }
  return this.secondChild.extractFields(requireExactMatch,primaryKey,descriptor,searchFields,foundFields);
}"
63563,"/** 
 * INTERNAL: Extract the values from the expression into the row. Ensure that the query is querying the exact primary key. Return false if not on the primary key.
 */
@Override public boolean extractValues(boolean primaryKeyOnly,boolean requireExactMatch,ClassDescriptor descriptor,AbstractRecord primaryKeyRow,AbstractRecord translationRow){
  if (this.operator.getSelector() != ExpressionOperator.And) {
    if (requireExactMatch || (this.operator.getSelector() != ExpressionOperator.Or)) {
      return false;
    }
  }
  boolean validExpression=this.firstChild.extractValues(primaryKeyOnly,requireExactMatch,descriptor,primaryKeyRow,translationRow);
  if (requireExactMatch && (!validExpression)) {
    return false;
  }
  return this.secondChild.extractValues(primaryKeyOnly,requireExactMatch,descriptor,primaryKeyRow,translationRow);
}","/** 
 * INTERNAL: Extract the values from the expression into the row. Ensure that the query is querying the exact primary key. Return false if not on the primary key.
 */
@Override public boolean extractValues(boolean primaryKeyOnly,boolean requireExactMatch,ClassDescriptor descriptor,AbstractRecord primaryKeyRow,AbstractRecord translationRow){
  if (this.operator.getSelector() != ExpressionOperator.And) {
    if (requireExactMatch || (this.operator.getSelector() != ExpressionOperator.Or)) {
      return false;
    }
  }
  if (this.secondChild.getSession() == null && this.firstChild.getSession() != null) {
    this.secondChild.getBuilder().setSession(this.firstChild.getSession());
  }
 else   if (this.firstChild.getSession() == null && this.secondChild.getSession() != null) {
    this.firstChild.getBuilder().setSession(this.secondChild.getSession());
  }
  boolean validExpression=this.firstChild.extractValues(primaryKeyOnly,requireExactMatch,descriptor,primaryKeyRow,translationRow);
  if (requireExactMatch && (!validExpression)) {
    return false;
  }
  return this.secondChild.extractValues(primaryKeyOnly,requireExactMatch,descriptor,primaryKeyRow,translationRow);
}"
63564,"/** 
 * INTERNAL: Extract the values from the expression into the row. Ensure that the query is querying the exact primary key.
 * @param requireExactMatch refers to the primary key extracted gaurenteeing the result,if not exact it is a heuristic and the cache hit will be conformed to the expression after the lookup Return false if not on the primary key.
 */
@Override public boolean extractValues(boolean primaryKeyOnly,boolean requireExactMatch,ClassDescriptor descriptor,AbstractRecord primaryKeyRow,AbstractRecord translationRow){
  if (requireExactMatch && (!(this.operator.getSelector() == ExpressionOperator.Equal))) {
    return false;
  }
  if ((!requireExactMatch) && (this.operator.getSelector() == ExpressionOperator.In)) {
    return false;
  }
  DatabaseField field=null;
  Object value=null;
  if (this.secondChild.isConstantExpression()) {
    value=((ConstantExpression)this.secondChild).getValue();
  }
 else   if (this.secondChild.isParameterExpression() && (translationRow != null)) {
    value=translationRow.get(((ParameterExpression)this.secondChild).getField());
  }
 else   if (this.firstChild.isConstantExpression()) {
    value=((ConstantExpression)this.firstChild).getValue();
  }
 else   if (this.firstChild.isParameterExpression() && (translationRow != null)) {
    value=translationRow.get(((ParameterExpression)this.firstChild).getField());
  }
  if (value == null) {
    return false;
  }
  if (this.firstChild.isFieldExpression()) {
    FieldExpression child=(FieldExpression)this.firstChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    field=child.getField();
  }
 else   if (this.firstChild.isQueryKeyExpression()) {
    QueryKeyExpression child=(QueryKeyExpression)this.firstChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    DatabaseMapping mapping=descriptor.getObjectBuilder().getMappingForAttributeName(child.getName());
    if (mapping != null) {
      if (primaryKeyOnly && !mapping.isPrimaryKeyMapping()) {
        return false;
      }
      if (mapping.isObjectReferenceMapping() || mapping.isAggregateObjectMapping()) {
        mapping.writeFromAttributeIntoRow(value,primaryKeyRow,getSession());
        return true;
      }
      if (!mapping.isAbstractColumnMapping()) {
        return false;
      }
      field=((AbstractColumnMapping)mapping).getField();
    }
 else {
      field=descriptor.getObjectBuilder().getFieldForQueryKeyName(child.getName());
    }
  }
 else   if (this.secondChild.isFieldExpression()) {
    FieldExpression child=(FieldExpression)this.secondChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    field=child.getField();
  }
 else   if (this.secondChild.isQueryKeyExpression()) {
    QueryKeyExpression child=(QueryKeyExpression)this.secondChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    DatabaseMapping mapping=descriptor.getObjectBuilder().getMappingForAttributeName(child.getName());
    if (mapping != null) {
      if (primaryKeyOnly && !mapping.isPrimaryKeyMapping()) {
        return false;
      }
      if (mapping.isObjectReferenceMapping() || mapping.isAggregateObjectMapping()) {
        mapping.writeFromAttributeIntoRow(value,primaryKeyRow,getSession());
        return true;
      }
      if (!mapping.isAbstractColumnMapping()) {
        return false;
      }
      field=((AbstractColumnMapping)mapping).getField();
    }
 else {
      field=descriptor.getObjectBuilder().getFieldForQueryKeyName(child.getName());
    }
  }
 else {
    return false;
  }
  if ((field == null) || (primaryKeyOnly && !descriptor.getPrimaryKeyFields().contains(field))) {
    return false;
  }
  primaryKeyRow.put(field,value);
  return true;
}","/** 
 * INTERNAL: Extract the values from the expression into the row. Ensure that the query is querying the exact primary key.
 * @param requireExactMatch refers to the primary key extracted gaurenteeing the result,if not exact it is a heuristic and the cache hit will be conformed to the expression after the lookup Return false if not on the primary key.
 */
@Override public boolean extractValues(boolean primaryKeyOnly,boolean requireExactMatch,ClassDescriptor descriptor,AbstractRecord primaryKeyRow,AbstractRecord translationRow){
  if (requireExactMatch && (!(this.operator.getSelector() == ExpressionOperator.Equal))) {
    return false;
  }
  if ((!requireExactMatch) && (this.operator.getSelector() == ExpressionOperator.In)) {
    return false;
  }
  DatabaseField field=null;
  Object value=null;
  if (this.secondChild.isConstantExpression()) {
    value=((ConstantExpression)this.secondChild).getValue();
  }
 else   if (this.secondChild.isParameterExpression() && (translationRow != null)) {
    value=translationRow.get(((ParameterExpression)this.secondChild).getField());
  }
 else   if (this.firstChild.isConstantExpression()) {
    value=((ConstantExpression)this.firstChild).getValue();
  }
 else   if (this.firstChild.isParameterExpression() && (translationRow != null)) {
    value=translationRow.get(((ParameterExpression)this.firstChild).getField());
  }
  if (value == null) {
    return false;
  }
  ClassDescriptor descriptorForChild=null;
  if (this.firstChild.isFieldExpression()) {
    FieldExpression child=(FieldExpression)this.firstChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    field=child.getField();
  }
 else   if (this.firstChild.isQueryKeyExpression()) {
    QueryKeyExpression child=(QueryKeyExpression)this.firstChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    descriptorForChild=((ExpressionBuilder)child.getBaseExpression()).getDescriptor();
    if (descriptorForChild == null) {
      descriptorForChild=descriptor;
    }
    DatabaseMapping mapping=descriptorForChild.getObjectBuilder().getMappingForAttributeName(child.getName());
    if (mapping != null) {
      if (primaryKeyOnly && !mapping.isPrimaryKeyMapping()) {
        return false;
      }
      if (mapping.isObjectReferenceMapping() || mapping.isAggregateObjectMapping()) {
        mapping.writeFromAttributeIntoRow(value,primaryKeyRow,getSession());
        return true;
      }
      if (!mapping.isAbstractColumnMapping()) {
        return false;
      }
      field=((AbstractColumnMapping)mapping).getField();
    }
 else {
      field=descriptorForChild.getObjectBuilder().getFieldForQueryKeyName(child.getName());
    }
  }
 else   if (this.secondChild.isFieldExpression()) {
    FieldExpression child=(FieldExpression)this.secondChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    field=child.getField();
  }
 else   if (this.secondChild.isQueryKeyExpression()) {
    QueryKeyExpression child=(QueryKeyExpression)this.secondChild;
    if (!child.getBaseExpression().isExpressionBuilder()) {
      return false;
    }
    descriptorForChild=((ExpressionBuilder)child.getBaseExpression()).getDescriptor();
    if (descriptorForChild == null) {
      descriptorForChild=descriptor;
    }
    DatabaseMapping mapping=descriptorForChild.getObjectBuilder().getMappingForAttributeName(child.getName());
    if (mapping != null) {
      if (primaryKeyOnly && !mapping.isPrimaryKeyMapping()) {
        return false;
      }
      if (mapping.isObjectReferenceMapping() || mapping.isAggregateObjectMapping()) {
        mapping.writeFromAttributeIntoRow(value,primaryKeyRow,getSession());
        return true;
      }
      if (!mapping.isAbstractColumnMapping()) {
        return false;
      }
      field=((AbstractColumnMapping)mapping).getField();
    }
 else {
      field=descriptorForChild.getObjectBuilder().getFieldForQueryKeyName(child.getName());
    }
  }
 else {
    return false;
  }
  if (field == null) {
    return false;
  }
  if (primaryKeyOnly && !descriptor.getPrimaryKeyFields().contains(field)) {
    if (descriptorForChild != null && descriptorForChild != descriptor && descriptorForChild.getPrimaryKeyFields().contains(field)) {
      return true;
    }
 else {
      return false;
    }
  }
  if (primaryKeyRow.get(field) != null) {
    return false;
  }
  primaryKeyRow.put(field,value);
  return true;
}"
63565,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  if (!JUnitTestCase.isJPA10()) {
    suite.addTest(new JUnitJPQLParameterTestSuite(""String_Node_Str""));
  }
  return suite;
}"
63566,"public void multipleParameterTest(){
  EntityManager em=createEntityManager();
  Employee employee=(Employee)(getServerSession().readAllObjects(Employee.class).firstElement());
  Vector expectedResult=new Vector();
  expectedResult.add(employee);
  Query query=em.createQuery(""String_Node_Str"");
  query.setParameter(1,employee.getFirstName());
  query.setParameter(3,employee.getId());
  List result=query.getResultList();
  Assert.assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}","public void multipleParameterTest(){
  EntityManager em=createEntityManager();
  Employee employee=(Employee)(getServerSession().readAllObjects(Employee.class).firstElement());
  Vector expectedResult=new Vector();
  expectedResult.add(employee);
  Query query=em.createQuery(""String_Node_Str"");
  query.setParameter(1,employee.getFirstName());
  query.setParameter(3,employee.getId());
  List result=query.getResultList();
  assertTrue(""String_Node_Str"",comparer.compareObjects(result,expectedResult));
}"
63567,"public Object createSimpleXMLFormat(XRServiceAdapter xrService,Object value){
  XMLRoot xmlRoot=new XMLRoot();
  SimpleXMLFormat simpleXMLFormat=result.getSimpleXMLFormat();
  String tempSimpleXMLFormatTag=SimpleXMLFormat.DEFAULT_SIMPLE_XML_FORMAT_TAG;
  String simpleXMLFormatTag=simpleXMLFormat.getSimpleXMLFormatTag();
  if (simpleXMLFormatTag != null && !EMPTY_STR.equals(simpleXMLFormatTag)) {
    tempSimpleXMLFormatTag=simpleXMLFormatTag;
  }
  xmlRoot.setLocalName(tempSimpleXMLFormatTag);
  String tempXMLTag=DEFAULT_SIMPLE_XML_TAG;
  String xmlTag=simpleXMLFormat.getXMLTag();
  if (xmlTag != null && !EMPTY_STR.equals(xmlTag)) {
    tempXMLTag=xmlTag;
  }
  Vector<DatabaseRecord> records=null;
  if (value instanceof ArrayList) {
    JPAQuery jpaQuery=(JPAQuery)queryHandler.getDatabaseQuery();
    List<DatabaseField> paramFlds=new ArrayList<DatabaseField>();
    DatasourceCall dsCall=(DatasourceCall)jpaQuery.getDatabaseQuery().getDatasourceCall();
    for (    Object obj : dsCall.getParameters()) {
      if (obj instanceof OutputParameterForCallableStatement) {
        paramFlds.add(((OutputParameterForCallableStatement)obj).getOutputField());
      }
 else       if (obj instanceof Object[]) {
        Object[] objArray=(Object[])obj;
        for (int i=0; i < objArray.length; i++) {
          Object o=objArray[i];
          if (o instanceof OutputParameterForCallableStatement) {
            paramFlds.add(((OutputParameterForCallableStatement)o).getOutputField());
          }
        }
      }
    }
    DatabaseRecord dr=new DatabaseRecord();
    if (paramFlds.size() > 0) {
      for (int i=0; i < ((ArrayList)value).size(); i++) {
        dr.add(paramFlds.get(i),((ArrayList)value).get(i));
      }
    }
 else {
      dr.add(new DatabaseField(RESULT_STR),((ArrayList)value).get(0));
    }
    records=new Vector<DatabaseRecord>();
    records.add(dr);
  }
 else   if (value instanceof Vector) {
    Class vectorContent=((Vector)value).firstElement().getClass();
    if (DatabaseRecord.class.isAssignableFrom(vectorContent)) {
      records=(Vector<DatabaseRecord>)value;
    }
 else {
      records=new Vector<DatabaseRecord>();
      DatabaseRecord dr=new DatabaseRecord();
      dr.add(new DatabaseField(RESULT_STR),((Vector)value).firstElement());
      records.add(dr);
    }
  }
 else {
    records=new Vector<DatabaseRecord>();
    DatabaseRecord dr=new DatabaseRecord();
    dr.add(new DatabaseField(RESULT_STR),value);
    records.add(dr);
  }
  SimpleXMLFormatModel simpleXMLFormatModel=new SimpleXMLFormatModel();
  XMLConversionManager conversionManager=(XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager();
  for (  DatabaseRecord dr : records) {
    Element rowElement=TEMP_DOC.createElement(tempXMLTag);
    for (    DatabaseField field : (Vector<DatabaseField>)dr.getFields()) {
      Object fieldValue=dr.get(field);
      if (fieldValue != null) {
        if (fieldValue instanceof Calendar) {
          Calendar cValue=(Calendar)fieldValue;
          fieldValue=conversionManager.convertObject(cValue,STRING,DATE_TIME_QNAME);
        }
        if (fieldValue instanceof Date) {
          Date dValue=(Date)fieldValue;
          fieldValue=conversionManager.convertObject(dValue,STRING,DATE_QNAME);
        }
 else         if (fieldValue instanceof Time) {
          Time tValue=(Time)fieldValue;
          fieldValue=conversionManager.convertObject(tValue,STRING,TIME_QNAME);
        }
 else         if (fieldValue instanceof Timestamp) {
          Timestamp tsValue=(Timestamp)fieldValue;
          fieldValue=conversionManager.convertObject(tsValue,STRING,DATE_TIME_QNAME);
        }
 else         if (fieldValue instanceof Blob) {
          fieldValue=conversionManager.convertObject((Blob)fieldValue,ClassConstants.APBYTE);
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLESQLXML_STR)) {
          try {
            Class oracleSQLXML;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleSQLXML=AccessController.doPrivileged(new PrivilegedClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader()));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{}));
              fieldValue=(String)AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleSQLXML=PrivilegedAccessHelper.getClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader());
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{});
              fieldValue=(String)PrivilegedAccessHelper.invokeMethod(getStringMethod,fieldValue,new Object[]{});
            }
          }
 catch (          Exception x) {
          }
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLEOPAQUE_STR)) {
          try {
            Class oracleOPAQUE;
            Class xmlTypeFactoryClass;
            Constructor xmlTypeFactoryConstructor;
            Object xmlTypeFactory;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleOPAQUE=AccessController.doPrivileged(new PrivilegedClassForName(ORACLEOPAQUE_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryClass=AccessController.doPrivileged(new PrivilegedClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryConstructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(xmlTypeFactoryClass,new Class[0],true));
              xmlTypeFactory=AccessController.doPrivileged(new PrivilegedInvokeConstructor(xmlTypeFactoryConstructor,new Object[0]));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE}));
              fieldValue=(String)AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleOPAQUE=PrivilegedAccessHelper.getClassForName(ORACLEOPAQUE_STR,false,this.getClass().getClassLoader());
              xmlTypeFactoryClass=PrivilegedAccessHelper.getClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader());
              xmlTypeFactoryConstructor=PrivilegedAccessHelper.getConstructorFor(xmlTypeFactoryClass,new Class[0],true);
              xmlTypeFactory=PrivilegedAccessHelper.invokeConstructor(xmlTypeFactoryConstructor,new Object[0]);
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE});
              fieldValue=(String)PrivilegedAccessHelper.invokeMethod(getStringMethod,xmlTypeFactory,new Object[]{fieldValue});
            }
          }
 catch (          Exception x) {
          }
        }
        String elementName;
        if (field.getName() == null || (elementName=sqlToXmlName(field.getName())).equals(EMPTY_STR)) {
          elementName=RESULT_STR;
        }
        Element columnElement=TEMP_DOC.createElement(elementName);
        rowElement.appendChild(columnElement);
        String fieldValueString=fieldValue.toString();
        if (result.getType().equals(BASE_64_BINARY_QNAME)) {
          fieldValueString=Helper.buildHexStringFromBytes(Base64.base64Encode((byte[])fieldValue));
          columnElement.setAttributeNS(XMLNS_URL,XSD_STR,SCHEMA_URL);
          columnElement.setAttributeNS(XMLNS_URL,XSI_STR,SCHEMA_INSTANCE_URL);
          columnElement.setAttributeNS(SCHEMA_INSTANCE_URL,XSITYPE_STR,BASE64_BINARY_STR);
        }
        columnElement.appendChild(TEMP_DOC.createTextNode(fieldValueString));
      }
    }
    simpleXMLFormatModel.simpleXML.add(rowElement);
  }
  xmlRoot.setObject(simpleXMLFormatModel);
  return xmlRoot;
}","public Object createSimpleXMLFormat(XRServiceAdapter xrService,Object value){
  XMLRoot xmlRoot=new XMLRoot();
  SimpleXMLFormat simpleXMLFormat=result.getSimpleXMLFormat();
  String tempSimpleXMLFormatTag=SimpleXMLFormat.DEFAULT_SIMPLE_XML_FORMAT_TAG;
  String simpleXMLFormatTag=simpleXMLFormat.getSimpleXMLFormatTag();
  if (simpleXMLFormatTag != null && !EMPTY_STR.equals(simpleXMLFormatTag)) {
    tempSimpleXMLFormatTag=simpleXMLFormatTag;
  }
  xmlRoot.setLocalName(tempSimpleXMLFormatTag);
  String tempXMLTag=DEFAULT_SIMPLE_XML_TAG;
  String xmlTag=simpleXMLFormat.getXMLTag();
  if (xmlTag != null && !EMPTY_STR.equals(xmlTag)) {
    tempXMLTag=xmlTag;
  }
  Vector<DatabaseRecord> records=null;
  if (value instanceof ArrayList) {
    JPAQuery jpaQuery=(JPAQuery)queryHandler.getDatabaseQuery();
    List<DatabaseField> paramFlds=new ArrayList<DatabaseField>();
    DatasourceCall dsCall=(DatasourceCall)jpaQuery.getDatabaseQuery().getDatasourceCall();
    for (    Object obj : dsCall.getParameters()) {
      if (obj instanceof OutputParameterForCallableStatement) {
        paramFlds.add(((OutputParameterForCallableStatement)obj).getOutputField());
      }
 else       if (obj instanceof Object[]) {
        Object[] objArray=(Object[])obj;
        for (int i=0; i < objArray.length; i++) {
          Object o=objArray[i];
          if (o instanceof OutputParameterForCallableStatement) {
            paramFlds.add(((OutputParameterForCallableStatement)o).getOutputField());
          }
        }
      }
    }
    DatabaseRecord dr=new DatabaseRecord();
    if (paramFlds.size() > 0) {
      for (int i=0; i < ((ArrayList)value).size(); i++) {
        dr.add(paramFlds.get(i),((ArrayList)value).get(i));
      }
    }
 else {
      dr.add(new DatabaseField(RESULT_STR),((ArrayList)value).get(0));
    }
    records=new Vector<DatabaseRecord>();
    records.add(dr);
  }
 else   if (value instanceof Vector) {
    Class vectorContent=((Vector)value).firstElement().getClass();
    if (DatabaseRecord.class.isAssignableFrom(vectorContent)) {
      records=(Vector<DatabaseRecord>)value;
    }
 else {
      records=new Vector<DatabaseRecord>();
      DatabaseRecord dr=new DatabaseRecord();
      dr.add(new DatabaseField(RESULT_STR),((Vector)value).firstElement());
      records.add(dr);
    }
  }
 else {
    records=new Vector<DatabaseRecord>();
    DatabaseRecord dr=new DatabaseRecord();
    dr.add(new DatabaseField(RESULT_STR),value);
    records.add(dr);
  }
  SimpleXMLFormatModel simpleXMLFormatModel=new SimpleXMLFormatModel();
  XMLConversionManager conversionManager=(XMLConversionManager)xrService.getOXSession().getDatasourcePlatform().getConversionManager();
  for (  DatabaseRecord dr : records) {
    Element rowElement=TEMP_DOC.createElement(tempXMLTag);
    for (    DatabaseField field : (Vector<DatabaseField>)dr.getFields()) {
      if (field instanceof ObjectRelationalDatabaseField) {
        ObjectRelationalDatabaseField ordtField=(ObjectRelationalDatabaseField)field;
        if (xrService.getOXSession().getDescriptor(ordtField.getType()) != null) {
          xrService.getXMLContext().createMarshaller().marshal(dr.get(field),rowElement);
          continue;
        }
      }
      Object fieldValue=dr.get(field);
      if (fieldValue != null) {
        if (fieldValue instanceof Calendar) {
          Calendar cValue=(Calendar)fieldValue;
          fieldValue=conversionManager.convertObject(cValue,STRING,DATE_TIME_QNAME);
        }
        if (fieldValue instanceof Date) {
          Date dValue=(Date)fieldValue;
          fieldValue=conversionManager.convertObject(dValue,STRING,DATE_QNAME);
        }
 else         if (fieldValue instanceof Time) {
          Time tValue=(Time)fieldValue;
          fieldValue=conversionManager.convertObject(tValue,STRING,TIME_QNAME);
        }
 else         if (fieldValue instanceof Timestamp) {
          Timestamp tsValue=(Timestamp)fieldValue;
          fieldValue=conversionManager.convertObject(tsValue,STRING,DATE_TIME_QNAME);
        }
 else         if (fieldValue instanceof Blob) {
          fieldValue=conversionManager.convertObject((Blob)fieldValue,ClassConstants.APBYTE);
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLESQLXML_STR)) {
          try {
            Class oracleSQLXML;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleSQLXML=AccessController.doPrivileged(new PrivilegedClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader()));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{}));
              fieldValue=(String)AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleSQLXML=PrivilegedAccessHelper.getClassForName(ORACLESQLXML_STR,true,this.getClass().getClassLoader());
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(oracleSQLXML,GETSTRING_METHOD,new Class[]{});
              fieldValue=(String)PrivilegedAccessHelper.invokeMethod(getStringMethod,fieldValue,new Object[]{});
            }
          }
 catch (          Exception x) {
          }
        }
 else         if (fieldValue.getClass().getName().equalsIgnoreCase(ORACLEOPAQUE_STR)) {
          try {
            Class oracleOPAQUE;
            Class xmlTypeFactoryClass;
            Constructor xmlTypeFactoryConstructor;
            Object xmlTypeFactory;
            Method getStringMethod;
            if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
              oracleOPAQUE=AccessController.doPrivileged(new PrivilegedClassForName(ORACLEOPAQUE_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryClass=AccessController.doPrivileged(new PrivilegedClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader()));
              xmlTypeFactoryConstructor=AccessController.doPrivileged(new PrivilegedGetConstructorFor(xmlTypeFactoryClass,new Class[0],true));
              xmlTypeFactory=AccessController.doPrivileged(new PrivilegedInvokeConstructor(xmlTypeFactoryConstructor,new Object[0]));
              getStringMethod=AccessController.doPrivileged(new PrivilegedGetDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE}));
              fieldValue=(String)AccessController.doPrivileged(new PrivilegedMethodInvoker(getStringMethod,fieldValue,new Object[]{}));
            }
 else {
              oracleOPAQUE=PrivilegedAccessHelper.getClassForName(ORACLEOPAQUE_STR,false,this.getClass().getClassLoader());
              xmlTypeFactoryClass=PrivilegedAccessHelper.getClassForName(XMLTYPEFACTORY_STR,true,this.getClass().getClassLoader());
              xmlTypeFactoryConstructor=PrivilegedAccessHelper.getConstructorFor(xmlTypeFactoryClass,new Class[0],true);
              xmlTypeFactory=PrivilegedAccessHelper.invokeConstructor(xmlTypeFactoryConstructor,new Object[0]);
              getStringMethod=PrivilegedAccessHelper.getDeclaredMethod(xmlTypeFactoryClass,GETSTRING_METHOD,new Class[]{oracleOPAQUE});
              fieldValue=(String)PrivilegedAccessHelper.invokeMethod(getStringMethod,xmlTypeFactory,new Object[]{fieldValue});
            }
          }
 catch (          Exception x) {
          }
        }
        String elementName;
        if (field.getName() == null || (elementName=sqlToXmlName(field.getName())).equals(EMPTY_STR)) {
          elementName=RESULT_STR;
        }
        Element columnElement=TEMP_DOC.createElement(elementName);
        rowElement.appendChild(columnElement);
        String fieldValueString=fieldValue.toString();
        if (result.getType().equals(BASE_64_BINARY_QNAME)) {
          fieldValueString=Helper.buildHexStringFromBytes(Base64.base64Encode((byte[])fieldValue));
          columnElement.setAttributeNS(XMLNS_URL,XSD_STR,SCHEMA_URL);
          columnElement.setAttributeNS(XMLNS_URL,XSI_STR,SCHEMA_INSTANCE_URL);
          columnElement.setAttributeNS(SCHEMA_INSTANCE_URL,XSITYPE_STR,BASE64_BINARY_STR);
        }
        columnElement.appendChild(TEMP_DOC.createTextNode(fieldValueString));
      }
    }
    simpleXMLFormatModel.simpleXML.add(rowElement);
  }
  xmlRoot.setObject(simpleXMLFormatModel);
  return xmlRoot;
}"
63568,"/** 
 * This method encodes the given byte[] using the base64-encoding specified in RFC-2045 (Section 6.8).
 * @param data the data
 * @return the base64-encoded <var>data</var>
 */
public final static byte[] base64Encode(byte[] data){
  if (data == null) {
    return null;
  }
  int sidx;
  int didx;
  byte[] dest=new byte[((data.length + 2) / 3) * 4];
  for (sidx=0, didx=0; sidx < (data.length - 2); sidx+=3) {
    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];
    dest[didx++]=Base64EncMap[((data[sidx + 1] >>> 4) & 017) | ((data[sidx] << 4) & 077)];
    dest[didx++]=Base64EncMap[((data[sidx + 2] >>> 6) & 003) | ((data[sidx + 1] << 2) & 077)];
    dest[didx++]=Base64EncMap[data[sidx + 2] & 077];
  }
  if (sidx < data.length) {
    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];
    if (sidx < (data.length - 1)) {
      dest[didx++]=Base64EncMap[((data[sidx + 1] >>> 4) & 017) | ((data[sidx] << 4) & 077)];
      dest[didx++]=Base64EncMap[(data[sidx + 1] << 2) & 077];
    }
 else {
      dest[didx++]=Base64EncMap[(data[sidx] << 4) & 077];
    }
  }
  for (; didx < dest.length; didx++) {
    dest[didx]=(byte)'=';
  }
  return dest;
}","/** 
 * This method encodes the given byte[] using the base64-encoding specified in RFC-2045 (Section 6.8).
 * @param data the data
 * @return the base64-encoded <var>data</var>
 */
public static byte[] base64Encode(byte[] data){
  if (data == null) {
    return null;
  }
  int sidx;
  int didx;
  byte[] dest=new byte[((data.length + 2) / 3) * 4];
  for (sidx=0, didx=0; sidx < (data.length - 2); sidx+=3) {
    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];
    dest[didx++]=Base64EncMap[((data[sidx + 1] >>> 4) & 017) | ((data[sidx] << 4) & 077)];
    dest[didx++]=Base64EncMap[((data[sidx + 2] >>> 6) & 003) | ((data[sidx + 1] << 2) & 077)];
    dest[didx++]=Base64EncMap[data[sidx + 2] & 077];
  }
  if (sidx < data.length) {
    dest[didx++]=Base64EncMap[(data[sidx] >>> 2) & 077];
    if (sidx < (data.length - 1)) {
      dest[didx++]=Base64EncMap[((data[sidx + 1] >>> 4) & 017) | ((data[sidx] << 4) & 077)];
      dest[didx++]=Base64EncMap[(data[sidx + 1] << 2) & 077];
    }
 else {
      dest[didx++]=Base64EncMap[(data[sidx] << 4) & 077];
    }
  }
  for (; didx < dest.length; didx++) {
    dest[didx]=(byte)'=';
  }
  return dest;
}"
63569,"/** 
 * Base64 constructor comment.
 */
public Base64(){
  super();
}","/** 
 * Base64 constructor comment.
 */
private Base64(){
}"
63570,"/** 
 * This method decodes the given byte[] using the base64-encoding specified in RFC-2045 (Section 6.8).
 * @param data the base64-encoded data.
 * @return the decoded <var>data</var>.
 */
public final static byte[] base64Decode(byte[] data){
  if (data == null) {
    return null;
  }
  if (data.length == 0) {
    return new byte[0];
  }
  int tail=data.length;
  while (data[tail - 1] == '=') {
    tail--;
  }
  byte[] dest=new byte[tail - (data.length / 4)];
  for (int idx=0; idx < data.length; idx++) {
    data[idx]=Base64DecMap[data[idx]];
  }
  int sidx;
  int didx;
  for (sidx=0, didx=0; didx < (dest.length - 2); sidx+=4, didx+=3) {
    dest[didx]=(byte)(((data[sidx] << 2) & 255) | ((data[sidx + 1] >>> 4) & 003));
    dest[didx + 1]=(byte)(((data[sidx + 1] << 4) & 255) | ((data[sidx + 2] >>> 2) & 017));
    dest[didx + 2]=(byte)(((data[sidx + 2] << 6) & 255) | (data[sidx + 3] & 077));
  }
  if (didx < dest.length) {
    dest[didx]=(byte)(((data[sidx] << 2) & 255) | ((data[sidx + 1] >>> 4) & 003));
  }
  if (++didx < dest.length) {
    dest[didx]=(byte)(((data[sidx + 1] << 4) & 255) | ((data[sidx + 2] >>> 2) & 017));
  }
  return dest;
}","/** 
 * base64Binary data is likely to be long, and decoding requires each character to be accessed twice (once for counting length, another for decoding.) This method decodes the given byte[] using the base64-encoding specified in RFC-2045 (Section 6.8).
 * @param data the base64-encoded data.
 * @return the decoded <var>data</var>.
 */
public static byte[] base64Decode(byte[] data){
  final int buflen=guessLength(data);
  final byte[] out=new byte[buflen];
  int o=0;
  final int len=data.length;
  int i;
  final byte[] quadruplet=new byte[4];
  int q=0;
  for (i=0; i < len; i++) {
    byte ch=data[i];
    byte v=Base64DecMap[ch];
    if (v != -1)     quadruplet[q++]=v;
    if (q == 4) {
      out[o++]=(byte)((quadruplet[0] << 2) | (quadruplet[1] >> 4));
      if (quadruplet[2] != PADDING)       out[o++]=(byte)((quadruplet[1] << 4) | (quadruplet[2] >> 2));
      if (quadruplet[3] != PADDING)       out[o++]=(byte)((quadruplet[2] << 6) | (quadruplet[3]));
      q=0;
    }
  }
  if (buflen == o)   return out;
  byte[] nb=new byte[o];
  System.arraycopy(out,0,nb,0,o);
  return nb;
}"
63571,"TargetServerProp(){
  super(PersistenceUnitProperties.TARGET_SERVER,TargetServer.DEFAULT);
  this.shouldReturnOriginalValueIfValueToApplyNotFound=true;
  String pcg=""String_Node_Str"";
  valueArray=new Object[][]{{TargetServer.None,pcg + ""String_Node_Str""},{TargetServer.OC4J,pcg + ""String_Node_Str""},{TargetServer.SunAS9,pcg + ""String_Node_Str""},{TargetServer.Glassfish,pcg + ""String_Node_Str""},{TargetServer.WebSphere,pcg + ""String_Node_Str""},{TargetServer.WebSphere_6_1,pcg + ""String_Node_Str""},{TargetServer.WebSphere_7,pcg + ""String_Node_Str""},{TargetServer.WebLogic,pcg + ""String_Node_Str""},{TargetServer.WebLogic_9,pcg + ""String_Node_Str""},{TargetServer.WebLogic_10,pcg + ""String_Node_Str""},{TargetServer.JBoss,pcg + ""String_Node_Str""},{TargetServer.SAPNetWeaver_7_1,pcg + ""String_Node_Str""}};
}","TargetServerProp(){
  super(PersistenceUnitProperties.TARGET_SERVER,TargetServer.DEFAULT);
  this.shouldReturnOriginalValueIfValueToApplyNotFound=true;
  String pcg=""String_Node_Str"";
  valueArray=new Object[][]{{TargetServer.None,pcg + ""String_Node_Str""},{TargetServer.OC4J,pcg + ""String_Node_Str""},{TargetServer.SunAS9,pcg + ""String_Node_Str""},{TargetServer.Glassfish,pcg + ""String_Node_Str""},{TargetServer.WebSphere,pcg + ""String_Node_Str""},{TargetServer.WebSphere_6_1,pcg + ""String_Node_Str""},{TargetServer.WebSphere_7,pcg + ""String_Node_Str""},{TargetServer.WebSphere_Liberty,pcg + ""String_Node_Str""},{TargetServer.WebLogic,pcg + ""String_Node_Str""},{TargetServer.WebLogic_9,pcg + ""String_Node_Str""},{TargetServer.WebLogic_10,pcg + ""String_Node_Str""},{TargetServer.JBoss,pcg + ""String_Node_Str""},{TargetServer.SAPNetWeaver_7_1,pcg + ""String_Node_Str""}};
}"
63572,"public XMLSessionConfigProject_11_1_1(){
  super();
  addDescriptor(buildOc4jJGroupsTransportManagerConfigDescriptor());
  addDescriptor(buildServerPlatformConfigDescriptorFor(Oc4jPlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(GlassfishPlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(SunAS9PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_9_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_10_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebSphere_6_1_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebSphere_7_0_PlatformConfig.class));
  addDescriptor(buildDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildXMLBinderPolicyConfigDescriptor());
  addDescriptor(buildNodeOrderingPolicyConfigDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyConfigDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyConfigDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyConfigDescriptor());
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(""String_Node_Str"",W3C_XML_SCHEMA_INSTANCE_NS_URI);
  namespaceResolver.put(""String_Node_Str"",W3C_XML_SCHEMA_NS_URI);
  for (Iterator descriptors=getDescriptors().values().iterator(); descriptors.hasNext(); ) {
    XMLDescriptor descriptor=(XMLDescriptor)descriptors.next();
    descriptor.setNamespaceResolver(namespaceResolver);
  }
}","public XMLSessionConfigProject_11_1_1(){
  super();
  addDescriptor(buildOc4jJGroupsTransportManagerConfigDescriptor());
  addDescriptor(buildServerPlatformConfigDescriptorFor(Oc4jPlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(GlassfishPlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(SunAS9PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_9_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebLogic_10_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebSphere_6_1_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebSphere_7_0_PlatformConfig.class));
  addDescriptor(buildServerPlatformConfigDescriptorFor(WebSphere_Liberty_Platform_Config.class));
  addDescriptor(buildDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildDescriptorLevelDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildNoDocumentPreservationPolicyConfigDescriptor());
  addDescriptor(buildXMLBinderPolicyConfigDescriptor());
  addDescriptor(buildNodeOrderingPolicyConfigDescriptor());
  addDescriptor(buildAppendNewElementsOrderingPolicyConfigDescriptor());
  addDescriptor(buildIgnoreNewElementsOrderingPolicyConfigDescriptor());
  addDescriptor(buildRelativePositionOrderingPolicyConfigDescriptor());
  NamespaceResolver namespaceResolver=new NamespaceResolver();
  namespaceResolver.put(""String_Node_Str"",W3C_XML_SCHEMA_INSTANCE_NS_URI);
  namespaceResolver.put(""String_Node_Str"",W3C_XML_SCHEMA_NS_URI);
  for (Iterator descriptors=getDescriptors().values().iterator(); descriptors.hasNext(); ) {
    XMLDescriptor descriptor=(XMLDescriptor)descriptors.next();
    descriptor.setNamespaceResolver(namespaceResolver);
  }
}"
63573,"public ClassDescriptor buildServerPlatformConfigDescriptor(){
  XMLDescriptor descriptor=(XMLDescriptor)super.buildServerPlatformConfigDescriptor();
  descriptor.getInheritancePolicy().addClassIndicator(Oc4jPlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SunAS9PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(GlassfishPlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebLogic_9_PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebLogic_10_PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebSphere_6_1_PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebSphere_7_0_PlatformConfig.class,""String_Node_Str"");
  return descriptor;
}","public ClassDescriptor buildServerPlatformConfigDescriptor(){
  XMLDescriptor descriptor=(XMLDescriptor)super.buildServerPlatformConfigDescriptor();
  descriptor.getInheritancePolicy().addClassIndicator(Oc4jPlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(SunAS9PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(GlassfishPlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebLogic_9_PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebLogic_10_PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebSphere_6_1_PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebSphere_7_0_PlatformConfig.class,""String_Node_Str"");
  descriptor.getInheritancePolicy().addClassIndicator(WebSphere_Liberty_Platform_Config.class,""String_Node_Str"");
  return descriptor;
}"
63574,"/** 
 * INTERNAL: Obtain and return the JTA TransactionManager on this platform. This will be called once when the controller is initialized.
 */
protected TransactionManager acquireTransactionManager() throws Exception {
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      Class clazz=(Class)AccessController.doPrivileged(new PrivilegedClassForName(TX_MANAGER_FACTORY_CLASS));
      Method method=AccessController.doPrivileged(new PrivilegedGetMethod(clazz,TX_MANAGER_FACTORY_METHOD,null,false));
      return (TransactionManager)AccessController.doPrivileged(new PrivilegedMethodInvoker(method,null,null));
    }
 catch (    PrivilegedActionException ex) {
      if (ex.getCause() instanceof ClassNotFoundException) {
        throw (ClassNotFoundException)ex.getCause();
      }
      if (ex.getCause() instanceof NoSuchMethodException) {
        throw (NoSuchMethodException)ex.getCause();
      }
      if (ex.getCause() instanceof IllegalAccessException) {
        throw (IllegalAccessException)ex.getCause();
      }
      if (ex.getCause() instanceof InvocationTargetException) {
        throw (InvocationTargetException)ex.getCause();
      }
      throw (RuntimeException)ex.getCause();
    }
  }
 else {
    Class clazz=PrivilegedAccessHelper.getClassForName(TX_MANAGER_FACTORY_CLASS);
    Method method=PrivilegedAccessHelper.getMethod(clazz,TX_MANAGER_FACTORY_METHOD,null,false);
    return (TransactionManager)PrivilegedAccessHelper.invokeMethod(method,null,null);
  }
}","/** 
 * INTERNAL: Obtain and return the JTA TransactionManager on this platform. This will be called once when the controller is initialized.
 */
protected TransactionManager acquireTransactionManager() throws Exception {
  if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
    try {
      Class clazz=(Class)AccessController.doPrivileged(new PrivilegedClassForName(getTxManagerFactoryClass()));
      Method method=AccessController.doPrivileged(new PrivilegedGetMethod(clazz,getTxManagerFactoryMethod(),null,false));
      return (TransactionManager)AccessController.doPrivileged(new PrivilegedMethodInvoker(method,null,null));
    }
 catch (    PrivilegedActionException ex) {
      if (ex.getCause() instanceof ClassNotFoundException) {
        throw (ClassNotFoundException)ex.getCause();
      }
      if (ex.getCause() instanceof NoSuchMethodException) {
        throw (NoSuchMethodException)ex.getCause();
      }
      if (ex.getCause() instanceof IllegalAccessException) {
        throw (IllegalAccessException)ex.getCause();
      }
      if (ex.getCause() instanceof InvocationTargetException) {
        throw (InvocationTargetException)ex.getCause();
      }
      throw (RuntimeException)ex.getCause();
    }
  }
 else {
    Class clazz=PrivilegedAccessHelper.getClassForName(getTxManagerFactoryClass());
    Method method=PrivilegedAccessHelper.getMethod(clazz,getTxManagerFactoryMethod(),null,false);
    return (TransactionManager)PrivilegedAccessHelper.invokeMethod(method,null,null);
  }
}"
63575,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    NodeValue unmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != unmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (unmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)unmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      try {
        if (isIncludedInAttributeGroup) {
          unmarshalNodeValue.endElement(xPathFragment,this);
        }
 else {
          resetStringBuffer();
        }
      }
 catch (      EclipseLinkException e) {
        if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
          throw e;
        }
 else {
          SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
          xmlReader.getErrorHandler().warning(saxParseException);
        }
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
          if (mapping.isAbstractDirectMapping() && isXsiNil) {
            Object nullValue=((DirectMapping)mapping).getNullValue();
            if (!(Constants.EMPTY_STRING.equals(nullValue))) {
              setAttributeValue(null,mapping);
              this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
            }
          }
 else {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
          isXsiNil=false;
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if ((null != xPathFragment && xPathFragment.nameIsText()) || (xpathNodeIsMixedContent && xPathNode.getParent() != null)) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=parentRecord;
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      Locator locator=xmlReader.getLocator();
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    NodeValue unmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != unmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (unmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)unmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      try {
        if (isIncludedInAttributeGroup) {
          unmarshalNodeValue.endElement(xPathFragment,this);
        }
 else {
          resetStringBuffer();
        }
      }
 catch (      EclipseLinkException e) {
        if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
          throw e;
        }
 else {
          SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
          xmlReader.getErrorHandler().warning(saxParseException);
        }
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (textNode.isWhitespaceAware()) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping() && isXsiNil) {
              Object nullValue=((DirectMapping)mapping).getNullValue();
              if (!(Constants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
 else {
              textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
            }
            isXsiNil=false;
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping() && !isXsiNil && ((DirectMapping)mapping).getNullPolicy().isNullRepresentedByXsiNil()) {
              removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
            }
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if ((null != xPathFragment && xPathFragment.nameIsText()) || (xpathNodeIsMixedContent && xPathNode.getParent() != null)) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=parentRecord;
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      Locator locator=xmlReader.getLocator();
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}"
63576,"private Object getValue(Object value,UnmarshalRecord unmarshalRecord){
  return converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
}","protected Object getValue(Object value,UnmarshalRecord unmarshalRecord){
  Object converted=converter.convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  if (converted instanceof JAXBElement<?>) {
    ((JAXBElement<?>)converted).setNil(unmarshalRecord.isNil());
  }
  return converted;
}"
63577,"@Override public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (objectValue == null) {
    AbstractNullPolicy nullPolicy=xmlBinaryDataCollectionMapping.getNullPolicy();
    if (nullPolicy.getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      XPathNode holderXPathNode=new XPathNode();
      holderXPathNode.setXPathFragment(xPathFragment);
      marshalRecord.addGroupingElement(holderXPathNode);
      boolean returnVal=xmlBinaryDataCollectionMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
      if (returnVal) {
        marshalRecord.endElement(xPathFragment,namespaceResolver);
      }
      marshalRecord.removeGroupingElement(holderXPathNode);
      return returnVal;
    }
    return true;
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  String attachmentType=mimeType;
  if (mimeType == null) {
    mimeType=Constants.EMPTY_STRING;
    attachmentType=""String_Node_Str"";
  }
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlBinaryDataCollectionMapping.convertObjectValueToDataValue(objectValue,session,marshaller);
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((Field)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=Constants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == CoreClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,attachmentType,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((Field)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        boolean addDeclaration=false;
        String xopPrefix=null;
        if (marshalRecord.getNamespaceResolver() != null) {
          xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(Constants.XOP_URL);
        }
        if (xopPrefix == null) {
          addDeclaration=true;
          xopPrefix=marshalRecord.getNamespaceResolver().generatePrefix(Constants.XOP_PREFIX);
          marshalRecord.getNamespaceResolver().put(xopPrefix,Constants.XOP_URL);
          namespaceResolver=marshalRecord.getNamespaceResolver();
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(Constants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(Constants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,Constants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
        if (addDeclaration) {
          marshalRecord.getNamespaceResolver().removeNamespace(Constants.XOP_PREFIX);
        }
      }
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  return true;
}","@Override public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlBinaryDataCollectionMapping.convertObjectValueToDataValue(objectValue,session,marshaller);
  if (objectValue == null) {
    AbstractNullPolicy nullPolicy=xmlBinaryDataCollectionMapping.getNullPolicy();
    if (nullPolicy.getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
      XPathNode holderXPathNode=new XPathNode();
      holderXPathNode.setXPathFragment(xPathFragment);
      marshalRecord.addGroupingElement(holderXPathNode);
      boolean returnVal=xmlBinaryDataCollectionMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
      if (returnVal) {
        marshalRecord.endElement(xPathFragment,namespaceResolver);
      }
      marshalRecord.removeGroupingElement(holderXPathNode);
      return returnVal;
    }
    return true;
  }
  String mimeType=this.xmlBinaryDataCollectionMapping.getMimeType(object);
  String attachmentType=mimeType;
  if (mimeType == null) {
    mimeType=Constants.EMPTY_STRING;
    attachmentType=""String_Node_Str"";
  }
  marshalRecord.openStartElement(xPathFragment,namespaceResolver);
  marshalRecord.closeStartElement();
  if (xmlBinaryDataCollectionMapping.isSwaRef() && marshaller.getAttachmentMarshaller() != null) {
    String c_id=null;
    byte[] bytes=null;
    if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataCollectionMapping.shouldInlineBinaryData()) {
      XPathFragment lastFrag=((Field)xmlBinaryDataCollectionMapping.getField()).getLastXPathFragment();
      String c_id=Constants.EMPTY_STRING;
      byte[] bytes=null;
      if (objectValue.getClass() == CoreClassConstants.APBYTE) {
        bytes=(byte[])objectValue;
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,attachmentType,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else       if (xmlBinaryDataCollectionMapping.getAttributeElementClass() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
 else {
        XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataCollectionMapping.getMimeTypePolicy().getMimeType(object));
        bytes=data.getData();
        c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),lastFrag.getLocalName(),lastFrag.getNamespaceURI());
      }
      if (c_id == null) {
        marshalRecord.characters(((Field)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        boolean addDeclaration=false;
        String xopPrefix=null;
        if (marshalRecord.getNamespaceResolver() != null) {
          xopPrefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI(Constants.XOP_URL);
        }
        if (xopPrefix == null) {
          addDeclaration=true;
          xopPrefix=marshalRecord.getNamespaceResolver().generatePrefix(Constants.XOP_PREFIX);
          marshalRecord.getNamespaceResolver().put(xopPrefix,Constants.XOP_URL);
          namespaceResolver=marshalRecord.getNamespaceResolver();
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(Constants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(Constants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,Constants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xPathFragment,namespaceResolver);
        if (addDeclaration) {
          marshalRecord.getNamespaceResolver().removeNamespace(Constants.XOP_PREFIX);
        }
      }
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataCollectionMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  marshalRecord.endElement(xPathFragment,namespaceResolver);
  return true;
}"
63578,"private boolean marshalSingleValueWithNodeValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,NodeValue unwrappedNodeValue){
  Object fieldValue=value;
  if (value instanceof Root && !unwrappedNodeValue.isAnyMappingNodeValue()) {
    fieldValue=((Root)value).getObject();
  }
  if (unwrappedNodeValue != null) {
    unwrappedNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,fieldValue,session,namespaceResolver,marshalContext);
  }
  return true;
}","private boolean marshalSingleValueWithNodeValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,NodeValue unwrappedNodeValue){
  if (unwrappedNodeValue != null) {
    unwrappedNodeValue.marshalSingleValue(xPathFragment,marshalRecord,object,value,session,namespaceResolver,marshalContext);
  }
  return true;
}"
63579,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
          if (unmarshalRecord.isNil()) {
            return true;
          }
        }
 else         if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (policy != null && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeCollectionMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (!(unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil())) {
      Field xmlFld=(Field)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
          if (unmarshalRecord.isNil()) {
            return true;
          }
        }
 else         if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (policy != null && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeCollectionMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (!(unmarshalRecord.getXMLReader().isNullRecord(nullPolicy,atts,unmarshalRecord))) {
      Field xmlFld=(Field)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
63580,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Marshaller marshaller=marshalRecord.getMarshaller();
  value=xmlCompositeCollectionMapping.convertObjectValueToDataValue(value,session,marshaller);
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  Descriptor descriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(value.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=value.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(Field)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.popAttributeGroup();
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeCollectionMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(value.getClass().getName());
    }
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=((Field)xmlCompositeCollectionMapping.getField()).getSchemaTypeForValue(value,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(schemaType,value,null,false);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Marshaller marshaller=marshalRecord.getMarshaller();
  boolean isNil=false;
  if (value instanceof Root) {
    isNil=((Root)value).nil;
    value=((Root)value).getObject();
  }
  value=xmlCompositeCollectionMapping.convertObjectValueToDataValue(value,session,marshaller);
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  Descriptor descriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(value.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=value.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    if (isNil) {
      marshalRecord.nilSimple(namespaceResolver);
    }
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(Field)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.popAttributeGroup();
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeCollectionMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(value.getClass().getName());
    }
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=((Field)xmlCompositeCollectionMapping.getField()).getSchemaTypeForValue(value,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(schemaType,value,null,false);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
63581,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
    if (unmarshalRecord.getXMLReader().isInCollection()) {
      unmarshalRecord.addAttributeValue(this,null);
    }
 else {
      unmarshalRecord.setAttributeValueNull(this);
    }
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
          return;
        }
      }
      if (builder.getNodes().size() > 1) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping,unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  InverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      Object currentValue=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (!isInverseReference || (currentValue == null && isInverseReference)) {
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
      }
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  objectValue=xmlCompositeCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy()) && (unmarshalRecord.getChildRecord() == null)) {
    if (unmarshalRecord.getXMLReader().isInCollection()) {
      unmarshalRecord.addAttributeValue(this,null);
    }
 else {
      unmarshalRecord.setAttributeValueNull(this);
    }
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
          return;
        }
      }
      if (builder.getNodes().size() > 1) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping,unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  InverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      Object currentValue=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (!isInverseReference || (currentValue == null && isInverseReference)) {
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
      }
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  objectValue=xmlCompositeCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}"
63582,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (null != policy && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        QName schemaType=unmarshalRecord.getTypeQName();
        if (schemaType == null) {
          schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaType();
          unmarshalRecord.setTypeQName(schemaType);
        }
        if (schemaType != null) {
          Class theClass=unmarshalRecord.getConversionManager().javaType(schemaType);
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeObjectMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil()) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        Field xmlFld=(Field)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (null != policy && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        QName schemaType=unmarshalRecord.getTypeQName();
        if (schemaType == null) {
          schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaType();
          unmarshalRecord.setTypeQName(schemaType);
        }
        if (schemaType != null) {
          Class theClass=unmarshalRecord.getConversionManager().javaType(schemaType);
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeObjectMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      if (unmarshalRecord.getXMLReader().isNullRecord(nullPolicy,atts,unmarshalRecord)) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        Field xmlFld=(Field)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
63583,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  objectValue=xmlCompositeObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.hasAttribute) {
    ObjectBuilder tob=(ObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      if (fieldValue != null) {
        marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      }
 else {
        XMLMarshalException ex=XMLMarshalException.nullValueNotAllowed(this.xmlCompositeObjectMapping.getAttributeName(),this.xmlCompositeObjectMapping.getDescriptor().getJavaClass().getName());
        try {
          marshalRecord.getMarshaller().getErrorHandler().warning(new SAXParseException(null,null,ex));
        }
 catch (        Exception saxException) {
          throw ex;
        }
      }
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, childrenLength=children.getLength(); i < childrenLength; i++) {
        Node next=children.item(i);
        short nodeType=next.getNodeType();
        if (nodeType == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
 else         if (nodeType == Node.TEXT_NODE) {
          marshalRecord.characters(((Text)next).getNodeValue());
          return true;
        }
      }
      return false;
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  Descriptor descriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(objectValue.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=objectValue.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    if (!(isSelfFragment || xPathFragment.nameIsText)) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=null;
    if (!marshalRecord.hasEqualNamespaceResolvers()) {
      extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    }
    if (!isSelfFragment) {
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(Field)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshalRecord.getMarshaller(),xPathFragment);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    marshalRecord.popAttributeGroup();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeObjectMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(objectValue.getClass().getName());
    }
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaTypeForValue(objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  boolean isNilFlag=isNil(objectValue);
  objectValue=xmlCompositeObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.hasAttribute) {
    ObjectBuilder tob=(ObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      if (fieldValue != null) {
        marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      }
 else {
        XMLMarshalException ex=XMLMarshalException.nullValueNotAllowed(this.xmlCompositeObjectMapping.getAttributeName(),this.xmlCompositeObjectMapping.getDescriptor().getJavaClass().getName());
        try {
          marshalRecord.getMarshaller().getErrorHandler().warning(new SAXParseException(null,null,ex));
        }
 catch (        Exception saxException) {
          throw ex;
        }
      }
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, childrenLength=children.getLength(); i < childrenLength; i++) {
        Node next=children.item(i);
        short nodeType=next.getNodeType();
        if (nodeType == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
 else         if (nodeType == Node.TEXT_NODE) {
          marshalRecord.characters(((Text)next).getNodeValue());
          return true;
        }
      }
      return false;
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  Descriptor descriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(objectValue.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=objectValue.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    if (!(isSelfFragment || xPathFragment.nameIsText)) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
      if (isNilFlag) {
        marshalRecord.nilSimple(namespaceResolver);
      }
    }
    List extraNamespaces=null;
    if (!marshalRecord.hasEqualNamespaceResolvers()) {
      extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    }
    if (!isSelfFragment) {
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(Field)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshalRecord.getMarshaller(),xPathFragment);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    marshalRecord.popAttributeGroup();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeObjectMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(objectValue.getClass().getName());
    }
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaTypeForValue(objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
63584,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() != 0) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeObjectMapping,xmlCompositeObjectMapping,unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    setAttributeValue(object,unmarshalRecord);
    unmarshalRecord.setChildRecord(null);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil() && (unmarshalRecord.getChildRecord() == null)) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() != 0) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeObjectMapping,xmlCompositeObjectMapping,unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    setAttributeValue(object,unmarshalRecord);
    unmarshalRecord.setChildRecord(null);
  }
}"
63585,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlDirectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText) {
    return;
  }
  Object value;
  CharSequence unmarshalRecordCharacters=unmarshalRecord.getCharacters();
  if (unmarshalRecordCharacters.length() == 0) {
    value=xmlDirectMapping.getNullValue();
  }
 else {
    value=unmarshalRecordCharacters.toString();
  }
  unmarshalRecord.resetStringBuffer();
  CoreAbstractSession session=unmarshalRecord.getSession();
  ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
  QName typeQName=unmarshalRecord.getTypeQName();
  if (typeQName != null) {
    Class typeClass=xmlField.getJavaClass(typeQName,conversionManager);
    value=conversionManager.convertObject(value,typeClass,typeQName);
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,session,unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlDirectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    Object convertedValue=xmlDirectMapping.getAttributeValue(org.eclipse.persistence.oxm.record.XMLRecord.NIL,unmarshalRecord.getSession(),unmarshalRecord);
    unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
    unmarshalRecord.resetStringBuffer();
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText) {
    return;
  }
  Object value;
  CharSequence unmarshalRecordCharacters=unmarshalRecord.getCharacters();
  if (unmarshalRecordCharacters.length() == 0) {
    value=xmlDirectMapping.getNullValue();
  }
 else {
    value=unmarshalRecordCharacters.toString();
  }
  unmarshalRecord.resetStringBuffer();
  CoreAbstractSession session=unmarshalRecord.getSession();
  ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
  QName typeQName=unmarshalRecord.getTypeQName();
  if (typeQName != null) {
    Class typeClass=xmlField.getJavaClass(typeQName,conversionManager);
    value=conversionManager.convertObject(value,typeClass,typeQName);
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,session,unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}"
63586,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    NodeValue unmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != unmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (unmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)unmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      try {
        if (isIncludedInAttributeGroup) {
          unmarshalNodeValue.endElement(xPathFragment,this);
        }
 else {
          resetStringBuffer();
        }
      }
 catch (      EclipseLinkException e) {
        if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
          throw e;
        }
 else {
          SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
          xmlReader.getErrorHandler().warning(saxParseException);
        }
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (!isXsiNil) {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
        }
 else {
          if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
            Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
            if (mapping.isAbstractDirectMapping()) {
              Object nullValue=((DirectMapping)mapping).getNullValue();
              if (!(Constants.EMPTY_STRING.equals(nullValue))) {
                setAttributeValue(null,mapping);
                this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
              }
            }
            isXsiNil=false;
          }
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if ((null != xPathFragment && xPathFragment.nameIsText()) || (xpathNodeIsMixedContent && xPathNode.getParent() != null)) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=parentRecord;
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      Locator locator=xmlReader.getLocator();
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord != null) {
          selfRecord.endElement(namespaceURI,localName,qName);
        }
 else {
          getFragmentBuilder().endSelfElement(namespaceURI,localName,qName);
        }
      }
    }
    if (-1 != unmappedLevel && unmappedLevel <= levelIndex) {
      if (levelIndex == unmappedLevel) {
        unmappedLevel=-1;
      }
      levelIndex--;
      return;
    }
    NodeValue unmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != unmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (unmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)unmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      try {
        if (isIncludedInAttributeGroup) {
          unmarshalNodeValue.endElement(xPathFragment,this);
        }
 else {
          resetStringBuffer();
        }
      }
 catch (      EclipseLinkException e) {
        if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
          throw e;
        }
 else {
          SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
          xmlReader.getErrorHandler().warning(saxParseException);
        }
      }
    }
 else {
      XPathNode textNode=xPathNode.getTextNode();
      if (null != textNode && textNode.isWhitespaceAware() && getStringBuffer().length() == 0) {
        NodeValue textNodeUnmarshalNodeValue=textNode.getUnmarshalNodeValue();
        if (textNodeUnmarshalNodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)textNodeUnmarshalNodeValue).getMapping();
          if (mapping.isAbstractDirectMapping() && isXsiNil) {
            Object nullValue=((DirectMapping)mapping).getNullValue();
            if (!(Constants.EMPTY_STRING.equals(nullValue))) {
              setAttributeValue(null,mapping);
              this.removeNullCapableValue((NullCapableValue)textNodeUnmarshalNodeValue);
            }
          }
 else {
            textNodeUnmarshalNodeValue.endElement(xPathFragment,this);
          }
          isXsiNil=false;
        }
      }
    }
    XPathFragment xPathFragment=xPathNode.getXPathFragment();
    if ((null != xPathFragment && xPathFragment.nameIsText()) || (xpathNodeIsMixedContent && xPathNode.getParent() != null)) {
      xPathNode=xPathNode.getParent();
    }
    if (null != xPathNode.getParent()) {
      xPathNode=xPathNode.getParent();
    }
    xpathNodeIsMixedContent=false;
    unmarshalContext.endElement(this);
    typeQName=null;
    levelIndex--;
    if (this.isNil() && levelIndex > 0) {
      this.setNil(false);
    }
    if ((0 == levelIndex) && (null != parentRecord) && !isSelfRecord()) {
      endDocument();
      UnmarshalRecord pRec=parentRecord;
      while (pRec.isSelfRecord()) {
        pRec=pRec.getParentRecord();
      }
      pRec.endElement(namespaceURI,localName,qName);
      xmlReader.setContentHandler(pRec);
      xmlReader.setLexicalHandler(pRec);
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      Locator locator=xmlReader.getLocator();
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().warning(saxParseException);
    }
  }
}"
63587,"/** 
 * Match vendorName in properties specified by _nameToVendorPlatform.
 */
private static String matchVendorNameInProperties(String vendorName,List<String[]> nameToVendorPlatform,SessionLog logger){
  String dbPlatform=null;
  for (Iterator<String[]> iterator=nameToVendorPlatform.iterator(); dbPlatform == null && iterator.hasNext(); ) {
    String[] entry=iterator.next();
    String regExpr=entry[0];
    String value=entry[1];
    if (logger.shouldLog(SessionLog.FINEST)) {
      logger.log(SessionLog.FINEST,""String_Node_Str"",regExpr,value);
    }
    if (matchPattern(regExpr,vendorName,logger)) {
      dbPlatform=value;
    }
  }
  return dbPlatform;
}","/** 
 * Match vendorName in properties specified by _nameToVendorPlatform.
 */
private static String matchVendorNameInProperties(String vendorName,List<String[]> nameToVendorPlatform,SessionLog logger){
  String dbPlatform=null;
  for (Iterator<String[]> iterator=nameToVendorPlatform.iterator(); dbPlatform == null && iterator.hasNext(); ) {
    String[] entry=iterator.next();
    String regExpr=entry[0];
    String value=entry[1];
    if (logger.shouldLog(SessionLog.FINEST)) {
      logger.log(SessionLog.FINEST,SessionLog.CONNECTION,""String_Node_Str"",regExpr,value);
    }
    if (matchPattern(regExpr,vendorName,logger)) {
      dbPlatform=value;
    }
  }
  return dbPlatform;
}"
63588,"/** 
 * INTERNAL: This method is used by the DatabaseAccessor to execute and clear the batched statements in the case that a non batchable statement is being executed
 */
public void executeBatchedStatements(AbstractSession session){
  if (this.sqlStrings.isEmpty()) {
    return;
  }
  if (this.sqlStrings.size() == 1) {
    try {
      int rowCount=(Integer)this.databaseAccessor.basicExecuteCall(this.lastCallAppended,null,session,false);
      if (this.usesOptimisticLocking) {
        if (rowCount != 1) {
          throw OptimisticLockException.batchStatementExecutionFailure();
        }
      }
    }
  finally {
      clear();
    }
    return;
  }
  try {
    this.databaseAccessor.writeStatementsCount++;
    this.databaseAccessor.incrementCallCount(session);
    if (session.shouldLog(SessionLog.FINE,SessionLog.SQL)) {
      session.log(SessionLog.FINER,SessionLog.SQL,""String_Node_Str"",null,this.databaseAccessor);
      for (      String sql : this.sqlStrings) {
        session.log(SessionLog.FINE,SessionLog.SQL,sql,null,this.databaseAccessor,false);
      }
      session.log(SessionLog.FINER,SessionLog.SQL,""String_Node_Str"",null,this.databaseAccessor);
    }
    if (!session.getPlatform().usesJDBCBatchWriting()) {
      PreparedStatement statement=prepareBatchStatement(session);
      this.databaseAccessor.executeBatchedStatement(statement,session);
    }
 else {
      Statement statement=prepareJDK12BatchStatement(session);
      this.executionCount=this.databaseAccessor.executeJDK12BatchStatement(statement,null,session,false);
      if (this.usesOptimisticLocking && (executionCount != statementCount)) {
        throw OptimisticLockException.batchStatementExecutionFailure();
      }
    }
  }
  finally {
    clear();
  }
}","/** 
 * INTERNAL: This method is used by the DatabaseAccessor to execute and clear the batched statements in the case that a non batchable statement is being executed
 */
public void executeBatchedStatements(AbstractSession session){
  if (this.sqlStrings.isEmpty()) {
    return;
  }
  DynamicSQLBatchWritingMechanism currentBatch=(DynamicSQLBatchWritingMechanism)this.clone();
  this.clear();
  currentBatch.executeBatch(session);
}"
63589,"/** 
 * INTERNAL: This method is used to clear the batched statements without the need to execute the statements first This is used in the case of rollback.
 */
public void clear(){
  this.sqlStrings.clear();
  this.statementCount=executionCount=0;
  this.usesOptimisticLocking=false;
  this.batchSize=0;
  this.queryTimeoutCache=DescriptorQueryManager.NoTimeout;
  this.lastCallAppended=null;
}","/** 
 * INTERNAL: This method is used to clear the batched statements without the need to execute the statements first This is used in the case of rollback.
 */
public void clear(){
  this.sqlStrings=new ArrayList();
  this.statementCount=executionCount=0;
  this.usesOptimisticLocking=false;
  this.batchSize=0;
  this.queryTimeoutCache=DescriptorQueryManager.NoTimeout;
  this.lastCallAppended=null;
}"
63590,"/** 
 * INTERNAL: This method is used by the DatabaseAccessor to clear the batched statements in the case that a non batchable statement is being executed
 */
public void executeBatchedStatements(AbstractSession session){
  if (this.parameters.isEmpty()) {
    return;
  }
  if (this.parameters.size() == 1) {
    try {
      int rowCount=(Integer)this.databaseAccessor.basicExecuteCall(this.previousCall,null,session,false);
      if (this.previousCall.hasOptimisticLock()) {
        if (rowCount != 1) {
          throw OptimisticLockException.batchStatementExecutionFailure();
        }
      }
    }
  finally {
      clear();
    }
    return;
  }
  try {
    this.databaseAccessor.incrementCallCount(session);
    if (session.shouldLog(SessionLog.FINE,SessionLog.SQL)) {
      session.log(SessionLog.FINER,SessionLog.SQL,""String_Node_Str"",null,this.databaseAccessor);
      session.log(SessionLog.FINE,SessionLog.SQL,this.previousCall.getSQLString(),null,this.databaseAccessor,false);
      for (      List callParameters : this.parameters) {
        StringWriter writer=new StringWriter();
        DatabaseCall.appendLogParameters(callParameters,this.databaseAccessor,writer,session);
        session.log(SessionLog.FINE,SessionLog.SQL,writer.toString(),null,this.databaseAccessor,false);
      }
      session.log(SessionLog.FINER,SessionLog.SQL,""String_Node_Str"",null,this.databaseAccessor);
    }
    PreparedStatement statement=prepareBatchStatements(session);
    this.executionCount+=this.databaseAccessor.executeJDK12BatchStatement(statement,this.lastCallAppended,session,true);
    this.databaseAccessor.writeStatementsCount++;
    if (this.previousCall.hasOptimisticLock() && (this.executionCount != this.statementCount)) {
      throw OptimisticLockException.batchStatementExecutionFailure();
    }
  }
  finally {
    this.clear();
  }
}","/** 
 * INTERNAL: This method is used by the DatabaseAccessor to clear the batched statements in the case that a non batchable statement is being executed
 */
public void executeBatchedStatements(AbstractSession session){
  if (this.parameters.isEmpty()) {
    return;
  }
  ParameterizedSQLBatchWritingMechanism currentBatch=(ParameterizedSQLBatchWritingMechanism)this.clone();
  this.clear();
  currentBatch.executeBatch(session);
}"
63591,"/** 
 * INTERNAL: This method is used to clear the batched statements without the need to execute the statements first This is used in the case of rollback.
 */
public void clear(){
  this.previousCall=null;
  this.parameters.clear();
  this.statementCount=0;
  this.executionCount=0;
  this.queryTimeoutCache=DescriptorQueryManager.NoTimeout;
  this.lastCallAppended=null;
}","/** 
 * INTERNAL: This method is used to clear the batched statements without the need to execute the statements first This is used in the case of rollback.
 */
public void clear(){
  this.previousCall=null;
  this.parameters=new ArrayList();
  this.statementCount=0;
  this.executionCount=0;
  this.queryTimeoutCache=DescriptorQueryManager.NoTimeout;
  this.lastCallAppended=null;
}"
63592,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJunitTest(""String_Node_Str""));
  return suite;
}"
63593,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeObjectMapping.isReadOnly()) {
    return false;
  }
  int size=marshalRecord.getCycleDetectionStack().size();
  Object objectValue=marshalContext.getAttributeValue(object,xmlCompositeObjectMapping);
  if ((isInverseReference || xmlCompositeObjectMapping.getInverseReferenceMapping() != null) && objectValue != null && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    if (owner.equals(objectValue)) {
      return false;
    }
  }
  return this.marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,marshalContext);
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (xmlCompositeObjectMapping.isReadOnly()) {
    return false;
  }
  int size=marshalRecord.getCycleDetectionStack().size();
  Object objectValue=marshalContext.getAttributeValue(object,xmlCompositeObjectMapping);
  if ((isInverseReference || xmlCompositeObjectMapping.getInverseReferenceMapping() != null) && objectValue != null && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    if (objectValue.equals(owner)) {
      return false;
    }
  }
  return this.marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,marshalContext);
}"
63594,"/** 
 * INTERNAL: Return the value of the field from the row or a value holder on the query to obtain the object. Check for batch + aggregation reading.
 */
@Override protected Object valueFromRowInternalWithJoin(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,CacheKey parentCacheKey,AbstractSession executionSession,boolean isTargetProtected) throws DatabaseException {
  Object referenceObject;
  AbstractRecord targetRow=trimRowForJoin(row,joinManager,executionSession);
  if (((joinManager != null) && joinManager.hasOuterJoinedAttributeQuery()) && !sourceQuery.hasPartialAttributeExpressions()) {
    Object key=this.referenceDescriptor.getObjectBuilder().extractPrimaryKeyFromRow(targetRow,executionSession);
    if (key == null) {
      return this.indirectionPolicy.nullValueFromRow();
    }
  }
  ObjectLevelReadQuery nestedQuery=prepareNestedJoinQueryClone(row,null,joinManager,sourceQuery,executionSession);
  nestedQuery.setTranslationRow(targetRow);
  nestedQuery.setRequiresDeferredLocks(sourceQuery.requiresDeferredLocks());
  nestedQuery.setPrefetchedCacheKeys(sourceQuery.getPrefetchedCacheKeys());
  referenceObject=this.referenceDescriptor.getObjectBuilder().buildObject(nestedQuery,targetRow);
  if (nestedQuery.shouldUseWrapperPolicy() && executionSession.isUnitOfWork()) {
    referenceObject=this.referenceDescriptor.getObjectBuilder().wrapObject(referenceObject,executionSession);
  }
  return this.indirectionPolicy.valueFromRow(referenceObject);
}","/** 
 * INTERNAL: Return the value of the field from the row or a value holder on the query to obtain the object. Check for batch + aggregation reading.
 */
@Override protected Object valueFromRowInternalWithJoin(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,CacheKey parentCacheKey,AbstractSession executionSession,boolean isTargetProtected) throws DatabaseException {
  Object referenceObject;
  AbstractRecord targetRow=trimRowForJoin(row,joinManager,executionSession);
  if (((joinManager != null) && joinManager.hasOuterJoinedAttributeQuery()) && !sourceQuery.hasPartialAttributeExpressions()) {
    Object key=this.referenceDescriptor.getObjectBuilder().extractPrimaryKeyFromRow(targetRow,executionSession);
    if (key == null) {
      return this.indirectionPolicy.nullValueFromRow();
    }
  }
  ObjectLevelReadQuery nestedQuery=prepareNestedJoinQueryClone(row,null,joinManager,sourceQuery,executionSession);
  nestedQuery.setTranslationRow(targetRow);
  nestedQuery.setRequiresDeferredLocks(sourceQuery.requiresDeferredLocks());
  nestedQuery.setPrefetchedCacheKeys(sourceQuery.getPrefetchedCacheKeys());
  nestedQuery.setShouldRefreshIdentityMapResult(sourceQuery.shouldRefreshIdentityMapResult());
  referenceObject=this.referenceDescriptor.getObjectBuilder().buildObject(nestedQuery,targetRow);
  if (nestedQuery.shouldUseWrapperPolicy() && executionSession.isUnitOfWork()) {
    referenceObject=this.referenceDescriptor.getObjectBuilder().wrapObject(referenceObject,executionSession);
  }
  return this.indirectionPolicy.valueFromRow(referenceObject);
}"
63595,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63596,"/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  if (indicator == null) {
    return null;
  }
  Class concreteClass;
  if (indicator instanceof String) {
    boolean namespaceAware=((XMLRecord)rowFromDatabase).isNamespaceAware();
    String indicatorValue=(String)indicator;
    int index=indicatorValue.indexOf(((XMLRecord)rowFromDatabase).getNamespaceSeparator());
    if (index == -1) {
      if (namespaceAware && usesXsiType) {
        String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
        if (uri == null && ((XMLRecord)rowFromDatabase).getNamespaceResolver() != null) {
          uri=((XMLRecord)rowFromDatabase).getNamespaceResolver().getDefaultNamespaceURI();
        }
        XPathQName qname=new XPathQName(uri,indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        XPathQName qname=new XPathQName(indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        XPathQName qname=new XPathQName(uri,localPart,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(indicator);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(indicator,getDescriptor());
  }
  return concreteClass;
}","/** 
 * INTERNAL: This method is invoked only for the abstract descriptors.
 */
public Class classFromRow(AbstractRecord rowFromDatabase,AbstractSession session) throws DescriptorException {
  ((XMLRecord)rowFromDatabase).setSession(session);
  if (hasClassExtractor() || shouldUseClassNameAsIndicator()) {
    return super.classFromRow(rowFromDatabase,session);
  }
  Object indicator=rowFromDatabase.get(getClassIndicatorField());
  if (indicator == AbstractRecord.noEntry) {
    return null;
  }
  if (indicator == null) {
    return null;
  }
  Class concreteClass;
  if (indicator instanceof String) {
    boolean namespaceAware=((XMLRecord)rowFromDatabase).isNamespaceAware();
    String indicatorValue=(String)indicator;
    int index=-1;
    if (namespaceAware) {
      index=indicatorValue.indexOf(((XMLRecord)rowFromDatabase).getNamespaceSeparator());
    }
    if (index == -1) {
      if (namespaceAware && usesXsiType) {
        String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(null);
        if (uri == null && ((XMLRecord)rowFromDatabase).getNamespaceResolver() != null) {
          uri=((XMLRecord)rowFromDatabase).getNamespaceResolver().getDefaultNamespaceURI();
        }
        XPathQName qname=new XPathQName(uri,indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        XPathQName qname=new XPathQName(indicatorValue,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
    }
 else {
      String prefix=indicatorValue.substring(0,index);
      String localPart=indicatorValue.substring(index + 1);
      String uri=((XMLRecord)rowFromDatabase).resolveNamespacePrefix(prefix);
      if (uri != null) {
        XPathQName qname=new XPathQName(uri,localPart,namespaceAware);
        concreteClass=(Class)this.classIndicatorMapping.get(qname);
      }
 else {
        concreteClass=(Class)this.classIndicatorMapping.get(indicatorValue);
      }
    }
  }
 else {
    concreteClass=(Class)this.classIndicatorMapping.get(indicator);
  }
  if (concreteClass == null) {
    throw DescriptorException.missingClassForIndicatorFieldValue(indicator,getDescriptor());
  }
  return concreteClass;
}"
63597,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadWithDataHandlerGetStringTestCases.class));
  suite.addTest(new TestSuite(LoadWithDataHandlerIsSetTestCases.class));
  suite.addTest(new TestSuite(LoadSchemasWithImportAndInheritance.class));
  suite.addTest(new TestSuite(StringWrapperBug268335TestCases.class));
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new TestSuite(LoadWithDataHandlerGetStringTestCases.class));
  suite.addTest(new TestSuite(LoadWithDataHandlerIsSetTestCases.class));
  suite.addTest(new TestSuite(LoadSchemasWithImportAndInheritance.class));
  suite.addTest(new TestSuite(LoadSchemasWithImportCloseStream.class));
  suite.addTest(new TestSuite(StringWrapperBug268335TestCases.class));
  return suite;
}"
63598,"/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper){
  xsdSource=schemaResolverWrapper.resolveSchema(xsdSource);
  XMLContext context=new XMLContext(getSchemaProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  unmarshaller.setEntityResolver(schemaResolverWrapper.getSchemaResolver());
  Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
  java.util.List imports=schema.getImports();
  Iterator iter=imports.iterator();
  while (iter.hasNext()) {
    Import nextImport=(Import)iter.next();
    Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
    if (referencedSchema != null) {
      Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper);
      nextImport.setSchema(importedSchema);
    }
  }
  java.util.List includes=schema.getIncludes();
  Iterator includesIter=includes.iterator();
  while (includesIter.hasNext()) {
    Include nextInclude=(Include)includesIter.next();
    Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
    if (referencedSchema != null) {
      Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper);
      nextInclude.setSchema(includedSchema);
    }
  }
  return schema;
}","/** 
 * Return a Schema for the given Source object. Since this method is called recursively, and the SchemaResolverWrapper is stateful, the resolver wrapper must be created outside of this method.
 * @param xsdSource
 * @param schemaResolverWrapper wraps the schema resolver to be used to resolve imports/includes
 * @return
 */
public Schema getSchema(Source xsdSource,SchemaResolverWrapper schemaResolverWrapper,boolean closeStream){
  xsdSource=schemaResolverWrapper.resolveSchema(xsdSource);
  XMLContext context=new XMLContext(getSchemaProject());
  XMLUnmarshaller unmarshaller=context.createUnmarshaller();
  unmarshaller.setEntityResolver(schemaResolverWrapper.getSchemaResolver());
  Schema schema=(Schema)unmarshaller.unmarshal(xsdSource);
  if (closeStream) {
    closeSource(xsdSource);
  }
  java.util.List imports=schema.getImports();
  Iterator iter=imports.iterator();
  while (iter.hasNext()) {
    Import nextImport=(Import)iter.next();
    Source referencedSchema=getReferencedSchema(xsdSource,nextImport.getNamespace(),nextImport.getSchemaLocation(),schemaResolverWrapper);
    if (referencedSchema != null) {
      Schema importedSchema=getSchema(referencedSchema,schemaResolverWrapper,true);
      nextImport.setSchema(importedSchema);
    }
  }
  java.util.List includes=schema.getIncludes();
  Iterator includesIter=includes.iterator();
  while (includesIter.hasNext()) {
    Include nextInclude=(Include)includesIter.next();
    Source referencedSchema=getReferencedSchema(xsdSource,schema.getTargetNamespace(),nextInclude.getSchemaLocation(),schemaResolverWrapper);
    if (referencedSchema != null) {
      Schema includedSchema=getSchema(referencedSchema,schemaResolverWrapper,true);
      nextInclude.setSchema(includedSchema);
    }
  }
  return schema;
}"
63599,"/** 
 * INTERNAL: Write null values for all aggregate fields into the parent row.
 */
protected void writeNullReferenceRow(AbstractRecord record){
  List<DatabaseField> fields=getReferenceFields();
  int size=fields.size();
  for (int index=0; index < size; index++) {
    record.put(fields.get(index),null);
  }
  if (size > 0) {
    record.setNullValueInFields(true);
  }
}","/** 
 * INTERNAL: Write null values for all aggregate fields into the parent row.
 */
protected void writeNullReferenceRow(AbstractRecord record){
  List<DatabaseField> fields=getReferenceFields();
  int size=fields.size();
  boolean nullInserted=false;
  for (int index=0; index < size; index++) {
    DatabaseField field=fields.get(index);
    if (!field.isReadOnly() && (field.isUpdatable() || field.isInsertable())) {
      record.put(field,null);
      nullInserted=true;
    }
  }
  if (size > 0 && nullInserted) {
    record.setNullValueInFields(true);
  }
}"
63600,"public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
}","public AdvancedTableCreator(){
  setName(""String_Node_Str"");
  addTableDefinition(buildADDRESSTable());
  addTableDefinition(buildBUYERTable());
  addTableDefinition(buildCREDITCARDSTable());
  addTableDefinition(buildCREDITLINESTable());
  addTableDefinition(buildCUSTOMERTable());
  addTableDefinition(buildDEALERTable());
  addTableDefinition(buildDEPTTable());
  addTableDefinition(buildDEPT_EMPTable());
  addTableDefinition(buildEMPLOYEETable());
  addTableDefinition(buildEQUIPMENTTable());
  addTableDefinition(buildEQUIPMENTCODETable());
  addTableDefinition(buildGOLFERTable());
  addTableDefinition(buildGolfer_SPONSORDOLLARSTable());
  addTableDefinition(buildHUGEPROJECTTable());
  addTableDefinition(buildLARGEPROJECTTable());
  addTableDefinition(buildMANTable());
  addTableDefinition(buildPARTNERLINKTable());
  addTableDefinition(buildPHONENUMBERTable());
  addTableDefinition(buildPHONENUMBERSTATUSTable());
  addTableDefinition(buildPLATINUMBUYERTable());
  addTableDefinition(buildPROJECT_EMPTable());
  addTableDefinition(buildPROJECT_PROPSTable());
  addTableDefinition(buildPROJECTTable());
  addTableDefinition(buildRESPONSTable());
  addTableDefinition(buildSALARYTable());
  addTableDefinition(buildVEGETABLETable());
  addTableDefinition(buildWOMANTable());
  addTableDefinition(buildWORKWEEKTable());
  addTableDefinition(buildWORLDRANKTable());
  addTableDefinition(buildCONCURRENCYATable());
  addTableDefinition(buildCONCURRENCYBTable());
  addTableDefinition(buildCONCURRENCYCTable());
  addTableDefinition(buildREADONLYISOLATED());
  addTableDefinition(buildENTITYBTable());
  addTableDefinition(buildENTITYCTable());
  addTableDefinition(buildENTITYATable());
  addTableDefinition(buildENTITYDTable());
  addTableDefinition(buildADVENTITYAENTITYDTable());
  addTableDefinition(buildENTITYETable());
  addTableDefinition(buildADVENTITYAENTITYETable());
  addTableDefinition(buildVIOLATIONTable());
  addTableDefinition(buildVIOLATIONCODETable());
  addTableDefinition(buildVIOLATIONCODESTable());
  addTableDefinition(buildSTUDENTTable());
  addTableDefinition(buildSCHOOLTable());
  addTableDefinition(buildBOLTTable());
  addTableDefinition(buildNUTTable());
  addTableDefinition(buildPERSONTable());
  addTableDefinition(buildEATERTable());
  addTableDefinition(buildFOODTable());
  addTableDefinition(buildSANDWICHTable());
  addTableDefinition(buildLOOTTable());
  addTableDefinition(buildADVSIMPLEENTITYTable());
  addTableDefinition(buildADVECSIMPLETable());
  addTableDefinition(buildADVSIMPLELANGUAGETable());
  addTableDefinition(buildADVSIMPLEENTITYLANGUAGETable());
  addTableDefinition(buildCMP3_JIGSAWTable());
  addTableDefinition(buildCMP3_JIGSAW_PIECETable());
  addTableDefinition(buildRABBITTable());
  addTableDefinition(buildRABBITFOOTTable());
  addTableDefinition(buildCMP3_ROOMTable());
  addTableDefinition(buildCMP3_DOORTable());
  addTableDefinition(buildCMP3_PRODUCTTable());
}"
63601,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63602,"@Override public void setTableNames(Vector tableNames){
  super.setTableNames(tableNames);
}","@Override public void setTableNames(Vector tableNames){
  if (null != tableNames && tableNames.size() > 0) {
    setDefaultRootElementField((String)tableNames.get(0));
  }
  super.setTableNames(tableNames);
}"
63603,"public static RelationalDescriptor descriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(TimestampInAggregateObject.class);
  descriptor.setTableName(""String_Node_Str"");
  descriptor.setPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.useTimestampLocking(""String_Node_Str"",false);
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"");
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"");
  org.eclipse.persistence.mappings.AggregateObjectMapping aggregateobjectmapping=new org.eclipse.persistence.mappings.AggregateObjectMapping();
  aggregateobjectmapping.setAttributeName(""String_Node_Str"");
  aggregateobjectmapping.setIsReadOnly(false);
  aggregateobjectmapping.setReferenceClass(TimestampVersion.class);
  aggregateobjectmapping.setIsNullAllowed(false);
  descriptor.addMapping(aggregateobjectmapping);
  return descriptor;
}","public static RelationalDescriptor descriptor(){
  RelationalDescriptor descriptor=new RelationalDescriptor();
  descriptor.setJavaClass(TimestampInAggregateObject.class);
  descriptor.setTableName(""String_Node_Str"");
  descriptor.setPrimaryKeyFieldName(""String_Node_Str"");
  descriptor.setSequenceNumberName(""String_Node_Str"");
  descriptor.setSequenceNumberFieldName(""String_Node_Str"");
  descriptor.useTimestampLocking(""String_Node_Str"",false);
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"");
  descriptor.addDirectMapping(""String_Node_Str"",""String_Node_Str"");
  org.eclipse.persistence.mappings.AggregateObjectMapping aggregateobjectmapping=new org.eclipse.persistence.mappings.AggregateObjectMapping();
  aggregateobjectmapping.setAttributeName(""String_Node_Str"");
  aggregateobjectmapping.setIsReadOnly(false);
  aggregateobjectmapping.setReferenceClass(TimestampVersion.class);
  aggregateobjectmapping.setIsNullAllowed(true);
  descriptor.addMapping(aggregateobjectmapping);
  return descriptor;
}"
63604,"public static TestSuite getOptimisticLockingTestSuite(){
  TestSuite suite;
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  suite.addTest(new OptimisticLockingUpdateTest(LockInCache.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(LockInCache.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new LockInCache()));
  suite.addTest(new OptimisticLockingUpdateTest(LockInObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(LockInObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new LockInObject()));
  suite.addTest(new OptimisticLockingUpdateTest(TimestampInCache.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(TimestampInCache.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new TimestampInCache()));
  suite.addTest(new OptimisticLockingUpdateTest(TimestampInObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(TimestampInObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new TimestampInObject()));
  suite.addTest(new OptimisticLockingPolicyUpdateWithUOWTest());
  suite.addTest(new OptimisticLockingUpdateTest(TimestampInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(TimestampInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new TimestampInAggregateObject()));
  suite.addTest(new OptimisticLockingUpdateTest(LockInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(LockInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new LockInAggregateObject()));
  suite.addTest(new TimestampNewObjectInCache(LockInObject.example1()));
  suite.addTest(new TimestampNewObjectInCache(TimestampInObject.example1()));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(TimestampInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(LockInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(TimestampInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(LockInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(TimestampInObject.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(LockInObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(TimestampInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(LockInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(TimestampInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(LockInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(TimestampInObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(LockInObject.class));
  suite.addTest(new WriteLockValueSerializationTest());
  suite.addTest(new FieldsLockingCachedUpdateCallsTest());
  suite.addTest(new UpdateAllWithTimestampLockingTest());
  return suite;
}","public static TestSuite getOptimisticLockingTestSuite(){
  TestSuite suite;
  suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.setDescription(""String_Node_Str"");
  suite.addTest(new OptimisticLockingUpdateTest(LockInCache.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(LockInCache.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new LockInCache()));
  suite.addTest(new OptimisticLockingUpdateTest(LockInObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(LockInObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new LockInObject()));
  suite.addTest(new OptimisticLockingUpdateTest(TimestampInCache.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(TimestampInCache.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new TimestampInCache()));
  suite.addTest(new OptimisticLockingUpdateTest(TimestampInObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(TimestampInObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new TimestampInObject()));
  suite.addTest(new OptimisticLockingPolicyUpdateWithUOWTest());
  suite.addTest(new OptimisticLockingUpdateTest(TimestampInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(TimestampInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new TimestampInAggregateObject()));
  suite.addTest(new OptimisticLockingUpdateTest(LockInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingDeleteTest(LockInAggregateObject.class,true));
  suite.addTest(new OptimisticLockingInsertTest(new LockInAggregateObject()));
  suite.addTest(new TimestampNewObjectInCache(LockInObject.example1()));
  suite.addTest(new TimestampNewObjectInCache(TimestampInObject.example1()));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(TimestampInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(LockInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(TimestampInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(LockInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(TimestampInObject.class));
  suite.addTest(new ChangeSetOptimisticLockingUpdateTest(LockInObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(TimestampInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(LockInAggregateObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(TimestampInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(LockInCache.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(TimestampInObject.class));
  suite.addTest(new ChangeSetOptimisticLockingInsertTest(LockInObject.class));
  suite.addTest(new WriteLockValueSerializationTest());
  suite.addTest(new FieldsLockingCachedUpdateCallsTest());
  suite.addTest(new UpdateAllWithTimestampLockingTest());
  suite.addTest(new WriteNullAggregateWithTimestampLockingTest());
  return suite;
}"
63605,"/** 
 * Return the base value that is mapped to for given field.
 */
public Object getBaseValueForField(DatabaseField databaseField,Object domainObject){
  Object valueIntoObject=domainObject;
  DatabaseMapping mapping=getMappingForField(databaseField);
  while (mapping.isAggregateObjectMapping()) {
    valueIntoObject=mapping.getAttributeValueFromObject(valueIntoObject);
    mapping=((AggregateMapping)mapping).getReferenceDescriptor().getObjectBuilder().getMappingForField(databaseField);
  }
  return mapping.getAttributeValueFromObject(valueIntoObject);
}","/** 
 * Return the base value that is mapped to for given field.
 */
public Object getBaseValueForField(DatabaseField databaseField,Object domainObject){
  Object valueIntoObject=domainObject;
  DatabaseMapping mapping=getMappingForField(databaseField);
  while (mapping.isAggregateObjectMapping()) {
    valueIntoObject=mapping.getAttributeValueFromObject(valueIntoObject);
    mapping=((AggregateMapping)mapping).getReferenceDescriptor().getObjectBuilder().getMappingForField(databaseField);
  }
  if (valueIntoObject == null) {
    return null;
  }
  return mapping.getAttributeValueFromObject(valueIntoObject);
}"
63606,"/** 
 * Override to control order of uniqueTables, child tablenames should be first since  getDefaultRootElement on an XMLDescriptor will return the first table.
 */
protected void updateTables(){
  Vector<DatabaseTable> childTables=getDescriptor().getTables();
  Vector<DatabaseTable> parentTables=getParentDescriptor().getTables();
  Vector<DatabaseTable> uniqueTables=Helper.concatenateUniqueVectors(childTables,parentTables);
  getDescriptor().setTables(uniqueTables);
  if (childTables.isEmpty()) {
    getDescriptor().setInternalDefaultTable();
  }
 else {
    getDescriptor().setInternalDefaultTable(uniqueTables.get(uniqueTables.indexOf(childTables.get(0))));
  }
}","/** 
 * Override to control order of uniqueTables, child tablenames should be first since  getDefaultRootElement on an XMLDescriptor will return the first table.
 */
protected void updateTables(){
  Vector<DatabaseTable> childTables=getDescriptor().getTables();
  Vector<DatabaseTable> parentTables=getParentDescriptor().getTables();
  Vector<DatabaseTable> uniqueTables=Helper.concatenateUniqueVectors(childTables,parentTables);
  getDescriptor().setTables(uniqueTables);
  if (getDescriptor().isXMLDescriptor() && getParentDescriptor().isXMLDescriptor()) {
    if (((XMLDescriptor)getDescriptor()).getDefaultRootElementField() == null) {
      ((XMLDescriptor)getDescriptor()).setDefaultRootElementField(((XMLDescriptor)getParentDescriptor()).getDefaultRootElementField());
    }
  }
  if (childTables.isEmpty()) {
    getDescriptor().setInternalDefaultTable();
  }
 else {
    getDescriptor().setInternalDefaultTable(uniqueTables.get(uniqueTables.indexOf(childTables.get(0))));
  }
}"
63607,"public Object getObject(){
  if (object == null) {
    if (this.descriptor != null) {
      if (this.unmarshaller.isResultAlwaysXMLRoot() || shouldWrap || descriptor.isResultAlwaysXMLRoot()) {
        object=this.descriptor.wrapObjectInXMLRoot(this.rootRecord,this.unmarshaller.isResultAlwaysXMLRoot());
      }
 else {
        object=this.rootRecord.getCurrentObject();
      }
    }
 else     if (documentBuilder != null) {
      Node node=documentBuilder.getDocument().getDocumentElement();
      Root root=unmarshaller.createRoot();
      root.setLocalName(node.getLocalName());
      root.setNamespaceURI(node.getNamespaceURI());
      root.setObject(node);
      object=root;
    }
 else {
      if (rootRecord != null) {
        object=this.rootRecord.getCurrentObject();
      }
    }
  }
  return this.object;
}","public Object getObject(){
  if (object == null) {
    if (this.descriptor != null) {
      if (this.unmarshaller.isResultAlwaysXMLRoot() || shouldWrap) {
        object=this.descriptor.wrapObjectInXMLRoot(this.rootRecord,this.unmarshaller.isResultAlwaysXMLRoot());
      }
 else {
        object=this.rootRecord.getCurrentObject();
      }
    }
 else     if (documentBuilder != null) {
      Node node=documentBuilder.getDocument().getDocumentElement();
      Root root=unmarshaller.createRoot();
      root.setLocalName(node.getLocalName());
      root.setNamespaceURI(node.getNamespaceURI());
      root.setObject(node);
      object=root;
    }
 else {
      if (rootRecord != null) {
        object=this.rootRecord.getCurrentObject();
      }
    }
  }
  return this.object;
}"
63608,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    String name;
    if (localName == null || localName.length() == 0) {
      name=qName;
    }
 else {
      name=localName;
    }
    XPathQName rootQName;
    if (namespaceURI == null || namespaceURI.length() == 0) {
      rootQName=new XPathQName(name,xmlReader.isNamespaceAware());
    }
 else {
      rootQName=new XPathQName(namespaceURI,name,xmlReader.isNamespaceAware());
    }
    Class primitiveWrapperClass=null;
    Descriptor xmlDescriptor=xmlContext.getDescriptor(rootQName);
    if (xmlDescriptor == null) {
      boolean isPrimitiveType=false;
      String type=null;
      if (xmlReader.isNamespaceAware()) {
        type=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_TYPE_ATTRIBUTE);
      }
 else {
        type=atts.getValue(Constants.EMPTY_STRING,Constants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != type) {
        XPathFragment typeFragment=new XPathFragment(type,xmlReader.namespaceSeparator,xmlReader.isNamespaceAware());
        if (xmlReader.isNamespaceAware() && null != unmarshalNamespaceResolver) {
          typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
        }
        Descriptor lookupDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
        if (lookupDescriptor == null) {
          QName lookupQName=null;
          if (typeFragment.getNamespaceURI() == null) {
            lookupQName=new QName(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI,typeFragment.getLocalName());
          }
 else {
            lookupQName=new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName());
          }
          if (null == session) {
            session=(CoreAbstractSession)xmlContext.getSession();
          }
          ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
          primitiveWrapperClass=conversionManager.javaType(lookupQName);
        }
 else {
          xmlDescriptor=lookupDescriptor;
          session=xmlContext.getSession(xmlDescriptor);
        }
      }
    }
 else     if (xmlDescriptor.hasInheritance()) {
      session=xmlContext.getSession(xmlDescriptor);
      UnmarshalRecord tmpUnmarshalRecord=new UnmarshalRecordImpl(null);
      tmpUnmarshalRecord.setUnmarshaller(unmarshaller);
      tmpUnmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      tmpUnmarshalRecord.setXMLReader(this.getXMLReader());
      tmpUnmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(new org.eclipse.persistence.oxm.record.UnmarshalRecord(tmpUnmarshalRecord),(CoreAbstractSession)session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator != null) {
            classValue=(Class)indicator;
          }
        }
      }
      if (classValue != null) {
        xmlDescriptor=(Descriptor)session.getDescriptor(classValue);
        shouldWrap=false;
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField((XMLRecord)tmpUnmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
    }
 else     if (null != xmlDescriptor.getTables() && xmlDescriptor.getTables().size() == 1) {
      shouldWrap=false;
    }
    if (null == xmlDescriptor) {
      Object obj=this.xmlReader.getCurrentObject(session,null);
      if (obj != null) {
        xmlDescriptor=(Descriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
      }
    }
    if (null == xmlDescriptor && primitiveWrapperClass == null) {
      if (!this.keepAsElementPolicy.isKeepNoneAsElement()) {
        this.documentBuilder=new SAXDocumentBuilder();
        documentBuilder.startDocument();
        for (        String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
          documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
        }
        documentBuilder.startElement(namespaceURI,localName,qName,atts);
        this.xmlReader.setContentHandler(documentBuilder);
        return;
      }
      Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
      if (null == unmappedContentHandlerClass) {
        throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
      }
 else {
        UnmappedContentHandler unmappedContentHandler;
        try {
          PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
          unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
        }
 catch (        ClassCastException e) {
          throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
        }
catch (        IllegalAccessException e) {
          throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
        }
catch (        InstantiationException e) {
          throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
        }
        UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
        unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
        xmlReader.setContentHandler(unmappedContentHandler);
        setObject(unmappedContentHandlerWrapper.getCurrentObject());
        return;
      }
    }
    if (xmlDescriptor == null && primitiveWrapperClass != null) {
      session=xmlContext.getSession(xmlDescriptor);
      rootRecord=unmarshaller.createRootUnmarshalRecord(primitiveWrapperClass);
      rootRecord.setSession((CoreAbstractSession)unmarshaller.getContext().getSession());
    }
 else {
      if (session == null) {
        session=xmlContext.getSession(xmlDescriptor);
      }
      rootRecord=unmarshaller.createUnmarshalRecord(xmlDescriptor,session);
    }
    this.descriptor=xmlDescriptor;
    rootRecord.setUnmarshaller(this.unmarshaller);
    rootRecord.setXMLReader(this.getXMLReader());
    if (locator != null) {
      rootRecord.setDocumentLocator(xmlReader.getLocator());
    }
    rootRecord.setAttributes(atts);
    boolean hasNilAttribute=(atts != null && null != atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE));
    rootRecord.setNil(isNil || hasNilAttribute);
    rootRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    rootRecord.startDocument();
    rootRecord.initializeRecord((Mapping)null);
    xmlReader.setContentHandler(rootRecord);
    xmlReader.setLexicalHandler(rootRecord);
    Object attributeGroup=this.unmarshaller.getUnmarshalAttributeGroup();
    if (attributeGroup != null) {
      if (attributeGroup.getClass() == CoreClassConstants.STRING) {
        CoreAttributeGroup group=descriptor.getAttributeGroup((String)attributeGroup);
        if (group != null) {
          rootRecord.setUnmarshalAttributeGroup(group);
        }
 else {
        }
      }
 else       if (attributeGroup instanceof CoreAttributeGroup) {
        rootRecord.setUnmarshalAttributeGroup((CoreAttributeGroup)attributeGroup);
      }
 else {
      }
    }
    rootRecord.startElement(namespaceURI,localName,qName,atts);
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    String name;
    if (localName == null || localName.length() == 0) {
      name=qName;
    }
 else {
      name=localName;
    }
    XPathQName rootQName;
    if (namespaceURI == null || namespaceURI.length() == 0) {
      rootQName=new XPathQName(name,xmlReader.isNamespaceAware());
    }
 else {
      rootQName=new XPathQName(namespaceURI,name,xmlReader.isNamespaceAware());
    }
    Class primitiveWrapperClass=null;
    Descriptor xmlDescriptor=xmlContext.getDescriptor(rootQName);
    if (xmlDescriptor == null) {
      boolean isPrimitiveType=false;
      String type=null;
      if (xmlReader.isNamespaceAware()) {
        type=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_TYPE_ATTRIBUTE);
      }
 else {
        type=atts.getValue(Constants.EMPTY_STRING,Constants.SCHEMA_TYPE_ATTRIBUTE);
      }
      if (null != type) {
        XPathFragment typeFragment=new XPathFragment(type,xmlReader.namespaceSeparator,xmlReader.isNamespaceAware());
        if (xmlReader.isNamespaceAware() && null != unmarshalNamespaceResolver) {
          typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
        }
        Descriptor lookupDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
        if (lookupDescriptor == null) {
          QName lookupQName=null;
          if (typeFragment.getNamespaceURI() == null) {
            lookupQName=new QName(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI,typeFragment.getLocalName());
          }
 else {
            lookupQName=new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName());
          }
          if (null == session) {
            session=(CoreAbstractSession)xmlContext.getSession();
          }
          ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
          primitiveWrapperClass=conversionManager.javaType(lookupQName);
        }
 else {
          xmlDescriptor=lookupDescriptor;
          session=xmlContext.getSession(xmlDescriptor);
        }
      }
    }
 else {
      if (null != xmlDescriptor.getDefaultRootElementField()) {
        String descLocalName=xmlDescriptor.getDefaultRootElementField().getXPathFragment().getLocalName();
        if (descLocalName != null && descLocalName.equals(localName)) {
          String descUri=xmlDescriptor.getDefaultRootElementField().getXPathFragment().getNamespaceURI();
          if (!xmlReader.isNamespaceAware() || (xmlReader.isNamespaceAware() && ((namespaceURI == null && descUri == null) || (namespaceURI != null && namespaceURI.length() == 0 && descUri == null) || (namespaceURI != null && namespaceURI.equals(descUri))))) {
            shouldWrap=false;
          }
        }
      }
      if (xmlDescriptor.hasInheritance()) {
        session=xmlContext.getSession(xmlDescriptor);
        UnmarshalRecord tmpUnmarshalRecord=new UnmarshalRecordImpl(null);
        tmpUnmarshalRecord.setUnmarshaller(unmarshaller);
        tmpUnmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
        tmpUnmarshalRecord.setXMLReader(this.getXMLReader());
        tmpUnmarshalRecord.setAttributes(atts);
        Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(new org.eclipse.persistence.oxm.record.UnmarshalRecord(tmpUnmarshalRecord),(CoreAbstractSession)session);
        if (classValue == null) {
          QName leafElementType=xmlDescriptor.getDefaultRootElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator != null) {
              classValue=(Class)indicator;
            }
          }
        }
        if (classValue != null) {
          xmlDescriptor=(Descriptor)session.getDescriptor(classValue);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField((XMLRecord)tmpUnmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
    }
    if (null == xmlDescriptor) {
      Object obj=this.xmlReader.getCurrentObject(session,null);
      if (obj != null) {
        xmlDescriptor=(Descriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
      }
    }
    if (null == xmlDescriptor && primitiveWrapperClass == null) {
      if (!this.keepAsElementPolicy.isKeepNoneAsElement()) {
        this.documentBuilder=new SAXDocumentBuilder();
        documentBuilder.startDocument();
        for (        String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
          documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
        }
        documentBuilder.startElement(namespaceURI,localName,qName,atts);
        this.xmlReader.setContentHandler(documentBuilder);
        return;
      }
      Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
      if (null == unmappedContentHandlerClass) {
        throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
      }
 else {
        UnmappedContentHandler unmappedContentHandler;
        try {
          PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
          unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
        }
 catch (        ClassCastException e) {
          throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
        }
catch (        IllegalAccessException e) {
          throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
        }
catch (        InstantiationException e) {
          throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
        }
        UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
        unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
        xmlReader.setContentHandler(unmappedContentHandler);
        setObject(unmappedContentHandlerWrapper.getCurrentObject());
        return;
      }
    }
    if (xmlDescriptor == null && primitiveWrapperClass != null) {
      session=xmlContext.getSession(xmlDescriptor);
      rootRecord=unmarshaller.createRootUnmarshalRecord(primitiveWrapperClass);
      rootRecord.setSession((CoreAbstractSession)unmarshaller.getContext().getSession());
    }
 else {
      if (session == null) {
        session=xmlContext.getSession(xmlDescriptor);
      }
      rootRecord=unmarshaller.createUnmarshalRecord(xmlDescriptor,session);
    }
    this.descriptor=xmlDescriptor;
    rootRecord.setUnmarshaller(this.unmarshaller);
    rootRecord.setXMLReader(this.getXMLReader());
    if (locator != null) {
      rootRecord.setDocumentLocator(xmlReader.getLocator());
    }
    rootRecord.setAttributes(atts);
    boolean hasNilAttribute=(atts != null && null != atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE));
    rootRecord.setNil(isNil || hasNilAttribute);
    rootRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    rootRecord.startDocument();
    rootRecord.initializeRecord((Mapping)null);
    xmlReader.setContentHandler(rootRecord);
    xmlReader.setLexicalHandler(rootRecord);
    Object attributeGroup=this.unmarshaller.getUnmarshalAttributeGroup();
    if (attributeGroup != null) {
      if (attributeGroup.getClass() == CoreClassConstants.STRING) {
        CoreAttributeGroup group=descriptor.getAttributeGroup((String)attributeGroup);
        if (group != null) {
          rootRecord.setUnmarshalAttributeGroup(group);
        }
 else {
        }
      }
 else       if (attributeGroup instanceof CoreAttributeGroup) {
        rootRecord.setUnmarshalAttributeGroup((CoreAttributeGroup)attributeGroup);
      }
 else {
      }
    }
    rootRecord.startElement(namespaceURI,localName,qName,atts);
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
63609,"/** 
 * INTERNAL: Sets the tables
 */
public void setTables(Vector<DatabaseTable> theTables){
  if (null != theTables && theTables.size() > 0) {
    setDefaultRootElementField(theTables.get(0).getName());
  }
  super.setTables(theTables);
}","/** 
 * INTERNAL: Sets the tables
 */
public void setTables(Vector<DatabaseTable> theTables){
  super.setTables(theTables);
}"
63610,"@Override public void setTableNames(Vector tableNames){
  if (null != tableNames && tableNames.size() > 0) {
    setDefaultRootElementField((String)tableNames.get(0));
  }
  super.setTableNames(tableNames);
}","@Override public void setTableNames(Vector tableNames){
  super.setTableNames(tableNames);
}"
63611,"/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  if (schemaReference != null && schemaReference.getSchemaContext() != null && (schemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE || schemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE) && getDefaultRootElementType() == null) {
    if (hasInheritance() && isChildDescriptor()) {
      XMLField parentField=((XMLDescriptor)getInheritancePolicy().getParentDescriptor()).getDefaultRootElementField();
      if (parentField == null || (parentField != null && !defaultRootElementField.getXPathFragment().equals(parentField.getXPathFragment()))) {
        setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
      }
    }
 else {
      setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
    }
  }
  if (null != primaryKeyFields) {
    for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
      XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
      pkField.setNamespaceResolver(this.namespaceResolver);
      pkField.initialize();
    }
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    parentDescriptor.initialize(session);
    if (parentDescriptor.hasEventManager()) {
      getEventManager();
    }
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isObjectReferenceMapping()) {
      this.hasReferenceMappings=true;
    }
    if (mapping instanceof XMLChoiceObjectMapping) {
      XMLChoiceObjectMapping choiceMapping=((XMLChoiceObjectMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    if (mapping instanceof XMLChoiceCollectionMapping) {
      XMLChoiceCollectionMapping choiceMapping=((XMLChoiceCollectionMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  if (eventManager != null) {
    eventManager.initialize(session);
  }
  if (copyPolicy != null) {
    copyPolicy.initialize(session);
  }
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
  if (getInheritancePolicyOrNull() != null && getInheritancePolicy().getParentDescriptor() != null) {
    XMLDescriptor d=(XMLDescriptor)getInheritancePolicy().getParentDescriptor();
    locationAccessor=d.getLocationAccessor();
  }
  if (locationAccessor != null) {
    locationAccessor.initializeAttributes(getJavaClass());
  }
}","/** 
 * INTERNAL: Initialize the mappings as a separate step. This is done as a separate step to ensure that inheritance has been first resolved.
 */
public void initialize(AbstractSession session) throws DescriptorException {
  if (this.hasInheritance()) {
    ((org.eclipse.persistence.internal.oxm.QNameInheritancePolicy)this.getInheritancePolicy()).setNamespaceResolver(this.getNamespaceResolver());
  }
  if (null != this.defaultRootElementField) {
    defaultRootElementField.setNamespaceResolver(this.namespaceResolver);
    defaultRootElementField.initialize();
  }
  if (schemaReference != null && schemaReference.getSchemaContext() != null && (schemaReference.getType() == XMLSchemaReference.COMPLEX_TYPE || schemaReference.getType() == XMLSchemaReference.SIMPLE_TYPE) && getDefaultRootElementType() == null) {
    if (hasInheritance() && isChildDescriptor()) {
      XMLField parentField=((XMLDescriptor)getInheritancePolicy().getParentDescriptor()).getDefaultRootElementField();
      if (parentField == null || (parentField != null && defaultRootElementField != null && !defaultRootElementField.getXPathFragment().equals(parentField.getXPathFragment()))) {
        setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
      }
    }
 else {
      setDefaultRootElementType(schemaReference.getSchemaContextAsQName(getNamespaceResolver()));
    }
  }
  if (null != primaryKeyFields) {
    for (int x=0, primaryKeyFieldsSize=this.primaryKeyFields.size(); x < primaryKeyFieldsSize; x++) {
      XMLField pkField=(XMLField)this.primaryKeyFields.get(x);
      pkField.setNamespaceResolver(this.namespaceResolver);
      pkField.initialize();
    }
  }
  if (shouldBeReadOnly() && (!session.getDefaultReadOnlyClasses().contains(getJavaClass()))) {
    session.getDefaultReadOnlyClasses().add(getJavaClass());
  }
  if (isInitialized(INITIALIZED) || isInvalid()) {
    return;
  }
  setInitializationStage(INITIALIZED);
  if (isChildDescriptor()) {
    ClassDescriptor parentDescriptor=getInheritancePolicy().getParentDescriptor();
    parentDescriptor.initialize(session);
    if (parentDescriptor.hasEventManager()) {
      getEventManager();
    }
  }
  for (Enumeration mappingsEnum=getMappings().elements(); mappingsEnum.hasMoreElements(); ) {
    DatabaseMapping mapping=(DatabaseMapping)mappingsEnum.nextElement();
    validateMappingType(mapping);
    mapping.initialize(session);
    if (mapping.isObjectReferenceMapping()) {
      this.hasReferenceMappings=true;
    }
    if (mapping instanceof XMLChoiceObjectMapping) {
      XMLChoiceObjectMapping choiceMapping=((XMLChoiceObjectMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    if (mapping instanceof XMLChoiceCollectionMapping) {
      XMLChoiceCollectionMapping choiceMapping=((XMLChoiceCollectionMapping)mapping);
      for (      XMLMapping next : choiceMapping.getChoiceElementMappings().values()) {
        if (((DatabaseMapping)next).isObjectReferenceMapping()) {
          this.hasReferenceMappings=true;
        }
      }
    }
    Helper.addAllUniqueToVector(getFields(),mapping.getFields());
  }
  if (hasInheritance()) {
    getInheritancePolicy().initialize(session);
  }
  setAllFields((Vector)getFields().clone());
  getObjectBuilder().initialize(session);
  if (hasInterfacePolicy()) {
    interfaceInitialization(session);
  }
  if (hasReturningPolicy()) {
    getReturningPolicy().initialize(session);
  }
  if (eventManager != null) {
    eventManager.initialize(session);
  }
  if (copyPolicy != null) {
    copyPolicy.initialize(session);
  }
  getInstantiationPolicy().initialize(session);
  if (getSchemaReference() != null) {
    getSchemaReference().initialize(session);
  }
  if (getInheritancePolicyOrNull() != null && getInheritancePolicy().getParentDescriptor() != null) {
    XMLDescriptor d=(XMLDescriptor)getInheritancePolicy().getParentDescriptor();
    locationAccessor=d.getLocationAccessor();
  }
  if (locationAccessor != null) {
    locationAccessor.initializeAttributes(getJavaClass());
  }
}"
63612,"/** 
 * @see javax.ws.rs.ext.MessageBodyWriter#writeTo(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[],javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.io.OutputStream)
 */
public void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    marshaller.setProperty(MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS,marshalEmptyCollections);
    marshaller.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      marshaller.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    marshaller.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    Map<String,String> mediaTypeParameters=null;
    if (null != mediaType) {
      mediaTypeParameters=mediaType.getParameters();
    }
    if (null != mediaTypeParameters && mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      marshaller.setProperty(Marshaller.JAXB_ENCODING,charSet);
    }
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","/** 
 * @see javax.ws.rs.ext.MessageBodyWriter#writeTo(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[],javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.io.OutputStream)
 */
public void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    marshaller.setProperty(MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS,marshalEmptyCollections);
    marshaller.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      marshaller.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    marshaller.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    Map<String,String> mediaTypeParameters=null;
    if (null != mediaType) {
      mediaTypeParameters=mediaType.getParameters();
    }
    if (null != mediaTypeParameters && mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      marshaller.setProperty(Marshaller.JAXB_ENCODING,charSet);
    }
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    if (domainClass.getPackage().getName().startsWith(""String_Node_Str"") && !(List.class.isAssignableFrom(type) || type.isArray())) {
      object=new JAXBElement(new QName((String)marshaller.getProperty(MarshallerProperties.JSON_VALUE_WRAPPER)),domainClass,object);
    }
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
63613,"/** 
 * INTERNAL: The method validateAttributeOfInstantiatedObject(Object attributeValue) fixes the value of the attributeValue  in cases where it is null and indirection requires that it contain some specific data structure.  Return whether this will happen. This method is used to help determine if indirection has been triggered
 * @param attributeValue
 * @return
 * @see validateAttributeOfInstantiatedObject(Object attributeValue)
 */
@Override public boolean isAttributeValueFullyBuilt(Object attributeValue){
  return attributeValue != null;
}","/** 
 * INTERNAL: The method validateAttributeOfInstantiatedObject(Object attributeValue) fixes the value of the attributeValue  in cases where it is null and indirection requires that it contain some specific data structure.  Return whether this will happen. This method is used to help determine if indirection has been triggered
 * @param attributeValue
 * @return
 * @see validateAttributeOfInstantiatedObject(Object attributeValue)
 */
@Override public boolean isAttributeValueFullyBuilt(Object attributeValue){
  return attributeValue != null && !(attributeValue instanceof ValueHolder && ((ValueHolder)attributeValue).isNewlyWeavedValueHolder());
}"
63614,"public void persistExample(Session session){
  Vector allObjects=new Vector();
  UnitOfWork unitOfWork=session.acquireUnitOfWork();
  unitOfWork.removeAllReadOnlyClasses();
  PopulationManager.getDefaultManager().addAllObjectsForClass(Employee.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(SmallProject.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(LargeProject.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(GoldBuyer.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(PlatinumBuyer.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(EquipmentCode.class,allObjects);
  unitOfWork.registerAllObjects(allObjects);
  unitOfWork.commit();
  if (TestCase.supportsStoredProcedures(session)) {
    boolean orig_FAST_TABLE_CREATOR=SchemaManager.FAST_TABLE_CREATOR;
    if (useFastTableCreatorAfterInitialCreate && !isFirstCreation) {
      SchemaManager.FAST_TABLE_CREATOR=true;
    }
    try {
      SchemaManager schema=new SchemaManager((DatabaseSession)session);
      schema.replaceObject(buildOracleStoredProcedureReadFromAddress((DatabaseSession)session));
      schema.replaceObject(buildOracleStoredProcedureReadInOut((DatabaseSession)session));
    }
  finally {
      if (useFastTableCreatorAfterInitialCreate && !isFirstCreation) {
        SchemaManager.FAST_TABLE_CREATOR=orig_FAST_TABLE_CREATOR;
      }
    }
    isFirstCreation=false;
  }
}","public void persistExample(Session session){
  Vector allObjects=new Vector();
  UnitOfWork unitOfWork=session.acquireUnitOfWork();
  unitOfWork.removeAllReadOnlyClasses();
  PopulationManager.getDefaultManager().addAllObjectsForClass(Employee.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(SmallProject.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(LargeProject.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(GoldBuyer.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(PlatinumBuyer.class,allObjects);
  PopulationManager.getDefaultManager().addAllObjectsForClass(EquipmentCode.class,allObjects);
  unitOfWork.registerAllObjects(allObjects);
  unitOfWork.commit();
  if (TestCase.supportsStoredProcedures(session)) {
    boolean orig_FAST_TABLE_CREATOR=SchemaManager.FAST_TABLE_CREATOR;
    if (useFastTableCreatorAfterInitialCreate && !isFirstCreation) {
      SchemaManager.FAST_TABLE_CREATOR=true;
    }
    try {
      SchemaManager schema=new SchemaManager((DatabaseSession)session);
      schema.replaceObject(buildOracleStoredProcedureReadFromAddress((DatabaseSession)session));
      schema.replaceObject(buildOracleStoredProcedureReadFromEmployee((DatabaseSession)session));
      schema.replaceObject(buildOracleStoredProcedureReadInOut((DatabaseSession)session));
    }
  finally {
      if (useFastTableCreatorAfterInitialCreate && !isFirstCreation) {
        SchemaManager.FAST_TABLE_CREATOR=orig_FAST_TABLE_CREATOR;
      }
    }
    isFirstCreation=false;
  }
}"
63615,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.setName(""String_Node_Str"");
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  if (!isJPA10()) {
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
    suite.addTest(new AdvancedJPAJunitTest(""String_Node_Str""));
  }
  return suite;
}"
63616,"private void writeElement(Element elem,String newNamespace,String newName,XMLEventWriter xew) throws XMLStreamException {
  String prefix=null;
  String namespace=null;
  String localName=null;
  String nodeName=null;
  if (newName != null) {
    namespace=newNamespace;
    localName=newName;
    nodeName=newName;
    if (newNamespace != null && newNamespace.length() > 0) {
      NamespaceResolver tempNR=new NamespaceResolver();
      tempNR.setDOM(elem);
      prefix=tempNR.resolveNamespaceURI(namespace);
      if (prefix == null || prefix.length() == 0) {
        String defaultNamespace=elem.getAttributeNS(javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI,javax.xml.XMLConstants.XMLNS_ATTRIBUTE);
        if (defaultNamespace == null) {
          prefix=tempNR.generatePrefix();
        }
 else         if (defaultNamespace != namespace) {
          prefix=tempNR.generatePrefix();
        }
 else {
          prefix=Constants.EMPTY_STRING;
        }
      }
    }
  }
 else {
    prefix=elem.getPrefix();
    namespace=elem.getNamespaceURI();
    localName=elem.getLocalName();
    nodeName=elem.getNodeName();
  }
  if (prefix != null && prefix.length() > 0) {
    String namespaceURI=xew.getNamespaceContext().getNamespaceURI(prefix);
    xew.add(xmlEventFactory.createStartElement(prefix,namespace,localName));
    if (!(namespace.equals(namespaceURI))) {
      xew.add(xmlEventFactory.createNamespace(prefix,namespace));
    }
  }
 else {
    if (namespace == null || namespace.length() == 0) {
      String defaultNamespace=xew.getNamespaceContext().getNamespaceURI(Constants.EMPTY_STRING);
      xew.add(xmlEventFactory.createStartElement(""String_Node_Str"",""String_Node_Str"",nodeName));
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xew.add(xmlEventFactory.createNamespace(Constants.EMPTY_STRING));
      }
    }
 else {
      xew.add(xmlEventFactory.createStartElement(Constants.EMPTY_STRING,namespace,localName));
    }
  }
  NodeList childNodes=elem.getChildNodes();
  NamedNodeMap attrs=elem.getAttributes();
  ArrayList<Attr> nonNamespaceDeclAttrs=new ArrayList<Attr>();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    if (next.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attribute=next;
      if (next.getPrefix() != null && next.getPrefix().equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
        String currentUri=xew.getNamespaceContext().getNamespaceURI(next.getLocalName());
        if (currentUri == null || !currentUri.equals(next.getValue())) {
          xew.add(xmlEventFactory.createNamespace(next.getLocalName(),next.getValue()));
        }
      }
 else {
        nonNamespaceDeclAttrs.add(attribute);
      }
    }
  }
  for (  Attr next : nonNamespaceDeclAttrs) {
    if (next.getPrefix() == null) {
      xew.add(xmlEventFactory.createAttribute(next.getName(),next.getValue()));
    }
 else {
      xew.add(xmlEventFactory.createAttribute(next.getPrefix(),next.getNamespaceURI(),next.getLocalName(),next.getValue()));
    }
  }
  for (int i=0; i < childNodes.getLength(); i++) {
    Node next=childNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE) {
      xew.add(xmlEventFactory.createCharacters(((Text)next).getNodeValue()));
    }
 else     if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
      xew.add(xmlEventFactory.createCData(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.COMMENT_NODE) {
      xew.add(xmlEventFactory.createComment(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      writeElement((Element)next,null,null,xew);
    }
  }
  if (elem.getPrefix() != null && elem.getPrefix().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(elem.getPrefix(),elem.getNamespaceURI(),elem.getLocalName()));
  }
 else   if (elem.getNamespaceURI() != null && elem.getNamespaceURI().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",elem.getNamespaceURI(),elem.getLocalName()));
  }
 else {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",elem.getNodeName()));
  }
}","private void writeElement(Element elem,String newNamespace,String newName,XMLEventWriter xew) throws XMLStreamException {
  String prefix=null;
  String namespace=null;
  String localName=null;
  String nodeName=null;
  if (newName != null) {
    namespace=newNamespace;
    localName=newName;
    nodeName=newName;
    if (newNamespace != null && newNamespace.length() > 0) {
      NamespaceResolver tempNR=new NamespaceResolver();
      tempNR.setDOM(elem);
      prefix=tempNR.resolveNamespaceURI(namespace);
      if (prefix == null || prefix.length() == 0) {
        String defaultNamespace=elem.getAttributeNS(javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI,javax.xml.XMLConstants.XMLNS_ATTRIBUTE);
        if (defaultNamespace == null) {
          prefix=tempNR.generatePrefix();
        }
 else         if (defaultNamespace != namespace) {
          prefix=tempNR.generatePrefix();
        }
 else {
          prefix=Constants.EMPTY_STRING;
        }
      }
    }
  }
 else {
    prefix=elem.getPrefix();
    namespace=elem.getNamespaceURI();
    localName=elem.getLocalName();
    nodeName=elem.getNodeName();
  }
  String defaultNamespace=xew.getNamespaceContext().getNamespaceURI(Constants.EMPTY_STRING);
  boolean needToAddDefaultNS=false;
  if (prefix != null && prefix.length() > 0) {
    String namespaceURI=xew.getNamespaceContext().getNamespaceURI(prefix);
    xew.add(xmlEventFactory.createStartElement(prefix,namespace,localName));
    if (!(namespace.equals(namespaceURI))) {
      xew.add(xmlEventFactory.createNamespace(prefix,namespace));
    }
  }
 else {
    if (namespace == null || namespace.length() == 0) {
      xew.add(xmlEventFactory.createStartElement(""String_Node_Str"",""String_Node_Str"",nodeName));
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xew.add(xmlEventFactory.createNamespace(Constants.EMPTY_STRING));
      }
    }
 else {
      needToAddDefaultNS=true;
      xew.add(xmlEventFactory.createStartElement(Constants.EMPTY_STRING,namespace,localName));
    }
  }
  NodeList childNodes=elem.getChildNodes();
  NamedNodeMap attrs=elem.getAttributes();
  ArrayList<Attr> nonNamespaceDeclAttrs=new ArrayList<Attr>();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    if (next.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attribute=next;
      if (next.getPrefix() != null && next.getPrefix().equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
        String currentUri=xew.getNamespaceContext().getNamespaceURI(next.getLocalName());
        if (currentUri == null || !currentUri.equals(next.getValue())) {
          xew.add(xmlEventFactory.createNamespace(next.getLocalName(),next.getValue()));
        }
      }
 else {
        if (next.getName().equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
          xew.add(xmlEventFactory.createNamespace(next.getValue()));
          needToAddDefaultNS=false;
        }
 else {
          nonNamespaceDeclAttrs.add(attribute);
        }
      }
    }
  }
  if (needToAddDefaultNS) {
    if (defaultNamespace == null || !defaultNamespace.equals(namespace)) {
      xew.add(xmlEventFactory.createNamespace(namespace));
    }
  }
  for (  Attr next : nonNamespaceDeclAttrs) {
    if (next.getPrefix() == null) {
      xew.add(xmlEventFactory.createAttribute(next.getName(),next.getValue()));
    }
 else {
      xew.add(xmlEventFactory.createAttribute(next.getPrefix(),next.getNamespaceURI(),next.getLocalName(),next.getValue()));
    }
  }
  for (int i=0; i < childNodes.getLength(); i++) {
    Node next=childNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE) {
      xew.add(xmlEventFactory.createCharacters(((Text)next).getNodeValue()));
    }
 else     if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
      xew.add(xmlEventFactory.createCData(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.COMMENT_NODE) {
      xew.add(xmlEventFactory.createComment(next.getNodeValue()));
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      writeElement((Element)next,null,null,xew);
    }
  }
  if (elem.getPrefix() != null && elem.getPrefix().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(elem.getPrefix(),elem.getNamespaceURI(),elem.getLocalName()));
  }
 else   if (elem.getNamespaceURI() != null && elem.getNamespaceURI().length() > 0) {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",elem.getNamespaceURI(),elem.getLocalName()));
  }
 else {
    xew.add(xmlEventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",elem.getNodeName()));
  }
}"
63617,"private void writeElement(Element elem,String newNamespace,String newName,XMLStreamWriter xsw) throws XMLStreamException {
  String prefix=null;
  String namespace=null;
  String localName=null;
  String nodeName=null;
  if (newName != null) {
    namespace=newNamespace;
    localName=newName;
    nodeName=newName;
    if (newNamespace != null && newNamespace.length() > 0) {
      NamespaceResolver tempNR=new NamespaceResolver();
      tempNR.setDOM(elem);
      prefix=tempNR.resolveNamespaceURI(namespace);
      if (prefix == null || prefix.length() == 0) {
        String defaultNamespace=elem.getAttributeNS(javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI,javax.xml.XMLConstants.XMLNS_ATTRIBUTE);
        if (defaultNamespace == null) {
          prefix=tempNR.generatePrefix();
        }
 else         if (defaultNamespace != namespace) {
          prefix=tempNR.generatePrefix();
        }
 else {
          prefix=Constants.EMPTY_STRING;
        }
      }
    }
  }
 else {
    prefix=elem.getPrefix();
    namespace=elem.getNamespaceURI();
    localName=elem.getLocalName();
    nodeName=elem.getNodeName();
  }
  if (prefix != null && prefix.length() > 0) {
    String namespaceURI=xsw.getNamespaceContext().getNamespaceURI(prefix);
    xsw.writeStartElement(prefix,localName,namespace);
    if (!(namespace.equals(namespaceURI))) {
      xsw.writeNamespace(prefix,namespace);
    }
  }
 else {
    if (namespace == null || namespace.length() == 0) {
      xsw.writeStartElement(nodeName);
      String defaultNamespace=xsw.getNamespaceContext().getNamespaceURI(Constants.EMPTY_STRING);
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xsw.writeDefaultNamespace(Constants.EMPTY_STRING);
      }
    }
 else {
      xsw.writeStartElement(Constants.EMPTY_STRING,localName,namespace);
    }
  }
  NodeList childNodes=elem.getChildNodes();
  NamedNodeMap attrs=elem.getAttributes();
  ArrayList<Attr> nonNamespaceDeclAttrs=new ArrayList<Attr>();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    if (next.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attribute=next;
      if (next.getPrefix() != null && next.getPrefix().equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
        String currentUri=xsw.getNamespaceContext().getNamespaceURI(next.getLocalName());
        if (currentUri == null || !currentUri.equals(next.getValue())) {
          xsw.writeNamespace(next.getLocalName(),next.getValue());
        }
      }
 else {
        if (next.getName().equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
          xsw.writeDefaultNamespace(next.getValue());
        }
 else {
          nonNamespaceDeclAttrs.add(attribute);
        }
      }
    }
  }
  for (  Attr next : nonNamespaceDeclAttrs) {
    if (next.getPrefix() == null) {
      xsw.writeAttribute(next.getName(),next.getValue());
    }
 else {
      xsw.writeAttribute(next.getPrefix(),next.getNamespaceURI(),next.getLocalName(),next.getValue());
    }
  }
  for (int i=0; i < childNodes.getLength(); i++) {
    Node next=childNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE) {
      xsw.writeCharacters(((Text)next).getNodeValue());
    }
 else     if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
      xsw.writeCData(next.getNodeValue());
    }
 else     if (next.getNodeType() == Node.COMMENT_NODE) {
      xsw.writeComment(next.getNodeValue());
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      writeElement((Element)next,null,null,xsw);
    }
  }
  xsw.writeEndElement();
}","private void writeElement(Element elem,String newNamespace,String newName,XMLStreamWriter xsw) throws XMLStreamException {
  String prefix=null;
  String namespace=null;
  String localName=null;
  String nodeName=null;
  if (newName != null) {
    namespace=newNamespace;
    localName=newName;
    nodeName=newName;
    if (newNamespace != null && newNamespace.length() > 0) {
      NamespaceResolver tempNR=new NamespaceResolver();
      tempNR.setDOM(elem);
      prefix=tempNR.resolveNamespaceURI(namespace);
      if (prefix == null || prefix.length() == 0) {
        String defaultNamespace=elem.getAttributeNS(javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI,javax.xml.XMLConstants.XMLNS_ATTRIBUTE);
        if (defaultNamespace == null) {
          prefix=tempNR.generatePrefix();
        }
 else         if (defaultNamespace != namespace) {
          prefix=tempNR.generatePrefix();
        }
 else {
          prefix=Constants.EMPTY_STRING;
        }
      }
    }
  }
 else {
    prefix=elem.getPrefix();
    namespace=elem.getNamespaceURI();
    localName=elem.getLocalName();
    nodeName=elem.getNodeName();
  }
  String defaultNamespace=xsw.getNamespaceContext().getNamespaceURI(Constants.EMPTY_STRING);
  boolean needToAddDefaultNS=false;
  if (prefix != null && prefix.length() > 0) {
    String namespaceURI=xsw.getNamespaceContext().getNamespaceURI(prefix);
    xsw.writeStartElement(prefix,localName,namespace);
    if (!(namespace.equals(namespaceURI))) {
      xsw.writeNamespace(prefix,namespace);
    }
  }
 else {
    if (namespace == null || namespace.length() == 0) {
      xsw.writeStartElement(nodeName);
      if (defaultNamespace != null && defaultNamespace.length() > 0) {
        xsw.writeDefaultNamespace(Constants.EMPTY_STRING);
      }
    }
 else {
      needToAddDefaultNS=true;
      xsw.writeStartElement(Constants.EMPTY_STRING,localName,namespace);
    }
  }
  NodeList childNodes=elem.getChildNodes();
  NamedNodeMap attrs=elem.getAttributes();
  ArrayList<Attr> nonNamespaceDeclAttrs=new ArrayList<Attr>();
  for (int i=0; i < attrs.getLength(); i++) {
    Attr next=(Attr)attrs.item(i);
    if (next.getNodeType() == Node.ATTRIBUTE_NODE) {
      Attr attribute=next;
      if (next.getPrefix() != null && next.getPrefix().equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
        String currentUri=xsw.getNamespaceContext().getNamespaceURI(next.getLocalName());
        if (currentUri == null || !currentUri.equals(next.getValue())) {
          xsw.writeNamespace(next.getLocalName(),next.getValue());
        }
      }
 else {
        if (next.getName().equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
          xsw.writeDefaultNamespace(next.getValue());
          needToAddDefaultNS=false;
        }
 else {
          nonNamespaceDeclAttrs.add(attribute);
        }
      }
    }
  }
  if (needToAddDefaultNS) {
    if (defaultNamespace == null || !defaultNamespace.equals(namespace)) {
      xsw.writeDefaultNamespace(namespace);
    }
  }
  for (  Attr next : nonNamespaceDeclAttrs) {
    if (next.getPrefix() == null) {
      xsw.writeAttribute(next.getName(),next.getValue());
    }
 else {
      xsw.writeAttribute(next.getPrefix(),next.getNamespaceURI(),next.getLocalName(),next.getValue());
    }
  }
  for (int i=0; i < childNodes.getLength(); i++) {
    Node next=childNodes.item(i);
    if (next.getNodeType() == Node.TEXT_NODE) {
      xsw.writeCharacters(((Text)next).getNodeValue());
    }
 else     if (next.getNodeType() == Node.CDATA_SECTION_NODE) {
      xsw.writeCData(next.getNodeValue());
    }
 else     if (next.getNodeType() == Node.COMMENT_NODE) {
      xsw.writeComment(next.getNodeValue());
    }
 else     if (next.getNodeType() == Node.ELEMENT_NODE) {
      writeElement((Element)next,null,null,xsw);
    }
  }
  xsw.writeEndElement();
}"
63618,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JSONAttributePrefixOnContextTestCases.class);
  suite.addTestSuite(JSONAttributePrefixEmptyStringTestCases.class);
  suite.addTestSuite(JSONAttributePrefixOnMarshallerTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementIncludeRootFalseTestCases.class);
  suite.addTestSuite(JsonMapAdapterTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementInheritanceTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(SimpleBeanAttrNullTestCases.class);
  suite.addTestSuite(DifferentNamespacesTestCases.class);
  suite.addTestSuite(NamespacesOnContextTestCases.class);
  suite.addTestSuite(NamespacesOnUnmarshalOnlyTestCases.class);
  suite.addTestSuite(NoRootElementTestCases.class);
  suite.addTestSuite(NoRootElementNSTestCases.class);
  suite.addTestSuite(NamespaceInheritanceTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorContextTestCases.class);
  suite.addTestSuite(SeparatorInNameTestCases.class);
  suite.addTestSuite(IncludeRootFalseWithXMLRootElementTestCases.class);
  suite.addTestSuite(IncludeRootTrueWithXMLRootElementTestCases.class);
  suite.addTestSuite(XMLValuePropTestCases.class);
  suite.addTestSuite(XMLValuePropDifferentTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  suite.addTestSuite(EscapeCharactersTestCases.class);
  suite.addTestSuite(UsAsciiTestCases.class);
  suite.addTest(RootLevelListTestCases.suite());
  suite.addTestSuite(EmptyNullMarshalUnmarshalTestCases.class);
  suite.addTestSuite(InheritanceNoRootTestCases.class);
  suite.addTest(JSONWithPaddingTestCases.suite());
  suite.addTest(AnyTestCases.suite());
  suite.addTest(AllWrapperTestCases.suite());
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(JSONAttributePrefixOnContextTestCases.class);
  suite.addTestSuite(JSONAttributePrefixEmptyStringTestCases.class);
  suite.addTestSuite(JSONAttributePrefixOnMarshallerTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementIncludeRootFalseTestCases.class);
  suite.addTestSuite(JsonMapAdapterTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementInheritanceTestCases.class);
  suite.addTestSuite(JSONAttributeNoXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(SimpleBeanAttrNullTestCases.class);
  suite.addTestSuite(DifferentNamespacesTestCases.class);
  suite.addTestSuite(NamespacesOnContextTestCases.class);
  suite.addTestSuite(NamespacesOnUnmarshalOnlyTestCases.class);
  suite.addTestSuite(NoRootElementTestCases.class);
  suite.addTestSuite(NoRootElementNSTestCases.class);
  suite.addTestSuite(NamespaceInheritanceTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorTestCases.class);
  suite.addTestSuite(NamespaceInheritanceSeparatorContextTestCases.class);
  suite.addTestSuite(SeparatorInNameTestCases.class);
  suite.addTestSuite(IncludeRootFalseWithXMLRootElementTestCases.class);
  suite.addTestSuite(IncludeRootTrueWithXMLRootElementTestCases.class);
  suite.addTestSuite(XMLValuePropTestCases.class);
  suite.addTestSuite(XMLValuePropDifferentTestCases.class);
  suite.addTestSuite(NumberTestCases.class);
  suite.addTestSuite(EscapeCharactersTestCases.class);
  suite.addTestSuite(UsAsciiTestCases.class);
  suite.addTestSuite(UTF8TestCases.class);
  suite.addTest(RootLevelListTestCases.suite());
  suite.addTestSuite(EmptyNullMarshalUnmarshalTestCases.class);
  suite.addTestSuite(InheritanceNoRootTestCases.class);
  suite.addTest(JSONWithPaddingTestCases.suite());
  suite.addTest(AnyTestCases.suite());
  suite.addTest(AllWrapperTestCases.suite());
  return suite;
}"
63619,"/** 
 * @return true for all media types of the pattern *&#47;json and *&#47;*+json.
 */
protected boolean supportsMediaType(MediaType mediaType){
  String subtype=mediaType.getSubtype();
  return subtype.equals(JSON) || subtype.endsWith(PLUS_JSON);
}","/** 
 * @return true for all media types of the pattern *&#47;json and *&#47;*+json.
 */
protected boolean supportsMediaType(MediaType mediaType){
  if (null == mediaType) {
    return true;
  }
  String subtype=mediaType.getSubtype();
  return subtype.equals(JSON) || subtype.endsWith(PLUS_JSON);
}"
63620,"/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> <li>javax.ws.rs.core.StreamingOutput</li> </ul>
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (type == JSONWithPadding.class && APPLICATION_XJAVASCRIPT.equals(mediaType.toString())) {
    return true;
  }
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (StreamingOutput.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}","/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> <li>javax.ws.rs.core.StreamingOutput</li> </ul>
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (type == JSONWithPadding.class && APPLICATION_XJAVASCRIPT.equals(mediaType.toString())) {
    return true;
  }
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type || type.isPrimitive()) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (StreamingOutput.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (type.isPrimitive()) {
    return false;
  }
 else   if (type.isArray() && (type.getComponentType().isArray() || type.getComponentType().isPrimitive() || type.getComponentType().getPackage().getName().startsWith(""String_Node_Str""))) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    String packageName=domainClass.getPackage().getName();
    if (null != packageName && packageName.startsWith(""String_Node_Str"")) {
      return false;
    }
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}"
63621,"/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.io.InputStream</li> <li>java.io.Reader</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> </ul>
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (InputStream.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Reader.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}","/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.io.InputStream</li> <li>java.io.Reader</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> </ul>
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (InputStream.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Reader.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (type.isPrimitive()) {
    return false;
  }
 else   if (type.isArray() && (type.getComponentType().isArray() || type.getComponentType().isPrimitive() || type.getComponentType().getPackage().getName().startsWith(""String_Node_Str""))) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}"
63622,"public IsolatedEmployeeProject(){
  setName(""String_Node_Str"");
  applyLogin();
  addDescriptor(buildAddressDescriptor());
  addDescriptor(buildEmployeeDescriptor());
  addDescriptor(buildEmploymentPeriodDescriptor());
  addDescriptor(buildPhoneNumberDescriptor());
}","public IsolatedEmployeeProject(){
  setName(""String_Node_Str"");
  applyLogin();
  addDescriptor(buildAddressDescriptor());
  addDescriptor(buildEmployeeDescriptor());
  addDescriptor(buildEmploymentPeriodDescriptor());
  addDescriptor(buildPhoneNumberDescriptor());
  addDescriptor(buildIsolatedParentDescriptor());
  addDescriptor(buildIsolatedChildDescriptor());
}"
63623,"/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> <li>javax.ws.rs.core.StreamingOutput</li> </ul>
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (type == JSONWithPadding.class && APPLICATION_XJAVASCRIPT.equals(mediaType.toString())) {
    return true;
  }
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type || type.isPrimitive()) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (StreamingOutput.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (type.isPrimitive()) {
    return false;
  }
 else   if (type.isArray() && (type.getComponentType().isArray() || type.getComponentType().isPrimitive() || type.getComponentType().getPackage().getName().startsWith(""String_Node_Str""))) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    String packageName=domainClass.getPackage().getName();
    if (null != packageName && packageName.startsWith(""String_Node_Str"")) {
      return false;
    }
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}","/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> <li>javax.ws.rs.core.StreamingOutput</li> </ul>
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (type == JSONWithPadding.class && APPLICATION_XJAVASCRIPT.equals(mediaType.toString())) {
    return true;
  }
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type || type.isPrimitive()) {
    return false;
  }
 else   if (Map.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (StreamingOutput.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (type.isPrimitive()) {
    return false;
  }
 else   if (type.isArray() && (type.getComponentType().isArray() || type.getComponentType().isPrimitive() || type.getComponentType().getPackage().getName().startsWith(""String_Node_Str""))) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    String packageName=domainClass.getPackage().getName();
    if (null != packageName && packageName.startsWith(""String_Node_Str"")) {
      return false;
    }
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}"
63624,"/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.io.InputStream</li> <li>java.io.Reader</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> </ul>
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (InputStream.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Reader.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (type.isPrimitive()) {
    return false;
  }
 else   if (type.isArray() && (type.getComponentType().isArray() || type.getComponentType().isPrimitive() || type.getComponentType().getPackage().getName().startsWith(""String_Node_Str""))) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}","/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.io.InputStream</li> <li>java.io.Reader</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> </ul>
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (Map.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (InputStream.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Reader.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (type.isPrimitive()) {
    return false;
  }
 else   if (type.isArray() && (type.getComponentType().isArray() || type.getComponentType().isPrimitive() || type.getComponentType().getPackage().getName().startsWith(""String_Node_Str""))) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}"
63625,"private Class generateWrapperClassAndDescriptor(TypeInfo type,QName next,ElementDeclaration nextElement,String nextClassName,String attributeTypeName){
  String namespaceUri=null;
  if (next != null) {
    namespaceUri=next.getNamespaceURI();
    if (namespaceUri == null || namespaceUri.equals(XMLProcessor.DEFAULT)) {
      namespaceUri=""String_Node_Str"";
    }
  }
  TypeMappingInfo tmi=nextElement.getTypeMappingInfo();
  Class generatedClass=null;
  JaxbClassLoader loader=getJaxbClassLoader();
  if (tmi != null) {
    generatedClass=CompilerHelper.getExisitingGeneratedClass(tmi,typeMappingInfoToGeneratedClasses,typeMappingInfoToAdapterClasses,helper.getClassLoader());
    if (generatedClass == null) {
      generatedClass=this.generateWrapperClass(loader.nextAvailableGeneratedClassName(),attributeTypeName,nextElement.isList(),next);
    }
    typeMappingInfoToGeneratedClasses.put(tmi,generatedClass);
  }
 else {
    generatedClass=this.generateWrapperClass(loader.nextAvailableGeneratedClassName(),attributeTypeName,nextElement.isList(),next);
  }
  this.qNamesToGeneratedClasses.put(next,generatedClass);
  try {
    Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
    this.qNamesToDeclaredClasses.put(next,declaredClass);
  }
 catch (  Exception e) {
  }
  Descriptor desc=(Descriptor)project.getDescriptor(generatedClass);
  if (desc == null) {
    desc=new XMLDescriptor();
    desc.setJavaClass(generatedClass);
    if (nextElement.isList()) {
      DirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      mapping.setUsesSingleNode(true);
      mapping.setReuseContainer(true);
      if (type != null && type.isEnumerationType()) {
        mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
      }
 else {
        try {
          Class fieldElementClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
          mapping.setFieldElementClass(fieldElementClass);
        }
 catch (        ClassNotFoundException e) {
        }
      }
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
      }
 else       if (nextClassName.equals(""String_Node_Str"")) {
        ((Field)mapping.getField()).setSchemaType(Constants.QNAME_QNAME);
      }
      desc.addMapping((CoreMapping)mapping);
    }
 else {
      if (nextElement.getJavaTypeName().equals(OBJECT_CLASS_NAME)) {
        CompositeObjectMapping mapping=new XMLCompositeObjectMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        mapping.setXPath(""String_Node_Str"");
        setTypedTextField((Field)mapping.getField());
        desc.addMapping((CoreMapping)mapping);
      }
 else       if (isBinaryData(nextElement.getJavaType())) {
        BinaryDataMapping mapping=new XMLBinaryDataMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
        mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
        Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
        mapping.setAttributeClassification(attributeClassification);
        mapping.setShouldInlineBinaryData(false);
        mapping.setSwaRef(nextElement.isXmlAttachmentRef());
        mapping.setMimeType(nextElement.getXmlMimeType());
        desc.addMapping((CoreMapping)mapping);
      }
 else {
        DirectMapping mapping=new XMLDirectMapping();
        mapping.setNullValueMarshalled(true);
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        if (nextElement.getDefaultValue() != null) {
          mapping.setNullValue(nextElement.getDefaultValue());
          mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
        }
        if (helper.isBuiltInJavaType(nextElement.getJavaType())) {
          Class attributeClassification=null;
          if (nextElement.getJavaType().isPrimitive()) {
            attributeClassification=XMLConversionManager.getDefaultManager().convertClassNameToClass(attributeTypeName);
          }
 else {
            attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,getClass().getClassLoader());
          }
          mapping.setAttributeClassification(attributeClassification);
        }
        IsSetNullPolicy nullPolicy=new IsSetNullPolicy(""String_Node_Str"",false,true,XMLNullRepresentationType.ABSENT_NODE);
        mapping.setNullPolicy(nullPolicy);
        if (type != null && type.isEnumerationType()) {
          mapping.setConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
        }
        if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
          ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
        }
 else         if (nextClassName.equals(""String_Node_Str"")) {
          ((Field)mapping.getField()).setSchemaType(Constants.QNAME_QNAME);
        }
        if (nextElement.getJavaTypeAdapterClass() != null) {
          mapping.setConverter(new XMLJavaTypeConverter(nextElement.getJavaTypeAdapterClass()));
        }
        desc.addMapping((CoreMapping)mapping);
      }
    }
    if (next != null) {
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolverForDescriptor();
        String prefix=null;
        if (namespaceUri != Constants.EMPTY_STRING) {
          prefix=resolver.resolveNamespaceURI(namespaceUri);
          if (prefix == null) {
            prefix=getPrefixForNamespace(namespaceUri,resolver);
          }
        }
        desc.setNamespaceResolver(resolver);
        if (nextElement.isXmlRootElement()) {
          desc.setDefaultRootElement(getQualifiedString(prefix,next.getLocalPart()));
        }
 else {
          desc.setDefaultRootElement(""String_Node_Str"");
          desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
          desc.setResultAlwaysXMLRoot(true);
        }
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new org.eclipse.persistence.oxm.NamespaceResolver();
          String prefix=getPrefixForNamespace(namespaceUri,resolver);
          desc.setNamespaceResolver(resolver);
          if (nextElement.isXmlRootElement()) {
            desc.setDefaultRootElement(getQualifiedString(prefix,next.getLocalPart()));
          }
 else {
            desc.setDefaultRootElement(""String_Node_Str"");
            desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
            desc.setResultAlwaysXMLRoot(true);
          }
        }
      }
    }
    project.addDescriptor((CoreDescriptor)desc);
  }
  return generatedClass;
}","private Class generateWrapperClassAndDescriptor(TypeInfo type,QName next,ElementDeclaration nextElement,String nextClassName,String attributeTypeName){
  String namespaceUri=null;
  if (next != null) {
    namespaceUri=next.getNamespaceURI();
    if (namespaceUri == null || namespaceUri.equals(XMLProcessor.DEFAULT)) {
      namespaceUri=""String_Node_Str"";
    }
  }
  TypeMappingInfo tmi=nextElement.getTypeMappingInfo();
  Class generatedClass=null;
  JaxbClassLoader loader=getJaxbClassLoader();
  if (tmi != null) {
    generatedClass=CompilerHelper.getExisitingGeneratedClass(tmi,typeMappingInfoToGeneratedClasses,typeMappingInfoToAdapterClasses,helper.getClassLoader());
    if (generatedClass == null) {
      generatedClass=this.generateWrapperClass(loader.nextAvailableGeneratedClassName(),attributeTypeName,nextElement.isList(),next);
    }
    typeMappingInfoToGeneratedClasses.put(tmi,generatedClass);
  }
 else {
    generatedClass=this.generateWrapperClass(loader.nextAvailableGeneratedClassName(),attributeTypeName,nextElement.isList(),next);
  }
  this.qNamesToGeneratedClasses.put(next,generatedClass);
  try {
    Class declaredClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
    this.qNamesToDeclaredClasses.put(next,declaredClass);
  }
 catch (  Exception e) {
  }
  Descriptor desc=(Descriptor)project.getDescriptor(generatedClass);
  if (desc == null) {
    desc=new XMLDescriptor();
    desc.setJavaClass(generatedClass);
    if (nextElement.isList()) {
      DirectCollectionMapping mapping=new XMLCompositeDirectCollectionMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      mapping.setUsesSingleNode(true);
      mapping.setReuseContainer(true);
      if (type != null && type.isEnumerationType()) {
        mapping.setValueConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
      }
 else {
        try {
          Class fieldElementClass=PrivilegedAccessHelper.getClassForName(nextClassName,false,helper.getClassLoader());
          mapping.setFieldElementClass(fieldElementClass);
        }
 catch (        ClassNotFoundException e) {
        }
      }
      if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
        ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
      }
 else       if (nextClassName.equals(""String_Node_Str"")) {
        ((Field)mapping.getField()).setSchemaType(Constants.QNAME_QNAME);
      }
      desc.addMapping((CoreMapping)mapping);
    }
 else {
      if (nextElement.getJavaTypeName().equals(OBJECT_CLASS_NAME)) {
        CompositeObjectMapping mapping=new XMLCompositeObjectMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        mapping.setXPath(""String_Node_Str"");
        setTypedTextField((Field)mapping.getField());
        desc.addMapping((CoreMapping)mapping);
      }
 else       if (isBinaryData(nextElement.getJavaType())) {
        BinaryDataMapping mapping=new XMLBinaryDataMapping();
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
        mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
        Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,helper.getClassLoader());
        mapping.setAttributeClassification(attributeClassification);
        mapping.setShouldInlineBinaryData(false);
        mapping.setSwaRef(nextElement.isXmlAttachmentRef());
        mapping.setMimeType(nextElement.getXmlMimeType());
        desc.addMapping((CoreMapping)mapping);
      }
 else {
        DirectMapping mapping=new XMLDirectMapping();
        mapping.setNullValueMarshalled(true);
        mapping.setAttributeName(""String_Node_Str"");
        mapping.setXPath(""String_Node_Str"");
        mapping.setSetMethodName(""String_Node_Str"");
        mapping.setGetMethodName(""String_Node_Str"");
        if (nextElement.getDefaultValue() != null) {
          mapping.setNullValue(nextElement.getDefaultValue());
          mapping.getNullPolicy().setNullRepresentedByXsiNil(true);
        }
        if (helper.isBuiltInJavaType(nextElement.getJavaType())) {
          Class attributeClassification=null;
          if (nextElement.getJavaType().isPrimitive()) {
            attributeClassification=XMLConversionManager.getDefaultManager().convertClassNameToClass(attributeTypeName);
          }
 else {
            attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(attributeTypeName,helper.getClassLoader());
          }
          mapping.setAttributeClassification(attributeClassification);
        }
        IsSetNullPolicy nullPolicy=new IsSetNullPolicy(""String_Node_Str"",false,true,XMLNullRepresentationType.ABSENT_NODE);
        mapping.setNullPolicy(nullPolicy);
        if (type != null && type.isEnumerationType()) {
          mapping.setConverter(buildJAXBEnumTypeConverter(mapping,(EnumTypeInfo)type));
        }
        if (nextClassName.equals(""String_Node_Str"") || nextClassName.equals(""String_Node_Str"")) {
          ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
        }
 else         if (nextClassName.equals(""String_Node_Str"")) {
          ((Field)mapping.getField()).setSchemaType(Constants.QNAME_QNAME);
        }
        if (nextElement.getJavaTypeAdapterClass() != null) {
          mapping.setConverter(new XMLJavaTypeConverter(nextElement.getJavaTypeAdapterClass()));
        }
        desc.addMapping((CoreMapping)mapping);
      }
    }
    if (next != null) {
      NamespaceInfo info=getNamespaceInfoForURI(namespaceUri);
      if (info != null) {
        NamespaceResolver resolver=info.getNamespaceResolverForDescriptor();
        String prefix=null;
        if (namespaceUri != Constants.EMPTY_STRING) {
          prefix=resolver.resolveNamespaceURI(namespaceUri);
          if (prefix == null) {
            prefix=getPrefixForNamespace(namespaceUri,resolver);
          }
        }
        desc.setNamespaceResolver(resolver);
        if (nextElement.isXmlRootElement()) {
          desc.setDefaultRootElement(getQualifiedString(prefix,next.getLocalPart()));
        }
 else {
          desc.setDefaultRootElement(""String_Node_Str"");
          desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
          desc.setResultAlwaysXMLRoot(true);
        }
      }
 else {
        if (namespaceUri.equals(""String_Node_Str"")) {
          desc.setDefaultRootElement(next.getLocalPart());
        }
 else {
          NamespaceResolver resolver=new org.eclipse.persistence.oxm.NamespaceResolver();
          String prefix=getPrefixForNamespace(namespaceUri,resolver);
          desc.setNamespaceResolver(resolver);
          if (nextElement.isXmlRootElement()) {
            desc.setDefaultRootElement(getQualifiedString(prefix,next.getLocalPart()));
          }
 else {
            desc.setDefaultRootElement(""String_Node_Str"");
            desc.addRootElement(getQualifiedString(prefix,next.getLocalPart()));
            desc.setResultAlwaysXMLRoot(true);
          }
        }
      }
    }
    project.addDescriptor((CoreDescriptor)desc);
  }
  return generatedClass;
}"
63626,"public void generateDescriptorForJAXBElementSubclass(JavaClass javaClass,CoreProject project,NamespaceResolver nsr){
  String jClassName=javaClass.getQualifiedName();
  TypeInfo info=typeInfo.get(jClassName);
  Descriptor xmlDescriptor=new XMLDescriptor();
  xmlDescriptor.setJavaClassName(jClassName);
  String[] factoryMethodParamTypes=info.getFactoryMethodParamTypes();
  MultiArgInstantiationPolicy policy=new MultiArgInstantiationPolicy();
  policy.useFactoryInstantiationPolicy(info.getObjectFactoryClassName(),info.getFactoryMethodName());
  policy.setParameterTypeNames(factoryMethodParamTypes);
  policy.setDefaultValues(new String[]{null});
  xmlDescriptor.setInstantiationPolicy(policy);
  JavaClass paramClass=helper.getJavaClass(factoryMethodParamTypes[0]);
  boolean isObject=paramClass.getName().equals(""String_Node_Str"");
  if (helper.isBuiltInJavaType(paramClass) && !isObject) {
    if (isBinaryData(paramClass)) {
      BinaryDataMapping mapping=new XMLBinaryDataMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(factoryMethodParamTypes[0],getClass().getClassLoader());
      mapping.setAttributeClassification(attributeClassification);
      mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
      mapping.setShouldInlineBinaryData(false);
      if (mapping.getMimeType() == null) {
        if (areEquals(paramClass,javax.xml.transform.Source.class)) {
          mapping.setMimeTypePolicy(new FixedMimeTypePolicy(""String_Node_Str""));
        }
 else {
          mapping.setMimeTypePolicy(new FixedMimeTypePolicy(""String_Node_Str""));
        }
      }
      xmlDescriptor.addMapping((CoreMapping)mapping);
    }
 else {
      DirectMapping mapping=new XMLDirectMapping();
      mapping.setNullValueMarshalled(true);
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(factoryMethodParamTypes[0],getClass().getClassLoader());
      mapping.setAttributeClassification(attributeClassification);
      xmlDescriptor.addMapping((CoreMapping)mapping);
    }
  }
 else   if (paramClass.isEnum()) {
    EnumTypeInfo enumInfo=(EnumTypeInfo)typeInfo.get(paramClass.getQualifiedName());
    DirectMapping mapping=new XMLDirectMapping();
    mapping.setConverter(buildJAXBEnumTypeConverter(mapping,enumInfo));
    mapping.setNullValueMarshalled(true);
    mapping.setAttributeName(""String_Node_Str"");
    mapping.setGetMethodName(""String_Node_Str"");
    mapping.setSetMethodName(""String_Node_Str"");
    mapping.setXPath(""String_Node_Str"");
    Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(factoryMethodParamTypes[0],getClass().getClassLoader());
    mapping.setAttributeClassification(attributeClassification);
    xmlDescriptor.addMapping((CoreMapping)mapping);
  }
 else {
    CompositeObjectMapping mapping=new XMLCompositeObjectMapping();
    mapping.setAttributeName(""String_Node_Str"");
    mapping.setGetMethodName(""String_Node_Str"");
    mapping.setSetMethodName(""String_Node_Str"");
    mapping.setXPath(""String_Node_Str"");
    if (isObject) {
      mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    }
 else {
      mapping.setReferenceClassName(factoryMethodParamTypes[0]);
    }
    xmlDescriptor.addMapping((CoreMapping)mapping);
  }
  xmlDescriptor.setNamespaceResolver(nsr);
  setSchemaContext(xmlDescriptor,info);
  project.addDescriptor((CoreDescriptor)xmlDescriptor);
  info.setDescriptor(xmlDescriptor);
}","public void generateDescriptorForJAXBElementSubclass(JavaClass javaClass,CoreProject project,NamespaceResolver nsr){
  String jClassName=javaClass.getQualifiedName();
  TypeInfo info=typeInfo.get(jClassName);
  Descriptor xmlDescriptor=new XMLDescriptor();
  xmlDescriptor.setJavaClassName(jClassName);
  String[] factoryMethodParamTypes=info.getFactoryMethodParamTypes();
  MultiArgInstantiationPolicy policy=new MultiArgInstantiationPolicy();
  policy.useFactoryInstantiationPolicy(info.getObjectFactoryClassName(),info.getFactoryMethodName());
  policy.setParameterTypeNames(factoryMethodParamTypes);
  policy.setDefaultValues(new String[]{null});
  xmlDescriptor.setInstantiationPolicy(policy);
  JavaClass paramClass=helper.getJavaClass(factoryMethodParamTypes[0]);
  boolean isObject=paramClass.getName().equals(""String_Node_Str"");
  if (helper.isBuiltInJavaType(paramClass) && !isObject) {
    if (isBinaryData(paramClass)) {
      BinaryDataMapping mapping=new XMLBinaryDataMapping();
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      ((Field)mapping.getField()).setSchemaType(Constants.BASE_64_BINARY_QNAME);
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(factoryMethodParamTypes[0],helper.getClassLoader());
      mapping.setAttributeClassification(attributeClassification);
      mapping.getNullPolicy().setNullRepresentedByEmptyNode(false);
      mapping.setShouldInlineBinaryData(false);
      if (mapping.getMimeType() == null) {
        if (areEquals(paramClass,javax.xml.transform.Source.class)) {
          mapping.setMimeTypePolicy(new FixedMimeTypePolicy(""String_Node_Str""));
        }
 else {
          mapping.setMimeTypePolicy(new FixedMimeTypePolicy(""String_Node_Str""));
        }
      }
      xmlDescriptor.addMapping((CoreMapping)mapping);
    }
 else {
      DirectMapping mapping=new XMLDirectMapping();
      mapping.setNullValueMarshalled(true);
      mapping.setAttributeName(""String_Node_Str"");
      mapping.setGetMethodName(""String_Node_Str"");
      mapping.setSetMethodName(""String_Node_Str"");
      mapping.setXPath(""String_Node_Str"");
      Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(factoryMethodParamTypes[0],helper.getClassLoader());
      mapping.setAttributeClassification(attributeClassification);
      xmlDescriptor.addMapping((CoreMapping)mapping);
    }
  }
 else   if (paramClass.isEnum()) {
    EnumTypeInfo enumInfo=(EnumTypeInfo)typeInfo.get(paramClass.getQualifiedName());
    DirectMapping mapping=new XMLDirectMapping();
    mapping.setConverter(buildJAXBEnumTypeConverter(mapping,enumInfo));
    mapping.setNullValueMarshalled(true);
    mapping.setAttributeName(""String_Node_Str"");
    mapping.setGetMethodName(""String_Node_Str"");
    mapping.setSetMethodName(""String_Node_Str"");
    mapping.setXPath(""String_Node_Str"");
    Class attributeClassification=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(factoryMethodParamTypes[0],helper.getClassLoader());
    mapping.setAttributeClassification(attributeClassification);
    xmlDescriptor.addMapping((CoreMapping)mapping);
  }
 else {
    CompositeObjectMapping mapping=new XMLCompositeObjectMapping();
    mapping.setAttributeName(""String_Node_Str"");
    mapping.setGetMethodName(""String_Node_Str"");
    mapping.setSetMethodName(""String_Node_Str"");
    mapping.setXPath(""String_Node_Str"");
    if (isObject) {
      mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    }
 else {
      mapping.setReferenceClassName(factoryMethodParamTypes[0]);
    }
    xmlDescriptor.addMapping((CoreMapping)mapping);
  }
  xmlDescriptor.setNamespaceResolver(nsr);
  setSchemaContext(xmlDescriptor,info);
  project.addDescriptor((CoreDescriptor)xmlDescriptor);
  info.setDescriptor(xmlDescriptor);
}"
63627,"public XmlSeeAlsoTest(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  setControlJSON(JSON_RESOURCE);
  Class[] classes=new Class[1];
  classes[0]=Animal.class;
  setClasses(classes);
}","public XmlSeeAlsoTest(String name) throws Exception {
  super(name);
  setControlDocument(XML_RESOURCE);
  setControlJSON(JSON_RESOURCE);
  Class[] classes=new Class[1];
  classes[0]=Organism.class;
  setClasses(classes);
}"
63628,"/** 
 * Process any additional classes (i.e. inner classes, @XmlSeeAlso, etc.) for a given set of JavaClasses, then completebuilding all of the required TypeInfo objects. This method is typically called after init and preBuildTypeInfo have been called.
 * @param javaClasses
 * @return updated array of JavaClasses, made up of the original classesplus any additional ones
 */
public JavaClass[] postBuildTypeInfo(JavaClass[] javaClasses){
  if (javaClasses.length == 0) {
    return javaClasses;
  }
  javaClasses=processAdditionalClasses(javaClasses);
  preBuildTypeInfo(javaClasses);
  buildTypeInfo(javaClasses);
  updateGlobalElements(javaClasses);
  return javaClasses;
}","/** 
 * Process any additional classes (i.e. inner classes, @XmlSeeAlso, etc.) for a given set of JavaClasses, then completebuilding all of the required TypeInfo objects. This method is typically called after init and preBuildTypeInfo have been called.
 * @param javaClasses
 * @return updated array of JavaClasses, made up of the original classesplus any additional ones
 */
public JavaClass[] postBuildTypeInfo(JavaClass[] javaClasses){
  if (javaClasses.length == 0) {
    return javaClasses;
  }
  ArrayList<JavaClass> originalList=new ArrayList<JavaClass>(javaClasses.length);
  for (  JavaClass next : javaClasses) {
    originalList.add(next);
  }
  javaClasses=processAdditionalClasses(javaClasses);
  preBuildTypeInfo(javaClasses);
  buildTypeInfo(javaClasses);
  updateGlobalElements(javaClasses);
  if (javaClasses.length > originalList.size()) {
    ArrayList<JavaClass> newClasses=new ArrayList(javaClasses.length - originalList.size());
    for (    JavaClass next : javaClasses) {
      if (!(originalList.contains(next))) {
        newClasses.add(next);
      }
    }
    postBuildTypeInfo(newClasses.toArray(new JavaClass[newClasses.size()]));
  }
  return javaClasses;
}"
63629,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.get(nodes.size() - 1);
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
      processNamespacesForText(text.getTextContent(),endedElement);
    }
    owningRecord.getXMLReader().setContentHandler(owningRecord);
    owningRecord.endElement(namespaceURI,localName,qName);
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  if (super.nodes.size() == 2) {
    Element endedElement=(Element)nodes.get(nodes.size() - 1);
    if (stringBuffer.length() > 0) {
      Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
      endedElement.appendChild(text);
      stringBuffer.reset();
      processNamespacesForText(text.getTextContent(),endedElement);
    }
    while (owningRecord.isSelfRecord() && owningRecord.getParentRecord() != null) {
      owningRecord=owningRecord.getParentRecord();
    }
    owningRecord.getXMLReader().setContentHandler(owningRecord);
    owningRecord.endElement(namespaceURI,localName,qName);
  }
 else {
    super.endElement(namespaceURI,localName,qName);
  }
}"
63630,"private void addSimpleAttribute(List attributes,String uri,String attributeLocalName,Tree childValueTree){
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
      String stringValue=JSONReader.string(childValueTree.getChild(0).getText());
      attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue));
      break;
    }
case JSONLexer.NUMBER:
{
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
    break;
  }
case JSONLexer.TRUE:
{
  attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
  break;
}
case JSONLexer.FALSE:
{
attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
break;
}
case JSONLexer.NULL:
{
attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,Constants.EMPTY_STRING));
break;
}
}
}","private void addSimpleAttribute(List attributes,String uri,String attributeLocalName,Tree childValueTree){
switch (childValueTree.getType()) {
case JSONLexer.STRING:
{
      String stringValue=JSONReader.string(childValueTree.getChild(0).getText());
      attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue));
      break;
    }
case JSONLexer.NUMBER:
{
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,childValueTree.getChild(0).getText()));
    break;
  }
case JSONLexer.TRUE:
{
  attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
  break;
}
case JSONLexer.FALSE:
{
attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
break;
}
case JSONLexer.NULL:
{
break;
}
}
}"
63631,"private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
XPathFragment currentFragment=new XPathFragment();
currentFragment.setLocalName(parentLocalName);
currentFragment.setNamespaceURI(uri);
currentFragment.setNamespaceAware(namespaceAware);
XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
if (groupingXPathNode != null) {
  if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
    groupingXPathFragment=groupingXPathNode.getXPathFragment();
    contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    itemXPathFragment=itemXPathNode.getXPathFragment();
  }
 else   if (groupingXPathNode.getUnmarshalNodeValue() == null) {
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    if (itemXPathNode != null) {
      if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
        groupingXPathFragment=groupingXPathNode.getXPathFragment();
        contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
        itemXPathFragment=itemXPathNode.getXPathFragment();
      }
    }
  }
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
          NodeValue nv=((UnmarshalRecord)contentHandler).getAttributeChildNodeValue(uri,localName);
          if (attributePrefix == null && nv != null) {
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
XPathFragment currentFragment=new XPathFragment();
currentFragment.setLocalName(parentLocalName);
currentFragment.setNamespaceURI(uri);
currentFragment.setNamespaceAware(namespaceAware);
XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
if (groupingXPathNode != null) {
  if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
    groupingXPathFragment=groupingXPathNode.getXPathFragment();
    contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    itemXPathFragment=itemXPathNode.getXPathFragment();
  }
 else   if (groupingXPathNode.getUnmarshalNodeValue() == null) {
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    if (itemXPathNode != null) {
      if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
        groupingXPathFragment=groupingXPathNode.getXPathFragment();
        contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
        itemXPathFragment=itemXPathNode.getXPathFragment();
      }
    }
  }
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
63632,"private void addSimpleAttribute(List attributes,String uri,String attributeLocalName,JsonValue childValue){
  if (childValue.getValueType() == ValueType.STRING) {
    String stringValue=((JsonString)childValue).getString();
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue));
  }
 else   if (childValue.getValueType() == ValueType.NUMBER) {
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,((JsonNumber)childValue).toString()));
  }
 else   if (childValue.getValueType() == ValueType.NULL) {
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,Constants.EMPTY_STRING));
  }
 else   if (childValue.getValueType() == ValueType.FALSE) {
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
  }
 else   if (childValue.getValueType() == ValueType.TRUE) {
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
  }
}","private void addSimpleAttribute(List attributes,String uri,String attributeLocalName,JsonValue childValue){
  if (childValue.getValueType() == ValueType.STRING) {
    String stringValue=((JsonString)childValue).getString();
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,stringValue));
  }
 else   if (childValue.getValueType() == ValueType.NUMBER) {
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,((JsonNumber)childValue).toString()));
  }
 else   if (childValue.getValueType() == ValueType.NULL) {
  }
 else   if (childValue.getValueType() == ValueType.FALSE) {
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,FALSE));
  }
 else   if (childValue.getValueType() == ValueType.TRUE) {
    attributes.add(new Attribute(uri,attributeLocalName,attributeLocalName,TRUE));
  }
}"
63633,"private void parsePair(String name,JsonValue jsonValue) throws SAXException {
  if (jsonValue == null) {
    return;
  }
  ValueType valueType=jsonValue.getValueType();
  if (valueType == ValueType.ARRAY) {
    JsonArray jsonArray=(JsonArray)jsonValue;
    String parentLocalName=name;
    if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
      return;
    }
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (parentLocalName.length() > 2) {
        int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
        if (nsIndex > -1) {
          String prefix=parentLocalName.substring(0,nsIndex);
          uri=namespaces.resolveNamespacePrefix(prefix);
        }
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          parentLocalName=parentLocalName.substring(nsIndex + 1);
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    boolean isTextValue=isTextValue(parentLocalName);
    int arraySize=jsonArray.size();
    if (arraySize == 0) {
      if (contentHandler instanceof UnmarshalRecord) {
        UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
        XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
        if (node != null) {
          NodeValue nv=node.getNodeValue();
          if (nv == null && node.getTextNode() != null) {
            nv=node.getTextNode().getUnmarshalNodeValue();
          }
          if (nv != null && nv.isContainerValue()) {
            ur.getContainerInstance(((ContainerValue)nv));
          }
        }
      }
    }
    startCollection();
    XPathFragment groupingXPathFragment=null;
    XPathFragment itemXPathFragment=null;
    if (contentHandler instanceof UnmarshalRecord) {
      UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
      if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
        XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
        if (null != unmarshalRecordXPathNode) {
          XPathFragment currentFragment=new XPathFragment();
          currentFragment.setLocalName(parentLocalName);
          currentFragment.setNamespaceURI(uri);
          currentFragment.setNamespaceAware(namespaceAware);
          XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
          if (groupingXPathNode != null) {
            if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
              groupingXPathFragment=groupingXPathNode.getXPathFragment();
              contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              itemXPathFragment=itemXPathNode.getXPathFragment();
            }
 else             if (groupingXPathNode.getUnmarshalNodeValue() == null) {
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              if (itemXPathNode != null) {
                if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
                  groupingXPathFragment=groupingXPathNode.getXPathFragment();
                  contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
                  itemXPathFragment=itemXPathNode.getXPathFragment();
                }
              }
            }
          }
        }
      }
      for (int i=0; i < arraySize; i++) {
        JsonValue nextArrayValue=jsonArray.get(i);
        if (nextArrayValue.getValueType() == ValueType.NULL) {
          ((UnmarshalRecord)contentHandler).setNil(true);
        }
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
 else {
            contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
        }
        parseValue(nextArrayValue);
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.endElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
          }
 else {
            contentHandler.endElement(uri,parentLocalName,parentLocalName);
          }
        }
      }
    }
    if (null != groupingXPathFragment) {
      contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
    }
    endCollection();
  }
 else {
    String qualifiedName=name;
    if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
      return;
    }
    String localName=qualifiedName;
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (localName.length() > 2) {
        int nsIndex=localName.indexOf(namespaceSeparator,1);
        String prefix=Constants.EMPTY_STRING;
        if (nsIndex > -1) {
          prefix=localName.substring(0,nsIndex);
        }
        uri=namespaces.resolveNamespacePrefix(prefix);
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          localName=localName.substring(nsIndex + 1);
        }
        if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
          return;
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
        return;
      }
      if (textWrapper != null && textWrapper.equals(localName)) {
        parseValue(jsonValue);
        return;
      }
    }
 else     if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
        return;
      }
      boolean isTextValue=isTextValue(localName);
      if (isTextValue) {
        parseValue(jsonValue);
        return;
      }
    }
    if (jsonValue != null && jsonValue.getValueType() == valueType.NULL) {
      contentHandler.setNil(true);
    }
    contentHandler.startElement(uri,localName,localName,attributes.setValue(jsonValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
    parseValue(jsonValue);
    contentHandler.endElement(uri,localName,localName);
  }
}","private void parsePair(String name,JsonValue jsonValue) throws SAXException {
  if (jsonValue == null) {
    return;
  }
  ValueType valueType=jsonValue.getValueType();
  if (valueType == ValueType.ARRAY) {
    JsonArray jsonArray=(JsonArray)jsonValue;
    String parentLocalName=name;
    if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
      return;
    }
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (parentLocalName.length() > 2) {
        int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
        if (nsIndex > -1) {
          String prefix=parentLocalName.substring(0,nsIndex);
          uri=namespaces.resolveNamespacePrefix(prefix);
        }
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          parentLocalName=parentLocalName.substring(nsIndex + 1);
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    boolean isTextValue=isTextValue(parentLocalName);
    int arraySize=jsonArray.size();
    if (arraySize == 0) {
      if (contentHandler instanceof UnmarshalRecord) {
        UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
        XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
        if (node != null) {
          NodeValue nv=node.getNodeValue();
          if (nv == null && node.getTextNode() != null) {
            nv=node.getTextNode().getUnmarshalNodeValue();
          }
          if (nv != null && nv.isContainerValue()) {
            ur.getContainerInstance(((ContainerValue)nv));
          }
        }
      }
    }
    startCollection();
    XPathFragment groupingXPathFragment=null;
    XPathFragment itemXPathFragment=null;
    if (contentHandler instanceof UnmarshalRecord) {
      UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
      if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
        XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
        if (null != unmarshalRecordXPathNode) {
          XPathFragment currentFragment=new XPathFragment();
          currentFragment.setLocalName(parentLocalName);
          currentFragment.setNamespaceURI(uri);
          currentFragment.setNamespaceAware(namespaceAware);
          XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
          if (groupingXPathNode != null) {
            if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
              groupingXPathFragment=groupingXPathNode.getXPathFragment();
              contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              itemXPathFragment=itemXPathNode.getXPathFragment();
            }
 else             if (groupingXPathNode.getUnmarshalNodeValue() == null) {
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              if (itemXPathNode != null) {
                if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
                  groupingXPathFragment=groupingXPathNode.getXPathFragment();
                  contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
                  itemXPathFragment=itemXPathNode.getXPathFragment();
                }
              }
            }
          }
        }
      }
      for (int i=0; i < arraySize; i++) {
        JsonValue nextArrayValue=jsonArray.get(i);
        if (nextArrayValue.getValueType() == ValueType.NULL) {
          ((UnmarshalRecord)contentHandler).setNil(true);
        }
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
 else {
            contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
        }
        parseValue(nextArrayValue);
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.endElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
          }
 else {
            contentHandler.endElement(uri,parentLocalName,parentLocalName);
          }
        }
      }
    }
    if (null != groupingXPathFragment) {
      contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
    }
    endCollection();
  }
 else {
    String qualifiedName=name;
    if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
      return;
    }
    String localName=qualifiedName;
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (localName.length() > 2) {
        int nsIndex=localName.indexOf(namespaceSeparator,1);
        String prefix=Constants.EMPTY_STRING;
        if (nsIndex > -1) {
          prefix=localName.substring(0,nsIndex);
        }
        uri=namespaces.resolveNamespacePrefix(prefix);
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          localName=localName.substring(nsIndex + 1);
        }
        if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
          return;
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
        return;
      }
      if (textWrapper != null && textWrapper.equals(localName)) {
        parseValue(jsonValue);
        return;
      }
    }
 else     if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
        return;
      }
      boolean isTextValue=isTextValue(localName);
      if (isTextValue) {
        parseValue(jsonValue);
        return;
      }
      NodeValue nv=((UnmarshalRecord)contentHandler).getAttributeChildNodeValue(uri,localName);
      if (attributePrefix == null && nv != null) {
        return;
      }
    }
    if (jsonValue != null && jsonValue.getValueType() == valueType.NULL) {
      contentHandler.setNil(true);
    }
    contentHandler.startElement(uri,localName,localName,attributes.setValue(jsonValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
    parseValue(jsonValue);
    contentHandler.endElement(uri,localName,localName);
  }
}"
63634,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  objectValue=xmlCompositeObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.hasAttribute) {
    ObjectBuilder tob=(ObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, childrenLength=children.getLength(); i < childrenLength; i++) {
        Node next=children.item(i);
        short nodeType=next.getNodeType();
        if (nodeType == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
 else         if (nodeType == Node.TEXT_NODE) {
          marshalRecord.characters(((Text)next).getNodeValue());
          return true;
        }
      }
      return false;
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  Descriptor descriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(objectValue.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=objectValue.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    if (!(isSelfFragment || xPathFragment.nameIsText)) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=null;
    if (!marshalRecord.hasEqualNamespaceResolvers()) {
      extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    }
    if (!isSelfFragment) {
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(Field)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshalRecord.getMarshaller(),xPathFragment);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    marshalRecord.popAttributeGroup();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeObjectMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(objectValue.getClass().getName());
    }
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaTypeForValue(objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  objectValue=xmlCompositeObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.hasAttribute) {
    ObjectBuilder tob=(ObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      if (fieldValue != null) {
        marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      }
 else {
        XMLMarshalException ex=XMLMarshalException.nullValueNotAllowed(this.xmlCompositeObjectMapping.getAttributeName(),this.xmlCompositeObjectMapping.getDescriptor().getJavaClass().getName());
        try {
          marshalRecord.getMarshaller().getErrorHandler().warning(new SAXParseException(null,null,ex));
        }
 catch (        Exception saxException) {
          throw ex;
        }
      }
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, childrenLength=children.getLength(); i < childrenLength; i++) {
        Node next=children.item(i);
        short nodeType=next.getNodeType();
        if (nodeType == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
 else         if (nodeType == Node.TEXT_NODE) {
          marshalRecord.characters(((Text)next).getNodeValue());
          return true;
        }
      }
      return false;
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  Descriptor descriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(objectValue.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=objectValue.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    if (!(isSelfFragment || xPathFragment.nameIsText)) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=null;
    if (!marshalRecord.hasEqualNamespaceResolvers()) {
      extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    }
    if (!isSelfFragment) {
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(Field)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshalRecord.getMarshaller(),xPathFragment);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    marshalRecord.popAttributeGroup();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeObjectMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(objectValue.getClass().getName());
    }
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaTypeForValue(objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
63635,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    processNamespacesForText(text.getTextContent(),(Element)parent);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + Constants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(Constants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + Constants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && atts.getQName(x).startsWith(javax.xml.XMLConstants.XMLNS_ATTRIBUTE + Constants.COLON)) {
      attributeNamespaceURI=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
    }
    String value=atts.getValue(x);
    if (attributeNamespaceURI == null) {
      element.setAttribute(atts.getQName(x),value);
    }
 else {
      element.setAttributeNS(attributeNamespaceURI,atts.getQName(x),value == null ? Constants.EMPTY_STRING : value);
    }
    if (value != null) {
      processNamespacesForText(value,element);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  boolean bufferContainsOnlyWhitespace=stringBuffer.toString().trim().length() == 0;
  if (bufferContainsOnlyWhitespace) {
    stringBuffer.reset();
  }
  if ((stringBuffer.length() > 0) && !(nodes.size() == 1)) {
    Text text=getInitializedDocument().createTextNode(stringBuffer.toString());
    Node parent=this.nodes.get(nodes.size() - 1);
    parent.appendChild(text);
    processNamespacesForText(text.getTextContent(),(Element)parent);
    stringBuffer.reset();
  }
  if (null != namespaceURI && namespaceURI.length() == 0) {
    namespaceURI=null;
  }
  if (qName == null) {
    qName=localName;
    if (namespaceURI != null) {
      if (owningRecord != null) {
        String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
        if (prefix != null && prefix.length() > 0) {
          qName=prefix + Constants.COLON + qName;
        }
      }
    }
  }
  int qNameColonIndex=qName.indexOf(Constants.COLON);
  if ((namespaceURI != null) && (qNameColonIndex == -1)) {
    String prefix=owningRecord.resolveNamespaceUri(namespaceURI);
    if (prefix != null && prefix.length() > 0) {
      qName=prefix + Constants.COLON + qName;
      qNameColonIndex=prefix.length();
    }
  }
  Element element=getInitializedDocument().createElementNS(namespaceURI,qName);
  Node parentNode=nodes.get(nodes.size() - 1);
  appendChildNode(parentNode,element);
  nodes.add(element);
  if (qNameColonIndex > -1) {
    String prefix=qName.substring(0,qNameColonIndex);
    String parentUri=null;
    if (element.getParentNode() != null) {
      parentUri=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element.getParentNode(),prefix);
    }
    if ((parentUri == null) || parentUri.length() == 0) {
      startPrefixMapping(prefix,namespaceURI);
    }
  }
  if (null != namespaceDeclarations) {
    Iterator namespaces=namespaceDeclarations.entrySet().iterator();
    while (namespaces.hasNext()) {
      Map.Entry entry=(Map.Entry)namespaces.next();
      addNamespaceDeclaration(element,(String)entry.getKey(),(String)entry.getValue());
    }
    namespaceDeclarations=null;
  }
  int numberOfAttributes=atts.getLength();
  String attributeNamespaceURI, attributeQName, attributeValue;
  for (int x=0; x < numberOfAttributes; x++) {
    attributeNamespaceURI=atts.getURI(x);
    attributeQName=atts.getQName(x);
    attributeValue=atts.getValue(x);
    if (null != attributeNamespaceURI && attributeNamespaceURI.length() == 0) {
      attributeNamespaceURI=null;
    }
    if (attributeNamespaceURI == null && attributeQName.startsWith(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
      attributeNamespaceURI=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
    }
    element.setAttributeNS(attributeNamespaceURI,attributeQName,attributeValue == null ? Constants.EMPTY_STRING : attributeValue);
    if (attributeValue != null) {
      processNamespacesForText(attributeValue,element);
    }
  }
}"
63636,"private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
          NodeValue nv=((UnmarshalRecord)contentHandler).getAttributeChildNodeValue(uri,localName);
          if (attributePrefix == null && nv != null) {
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
XPathFragment currentFragment=new XPathFragment();
currentFragment.setLocalName(parentLocalName);
currentFragment.setNamespaceURI(uri);
currentFragment.setNamespaceAware(namespaceAware);
XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
if (groupingXPathNode != null) {
  if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
    groupingXPathFragment=groupingXPathNode.getXPathFragment();
    contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    itemXPathFragment=itemXPathNode.getXPathFragment();
  }
 else   if (groupingXPathNode.getUnmarshalNodeValue() == null) {
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    if (itemXPathNode != null) {
      if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
        groupingXPathFragment=groupingXPathNode.getXPathFragment();
        contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
        itemXPathFragment=itemXPathNode.getXPathFragment();
      }
    }
  }
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
          NodeValue nv=((UnmarshalRecord)contentHandler).getAttributeChildNodeValue(uri,localName);
          if (attributePrefix == null && nv != null) {
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=false;
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
isTextValue=isTextValue(parentLocalName);
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
isTextValue(parentLocalName);
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
XPathFragment currentFragment=new XPathFragment();
currentFragment.setLocalName(parentLocalName);
currentFragment.setNamespaceURI(uri);
currentFragment.setNamespaceAware(namespaceAware);
XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
if (groupingXPathNode != null) {
  if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
    groupingXPathFragment=groupingXPathNode.getXPathFragment();
    contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    itemXPathFragment=itemXPathNode.getXPathFragment();
  }
 else   if (groupingXPathNode.getUnmarshalNodeValue() == null) {
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    if (itemXPathNode != null) {
      if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
        groupingXPathFragment=groupingXPathNode.getXPathFragment();
        contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
        itemXPathFragment=itemXPathNode.getXPathFragment();
      }
    }
  }
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
63637,"private void parsePair(String name,JsonValue jsonValue) throws SAXException {
  if (jsonValue == null) {
    return;
  }
  ValueType valueType=jsonValue.getValueType();
  if (valueType == ValueType.ARRAY) {
    JsonArray jsonArray=(JsonArray)jsonValue;
    String parentLocalName=name;
    if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
      return;
    }
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (parentLocalName.length() > 2) {
        int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
        if (nsIndex > -1) {
          String prefix=parentLocalName.substring(0,nsIndex);
          uri=namespaces.resolveNamespacePrefix(prefix);
        }
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          parentLocalName=parentLocalName.substring(nsIndex + 1);
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    boolean isTextValue=isTextValue(parentLocalName);
    int arraySize=jsonArray.size();
    if (arraySize == 0) {
      if (contentHandler instanceof UnmarshalRecord) {
        UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
        XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
        if (node != null) {
          NodeValue nv=node.getNodeValue();
          if (nv == null && node.getTextNode() != null) {
            nv=node.getTextNode().getUnmarshalNodeValue();
          }
          if (nv != null && nv.isContainerValue()) {
            ur.getContainerInstance(((ContainerValue)nv));
          }
        }
      }
    }
    startCollection();
    XPathFragment groupingXPathFragment=null;
    XPathFragment itemXPathFragment=null;
    if (contentHandler instanceof UnmarshalRecord) {
      UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
      if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
        XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
        if (null != unmarshalRecordXPathNode) {
          XPathFragment currentFragment=new XPathFragment();
          currentFragment.setLocalName(parentLocalName);
          currentFragment.setNamespaceURI(uri);
          currentFragment.setNamespaceAware(namespaceAware);
          XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
          if (groupingXPathNode != null) {
            if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
              groupingXPathFragment=groupingXPathNode.getXPathFragment();
              contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              itemXPathFragment=itemXPathNode.getXPathFragment();
            }
 else             if (groupingXPathNode.getUnmarshalNodeValue() == null) {
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              if (itemXPathNode != null) {
                if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
                  groupingXPathFragment=groupingXPathNode.getXPathFragment();
                  contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
                  itemXPathFragment=itemXPathNode.getXPathFragment();
                }
              }
            }
          }
        }
      }
      for (int i=0; i < arraySize; i++) {
        JsonValue nextArrayValue=jsonArray.get(i);
        if (nextArrayValue.getValueType() == ValueType.NULL) {
          ((UnmarshalRecord)contentHandler).setNil(true);
        }
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
 else {
            contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
        }
        parseValue(nextArrayValue);
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.endElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
          }
 else {
            contentHandler.endElement(uri,parentLocalName,parentLocalName);
          }
        }
      }
    }
    if (null != groupingXPathFragment) {
      contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
    }
    endCollection();
  }
 else {
    String qualifiedName=name;
    if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
      return;
    }
    String localName=qualifiedName;
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (localName.length() > 2) {
        int nsIndex=localName.indexOf(namespaceSeparator,1);
        String prefix=Constants.EMPTY_STRING;
        if (nsIndex > -1) {
          prefix=localName.substring(0,nsIndex);
        }
        uri=namespaces.resolveNamespacePrefix(prefix);
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          localName=localName.substring(nsIndex + 1);
        }
        if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
          return;
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
        return;
      }
      if (textWrapper != null && textWrapper.equals(localName)) {
        parseValue(jsonValue);
        return;
      }
    }
 else     if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
        return;
      }
      boolean isTextValue=isTextValue(localName);
      if (isTextValue) {
        parseValue(jsonValue);
        return;
      }
      NodeValue nv=((UnmarshalRecord)contentHandler).getAttributeChildNodeValue(uri,localName);
      if (attributePrefix == null && nv != null) {
        return;
      }
    }
    if (jsonValue != null && jsonValue.getValueType() == valueType.NULL) {
      contentHandler.setNil(true);
    }
    contentHandler.startElement(uri,localName,localName,attributes.setValue(jsonValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
    parseValue(jsonValue);
    contentHandler.endElement(uri,localName,localName);
  }
}","private void parsePair(String name,JsonValue jsonValue) throws SAXException {
  if (jsonValue == null) {
    return;
  }
  ValueType valueType=jsonValue.getValueType();
  if (valueType == ValueType.ARRAY) {
    JsonArray jsonArray=(JsonArray)jsonValue;
    String parentLocalName=name;
    if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
      return;
    }
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (parentLocalName.length() > 2) {
        int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
        if (nsIndex > -1) {
          String prefix=parentLocalName.substring(0,nsIndex);
          uri=namespaces.resolveNamespacePrefix(prefix);
        }
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          parentLocalName=parentLocalName.substring(nsIndex + 1);
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    boolean isTextValue=false;
    int arraySize=jsonArray.size();
    if (arraySize == 0) {
      if (contentHandler instanceof UnmarshalRecord) {
        isTextValue=isTextValue(parentLocalName);
        UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
        XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
        if (node != null) {
          NodeValue nv=node.getNodeValue();
          if (nv == null && node.getTextNode() != null) {
            nv=node.getTextNode().getUnmarshalNodeValue();
          }
          if (nv != null && nv.isContainerValue()) {
            ur.getContainerInstance(((ContainerValue)nv));
          }
        }
      }
    }
    startCollection();
    XPathFragment groupingXPathFragment=null;
    XPathFragment itemXPathFragment=null;
    if (contentHandler instanceof UnmarshalRecord) {
      isTextValue=isTextValue(parentLocalName);
      UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
      if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
        XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
        if (null != unmarshalRecordXPathNode) {
          XPathFragment currentFragment=new XPathFragment();
          currentFragment.setLocalName(parentLocalName);
          currentFragment.setNamespaceURI(uri);
          currentFragment.setNamespaceAware(namespaceAware);
          XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
          if (groupingXPathNode != null) {
            if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
              groupingXPathFragment=groupingXPathNode.getXPathFragment();
              contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              itemXPathFragment=itemXPathNode.getXPathFragment();
            }
 else             if (groupingXPathNode.getUnmarshalNodeValue() == null) {
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              if (itemXPathNode != null) {
                if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
                  groupingXPathFragment=groupingXPathNode.getXPathFragment();
                  contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
                  itemXPathFragment=itemXPathNode.getXPathFragment();
                }
              }
            }
          }
        }
      }
      for (int i=0; i < arraySize; i++) {
        JsonValue nextArrayValue=jsonArray.get(i);
        if (nextArrayValue.getValueType() == ValueType.NULL) {
          ((UnmarshalRecord)contentHandler).setNil(true);
        }
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
 else {
            contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
        }
        parseValue(nextArrayValue);
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.endElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
          }
 else {
            contentHandler.endElement(uri,parentLocalName,parentLocalName);
          }
        }
      }
    }
    if (null != groupingXPathFragment) {
      contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
    }
    endCollection();
  }
 else {
    String qualifiedName=name;
    if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
      return;
    }
    String localName=qualifiedName;
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (localName.length() > 2) {
        int nsIndex=localName.indexOf(namespaceSeparator,1);
        String prefix=Constants.EMPTY_STRING;
        if (nsIndex > -1) {
          prefix=localName.substring(0,nsIndex);
        }
        uri=namespaces.resolveNamespacePrefix(prefix);
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          localName=localName.substring(nsIndex + 1);
        }
        if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
          return;
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
        return;
      }
      if (textWrapper != null && textWrapper.equals(localName)) {
        parseValue(jsonValue);
        return;
      }
    }
 else     if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
        return;
      }
      boolean isTextValue=isTextValue(localName);
      if (isTextValue) {
        parseValue(jsonValue);
        return;
      }
      NodeValue nv=((UnmarshalRecord)contentHandler).getAttributeChildNodeValue(uri,localName);
      if (attributePrefix == null && nv != null) {
        return;
      }
    }
    if (jsonValue != null && jsonValue.getValueType() == valueType.NULL) {
      contentHandler.setNil(true);
    }
    contentHandler.startElement(uri,localName,localName,attributes.setValue(jsonValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
    parseValue(jsonValue);
    contentHandler.endElement(uri,localName,localName);
  }
}"
63638,"private String getXPathForProperty(SDOProperty prop,boolean removeText){
  if ((prop).getXmlMapping() != null) {
    String xpath=prop.getXmlMapping().getField().getName();
    if (removeText && xpath.endsWith(""String_Node_Str"")) {
      xpath=xpath.substring(0,xpath.length() - 7);
    }
    return xpath;
  }
 else {
    String name=prop.getName();
    if (prop.isOpenContent()) {
      String uri=prop.getUri();
      if (uri != null) {
        String prefix=typeHelper.getNamespaceResolver().resolveNamespaceURI(uri);
        if ((prefix != null) && !prefix.equals(SDOConstants.EMPTY_STRING)) {
          return prefix + XMLConstants.COLON + name;
        }
      }
    }
    return name;
  }
}","private String getXPathForProperty(SDOProperty prop,boolean removeText,NamespaceResolver namespaceResolver){
  if ((prop).getXmlMapping() != null) {
    String xpath=prop.getXmlMapping().getField().getName();
    if (removeText && xpath.endsWith(""String_Node_Str"")) {
      xpath=xpath.substring(0,xpath.length() - 7);
    }
    return xpath;
  }
 else {
    String name=prop.getName();
    if (prop.isOpenContent()) {
      String uri=prop.getUri();
      if (uri != null) {
        String prefix=namespaceResolver.resolveNamespaceURI(uri);
        if ((prefix != null) && !prefix.equals(SDOConstants.EMPTY_STRING)) {
          return prefix + XMLConstants.COLON + name;
        }
      }
    }
    return name;
  }
}"
63639,"private void marshalNilAttribute(SDOProperty property,DOMRecord row){
  NamespaceResolver resolver;
  if (this.resolver == null) {
    resolver=typeHelper.getNamespaceResolver();
  }
 else {
    resolver=this.resolver;
  }
  String xsiPrefix=resolver.resolveNamespaceURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI);
  if ((xsiPrefix == null) || xsiPrefix.equals(SDOConstants.EMPTY_STRING)) {
    this.resolver=new NamespaceResolver();
    resolver=this.resolver;
    copyNamespaces(typeHelper.getNamespaceResolver(),resolver);
    xsiPrefix=resolver.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    resolver.put(xsiPrefix,javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI);
  }
  String xPath=getXPathForProperty(property,true);
  xPath=xPath + ""String_Node_Str"" + xsiPrefix+ XMLConstants.COLON+ XMLConstants.SCHEMA_NIL_ATTRIBUTE;
  XMLField field=new XMLField(xPath);
  field.setNamespaceResolver(resolver);
  row.put(field,XMLConstants.BOOLEAN_STRING_TRUE);
}","private void marshalNilAttribute(SDOProperty property,DOMRecord row){
  NamespaceResolver resolver=null;
  if (property.getContainingType() != null) {
    resolver=property.getContainingType().getXmlDescriptor().getNamespaceResolver();
  }
  if (null == resolver) {
    resolver=typeHelper.getNamespaceResolver();
  }
  String xsiPrefix=resolver.resolveNamespaceURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI);
  if ((xsiPrefix == null) || xsiPrefix.equals(SDOConstants.EMPTY_STRING)) {
    NamespaceResolver nsResolverWithXsi=new NamespaceResolver();
    copyNamespaces(resolver,nsResolverWithXsi);
    resolver=nsResolverWithXsi;
    xsiPrefix=resolver.generatePrefix(XMLConstants.SCHEMA_INSTANCE_PREFIX);
    resolver.put(xsiPrefix,javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI);
  }
  String xPath=getXPathForProperty(property,true,resolver);
  xPath=xPath + ""String_Node_Str"" + xsiPrefix+ XMLConstants.COLON+ XMLConstants.SCHEMA_NIL_ATTRIBUTE;
  XMLField field=new XMLField(xPath);
  field.setNamespaceResolver(resolver);
  row.put(field,XMLConstants.BOOLEAN_STRING_TRUE);
}"
63640,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  int size=marshalRecord.getCycleDetectionStack().size();
  if ((isInverseReference || xmlCompositeCollectionMapping.getInverseReferenceMapping() != null) && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    if (cp.contains(owner,collection,session)) {
      return false;
    }
  }
  marshalRecord.startCollection();
  iterator=cp.iteratorFor(collection);
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  int size=marshalRecord.getCycleDetectionStack().size();
  if ((isInverseReference || xmlCompositeCollectionMapping.getInverseReferenceMapping() != null) && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    try {
      if (cp.contains(owner,collection,session)) {
        return false;
      }
    }
 catch (    ClassCastException e) {
    }
  }
  marshalRecord.startCollection();
  iterator=cp.iteratorFor(collection);
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
63641,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars,boolean isAttribute,OutputStream os){
  if (escapeChars) {
    CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
    if (escapeHandler != null) {
      try {
        CharArrayWriter out=new CharArrayWriter();
        escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,out);
        byte[] bytes=out.toString().getBytes();
        outputStreamWrite(bytes);
        out.close();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
  }
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)),os);
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)),os);
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)),os);
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)),os);
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)),os);
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP,os);
            break;
          }
case '<':
{
          outputStreamWrite(LT,os);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT,os);
        break;
      }
default :
    outputStreamWrite((byte)character,os);
}
}
 else {
outputStreamWrite((byte)character,os);
}
}
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean escapeChars,boolean isAttribute,OutputStream os){
  if (escapeChars) {
    CharacterEscapeHandler escapeHandler=marshaller.getCharacterEscapeHandler();
    if (escapeHandler != null) {
      try {
        CharArrayWriter out=new CharArrayWriter();
        escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,out);
        byte[] bytes=out.toString().getBytes();
        outputStreamWrite(bytes);
        out.close();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
  }
  for (int x=0, length=value.length(); x < length; x++) {
    final char character=value.charAt(x);
    if (character > 0x7F) {
      if (character > 0x7FF) {
        if ((character >= Character.MIN_HIGH_SURROGATE) && (character <= Character.MAX_LOW_SURROGATE)) {
          int uc=(((character & 0x3ff) << 10) | (value.charAt(++x) & 0x3ff)) + 0x10000;
          outputStreamWrite((byte)(0xF0 | ((uc >> 18))),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 12) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 | ((uc >> 6) & 0x3F)),os);
          outputStreamWrite((byte)(0x80 + (uc & 0x3F)),os);
          continue;
        }
 else {
          outputStreamWrite((byte)(0xE0 + (character >> 12)),os);
        }
        outputStreamWrite((byte)(0x80 + ((character >> 6) & 0x3F)),os);
      }
 else {
        outputStreamWrite((byte)(0xC0 + (character >> 6)),os);
      }
      outputStreamWrite((byte)(0x80 + (character & 0x3F)),os);
    }
 else {
      if (escapeChars) {
switch (character) {
case '&':
{
            outputStreamWrite(AMP,os);
            break;
          }
case '<':
{
          outputStreamWrite(LT,os);
          break;
        }
case '""':
{
        outputStreamWrite(QUOT,os);
        break;
      }
case '\n':
{
      if (isAttribute) {
        outputStreamWrite(SLASH_N,os);
      }
 else {
        outputStreamWrite((byte)character,os);
      }
      break;
    }
case '\r':
{
    outputStreamWrite(SLASH_R,os);
    break;
  }
default :
outputStreamWrite((byte)character,os);
}
}
 else {
outputStreamWrite((byte)character,os);
}
}
}
}"
63642,"/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,Writer writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if ((null != encoder && encoder.maxBytesPerChar() < 4) || value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
default :
    if (encoder.canEncode(character)) {
      writer.write(character);
    }
 else {
      writer.write(""String_Node_Str"");
      writer.write(String.valueOf((int)character));
      writer.write(';');
    }
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}","/** 
 * INTERNAL:
 */
protected void writeValue(String value,boolean isAttribute,Writer writer){
  CharacterEscapeHandler escapeHandler=null;
  if (marshaller != null) {
    escapeHandler=marshaller.getCharacterEscapeHandler();
  }
  if (escapeHandler != null) {
    try {
      escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,writer);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
    return;
  }
  try {
    if ((null != encoder && encoder.maxBytesPerChar() < 4) || value.indexOf('""') > -1 || value.indexOf('&') > -1 || value.indexOf('<') > -1 || value.indexOf('\n') > -1 || value.indexOf('\r') > -1) {
      char[] chars=value.toCharArray();
      for (int x=0, charsSize=chars.length; x < charsSize; x++) {
        char character=chars[x];
switch (character) {
case '&':
{
            writer.write(""String_Node_Str"");
            break;
          }
case '<':
{
          writer.write(""String_Node_Str"");
          break;
        }
case '""':
{
        writer.write(""String_Node_Str"");
        break;
      }
case '\n':
{
      if (isAttribute) {
        writer.write(""String_Node_Str"");
      }
 else {
        writer.write('\n');
      }
      break;
    }
case '\r':
{
    writer.write(""String_Node_Str"");
    break;
  }
default :
if (null == encoder) {
  encoder=Constants.DEFAULT_CHARSET.newEncoder();
}
if (encoder.canEncode(character)) {
writer.write(character);
}
 else {
writer.write(""String_Node_Str"");
writer.write(String.valueOf((int)character));
writer.write(';');
}
}
}
}
 else {
writer.write(value);
}
}
 catch (IOException e) {
throw XMLMarshalException.marshalException(e);
}
}"
63643,"/** 
 * INTERNAL: This method resolves generic types based on the ASM class metadata. Unless every other factory (e.g. APT mirror factory) respects the generic format as built from ASM this method will not work since it is very tied to it.
 */
public void resolveGenericTypes(MetadataClass child,List<String> genericTypes,MetadataClass parent,MetadataDescriptor descriptor){
  if (genericTypes != null) {
    List<String> parentGenericTypes=parent.getGenericType();
    if (parentGenericTypes != null) {
      List genericParentTemp=new ArrayList(genericTypes);
      genericParentTemp.removeAll(child.getInterfaces());
      int size=genericParentTemp.size();
      int parentIndex=0;
      for (int index=genericTypes.indexOf(parent.getName()) + 1; index < size; index++) {
        String actualTypeArgument=genericTypes.get(index);
        if (parentIndex >= parentGenericTypes.size()) {
          break;
        }
        String variable=parentGenericTypes.get(parentIndex);
        parentIndex=parentIndex + 3;
        if (actualTypeArgument.length() == 1) {
          index++;
          actualTypeArgument=genericTypes.get(index);
          descriptor.addGenericType(variable,descriptor.getGenericType(actualTypeArgument));
        }
 else {
          descriptor.addGenericType(variable,actualTypeArgument);
        }
      }
    }
  }
}","/** 
 * INTERNAL: This method resolves generic types based on the ASM class metadata. Unless every other factory (e.g. APT mirror factory) respects the generic format as built from ASM this method will not work since it is very tied to it.
 */
public void resolveGenericTypes(MetadataClass child,List<String> genericTypes,MetadataClass parent,MetadataDescriptor descriptor){
  if (genericTypes != null) {
    List<String> parentGenericTypes=parent.getGenericType();
    if (parentGenericTypes != null) {
      List genericParentTemp=new ArrayList(genericTypes);
      genericParentTemp.removeAll(child.getInterfaces());
      int size=genericParentTemp.size();
      int parentIndex=0;
      for (int index=genericTypes.indexOf(parent.getName()) + 1; index < size; index++) {
        String actualTypeArgument=genericTypes.get(index);
        if (parentIndex >= parentGenericTypes.size()) {
          break;
        }
        String variable=parentGenericTypes.get(parentIndex);
        if (variable.equals(parent.getSuperclassName())) {
          break;
        }
        parentIndex=parentIndex + 3;
        if (actualTypeArgument.length() == 1) {
          index++;
          actualTypeArgument=genericTypes.get(index);
          descriptor.addGenericType(variable,descriptor.getGenericType(actualTypeArgument));
        }
 else {
          descriptor.addGenericType(variable,actualTypeArgument);
        }
      }
    }
  }
}"
63644,"/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator()) {
    Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=entries.next();
      Object key=entry.getKey();
      XPathFragment frag=((XMLField)getClassIndicatorField()).getXPathFragment();
      if (frag.getLocalName().equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && frag.getNamespaceURI() != null && frag.getNamespaceURI().equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
        usesXsiType=true;
      }
      if (key instanceof String) {
        XPathQName qname;
        String indicatorValue=(String)key;
        if (!usesXsiType || namespaceResolver == null) {
          qname=new XPathQName(indicatorValue,true);
        }
 else {
          int index=indicatorValue.indexOf(Constants.COLON);
          if (index != -1 && namespaceResolver != null) {
            String prefix=indicatorValue.substring(0,index);
            String localPart=indicatorValue.substring(index + 1);
            String uri=namespaceResolver.resolveNamespacePrefix(prefix);
            qname=new XPathQName(uri,localPart,true);
          }
 else {
            qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
          }
        }
        getClassIndicatorMapping().put(qname,entry.getValue());
      }
 else       if (key instanceof QName) {
        XPathQName xpathQName=new XPathQName((QName)key,true);
        getClassIndicatorMapping().put(xpathQName,entry.getValue());
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && frag.getPrefix() != null && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}","/** 
 * INTERNAL: Initialized the inheritance properties of the descriptor once the mappings are initialized. This is done before formal postInitialize during the end of mapping initialize.
 */
public void initialize(AbstractSession session){
  super.initialize(session);
  if (!this.shouldUseClassNameAsIndicator()) {
    if (classIndicatorField != null) {
      XPathFragment frag=((XMLField)classIndicatorField).getXPathFragment();
      if (frag.getLocalName().equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI.equals(frag.getNamespaceURI())) {
        usesXsiType=true;
      }
    }
    if (!isChildDescriptor()) {
      Iterator<Map.Entry> entries=new HashMap(getClassIndicatorMapping()).entrySet().iterator();
      while (entries.hasNext()) {
        Map.Entry entry=entries.next();
        Object key=entry.getKey();
        if (key instanceof String) {
          XPathQName qname;
          String indicatorValue=(String)key;
          if (!usesXsiType || namespaceResolver == null) {
            qname=new XPathQName(indicatorValue,true);
          }
 else {
            int index=indicatorValue.indexOf(Constants.COLON);
            if (index != -1 && namespaceResolver != null) {
              String prefix=indicatorValue.substring(0,index);
              String localPart=indicatorValue.substring(index + 1);
              String uri=namespaceResolver.resolveNamespacePrefix(prefix);
              qname=new XPathQName(uri,localPart,true);
            }
 else {
              qname=new XPathQName(namespaceResolver.getDefaultNamespaceURI(),indicatorValue,true);
            }
          }
          getClassIndicatorMapping().put(qname,entry.getValue());
        }
 else         if (key instanceof QName) {
          XPathQName xpathQName=new XPathQName((QName)key,true);
          getClassIndicatorMapping().put(xpathQName,entry.getValue());
        }
      }
    }
  }
  if (getClassIndicatorField() != null) {
    XMLField classIndicatorXMLField;
    try {
      classIndicatorXMLField=(XMLField)getClassIndicatorField();
    }
 catch (    ClassCastException ex) {
      classIndicatorXMLField=new XMLField(getClassIndicatorField().getName());
      setClassIndicatorField(classIndicatorXMLField);
    }
    XPathFragment frag=classIndicatorXMLField.getLastXPathFragment();
    if ((frag != null) && frag.hasNamespace() && frag.getPrefix() != null && (namespaceResolver != null)) {
      String uri=namespaceResolver.resolveNamespacePrefix(frag.getPrefix());
      classIndicatorXMLField.getLastXPathFragment().setNamespaceURI(uri);
    }
  }
}"
63645,"/** 
 * Post process XmlAccessorType. In some cases, such as @XmlSeeAlso classes, the access type may not have been set
 * @param info
 */
private void postProcessXmlAccessorType(TypeInfo info,PackageInfo packageNamespace){
  if (!info.isSetXmlAccessType()) {
    JavaClass next=helper.getJavaClass(info.getJavaClassName()).getSuperclass();
    while (next != null && !(next.getName().equals(JAVA_LANG_OBJECT))) {
      TypeInfo parentInfo=this.typeInfo.get(next.getName());
      if (shouldGenerateTypeInfo(next)) {
        buildNewTypeInfo(new JavaClass[]{next});
        parentInfo=this.typeInfo.get(next.getName());
      }
      if (parentInfo != null && parentInfo.isSetXmlAccessType()) {
        info.setXmlAccessType(parentInfo.getXmlAccessType());
        break;
      }
      next=next.getSuperclass();
    }
    if (!(info.isSetXmlAccessType())) {
      info.setXmlAccessType(org.eclipse.persistence.jaxb.xmlmodel.XmlAccessType.fromValue(packageNamespace.getAccessType().name()));
    }
  }
}","/** 
 * Post process XmlAccessorType. In some cases, such as @XmlSeeAlso classes, the access type may not have been set
 * @param info
 */
private void postProcessXmlAccessorType(TypeInfo info,PackageInfo packageNamespace){
  if (!info.isSetXmlAccessType()) {
    JavaClass next=helper.getJavaClass(info.getJavaClassName()).getSuperclass();
    while (next != null && !(next.getName().equals(JAVA_LANG_OBJECT))) {
      TypeInfo parentInfo=this.typeInfo.get(next.getName());
      if (shouldGenerateTypeInfo(next) && typeInfo.get(next.getQualifiedName()) == null) {
        buildNewTypeInfo(new JavaClass[]{next});
        parentInfo=this.typeInfo.get(next.getName());
      }
      if (parentInfo != null && parentInfo.isSetXmlAccessType()) {
        info.setXmlAccessType(parentInfo.getXmlAccessType());
        break;
      }
      next=next.getSuperclass();
    }
    if (!(info.isSetXmlAccessType())) {
      info.setXmlAccessType(org.eclipse.persistence.jaxb.xmlmodel.XmlAccessType.fromValue(packageNamespace.getAccessType().name()));
    }
  }
}"
63646,"private void checkForCallbackMethods(){
  for (  JavaClass next : typeInfoClasses) {
    if (next == null) {
      continue;
    }
    JavaClass unmarshallerCls=helper.getJavaClass(Unmarshaller.class);
    JavaClass marshallerCls=helper.getJavaClass(Marshaller.class);
    JavaClass objectCls=helper.getJavaClass(Object.class);
    JavaClass[] unmarshalParams=new JavaClass[]{unmarshallerCls,objectCls};
    JavaClass[] marshalParams=new JavaClass[]{marshallerCls};
    UnmarshalCallback unmarshalCallback=null;
    MarshalCallback marshalCallback=null;
    if (next.getMethod(""String_Node_Str"",unmarshalParams) != null) {
      unmarshalCallback=new UnmarshalCallback();
      unmarshalCallback.setDomainClassName(next.getQualifiedName());
      unmarshalCallback.setHasBeforeUnmarshalCallback();
    }
    if (next.getMethod(""String_Node_Str"",unmarshalParams) != null) {
      if (unmarshalCallback == null) {
        unmarshalCallback=new UnmarshalCallback();
        unmarshalCallback.setDomainClassName(next.getQualifiedName());
      }
      unmarshalCallback.setHasAfterUnmarshalCallback();
    }
    if (unmarshalCallback != null) {
      if (this.unmarshalCallbacks == null) {
        this.unmarshalCallbacks=new HashMap<String,UnmarshalCallback>();
      }
      unmarshalCallbacks.put(next.getQualifiedName(),unmarshalCallback);
    }
    if (next.getMethod(""String_Node_Str"",marshalParams) != null) {
      marshalCallback=new MarshalCallback();
      marshalCallback.setDomainClassName(next.getQualifiedName());
      marshalCallback.setHasBeforeMarshalCallback();
    }
    if (next.getMethod(""String_Node_Str"",marshalParams) != null) {
      if (marshalCallback == null) {
        marshalCallback=new MarshalCallback();
        marshalCallback.setDomainClassName(next.getQualifiedName());
      }
      marshalCallback.setHasAfterMarshalCallback();
    }
    if (marshalCallback != null) {
      if (this.marshalCallbacks == null) {
        this.marshalCallbacks=new HashMap<String,MarshalCallback>();
      }
      marshalCallbacks.put(next.getQualifiedName(),marshalCallback);
    }
  }
}","private void checkForCallbackMethods(){
  JavaClass unmarshallerCls=helper.getJavaClass(Unmarshaller.class);
  JavaClass marshallerCls=helper.getJavaClass(Marshaller.class);
  JavaClass objectCls=helper.getJavaClass(Object.class);
  JavaClass[] unmarshalParams=new JavaClass[]{unmarshallerCls,objectCls};
  JavaClass[] marshalParams=new JavaClass[]{marshallerCls};
  for (  JavaClass next : typeInfoClasses) {
    if (next == null) {
      continue;
    }
    UnmarshalCallback unmarshalCallback=null;
    MarshalCallback marshalCallback=null;
    if (next.getMethod(""String_Node_Str"",unmarshalParams) != null) {
      unmarshalCallback=new UnmarshalCallback();
      unmarshalCallback.setDomainClassName(next.getQualifiedName());
      unmarshalCallback.setHasBeforeUnmarshalCallback();
    }
    if (next.getMethod(""String_Node_Str"",unmarshalParams) != null) {
      if (unmarshalCallback == null) {
        unmarshalCallback=new UnmarshalCallback();
        unmarshalCallback.setDomainClassName(next.getQualifiedName());
      }
      unmarshalCallback.setHasAfterUnmarshalCallback();
    }
    if (unmarshalCallback != null) {
      if (this.unmarshalCallbacks == null) {
        this.unmarshalCallbacks=new HashMap<String,UnmarshalCallback>();
      }
      unmarshalCallbacks.put(next.getQualifiedName(),unmarshalCallback);
    }
    if (next.getMethod(""String_Node_Str"",marshalParams) != null) {
      marshalCallback=new MarshalCallback();
      marshalCallback.setDomainClassName(next.getQualifiedName());
      marshalCallback.setHasBeforeMarshalCallback();
    }
    if (next.getMethod(""String_Node_Str"",marshalParams) != null) {
      if (marshalCallback == null) {
        marshalCallback=new MarshalCallback();
        marshalCallback.setDomainClassName(next.getQualifiedName());
      }
      marshalCallback.setHasAfterMarshalCallback();
    }
    if (marshalCallback != null) {
      if (this.marshalCallbacks == null) {
        this.marshalCallbacks=new HashMap<String,MarshalCallback>();
      }
      marshalCallbacks.put(next.getQualifiedName(),marshalCallback);
    }
  }
}"
63647,"/** 
 * Process a given TypeInfo instance's properties.
 * @param info
 */
private void processTypeInfoProperties(JavaClass javaClass,TypeInfo info){
  ArrayList<Property> properties=info.getPropertyList();
  for (  Property property : properties) {
    processXmlID(property,javaClass,info);
    processXmlIDREF(property);
    if (property.isMap()) {
      JavaClass keyType=property.getKeyType();
      if (shouldGenerateTypeInfo(keyType)) {
        JavaClass[] jClassArray=new JavaClass[]{keyType};
        buildNewTypeInfo(jClassArray);
      }
      JavaClass valueType=property.getValueType();
      if (shouldGenerateTypeInfo(valueType)) {
        JavaClass[] jClassArray=new JavaClass[]{valueType};
        buildNewTypeInfo(jClassArray);
      }
    }
  }
}","/** 
 * Process a given TypeInfo instance's properties.
 * @param info
 */
private void processTypeInfoProperties(JavaClass javaClass,TypeInfo info){
  ArrayList<Property> properties=info.getPropertyList();
  for (  Property property : properties) {
    processXmlID(property,javaClass,info);
    processXmlIDREF(property);
    if (property.isMap()) {
      JavaClass keyType=property.getKeyType();
      if (shouldGenerateTypeInfo(keyType) && typeInfo.get(keyType.getQualifiedName()) == null) {
        JavaClass[] jClassArray=new JavaClass[]{keyType};
        buildNewTypeInfo(jClassArray);
      }
      JavaClass valueType=property.getValueType();
      if (shouldGenerateTypeInfo(valueType) && typeInfo.get(valueType.getQualifiedName()) == null) {
        JavaClass[] jClassArray=new JavaClass[]{valueType};
        buildNewTypeInfo(jClassArray);
      }
    }
  }
}"
63648,"/** 
 * Complete creation of a 'choice' property. Here, a Property is created for each XmlElement in the XmlElements list. Validation is performed as well. Each created Property is added to the owning Property's list of choice properties.
 * @param choiceProperty
 * @param info
 * @param cls
 * @param propertyType
 */
private void processChoiceProperty(Property choiceProperty,TypeInfo info,JavaClass cls,JavaClass propertyType){
  String propertyName=choiceProperty.getPropertyName();
  if (choiceProperty.isSetXmlJoinNodesList()) {
    if (choiceProperty.getXmlElements().getXmlElement().size() != choiceProperty.getXmlJoinNodesList().size()) {
      throw JAXBException.incorrectNumberOfXmlJoinNodesOnXmlElements(propertyName,cls.getQualifiedName());
    }
  }
  XmlPath[] paths=null;
  if (helper.isAnnotationPresent(choiceProperty.getElement(),XmlPaths.class)) {
    XmlPaths pathAnnotation=(XmlPaths)helper.getAnnotation(choiceProperty.getElement(),XmlPaths.class);
    paths=pathAnnotation.value();
  }
  ArrayList<Property> choiceProperties=new ArrayList<Property>();
  for (int i=0; i < choiceProperty.getXmlElements().getXmlElement().size(); i++) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlElement next=choiceProperty.getXmlElements().getXmlElement().get(i);
    Property choiceProp=new Property(helper);
    String name;
    String namespace;
    choiceProp.setNillable(next.isNillable());
    choiceProp.setIsRequired(next.isRequired());
    if (paths != null && next.getXmlPath() == null) {
      XmlPath nextPath=paths[i];
      next.setXmlPath(nextPath.value());
    }
    if (next.getXmlPath() != null) {
      choiceProp.setXmlPath(next.getXmlPath());
      boolean isAttribute=new XMLField(next.getXmlPath()).getLastXPathFragment().isAttribute();
      if (isAttribute && !next.getXmlPath().contains(SLASH)) {
        throw JAXBException.invalidXmlPathWithAttribute(propertyName,cls.getQualifiedName(),next.getXmlPath());
      }
      choiceProp.setIsAttribute(isAttribute);
      name=XMLProcessor.getNameFromXPath(next.getXmlPath(),propertyName,isAttribute);
      namespace=XMLProcessor.DEFAULT;
    }
 else {
      name=next.getName();
      namespace=next.getNamespace();
    }
    if (name == null || name.equals(XMLProcessor.DEFAULT)) {
      if (next.getJavaAttribute() != null) {
        name=next.getJavaAttribute();
      }
 else {
        name=propertyName;
      }
    }
    if (choiceProperty.isXmlIdRef()) {
      TypeInfo tInfo=typeInfo.get(next.getType());
      if (tInfo == null) {
        JavaClass nextCls=helper.getJavaClass(next.getType());
        if (shouldGenerateTypeInfo(nextCls)) {
          buildNewTypeInfo(new JavaClass[]{nextCls});
          tInfo=typeInfo.get(next.getType());
        }
      }
      if (tInfo == null || !tInfo.isIDSet()) {
        throw JAXBException.invalidXmlElementInXmlElementsList(propertyName,name);
      }
    }
    QName qName=null;
    if (!namespace.equals(XMLProcessor.DEFAULT)) {
      qName=new QName(namespace,name);
    }
 else {
      NamespaceInfo namespaceInfo=getPackageInfoForPackage(cls).getNamespaceInfo();
      if (namespaceInfo.isElementFormQualified()) {
        qName=new QName(namespaceInfo.getNamespace(),name);
      }
 else {
        qName=new QName(name);
      }
    }
    choiceProp.setPropertyName(name);
    if (next.getType().equals(""String_Node_Str"") || next.getType().equals(""String_Node_Str"")) {
      choiceProp.setType(propertyType);
    }
 else {
      choiceProp.setType(helper.getJavaClass(next.getType()));
    }
    if (choiceProperty.isSetXmlJoinNodesList()) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes xmlJoinNodes=choiceProperty.getXmlJoinNodesList().get(i);
      if (xmlJoinNodes != null) {
        choiceProp.setXmlJoinNodes(xmlJoinNodes);
        if (!xmlJoinNodes.getType().equals(XMLProcessor.DEFAULT)) {
          JavaClass pType=helper.getJavaClass(xmlJoinNodes.getType());
          if (helper.isCollectionType(choiceProp.getType())) {
            choiceProp.setGenericType(pType);
          }
 else {
            choiceProp.setType(pType);
          }
        }
      }
    }
    choiceProp.setSchemaName(qName);
    choiceProp.setSchemaType(getSchemaTypeFor(choiceProp.getType()));
    choiceProp.setIsXmlIdRef(choiceProperty.isXmlIdRef());
    choiceProp.setXmlElementWrapper(choiceProperty.getXmlElementWrapper());
    choiceProperties.add(choiceProp);
    if (!(this.typeInfo.containsKey(choiceProp.getType().getQualifiedName())) && shouldGenerateTypeInfo(choiceProp.getType())) {
      JavaClass[] jClassArray=new JavaClass[]{choiceProp.getType()};
      buildNewTypeInfo(jClassArray);
      TypeInfo newInfo=typeInfo.get(choiceProp.getType().getQualifiedName());
      if (newInfo != null && newInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(info.getJavaClassName(),choiceProperty.getPropertyName(),newInfo.getJavaClassName());
      }
    }
  }
  choiceProperty.setChoiceProperties(choiceProperties);
}","/** 
 * Complete creation of a 'choice' property. Here, a Property is created for each XmlElement in the XmlElements list. Validation is performed as well. Each created Property is added to the owning Property's list of choice properties.
 * @param choiceProperty
 * @param info
 * @param cls
 * @param propertyType
 */
private void processChoiceProperty(Property choiceProperty,TypeInfo info,JavaClass cls,JavaClass propertyType){
  String propertyName=choiceProperty.getPropertyName();
  if (choiceProperty.isSetXmlJoinNodesList()) {
    if (choiceProperty.getXmlElements().getXmlElement().size() != choiceProperty.getXmlJoinNodesList().size()) {
      throw JAXBException.incorrectNumberOfXmlJoinNodesOnXmlElements(propertyName,cls.getQualifiedName());
    }
  }
  XmlPath[] paths=null;
  if (helper.isAnnotationPresent(choiceProperty.getElement(),XmlPaths.class)) {
    XmlPaths pathAnnotation=(XmlPaths)helper.getAnnotation(choiceProperty.getElement(),XmlPaths.class);
    paths=pathAnnotation.value();
  }
  ArrayList<Property> choiceProperties=new ArrayList<Property>();
  for (int i=0; i < choiceProperty.getXmlElements().getXmlElement().size(); i++) {
    org.eclipse.persistence.jaxb.xmlmodel.XmlElement next=choiceProperty.getXmlElements().getXmlElement().get(i);
    Property choiceProp=new Property(helper);
    String name;
    String namespace;
    choiceProp.setNillable(next.isNillable());
    choiceProp.setIsRequired(next.isRequired());
    if (paths != null && next.getXmlPath() == null) {
      XmlPath nextPath=paths[i];
      next.setXmlPath(nextPath.value());
    }
    if (next.getXmlPath() != null) {
      choiceProp.setXmlPath(next.getXmlPath());
      boolean isAttribute=new XMLField(next.getXmlPath()).getLastXPathFragment().isAttribute();
      if (isAttribute && !next.getXmlPath().contains(SLASH)) {
        throw JAXBException.invalidXmlPathWithAttribute(propertyName,cls.getQualifiedName(),next.getXmlPath());
      }
      choiceProp.setIsAttribute(isAttribute);
      name=XMLProcessor.getNameFromXPath(next.getXmlPath(),propertyName,isAttribute);
      namespace=XMLProcessor.DEFAULT;
    }
 else {
      name=next.getName();
      namespace=next.getNamespace();
    }
    if (name == null || name.equals(XMLProcessor.DEFAULT)) {
      if (next.getJavaAttribute() != null) {
        name=next.getJavaAttribute();
      }
 else {
        name=propertyName;
      }
    }
    if (choiceProperty.isXmlIdRef()) {
      TypeInfo tInfo=typeInfo.get(next.getType());
      if (tInfo == null) {
        JavaClass nextCls=helper.getJavaClass(next.getType());
        if (shouldGenerateTypeInfo(nextCls) && typeInfo.get(nextCls.getQualifiedName()) == null) {
          buildNewTypeInfo(new JavaClass[]{nextCls});
          tInfo=typeInfo.get(next.getType());
        }
      }
      if (tInfo == null || !tInfo.isIDSet()) {
        throw JAXBException.invalidXmlElementInXmlElementsList(propertyName,name);
      }
    }
    QName qName=null;
    if (!namespace.equals(XMLProcessor.DEFAULT)) {
      qName=new QName(namespace,name);
    }
 else {
      NamespaceInfo namespaceInfo=getPackageInfoForPackage(cls).getNamespaceInfo();
      if (namespaceInfo.isElementFormQualified()) {
        qName=new QName(namespaceInfo.getNamespace(),name);
      }
 else {
        qName=new QName(name);
      }
    }
    choiceProp.setPropertyName(name);
    if (next.getType().equals(""String_Node_Str"") || next.getType().equals(""String_Node_Str"")) {
      choiceProp.setType(propertyType);
    }
 else {
      choiceProp.setType(helper.getJavaClass(next.getType()));
    }
    if (choiceProperty.isSetXmlJoinNodesList()) {
      org.eclipse.persistence.jaxb.xmlmodel.XmlJoinNodes xmlJoinNodes=choiceProperty.getXmlJoinNodesList().get(i);
      if (xmlJoinNodes != null) {
        choiceProp.setXmlJoinNodes(xmlJoinNodes);
        if (!xmlJoinNodes.getType().equals(XMLProcessor.DEFAULT)) {
          JavaClass pType=helper.getJavaClass(xmlJoinNodes.getType());
          if (helper.isCollectionType(choiceProp.getType())) {
            choiceProp.setGenericType(pType);
          }
 else {
            choiceProp.setType(pType);
          }
        }
      }
    }
    choiceProp.setSchemaName(qName);
    choiceProp.setSchemaType(getSchemaTypeFor(choiceProp.getType()));
    choiceProp.setIsXmlIdRef(choiceProperty.isXmlIdRef());
    choiceProp.setXmlElementWrapper(choiceProperty.getXmlElementWrapper());
    choiceProperties.add(choiceProp);
    if (!(this.typeInfo.containsKey(choiceProp.getType().getQualifiedName())) && shouldGenerateTypeInfo(choiceProp.getType())) {
      JavaClass[] jClassArray=new JavaClass[]{choiceProp.getType()};
      buildNewTypeInfo(jClassArray);
      TypeInfo newInfo=typeInfo.get(choiceProp.getType().getQualifiedName());
      if (newInfo != null && newInfo.isTransient()) {
        throw JAXBException.invalidReferenceToTransientClass(info.getJavaClassName(),choiceProperty.getPropertyName(),newInfo.getJavaClassName());
      }
    }
  }
  choiceProperty.setChoiceProperties(choiceProperties);
}"
63649,"/** 
 * Process any factory methods.
 * @param javaClass
 * @param info
 */
private void processFactoryMethods(JavaClass javaClass,TypeInfo info){
  JavaMethod factoryMethod=this.factoryMethods.get(javaClass.getRawName());
  if (factoryMethod != null) {
    info.setFactoryMethodName(factoryMethod.getName());
    info.setObjectFactoryClassName(factoryMethod.getOwningClass().getQualifiedName());
    JavaClass[] paramTypes=factoryMethod.getParameterTypes();
    if (paramTypes != null && paramTypes.length > 0) {
      String[] paramTypeNames=new String[paramTypes.length];
      for (int i=0; i < paramTypes.length; i++) {
        if (shouldGenerateTypeInfo(paramTypes[i])) {
          JavaClass[] jClassArray=new JavaClass[]{paramTypes[i]};
          buildNewTypeInfo(jClassArray);
        }
        paramTypeNames[i]=paramTypes[i].getQualifiedName();
      }
      info.setFactoryMethodParamTypes(paramTypeNames);
    }
  }
}","/** 
 * Process any factory methods.
 * @param javaClass
 * @param info
 */
private void processFactoryMethods(JavaClass javaClass,TypeInfo info){
  JavaMethod factoryMethod=this.factoryMethods.get(javaClass.getRawName());
  if (factoryMethod != null) {
    info.setFactoryMethodName(factoryMethod.getName());
    info.setObjectFactoryClassName(factoryMethod.getOwningClass().getQualifiedName());
    JavaClass[] paramTypes=factoryMethod.getParameterTypes();
    if (paramTypes != null && paramTypes.length > 0) {
      String[] paramTypeNames=new String[paramTypes.length];
      for (int i=0; i < paramTypes.length; i++) {
        if (shouldGenerateTypeInfo(paramTypes[i]) && typeInfo.get(paramTypes[i].getQualifiedName()) == null) {
          JavaClass[] jClassArray=new JavaClass[]{paramTypes[i]};
          buildNewTypeInfo(jClassArray);
        }
        paramTypeNames[i]=paramTypes[i].getQualifiedName();
      }
      info.setFactoryMethodParamTypes(paramTypeNames);
    }
  }
}"
63650,"/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  ArrayList<JavaClass> jClasses=getTypeInfoClasses();
  for (  JavaClass jClass : jClasses) {
    TypeInfo tInfo=getTypeInfo().get(jClass.getQualifiedName());
    if (tInfo.isTransient()) {
      continue;
    }
    String[] propOrder=tInfo.getPropOrder();
    boolean hasPropOrder=propOrder.length > 0 && !(propOrder.length == 1 && propOrder[0].equals(Constants.EMPTY_STRING));
    List<String> propOrderList=Arrays.asList(tInfo.getPropOrder());
    ArrayList<Property> propsList=tInfo.getPropertyList();
    for (int i=0; i < propsList.size(); i++) {
      Property p=propsList.get(i);
      if (p.isTransient() && propOrderList.contains(p.getPropertyName())) {
        throw org.eclipse.persistence.exceptions.JAXBException.transientInProporder(p.getPropertyName());
      }
      if (hasPropOrder && !p.isAttribute() && !p.isTransient()&& !p.isInverseReference()) {
        if (!propOrderList.contains(p.getPropertyName())) {
          throw JAXBException.missingPropertyInPropOrder(p.getPropertyName(),tInfo.getJavaClassName());
        }
      }
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType() && !jClass.isAbstract()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            if (!referencedByTransformer.contains(jClass.getName())) {
              throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
            }
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    List<Property> anyElementProperties=new ArrayList<Property>();
    for (    Property property : tInfo.getPropertyList()) {
      if (property.isAttribute()) {
        validateXmlAttributeFieldOrProperty(tInfo,property);
      }
      JavaClass typeClass=property.getActualType();
      if (property.isChoice()) {
        Collection<Property> choiceProps=property.getChoiceProperties();
        Iterator<Property> choicePropsIter=choiceProps.iterator();
        while (choicePropsIter.hasNext()) {
          Property nextChoiceProp=choicePropsIter.next();
          JavaClass nextChoicePropTypeClass=nextChoiceProp.getActualType();
          TypeInfo targetInfo=typeInfo.get(nextChoicePropTypeClass.getQualifiedName());
          finalizeProperty(property,targetInfo,nextChoicePropTypeClass,jClass);
        }
      }
 else {
        TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
        finalizeProperty(property,targetInfo,typeClass,jClass);
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isSwaAttachmentRef() && !this.hasSwaRef) {
        this.hasSwaRef=true;
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny()) {
        if (!anyElementProperties.isEmpty()) {
          for (          Property nextAny : anyElementProperties) {
            if (!property.isSetXmlElementWrapper() && !nextAny.isSetXmlElementWrapper()) {
              throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),nextAny.getPropertyName(),jClass.getName());
            }
            org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper wrapper=property.getXmlElementWrapper();
            org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper targetWrapper=nextAny.getXmlElementWrapper();
            if (wrapper != null && targetWrapper != null) {
              if (wrapper.getName().equals(targetWrapper.getName()) && wrapper.getNamespace().equals(targetWrapper.getNamespace())) {
                throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),nextAny.getPropertyName(),jClass.getName());
              }
            }
          }
        }
        anyElementProperties.add(property);
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!helper.isCollectionType(property.getType()) && !property.getType().isArray() && !helper.isMapType(property.getType())) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
    }
  }
}","/** 
 * Perform any final generation and/or validation operations on TypeInfo properties.
 */
public void finalizeProperties(){
  for (  TypeInfo tInfo : getTypeInfo().values()) {
    if (tInfo.isTransient()) {
      continue;
    }
    JavaClass jClass=tInfo.getJavaClass();
    String[] propOrder=tInfo.getPropOrder();
    boolean hasPropOrder=propOrder.length > 0 && !(propOrder.length == 1 && propOrder[0].equals(Constants.EMPTY_STRING));
    List<String> propOrderList=Arrays.asList(tInfo.getPropOrder());
    ArrayList<Property> propsList=tInfo.getPropertyList();
    for (int i=0; i < propsList.size(); i++) {
      Property p=propsList.get(i);
      if (p.isTransient() && propOrderList.contains(p.getPropertyName())) {
        throw org.eclipse.persistence.exceptions.JAXBException.transientInProporder(p.getPropertyName());
      }
      if (hasPropOrder && !p.isAttribute() && !p.isTransient()&& !p.isInverseReference()) {
        if (!propOrderList.contains(p.getPropertyName())) {
          throw JAXBException.missingPropertyInPropOrder(p.getPropertyName(),tInfo.getJavaClassName());
        }
      }
    }
    if (!jClass.isInterface() && !tInfo.isEnumerationType() && !jClass.isAbstract()) {
      if (tInfo.getFactoryMethodName() == null && tInfo.getObjectFactoryClassName() == null) {
        JavaConstructor zeroArgConstructor=jClass.getDeclaredConstructor(new JavaClass[]{});
        if (zeroArgConstructor == null) {
          if (tInfo.isSetXmlJavaTypeAdapter()) {
            tInfo.setTransient(true);
          }
 else {
            if (!referencedByTransformer.contains(jClass.getName())) {
              throw org.eclipse.persistence.exceptions.JAXBException.factoryMethodOrConstructorRequired(jClass.getName());
            }
          }
        }
      }
    }
    if (tInfo.getXmlValueProperty() != null) {
      validateXmlValueFieldOrProperty(jClass,tInfo.getXmlValueProperty());
    }
    List<Property> anyElementProperties=new ArrayList<Property>();
    for (    Property property : tInfo.getPropertyList()) {
      if (property.isAttribute()) {
        validateXmlAttributeFieldOrProperty(tInfo,property);
      }
      JavaClass typeClass=property.getActualType();
      if (property.isChoice()) {
        Collection<Property> choiceProps=property.getChoiceProperties();
        Iterator<Property> choicePropsIter=choiceProps.iterator();
        while (choicePropsIter.hasNext()) {
          Property nextChoiceProp=choicePropsIter.next();
          JavaClass nextChoicePropTypeClass=nextChoiceProp.getActualType();
          TypeInfo targetInfo=typeInfo.get(nextChoicePropTypeClass.getQualifiedName());
          finalizeProperty(property,targetInfo,nextChoicePropTypeClass,jClass);
        }
      }
 else {
        TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
        finalizeProperty(property,targetInfo,typeClass,jClass);
      }
      if (tInfo.isSetXmlValueProperty()) {
        if (property.isXmlValue() && !(tInfo.getXmlValueProperty().getPropertyName().equals(property.getPropertyName()))) {
          throw JAXBException.xmlValueAlreadySet(property.getPropertyName(),tInfo.getXmlValueProperty().getPropertyName(),jClass.getName());
        }
        if (!property.isXmlValue() && !property.isAttribute() && !property.isInverseReference()&& !property.isTransient()) {
          throw JAXBException.propertyOrFieldShouldBeAnAttribute(property.getPropertyName());
        }
      }
      if (property.isReference()) {
        processReferenceProperty(property,tInfo,jClass);
      }
      if (property.isSwaAttachmentRef() && !this.hasSwaRef) {
        this.hasSwaRef=true;
      }
      if (property.isXmlId() && tInfo.getIDProperty() != null && !(tInfo.getIDProperty().getPropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.idAlreadySet(property.getPropertyName(),tInfo.getIDProperty().getPropertyName(),jClass.getName());
      }
      if (property.isAnyAttribute() && tInfo.isSetAnyAttributePropertyName() && !(tInfo.getAnyAttributePropertyName().equals(property.getPropertyName()))) {
        throw JAXBException.multipleAnyAttributeMapping(jClass.getName());
      }
      if (property.isAny()) {
        if (!anyElementProperties.isEmpty()) {
          for (          Property nextAny : anyElementProperties) {
            if (!property.isSetXmlElementWrapper() && !nextAny.isSetXmlElementWrapper()) {
              throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),nextAny.getPropertyName(),jClass.getName());
            }
            org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper wrapper=property.getXmlElementWrapper();
            org.eclipse.persistence.jaxb.xmlmodel.XmlElementWrapper targetWrapper=nextAny.getXmlElementWrapper();
            if (wrapper != null && targetWrapper != null) {
              if (wrapper.getName().equals(targetWrapper.getName()) && wrapper.getNamespace().equals(targetWrapper.getNamespace())) {
                throw JAXBException.xmlAnyElementAlreadySet(property.getPropertyName(),nextAny.getPropertyName(),jClass.getName());
              }
            }
          }
        }
        anyElementProperties.add(property);
      }
      if (property.isSwaAttachmentRef() && !areEquals(property.getActualType(),JAVAX_ACTIVATION_DATAHANDLER)) {
        throw JAXBException.invalidAttributeRef(property.getPropertyName(),jClass.getQualifiedName());
      }
      if (property.getXmlElementWrapper() != null) {
        if (!helper.isCollectionType(property.getType()) && !property.getType().isArray() && !helper.isMapType(property.getType())) {
          throw JAXBException.invalidElementWrapper(property.getPropertyName());
        }
      }
      if (property.isXmlTransformation()) {
        processXmlTransformationProperty(property);
      }
      if (property.isSetXmlJoinNodes()) {
        TypeInfo targetInfo=typeInfo.get(typeClass.getQualifiedName());
        if (targetInfo == null) {
          throw JAXBException.invalidXmlJoinNodeReferencedClass(property.getPropertyName(),typeClass.getQualifiedName());
        }
        if (targetInfo.getIDProperty() == null && targetInfo.getXmlKeyProperties() == null) {
          throw JAXBException.noKeyOrIDPropertyOnJoinTarget(jClass.getQualifiedName(),property.getPropertyName(),typeClass.getQualifiedName());
        }
      }
    }
  }
}"
63651,"/** 
 * Process class level annotations only. It is assumed that a call to init() has been made prior to calling this method. After the types created via this method have been modified (if necessary) postBuildTypeInfo and processJavaClasses should be called to finish processing.
 * @param javaClasses
 * @return
 */
public Map<String,TypeInfo> preBuildTypeInfo(JavaClass[] javaClasses){
  for (  JavaClass javaClass : javaClasses) {
    if (javaClass == null || !shouldGenerateTypeInfo(javaClass) || isXmlRegistry(javaClass) || javaClass.isArray()) {
      continue;
    }
    String qualifiedName=javaClass.getQualifiedName();
    TypeInfo info=typeInfo.get(qualifiedName);
    if (info != null) {
      if (info.isPreBuilt()) {
        continue;
      }
    }
    if (javaClass.isEnum()) {
      info=new EnumTypeInfo(helper);
    }
 else {
      info=new TypeInfo(helper);
    }
    info.setJavaClassName(qualifiedName);
    info.setPreBuilt(true);
    if (helper.isAnnotationPresent(javaClass,XmlTransient.class)) {
      info.setXmlTransient(true);
    }
    processXmlExtensible(javaClass,info);
    if (helper.isAnnotationPresent(javaClass,XmlInlineBinaryData.class)) {
      info.setInlineBinaryData(true);
    }
    processNamedObjectGraphs(javaClass,info);
    processXmlRootElement(javaClass,info);
    processXmlSeeAlso(javaClass,info);
    PackageInfo packageInfo=getPackageInfoForPackage(javaClass);
    if (packageInfo != null && packageInfo.getPackageLevelAdaptersByClass().size() > 0) {
      for (      String adapterClass : packageInfo.getPackageLevelAdaptersByClass().keySet()) {
        JavaClass boundType=packageInfo.getPackageLevelAdaptersByClass().get(adapterClass);
        info.getPackageLevelAdaptersByClass().put(adapterClass,boundType);
      }
    }
    NamespaceInfo namespaceInfo=packageInfo.getNamespaceInfo();
    preProcessXmlType(javaClass,info,namespaceInfo);
    preProcessXmlAccessorType(javaClass,info,namespaceInfo);
    preProcessXmlAccessorOrder(javaClass,info,namespaceInfo);
    processPackageLevelAdapters(javaClass,info);
    processAccessorFactory(javaClass,info);
    processClassLevelAdapters(javaClass,info);
    preProcessCustomizer(javaClass,info);
    processSchemaTypes(javaClass,info);
    if (helper.isAnnotationPresent(javaClass,XmlClassExtractor.class)) {
      XmlClassExtractor classExtractor=(XmlClassExtractor)helper.getAnnotation(javaClass,XmlClassExtractor.class);
      info.setClassExtractorName(classExtractor.value().getName());
    }
    if (helper.isAnnotationPresent(javaClass,XmlProperties.class)) {
      XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(javaClass,XmlProperties.class);
      Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
      info.setUserProperties(propertiesMap);
    }
 else     if (helper.isAnnotationPresent(javaClass,XmlProperty.class)) {
      XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(javaClass,XmlProperty.class);
      Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
      info.setUserProperties(propertiesMap);
    }
    if (helper.isAnnotationPresent(javaClass,XmlDiscriminatorNode.class)) {
      XmlDiscriminatorNode xmlDiscriminatorNode=(XmlDiscriminatorNode)helper.getAnnotation(javaClass,XmlDiscriminatorNode.class);
      info.setXmlDiscriminatorNode(xmlDiscriminatorNode.value());
    }
    if (helper.isAnnotationPresent(javaClass,XmlDiscriminatorValue.class)) {
      XmlDiscriminatorValue xmlDiscriminatorValue=(XmlDiscriminatorValue)helper.getAnnotation(javaClass,XmlDiscriminatorValue.class);
      info.setXmlDiscriminatorValue(xmlDiscriminatorValue.value());
    }
    typeInfoClasses.add(javaClass);
    typeInfo.put(info.getJavaClassName(),info);
  }
  return typeInfo;
}","/** 
 * Process class level annotations only. It is assumed that a call to init() has been made prior to calling this method. After the types created via this method have been modified (if necessary) postBuildTypeInfo and processJavaClasses should be called to finish processing.
 * @param javaClasses
 * @return
 */
public Map<String,TypeInfo> preBuildTypeInfo(JavaClass[] javaClasses){
  for (  JavaClass javaClass : javaClasses) {
    String qualifiedName=javaClass.getQualifiedName();
    TypeInfo info=typeInfo.get(qualifiedName);
    if (javaClass == null || javaClass.isArray() || (info != null && info.isPreBuilt()) || !shouldGenerateTypeInfo(javaClass) || isXmlRegistry(javaClass)) {
      continue;
    }
    if (javaClass.isEnum()) {
      info=new EnumTypeInfo(helper,javaClass);
    }
 else {
      info=new TypeInfo(helper,javaClass);
    }
    info.setJavaClassName(qualifiedName);
    info.setPreBuilt(true);
    if (helper.isAnnotationPresent(javaClass,XmlTransient.class)) {
      info.setXmlTransient(true);
    }
    processXmlExtensible(javaClass,info);
    if (helper.isAnnotationPresent(javaClass,XmlInlineBinaryData.class)) {
      info.setInlineBinaryData(true);
    }
    processNamedObjectGraphs(javaClass,info);
    processXmlRootElement(javaClass,info);
    processXmlSeeAlso(javaClass,info);
    PackageInfo packageInfo=getPackageInfoForPackage(javaClass);
    if (packageInfo != null && packageInfo.getPackageLevelAdaptersByClass().size() > 0) {
      for (      String adapterClass : packageInfo.getPackageLevelAdaptersByClass().keySet()) {
        JavaClass boundType=packageInfo.getPackageLevelAdaptersByClass().get(adapterClass);
        info.getPackageLevelAdaptersByClass().put(adapterClass,boundType);
      }
    }
    NamespaceInfo namespaceInfo=packageInfo.getNamespaceInfo();
    preProcessXmlType(javaClass,info,namespaceInfo);
    preProcessXmlAccessorType(javaClass,info,namespaceInfo);
    preProcessXmlAccessorOrder(javaClass,info,namespaceInfo);
    processPackageLevelAdapters(javaClass,info);
    processAccessorFactory(javaClass,info);
    processClassLevelAdapters(javaClass,info);
    preProcessCustomizer(javaClass,info);
    processSchemaTypes(javaClass,info);
    if (helper.isAnnotationPresent(javaClass,XmlClassExtractor.class)) {
      XmlClassExtractor classExtractor=(XmlClassExtractor)helper.getAnnotation(javaClass,XmlClassExtractor.class);
      info.setClassExtractorName(classExtractor.value().getName());
    }
    if (helper.isAnnotationPresent(javaClass,XmlProperties.class)) {
      XmlProperties xmlProperties=(XmlProperties)helper.getAnnotation(javaClass,XmlProperties.class);
      Map<Object,Object> propertiesMap=createUserPropertiesMap(xmlProperties.value());
      info.setUserProperties(propertiesMap);
    }
 else     if (helper.isAnnotationPresent(javaClass,XmlProperty.class)) {
      XmlProperty xmlProperty=(XmlProperty)helper.getAnnotation(javaClass,XmlProperty.class);
      Map<Object,Object> propertiesMap=createUserPropertiesMap(new XmlProperty[]{xmlProperty});
      info.setUserProperties(propertiesMap);
    }
    if (helper.isAnnotationPresent(javaClass,XmlDiscriminatorNode.class)) {
      XmlDiscriminatorNode xmlDiscriminatorNode=(XmlDiscriminatorNode)helper.getAnnotation(javaClass,XmlDiscriminatorNode.class);
      info.setXmlDiscriminatorNode(xmlDiscriminatorNode.value());
    }
    if (helper.isAnnotationPresent(javaClass,XmlDiscriminatorValue.class)) {
      XmlDiscriminatorValue xmlDiscriminatorValue=(XmlDiscriminatorValue)helper.getAnnotation(javaClass,XmlDiscriminatorValue.class);
      info.setXmlDiscriminatorValue(xmlDiscriminatorValue.value());
    }
    typeInfoClasses.add(javaClass);
    typeInfo.put(info.getJavaClassName(),info);
  }
  return typeInfo;
}"
63652,"/** 
 * INTERNAL: Complete building TypeInfo objects for a given set of JavaClass instances. This method assumes that init, preBuildTypeInfo, and postBuildTypeInfo have been called.
 * @param allClasses
 * @return
 */
private Map<String,TypeInfo> buildTypeInfo(JavaClass[] allClasses){
  for (  JavaClass javaClass : allClasses) {
    if (javaClass == null) {
      continue;
    }
    TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
    if (info == null || info.isPostBuilt()) {
      continue;
    }
    info.setPostBuilt(true);
    processFactoryMethods(javaClass,info);
    PackageInfo packageInfo=getPackageInfoForPackage(javaClass);
    XMLNameTransformer transformer=info.getXmlNameTransformer();
    if (transformer == TypeInfo.DEFAULT_NAME_TRANSFORMER) {
      XMLNameTransformer nsInfoXmlNameTransformer=packageInfo.getXmlNameTransformer();
      if (nsInfoXmlNameTransformer != null) {
        info.setXmlNameTransformer(nsInfoXmlNameTransformer);
      }
 else       if (helper.isAnnotationPresent(javaClass,XmlNameTransformer.class)) {
        XmlNameTransformer nameTranformer=(XmlNameTransformer)helper.getAnnotation(javaClass,XmlNameTransformer.class);
        Class nameTransformerClass=nameTranformer.value();
        try {
          info.setXmlNameTransformer((XMLNameTransformer)nameTransformerClass.newInstance());
        }
 catch (        InstantiationException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
catch (        IllegalAccessException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
      }
 else       if (helper.isAnnotationPresent(javaClass.getPackage(),XmlNameTransformer.class)) {
        XmlNameTransformer nameTranformer=(XmlNameTransformer)helper.getAnnotation(javaClass.getPackage(),XmlNameTransformer.class);
        Class nameTransformerClass=nameTranformer.value();
        try {
          info.setXmlNameTransformer((XMLNameTransformer)nameTransformerClass.newInstance());
        }
 catch (        InstantiationException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
catch (        IllegalAccessException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
      }
    }
    postProcessXmlAccessorType(info,packageInfo);
    postProcessXmlType(javaClass,info,packageInfo);
    if (info.isEnumerationType()) {
      addEnumTypeInfo(javaClass,((EnumTypeInfo)info));
      continue;
    }
    processTypeQName(javaClass,info,packageInfo.getNamespaceInfo());
    JavaClass superClass=(JavaClass)javaClass.getSuperclass();
    if (shouldGenerateTypeInfo(superClass)) {
      JavaClass[] jClassArray=new JavaClass[]{superClass};
      buildNewTypeInfo(jClassArray);
    }
    processPropertiesSuperClass(javaClass,info);
    info.setProperties(getPropertiesForClass(javaClass,info));
    processTypeInfoProperties(javaClass,info);
    postProcessXmlAccessorOrder(info,packageInfo);
    validatePropOrderForInfo(info);
  }
  return typeInfo;
}","/** 
 * INTERNAL: Complete building TypeInfo objects for a given set of JavaClass instances. This method assumes that init, preBuildTypeInfo, and postBuildTypeInfo have been called.
 * @param allClasses
 * @return
 */
private Map<String,TypeInfo> buildTypeInfo(JavaClass[] allClasses){
  for (  JavaClass javaClass : allClasses) {
    if (javaClass == null) {
      continue;
    }
    TypeInfo info=typeInfo.get(javaClass.getQualifiedName());
    if (info == null || info.isPostBuilt()) {
      continue;
    }
    info.setPostBuilt(true);
    processFactoryMethods(javaClass,info);
    PackageInfo packageInfo=getPackageInfoForPackage(javaClass);
    XMLNameTransformer transformer=info.getXmlNameTransformer();
    if (transformer == TypeInfo.DEFAULT_NAME_TRANSFORMER) {
      XMLNameTransformer nsInfoXmlNameTransformer=packageInfo.getXmlNameTransformer();
      if (nsInfoXmlNameTransformer != null) {
        info.setXmlNameTransformer(nsInfoXmlNameTransformer);
      }
 else       if (helper.isAnnotationPresent(javaClass,XmlNameTransformer.class)) {
        XmlNameTransformer nameTranformer=(XmlNameTransformer)helper.getAnnotation(javaClass,XmlNameTransformer.class);
        Class nameTransformerClass=nameTranformer.value();
        try {
          info.setXmlNameTransformer((XMLNameTransformer)nameTransformerClass.newInstance());
        }
 catch (        InstantiationException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
catch (        IllegalAccessException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
      }
 else       if (helper.isAnnotationPresent(javaClass.getPackage(),XmlNameTransformer.class)) {
        XmlNameTransformer nameTranformer=(XmlNameTransformer)helper.getAnnotation(javaClass.getPackage(),XmlNameTransformer.class);
        Class nameTransformerClass=nameTranformer.value();
        try {
          info.setXmlNameTransformer((XMLNameTransformer)nameTransformerClass.newInstance());
        }
 catch (        InstantiationException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
catch (        IllegalAccessException ex) {
          throw JAXBException.exceptionWithNameTransformerClass(nameTransformerClass.getName(),ex);
        }
      }
    }
    postProcessXmlAccessorType(info,packageInfo);
    postProcessXmlType(javaClass,info,packageInfo);
    if (info.isEnumerationType()) {
      addEnumTypeInfo(javaClass,((EnumTypeInfo)info));
      continue;
    }
    processTypeQName(javaClass,info,packageInfo.getNamespaceInfo());
    JavaClass superClass=(JavaClass)javaClass.getSuperclass();
    if (shouldGenerateTypeInfo(superClass) && typeInfo.get(superClass.getQualifiedName()) == null) {
      JavaClass[] jClassArray=new JavaClass[]{superClass};
      buildNewTypeInfo(jClassArray);
    }
    processPropertiesSuperClass(javaClass,info);
    info.setProperties(getPropertiesForClass(javaClass,info));
    processTypeInfoProperties(javaClass,info);
    postProcessXmlAccessorOrder(info,packageInfo);
    validatePropOrderForInfo(info);
  }
  return typeInfo;
}"
63653,"public EnumTypeInfo(Helper helper){
  super(helper);
  m_fieldNames=new ArrayList<String>();
  m_xmlEnumValues=new ArrayList<Object>();
}","public EnumTypeInfo(Helper helper,JavaClass javaClass){
  super(helper,javaClass);
  m_fieldNames=new ArrayList<String>();
  m_xmlEnumValues=new ArrayList<Object>();
}"
63654,"/** 
 * This constructor sets the Helper to be used throughout XML and Annotations processing.  Other fields are initialized here as well.
 * @param helper
 */
public TypeInfo(Helper helper){
  propertyNames=new ArrayList<String>();
  properties=new HashMap<String,Property>();
  originalProperties=new HashMap<String,Property>();
  propertyList=new ArrayList<Property>();
  xmlNameTransformer=DEFAULT_NAME_TRANSFORMER;
  isSetXmlTransient=false;
  isPreBuilt=false;
  isPostBuilt=false;
}","/** 
 * This constructor sets the Helper to be used throughout XML and Annotations processing.  Other fields are initialized here as well.
 * @param helper
 */
public TypeInfo(Helper helper,JavaClass javaClass){
  propertyNames=new ArrayList<String>();
  properties=new HashMap<String,Property>();
  originalProperties=new HashMap<String,Property>();
  propertyList=new ArrayList<Property>();
  xmlNameTransformer=DEFAULT_NAME_TRANSFORMER;
  isSetXmlTransient=false;
  isPreBuilt=false;
  isPostBuilt=false;
  this.javaClass=javaClass;
}"
63655,"private boolean hasCustomSuperClass(JavaClass arg0){
  if (arg0 == null) {
    return false;
  }
  if (!(arg0.getClass() == this.getClass())) {
    return false;
  }
  if (arg0.getName().equals(""String_Node_Str"")) {
    return false;
  }
  JavaClassImpl jClass=(JavaClassImpl)arg0;
  if (jClass.getSuperClassOverride() != null) {
    return true;
  }
  return hasCustomSuperClass(jClass.getSuperclass());
}","private boolean hasCustomSuperClass(JavaClass arg0){
  if (arg0 == null) {
    return false;
  }
  if (!this.javaModelImpl.hasXmlBindings()) {
    return false;
  }
  if (!(arg0.getClass() == this.getClass())) {
    return false;
  }
  if (arg0.getName().equals(""String_Node_Str"")) {
    return false;
  }
  JavaClassImpl jClass=(JavaClassImpl)arg0;
  if (jClass.getSuperClassOverride() != null) {
    return true;
  }
  return hasCustomSuperClass(jClass.getSuperclass());
}"
63656,"public void initializeDescriptor(XMLDescriptor descriptor){
  AbstractSession theSession=(AbstractSession)getXmlContext().getSession();
  descriptor.preInitialize(theSession);
  descriptor.initialize(theSession);
  descriptor.postInitialize(theSession);
  descriptor.getObjectBuilder().initializePrimaryKey(theSession);
  getXmlContext().storeXMLDescriptorByQName(descriptor);
}","public void initializeDescriptor(XMLDescriptor descriptor){
  AbstractSession theSession=(AbstractSession)getXmlContext().getSession();
  boolean isInitialized=descriptor.isFullyInitialized();
  descriptor.preInitialize(theSession);
  descriptor.initialize(theSession);
  descriptor.postInitialize(theSession);
  if (isInitialized && descriptor.hasInheritance() && descriptor.getInheritancePolicy().isRootParentDescriptor()) {
    descriptor.getInheritancePolicy().initialize(theSession);
  }
  descriptor.getObjectBuilder().initializePrimaryKey(theSession);
  getXmlContext().storeXMLDescriptorByQName(descriptor);
}"
63657,"public Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    unmarshaller.setProperty(UnmarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    StreamSource jsonSource;
    Map<String,String> mediaTypeParameters=null;
    if (null != mediaType) {
      mediaTypeParameters=mediaType.getParameters();
    }
    if (null != mediaTypeParameters && mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      Reader entityReader=new InputStreamReader(entityStream,charSet);
      jsonSource=new StreamSource(entityReader);
    }
 else {
      jsonSource=new StreamSource(entityStream);
    }
    JAXBElement<?> jaxbElement=unmarshaller.unmarshal(jsonSource,domainClass);
    if (type.isAssignableFrom(JAXBElement.class)) {
      return jaxbElement;
    }
 else {
      Object value=jaxbElement.getValue();
      if (value instanceof ArrayList) {
        if (type.isArray()) {
          ArrayList<Object> arrayList=(ArrayList<Object>)value;
          int arrayListSize=arrayList.size();
          boolean wrapItemInJAXBElement=wrapItemInJAXBElement(genericType);
          Object array;
          if (wrapItemInJAXBElement) {
            array=Array.newInstance(JAXBElement.class,arrayListSize);
          }
 else {
            array=Array.newInstance(domainClass,arrayListSize);
          }
          for (int x=0; x < arrayListSize; x++) {
            Object element=handleJAXBElement(arrayList.get(x),domainClass,wrapItemInJAXBElement);
            Array.set(array,x,element);
          }
          return array;
        }
 else {
          ContainerPolicy containerPolicy;
          if (type.isAssignableFrom(List.class) || type.isAssignableFrom(ArrayList.class) || type.isAssignableFrom(Collection.class)) {
            containerPolicy=new CollectionContainerPolicy(ArrayList.class);
          }
 else           if (type.isAssignableFrom(Set.class)) {
            containerPolicy=new CollectionContainerPolicy(HashSet.class);
          }
 else           if (type.isAssignableFrom(Deque.class) || type.isAssignableFrom(Queue.class)) {
            containerPolicy=new CollectionContainerPolicy(LinkedList.class);
          }
 else           if (type.isAssignableFrom(NavigableSet.class) || type.isAssignableFrom(SortedSet.class)) {
            containerPolicy=new CollectionContainerPolicy(TreeSet.class);
          }
 else {
            containerPolicy=new CollectionContainerPolicy(type);
          }
          Object container=containerPolicy.containerInstance();
          boolean wrapItemInJAXBElement=wrapItemInJAXBElement(genericType);
          for (          Object element : (Collection<Object>)value) {
            element=handleJAXBElement(element,domainClass,wrapItemInJAXBElement);
            containerPolicy.addInto(element,container,null);
          }
          return container;
        }
      }
 else {
        return value;
      }
    }
  }
 catch (  UnmarshalException unmarshalException) {
    ResponseBuilder builder=Response.status(Status.BAD_REQUEST);
    throw new WebApplicationException(builder.build());
  }
catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","public Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    unmarshaller.setProperty(UnmarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    StreamSource jsonSource;
    Map<String,String> mediaTypeParameters=null;
    if (null != mediaType) {
      mediaTypeParameters=mediaType.getParameters();
    }
    if (null != mediaTypeParameters && mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      Reader entityReader=new InputStreamReader(entityStream,charSet);
      jsonSource=new StreamSource(entityReader);
    }
 else {
      jsonSource=new StreamSource(entityStream);
    }
    JAXBElement<?> jaxbElement=unmarshaller.unmarshal(jsonSource,domainClass);
    if (type.isAssignableFrom(JAXBElement.class)) {
      return jaxbElement;
    }
 else {
      Object value=jaxbElement.getValue();
      if (value instanceof ArrayList) {
        if (type.isArray()) {
          ArrayList<Object> arrayList=(ArrayList<Object>)value;
          int arrayListSize=arrayList.size();
          boolean wrapItemInJAXBElement=wrapItemInJAXBElement(genericType);
          Object array;
          if (wrapItemInJAXBElement) {
            array=Array.newInstance(JAXBElement.class,arrayListSize);
          }
 else {
            array=Array.newInstance(domainClass,arrayListSize);
          }
          for (int x=0; x < arrayListSize; x++) {
            Object element=handleJAXBElement(arrayList.get(x),domainClass,wrapItemInJAXBElement);
            Array.set(array,x,element);
          }
          return array;
        }
 else {
          ContainerPolicy containerPolicy;
          if (type.isAssignableFrom(List.class) || type.isAssignableFrom(ArrayList.class) || type.isAssignableFrom(Collection.class)) {
            containerPolicy=new CollectionContainerPolicy(ArrayList.class);
          }
 else           if (type.isAssignableFrom(Set.class)) {
            containerPolicy=new CollectionContainerPolicy(HashSet.class);
          }
 else           if (type.isAssignableFrom(Deque.class) || type.isAssignableFrom(Queue.class)) {
            containerPolicy=new CollectionContainerPolicy(LinkedList.class);
          }
 else           if (type.isAssignableFrom(NavigableSet.class) || type.isAssignableFrom(SortedSet.class)) {
            containerPolicy=new CollectionContainerPolicy(TreeSet.class);
          }
 else {
            containerPolicy=new CollectionContainerPolicy(type);
          }
          Object container=containerPolicy.containerInstance();
          boolean wrapItemInJAXBElement=wrapItemInJAXBElement(genericType);
          for (          Object element : (Collection<Object>)value) {
            element=handleJAXBElement(element,domainClass,wrapItemInJAXBElement);
            containerPolicy.addInto(element,container,null);
          }
          return container;
        }
      }
 else {
        return value;
      }
    }
  }
 catch (  UnmarshalException unmarshalException) {
    ResponseBuilder builder=Response.status(Status.BAD_REQUEST);
    throw new WebApplicationException(unmarshalException,builder.build());
  }
catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
63658,"/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (Constants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (Constants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (Constants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (Constants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
  if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (Constants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  GregorianCalendar cal=new GregorianCalendar(getTimeZone());
  cal.setTime(sourceDate);
  xgc=getDatatypeFactory().newXMLGregorianCalendar(cal);
  if (!isTimeZoneQualified()) {
    xgc.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  }
  String string=xgc.toXMLFormat();
  return truncateMillis(string);
}","/** 
 * This method returns a string representing a given java.util.Date based on a given schema type QName. BC dates (sourceDate.getTime() < YEAR_ONE_AD_TIME) are handled as follows: '2007 BC' --> '-2006 AD'.
 * @param sourceDate
 * @param schemaType
 * @return
 */
public String stringFromDate(java.util.Date sourceDate,QName schemaType){
  XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
  if (Constants.DATE_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (Constants.TIME_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    string=appendMillis(string,sourceDate.getTime());
    return appendTimeZone(string,sourceDate);
  }
  if (Constants.G_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DATE));
    return xgc.toXMLFormat();
  }
  if (Constants.G_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
  if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
  if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
  if (Constants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
  return stringFromDate(sourceDate);
}"
63659,"private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (Constants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (Constants.TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceDate);
  }
 else   if (Constants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (Constants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
 else   if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (Constants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceDate);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (Constants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLDate(sourceDate);
  }
}","private String stringFromSQLDate(java.sql.Date sourceDate,QName schemaType){
  if (null == schemaType) {
    return stringFromSQLDate(sourceDate);
  }
 else {
    return stringFromDate(sourceDate,schemaType);
  }
}"
63660,"private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (Constants.DATE_TIME_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    xgc.setHour(cal.get(Calendar.HOUR_OF_DAY));
    xgc.setMinute(cal.get(Calendar.MINUTE));
    xgc.setSecond(cal.get(Calendar.SECOND));
    String string=xgc.toXMLFormat();
    return appendTimeZone(string,sourceTime);
  }
 else   if (Constants.DATE_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (Constants.G_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (Constants.G_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return stringFromXMLGregorianCalendar(xgc,schemaType);
  }
 else   if (Constants.G_MONTH_DAY_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    xgc.setDay(cal.get(Calendar.DAY_OF_MONTH));
    return xgc.toXMLFormat();
  }
 else   if (Constants.G_YEAR_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    return xgc.toXMLFormat();
  }
 else   if (Constants.G_YEAR_MONTH_QNAME.equals(schemaType)) {
    XMLGregorianCalendar xgc=getDatatypeFactory().newXMLGregorianCalendar();
    GregorianCalendar cal=new GregorianCalendar(getTimeZone());
    cal.setGregorianChange(new Date(Long.MIN_VALUE));
    cal.setTime(sourceTime);
    if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
      xgc.setYear(-cal.get(Calendar.YEAR));
    }
 else {
      xgc.setYear(cal.get(Calendar.YEAR));
    }
    xgc.setMonth(cal.get(Calendar.MONTH) + 1);
    return xgc.toXMLFormat();
  }
 else   if (Constants.DURATION_QNAME.equals(schemaType)) {
    throw new IllegalArgumentException();
  }
 else {
    return stringFromSQLTime(sourceTime);
  }
}","private String stringFromSQLTime(Time sourceTime,QName schemaType){
  if (null == schemaType) {
    return stringFromSQLTime(sourceTime);
  }
 else {
    return stringFromDate(sourceTime,schemaType);
  }
}"
63661,"private String appendTimeZone(String string,Date date){
  if (!timeZoneQualified) {
    return string;
  }
  StringBuilder stringBuilder=new StringBuilder(string);
  int rawMinuteOffset=getTimeZone().getOffset(date.getTime()) / 60000;
  if (0 == rawMinuteOffset) {
    stringBuilder.append(GMT_SUFFIX);
    return stringBuilder.toString();
  }
  if (rawMinuteOffset < 0) {
    stringBuilder.append('-');
    rawMinuteOffset=Math.abs(rawMinuteOffset);
  }
 else {
    stringBuilder.append('+');
  }
  int hourOffset=rawMinuteOffset / 60;
  if (hourOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(hourOffset);
  stringBuilder.append(Constants.COLON);
  int minuteOffset=rawMinuteOffset % 60;
  if (minuteOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(minuteOffset);
  return stringBuilder.toString();
}","private String appendTimeZone(String string,Date date){
  StringBuilder stringBuilder=new StringBuilder(string);
  int rawMinuteOffset=getTimeZone().getOffset(date.getTime()) / 60000;
  if (0 == rawMinuteOffset) {
    stringBuilder.append(GMT_SUFFIX);
    return stringBuilder.toString();
  }
  if (rawMinuteOffset < 0) {
    stringBuilder.append('-');
    rawMinuteOffset=Math.abs(rawMinuteOffset);
  }
 else {
    stringBuilder.append('+');
  }
  int hourOffset=rawMinuteOffset / 60;
  if (hourOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(hourOffset);
  stringBuilder.append(Constants.COLON);
  int minuteOffset=rawMinuteOffset % 60;
  if (minuteOffset < 10) {
    stringBuilder.append('0');
  }
  stringBuilder.append(minuteOffset);
  return stringBuilder.toString();
}"
63662,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field field=null;
  Object value=this.getCharacters();
  Class attributeClassification=null;
  AbstractNullPolicy nullPolicy;
  boolean isSwaRef=false;
  CoreContainerPolicy cp=null;
  if (isCollection) {
    isSwaRef=((BinaryDataCollectionMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    nullPolicy=((BinaryDataCollectionMapping)mapping).getNullPolicy();
    cp=((BinaryDataCollectionMapping)mapping).getContainerPolicy();
  }
 else {
    isSwaRef=((BinaryDataMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataMapping)mapping).getField();
    attributeClassification=((BinaryDataMapping)mapping).getAttributeClassification();
    nullPolicy=((BinaryDataMapping)mapping).getNullPolicy();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(getCharacters(),attributeClassification);
    if (parent.isNil() && parent.getXMLReader().isNullRepresentedByXsiNil(nullPolicy)) {
      value=null;
      isCollection=isCollection && parent.getXMLReader().isInCollection();
    }
 else {
      if (null != valueFromReader) {
        value=valueFromReader;
      }
 else {
        String valueString=value.toString();
        if (valueString.length() == 0 && nullPolicy.isNullRepresentedByEmptyNode()) {
          value=null;
        }
 else {
          if (field.usesSingleNode()) {
            value=parent.getConversionManager().convertSchemaBase64ListToByteArrayList(valueString,cp,parent.getSession());
          }
 else {
            value=parent.getConversionManager().convertSchemaBase64ToByteArray(valueString);
          }
        }
      }
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession(),cp);
    }
  }
  value=converter.convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
  if (isCollection) {
    parent.addAttributeValue((ContainerValue)nodeValue,value);
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field field=null;
  Object value=this.getCharacters();
  boolean isHex=Constants.HEX_BINARY_QNAME.equals(((XMLField)this.mapping.getField()).getSchemaType());
  Class attributeClassification=null;
  AbstractNullPolicy nullPolicy;
  boolean isSwaRef=false;
  CoreContainerPolicy cp=null;
  if (isCollection) {
    isSwaRef=((BinaryDataCollectionMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    nullPolicy=((BinaryDataCollectionMapping)mapping).getNullPolicy();
    cp=((BinaryDataCollectionMapping)mapping).getContainerPolicy();
  }
 else {
    isSwaRef=((BinaryDataMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataMapping)mapping).getField();
    attributeClassification=((BinaryDataMapping)mapping).getAttributeClassification();
    nullPolicy=((BinaryDataMapping)mapping).getNullPolicy();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(getCharacters(),attributeClassification);
    if (parent.isNil() && parent.getXMLReader().isNullRepresentedByXsiNil(nullPolicy)) {
      value=null;
      isCollection=isCollection && parent.getXMLReader().isInCollection();
    }
 else {
      if (null != valueFromReader) {
        value=valueFromReader;
      }
 else {
        String valueString=value.toString();
        if (valueString.length() == 0 && nullPolicy.isNullRepresentedByEmptyNode()) {
          value=null;
        }
 else {
          if (field.usesSingleNode()) {
            if (isHex) {
              value=parent.getConversionManager().convertHexBinaryListToByteArrayList(valueString,cp,parent.getSession());
            }
 else {
              value=parent.getConversionManager().convertSchemaBase64ListToByteArrayList(valueString,cp,parent.getSession());
            }
          }
 else {
            if (isHex) {
              value=parent.getConversionManager().convertObject(valueString,ClassConstants.APBYTE,Constants.HEX_BINARY_QNAME);
            }
 else {
              value=parent.getConversionManager().convertSchemaBase64ToByteArray(valueString);
            }
          }
        }
      }
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession(),cp);
    }
  }
  value=converter.convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
  if (isCollection) {
    parent.addAttributeValue((ContainerValue)nodeValue,value);
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}"
63663,"public Mapping generateMappingForReferenceProperty(Property property,Descriptor descriptor,NamespaceInfo namespaceInfo){
  boolean isCollection=helper.isCollectionType(property.getType()) || property.getType().isArray();
  Mapping mapping;
  if (isCollection) {
    mapping=new XMLChoiceCollectionMapping();
    initializeXMLContainerMapping((ChoiceCollectionMapping)mapping,property.getType().isArray());
    JavaClass collectionType=property.getType();
    collectionType=containerClassImpl(collectionType);
    ((ChoiceCollectionMapping)mapping).useCollectionClassName(collectionType.getRawName());
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((ChoiceCollectionMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((ChoiceCollectionMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
    if (property.isSetXmlElementWrapper()) {
      ((ChoiceCollectionMapping)mapping).setWrapperNullPolicy(getWrapperNullPolicyFromProperty(property));
    }
  }
 else {
    mapping=new XMLChoiceObjectMapping();
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((ChoiceObjectMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((ChoiceObjectMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
  initializeXMLMapping((XMLMapping)mapping,property);
  List<ElementDeclaration> referencedElements=property.getReferencedElements();
  JavaClass propertyType=property.getType();
  if (propertyType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    accessor.setComponentClassName(property.getType().getComponentType().getQualifiedName());
    JavaClass componentType=propertyType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getQualifiedName());
      accessor.setAdaptedClassName(adaptedClass.getName());
    }
    mapping.setAttributeAccessor(accessor);
  }
  String wrapperXPath=""String_Node_Str"";
  if (property.isSetXmlElementWrapper()) {
    XmlElementWrapper wrapper=property.getXmlElementWrapper();
    String namespace=wrapper.getNamespace();
    if (namespace.equals(XMLProcessor.DEFAULT)) {
      if (namespaceInfo.isElementFormQualified()) {
        namespace=namespaceInfo.getNamespace();
      }
 else {
        namespace=""String_Node_Str"";
      }
    }
    if (namespace.equals(""String_Node_Str"")) {
      wrapperXPath+=(wrapper.getName() + ""String_Node_Str"");
    }
 else {
      String prefix=getPrefixForNamespace(namespace,namespaceInfo.getNamespaceResolver());
      wrapperXPath+=getQualifiedString(prefix,wrapper.getName() + ""String_Node_Str"");
    }
  }
  if (property.isMixedContent() && isCollection) {
    if (wrapperXPath.length() == 0) {
      ((ChoiceCollectionMapping)mapping).setMixedContent(true);
    }
 else {
      ((ChoiceCollectionMapping)mapping).setMixedContent(wrapperXPath.substring(0,wrapperXPath.length() - 1));
    }
  }
  for (  ElementDeclaration element : referencedElements) {
    QName elementName=element.getElementName();
    JavaClass pType=element.getJavaType();
    String pTypeName=element.getJavaTypeName();
    boolean isBinaryType=(areEquals(pType,AnnotationsProcessor.JAVAX_ACTIVATION_DATAHANDLER) || areEquals(pType,byte[].class) || areEquals(pType,Image.class)|| areEquals(pType,Source.class)|| areEquals(pType,AnnotationsProcessor.JAVAX_MAIL_INTERNET_MIMEMULTIPART));
    boolean isText=pType.isEnum() || (!isBinaryType && !(this.typeInfo.containsKey(element.getJavaTypeName())) && !(element.getJavaTypeName().equals(OBJECT_CLASS_NAME)));
    String xPath=wrapperXPath;
    Field xmlField=this.getXPathForElement(xPath,elementName,namespaceInfo,isText);
    if (helper.getXMLToJavaTypeMap().get(pType.getRawName()) == Constants.BASE_64_BINARY_QNAME) {
      xmlField.setSchemaType(Constants.BASE_64_BINARY_QNAME);
    }
    if (areEquals(pType,Object.class)) {
      setTypedTextField(xmlField);
    }
    Mapping nestedMapping;
    AbstractNullPolicy nullPolicy=null;
    if (isCollection) {
      ChoiceCollectionMapping xmlChoiceCollectionMapping=(ChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.addChoiceElement(xmlField,pTypeName);
      nestedMapping=(Mapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        ((CompositeCollectionMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        nullPolicy=((CompositeCollectionMapping)nestedMapping).getNullPolicy();
      }
      if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        DirectCollectionMapping nestedCompositeDirectCollectionMapping=(DirectCollectionMapping)nestedMapping;
        nullPolicy=nestedCompositeDirectCollectionMapping.getNullPolicy();
        if (pType.isEnum()) {
          TypeInfo enumTypeInfo=typeInfo.get(pType.getQualifiedName());
          nestedCompositeDirectCollectionMapping.setValueConverter(buildJAXBEnumTypeConverter(nestedCompositeDirectCollectionMapping,(EnumTypeInfo)enumTypeInfo));
        }
        if (element.isList()) {
          XMLListConverter listConverter=new XMLListConverter();
          listConverter.setObjectClassName(pType.getQualifiedName());
          ((DirectCollectionMapping)nestedMapping).setValueConverter(listConverter);
        }
      }
 else       if (nestedMapping instanceof BinaryDataCollectionMapping) {
        nullPolicy=((BinaryDataCollectionMapping)nestedMapping).getNullPolicy();
        if (element.isList()) {
          ((XMLField)((BinaryDataCollectionMapping)nestedMapping).getField()).setUsesSingleNode(true);
        }
      }
    }
 else {
      ChoiceObjectMapping xmlChoiceObjectMapping=(ChoiceObjectMapping)mapping;
      xmlChoiceObjectMapping.addChoiceElement(xmlField,pTypeName);
      nestedMapping=(Mapping)xmlChoiceObjectMapping.getChoiceElementMappings().get(xmlField);
      if (pType.isEnum()) {
        TypeInfo enumTypeInfo=typeInfo.get(pType.getQualifiedName());
        ((DirectMapping)nestedMapping).setConverter(buildJAXBEnumTypeConverter(nestedMapping,(EnumTypeInfo)enumTypeInfo));
      }
      if (nestedMapping.isAbstractCompositeObjectMapping()) {
        ((CompositeObjectMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        nullPolicy=((CompositeObjectMapping)nestedMapping).getNullPolicy();
      }
 else       if (nestedMapping instanceof BinaryDataMapping) {
        nullPolicy=((BinaryDataMapping)nestedMapping).getNullPolicy();
      }
 else       if (nestedMapping instanceof DirectMapping) {
        nullPolicy=((DirectMapping)nestedMapping).getNullPolicy();
      }
    }
    if (nullPolicy != null) {
      nullPolicy.setNullRepresentedByEmptyNode(false);
      nullPolicy.setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
      nullPolicy.setNullRepresentedByXsiNil(true);
    }
    if (!element.isXmlRootElement()) {
      Class scopeClass=element.getScopeClass();
      if (scopeClass == javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class) {
        scopeClass=JAXBElement.GlobalScope.class;
      }
      Class declaredType=null;
      if (element.getAdaptedJavaType() != null) {
        declaredType=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(element.getAdaptedJavaType().getQualifiedName(),helper.getClassLoader());
      }
 else {
        declaredType=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(pType.getQualifiedName(),helper.getClassLoader());
      }
      JAXBElementConverter converter=new JAXBElementConverter(xmlField,declaredType,scopeClass);
      if (isCollection) {
        ChoiceCollectionMapping xmlChoiceCollectionMapping=(ChoiceCollectionMapping)mapping;
        if (element.getJavaTypeAdapterClass() != null) {
          converter.setNestedConverter(new XMLJavaTypeConverter(element.getJavaTypeAdapterClass().getName()));
        }
 else {
          CoreConverter originalConverter=xmlChoiceCollectionMapping.getConverter(xmlField);
          converter.setNestedConverter(originalConverter);
        }
        xmlChoiceCollectionMapping.addConverter(xmlField,converter);
      }
 else {
        ChoiceObjectMapping xmlChoiceObjectMapping=(ChoiceObjectMapping)mapping;
        if (element.getJavaTypeAdapterClass() != null) {
          converter.setNestedConverter(new XMLJavaTypeConverter(element.getJavaTypeAdapterClass().getName()));
        }
 else {
          CoreConverter originalConverter=xmlChoiceObjectMapping.getConverter(xmlField);
          converter.setNestedConverter(originalConverter);
        }
        xmlChoiceObjectMapping.addConverter(xmlField,converter);
      }
    }
  }
  if (property.isAny()) {
    if (isCollection) {
      XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.setIsAny(true);
    }
 else {
      XMLChoiceObjectMapping xmlChoiceObjectMapping=(XMLChoiceObjectMapping)mapping;
    }
  }
  return mapping;
}","public Mapping generateMappingForReferenceProperty(Property property,Descriptor descriptor,NamespaceInfo namespaceInfo){
  boolean isCollection=helper.isCollectionType(property.getType()) || property.getType().isArray();
  Mapping mapping;
  if (isCollection) {
    mapping=new XMLChoiceCollectionMapping();
    initializeXMLContainerMapping((ChoiceCollectionMapping)mapping,property.getType().isArray());
    JavaClass collectionType=property.getType();
    collectionType=containerClassImpl(collectionType);
    ((ChoiceCollectionMapping)mapping).useCollectionClassName(collectionType.getRawName());
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((ChoiceCollectionMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((ChoiceCollectionMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
    if (property.isSetXmlElementWrapper()) {
      ((ChoiceCollectionMapping)mapping).setWrapperNullPolicy(getWrapperNullPolicyFromProperty(property));
    }
  }
 else {
    mapping=new XMLChoiceObjectMapping();
    JAXBElementRootConverter jaxbERConverter=new JAXBElementRootConverter(Object.class);
    if (property.isSetXmlJavaTypeAdapter()) {
      JavaClass adapterClass=helper.getJavaClass(property.getXmlJavaTypeAdapter().getValue());
      jaxbERConverter.setNestedConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
    }
    ((ChoiceObjectMapping)mapping).setConverter(jaxbERConverter);
    if (property.isSetWriteOnly()) {
      ((ChoiceObjectMapping)mapping).setIsWriteOnly(property.isWriteOnly());
    }
  }
  initializeXMLMapping((XMLMapping)mapping,property);
  List<ElementDeclaration> referencedElements=property.getReferencedElements();
  JavaClass propertyType=property.getType();
  if (propertyType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    accessor.setComponentClassName(property.getType().getComponentType().getQualifiedName());
    JavaClass componentType=propertyType.getComponentType();
    if (componentType.isArray()) {
      Class adaptedClass=classToGeneratedClasses.get(componentType.getQualifiedName());
      accessor.setAdaptedClassName(adaptedClass.getName());
    }
    mapping.setAttributeAccessor(accessor);
  }
  String wrapperXPath=""String_Node_Str"";
  if (property.isSetXmlElementWrapper()) {
    XmlElementWrapper wrapper=property.getXmlElementWrapper();
    String namespace=wrapper.getNamespace();
    if (namespace.equals(XMLProcessor.DEFAULT)) {
      if (namespaceInfo.isElementFormQualified()) {
        namespace=namespaceInfo.getNamespace();
      }
 else {
        namespace=""String_Node_Str"";
      }
    }
    if (namespace.equals(""String_Node_Str"")) {
      wrapperXPath+=(wrapper.getName() + ""String_Node_Str"");
    }
 else {
      String prefix=getPrefixForNamespace(namespace,namespaceInfo.getNamespaceResolver());
      wrapperXPath+=getQualifiedString(prefix,wrapper.getName() + ""String_Node_Str"");
    }
  }
  if (property.isMixedContent() && isCollection) {
    if (wrapperXPath.length() == 0) {
      ((ChoiceCollectionMapping)mapping).setMixedContent(true);
    }
 else {
      ((ChoiceCollectionMapping)mapping).setMixedContent(wrapperXPath.substring(0,wrapperXPath.length() - 1));
    }
  }
  for (  ElementDeclaration element : referencedElements) {
    QName elementName=element.getElementName();
    JavaClass pType=element.getJavaType();
    String pTypeName=element.getJavaTypeName();
    boolean isBinaryType=(areEquals(pType,AnnotationsProcessor.JAVAX_ACTIVATION_DATAHANDLER) || areEquals(pType,byte[].class) || areEquals(pType,Image.class)|| areEquals(pType,Source.class)|| areEquals(pType,AnnotationsProcessor.JAVAX_MAIL_INTERNET_MIMEMULTIPART));
    boolean isText=pType.isEnum() || (!isBinaryType && !(this.typeInfo.containsKey(element.getJavaTypeName())) && !(element.getJavaTypeName().equals(OBJECT_CLASS_NAME)));
    String xPath=wrapperXPath;
    Field xmlField=this.getXPathForElement(xPath,elementName,namespaceInfo,isText);
    if (helper.getXMLToJavaTypeMap().get(pType.getRawName()) == Constants.BASE_64_BINARY_QNAME) {
      xmlField.setSchemaType(Constants.BASE_64_BINARY_QNAME);
    }
    if (areEquals(pType,Object.class)) {
      setTypedTextField(xmlField);
    }
    Mapping nestedMapping;
    AbstractNullPolicy nullPolicy=null;
    if (isCollection) {
      ChoiceCollectionMapping xmlChoiceCollectionMapping=(ChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.addChoiceElement(xmlField,pTypeName);
      nestedMapping=(Mapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        ((CompositeCollectionMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        nullPolicy=((CompositeCollectionMapping)nestedMapping).getNullPolicy();
      }
      if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        DirectCollectionMapping nestedCompositeDirectCollectionMapping=(DirectCollectionMapping)nestedMapping;
        nullPolicy=nestedCompositeDirectCollectionMapping.getNullPolicy();
        if (pType.isEnum()) {
          TypeInfo enumTypeInfo=typeInfo.get(pType.getQualifiedName());
          nestedCompositeDirectCollectionMapping.setValueConverter(buildJAXBEnumTypeConverter(nestedCompositeDirectCollectionMapping,(EnumTypeInfo)enumTypeInfo));
        }
        if (element.isList()) {
          XMLListConverter listConverter=new XMLListConverter();
          listConverter.setObjectClassName(pType.getQualifiedName());
          ((DirectCollectionMapping)nestedMapping).setValueConverter(listConverter);
        }
      }
 else       if (nestedMapping instanceof BinaryDataCollectionMapping) {
        nullPolicy=((BinaryDataCollectionMapping)nestedMapping).getNullPolicy();
        if (element.isList()) {
          ((XMLField)((BinaryDataCollectionMapping)nestedMapping).getField()).setUsesSingleNode(true);
        }
      }
    }
 else {
      ChoiceObjectMapping xmlChoiceObjectMapping=(ChoiceObjectMapping)mapping;
      xmlChoiceObjectMapping.addChoiceElement(xmlField,pTypeName);
      nestedMapping=(Mapping)xmlChoiceObjectMapping.getChoiceElementMappings().get(xmlField);
      if (pType.isEnum()) {
        TypeInfo enumTypeInfo=typeInfo.get(pType.getQualifiedName());
        ((DirectMapping)nestedMapping).setConverter(buildJAXBEnumTypeConverter(nestedMapping,(EnumTypeInfo)enumTypeInfo));
      }
      if (nestedMapping.isAbstractCompositeObjectMapping()) {
        ((CompositeObjectMapping)nestedMapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
        nullPolicy=((CompositeObjectMapping)nestedMapping).getNullPolicy();
      }
 else       if (nestedMapping instanceof BinaryDataMapping) {
        nullPolicy=((BinaryDataMapping)nestedMapping).getNullPolicy();
      }
 else       if (nestedMapping instanceof DirectMapping) {
        nullPolicy=((DirectMapping)nestedMapping).getNullPolicy();
      }
    }
    if (nullPolicy != null) {
      nullPolicy.setNullRepresentedByEmptyNode(false);
      nullPolicy.setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
      nullPolicy.setNullRepresentedByXsiNil(true);
    }
    if (!element.isXmlRootElement()) {
      Class scopeClass=element.getScopeClass();
      if (scopeClass == javax.xml.bind.annotation.XmlElementDecl.GLOBAL.class) {
        scopeClass=JAXBElement.GlobalScope.class;
      }
      Class declaredType=null;
      if (element.getAdaptedJavaType() != null) {
        declaredType=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(element.getAdaptedJavaType().getQualifiedName(),helper.getClassLoader());
      }
 else {
        declaredType=org.eclipse.persistence.internal.helper.Helper.getClassFromClasseName(pType.getQualifiedName(),helper.getClassLoader());
      }
      JAXBElementConverter converter=new JAXBElementConverter(xmlField,declaredType,scopeClass);
      if (isCollection) {
        ChoiceCollectionMapping xmlChoiceCollectionMapping=(ChoiceCollectionMapping)mapping;
        if (element.getJavaTypeAdapterClass() != null) {
          converter.setNestedConverter(new XMLJavaTypeConverter(element.getJavaTypeAdapterClass().getName()));
        }
 else {
          CoreConverter originalConverter=xmlChoiceCollectionMapping.getConverter(xmlField);
          converter.setNestedConverter(originalConverter);
        }
        xmlChoiceCollectionMapping.addConverter(xmlField,converter);
      }
 else {
        ChoiceObjectMapping xmlChoiceObjectMapping=(ChoiceObjectMapping)mapping;
        if (element.getJavaTypeAdapterClass() != null) {
          converter.setNestedConverter(new XMLJavaTypeConverter(element.getJavaTypeAdapterClass().getName()));
        }
 else {
          CoreConverter originalConverter=xmlChoiceObjectMapping.getConverter(xmlField);
          converter.setNestedConverter(originalConverter);
        }
        xmlChoiceObjectMapping.addConverter(xmlField,converter);
      }
    }
  }
  if (property.isAny()) {
    if (isCollection) {
      XMLChoiceCollectionMapping xmlChoiceCollectionMapping=(XMLChoiceCollectionMapping)mapping;
      xmlChoiceCollectionMapping.setIsAny(true);
    }
  }
  return mapping;
}"
63664,"public void testFailedGetIdenitifier(){
  EntityManagerFactory factory=(EntityManagerFactory)JpaHelper.getEntityManagerFactory(createEntityManager());
  Cubicle cube=new Cubicle();
  cube.setId(1);
  cube.setCode(""String_Node_Str"");
  try {
    factory.getPersistenceUnitUtil().getIdentifier(cube);
  }
 catch (  PersistenceException e) {
    return;
  }
  fail(""String_Node_Str"");
}","public void testFailedGetIdenitifier(){
  EntityManagerFactory factory=getEntityManagerFactory();
  Cubicle cube=new Cubicle();
  cube.setId(1);
  cube.setCode(""String_Node_Str"");
  try {
    factory.getPersistenceUnitUtil().getIdentifier(cube);
  }
 catch (  PersistenceException e) {
    return;
  }
  fail(""String_Node_Str"");
}"
63665,"/** 
 * Test unmarshal by reference non existing nested object.
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws JAXBException the jAXB exception
 */
@Test(expected=ConversionException.class) public void testUnmarshalByReferenceNonExistingNestedObject() throws IOException, JAXBException {
  String jsonMessage=RestUtils.getJSONMessage(""String_Node_Str"");
  assertTrue(jsonMessage != null);
  unmarshal(jsonMessage,StaticAuction.class.getSimpleName());
}","/** 
 * Test unmarshal by reference non existing nested object.
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws JAXBException the jAXB exception
 */
@Test public void testUnmarshalByReferenceNonExistingNestedObject() throws IOException, JAXBException {
  String jsonMessage=RestUtils.getJSONMessage(""String_Node_Str"");
  assertTrue(jsonMessage != null);
  try {
    unmarshal(jsonMessage,StaticAuction.class.getSimpleName());
  }
 catch (  JPARSException ex) {
    assertTrue(ex.getErrorCode() == JPARSErrorCodes.OBJECT_REFERRED_BY_LINK_DOES_NOT_EXIST);
  }
}"
63666,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof Root) {
    Root xmlRoot=(Root)objectValue;
    xmlRootFrag=new XPathFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + Constants.COLON + xmlRoot.getLocalName());
      xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
    }
 else {
      xmlRootFrag.setXPath(xmlRoot.getLocalName());
      if (xmlRoot.getNamespaceURI() != null && xmlRoot.getNamespaceURI().length() > 0) {
        xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
      }
    }
  }
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlBinaryDataMapping.convertObjectValueToDataValue(objectValue,session,marshaller);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    if (objectValue == null) {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (objectValue == null) {
      XPathNode holderXPathNode=new XPathNode();
      holderXPathNode.setXPathFragment(elementFragment);
      marshalRecord.addGroupingElement(holderXPathNode);
      boolean returnVal=xmlBinaryDataMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
      if (returnVal) {
        marshalRecord.endElement(elementFragment,namespaceResolver);
      }
      marshalRecord.removeGroupingElement(holderXPathNode);
      return returnVal;
    }
 else     if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  String attachmentType=mimeType;
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
    attachmentType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((Field)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == CoreClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,attachmentType,localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(Constants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=Constants.XOP_PREFIX;
          namespaceResolver=new org.eclipse.persistence.oxm.NamespaceResolver();
          namespaceResolver.put(xopPrefix,Constants.XOP_URL);
        }
        XPathFragment xopInclude=new XPathFragment(xopPrefix + ""String_Node_Str"");
        xopInclude.setNamespaceURI(Constants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(Constants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,Constants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext,XPathFragment rootFragment){
  XPathFragment xmlRootFrag=null;
  if (objectValue instanceof Root) {
    Root xmlRoot=(Root)objectValue;
    xmlRootFrag=new XPathFragment();
    if (xmlRoot.getNamespaceURI() != null && !xmlRoot.getNamespaceURI().equals(namespaceResolver.getDefaultNamespaceURI())) {
      String prefix=namespaceResolver.resolveNamespaceURI(xmlRoot.getNamespaceURI());
      xmlRootFrag.setXPath(prefix + Constants.COLON + xmlRoot.getLocalName());
      xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
    }
 else {
      xmlRootFrag.setXPath(xmlRoot.getLocalName());
      if (xmlRoot.getNamespaceURI() != null && xmlRoot.getNamespaceURI().length() > 0) {
        xmlRootFrag.setNamespaceURI(xmlRoot.getNamespaceURI());
      }
    }
  }
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlBinaryDataMapping.convertObjectValueToDataValue(objectValue,session,marshaller);
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.isAttribute()) {
    if (objectValue == null) {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    XPathFragment elementFragment=xPathFragment;
    if (xmlRootFrag != null) {
      elementFragment=xmlRootFrag;
    }
    if (objectValue == null) {
      XPathNode holderXPathNode=new XPathNode();
      holderXPathNode.setXPathFragment(elementFragment);
      marshalRecord.addGroupingElement(holderXPathNode);
      boolean returnVal=xmlBinaryDataMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
      if (returnVal) {
        marshalRecord.endElement(elementFragment,namespaceResolver);
      }
      marshalRecord.removeGroupingElement(holderXPathNode);
      return returnVal;
    }
 else     if (!xPathFragment.isSelfFragment) {
      marshalRecord.openStartElement(elementFragment,namespaceResolver);
      marshalRecord.closeStartElement();
    }
  }
  String c_id=null;
  byte[] bytes=null;
  String mimeType=this.xmlBinaryDataMapping.getMimeType(object);
  String attachmentType=mimeType;
  if (mimeType == null) {
    mimeType=""String_Node_Str"";
    attachmentType=""String_Node_Str"";
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment((DataHandler)objectValue);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addSwaRefAttachment(bytes,0,bytes.length);
    }
  }
 else   if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
    XPathFragment lastFrag=((Field)xmlBinaryDataMapping.getField()).getLastXPathFragment();
    if (xmlRootFrag != null) {
      lastFrag=xmlRootFrag;
    }
    String localName=null;
    String namespaceUri=null;
    if (rootFragment != null) {
      localName=rootFragment.getLocalName();
      namespaceUri=rootFragment.getNamespaceURI();
    }
    if (!lastFrag.isSelfFragment) {
      localName=lastFrag.getLocalName();
      namespaceUri=lastFrag.getNamespaceURI();
    }
    if (objectValue.getClass() == CoreClassConstants.APBYTE) {
      bytes=(byte[])objectValue;
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,attachmentType,localName,namespaceUri);
    }
 else     if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment((DataHandler)objectValue,localName,namespaceUri);
    }
 else {
      XMLBinaryDataHelper.EncodedData data=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(objectValue,marshaller,xmlBinaryDataMapping.getMimeType(object));
      bytes=data.getData();
      c_id=marshaller.getAttachmentMarshaller().addMtomAttachment(bytes,0,bytes.length,data.getMimeType(),localName,namespaceUri);
    }
  }
  if (xPathFragment.isAttribute()) {
    if (c_id != null) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,c_id);
    }
 else {
      String value=getValueToWrite(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,value);
    }
    marshalRecord.closeStartGroupingElements(groupingFragment);
    return true;
  }
  if (xmlBinaryDataMapping.isSwaRef() && (marshaller.getAttachmentMarshaller() != null)) {
    if (c_id != null) {
      marshalRecord.characters(c_id);
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
 else {
    if (marshalRecord.isXOPPackage() && !xmlBinaryDataMapping.shouldInlineBinaryData()) {
      if (c_id == null) {
        marshalRecord.characters(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
      }
 else {
        String xopPrefix=null;
        if (namespaceResolver != null) {
          xopPrefix=namespaceResolver.resolveNamespaceURI(Constants.XOP_URL);
        }
        boolean addDeclaration=false;
        if (xopPrefix == null || namespaceResolver == null) {
          addDeclaration=true;
          xopPrefix=Constants.XOP_PREFIX;
        }
        XPathFragment xopInclude=new XPathFragment();
        xopInclude.setLocalName(""String_Node_Str"");
        xopInclude.setPrefix(xopPrefix);
        xopInclude.setNamespaceURI(Constants.XOP_URL);
        marshalRecord.openStartElement(xopInclude,namespaceResolver);
        marshalRecord.attribute(Constants.EMPTY_STRING,""String_Node_Str"",""String_Node_Str"",c_id);
        if (addDeclaration) {
          marshalRecord.namespaceDeclaration(xopPrefix,Constants.XOP_URL);
        }
        marshalRecord.closeStartElement();
        marshalRecord.endElement(xopInclude,namespaceResolver);
      }
    }
 else {
      marshalRecord.characters(((Field)xmlBinaryDataMapping.getField()).getSchemaType(),objectValue,mimeType,false);
    }
  }
  if (!xPathFragment.isSelfFragment()) {
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
63667,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (Constants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    if (xPathFragment.hasAttribute) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters(schemaType,fieldValue,null,xmlDirectMapping.isCDATA());
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (Constants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    if (xPathFragment.hasAttribute) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      if (((Field)xmlDirectMapping.getField()).getXPathFragment().nameIsText) {
        XPathNode parentNode=xPathNode.getParent();
        if (parentNode.getAttributeChildren() != null) {
          marshalRecord.forceValueWrapper();
        }
      }
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters(schemaType,fieldValue,null,xmlDirectMapping.isCDATA());
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}"
63668,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (currentObject == null) {
    initializeRecord(atts);
  }
  XPathFragment xPathNodeXPathFragment=xPathNode.getXPathFragment();
  if ((null != xPathNodeXPathFragment && xPathNodeXPathFragment.nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (xPathNodeUnmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)xPathNodeUnmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      if (isIncludedInAttributeGroup) {
        xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
        if (xPathNode.getParent() != null) {
          xPathNode=xPathNode.getParent();
        }
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node && xPathNode.getTextNode() != null) {
      XPathFragment textWrapperFragment=getTextWrapperFragment();
      if (textWrapperFragment != null && localName.equals(textWrapperFragment.getLocalName())) {
        node=xPathNode.getTextNode();
      }
    }
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      String xsiNilValue=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
      if (xsiNilValue != null) {
        isXsiNil=xsiNilValue.equals(Constants.BOOLEAN_STRING_TRUE) || xsiNilValue.equals(""String_Node_Str"");
      }
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        boolean isIncludedInAttributeGroup=true;
        if (nodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)nodeValue).getMapping();
          isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
        }
        if (!isIncludedInAttributeGroup || !nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if (qname != null) {
              int qnameLength=qname.length();
              if (qnameLength > 0) {
                int idx=qname.indexOf(Constants.COLON);
                if (idx > 0) {
                  attLocalName=qname.substring(idx + 1,qnameLength);
                  String attPrefix=qname.substring(0,idx);
                  if (attPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
 else {
                  attLocalName=qname;
                  if (attLocalName.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                if (attributeNodeValue.isMappingNodeValue()) {
                  Mapping mapping=((MappingNodeValue)attributeNodeValue).getMapping();
                  if (!unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName())) {
                    continue;
                  }
                }
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (currentObject == null) {
    initializeRecord(atts);
  }
  XPathFragment xPathNodeXPathFragment=xPathNode.getXPathFragment();
  if ((null != xPathNodeXPathFragment && xPathNodeXPathFragment.nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (xPathNodeUnmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)xPathNodeUnmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      if (isIncludedInAttributeGroup) {
        xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
        if (xPathNode.getParent() != null) {
          xPathNode=xPathNode.getParent();
        }
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node && xPathNode.getTextNode() != null) {
      XPathFragment textWrapperFragment=getTextWrapperFragment();
      if (textWrapperFragment != null && localName.equals(textWrapperFragment.getLocalName())) {
        node=xPathNode.getTextNode();
      }
    }
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      String xsiNilValue=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
      if (xsiNilValue != null) {
        isXsiNil=xsiNilValue.equals(Constants.BOOLEAN_STRING_TRUE) || xsiNilValue.equals(""String_Node_Str"");
      }
      if (node.getNullCapableValue() != null) {
        getNullCapableValues().add(node.getNullCapableValue());
      }
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        boolean isIncludedInAttributeGroup=true;
        if (nodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)nodeValue).getMapping();
          isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
        }
        if (!isIncludedInAttributeGroup || !nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if (qname != null) {
              int qnameLength=qname.length();
              if (qnameLength > 0) {
                int idx=qname.indexOf(Constants.COLON);
                if (idx > 0) {
                  attLocalName=qname.substring(idx + 1,qnameLength);
                  String attPrefix=qname.substring(0,idx);
                  if (attPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
 else {
                  attLocalName=qname;
                  if (attLocalName.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                if (attributeNodeValue.isMappingNodeValue()) {
                  Mapping mapping=((MappingNodeValue)attributeNodeValue).getMapping();
                  if (!unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName())) {
                    continue;
                  }
                }
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
63669,"public void xPathNode(XPathNode xPathNode,NullCapableValue nullCapableValue){
  if (!(isNullRepresentedByXsiNil() || marshalNullRepresentation == XMLNullRepresentationType.XSI_NIL)) {
    if (xPathNode.getXPathFragment().isAttribute()) {
      return;
    }
  }
  XPathNode parentNode=xPathNode.getParent();
  if (isNullRepresentedByXsiNil() || marshalNullRepresentation == XMLNullRepresentationType.XSI_NIL) {
    XPathFragment xPathFragment=new XPathFragment();
    xPathFragment.setXPath('@' + Constants.SCHEMA_NIL_ATTRIBUTE);
    xPathFragment.setNamespaceURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI);
    NodeValue aNodeValue=new NillableNodeValue(nullCapableValue);
    parentNode.addChild(xPathFragment,aNodeValue,null);
  }
 else {
    NodeValue aNodeValue=new OptionalNodeValue(nullCapableValue);
    parentNode.setNodeValue(aNodeValue);
  }
}","public void xPathNode(XPathNode xPathNode,NullCapableValue nullCapableValue){
  if (!(isNullRepresentedByXsiNil() || marshalNullRepresentation == XMLNullRepresentationType.XSI_NIL)) {
    if (xPathNode.getXPathFragment().isAttribute()) {
      return;
    }
  }
  XPathNode parentNode=xPathNode.getParent();
  parentNode.setNullCapableValue(nullCapableValue);
}"
63670,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=directMapping.getFieldValue(objectValue,session,marshalRecord);
  if ((null == fieldValue) || (null == namespaceResolver)) {
    return false;
  }
  Field xmlField=(Field)directMapping.getField();
  QName schemaType=getSchemaType(xmlField,fieldValue,session);
  if (null == schemaType) {
    return false;
  }
  if (xmlField.getSchemaType() == null) {
    if (schemaType.equals(Constants.STRING_QNAME)) {
      return false;
    }
  }
 else {
    if (xmlField.isSchemaType(schemaType)) {
      return false;
    }
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  String typeQName=namespaceResolver.resolveNamespaceURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) + Constants.COLON + Constants.SCHEMA_TYPE_ATTRIBUTE;
  String schemaTypePrefix=namespaceResolver.resolveNamespaceURI(schemaType.getNamespaceURI());
  if (schemaTypePrefix == null) {
    if (javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(schemaType.getNamespaceURI())) {
      schemaTypePrefix=namespaceResolver.generatePrefix(Constants.SCHEMA_PREFIX);
    }
 else {
      schemaTypePrefix=namespaceResolver.generatePrefix();
    }
    marshalRecord.namespaceDeclaration(schemaTypePrefix,schemaType.getNamespaceURI());
  }
  marshalRecord.attribute(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_TYPE_ATTRIBUTE,typeQName,schemaTypePrefix + Constants.COLON + schemaType.getLocalPart());
  marshalRecord.closeStartGroupingElements(groupingFragment);
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  return false;
}"
63671,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object objectValue=directMapping.getAttributeValueFromObject(object);
  return this.marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,marshalContext);
}","@Override public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  return false;
}"
63672,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (Constants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    if (xPathFragment.hasAttribute) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      if (((Field)xmlDirectMapping.getField()).getXPathFragment().nameIsText) {
        XPathNode parentNode=xPathNode.getParent();
        if (parentNode.getAttributeChildren() != null) {
          marshalRecord.forceValueWrapper();
        }
      }
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters(schemaType,fieldValue,null,xmlDirectMapping.isCDATA());
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Object fieldValue=xmlDirectMapping.getFieldValue(objectValue,session,marshalRecord);
  if (null == fieldValue) {
    return xmlDirectMapping.getNullPolicy().directMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
 else {
    QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
    XPathFragment groupingFragment=null;
    boolean isQName=false;
    if (Constants.QNAME_QNAME.equals(schemaType)) {
      groupingFragment=openGroupingElementsForQName((QName)fieldValue,marshalRecord);
      isQName=true;
    }
    if (groupingFragment == null) {
      groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    }
    if (xPathFragment.hasAttribute) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      if (((Field)xmlDirectMapping.getField()).getXPathFragment().nameIsText) {
        XPathNode parentNode=xPathNode.getParent();
        if (parentNode.getAttributeChildren() != null) {
          marshalRecord.forceValueWrapper();
        }
      }
      Field xmlField=(Field)xmlDirectMapping.getField();
      if (xmlField.isTypedTextField()) {
        updateNamespaces(schemaType,marshalRecord,xmlField);
      }
      marshalRecord.closeStartGroupingElements(groupingFragment);
      marshalRecord.characters(schemaType,fieldValue,null,xmlDirectMapping.isCDATA());
    }
    if (isQName) {
      XPathFragment fragment=getLastGroupingFragment();
      if (fragment != groupingFragment) {
        marshalRecord.endElement(groupingFragment,namespaceResolver);
        return false;
      }
    }
    return true;
  }
}"
63673,"public void setXPathNode(XPathNode xPathNode){
  super.setXPathNode(xPathNode);
  xmlDirectMapping.getNullPolicy().xPathNode(xPathNode,this);
}","public void setXPathNode(XPathNode xPathNode){
  super.setXPathNode(xPathNode);
  xmlDirectMapping.getNullPolicy().xPathNode(xPathNode,this);
  if (((Field)xmlDirectMapping.getField()).isTypedTextField()) {
    XPathFragment typeAttributeXPathFragment=new XPathFragment();
    typeAttributeXPathFragment.setAttribute(true);
    typeAttributeXPathFragment.setLocalName(Constants.SCHEMA_TYPE_ATTRIBUTE);
    typeAttributeXPathFragment.setNamespaceURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI);
    xPathNode.getParent().addChild(typeAttributeXPathFragment,new TypeNodeValue(),null);
  }
}"
63674,"void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    Descriptor xmlDescriptor=(Descriptor)descriptor;
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    Mapping xmlMapping;
    TransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    Field xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(Mapping)mappingIterator.next();
      xmlField=(Field)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(TransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue(transformationMapping);
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(Field)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((CoreFieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping instanceof InverseReferenceMapping) {
          xmlMapping=(Mapping)((InverseReferenceMapping)xmlMapping).getInlineMapping();
          if (xmlMapping == null) {
            continue;
          }
          xmlField=(Field)xmlMapping.getField();
          if (xmlMapping.isAbstractCompositeCollectionMapping()) {
            mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping,true);
          }
          if (xmlMapping.isAbstractCompositeObjectMapping()) {
            mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping,true);
          }
        }
 else         if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((DirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          DirectCollectionMapping collectionMapping=(DirectCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          CompositeCollectionMapping collectionMapping=(CompositeCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping instanceof VariableXPathCollectionMapping) {
          mappingNodeValue=new XMLVariableXPathCollectionMappingNodeValue((VariableXPathCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof VariableXPathObjectMapping) {
          mappingNodeValue=new XMLVariableXPathObjectMappingNodeValue((VariableXPathObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((AnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((AnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((AnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((BinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((FragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((FragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof CollectionReferenceMapping) {
          CollectionReferenceMapping xmlColMapping=(CollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          Field xmlColMappingField=(Field)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((Field)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          int containerIndex=-1;
          for (int i=0, size=fields.size(); i < size; i++) {
            Field xmlFld=(Field)fields.get(i);
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (i == 0) {
              addContainerValue((ContainerValue)mappingNodeValue);
              containerIndex=((ContainerValue)mappingNodeValue).getIndex();
            }
 else {
              ((ContainerValue)mappingNodeValue).setIndex(containerIndex);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ObjectReferenceMapping) {
          ObjectReferenceMapping xmlORMapping=(ObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            Field xmlFld=(Field)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceObjectMapping) {
          ChoiceObjectMapping xmlChoiceMapping=(ChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          Field firstField=(Field)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Field next=(Field)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceCollectionMapping) {
          ChoiceCollectionMapping xmlChoiceMapping=(ChoiceCollectionMapping)xmlMapping;
          Iterator<Entry<Field,Mapping>> fields=xmlChoiceMapping.getChoiceElementMappings().entrySet().iterator();
          Entry<Field,Mapping> firstEntry=fields.next();
          Field firstField=firstEntry.getKey();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<Field,NodeValue> fieldToNodeValues=new HashMap<Field,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == firstEntry.getValue())) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          ((ContainerValue)unmarshalValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Entry<Field,Mapping> nextEntry=fields.next();
            Field nextField=nextEntry.getKey();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,nextField);
            nodeValue.setContainerNodeValue(unmarshalValue);
            nodeValue.setIndex(unmarshalValue.getIndex());
            ((ContainerValue)nodeValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
            addChild(nextField.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(nextField,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == nextEntry.getValue())) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
        if (xmlMapping.isAbstractDirectMapping() && xmlField.isTypedTextField()) {
          XPathFragment nextFragment=xmlField.getXPathFragment();
          StringBuilder typeXPathStringBuilder=new StringBuilder();
          while (nextFragment.getNextFragment() != null) {
            typeXPathStringBuilder.append(nextFragment.getXPath());
            nextFragment=nextFragment.getNextFragment();
          }
          Field typeField=new XMLField();
          if (typeXPathStringBuilder.length() > 0) {
            typeXPathStringBuilder.append('/');
          }
          typeField.setXPath(typeXPathStringBuilder.toString() + Constants.ATTRIBUTE + xmlDescriptor.getNonNullNamespaceResolver().resolveNamespaceURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)+ Constants.COLON+ Constants.SCHEMA_TYPE_ATTRIBUTE);
          typeNodeValue=new TypeNodeValue();
          typeNodeValue.setDirectMapping((DirectMapping)xmlMapping);
          addChild(typeField.getXPathFragment(),typeNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    if (descriptor.hasInheritance()) {
      Field indicatorField=(Field)descriptor.getInheritancePolicy().getClassIndicatorField();
      if (indicatorField != null) {
        if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) && indicatorField.getLastXPathFragment().getLocalName().equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
          xsiTypeIndicatorField=true;
        }
      }
    }
    initialized=true;
  }
}","void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    Descriptor xmlDescriptor=(Descriptor)descriptor;
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    Mapping xmlMapping;
    TransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    Field xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(Mapping)mappingIterator.next();
      xmlField=(Field)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(TransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue(transformationMapping);
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(Field)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((CoreFieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping instanceof InverseReferenceMapping) {
          xmlMapping=(Mapping)((InverseReferenceMapping)xmlMapping).getInlineMapping();
          if (xmlMapping == null) {
            continue;
          }
          xmlField=(Field)xmlMapping.getField();
          if (xmlMapping.isAbstractCompositeCollectionMapping()) {
            mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping,true);
          }
          if (xmlMapping.isAbstractCompositeObjectMapping()) {
            mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping,true);
          }
        }
 else         if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((DirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          DirectCollectionMapping collectionMapping=(DirectCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          CompositeCollectionMapping collectionMapping=(CompositeCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping instanceof VariableXPathCollectionMapping) {
          mappingNodeValue=new XMLVariableXPathCollectionMappingNodeValue((VariableXPathCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof VariableXPathObjectMapping) {
          mappingNodeValue=new XMLVariableXPathObjectMappingNodeValue((VariableXPathObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((AnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((AnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((AnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((BinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((FragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((FragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof CollectionReferenceMapping) {
          CollectionReferenceMapping xmlColMapping=(CollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          Field xmlColMappingField=(Field)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((Field)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          int containerIndex=-1;
          for (int i=0, size=fields.size(); i < size; i++) {
            Field xmlFld=(Field)fields.get(i);
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (i == 0) {
              addContainerValue((ContainerValue)mappingNodeValue);
              containerIndex=((ContainerValue)mappingNodeValue).getIndex();
            }
 else {
              ((ContainerValue)mappingNodeValue).setIndex(containerIndex);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ObjectReferenceMapping) {
          ObjectReferenceMapping xmlORMapping=(ObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            Field xmlFld=(Field)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceObjectMapping) {
          ChoiceObjectMapping xmlChoiceMapping=(ChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          Field firstField=(Field)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Field next=(Field)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceCollectionMapping) {
          ChoiceCollectionMapping xmlChoiceMapping=(ChoiceCollectionMapping)xmlMapping;
          Iterator<Entry<Field,Mapping>> fields=xmlChoiceMapping.getChoiceElementMappings().entrySet().iterator();
          Entry<Field,Mapping> firstEntry=fields.next();
          Field firstField=firstEntry.getKey();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<Field,NodeValue> fieldToNodeValues=new HashMap<Field,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == firstEntry.getValue())) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          ((ContainerValue)unmarshalValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Entry<Field,Mapping> nextEntry=fields.next();
            Field nextField=nextEntry.getKey();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,nextField);
            nodeValue.setContainerNodeValue(unmarshalValue);
            nodeValue.setIndex(unmarshalValue.getIndex());
            ((ContainerValue)nodeValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
            addChild(nextField.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(nextField,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == nextEntry.getValue())) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    if (descriptor.hasInheritance()) {
      Field indicatorField=(Field)descriptor.getInheritancePolicy().getClassIndicatorField();
      if (indicatorField != null) {
        if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) && indicatorField.getLastXPathFragment().getLocalName().equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
          xsiTypeIndicatorField=true;
        }
      }
    }
    initialized=true;
  }
}"
63675,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      objectValue=xmlAnyCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      Descriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.isNamespaceAware(),unmarshalRecord.getUnmarshaller());
        childObject=xmlAnyCollectionMapping.convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if (xmlAnyCollectionMapping.isMixedContent() && unmarshalRecord.getTextWrapperFragment() != null && unmarshalRecord.getTextWrapperFragment().equals(xPathFragment)) {
      endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping,xPathFragment,null);
      return;
    }
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping,unmarshalRecord,true,null);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping,xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  UnmarshalRecord childRecord=unmarshalRecord.getChildRecord();
  if (null != childRecord) {
    if (!xmlAnyCollectionMapping.usesXMLRoot()) {
      Object objectValue=childRecord.getCurrentObject();
      objectValue=xmlAnyCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
      unmarshalRecord.addAttributeValue(this,objectValue);
    }
 else {
      Object childObject=childRecord.getCurrentObject();
      Descriptor workingDescriptor=childRecord.getDescriptor();
      if (workingDescriptor != null) {
        String prefix=xPathFragment.getPrefix();
        if ((prefix == null) && (xPathFragment.getNamespaceURI() != null)) {
          prefix=unmarshalRecord.resolveNamespaceUri(xPathFragment.getNamespaceURI());
        }
        childObject=workingDescriptor.wrapObjectInXMLRoot(childObject,xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),prefix,false,unmarshalRecord.isNamespaceAware(),unmarshalRecord.getUnmarshaller());
        childObject=xmlAnyCollectionMapping.convertDataValueToObjectValue(childObject,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
        unmarshalRecord.addAttributeValue(this,childObject);
      }
    }
    unmarshalRecord.setChildRecord(null);
  }
 else {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if (xmlAnyCollectionMapping.isMixedContent() && unmarshalRecord.getTextWrapperFragment() != null && unmarshalRecord.getTextWrapperFragment().equals(xPathFragment)) {
      endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping,xPathFragment,null);
      return;
    }
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      setOrAddAttributeValueForKeepAsElement(builder,xmlAnyCollectionMapping,xmlAnyCollectionMapping,unmarshalRecord,true,collection);
    }
 else {
      if (xmlAnyCollectionMapping.isMixedContent()) {
        endElementProcessText(unmarshalRecord,xmlAnyCollectionMapping,xPathFragment,null);
      }
 else {
        unmarshalRecord.resetStringBuffer();
      }
    }
  }
}"
63676,"private Field getFieldForName(String localName,String namespaceUri){
  Iterator<Field> fields=fieldToNodeValues.keySet().iterator();
  while (fields.hasNext()) {
    Field nextField=fields.next();
    XPathFragment fragment=nextField.getXPathFragment();
    while (fragment != null && (!fragment.nameIsText())) {
      if (fragment.getNextFragment() == null || fragment.getHasText()) {
        if (fragment.getLocalName().equals(localName)) {
          String fragUri=fragment.getNamespaceURI();
          if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
            return nextField;
          }
        }
      }
      fragment=fragment.getNextFragment();
    }
  }
  return null;
}","private Field getFieldForName(String localName,String namespaceUri){
  Iterator<Field> fields=fieldToNodeValues.keySet().iterator();
  while (fields.hasNext()) {
    Field nextField=fields.next();
    if (nextField != null) {
      XPathFragment fragment=nextField.getXPathFragment();
      while (fragment != null && (!fragment.nameIsText())) {
        if (fragment.getNextFragment() == null || fragment.getHasText()) {
          if (fragment.getLocalName().equals(localName)) {
            String fragUri=fragment.getNamespaceURI();
            if ((namespaceUri == null && fragUri == null) || (namespaceUri != null && fragUri != null && namespaceUri.equals(fragUri))) {
              return nextField;
            }
          }
        }
        fragment=fragment.getNextFragment();
      }
    }
  }
  return null;
}"
63677,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  value=xmlChoiceCollectionMapping.convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
  if (value != null && value.getClass() == CoreClassConstants.STRING && this.xmlChoiceCollectionMapping.isMixedContent()) {
    marshalMixedContent(marshalRecord,(String)value);
    return true;
  }
  NodeValue associatedNodeValue=getNodeValueForValue(value);
  if (associatedNodeValue != null) {
    XPathFragment frag=associatedNodeValue.getXPathNode().getXPathFragment();
    if (frag != null) {
      frag=getOwningFragment(associatedNodeValue,frag);
      NodeValue unwrappedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
      return marshalSingleValueWithNodeValue(frag,marshalRecord,object,value,session,namespaceResolver,marshalContext,unwrappedNodeValue);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  value=xmlChoiceCollectionMapping.convertObjectValueToDataValue(value,session,marshalRecord.getMarshaller());
  if (value != null && value.getClass() == CoreClassConstants.STRING && this.xmlChoiceCollectionMapping.isMixedContent()) {
    marshalMixedContent(marshalRecord,(String)value);
    return true;
  }
  NodeValue associatedNodeValue=getNodeValueForValue(value);
  if (associatedNodeValue != null) {
    if (associatedNodeValue.isAnyMappingNodeValue()) {
      return marshalSingleValueWithNodeValue(null,marshalRecord,object,value,session,namespaceResolver,marshalContext,associatedNodeValue);
    }
 else {
      XPathFragment frag=associatedNodeValue.getXPathNode().getXPathFragment();
      if (frag != null) {
        frag=getOwningFragment(associatedNodeValue,frag);
        NodeValue unwrappedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        return marshalSingleValueWithNodeValue(frag,marshalRecord,object,value,session,namespaceResolver,marshalContext,unwrappedNodeValue);
      }
    }
  }
  return true;
}"
63678,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlChoiceCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().isApplicationJSON()) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=xmlChoiceCollectionMapping.convertObjectValueToDataValue(cp.next(iterator,session),session,marshalRecord.getMarshaller());
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        int valueSize=listValue.size();
        marshalRecord.startCollection();
        for (int j=0; j < valueSize; j++) {
          marshalSingleValueWithNodeValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance(),associatedNodeValue);
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlChoiceCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().isApplicationJSON()) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=xmlChoiceCollectionMapping.convertObjectValueToDataValue(cp.next(iterator,session),session,marshalRecord.getMarshaller());
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null || associatedNodeValue.isAnyMappingNodeValue()) {
        int valueSize=listValue.size();
        marshalRecord.startCollection();
        for (int j=0; j < valueSize; j++) {
          marshalSingleValueWithNodeValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance(),associatedNodeValue);
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
63679,"private void initializeNodeValue(){
  Mapping xmlMapping=(Mapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof BinaryDataCollectionMapping) {
    choiceElementNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof DirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((DirectCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof CompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping);
  }
 else {
    CollectionReferenceMapping refMapping=((CollectionReferenceMapping)xmlMapping);
    if (refMapping.usesSingleNode() || refMapping.getFields().size() == 1) {
      choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue(refMapping,xmlField);
    }
 else {
      choiceElementNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((CollectionReferenceMapping)xmlMapping);
    }
  }
}","private void initializeNodeValue(){
  Mapping xmlMapping=(Mapping)xmlChoiceCollectionMapping.getChoiceElementMappings().get(xmlField);
  if (xmlMapping instanceof BinaryDataCollectionMapping) {
    choiceElementNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof DirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((DirectCollectionMapping)xmlMapping);
  }
 else   if (xmlMapping instanceof CompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping);
  }
 else {
    CollectionReferenceMapping refMapping=((CollectionReferenceMapping)xmlMapping);
    if (refMapping.usesSingleNode() || refMapping.getFields().size() == 1) {
      choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue(refMapping,xmlField);
    }
 else {
      choiceElementNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((CollectionReferenceMapping)xmlMapping);
    }
  }
  if (isAny) {
    anyNodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceCollectionMapping,null,xmlChoiceCollectionMapping.getAnyMapping());
  }
}"
63680,"public XMLChoiceCollectionMappingMarshalNodeValue(ChoiceCollectionMapping mapping,Field xmlField){
  this.xmlChoiceCollectionMapping=mapping;
  this.xmlField=xmlField;
  initializeNodeValue();
}","public XMLChoiceCollectionMappingMarshalNodeValue(ChoiceCollectionMapping mapping,Field xmlField){
  this.xmlChoiceCollectionMapping=mapping;
  this.xmlField=xmlField;
  isAny=mapping.isAny();
  initializeNodeValue();
}"
63681,"private NodeValue getNodeValueForValue(Object value){
  if (value == null) {
    Iterator<NodeValue> nodeValues=fieldToNodeValues.values().iterator();
    while (nodeValues.hasNext()) {
      XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalNodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)nodeValues.next();
      NodeValue nextNodeValue=unmarshalNodeValue.getChoiceElementMarshalNodeValue();
      if (nextNodeValue instanceof MappingNodeValue) {
        Mapping nextMapping=((MappingNodeValue)nextNodeValue).getMapping();
        if (nextMapping.isAbstractCompositeCollectionMapping()) {
          if (((CompositeCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
          if (((DirectCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping instanceof BinaryDataCollectionMapping) {
          if (((BinaryDataCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
      }
    }
    return null;
  }
  Field associatedField=null;
  NodeValue nodeValue=null;
  if (value instanceof Root) {
    Root rootValue=(Root)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    Object fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      Class theClass=fieldValue.getClass();
      while (associatedField == null) {
        associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
        if (theClass.getSuperclass() != null) {
          theClass=theClass.getSuperclass();
        }
 else {
          break;
        }
      }
    }
    if (associatedField != null) {
      nodeValue=this.fieldToNodeValues.get(associatedField);
    }
  }
 else {
    Class theClass=value.getClass();
    while (associatedField == null) {
      associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
      nodeValue=classToNodeValues.get(theClass);
      if (theClass.getSuperclass() != null) {
        theClass=theClass.getSuperclass();
      }
 else {
        break;
      }
    }
  }
  if (associatedField == null) {
    List<Field> sourceFields=null;
    Class theClass=value.getClass();
    while (theClass != null) {
      sourceFields=(List<Field>)xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(theClass);
      if (sourceFields != null) {
        break;
      }
      theClass=theClass.getSuperclass();
    }
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
      nodeValue=fieldToNodeValues.get(associatedField);
    }
  }
  if (nodeValue != null) {
    return nodeValue;
  }
  if (associatedField != null) {
    return fieldToNodeValues.get(associatedField);
  }
  if (xmlChoiceCollectionMapping.isMixedContent() && value instanceof String) {
    return this;
  }
  return null;
}","private NodeValue getNodeValueForValue(Object value){
  if (value == null) {
    Iterator<NodeValue> nodeValues=fieldToNodeValues.values().iterator();
    while (nodeValues.hasNext()) {
      XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalNodeValue=(XMLChoiceCollectionMappingUnmarshalNodeValue)nodeValues.next();
      NodeValue nextNodeValue=unmarshalNodeValue.getChoiceElementMarshalNodeValue();
      if (nextNodeValue instanceof MappingNodeValue) {
        Mapping nextMapping=((MappingNodeValue)nextNodeValue).getMapping();
        if (nextMapping.isAbstractCompositeCollectionMapping()) {
          if (((CompositeCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
          if (((DirectCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
 else         if (nextMapping instanceof BinaryDataCollectionMapping) {
          if (((BinaryDataCollectionMapping)nextMapping).getNullPolicy().isNullRepresentedByXsiNil()) {
            return unmarshalNodeValue;
          }
        }
      }
    }
    return null;
  }
  Field associatedField=null;
  NodeValue nodeValue=null;
  if (value instanceof Root) {
    Root rootValue=(Root)value;
    String localName=rootValue.getLocalName();
    String namespaceUri=rootValue.getNamespaceURI();
    Object fieldValue=rootValue.getObject();
    associatedField=getFieldForName(localName,namespaceUri);
    if (associatedField == null) {
      Class theClass=fieldValue.getClass();
      while (associatedField == null) {
        associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
        if (theClass.getSuperclass() != null) {
          theClass=theClass.getSuperclass();
        }
 else {
          break;
        }
      }
    }
    if (associatedField != null) {
      nodeValue=this.fieldToNodeValues.get(associatedField);
    }
  }
 else {
    Class theClass=value.getClass();
    while (associatedField == null) {
      associatedField=(Field)xmlChoiceCollectionMapping.getClassToFieldMappings().get(theClass);
      nodeValue=classToNodeValues.get(theClass);
      if (theClass.getSuperclass() != null) {
        theClass=theClass.getSuperclass();
      }
 else {
        break;
      }
    }
  }
  if (associatedField == null) {
    List<Field> sourceFields=null;
    Class theClass=value.getClass();
    while (theClass != null) {
      sourceFields=(List<Field>)xmlChoiceCollectionMapping.getClassToSourceFieldsMappings().get(theClass);
      if (sourceFields != null) {
        break;
      }
      theClass=theClass.getSuperclass();
    }
    if (sourceFields != null) {
      associatedField=sourceFields.get(0);
      nodeValue=fieldToNodeValues.get(associatedField);
    }
  }
  if (nodeValue != null) {
    return nodeValue;
  }
  if (associatedField != null) {
    return fieldToNodeValues.get(associatedField);
  }
  if (xmlChoiceCollectionMapping.isMixedContent() && value instanceof String) {
    return this;
  }
  if (xmlChoiceCollectionMapping.isAny()) {
    return anyNodeValue;
  }
  return null;
}"
63682,"private void initializeNodeValue(){
  Mapping xmlMapping=this.nestedMapping;
  if (xmlMapping instanceof BinaryDataCollectionMapping) {
    choiceElementNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof DirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((DirectCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof CompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else {
    choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue((CollectionReferenceMapping)xmlMapping,xmlField);
    CollectionReferenceMapping refMapping=((CollectionReferenceMapping)xmlMapping);
    if (refMapping.usesSingleNode() || refMapping.getFields().size() == 1) {
      choiceElementMarshalNodeValue=new XMLCollectionReferenceMappingNodeValue(refMapping,xmlField);
    }
 else {
      choiceElementMarshalNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((CollectionReferenceMapping)xmlMapping);
    }
  }
}","private void initializeNodeValue(){
  if (nestedMapping == null && isAny) {
    nestedMapping=xmlChoiceCollectionMapping.getAnyMapping();
  }
  Mapping xmlMapping=this.nestedMapping;
  if (xmlMapping instanceof BinaryDataCollectionMapping) {
    choiceElementNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof DirectCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeDirectCollectionMappingNodeValue((DirectCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof CompositeCollectionMapping) {
    choiceElementNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else   if (xmlMapping instanceof AnyCollectionMapping) {
    choiceElementNodeValue=new XMLAnyCollectionMappingNodeValue((AnyCollectionMapping)xmlMapping);
    choiceElementMarshalNodeValue=choiceElementNodeValue;
  }
 else {
    choiceElementNodeValue=new XMLCollectionReferenceMappingNodeValue((CollectionReferenceMapping)xmlMapping,xmlField);
    CollectionReferenceMapping refMapping=((CollectionReferenceMapping)xmlMapping);
    if (refMapping.usesSingleNode() || refMapping.getFields().size() == 1) {
      choiceElementMarshalNodeValue=new XMLCollectionReferenceMappingNodeValue(refMapping,xmlField);
    }
 else {
      choiceElementMarshalNodeValue=new XMLCollectionReferenceMappingMarshalNodeValue((CollectionReferenceMapping)xmlMapping);
    }
  }
}"
63683,"void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    Descriptor xmlDescriptor=(Descriptor)descriptor;
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    Mapping xmlMapping;
    TransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    Field xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(Mapping)mappingIterator.next();
      xmlField=(Field)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(TransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue(transformationMapping);
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(Field)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((CoreFieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping instanceof InverseReferenceMapping) {
          xmlMapping=(Mapping)((InverseReferenceMapping)xmlMapping).getInlineMapping();
          if (xmlMapping == null) {
            continue;
          }
          xmlField=(Field)xmlMapping.getField();
          if (xmlMapping.isAbstractCompositeCollectionMapping()) {
            mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping,true);
          }
          if (xmlMapping.isAbstractCompositeObjectMapping()) {
            mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping,true);
          }
        }
 else         if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((DirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          DirectCollectionMapping collectionMapping=(DirectCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          CompositeCollectionMapping collectionMapping=(CompositeCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping instanceof VariableXPathCollectionMapping) {
          mappingNodeValue=new XMLVariableXPathCollectionMappingNodeValue((VariableXPathCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof VariableXPathObjectMapping) {
          mappingNodeValue=new XMLVariableXPathObjectMappingNodeValue((VariableXPathObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((AnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((AnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((AnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((BinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((FragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((FragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof CollectionReferenceMapping) {
          CollectionReferenceMapping xmlColMapping=(CollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          Field xmlColMappingField=(Field)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((Field)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          int containerIndex=-1;
          for (int i=0, size=fields.size(); i < size; i++) {
            Field xmlFld=(Field)fields.get(i);
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (i == 0) {
              addContainerValue((ContainerValue)mappingNodeValue);
              containerIndex=((ContainerValue)mappingNodeValue).getIndex();
            }
 else {
              ((ContainerValue)mappingNodeValue).setIndex(containerIndex);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ObjectReferenceMapping) {
          ObjectReferenceMapping xmlORMapping=(ObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            Field xmlFld=(Field)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceObjectMapping) {
          ChoiceObjectMapping xmlChoiceMapping=(ChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          Field firstField=(Field)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Field next=(Field)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceCollectionMapping) {
          ChoiceCollectionMapping xmlChoiceMapping=(ChoiceCollectionMapping)xmlMapping;
          Iterator<Entry<Field,Mapping>> fields=xmlChoiceMapping.getChoiceElementMappings().entrySet().iterator();
          Entry<Field,Mapping> firstEntry=fields.next();
          Field firstField=firstEntry.getKey();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<Field,NodeValue> fieldToNodeValues=new HashMap<Field,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == firstEntry.getValue())) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          ((ContainerValue)unmarshalValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Entry<Field,Mapping> nextEntry=fields.next();
            Field nextField=nextEntry.getKey();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,nextField);
            nodeValue.setContainerNodeValue(unmarshalValue);
            nodeValue.setIndex(unmarshalValue.getIndex());
            ((ContainerValue)nodeValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
            addChild(nextField.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(nextField,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == nextEntry.getValue())) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    if (descriptor.hasInheritance()) {
      Field indicatorField=(Field)descriptor.getInheritancePolicy().getClassIndicatorField();
      if (indicatorField != null) {
        if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) && indicatorField.getLastXPathFragment().getLocalName().equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
          xsiTypeIndicatorField=true;
        }
      }
    }
    initialized=true;
  }
}","void lazyInitialize(){
  if (initialized) {
    return;
  }
synchronized (this) {
    if (initialized) {
      return;
    }
    Descriptor xmlDescriptor=(Descriptor)descriptor;
    Iterator mappingIterator=xmlDescriptor.getMappings().iterator();
    Iterator fieldTransformerIterator;
    Mapping xmlMapping;
    TransformationMapping transformationMapping;
    FieldTransformerNodeValue fieldTransformerNodeValue;
    Object[] nextFieldToTransformer;
    TypeNodeValue typeNodeValue;
    NodeValue mappingNodeValue=null;
    Field xmlField;
    while (mappingIterator.hasNext()) {
      xmlMapping=(Mapping)mappingIterator.next();
      xmlField=(Field)xmlMapping.getField();
      if (xmlMapping.isTransformationMapping()) {
        transformationMapping=(TransformationMapping)xmlMapping;
        addTransformationMapping(transformationMapping);
        fieldTransformerIterator=transformationMapping.getFieldToTransformers().iterator();
        while (fieldTransformerIterator.hasNext()) {
          fieldTransformerNodeValue=new FieldTransformerNodeValue(transformationMapping);
          nextFieldToTransformer=(Object[])fieldTransformerIterator.next();
          xmlField=(Field)nextFieldToTransformer[0];
          fieldTransformerNodeValue.setXMLField(xmlField);
          fieldTransformerNodeValue.setFieldTransformer((CoreFieldTransformer)nextFieldToTransformer[1]);
          addChild(xmlField.getXPathFragment(),fieldTransformerNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
 else {
        if (xmlMapping instanceof InverseReferenceMapping) {
          xmlMapping=(Mapping)((InverseReferenceMapping)xmlMapping).getInlineMapping();
          if (xmlMapping == null) {
            continue;
          }
          xmlField=(Field)xmlMapping.getField();
          if (xmlMapping.isAbstractCompositeCollectionMapping()) {
            mappingNodeValue=new XMLCompositeCollectionMappingNodeValue((CompositeCollectionMapping)xmlMapping,true);
          }
          if (xmlMapping.isAbstractCompositeObjectMapping()) {
            mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping,true);
          }
        }
 else         if (xmlMapping.isAbstractDirectMapping()) {
          mappingNodeValue=new XMLDirectMappingNodeValue((DirectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeObjectMapping()) {
          mappingNodeValue=new XMLCompositeObjectMappingNodeValue((CompositeObjectMapping)xmlMapping);
        }
 else         if (xmlMapping.isAbstractCompositeDirectCollectionMapping()) {
          DirectCollectionMapping collectionMapping=(DirectCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeDirectCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping.isAbstractCompositeCollectionMapping()) {
          CompositeCollectionMapping collectionMapping=(CompositeCollectionMapping)xmlMapping;
          mappingNodeValue=new XMLCompositeCollectionMappingNodeValue(collectionMapping);
          if (collectionMapping.getWrapperNullPolicy() != null) {
            addChild(xmlField.getXPathFragment(),new CollectionGroupingElementNodeValue((ContainerValue)mappingNodeValue),xmlDescriptor.getNamespaceResolver());
          }
        }
 else         if (xmlMapping instanceof VariableXPathCollectionMapping) {
          mappingNodeValue=new XMLVariableXPathCollectionMappingNodeValue((VariableXPathCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof VariableXPathObjectMapping) {
          mappingNodeValue=new XMLVariableXPathObjectMappingNodeValue((VariableXPathObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyObjectMapping) {
          mappingNodeValue=new XMLAnyObjectMappingNodeValue((AnyObjectMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyCollectionMapping) {
          mappingNodeValue=new XMLAnyCollectionMappingNodeValue((AnyCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof AnyAttributeMapping) {
          mappingNodeValue=new XMLAnyAttributeMappingNodeValue((AnyAttributeMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataMapping) {
          mappingNodeValue=new XMLBinaryDataMappingNodeValue((BinaryDataMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof BinaryDataCollectionMapping) {
          mappingNodeValue=new XMLBinaryDataCollectionMappingNodeValue((BinaryDataCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentMapping) {
          mappingNodeValue=new XMLFragmentMappingNodeValue((FragmentMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof FragmentCollectionMapping) {
          mappingNodeValue=new XMLFragmentCollectionMappingNodeValue((FragmentCollectionMapping)xmlMapping);
        }
 else         if (xmlMapping instanceof CollectionReferenceMapping) {
          CollectionReferenceMapping xmlColMapping=(CollectionReferenceMapping)xmlMapping;
          List fields=xmlColMapping.getFields();
          Field xmlColMappingField=(Field)xmlColMapping.getField();
          XPathNode branchNode;
          if (null == xmlColMappingField) {
            if (fields.size() > 1 && !xmlColMapping.usesSingleNode()) {
              addChild(XPathFragment.SELF_FRAGMENT,new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
            }
            branchNode=rootXPathNode;
          }
 else {
            branchNode=addChild(((Field)xmlColMapping.getField()).getXPathFragment(),new XMLCollectionReferenceMappingMarshalNodeValue(xmlColMapping),xmlDescriptor.getNamespaceResolver());
          }
          int containerIndex=-1;
          for (int i=0, size=fields.size(); i < size; i++) {
            Field xmlFld=(Field)fields.get(i);
            mappingNodeValue=new XMLCollectionReferenceMappingNodeValue(xmlColMapping,xmlFld);
            if (i == 0) {
              addContainerValue((ContainerValue)mappingNodeValue);
              containerIndex=((ContainerValue)mappingNodeValue).getIndex();
            }
 else {
              ((ContainerValue)mappingNodeValue).setIndex(containerIndex);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            branchNode.addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ObjectReferenceMapping) {
          ObjectReferenceMapping xmlORMapping=(ObjectReferenceMapping)xmlMapping;
          Iterator fieldIt=xmlORMapping.getFields().iterator();
          while (fieldIt.hasNext()) {
            Field xmlFld=(Field)fieldIt.next();
            mappingNodeValue=new XMLObjectReferenceMappingNodeValue(xmlORMapping,xmlFld);
            if (mappingNodeValue.isContainerValue()) {
              addContainerValue((ContainerValue)mappingNodeValue);
            }
            if (mappingNodeValue.isNullCapableValue()) {
              addNullCapableValue((NullCapableValue)mappingNodeValue);
            }
            addChild(xmlFld.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceObjectMapping) {
          ChoiceObjectMapping xmlChoiceMapping=(ChoiceObjectMapping)xmlMapping;
          Iterator fields=xmlChoiceMapping.getChoiceElementMappings().keySet().iterator();
          Field firstField=(Field)fields.next();
          XMLChoiceObjectMappingNodeValue firstNodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,firstField);
          firstNodeValue.setNullCapableNodeValue(firstNodeValue);
          addChild(firstField.getXPathFragment(),firstNodeValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Field next=(Field)fields.next();
            XMLChoiceObjectMappingNodeValue nodeValue=new XMLChoiceObjectMappingNodeValue(xmlChoiceMapping,next);
            nodeValue.setNullCapableNodeValue(firstNodeValue);
            addChild(next.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
          }
          continue;
        }
 else         if (xmlMapping instanceof ChoiceCollectionMapping) {
          ChoiceCollectionMapping xmlChoiceMapping=(ChoiceCollectionMapping)xmlMapping;
          Iterator<Entry<Field,Mapping>> fields=xmlChoiceMapping.getChoiceElementMappings().entrySet().iterator();
          Entry<Field,Mapping> firstEntry=fields.next();
          Field firstField=firstEntry.getKey();
          XMLChoiceCollectionMappingUnmarshalNodeValue unmarshalValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,firstField);
          XMLChoiceCollectionMappingMarshalNodeValue marshalValue=new XMLChoiceCollectionMappingMarshalNodeValue(xmlChoiceMapping,firstField);
          HashMap<Field,NodeValue> fieldToNodeValues=new HashMap<Field,NodeValue>();
          unmarshalValue.setContainerNodeValue(unmarshalValue);
          unmarshalValue.setFieldToNodeValues(fieldToNodeValues);
          if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == firstEntry.getValue())) {
            unmarshalValue.setIsMixedNodeValue(true);
            marshalValue.setIsMixedNodeValue(true);
          }
          this.addContainerValue(unmarshalValue);
          ((ContainerValue)unmarshalValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
          fieldToNodeValues.put(firstField,unmarshalValue);
          addChild(firstField.getXPathFragment(),unmarshalValue,xmlDescriptor.getNamespaceResolver());
          addChild(firstField.getXPathFragment(),marshalValue,xmlDescriptor.getNamespaceResolver());
          while (fields.hasNext()) {
            Entry<Field,Mapping> nextEntry=fields.next();
            Field nextField=nextEntry.getKey();
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,nextField);
            nodeValue.setContainerNodeValue(unmarshalValue);
            nodeValue.setIndex(unmarshalValue.getIndex());
            ((ContainerValue)nodeValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
            addChild(nextField.getXPathFragment(),nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(nextField,nodeValue);
            if (xmlChoiceMapping.isMixedContent() && (xmlChoiceMapping.getMixedContentMapping() == nextEntry.getValue())) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          if (xmlChoiceMapping.isAny()) {
            XMLChoiceCollectionMappingUnmarshalNodeValue nodeValue=new XMLChoiceCollectionMappingUnmarshalNodeValue(xmlChoiceMapping,null,xmlChoiceMapping.getAnyMapping());
            nodeValue.setContainerNodeValue(unmarshalValue);
            nodeValue.setIndex(unmarshalValue.getIndex());
            ((ContainerValue)nodeValue.getChoiceElementNodeValue()).setIndex(unmarshalValue.getIndex());
            addChild(null,nodeValue,xmlDescriptor.getNamespaceResolver());
            fieldToNodeValues.put(null,nodeValue);
            if (xmlChoiceMapping.isMixedContent()) {
              nodeValue.setIsMixedNodeValue(true);
            }
          }
          marshalValue.setFieldToNodeValues(fieldToNodeValues);
          continue;
        }
        if (mappingNodeValue.isContainerValue()) {
          addContainerValue((ContainerValue)mappingNodeValue);
        }
        if (mappingNodeValue.isNullCapableValue()) {
          addNullCapableValue((NullCapableValue)mappingNodeValue);
        }
        if (xmlField != null) {
          addChild(xmlField.getXPathFragment(),mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
 else {
          addChild(null,mappingNodeValue,xmlDescriptor.getNamespaceResolver());
        }
      }
    }
    if (descriptor.hasInheritance()) {
      Field indicatorField=(Field)descriptor.getInheritancePolicy().getClassIndicatorField();
      if (indicatorField != null) {
        if (indicatorField.getLastXPathFragment().getNamespaceURI() != null && indicatorField.getLastXPathFragment().getNamespaceURI().equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) && indicatorField.getLastXPathFragment().getLocalName().equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
          xsiTypeIndicatorField=true;
        }
      }
    }
    initialized=true;
  }
}"
63684,"/** 
 * INTERNAL:
 */
public XPathNode getNonAttributeXPathNode(String namespaceURI,String localName,String qName,Attributes attributes){
  if (0 == levelIndex) {
    return xPathNode;
  }
  if (namespaceURI != null && namespaceURI.length() == 0) {
    xPathFragment.setLocalName(qName);
    xPathFragment.setNamespaceURI(null);
  }
 else {
    xPathFragment.setLocalName(localName);
    xPathFragment.setNamespaceURI(namespaceURI);
  }
  XPathNode resultNode=null;
  Map nonAttributeChildrenMap=xPathNode.getNonAttributeChildrenMap();
  if (null != nonAttributeChildrenMap) {
    resultNode=(XPathNode)nonAttributeChildrenMap.get(xPathFragment);
    XPathNode nonPredicateNode=null;
    if (resultNode != null && resultNode.hasPredicateSiblings()) {
      nonPredicateNode=resultNode;
      resultNode=null;
    }
    if (null == resultNode) {
      int newIndex;
      if (null == this.indexMap) {
        this.indexMap=new HashMap();
        newIndex=1;
      }
 else {
        Integer oldIndex=indexMap.get(xPathFragment);
        if (null == oldIndex) {
          newIndex=1;
        }
 else {
          newIndex=oldIndex.intValue() + 1;
        }
      }
      indexMap.put(xPathFragment,newIndex);
      XPathFragment predicateFragment=new XPathFragment();
      predicateFragment.setNamespaceAware(isNamespaceAware());
      predicateFragment.setNamespaceURI(xPathFragment.getNamespaceURI());
      predicateFragment.setLocalName(xPathFragment.getLocalName());
      predicateFragment.setIndexValue(newIndex);
      resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
      if (null == resultNode) {
        predicateFragment.setIndexValue(-1);
        if (attributes != null) {
          for (int x=0, length=attributes.getLength(); x < length; x++) {
            XPathFragment conditionFragment=new XPathFragment();
            conditionFragment.setLocalName(attributes.getLocalName(x));
            conditionFragment.setNamespaceURI(attributes.getURI(x));
            conditionFragment.setAttribute(true);
            XPathPredicate condition=new XPathPredicate(conditionFragment,attributes.getValue(x));
            predicateFragment.setPredicate(condition);
            resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
            if (null != resultNode) {
              break;
            }
          }
        }
        if (null == resultNode && null == nonPredicateNode) {
          resultNode=xPathNode.getAnyNode();
        }
      }
    }
    if (resultNode == null && nonPredicateNode != null) {
      return nonPredicateNode;
    }
    return resultNode;
  }
  return null;
}","/** 
 * INTERNAL:
 */
public XPathNode getNonAttributeXPathNode(String namespaceURI,String localName,String qName,Attributes attributes){
  if (0 == levelIndex) {
    return xPathNode;
  }
  if (namespaceURI != null && namespaceURI.length() == 0) {
    xPathFragment.setLocalName(qName);
    xPathFragment.setNamespaceURI(null);
  }
 else {
    xPathFragment.setLocalName(localName);
    xPathFragment.setNamespaceURI(namespaceURI);
  }
  XPathNode resultNode=null;
  Map nonAttributeChildrenMap=xPathNode.getNonAttributeChildrenMap();
  if (null != nonAttributeChildrenMap) {
    resultNode=(XPathNode)nonAttributeChildrenMap.get(xPathFragment);
    XPathNode nonPredicateNode=null;
    if (resultNode != null && resultNode.hasPredicateSiblings()) {
      nonPredicateNode=resultNode;
      resultNode=null;
    }
    if (null == resultNode) {
      int newIndex;
      if (null == this.indexMap) {
        this.indexMap=new HashMap();
        newIndex=1;
      }
 else {
        Integer oldIndex=indexMap.get(xPathFragment);
        if (null == oldIndex) {
          newIndex=1;
        }
 else {
          newIndex=oldIndex.intValue() + 1;
        }
      }
      indexMap.put(xPathFragment,newIndex);
      XPathFragment predicateFragment=new XPathFragment();
      predicateFragment.setNamespaceAware(isNamespaceAware());
      predicateFragment.setNamespaceURI(xPathFragment.getNamespaceURI());
      predicateFragment.setLocalName(xPathFragment.getLocalName());
      predicateFragment.setIndexValue(newIndex);
      resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
      if (null == resultNode) {
        predicateFragment.setIndexValue(-1);
        if (attributes != null) {
          for (int x=0, length=attributes.getLength(); x < length; x++) {
            XPathFragment conditionFragment=new XPathFragment();
            conditionFragment.setLocalName(attributes.getLocalName(x));
            conditionFragment.setNamespaceURI(attributes.getURI(x));
            conditionFragment.setAttribute(true);
            XPathPredicate condition=new XPathPredicate(conditionFragment,attributes.getValue(x));
            predicateFragment.setPredicate(condition);
            resultNode=(XPathNode)nonAttributeChildrenMap.get(predicateFragment);
            if (null != resultNode) {
              break;
            }
          }
        }
        if (null == resultNode && xPathNode.getTextNode() != null) {
          XPathFragment textWrapperFragment=getTextWrapperFragment();
          if (textWrapperFragment != null && localName.equals(textWrapperFragment.getLocalName())) {
            resultNode=xPathNode.getTextNode();
          }
        }
        if (null == resultNode && null == nonPredicateNode) {
          resultNode=xPathNode.getAnyNode();
        }
      }
    }
    if (resultNode == null && nonPredicateNode != null) {
      return nonPredicateNode;
    }
    return resultNode;
  }
  return null;
}"
63685,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (currentObject == null) {
    initializeRecord(atts);
  }
  XPathFragment xPathNodeXPathFragment=xPathNode.getXPathFragment();
  if ((null != xPathNodeXPathFragment && xPathNodeXPathFragment.nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (xPathNodeUnmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)xPathNodeUnmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      if (isIncludedInAttributeGroup) {
        xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
        if (xPathNode.getParent() != null) {
          xPathNode=xPathNode.getParent();
        }
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node && xPathNode.getTextNode() != null) {
      XPathFragment textWrapperFragment=getTextWrapperFragment();
      if (textWrapperFragment != null && localName.equals(textWrapperFragment.getLocalName())) {
        node=xPathNode.getTextNode();
      }
    }
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      String xsiNilValue=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
      if (xsiNilValue != null) {
        isXsiNil=xsiNilValue.equals(Constants.BOOLEAN_STRING_TRUE) || xsiNilValue.equals(""String_Node_Str"");
      }
      if (node.getNullCapableValue() != null) {
        getNullCapableValues().add(node.getNullCapableValue());
      }
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        boolean isIncludedInAttributeGroup=true;
        if (nodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)nodeValue).getMapping();
          isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
        }
        if (!isIncludedInAttributeGroup || !nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if (qname != null) {
              int qnameLength=qname.length();
              if (qnameLength > 0) {
                int idx=qname.indexOf(Constants.COLON);
                if (idx > 0) {
                  attLocalName=qname.substring(idx + 1,qnameLength);
                  String attPrefix=qname.substring(0,idx);
                  if (attPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
 else {
                  attLocalName=qname;
                  if (attLocalName.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                if (attributeNodeValue.isMappingNodeValue()) {
                  Mapping mapping=((MappingNodeValue)attributeNodeValue).getMapping();
                  if (!unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName())) {
                    continue;
                  }
                }
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  if (currentObject == null) {
    initializeRecord(atts);
  }
  XPathFragment xPathNodeXPathFragment=xPathNode.getXPathFragment();
  if ((null != xPathNodeXPathFragment && xPathNodeXPathFragment.nameIsText()) || xpathNodeIsMixedContent) {
    xpathNodeIsMixedContent=false;
    NodeValue xPathNodeUnmarshalNodeValue=xPathNode.getUnmarshalNodeValue();
    if (null != xPathNodeUnmarshalNodeValue) {
      boolean isIncludedInAttributeGroup=true;
      if (xPathNodeUnmarshalNodeValue.isMappingNodeValue()) {
        Mapping mapping=((MappingNodeValue)xPathNodeUnmarshalNodeValue).getMapping();
        isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
      }
      if (isIncludedInAttributeGroup) {
        xPathNodeUnmarshalNodeValue.endElement(xPathFragment,this);
        if (xPathNode.getParent() != null) {
          xPathNode=xPathNode.getParent();
        }
      }
    }
  }
  if (null == rootElementName && null == rootElementLocalName && parentRecord == null) {
    rootElementLocalName=localName;
    rootElementName=qName;
    rootElementNamespaceUri=namespaceURI;
    schemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_LOCATION);
    noNamespaceSchemaLocation=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.NO_NS_SCHEMA_LOCATION);
  }
  try {
    if (null != selfRecords) {
      for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
        UnmarshalRecord selfRecord=selfRecords.get(x);
        if (selfRecord == null) {
          getFragmentBuilder().startElement(namespaceURI,localName,qName,atts);
        }
 else {
          selfRecord.startElement(namespaceURI,localName,qName,atts);
        }
      }
    }
    if (unmappedLevel != -1 && unmappedLevel <= levelIndex) {
      levelIndex++;
      return;
    }
    XPathNode node=getNonAttributeXPathNode(namespaceURI,localName,qName,atts);
    if (null == node) {
      NodeValue parentNodeValue=xPathNode.getUnmarshalNodeValue();
      if ((null == xPathNode.getXPathFragment()) && (parentNodeValue != null)) {
        XPathFragment parentFragment=new XPathFragment();
        parentFragment.setNamespaceAware(isNamespaceAware());
        if (namespaceURI != null && namespaceURI.length() == 0) {
          parentFragment.setLocalName(qName);
          parentFragment.setNamespaceURI(null);
        }
 else {
          parentFragment.setLocalName(localName);
          parentFragment.setNamespaceURI(namespaceURI);
        }
        if (parentNodeValue.startElement(parentFragment,this,atts)) {
          levelIndex++;
        }
 else {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
 else {
        levelIndex++;
        startUnmappedElement(namespaceURI,localName,qName,atts);
        return;
      }
    }
 else {
      xPathNode=node;
      unmarshalContext.startElement(this);
      levelIndex++;
      String xsiNilValue=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
      if (xsiNilValue != null) {
        isXsiNil=xsiNilValue.equals(Constants.BOOLEAN_STRING_TRUE) || xsiNilValue.equals(""String_Node_Str"");
      }
      if (node.getNullCapableValue() != null) {
        getNullCapableValues().add(node.getNullCapableValue());
      }
      NodeValue nodeValue=node.getUnmarshalNodeValue();
      if (null != nodeValue) {
        boolean isIncludedInAttributeGroup=true;
        if (nodeValue.isMappingNodeValue()) {
          Mapping mapping=((MappingNodeValue)nodeValue).getMapping();
          isIncludedInAttributeGroup=this.unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName());
        }
        if (!isIncludedInAttributeGroup || !nodeValue.startElement(xPathFragment,this,atts)) {
          startUnmappedElement(namespaceURI,localName,qName,atts);
          return;
        }
      }
      if (xPathNode.getAttributeChildren() != null || xPathNode.getAnyAttributeNodeValue() != null || selfRecords != null) {
        for (int i=0, size=atts.getLength(); i < size; i++) {
          String attNamespace=atts.getURI(i);
          String attLocalName=atts.getLocalName(i);
          String value=atts.getValue(i);
          NodeValue attributeNodeValue=null;
          if ((attLocalName == null) || (attLocalName.length() == 0)) {
            String qname=atts.getQName(i);
            if (qname != null) {
              int qnameLength=qname.length();
              if (qnameLength > 0) {
                int idx=qname.indexOf(Constants.COLON);
                if (idx > 0) {
                  attLocalName=qname.substring(idx + 1,qnameLength);
                  String attPrefix=qname.substring(0,idx);
                  if (attPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
 else {
                  attLocalName=qname;
                  if (attLocalName.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
                    attNamespace=javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
                  }
                }
              }
            }
          }
          if (this.selfRecords != null) {
            for (int j=0; j < selfRecords.size(); j++) {
              UnmarshalRecord nestedRecord=selfRecords.get(j);
              if (nestedRecord != null) {
                attributeNodeValue=nestedRecord.getAttributeChildNodeValue(attNamespace,attLocalName);
                if (attributeNodeValue != null) {
                  attributeNodeValue.attribute(nestedRecord,attNamespace,attLocalName,value);
                }
              }
            }
          }
          if (attributeNodeValue == null) {
            attributeNodeValue=this.getAttributeChildNodeValue(attNamespace,attLocalName);
            try {
              if (attributeNodeValue != null) {
                if (attributeNodeValue.isMappingNodeValue()) {
                  Mapping mapping=((MappingNodeValue)attributeNodeValue).getMapping();
                  if (!unmarshalAttributeGroup.containsAttributeInternal(mapping.getAttributeName())) {
                    continue;
                  }
                }
                attributeNodeValue.attribute(this,attNamespace,attLocalName,value);
              }
 else {
                if (xPathNode.getAnyAttributeNodeValue() != null) {
                  xPathNode.getAnyAttributeNodeValue().attribute(this,attNamespace,attLocalName,value);
                }
              }
            }
 catch (            EclipseLinkException e) {
              if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
                throw e;
              }
 else {
                SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
                xmlReader.getErrorHandler().warning(saxParseException);
              }
            }
          }
        }
      }
    }
    if (prefixesForFragment != null) {
      this.prefixesForFragment.clear();
    }
  }
 catch (  EclipseLinkException e) {
    if ((null == xmlReader) || (null == xmlReader.getErrorHandler())) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(e.getLocalizedMessage(),getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
63686,"public boolean isMixedContent(){
  return this.mixedContentMapping != null;
}","public boolean isMixedContent(){
  return isMixedContent;
}"
63687,"public void preInitialize(AbstractSession session) throws DescriptorException {
  getAttributeAccessor().setIsWriteOnly(this.isWriteOnly());
  getAttributeAccessor().setIsReadOnly(this.isReadOnly());
  super.preInitialize(session);
  ArrayList<XMLMapping> mappingsList=new ArrayList<XMLMapping>();
  mappingsList.addAll(getChoiceElementMappings().values());
  for (  XMLMapping next : getChoiceElementMappingsByClass().values()) {
    if (!(mappingsList.contains(next))) {
      mappingsList.add(next);
    }
  }
  for (  XMLMapping next : getChoiceElementMappingsByClass().values()) {
    if (!(mappingsList.contains(next))) {
      mappingsList.add(next);
    }
  }
  Iterator<XMLMapping> mappings=mappingsList.iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    nextMapping.setAttributeName(this.getAttributeName());
    if (nextMapping.getAttributeAccessor() == temporaryAccessor) {
      nextMapping.setAttributeAccessor(getAttributeAccessor());
    }
    nextMapping.setIsReadOnly(this.isReadOnly());
    ((XMLMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
    nextMapping.setDescriptor(getDescriptor());
    nextMapping.preInitialize(session);
  }
}","public void preInitialize(AbstractSession session) throws DescriptorException {
  getAttributeAccessor().setIsWriteOnly(this.isWriteOnly());
  getAttributeAccessor().setIsReadOnly(this.isReadOnly());
  super.preInitialize(session);
  ArrayList<XMLMapping> mappingsList=new ArrayList<XMLMapping>();
  mappingsList.addAll(getChoiceElementMappings().values());
  if (isAny) {
    anyMapping=new XMLAnyCollectionMapping();
    anyMapping.setMixedContent(false);
    anyMapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    mappingsList.add(anyMapping);
  }
  for (  XMLMapping next : getChoiceElementMappingsByClass().values()) {
    if (!(mappingsList.contains(next))) {
      mappingsList.add(next);
    }
  }
  for (  XMLMapping next : getChoiceElementMappingsByClass().values()) {
    if (!(mappingsList.contains(next))) {
      mappingsList.add(next);
    }
  }
  Iterator<XMLMapping> mappings=mappingsList.iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    nextMapping.setAttributeName(this.getAttributeName());
    if (nextMapping.getAttributeAccessor() == temporaryAccessor) {
      nextMapping.setAttributeAccessor(getAttributeAccessor());
    }
    nextMapping.setIsReadOnly(this.isReadOnly());
    ((XMLMapping)nextMapping).setIsWriteOnly(this.isWriteOnly());
    nextMapping.setDescriptor(getDescriptor());
    nextMapping.preInitialize(session);
  }
}"
63688,"public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  ArrayList<XMLMapping> mappingsList=new ArrayList<XMLMapping>();
  mappingsList.addAll(getChoiceElementMappings().values());
  for (  XMLMapping next : getChoiceElementMappingsByClass().values()) {
    if (!(mappingsList.contains(next))) {
      mappingsList.add(next);
    }
  }
  Iterator<XMLMapping> mappings=mappingsList.iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=xmlConversionManager.schemaType(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
      ((XMLBinaryDataCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null) {
        ((XMLBinaryDataCollectionMapping)nextMapping).setValueConverter(converter);
      }
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}","public void initialize(AbstractSession session) throws DescriptorException {
  super.initialize(session);
  if (this.converter != null) {
    this.converter.initialize(this,session);
  }
  ArrayList<XMLMapping> mappingsList=new ArrayList<XMLMapping>();
  mappingsList.addAll(getChoiceElementMappings().values());
  for (  XMLMapping next : getChoiceElementMappingsByClass().values()) {
    if (!(mappingsList.contains(next))) {
      mappingsList.add(next);
    }
  }
  if (isAny) {
    mappingsList.add(anyMapping);
  }
  Iterator<XMLMapping> mappings=mappingsList.iterator();
  while (mappings.hasNext()) {
    DatabaseMapping nextMapping=(DatabaseMapping)mappings.next();
    Converter converter=null;
    if (fieldsToConverters != null) {
      converter=fieldsToConverters.get(nextMapping.getField());
    }
    if (nextMapping.isAbstractCompositeDirectCollectionMapping()) {
      XMLConversionManager xmlConversionManager=(XMLConversionManager)session.getDatasourcePlatform().getConversionManager();
      QName schemaType=xmlConversionManager.schemaType(((AbstractCompositeDirectCollectionMapping)nextMapping).getAttributeElementClass());
      if (schemaType != null) {
        ((XMLField)nextMapping.getField()).setSchemaType(schemaType);
      }
      if (converter != null) {
        ((AbstractCompositeDirectCollectionMapping)nextMapping).setValueConverter(converter);
      }
      ((AbstractCompositeDirectCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping.isAbstractCompositeCollectionMapping()) {
      if (converter != null) {
        ((AbstractCompositeCollectionMapping)nextMapping).setConverter(converter);
      }
      ((AbstractCompositeCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
    }
 else     if (nextMapping instanceof XMLBinaryDataCollectionMapping) {
      ((XMLBinaryDataCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null) {
        ((XMLBinaryDataCollectionMapping)nextMapping).setValueConverter(converter);
      }
    }
 else     if (nextMapping instanceof XMLAnyCollectionMapping) {
      ((XMLAnyCollectionMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      if (converter != null && converter instanceof XMLConverter) {
        ((XMLAnyCollectionMapping)nextMapping).setConverter((XMLConverter)converter);
      }
    }
 else {
      ((XMLCollectionReferenceMapping)nextMapping).setContainerPolicy(getContainerPolicy());
      ((XMLCollectionReferenceMapping)nextMapping).setReuseContainer(true);
    }
    nextMapping.initialize(session);
  }
}"
63689,"/** 
 * PUBLIC: Allows the user to indicate that this mapping should also allow for mixed content in addition to  any of the elements in the choice. 
 * @since EclipseLink 2.3.1
 */
public void setMixedContent(boolean mixed){
  if (!mixed) {
    this.mixedContentMapping=null;
  }
 else {
    setMixedContent(""String_Node_Str"");
  }
}","/** 
 * PUBLIC: Allows the user to indicate that this mapping should also allow for mixed content in addition to  any of the elements in the choice. 
 * @since EclipseLink 2.3.1
 */
public void setMixedContent(boolean mixed){
  if (!mixed) {
    this.mixedContentMapping=null;
  }
 else {
    setMixedContent(""String_Node_Str"");
  }
  isMixedContent=mixed;
}"
63690,"private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
XPathFragment currentFragment=new XPathFragment();
currentFragment.setLocalName(parentLocalName);
currentFragment.setNamespaceURI(uri);
currentFragment.setNamespaceAware(namespaceAware);
XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
if (groupingXPathNode != null) {
  if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
    groupingXPathFragment=groupingXPathNode.getXPathFragment();
    contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    itemXPathFragment=itemXPathNode.getXPathFragment();
  }
 else   if (groupingXPathNode.getUnmarshalNodeValue() == null) {
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    if (itemXPathNode != null) {
      if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
        groupingXPathFragment=groupingXPathNode.getXPathFragment();
        contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
        itemXPathFragment=itemXPathNode.getXPathFragment();
      }
    }
  }
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
XPathFragment currentFragment=new XPathFragment();
currentFragment.setLocalName(parentLocalName);
currentFragment.setNamespaceURI(uri);
currentFragment.setNamespaceAware(namespaceAware);
XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
if (groupingXPathNode != null) {
  if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
    groupingXPathFragment=groupingXPathNode.getXPathFragment();
    contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    itemXPathFragment=itemXPathNode.getXPathFragment();
  }
 else   if (groupingXPathNode.getUnmarshalNodeValue() == null) {
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    if (itemXPathNode != null) {
      if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
        groupingXPathFragment=groupingXPathNode.getXPathFragment();
        contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
        itemXPathFragment=itemXPathNode.getXPathFragment();
      }
    }
  }
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
63691,"private void parsePair(String name,JsonValue jsonValue) throws SAXException {
  if (jsonValue == null) {
    return;
  }
  ValueType valueType=jsonValue.getValueType();
  if (valueType == ValueType.ARRAY) {
    JsonArray jsonArray=(JsonArray)jsonValue;
    String parentLocalName=name;
    if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
      return;
    }
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (parentLocalName.length() > 2) {
        int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
        if (nsIndex > -1) {
          String prefix=parentLocalName.substring(0,nsIndex);
          uri=namespaces.resolveNamespacePrefix(prefix);
        }
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          parentLocalName=parentLocalName.substring(nsIndex + 1);
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    boolean isTextValue=isTextValue(parentLocalName);
    int arraySize=jsonArray.size();
    if (arraySize == 0) {
      if (contentHandler instanceof UnmarshalRecord) {
        UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
        XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
        if (node != null) {
          NodeValue nv=node.getNodeValue();
          if (nv == null && node.getTextNode() != null) {
            nv=node.getTextNode().getUnmarshalNodeValue();
          }
          if (nv != null && nv.isContainerValue()) {
            ur.getContainerInstance(((ContainerValue)nv));
          }
        }
      }
    }
    startCollection();
    XPathFragment groupingXPathFragment=null;
    XPathFragment itemXPathFragment=null;
    if (contentHandler instanceof UnmarshalRecord) {
      UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
      if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
        XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
        if (null != unmarshalRecordXPathNode) {
          XPathFragment currentFragment=new XPathFragment();
          currentFragment.setLocalName(parentLocalName);
          currentFragment.setNamespaceURI(uri);
          currentFragment.setNamespaceAware(namespaceAware);
          XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
          if (groupingXPathNode != null) {
            if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
              groupingXPathFragment=groupingXPathNode.getXPathFragment();
              contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              itemXPathFragment=itemXPathNode.getXPathFragment();
            }
 else             if (groupingXPathNode.getUnmarshalNodeValue() == null) {
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              if (itemXPathNode != null) {
                if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
                  groupingXPathFragment=groupingXPathNode.getXPathFragment();
                  contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
                  itemXPathFragment=itemXPathNode.getXPathFragment();
                }
              }
            }
          }
        }
      }
      for (int i=0; i < arraySize; i++) {
        JsonValue nextArrayValue=jsonArray.get(i);
        if (nextArrayValue.getValueType() == ValueType.NULL) {
          ((UnmarshalRecord)contentHandler).setNil(true);
        }
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
 else {
            contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
        }
        parseValue(nextArrayValue);
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.endElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
          }
 else {
            contentHandler.endElement(uri,parentLocalName,parentLocalName);
          }
        }
      }
    }
    if (null != groupingXPathFragment) {
      contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
    }
    endCollection();
  }
 else {
    String qualifiedName=name;
    if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
      return;
    }
    String localName=qualifiedName;
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (localName.length() > 2) {
        int nsIndex=localName.indexOf(namespaceSeparator,1);
        String prefix=Constants.EMPTY_STRING;
        if (nsIndex > -1) {
          prefix=localName.substring(0,nsIndex);
        }
        uri=namespaces.resolveNamespacePrefix(prefix);
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          localName=localName.substring(nsIndex + 1);
        }
        if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
          return;
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
        return;
      }
      if (textWrapper != null && textWrapper.equals(localName)) {
        parseValue(jsonValue);
        return;
      }
    }
 else     if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
        return;
      }
      boolean isTextValue=isTextValue(localName);
      if (isTextValue) {
        parseValue(jsonValue);
        return;
      }
    }
    if (jsonValue != null && jsonValue.getValueType() == valueType.NULL) {
      contentHandler.setNil(true);
    }
    contentHandler.startElement(uri,localName,localName,attributes.setValue(jsonValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
    parseValue(jsonValue);
    contentHandler.endElement(uri,localName,localName);
  }
}","private void parsePair(String name,JsonValue jsonValue) throws SAXException {
  if (jsonValue == null) {
    return;
  }
  ValueType valueType=jsonValue.getValueType();
  if (valueType == ValueType.ARRAY) {
    JsonArray jsonArray=(JsonArray)jsonValue;
    String parentLocalName=name;
    if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
      return;
    }
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (parentLocalName.length() > 2) {
        int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
        if (nsIndex > -1) {
          String prefix=parentLocalName.substring(0,nsIndex);
          uri=namespaces.resolveNamespacePrefix(prefix);
        }
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          parentLocalName=parentLocalName.substring(nsIndex + 1);
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    boolean isTextValue=isTextValue(parentLocalName);
    int arraySize=jsonArray.size();
    if (arraySize == 0) {
      if (contentHandler instanceof UnmarshalRecord) {
        UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
        XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
        if (node != null) {
          NodeValue nv=node.getNodeValue();
          if (nv == null && node.getTextNode() != null) {
            nv=node.getTextNode().getUnmarshalNodeValue();
          }
          if (nv != null && nv.isContainerValue()) {
            ur.getContainerInstance(((ContainerValue)nv));
          }
        }
      }
    }
    startCollection();
    XPathFragment groupingXPathFragment=null;
    XPathFragment itemXPathFragment=null;
    if (contentHandler instanceof UnmarshalRecord) {
      UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
      if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
        XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
        if (null != unmarshalRecordXPathNode) {
          XPathFragment currentFragment=new XPathFragment();
          currentFragment.setLocalName(parentLocalName);
          currentFragment.setNamespaceURI(uri);
          currentFragment.setNamespaceAware(namespaceAware);
          XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
          if (groupingXPathNode != null) {
            if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
              groupingXPathFragment=groupingXPathNode.getXPathFragment();
              contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              itemXPathFragment=itemXPathNode.getXPathFragment();
            }
 else             if (groupingXPathNode.getUnmarshalNodeValue() == null) {
              XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
              if (itemXPathNode != null) {
                if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
                  groupingXPathFragment=groupingXPathNode.getXPathFragment();
                  contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
                  itemXPathFragment=itemXPathNode.getXPathFragment();
                }
              }
            }
          }
        }
      }
      for (int i=0; i < arraySize; i++) {
        JsonValue nextArrayValue=jsonArray.get(i);
        if (nextArrayValue.getValueType() == ValueType.NULL) {
          ((UnmarshalRecord)contentHandler).setNil(true);
        }
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
 else {
            contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setValue(nextArrayValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
          }
        }
        parseValue(nextArrayValue);
        if (!isTextValue) {
          if (null != itemXPathFragment) {
            contentHandler.endElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
          }
 else {
            contentHandler.endElement(uri,parentLocalName,parentLocalName);
          }
        }
      }
    }
    if (null != groupingXPathFragment) {
      contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
    }
    endCollection();
  }
 else {
    String qualifiedName=name;
    if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
      return;
    }
    String localName=qualifiedName;
    String uri=Constants.EMPTY_STRING;
    if (namespaceAware && namespaces != null) {
      if (localName.length() > 2) {
        int nsIndex=localName.indexOf(namespaceSeparator,1);
        String prefix=Constants.EMPTY_STRING;
        if (nsIndex > -1) {
          prefix=localName.substring(0,nsIndex);
        }
        uri=namespaces.resolveNamespacePrefix(prefix);
        if (uri == null) {
          uri=namespaces.getDefaultNamespaceURI();
        }
 else {
          localName=localName.substring(nsIndex + 1);
        }
        if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri != null && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
          return;
        }
      }
 else {
        uri=namespaces.getDefaultNamespaceURI();
      }
    }
    if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
        return;
      }
      if (textWrapper != null && textWrapper.equals(localName)) {
        parseValue(jsonValue);
        return;
      }
    }
 else     if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
      if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
        return;
      }
      boolean isTextValue=isTextValue(localName);
      if (isTextValue) {
        parseValue(jsonValue);
        return;
      }
    }
    if (jsonValue != null && jsonValue.getValueType() == valueType.NULL) {
      contentHandler.setNil(true);
    }
    contentHandler.startElement(uri,localName,localName,attributes.setValue(jsonValue,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
    parseValue(jsonValue);
    contentHandler.endElement(uri,localName,localName);
  }
}"
63692,"protected AbstractRecord buildCompositeRow(Object attributeValue,AbstractSession session,XMLDescriptor referenceDescriptor,AbstractRecord parentRow,DatabaseField field,Object originalObject,boolean wasXMLRoot){
  if ((field == null) && (referenceDescriptor != null) && (referenceDescriptor.getDefaultRootElement() != null)) {
    field=referenceDescriptor.buildField(referenceDescriptor.getDefaultRootElement());
  }
  if ((field != null) && (referenceDescriptor != null)) {
    ((XMLRecord)parentRow).setLeafElementType(referenceDescriptor.getDefaultRootElementType());
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)referenceDescriptor.getObjectBuilder();
    XMLRecord child=(XMLRecord)objectBuilder.createRecordFor(attributeValue,(XMLField)field,(XMLRecord)parentRow,this);
    child.setNamespaceResolver(((XMLRecord)parentRow).getNamespaceResolver());
    objectBuilder.buildIntoNestedRow(child,originalObject,attributeValue,session,referenceDescriptor,(XMLField)field,wasXMLRoot);
    return child;
  }
  return null;
}","protected AbstractRecord buildCompositeRow(Object attributeValue,AbstractSession session,XMLDescriptor referenceDescriptor,AbstractRecord parentRow,DatabaseField field,Object originalObject,boolean wasXMLRoot){
  String defaultRootElementString=null;
  if (referenceDescriptor != null) {
    defaultRootElementString=referenceDescriptor.getDefaultRootElement();
    if (!wasXMLRoot && defaultRootElementString == null) {
      throw XMLMarshalException.defaultRootElementNotSpecified((XMLDescriptor)descriptor);
    }
  }
  if ((field == null) && (referenceDescriptor != null) && (defaultRootElementString != null)) {
    field=referenceDescriptor.buildField(defaultRootElementString);
  }
  if ((field != null) && (referenceDescriptor != null)) {
    ((XMLRecord)parentRow).setLeafElementType(referenceDescriptor.getDefaultRootElementType());
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)referenceDescriptor.getObjectBuilder();
    XMLRecord child=(XMLRecord)objectBuilder.createRecordFor(attributeValue,(XMLField)field,(XMLRecord)parentRow,this);
    child.setNamespaceResolver(((XMLRecord)parentRow).getNamespaceResolver());
    objectBuilder.buildIntoNestedRow(child,originalObject,attributeValue,session,referenceDescriptor,(XMLField)field,wasXMLRoot);
    return child;
  }
  return null;
}"
63693,"protected AbstractRecord buildCompositeRow(Object attributeValue,AbstractSession session,XMLDescriptor referenceDescriptor,AbstractRecord parentRow,DatabaseField field,Object originalObject,boolean wasXMLRoot){
  if ((field == null) && (referenceDescriptor != null) && (referenceDescriptor.getDefaultRootElement() != null)) {
    field=referenceDescriptor.buildField(referenceDescriptor.getDefaultRootElement());
  }
  if ((field != null) && (referenceDescriptor != null)) {
    ((XMLRecord)parentRow).setLeafElementType(referenceDescriptor.getDefaultRootElementType());
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)referenceDescriptor.getObjectBuilder();
    XMLRecord child=(XMLRecord)objectBuilder.createRecordFor(attributeValue,(XMLField)field,(XMLRecord)parentRow,this);
    child.setNamespaceResolver(((XMLRecord)parentRow).getNamespaceResolver());
    objectBuilder.buildIntoNestedRow(child,originalObject,attributeValue,session,referenceDescriptor,(XMLField)field,wasXMLRoot);
    return child;
  }
  return null;
}","protected AbstractRecord buildCompositeRow(Object attributeValue,AbstractSession session,XMLDescriptor referenceDescriptor,AbstractRecord parentRow,DatabaseField field,Object originalObject,boolean wasXMLRoot){
  String defaultRootElementString=null;
  if (referenceDescriptor != null) {
    defaultRootElementString=referenceDescriptor.getDefaultRootElement();
    if (!wasXMLRoot && defaultRootElementString == null) {
      throw XMLMarshalException.defaultRootElementNotSpecified((XMLDescriptor)descriptor);
    }
  }
  if ((field == null) && (referenceDescriptor != null) && (defaultRootElementString != null)) {
    field=referenceDescriptor.buildField(defaultRootElementString);
  }
  if ((field != null) && (referenceDescriptor != null)) {
    ((XMLRecord)parentRow).setLeafElementType(referenceDescriptor.getDefaultRootElementType());
    XMLObjectBuilder objectBuilder=(XMLObjectBuilder)referenceDescriptor.getObjectBuilder();
    XMLRecord child=(XMLRecord)objectBuilder.createRecordFor(attributeValue,(XMLField)field,(XMLRecord)parentRow,this);
    child.setNamespaceResolver(((XMLRecord)parentRow).getNamespaceResolver());
    objectBuilder.buildIntoNestedRow(child,originalObject,attributeValue,session,referenceDescriptor,(XMLField)field,wasXMLRoot);
    return child;
  }
  return null;
}"
63694,"public void testObjectToXMLEventWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLEventWriter eventWriter=factory.createXMLEventWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    try {
      jaxbMarshaller.marshal(objectToWrite,eventWriter);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    eventWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLEventWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLEventWriter eventWriter=factory.createXMLEventWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    try {
      jaxbMarshaller.marshal(objectToWrite,eventWriter);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    if (expectsMarshalException) {
      fail(""String_Node_Str"");
      return;
    }
    eventWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
63695,"public void objectToXMLStringWriter(Object objectToWrite) throws Exception {
  StringWriter writer=new StringWriter();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,writer);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document testDocument=getTestDocument(writer.toString());
  writer.close();
  objectToXMLDocumentTest(testDocument);
}","public void objectToXMLStringWriter(Object objectToWrite) throws Exception {
  StringWriter writer=new StringWriter();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,writer);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document testDocument=getTestDocument(writer.toString());
  writer.close();
  objectToXMLDocumentTest(testDocument);
}"
63696,"public void testObjectToXMLStreamWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    try {
      jaxbMarshaller.marshal(objectToWrite,streamWriter);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLStreamWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    try {
      jaxbMarshaller.marshal(objectToWrite,streamWriter);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    if (expectsMarshalException) {
      fail(""String_Node_Str"");
      return;
    }
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
63697,"public void testObjectToContentHandler() throws Exception {
  SAXDocumentBuilder builder=new SAXDocumentBuilder();
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,builder);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document controlDocument=getWriteControlDocument();
  Document testDocument=builder.getDocument();
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(controlDocument);
  log(""String_Node_Str"");
  log(testDocument);
  assertXMLIdentical(controlDocument,testDocument);
}","public void testObjectToContentHandler() throws Exception {
  SAXDocumentBuilder builder=new SAXDocumentBuilder();
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,builder);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document controlDocument=getWriteControlDocument();
  Document testDocument=builder.getDocument();
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(controlDocument);
  log(""String_Node_Str"");
  log(testDocument);
  assertXMLIdentical(controlDocument,testDocument);
}"
63698,"public void testObjectToXMLStreamWriterRecord() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    XMLStreamWriterRecord record=new XMLStreamWriterRecord(streamWriter);
    try {
      ((org.eclipse.persistence.jaxb.JAXBMarshaller)jaxbMarshaller).marshal(objectToWrite,record);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLStreamWriterRecord() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    XMLStreamWriterRecord record=new XMLStreamWriterRecord(streamWriter);
    try {
      ((org.eclipse.persistence.jaxb.JAXBMarshaller)jaxbMarshaller).marshal(objectToWrite,record);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    if (expectsMarshalException) {
      fail(""String_Node_Str"");
      return;
    }
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
63699,"public void testObjectToOutputStreamASCIIEncoding() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  String originalEncoding=(String)jaxbMarshaller.getProperty(Marshaller.JAXB_ENCODING);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,stream);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,originalEncoding);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
}","public void testObjectToOutputStreamASCIIEncoding() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  String originalEncoding=(String)jaxbMarshaller.getProperty(Marshaller.JAXB_ENCODING);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,stream);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,originalEncoding);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
}"
63700,"public void testObjectToXMLDocument() throws Exception {
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  Document testDocument=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
  try {
    jaxbMarshaller.marshal(objectToWrite,testDocument);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  objectToXMLDocumentTest(testDocument);
}","public void testObjectToXMLDocument() throws Exception {
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  Document testDocument=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
  try {
    jaxbMarshaller.marshal(objectToWrite,testDocument);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  objectToXMLDocumentTest(testDocument);
}"
63701,"public void testObjectToOutputStream() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,stream);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
  if (getProperties() != null) {
    log(""String_Node_Str"");
    ByteArrayOutputStream stream2=new ByteArrayOutputStream();
    JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
    Marshaller jaxbMarshallerFromJSONBindings=jaxbContextFromJSONBindings.createMarshaller();
    jaxbMarshallerFromJSONBindings.setAttachmentMarshaller(jaxbMarshaller.getAttachmentMarshaller());
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER));
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.OBJECT_GRAPH,jaxbMarshaller.getProperty(MarshallerProperties.OBJECT_GRAPH));
    jaxbMarshallerFromJSONBindings.marshal(objectToWrite,stream2);
    InputStream is2=new ByteArrayInputStream(stream2.toByteArray());
    Document testDocument2=parser.parse(is2);
    stream2.close();
    is2.close();
    objectToXMLDocumentTest(testDocument2);
  }
}","public void testObjectToOutputStream() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,stream);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
  if (getProperties() != null) {
    log(""String_Node_Str"");
    ByteArrayOutputStream stream2=new ByteArrayOutputStream();
    JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
    Marshaller jaxbMarshallerFromJSONBindings=jaxbContextFromJSONBindings.createMarshaller();
    jaxbMarshallerFromJSONBindings.setAttachmentMarshaller(jaxbMarshaller.getAttachmentMarshaller());
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER));
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.OBJECT_GRAPH,jaxbMarshaller.getProperty(MarshallerProperties.OBJECT_GRAPH));
    jaxbMarshallerFromJSONBindings.marshal(objectToWrite,stream2);
    InputStream is2=new ByteArrayInputStream(stream2.toByteArray());
    Document testDocument2=parser.parse(is2);
    stream2.close();
    is2.close();
    objectToXMLDocumentTest(testDocument2);
  }
}"
63702,"public void testJSONMarshalToBuilderResult() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  JsonObjectBuilder jsonObjectBuilder=Json.createObjectBuilder();
  JsonObjectBuilderResult result=new JsonObjectBuilderResult(jsonObjectBuilder);
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),result);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  JsonObject jsonObject=jsonObjectBuilder.build();
  StringWriter sw=new StringWriter();
  JsonWriter writer=Json.createWriter(sw);
  writer.writeObject(jsonObject);
  writer.close();
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}","public void testJSONMarshalToBuilderResult() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  JsonObjectBuilder jsonObjectBuilder=Json.createObjectBuilder();
  JsonObjectBuilderResult result=new JsonObjectBuilderResult(jsonObjectBuilder);
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),result);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  JsonObject jsonObject=jsonObjectBuilder.build();
  StringWriter sw=new StringWriter();
  JsonWriter writer=Json.createWriter(sw);
  writer.writeObject(jsonObject);
  writer.close();
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}"
63703,"public void testJSONMarshalToOutputStream() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),os);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()));
  os.close();
}","public void testJSONMarshalToOutputStream() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),os);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()));
  os.close();
}"
63704,"public void testJSONMarshalToStringWriter_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  StringWriter sw=new StringWriter();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),sw);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString(),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
}","public void testJSONMarshalToStringWriter_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  StringWriter sw=new StringWriter();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),sw);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString(),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
}"
63705,"public void testJSONMarshalToGeneratorResult() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  StringWriter sw=new StringWriter();
  JsonGenerator generator=Json.createGenerator(sw);
  JsonGeneratorResult result=new JsonGeneratorResult(generator);
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),result);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  generator.flush();
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}","public void testJSONMarshalToGeneratorResult() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  StringWriter sw=new StringWriter();
  JsonGenerator generator=Json.createGenerator(sw);
  JsonGeneratorResult result=new JsonGeneratorResult(generator);
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),result);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  generator.flush();
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}"
63706,"public void testJSONMarshalToStringWriter() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  StringWriter sw=new StringWriter();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),sw);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}","public void testJSONMarshalToStringWriter() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  StringWriter sw=new StringWriter();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),sw);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}"
63707,"public void testJSONMarshalToOutputStream_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),os);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
  os.close();
}","public void testJSONMarshalToOutputStream_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),os);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  if (expectsMarshalException) {
    fail(""String_Node_Str"");
    return;
  }
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
  os.close();
}"
63708,"public ObjectWithTransientListTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{ObjectWithTransient.class});
}","public ObjectWithTransientListTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{ObjectWithTransient.class});
  expectsMarshalException=true;
}"
63709,"public ObjectWithTransientTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{ObjectWithTransient.class});
}","public ObjectWithTransientTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{ObjectWithTransient.class});
  expectsMarshalException=true;
}"
63710,"public JSONWithNullObjectTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{Simple.class});
  setControlJSON(JSON_RESOURCE);
  setControlDocument(XML_RESOURCE);
}","public JSONWithNullObjectTestCases(String name) throws Exception {
  super(name);
  setClasses(new Class[]{Simple.class});
  setControlJSON(JSON_RESOURCE);
  setControlDocument(XML_RESOURCE);
  expectsMarshalException=true;
}"
63711,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(XmlAdapterCompositeTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeDirectCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterDirectTestCases.class);
  suite.addTestSuite(XmlAdapterDirectNullTestCases.class);
  suite.addTestSuite(ListToStringAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdaptersTestCases.class);
  suite.addTestSuite(ClassLevelAdapterTestCases.class);
  suite.addTestSuite(JAXBMapWithAdapterTestCases.class);
  suite.addTestSuite(ObjectListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefTestCases.class);
  suite.addTestSuite(XmlAdapterHexBinaryTestCases.class);
  suite.addTestSuite(XmlAdapterListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterNestedListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterListMultipleBarTestCases.class);
  suite.addTestSuite(AdapterWithElementsTestCases.class);
  suite.addTestSuite(AdapterWithGenericsTestCases.class);
  suite.addTestSuite(XmlAdapterDirectCollectionArrayTestCases.class);
  suite.addTestSuite(ByteArrayTestCases.class);
  suite.addTestSuite(CollapsedStringListTestCases.class);
  suite.addTestSuite(CollapsedStringTestCases.class);
  suite.addTestSuite(NormalizedStringListTestCases.class);
  suite.addTestSuite(NormalizedStringTestCases.class);
  suite.addTestSuite(AdapterWithInheritanceTestCases.class);
  suite.addTestSuite(AdapterEnumTestCases.class);
  suite.addTestSuite(GenericAdapterTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(XmlAdapterCompositeTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterCompositeDirectCollectionTestCases.class);
  suite.addTestSuite(XmlAdapterDirectTestCases.class);
  suite.addTestSuite(XmlAdapterDirectNullTestCases.class);
  suite.addTestSuite(XmlAdapterDirectExceptionTestCases.class);
  suite.addTestSuite(ListToStringAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdapterTestCases.class);
  suite.addTestSuite(PackageLevelAdaptersTestCases.class);
  suite.addTestSuite(ClassLevelAdapterTestCases.class);
  suite.addTestSuite(JAXBMapWithAdapterTestCases.class);
  suite.addTestSuite(ObjectListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefListTestCases.class);
  suite.addTestSuite(XmlAdapterElementRefTestCases.class);
  suite.addTestSuite(XmlAdapterHexBinaryTestCases.class);
  suite.addTestSuite(XmlAdapterListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterNestedListSingleBarTestCases.class);
  suite.addTestSuite(XmlAdapterListMultipleBarTestCases.class);
  suite.addTestSuite(AdapterWithElementsTestCases.class);
  suite.addTestSuite(AdapterWithGenericsTestCases.class);
  suite.addTestSuite(XmlAdapterDirectCollectionArrayTestCases.class);
  suite.addTestSuite(ByteArrayTestCases.class);
  suite.addTestSuite(CollapsedStringListTestCases.class);
  suite.addTestSuite(CollapsedStringTestCases.class);
  suite.addTestSuite(NormalizedStringListTestCases.class);
  suite.addTestSuite(NormalizedStringTestCases.class);
  suite.addTestSuite(AdapterWithInheritanceTestCases.class);
  suite.addTestSuite(AdapterEnumTestCases.class);
  suite.addTestSuite(GenericAdapterTestCases.class);
  return suite;
}"
63712,"/** 
 * Test update relationship.
 * @throws RestCallFailedException the rest call failed exception
 * @throws URISyntaxException the uRI syntax exception
 */
@Test public void testUpdateRelationship() throws RestCallFailedException, URISyntaxException {
  StaticBid bid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  StaticUser user=bid.getUser();
  StaticUser newUser=new StaticUser();
  newUser.setName(""String_Node_Str"");
  bid=restUpdateRelationship(String.valueOf(StaticModelDatabasePopulator.BID1_ID),""String_Node_Str"",""String_Node_Str"",newUser,StaticBid.class,""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON_TYPE);
  bid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  assertTrue(""String_Node_Str"",bid.getUser().getName().equals(""String_Node_Str""));
  newUser=bid.getUser();
  bid=restUpdateRelationship(String.valueOf(StaticModelDatabasePopulator.BID1_ID),""String_Node_Str"",""String_Node_Str"",user,StaticBid.class,""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON_TYPE);
  bid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  assertTrue(""String_Node_Str"",bid.getUser().getName().equals(bid.getUser().getName()));
  dbDelete(newUser);
}","/** 
 * Test update relationship.
 * @throws RestCallFailedException the rest call failed exception
 * @throws URISyntaxException the uRI syntax exception
 */
@Test public void testUpdateRelationship() throws RestCallFailedException, URISyntaxException {
  StaticBid bid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  StaticUser user=bid.getUser();
  StaticUser newUser=new StaticUser();
  newUser.setName(""String_Node_Str"");
  bid=restUpdateRelationship(String.valueOf(StaticModelDatabasePopulator.BID1_ID),""String_Node_Str"",""String_Node_Str"",newUser,StaticBid.class,""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON_TYPE);
  bid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  assertTrue(""String_Node_Str"",bid.getUser().getName().equals(""String_Node_Str""));
  newUser=bid.getUser();
  bid=restUpdateRelationship(String.valueOf(StaticModelDatabasePopulator.BID1_ID),""String_Node_Str"",""String_Node_Str"",user,StaticBid.class,""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON_TYPE);
  StaticBid dbBid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  assertTrue(""String_Node_Str"",dbBid.getUser().getName().equals(bid.getUser().getName()));
  dbDelete(newUser);
}"
63713,"/** 
 * Test remove relationship non collection.
 * @throws RestCallFailedException the rest call failed exception
 * @throws URISyntaxException the uRI syntax exception
 * @throws JAXBException the jAXB exception
 */
@Test public void testRemoveRelationshipNonCollection() throws RestCallFailedException, URISyntaxException, JAXBException {
  StaticBid bid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  StaticUser newUser=new StaticUser();
  newUser.setName(""String_Node_Str"");
  bid=restUpdateRelationship(String.valueOf(StaticModelDatabasePopulator.BID1_ID),""String_Node_Str"",""String_Node_Str"",newUser,StaticBid.class,""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON_TYPE);
  assertTrue(""String_Node_Str"",bid.getUser().getName().equals(""String_Node_Str""));
  String removedUser=RestUtils.restRemoveBidirectionalRelationship(context,String.valueOf(bid.getId()),StaticBid.class.getSimpleName(),""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,null,null);
  if (removedUser != null) {
    System.out.println(removedUser);
  }
  dbDelete(newUser);
}","/** 
 * Test remove relationship non collection.
 * @throws RestCallFailedException the rest call failed exception
 * @throws URISyntaxException the uRI syntax exception
 * @throws JAXBException the jAXB exception
 */
@Test public void testRemoveRelationshipNonCollection() throws RestCallFailedException, URISyntaxException, JAXBException {
  StaticBid bid=dbRead(StaticModelDatabasePopulator.BID1_ID,StaticBid.class);
  StaticUser origUser=bid.getUser();
  StaticUser newUser=new StaticUser();
  newUser.setName(""String_Node_Str"");
  bid=restUpdateRelationship(String.valueOf(StaticModelDatabasePopulator.BID1_ID),""String_Node_Str"",""String_Node_Str"",newUser,StaticBid.class,""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON_TYPE);
  assertTrue(""String_Node_Str"",bid.getUser().getName().equals(""String_Node_Str""));
  String userRemoved=RestUtils.restRemoveBidirectionalRelationship(context,String.valueOf(bid.getId()),StaticBid.class.getSimpleName(),""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,null,null);
  assertTrue(userRemoved != null);
  dbDelete(newUser);
  bid=restUpdateRelationship(String.valueOf(StaticModelDatabasePopulator.BID1_ID),""String_Node_Str"",""String_Node_Str"",origUser,StaticBid.class,""String_Node_Str"",MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_JSON_TYPE);
  assertTrue(""String_Node_Str"",bid.getUser().getName().equals(""String_Node_Str""));
}"
63714,"/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  try {
    String xmlEncoding=""String_Node_Str"";
    String xmlVersion=""String_Node_Str"";
    try {
      Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
      xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
    }
 catch (    Exception ex) {
    }
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || CoreClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || CoreClassConstants.DURATION.isAssignableFrom(referenceClass)) {
      Object nodeVal;
      try {
        Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
        nodeVal=rootTxt.getNodeValue();
      }
 catch (      Exception ex) {
        nodeVal=null;
      }
      Object obj=((XMLConversionManager)xmlContext.getSession().getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
      Root xmlRoot=new XMLRoot();
      xmlRoot.setObject(obj);
      String lName=xmlRow.getDOM().getLocalName();
      if (lName == null) {
        lName=xmlRow.getDOM().getNodeName();
      }
      xmlRoot.setLocalName(lName);
      xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
      xmlRoot.setEncoding(xmlEncoding);
      xmlRoot.setVersion(xmlVersion);
      return xmlRoot;
    }
    CoreAbstractSession readSession=xmlContext.getSession(referenceClass);
    Descriptor descriptor=(Descriptor)readSession.getDescriptor(referenceClass);
    if (descriptor == null) {
      throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
    }
    Object object=null;
    if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE)) {
      xmlRow.setUnmarshaller(xmlUnmarshaller);
      xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy((AbstractSession)readSession));
      XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
      ReadObjectQuery query=new ReadObjectQuery();
      query.setReferenceClass(referenceClass);
      query.setSession((AbstractSession)readSession);
      object=objectBuilder.buildObject(query,xmlRow,null);
      xmlRow.resolveReferences(readSession,xmlUnmarshaller.getIDResolver());
    }
    String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
    String elementLocalName=xmlRow.getDOM().getLocalName();
    if (elementLocalName == null) {
      elementLocalName=xmlRow.getDOM().getNodeName();
    }
    String elementPrefix=xmlRow.getDOM().getPrefix();
    return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot,true,xmlUnmarshaller);
  }
  finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}","/** 
 * INTERNAL: Convert the Oracle XMLDocument to the reference-class.
 */
public Object xmlToObject(DOMRecord xmlRow,Class referenceClass) throws XMLMarshalException {
  try {
    String xmlEncoding=""String_Node_Str"";
    String xmlVersion=""String_Node_Str"";
    try {
      Method getEncoding=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      Method getVersion=PrivilegedAccessHelper.getMethod(xmlRow.getDocument().getClass(),""String_Node_Str"",new Class[]{},true);
      xmlEncoding=(String)PrivilegedAccessHelper.invokeMethod(getEncoding,xmlRow.getDocument(),new Object[]{});
      xmlVersion=(String)PrivilegedAccessHelper.invokeMethod(getVersion,xmlRow.getDocument(),new Object[]{});
    }
 catch (    Exception ex) {
    }
    XMLContext xmlContext=xmlUnmarshaller.getXMLContext();
    if (referenceClass != null && (XMLConversionManager.getDefaultJavaTypes().get(referenceClass) != null || CoreClassConstants.XML_GREGORIAN_CALENDAR.isAssignableFrom(referenceClass) || CoreClassConstants.DURATION.isAssignableFrom(referenceClass))) {
      Object nodeVal;
      try {
        Text rootTxt=(Text)xmlRow.getDOM().getFirstChild();
        nodeVal=rootTxt.getNodeValue();
      }
 catch (      Exception ex) {
        nodeVal=null;
      }
      Object obj=((XMLConversionManager)xmlContext.getSession().getDatasourcePlatform().getConversionManager()).convertObject(nodeVal,referenceClass);
      Root xmlRoot=new XMLRoot();
      xmlRoot.setObject(obj);
      String lName=xmlRow.getDOM().getLocalName();
      if (lName == null) {
        lName=xmlRow.getDOM().getNodeName();
      }
      xmlRoot.setLocalName(lName);
      xmlRoot.setNamespaceURI(xmlRow.getDOM().getNamespaceURI());
      xmlRoot.setEncoding(xmlEncoding);
      xmlRoot.setVersion(xmlVersion);
      return xmlRoot;
    }
    Descriptor descriptor=null;
    CoreAbstractSession readSession=null;
    boolean shouldWrap=true;
    if (referenceClass == null) {
      QName rootQName=new QName(xmlRow.getNamespaceURI(),xmlRow.getLocalName());
      descriptor=xmlContext.getDescriptor(rootQName);
      if (null == descriptor) {
        String type=((Element)xmlRow.getDOM()).getAttributeNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,""String_Node_Str"");
        if (null != type) {
          XPathFragment typeFragment=new XPathFragment(type);
          String namespaceURI=xmlRow.resolveNamespacePrefix(typeFragment.getPrefix());
          typeFragment.setNamespaceURI(namespaceURI);
          descriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
        }
      }
 else       if (descriptor.getTables().size() == 1) {
        shouldWrap=false;
      }
      if (null == descriptor) {
        throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
      }
 else {
        readSession=xmlContext.getSession(descriptor.getJavaClass());
      }
    }
 else {
      readSession=xmlContext.getSession(referenceClass);
      descriptor=(Descriptor)readSession.getDescriptor(referenceClass);
      if (descriptor == null) {
        throw XMLMarshalException.descriptorNotFoundInProject(referenceClass.getName());
      }
    }
    Object object=null;
    if (null == xmlRow.getDOM().getAttributes().getNamedItemNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE)) {
      xmlRow.setUnmarshaller(xmlUnmarshaller);
      xmlRow.setDocPresPolicy(xmlContext.getDocumentPreservationPolicy((AbstractSession)readSession));
      XMLObjectBuilder objectBuilder=(XMLObjectBuilder)descriptor.getObjectBuilder();
      ReadObjectQuery query=new ReadObjectQuery();
      query.setReferenceClass(referenceClass);
      query.setSession((AbstractSession)readSession);
      object=objectBuilder.buildObject(query,xmlRow,null);
      xmlRow.resolveReferences(readSession,xmlUnmarshaller.getIDResolver());
    }
    String elementNamespaceUri=xmlRow.getDOM().getNamespaceURI();
    String elementLocalName=xmlRow.getDOM().getLocalName();
    if (elementLocalName == null) {
      elementLocalName=xmlRow.getDOM().getNodeName();
    }
    String elementPrefix=xmlRow.getDOM().getPrefix();
    if (shouldWrap || descriptor.isResultAlwaysXMLRoot() || isResultAlwaysXMLRoot) {
      return descriptor.wrapObjectInXMLRoot(object,elementNamespaceUri,elementLocalName,elementPrefix,xmlEncoding,xmlVersion,this.isResultAlwaysXMLRoot,true,xmlUnmarshaller);
    }
 else {
      return object;
    }
  }
  finally {
    xmlUnmarshaller.getStringBuffer().reset();
  }
}"
63715,"public void addTests(){
  addTest(new Scenario1_1());
  addTest(new Scenario1_2());
  addTest(new Scenario1_3());
  addTest(new Scenario1_4());
  addTest(new Scenario1_5a());
  addTest(new Scenario1_5b());
  addTest(new Scenario1_6());
  addTest(new Scenario1_7a());
  addTest(new Scenario1_7b());
  addTest(new Scenario1_7c());
  addTest(new Scenario1_7d());
  addTest(new Scenario1_8a());
  addTest(new Scenario1_8b());
  addTest(new Scenario1_8d());
  addTest(new Scenario1_8e());
  addTest(new Scenario1_9a());
  addTest(new Scenario1_9b());
  addTest(new Scenario1_9c());
  addTest(new Scenario1_9d());
  addTest(new Scenario1_9e());
  addTest(new Scenario1_9f());
  addTest(new Scenario1_9g());
  addTest(new Scenario1_9h());
  addTest(new Scenario1_9i());
  addTest(new Scenario1_9j());
  addTest(new Scenario2_1a());
  addTest(new Scenario2_1b());
  addTest(new Scenario2_2a());
  addTest(new Scenario2_2b());
  addTest(new Scenario2_2c());
  addTest(new Scenario5_1a());
  addTest(new Scenario5_1b());
  addTest(new Scenario5_1c());
  addTest(new Scenario5_2a());
  addTest(new Scenario5_2b());
  addTest(new Scenario5_2c());
  addTest(new Scenario5_2d());
  addTest(new Scenario5_3a());
  addTest(new Scenario5_3b());
  addTest(new Scenario6_1());
  addTest(new Scenario6_2());
  addTest(new UseDistinctScenario());
  addTest(new ParallelBuilderReportItemTest());
  addTest(new PlaceHolderReportQueryTestCase());
  addTest(new GetLeafMappingForReportQueryTest());
  addTest(new ReportItemQueryKeyTest());
  addTest(new AttributeConversionTest());
  addCountDirectCollectionTest();
  addCountDistinctManyToManyTest();
  addCountDistinctManyToManyWithWhereClauseTest();
  addCountDistinctOneToOneTest();
  addCountDistinctOneToOneWithWhereClauseTest();
  addCountManyToManyTest();
  addCountOneToOneTest();
  addTest(new ReportQueryWithDuplicateQueryKeysTest());
  addTest(new OrderByRandomTest());
  addTest(new ClassForInheritanceTestCase());
  addTest(new ReportQueryFunctionTypeTestCase());
  addTest(new ReportQueryFunctionTypeTestCase(true));
  addTest(new ReportQueryAndExistsSubQuery());
  addTest(new ReportQueryAndExistsSubQueryWithWhereClause());
  addTest(new ReportQueryRetrievePrimaryKeysCursorTest());
}","public void addTests(){
  addTest(new Scenario1_1());
  addTest(new Scenario1_2());
  addTest(new Scenario1_3());
  addTest(new Scenario1_4());
  addTest(new Scenario1_5a());
  addTest(new Scenario1_5b());
  addTest(new Scenario1_6());
  addTest(new Scenario1_7a());
  addTest(new Scenario1_7b());
  addTest(new Scenario1_7c());
  addTest(new Scenario1_7d());
  addTest(new Scenario1_8a());
  addTest(new Scenario1_8b());
  addTest(new Scenario1_8d());
  addTest(new Scenario1_8e());
  addTest(new Scenario1_9a());
  addTest(new Scenario1_9b());
  addTest(new Scenario1_9c());
  addTest(new Scenario1_9d());
  addTest(new Scenario1_9e());
  addTest(new Scenario1_9f());
  addTest(new Scenario1_9g());
  addTest(new Scenario1_9h());
  addTest(new Scenario1_9i());
  addTest(new Scenario1_9j());
  addTest(new Scenario2_1a());
  addTest(new Scenario2_1b());
  addTest(new Scenario2_2a());
  addTest(new Scenario2_2b());
  addTest(new Scenario2_2c());
  addTest(new Scenario5_1a());
  addTest(new Scenario5_1b());
  addTest(new Scenario5_1c());
  addTest(new Scenario5_2a());
  addTest(new Scenario5_2b());
  addTest(new Scenario5_2c());
  addTest(new Scenario5_2d());
  addTest(new Scenario5_3a());
  addTest(new Scenario5_3b());
  addTest(new Scenario6_1());
  addTest(new Scenario6_2());
  addTest(new UseDistinctScenario());
  addTest(new ParallelBuilderReportItemTest());
  addTest(new PlaceHolderReportQueryTestCase());
  addTest(new GetLeafMappingForReportQueryTest());
  addTest(new ReportItemQueryKeyTest());
  addTest(new AttributeConversionTest());
  addCountDirectCollectionTest();
  addCountDistinctManyToManyTest();
  addCountDistinctManyToManyWithWhereClauseTest();
  addCountDistinctOneToOneTest();
  addCountDistinctOneToOneWithWhereClauseTest();
  addCountManyToManyTest();
  addCountOneToOneTest();
  addTest(new ReportQueryWithDuplicateQueryKeysTest());
  addTest(new OrderByRandomTest());
  addTest(new ClassForInheritanceTestCase());
  addTest(new ReportQueryFunctionTypeTestCase());
  addTest(new ReportQueryFunctionTypeTestCase(true));
  addTest(new ReportQueryAndExistsSubQuery());
  addTest(new ReportQueryAndExistsSubQueryWithWhereClause());
  addTest(new ReportQueryRetrievePrimaryKeysCursorTest());
  addTest(new ParameterizedSubqueryTest());
}"
63716,"/** 
 * INTERNAL: Rebuild myself against the base, with the values of parameters supplied by the context expression. This is used for transforming a standalone expression (e.g. the join criteria of a mapping) into part of some larger expression. You normally would not call this directly, instead calling twist See the comment there for more details""
 */
@Override public Expression twistedForBaseAndContext(Expression newBase,Expression context,Expression oldBase){
  return (Expression)this.clone();
}","/** 
 * INTERNAL: Rebuild myself against the base, with the values of parameters supplied by the context expression. This is used for transforming a standalone expression (e.g. the join criteria of a mapping) into part of some larger expression. You normally would not call this directly, instead calling twist See the comment there for more details""
 */
@Override public Expression twistedForBaseAndContext(Expression newBase,Expression context,Expression oldBase){
  return this;
}"
63717,"/** 
 * INTERNAL: Rebuild against the base, with the values of parameters supplied by the context expression. This is used for transforming a standalone expression (e.g. the join criteria of a mapping) into part of some larger expression. You normally would not call this directly, instead calling twist, (see the comment there for more details).
 */
@Override public Expression twistedForBaseAndContext(Expression newBase,Expression context,Expression oldBase){
  if (isProperty()) {
    return context.getProperty(getField());
  }
 else {
    return context.getField(getField());
  }
}","/** 
 * INTERNAL: Rebuild against the base, with the values of parameters supplied by the context expression. This is used for transforming a standalone expression (e.g. the join criteria of a mapping) into part of some larger expression. You normally would not call this directly, instead calling twist, (see the comment there for more details).
 */
@Override public Expression twistedForBaseAndContext(Expression newBase,Expression context,Expression oldBase){
  if (isProperty()) {
    return context.getProperty(getField());
  }
 else   if (newBase == oldBase) {
    return this;
  }
 else {
    return context.getField(getField());
  }
}"
63718,"private NodeList getNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy){
  if (xPathFragment.isAttribute()) {
    return selectAttributeNodes(contextNode,xPathFragment,xmlNamespaceResolver);
  }
 else   if (xPathFragment.nameIsText()) {
    return selectTextNodes(contextNode,nullPolicy);
  }
 else   if (xPathFragment.isSelfFragment()) {
    XMLNodeList xmlNodeList=new XMLNodeList(1);
    xmlNodeList.add(contextNode);
    return xmlNodeList;
  }
  if (xPathFragment.containsIndex()) {
    return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver,xPathFragment.getIndexValue());
  }
  return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver);
}","private NodeList getNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy,boolean concatText){
  if (xPathFragment.isAttribute()) {
    return selectAttributeNodes(contextNode,xPathFragment,xmlNamespaceResolver);
  }
 else   if (xPathFragment.nameIsText()) {
    return selectTextNodes(contextNode,nullPolicy,concatText);
  }
 else   if (xPathFragment.isSelfFragment()) {
    XMLNodeList xmlNodeList=new XMLNodeList(1);
    xmlNodeList.add(contextNode);
    return xmlNodeList;
  }
  if (xPathFragment.containsIndex()) {
    return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver,xPathFragment.getIndexValue());
  }
  return selectElementNodes(contextNode,xPathFragment,xmlNamespaceResolver);
}"
63719,"private NodeList selectTextNodes(Node contextNode,AbstractNullPolicy nullPolicy){
  Node n=selectSingleText(contextNode);
  XMLNodeList xmlNodeList=new XMLNodeList();
  if (n == null && nullPolicy != null) {
    if (nullPolicy.valueIsNull((Element)contextNode)) {
      if (nullPolicy.getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
        xmlNodeList.add(n);
      }
    }
 else {
      xmlNodeList.add(contextNode.getOwnerDocument().createTextNode(Constants.EMPTY_STRING));
    }
  }
 else {
    if (nullPolicy != null && nullPolicy.isNullRepresentedByXsiNil() && nullPolicy.valueIsNull((Element)contextNode)) {
      xmlNodeList.add(null);
    }
 else     if (n != null) {
      xmlNodeList.add(n);
    }
  }
  return xmlNodeList;
}","private NodeList selectTextNodes(Node contextNode,AbstractNullPolicy nullPolicy,boolean concatText){
  if (!concatText) {
    return selectAllText(contextNode);
  }
  Node n=selectSingleText(contextNode);
  XMLNodeList xmlNodeList=new XMLNodeList();
  if (n == null && nullPolicy != null) {
    if (nullPolicy.valueIsNull((Element)contextNode)) {
      if (nullPolicy.getMarshalNullRepresentation() != XMLNullRepresentationType.ABSENT_NODE) {
        xmlNodeList.add(n);
      }
    }
 else {
      xmlNodeList.add(contextNode.getOwnerDocument().createTextNode(Constants.EMPTY_STRING));
    }
  }
 else {
    if (nullPolicy != null && nullPolicy.isNullRepresentedByXsiNil() && nullPolicy.valueIsNull((Element)contextNode)) {
      xmlNodeList.add(null);
    }
 else     if (n != null) {
      xmlNodeList.add(n);
    }
  }
  return xmlNodeList;
}"
63720,"private NodeList selectNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy,boolean omitText){
  NodeList resultNodes=getNodes(contextNode,xPathFragment,xmlNamespaceResolver,nullPolicy);
  if (xPathFragment.getNextFragment() != null && !(omitText && xPathFragment.getNextFragment().nameIsText())) {
    Node resultNode;
    XMLNodeList result=new XMLNodeList();
    int numberOfResultNodes=resultNodes.getLength();
    for (int x=0; x < numberOfResultNodes; x++) {
      resultNode=resultNodes.item(x);
      result.addAll(selectNodes(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,nullPolicy,omitText));
    }
    return result;
  }
  return resultNodes;
}","private NodeList selectNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy,boolean omitText,boolean concatText){
  NodeList resultNodes=getNodes(contextNode,xPathFragment,xmlNamespaceResolver,nullPolicy,concatText);
  if (xPathFragment.getNextFragment() != null && !(omitText && xPathFragment.getNextFragment().nameIsText())) {
    Node resultNode;
    XMLNodeList result=new XMLNodeList();
    int numberOfResultNodes=resultNodes.getLength();
    for (int x=0; x < numberOfResultNodes; x++) {
      resultNode=resultNodes.item(x);
      result.addAll(selectNodes(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,nullPolicy,omitText,concatText));
    }
    return result;
  }
  return resultNodes;
}"
63721,"/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(Field xmlField,Node parent,Object value,CoreAbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  if (numberOfNodes == 0 && xmlField.getLastXPathFragment().nameIsText()) {
    nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField),null,true);
    XMLNodeList textNodes=new XMLNodeList();
    for (int i=0; i < nodes.getLength(); i++) {
      Element nextNode=(Element)nodes.item(i);
      Text text=nextNode.getOwnerDocument().createTextNode(""String_Node_Str"");
      nextNode.appendChild(text);
      textNodes.add(text);
    }
    numberOfNodes=textNodes.getLength();
  }
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          if (value == XMLRecord.NIL && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE))) {
            Element parentElement=(Element)node.getParentNode();
            addXsiNilToElement(parentElement,xmlField);
            parentElement.removeChild(node);
          }
 else {
            String stringValue=(String)session.getDatasourcePlatform().getConversionManager().convertObject(value,CoreClassConstants.STRING);
            Element parentElement=(Element)node.getParentNode();
            if (parentElement == null && parent.getNodeType() == Node.ELEMENT_NODE) {
              parentElement=(Element)parent;
            }
            if (stringValue.length() == 0 && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
              parentElement.removeChild(node);
            }
 else {
              node.setNodeValue(stringValue);
              if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
                Attr nil=parentElement.getAttributeNodeNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
                if (nil != null) {
                  parentElement.removeAttributeNode(nil);
                }
              }
            }
          }
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,getNamespaceResolverForField(xmlField)),session);
  }
  return nodes;
}","/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(Field xmlField,Node parent,Object value,CoreAbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField),null,false,false);
  int numberOfNodes=nodes.getLength();
  if (numberOfNodes == 0 && xmlField.getLastXPathFragment().nameIsText()) {
    nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField),null,true);
    XMLNodeList textNodes=new XMLNodeList();
    for (int i=0; i < nodes.getLength(); i++) {
      Element nextNode=(Element)nodes.item(i);
      Text text=nextNode.getOwnerDocument().createTextNode(""String_Node_Str"");
      nextNode.appendChild(text);
      textNodes.add(text);
    }
    numberOfNodes=textNodes.getLength();
    nodes=textNodes;
  }
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        if (parentNode != null) {
          Node grandParentNode=parentNode.getParentNode();
          NodeList childNodes=parentNode.getChildNodes();
          if (childNodes.getLength() == numberOfNodes) {
            grandParentNode.removeChild(parentNode);
          }
 else {
            for (int x=0; x < childNodes.getLength(); x++) {
              Node next=childNodes.item(x);
              if (next.getNodeType() == Node.TEXT_NODE || next.getNodeType() == Node.CDATA_SECTION_NODE) {
                parentNode.removeChild(next);
              }
            }
          }
        }
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          if (value == XMLRecord.NIL && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE))) {
            Element parentElement=(Element)node.getParentNode();
            addXsiNilToElement(parentElement,xmlField);
            parentElement.removeChild(node);
          }
 else {
            String stringValue=(String)session.getDatasourcePlatform().getConversionManager().convertObject(value,CoreClassConstants.STRING);
            Element parentElement=(Element)node.getParentNode();
            if (parentElement == null && parent.getNodeType() == Node.ELEMENT_NODE) {
              parentElement=(Element)parent;
            }
            if (stringValue.length() == 0 && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
              parentElement.removeChild(node);
            }
 else {
              node.setNodeValue(stringValue);
              if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
                Attr nil=parentElement.getAttributeNodeNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
                if (nil != null) {
                  parentElement.removeAttributeNode(nil);
                }
              }
            }
          }
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,getNamespaceResolverForField(xmlField)),session);
  }
  return nodes;
}"
63722,"/** 
 * Attempt to load the DatabasePlatform using the given platform class name.  If the platform cannot be loaded Oracle11Platform will be returned.
 * @param platformClassName class name of the DatabasePlatform to be loaded
 * @return DatabasePlatform loaded for the given platformClassname, or Oracle11Platform if not found
 * @see org.eclipse.persistence.platform.database.oracle.Oracle11Platform
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static DatabasePlatform loadDatabasePlatform(String platformClassName){
  DatabasePlatform dbPlatform;
  try {
    Class platformClass=null;
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      platformClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(platformClassName));
    }
 else {
      platformClass=PrivilegedAccessHelper.getClassForName(platformClassName);
    }
    dbPlatform=(DatabasePlatform)Helper.getInstanceFromClass(platformClass);
  }
 catch (  Exception e) {
    dbPlatform=new Oracle11Platform();
  }
  return dbPlatform;
}","/** 
 * Attempt to load the DatabasePlatform using the given platform class name.  If the platform cannot be loaded Oracle11Platform will be returned - if available.
 * @param platformClassName class name of the DatabasePlatform to be loaded
 * @return DatabasePlatform loaded for the given platformClassname, or Oracle11Platform if not found
 * @see org.eclipse.persistence.platform.database.oracle.Oracle11Platform
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static DatabasePlatform loadDatabasePlatform(String platformClassName){
  DatabasePlatform dbPlatform=null;
  Class platformClass=null;
  try {
    if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
      platformClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(platformClassName));
    }
 else {
      platformClass=PrivilegedAccessHelper.getClassForName(platformClassName);
    }
    dbPlatform=(DatabasePlatform)Helper.getInstanceFromClass(platformClass);
  }
 catch (  Exception e) {
    try {
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        platformClass=(Class)AccessController.doPrivileged(new PrivilegedClassForName(DEFAULT_PLATFORM));
      }
 else {
        platformClass=PrivilegedAccessHelper.getClassForName(DEFAULT_PLATFORM);
      }
      dbPlatform=(DatabasePlatform)Helper.getInstanceFromClass(platformClass);
    }
 catch (    Exception ex) {
    }
  }
  return dbPlatform;
}"
63723,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object value=unmarshalRecord.getCharacters().toString();
  boolean isCDATA=unmarshalRecord.isBufferCDATA();
  unmarshalRecord.resetStringBuffer();
  Field toWrite=xmlField;
  if (xmlField.isCDATA() != isCDATA) {
    toWrite=new XMLField(xmlField.getName());
    toWrite.setNamespaceResolver(xmlField.getNamespaceResolver());
    toWrite.setIsCDATA(isCDATA);
  }
  ConversionManager conversionManager=(ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=conversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(toWrite,value);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object value=unmarshalRecord.getCharacters().toString();
  boolean isCDATA=unmarshalRecord.isBufferCDATA();
  unmarshalRecord.resetStringBuffer();
  Field toWrite=xmlField;
  if (xmlField.isCDATA() != isCDATA) {
    toWrite=new XMLField(xmlField.getName());
    toWrite.setNamespaceResolver(xmlField.getNamespaceResolver());
    toWrite.setIsCDATA(isCDATA);
  }
  ConversionManager conversionManager=unmarshalRecord.getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName(),conversionManager);
    value=conversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(toWrite,value);
}"
63724,"private QName getSchemaType(Field xmlField,Object value,CoreAbstractSession session){
  QName schemaType=null;
  if (xmlField.isTypedTextField()) {
    schemaType=xmlField.getXMLType(value.getClass());
  }
 else   if (xmlField.isUnionField()) {
    return getSchemaTypeForUnion((UnionField)xmlField,value,session);
  }
 else   if (xmlField.getSchemaType() != null) {
    schemaType=xmlField.getSchemaType();
  }
  return schemaType;
}","private QName getSchemaType(Field xmlField,Object value,CoreAbstractSession session){
  QName schemaType=null;
  if (xmlField.isTypedTextField()) {
    ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
    schemaType=xmlField.getXMLType(value.getClass(),conversionManager);
  }
 else   if (xmlField.isUnionField()) {
    return getSchemaTypeForUnion((UnionField)xmlField,value,session);
  }
 else   if (xmlField.getSchemaType() != null) {
    schemaType=xmlField.getSchemaType();
  }
  return schemaType;
}"
63725,"private QName getSchemaTypeForUnion(UnionField xmlField,Object value,CoreAbstractSession session){
  List schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  QName nextQName;
  Class javaClass;
  for (int i=0; i < schemaTypes.size(); i++) {
    nextQName=(QName)xmlField.getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        javaClass=xmlField.getJavaClass(nextQName);
        value=((ConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}","private QName getSchemaTypeForUnion(UnionField xmlField,Object value,CoreAbstractSession session){
  List schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  QName nextQName;
  Class javaClass;
  for (int i=0; i < schemaTypes.size(); i++) {
    nextQName=(QName)xmlField.getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
        javaClass=xmlField.getJavaClass(nextQName,conversionManager);
        value=conversionManager.convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}"
63726,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlAnyObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((Root)objectValue).getObject();
    if (objectValue == null) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    CoreSession childSession=null;
    try {
      childSession=marshaller.getContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    Descriptor descriptor=(Descriptor)childSession.getDescriptor(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      throw XMLMarshalException.defaultRootElementNotSpecified((XMLDescriptor)descriptor);
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlAnyObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((Root)objectValue).getObject();
    if (objectValue == null) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    CoreSession childSession=null;
    try {
      childSession=marshaller.getContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    Descriptor descriptor=(Descriptor)childSession.getDescriptor(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      throw XMLMarshalException.defaultRootElementNotSpecified((XMLDescriptor)descriptor);
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(CoreAbstractSession)childSession,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}"
63727,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
          if (unmarshalRecord.isNil()) {
            return true;
          }
        }
 else         if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (policy != null && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeCollectionMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (!(unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil())) {
      Field xmlFld=(Field)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
          if (unmarshalRecord.isNil()) {
            return true;
          }
        }
 else         if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (policy != null && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeCollectionMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (!(unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil())) {
      Field xmlFld=(Field)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
63728,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
    if (unmarshalRecord.getXMLReader().isInCollection()) {
      unmarshalRecord.addAttributeValue(this,null);
    }
 else {
      unmarshalRecord.setAttributeValueNull(this);
    }
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
          return;
        }
      }
      if (builder.getNodes().size() > 1) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping,unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  InverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      Object currentValue=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (!isInverseReference || (currentValue == null && isInverseReference)) {
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
      }
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  objectValue=xmlCompositeCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
    if (unmarshalRecord.getXMLReader().isInCollection()) {
      unmarshalRecord.addAttributeValue(this,null);
    }
 else {
      unmarshalRecord.setAttributeValueNull(this);
    }
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
          return;
        }
      }
      if (builder.getNodes().size() > 1) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping,unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  InverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      Object currentValue=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (!isInverseReference || (currentValue == null && isInverseReference)) {
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
      }
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  objectValue=xmlCompositeCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}"
63729,"private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeDirectCollectionMapping.getNullPolicy())) {
    value=null;
  }
 else   if (!isWhitespaceAware() && Constants.EMPTY_STRING.equals(value)) {
    value=null;
  }
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  ConversionManager conversionManager=(ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=conversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  value=xmlCompositeDirectCollectionMapping.convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  if (value != null && value.getClass() == CoreClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}","private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeDirectCollectionMapping.getNullPolicy())) {
    value=null;
  }
 else   if (!isWhitespaceAware() && Constants.EMPTY_STRING.equals(value)) {
    value=null;
  }
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  ConversionManager conversionManager=unmarshalRecord.getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName(),conversionManager);
    value=conversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  value=xmlCompositeDirectCollectionMapping.convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  if (value != null && value.getClass() == CoreClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=conversionManager.collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=conversionManager.normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}"
63730,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (null != policy && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        QName schemaType=unmarshalRecord.getTypeQName();
        if (schemaType == null) {
          schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaType();
          unmarshalRecord.setTypeQName(schemaType);
        }
        if (schemaType != null) {
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(schemaType);
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeObjectMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil()) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        Field xmlFld=(Field)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    unmarshalRecord.removeNullCapableValue(this);
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (xmlCompositeObjectMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeObjectMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeObjectMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
      if (null != policy && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        QName schemaType=unmarshalRecord.getTypeQName();
        if (schemaType == null) {
          schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaType();
          unmarshalRecord.setTypeQName(schemaType);
        }
        if (schemaType != null) {
          Class theClass=unmarshalRecord.getConversionManager().javaType(schemaType);
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeObjectMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeObjectMappingContentHandler aHandler=new CompositeObjectMappingContentHandler(unmarshalRecord,this,xmlCompositeObjectMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else {
      if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil()) {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
      }
 else {
        Field xmlFld=(Field)this.xmlCompositeObjectMapping.getField();
        if (xmlFld.hasLastXPathFragment()) {
          unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
        }
        processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeObjectMapping);
      }
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
63731,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() != 0) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeObjectMapping,xmlCompositeObjectMapping,unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    setAttributeValue(object,unmarshalRecord);
    unmarshalRecord.setChildRecord(null);
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlCompositeObjectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() != 0) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
          return;
        }
      }
      if (builder.getDocument() != null) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeObjectMapping,xmlCompositeObjectMapping,unmarshalRecord,false,null);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,xPathFragment,null);
      return;
    }
  }
 else {
    Object object=unmarshalRecord.getChildRecord().getCurrentObject();
    setAttributeValue(object,unmarshalRecord);
    unmarshalRecord.setChildRecord(null);
  }
}"
63732,"public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy.isKeepUnknownAsElement()) || (keepAsElementPolicy.isKeepAllAsElement()))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        if (unmarshalRecord.isNamespaceAware()) {
          xsiType=element.getAttributeNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_TYPE_ATTRIBUTE);
        }
 else {
          xsiType=element.getAttribute(Constants.SCHEMA_TYPE_ATTRIBUTE);
        }
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(unmarshalRecord.getNamespaceSeparator());
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
          if (theClass != null) {
            value=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
          }
        }
 else {
          if (!unmarshalRecord.isNamespaceAware()) {
            QName qName=new QName(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI,xsiType);
            Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(qName);
            if (theClass != null) {
              value=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertObject(element.getTextContent(),theClass,qName);
            }
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=selfRecord.getCurrentObject();
    valueToSet=xmlCompositeObjectMapping.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    InverseReferenceMapping inverseReferenceMapping=xmlCompositeObjectMapping.getInverseReferenceMapping();
    if (null != inverseReferenceMapping) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(valueToSet,unmarshalRecord.getCurrentObject());
    }
  }
}","public void endSelfNodeValue(UnmarshalRecord unmarshalRecord,UnmarshalRecord selfRecord,Attributes attributes){
  if (xmlCompositeObjectMapping.getNullPolicy().valueIsNull(attributes)) {
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),null);
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  if (unmarshalRecord.getFragmentBuilder().getDocument() != null) {
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    if ((((keepAsElementPolicy.isKeepUnknownAsElement()) || (keepAsElementPolicy.isKeepAllAsElement()))) && (builder.getNodes().size() != 0)) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=unmarshalRecord.getConversionManager().javaType(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeObjectMapping,null,null);
          return;
        }
      }
      Element element=(Element)builder.getNodes().remove(builder.getNodes().size() - 1);
      String xsiType=null;
      if (null != element) {
        if (unmarshalRecord.isNamespaceAware()) {
          xsiType=element.getAttributeNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_TYPE_ATTRIBUTE);
        }
 else {
          xsiType=element.getAttribute(Constants.SCHEMA_TYPE_ATTRIBUTE);
        }
      }
      if (null != xsiType) {
        xsiType=xsiType.trim();
        Object value=element;
        String namespace=null;
        int colonIndex=xsiType.indexOf(unmarshalRecord.getNamespaceSeparator());
        if (colonIndex > -1) {
          String prefix=xsiType.substring(0,colonIndex);
          namespace=unmarshalRecord.resolveNamespacePrefix(prefix);
          if (null == namespace) {
            namespace=XMLPlatformFactory.getInstance().getXMLPlatform().resolveNamespacePrefix(element,prefix);
          }
          String name=xsiType.substring(colonIndex + 1);
          QName qName=new QName(namespace,xsiType.substring(colonIndex + 1));
          ConversionManager conversionManager=unmarshalRecord.getConversionManager();
          Class theClass=conversionManager.javaType(qName);
          if (theClass != null) {
            value=conversionManager.convertObject(element.getTextContent(),theClass,qName);
          }
        }
 else {
          if (!unmarshalRecord.isNamespaceAware()) {
            QName qName=new QName(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI,xsiType);
            ConversionManager conversionManager=unmarshalRecord.getConversionManager();
            Class theClass=conversionManager.javaType(qName);
            if (theClass != null) {
              value=conversionManager.convertObject(element.getTextContent(),theClass,qName);
            }
          }
        }
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),value);
      }
 else {
        xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),element);
      }
    }
  }
 else {
    Object valueToSet=selfRecord.getCurrentObject();
    valueToSet=xmlCompositeObjectMapping.convertDataValueToObjectValue(valueToSet,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
    xmlCompositeObjectMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),valueToSet);
    InverseReferenceMapping inverseReferenceMapping=xmlCompositeObjectMapping.getInverseReferenceMapping();
    if (null != inverseReferenceMapping) {
      inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(valueToSet,unmarshalRecord.getCurrentObject());
    }
  }
}"
63733,"/** 
 * Removes all leading and trailing whitespaces, and replaces any sequences of whitespaces that occur in the string with a single ' ' character.
 */
public String collapseStringValue(String value){
  int length=value.length();
  int start=0;
  while (start < length) {
    if (isWhitespace(value.charAt(start),true)) {
      break;
    }
    start++;
  }
  if (start == length) {
    return value;
  }
  StringBuffer collapsedString=new StringBuffer(length);
  if (start != 0) {
    for (int i=0; i < start; i++) {
      collapsedString.append(value.charAt(i));
    }
    collapsedString.append(' ');
  }
  boolean inSequence=true;
  for (int i=start + 1; i < length; i++) {
    char nextCharacter=value.charAt(i);
    if (!isWhitespace(nextCharacter,true)) {
      collapsedString.append(nextCharacter);
      inSequence=false;
    }
 else {
      if (inSequence) {
        continue;
      }
 else {
        collapsedString.append(' ');
        inSequence=true;
      }
    }
  }
  length=collapsedString.length();
  if (length > 0 && collapsedString.charAt(length - 1) == ' ') {
    collapsedString.setLength(length - 1);
  }
  return collapsedString.toString();
}","/** 
 * Removes all leading and trailing whitespaces, and replaces any sequences of whitespaces that occur in the string with a single ' ' character.
 */
@Override public String collapseStringValue(String value){
  int length=value.length();
  int start=0;
  while (start < length) {
    if (isWhitespace(value.charAt(start),true)) {
      break;
    }
    start++;
  }
  if (start == length) {
    return value;
  }
  StringBuffer collapsedString=new StringBuffer(length);
  if (start != 0) {
    for (int i=0; i < start; i++) {
      collapsedString.append(value.charAt(i));
    }
    collapsedString.append(' ');
  }
  boolean inSequence=true;
  for (int i=start + 1; i < length; i++) {
    char nextCharacter=value.charAt(i);
    if (!isWhitespace(nextCharacter,true)) {
      collapsedString.append(nextCharacter);
      inSequence=false;
    }
 else {
      if (inSequence) {
        continue;
      }
 else {
        collapsedString.append(' ');
        inSequence=true;
      }
    }
  }
  length=collapsedString.length();
  if (length > 0 && collapsedString.charAt(length - 1) == ' ') {
    collapsedString.setLength(length - 1);
  }
  return collapsedString.toString();
}"
63734,"public Object convertSchemaBase64ListToByteArrayList(Object sourceObject,CoreContainerPolicy containerPolicy,CoreAbstractSession session) throws ConversionException {
  if (sourceObject instanceof String) {
    StringTokenizer tokenizer=new StringTokenizer((String)sourceObject,""String_Node_Str"");
    Object container=containerPolicy.containerInstance();
    while (tokenizer.hasMoreElements()) {
      String token=tokenizer.nextToken();
      byte[] bytes=Base64.base64Decode(token.getBytes());
      containerPolicy.addInto(bytes,container,session);
    }
    return container;
  }
  throw ConversionException.couldNotBeConverted(sourceObject,CoreClassConstants.ABYTE);
}","@Override public Object convertSchemaBase64ListToByteArrayList(Object sourceObject,CoreContainerPolicy containerPolicy,CoreAbstractSession session) throws ConversionException {
  if (sourceObject instanceof String) {
    StringTokenizer tokenizer=new StringTokenizer((String)sourceObject,""String_Node_Str"");
    Object container=containerPolicy.containerInstance();
    while (tokenizer.hasMoreElements()) {
      String token=tokenizer.nextToken();
      byte[] bytes=Base64.base64Decode(token.getBytes());
      containerPolicy.addInto(bytes,container,session);
    }
    return container;
  }
  throw ConversionException.couldNotBeConverted(sourceObject,CoreClassConstants.ABYTE);
}"
63735,"/** 
 * Replaces any CR, Tab or LF characters in the string with a single ' ' character.
 */
public String normalizeStringValue(String value){
  int i=0;
  int length=value.length();
  while (i < length) {
    if (isWhitespace(value.charAt(i),false)) {
      break;
    }
    i++;
  }
  if (i == length) {
    return value;
  }
  char[] buffer=value.toCharArray();
  buffer[i]=' ';
  i++;
  for (; i < length; i++) {
    if (isWhitespace(buffer[i],false)) {
      buffer[i]=' ';
    }
  }
  return new String(buffer);
}","/** 
 * Replaces any CR, Tab or LF characters in the string with a single ' ' character.
 */
@Override public String normalizeStringValue(String value){
  int i=0;
  int length=value.length();
  while (i < length) {
    if (isWhitespace(value.charAt(i),false)) {
      break;
    }
    i++;
  }
  if (i == length) {
    return value;
  }
  char[] buffer=value.toCharArray();
  buffer[i]=' ';
  i++;
  for (; i < length; i++) {
    if (isWhitespace(buffer[i],false)) {
      buffer[i]=' ';
    }
  }
  return new String(buffer);
}"
63736,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlDirectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText) {
    return;
  }
  Object value;
  CharSequence unmarshalRecordCharacters=unmarshalRecord.getCharacters();
  if (unmarshalRecordCharacters.length() == 0) {
    value=xmlDirectMapping.getNullValue();
  }
 else {
    value=unmarshalRecordCharacters.toString();
  }
  unmarshalRecord.resetStringBuffer();
  CoreAbstractSession session=unmarshalRecord.getSession();
  ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
  QName typeQName=unmarshalRecord.getTypeQName();
  if (typeQName != null) {
    Class typeClass=xmlField.getJavaClass(typeQName);
    value=conversionManager.convertObject(value,typeClass,typeQName);
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,session,unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  if (unmarshalRecord.isNil() && xmlDirectMapping.getNullPolicy().isNullRepresentedByXsiNil()) {
    unmarshalRecord.resetStringBuffer();
    return;
  }
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlDirectMapping.getField();
  if (!xmlField.getLastXPathFragment().nameIsText) {
    return;
  }
  Object value;
  CharSequence unmarshalRecordCharacters=unmarshalRecord.getCharacters();
  if (unmarshalRecordCharacters.length() == 0) {
    value=xmlDirectMapping.getNullValue();
  }
 else {
    value=unmarshalRecordCharacters.toString();
  }
  unmarshalRecord.resetStringBuffer();
  CoreAbstractSession session=unmarshalRecord.getSession();
  ConversionManager conversionManager=(ConversionManager)session.getDatasourcePlatform().getConversionManager();
  QName typeQName=unmarshalRecord.getTypeQName();
  if (typeQName != null) {
    Class typeClass=xmlField.getJavaClass(typeQName,conversionManager);
    value=conversionManager.convertObject(value,typeClass,typeQName);
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  Object convertedValue=xmlDirectMapping.getAttributeValue(value,session,unmarshalRecord);
  unmarshalRecord.setAttributeValue(convertedValue,xmlDirectMapping);
}"
63737,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field field=null;
  Object value=this.getCharacters();
  Class attributeClassification=null;
  AbstractNullPolicy nullPolicy;
  boolean isSwaRef=false;
  CoreContainerPolicy cp=null;
  if (isCollection) {
    isSwaRef=((BinaryDataCollectionMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    nullPolicy=((BinaryDataCollectionMapping)mapping).getNullPolicy();
    cp=((BinaryDataCollectionMapping)mapping).getContainerPolicy();
  }
 else {
    isSwaRef=((BinaryDataMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataMapping)mapping).getField();
    attributeClassification=((BinaryDataMapping)mapping).getAttributeClassification();
    nullPolicy=((BinaryDataMapping)mapping).getNullPolicy();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(getCharacters(),attributeClassification);
    if (parent.isNil() && parent.getXMLReader().isNullRepresentedByXsiNil(nullPolicy)) {
      value=null;
      isCollection=isCollection && parent.getXMLReader().isInCollection();
    }
 else {
      if (null != valueFromReader) {
        value=valueFromReader;
      }
 else {
        String valueString=value.toString();
        if (valueString.length() == 0 && nullPolicy.isNullRepresentedByEmptyNode()) {
          value=null;
        }
 else {
          if (field.usesSingleNode()) {
            value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ListToByteArrayList(valueString,cp,parent.getSession());
          }
 else {
            value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(valueString);
          }
        }
      }
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession(),cp);
    }
  }
  value=converter.convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
  if (isCollection) {
    parent.addAttributeValue((ContainerValue)nodeValue,value);
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field field=null;
  Object value=this.getCharacters();
  Class attributeClassification=null;
  AbstractNullPolicy nullPolicy;
  boolean isSwaRef=false;
  CoreContainerPolicy cp=null;
  if (isCollection) {
    isSwaRef=((BinaryDataCollectionMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    nullPolicy=((BinaryDataCollectionMapping)mapping).getNullPolicy();
    cp=((BinaryDataCollectionMapping)mapping).getContainerPolicy();
  }
 else {
    isSwaRef=((BinaryDataMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataMapping)mapping).getField();
    attributeClassification=((BinaryDataMapping)mapping).getAttributeClassification();
    nullPolicy=((BinaryDataMapping)mapping).getNullPolicy();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(getCharacters(),attributeClassification);
    if (parent.isNil() && parent.getXMLReader().isNullRepresentedByXsiNil(nullPolicy)) {
      value=null;
      isCollection=isCollection && parent.getXMLReader().isInCollection();
    }
 else {
      if (null != valueFromReader) {
        value=valueFromReader;
      }
 else {
        String valueString=value.toString();
        if (valueString.length() == 0 && nullPolicy.isNullRepresentedByEmptyNode()) {
          value=null;
        }
 else {
          if (field.usesSingleNode()) {
            value=parent.getConversionManager().convertSchemaBase64ListToByteArrayList(valueString,cp,parent.getSession());
          }
 else {
            value=parent.getConversionManager().convertSchemaBase64ToByteArray(valueString);
          }
        }
      }
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession(),cp);
    }
  }
  value=converter.convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
  if (isCollection) {
    parent.addAttributeValue((ContainerValue)nodeValue,value);
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}"
63738,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  marshalRecord.startCollection();
  int size=marshalRecord.getCycleDetectionStack().size();
  if ((isInverseReference || xmlCompositeCollectionMapping.getInverseReferenceMapping() != null) && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    if (cp.contains(owner,collection,session)) {
      return false;
    }
  }
  iterator=cp.iteratorFor(collection);
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeCollectionMapping.isReadOnly()) {
    return false;
  }
  Object collection=xmlCompositeCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeCollectionMapping.getWrapperNullPolicy() != null);
  }
  int size=marshalRecord.getCycleDetectionStack().size();
  if ((isInverseReference || xmlCompositeCollectionMapping.getInverseReferenceMapping() != null) && size >= 2) {
    Object owner=marshalRecord.getCycleDetectionStack().get(size - 2);
    if (cp.contains(owner,collection,session)) {
      return false;
    }
  }
  marshalRecord.startCollection();
  iterator=cp.iteratorFor(collection);
  while (cp.hasNext(iterator)) {
    Object objectValue=cp.next(iterator,session);
    marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
  marshalRecord.endCollection();
  return true;
}"
63739,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (null == level) {
      level=new Level(true,true);
    }
 else {
      position=level;
      level=new Level(true,true,level);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        numberOfTabs++;
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.writeCR();
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab(),false);
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (null == level) {
      level=new Level(true,true);
    }
 else {
      position=level;
      level=new Level(true,true,level);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        numberOfTabs++;
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.writeCR();
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab(),false);
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63740,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (null == level) {
      level=new Level(true,true,level);
      newLevel=level;
    }
 else {
      position=level;
      level=new Level(true,true,level);
      newLevel=level;
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position != null && position.needToOpenComplex) {
      writer.write('{');
      position.needToOpenComplex=false;
      position.needToCloseComplex=true;
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        position.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (null == level) {
      level=new Level(true,true,level);
      newLevel=level;
    }
 else {
      position=level;
      level=new Level(true,true,level);
      newLevel=level;
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position != null && position.needToOpenComplex) {
      writer.write('{');
      position.needToOpenComplex=false;
      position.needToCloseComplex=true;
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        position.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63741,"@Override public void startCollection(){
  if (null == level) {
    try {
      startCallback();
      writer.write('[');
      level=new Level(true,false,level);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
 else {
    level.setCollection(true);
    level.setEmptyCollection(true);
  }
}","@Override public void startCollection(){
  if (null == level) {
    try {
      startCallback();
      writer.write('[');
      level=new Level(true,false,level);
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
 else {
    level.setCollection(true);
    level.setEmptyCollection(true);
    charactersAllowed=false;
    isStartElementOpen=false;
  }
}"
63742,"/** 
 * This constructor allows setting the default package name and database platform.
 * @param defaultPackage package name to be prepended to generated class names for artifactsnot in a PL/SQL package such as an Entity (to avoid having classes in the default package)
 * @param dbPlatform DatabasePlatform to be used to get class names for database types, i.e. java.math.BigDecimal for DECIMAL.
 * @param generateCRUDOps if true, CRUD operations (NamedNativeQueryMetadata) will be generated for each Entity
 * @see org.eclipse.persistence.internal.databaseaccess.DatabasePlatform
 */
public JPAMetadataGenerator(String defaultPackage,DatabasePlatform dbPlatform,boolean generateCRUDOps){
  this.defaultPackage=defaultPackage;
  this.dbPlatform=dbPlatform;
  this.generateCRUDOps=generateCRUDOps;
  xmlEntityMappings=new XMLEntityMappings();
  initializeXMLEntityMappingLists();
}","/** 
 * This constructor allows setting the default package name and database platform.
 * @param defaultPackage package name to be prepended to generated class names for artifactsnot in a PL/SQL package such as an Entity (to avoid having classes in the default package)
 * @param dbPlatform DatabasePlatform to be used to get class names for database types, i.e. java.math.BigDecimal for DECIMAL.
 * @param generateCRUDOps if true, CRUD operations (NamedNativeQueryMetadata) will be generated for each Entity
 * @see org.eclipse.persistence.internal.databaseaccess.DatabasePlatform
 */
public JPAMetadataGenerator(String defaultPackage,DatabasePlatform dbPlatform,boolean generateCRUDOps){
  this.defaultPackage=defaultPackage.toLowerCase();
  this.dbPlatform=dbPlatform;
  this.generateCRUDOps=generateCRUDOps;
  xmlEntityMappings=new XMLEntityMappings();
  initializeXMLEntityMappingLists();
}"
63743,"/** 
 * Generates NamedNativeQueryMetadata for CRUD operations (create, findAll, findByPk, update and delete) for a given Entity if required, i.e. generateCRUDOps is true.
 */
@SuppressWarnings(""String_Node_Str"") protected void generateCRUDMetadata(EntityAccessor entity){
  if (generateCRUDOps) {
    if (entity.getNamedNativeQueries() == null) {
      entity.setNamedNativeQueries(new ArrayList<NamedNativeQueryMetadata>());
    }
    String tableName=entity.getTable().getName();
    String entityType=getUnqualifiedEntityName(tableName) + TYPE_STR;
    List<IdAccessor> ids=entity.getAttributes().getIds();
    List<BasicAccessor> basics=entity.getAttributes().getBasics();
    List<MappingAccessor> mappings=new ArrayList<MappingAccessor>();
    mappings.addAll(ids);
    mappings.addAll(basics);
    String pks=null;
    int pkCount=0;
    for (    IdAccessor pk : ids) {
      if (pkCount++ == 0) {
        pks=OPEN_BRACKET + pk.getName().toUpperCase() + EQUALS_BINDING1_STR;
      }
 else {
        pks=pks.concat(AND_STR + pk.getName().toUpperCase() + EQUALS_BINDING_STR+ pkCount++);
      }
    }
    if (pks != null) {
      pks=pks.concat(CLOSE_BRACKET);
    }
    NamedNativeQueryMetadata crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(PK_QUERYNAME + UNDERSCORE + entityType);
    crudQuery.setQuery(SELECT_FROM_STR + tableName + WHERE_STR+ pks);
    entity.getNamedNativeQueries().add(crudQuery);
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(ALL_QUERYNAME + UNDERSCORE + entityType);
    crudQuery.setQuery(SELECT_FROM_STR + tableName);
    entity.getNamedNativeQueries().add(crudQuery);
    String sqlStmt=INSERT_STR + tableName + SINGLE_SPACE+ OPEN_BRACKET;
    int idx=1;
    String cols=""String_Node_Str"";
    for (Iterator i=mappings.iterator(); i.hasNext(); ) {
      MappingAccessor mapping=(MappingAccessor)i.next();
      cols+=mapping.getName().toUpperCase();
      if (i.hasNext()) {
        cols+=COMMA_SPACE_STR;
      }
      idx++;
    }
    sqlStmt+=cols + CLOSE_BRACKET + VALUES_STR+ OPEN_BRACKET;
    String vals=""String_Node_Str"";
    for (int k=1; k < idx; k++) {
      vals+=QUESTION_STR + k;
      if (k + 1 < idx) {
        vals+=COMMA_SPACE_STR;
      }
    }
    sqlStmt+=vals + CLOSE_BRACKET;
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(CREATE_OPERATION_NAME + UNDERSCORE + entityType);
    crudQuery.setQuery(sqlStmt);
    entity.getNamedNativeQueries().add(crudQuery);
    sqlStmt=UPDATE_STR + tableName + SET_STR;
    idx=pkCount;
    for (Iterator i=basics.iterator(); i.hasNext(); ) {
      BasicAccessor basic=(BasicAccessor)i.next();
      sqlStmt+=basic.getName().toUpperCase() + EQUALS_BINDING_STR + (++idx);
      if (i.hasNext()) {
        sqlStmt+=COMMA_SPACE_STR;
      }
    }
    sqlStmt+=WHERE_STR + pks;
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(UPDATE_OPERATION_NAME + UNDERSCORE + entityType);
    crudQuery.setQuery(sqlStmt);
    entity.getNamedNativeQueries().add(crudQuery);
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(REMOVE_OPERATION_NAME + UNDERSCORE + entityType);
    crudQuery.setQuery(DELETE_STR + tableName + WHERE_STR+ pks);
    entity.getNamedNativeQueries().add(crudQuery);
  }
}","/** 
 * Generates NamedNativeQueryMetadata for CRUD operations (create, findAll, findByPk, update and delete) for a given Entity if required, i.e. generateCRUDOps is true.
 */
@SuppressWarnings(""String_Node_Str"") protected void generateCRUDMetadata(EntityAccessor entity){
  if (generateCRUDOps) {
    if (entity.getNamedNativeQueries() == null) {
      entity.setNamedNativeQueries(new ArrayList<NamedNativeQueryMetadata>());
    }
    String tableName=entity.getTable().getName();
    String entityType=getUnqualifiedEntityName(tableName) + TYPE_STR;
    List<IdAccessor> ids=entity.getAttributes().getIds();
    List<BasicAccessor> basics=entity.getAttributes().getBasics();
    List<MappingAccessor> mappings=new ArrayList<MappingAccessor>();
    mappings.addAll(ids);
    mappings.addAll(basics);
    String pks=null;
    int pkCount=0;
    for (    IdAccessor pk : ids) {
      if (pkCount++ == 0) {
        pks=OPEN_BRACKET + pk.getName().toUpperCase() + EQUALS_BINDING1_STR;
      }
 else {
        pks=pks.concat(AND_STR + pk.getName().toUpperCase() + EQUALS_BINDING_STR+ pkCount++);
      }
    }
    if (pks != null) {
      pks=pks.concat(CLOSE_BRACKET);
    }
    NamedNativeQueryMetadata crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(PK_QUERYNAME + UNDERSCORE + entityType);
    crudQuery.setQuery(SELECT_FROM_STR + tableName + WHERE_STR+ pks);
    crudQuery.setResultClassName(entity.getClassName());
    entity.getNamedNativeQueries().add(crudQuery);
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(ALL_QUERYNAME + UNDERSCORE + entityType);
    crudQuery.setQuery(SELECT_FROM_STR + tableName);
    crudQuery.setResultClassName(entity.getClassName());
    entity.getNamedNativeQueries().add(crudQuery);
    String sqlStmt=INSERT_STR + tableName + SINGLE_SPACE+ OPEN_BRACKET;
    int idx=1;
    String cols=""String_Node_Str"";
    for (Iterator i=mappings.iterator(); i.hasNext(); ) {
      MappingAccessor mapping=(MappingAccessor)i.next();
      cols+=mapping.getName().toUpperCase();
      if (i.hasNext()) {
        cols+=COMMA_SPACE_STR;
      }
      idx++;
    }
    sqlStmt+=cols + CLOSE_BRACKET + VALUES_STR+ OPEN_BRACKET;
    String vals=""String_Node_Str"";
    for (int k=1; k < idx; k++) {
      vals+=QUESTION_STR + k;
      if (k + 1 < idx) {
        vals+=COMMA_SPACE_STR;
      }
    }
    sqlStmt+=vals + CLOSE_BRACKET;
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(CREATE_OPERATION_NAME + UNDERSCORE + entityType);
    crudQuery.setQuery(sqlStmt);
    entity.getNamedNativeQueries().add(crudQuery);
    sqlStmt=UPDATE_STR + tableName + SET_STR;
    idx=pkCount;
    for (Iterator i=basics.iterator(); i.hasNext(); ) {
      BasicAccessor basic=(BasicAccessor)i.next();
      sqlStmt+=basic.getName().toUpperCase() + EQUALS_BINDING_STR + (++idx);
      if (i.hasNext()) {
        sqlStmt+=COMMA_SPACE_STR;
      }
    }
    sqlStmt+=WHERE_STR + pks;
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(UPDATE_OPERATION_NAME + UNDERSCORE + entityType);
    crudQuery.setQuery(sqlStmt);
    entity.getNamedNativeQueries().add(crudQuery);
    crudQuery=new NamedNativeQueryMetadata();
    crudQuery.setName(REMOVE_OPERATION_NAME + UNDERSCORE + entityType);
    crudQuery.setQuery(DELETE_STR + tableName + WHERE_STR+ pks);
    entity.getNamedNativeQueries().add(crudQuery);
  }
}"
63744,"protected ContextState(Context context,PROJECT project,ClassLoader classLoader,Collection<SESSION_EVENT_LISTENER> sessionEventListeners){
  this();
  this.context=context;
  preLogin(project,classLoader);
  session=(SESSION)project.createDatabaseSession();
  if (sessionEventListeners != null) {
    for (    SESSION_EVENT_LISTENER sessionEventListener : sessionEventListeners) {
      session.getEventManager().addListener(sessionEventListener);
    }
  }
  session.setLogLevel(SessionLog.OFF);
  setupSession(session);
  storeDescriptorsByQName(session);
}","protected ContextState(Context context,PROJECT project,ClassLoader classLoader,Collection<SESSION_EVENT_LISTENER> sessionEventListeners){
  this();
  this.context=context;
  preLogin(project,classLoader);
  session=(SESSION)project.createDatabaseSession();
  if (sessionEventListeners != null) {
    for (    SESSION_EVENT_LISTENER sessionEventListener : sessionEventListeners) {
      session.getEventManager().addListener(sessionEventListener);
    }
  }
  setupSession(session);
  storeDescriptorsByQName(session);
}"
63745,"public EncodedData getBytesFromMultipart(MimeMultipart value,Marshaller marshaller){
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  try {
    ContentType contentType=new ContentType(value.getContentType());
    String boundary=contentType.getParameter(""String_Node_Str"");
    output.write(Helper.cr().getBytes());
    output.write((""String_Node_Str"" + contentType.getBaseType() + ""String_Node_Str""+ boundary+ ""String_Node_Str"").getBytes());
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(value,byte[].class,ex);
  }
  try {
    value.writeTo(output);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(value,byte[].class,ex);
  }
  return new EncodedData(output.toByteArray(),value.getContentType());
}","public EncodedData getBytesFromMultipart(MimeMultipart value,Marshaller marshaller){
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  try {
    ContentType contentType=new ContentType(value.getContentType());
    String boundary=contentType.getParameter(""String_Node_Str"");
    output.write(Constants.cr().getBytes());
    output.write((""String_Node_Str"" + contentType.getBaseType() + ""String_Node_Str""+ boundary+ ""String_Node_Str"").getBytes());
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(value,byte[].class,ex);
  }
  try {
    value.writeTo(output);
  }
 catch (  Exception ex) {
    throw ConversionException.couldNotBeConverted(value,byte[].class,ex);
  }
  return new EncodedData(output.toByteArray(),value.getContentType());
}"
63746,"/** 
 * INTERNAL:
 * @since EclipseLink 2.5.0
 */
public Root createRoot(){
  return new XMLRoot();
}","/** 
 * INTERNAL:
 * @since EclipseLink 2.5.0
 */
public Root createRoot(){
  return unmarshaller.createRoot();
}"
63747,"@Override protected void setupSession(DatabaseSession session){
  session.login();
  setupDocumentPreservationPolicy(session);
}","@Override protected void setupSession(DatabaseSession session){
  session.setLogLevel(SessionLog.OFF);
  session.login();
  setupDocumentPreservationPolicy(session);
}"
63748,"/** 
 * INTERNAL: When using the DOM Platform, this method is responsible for marshalling null values for the XML Composite Object Mapping.
 * @param record
 * @param object
 * @param field
 * @return true if this method caused any objects to be marshaled, else false.
 */
public boolean compositeObjectMarshal(AbstractMarshalRecord record,Object object,Field field,CoreAbstractSession session){
  if (marshalNullRepresentation == XMLNullRepresentationType.XSI_NIL) {
    record.put(field,XMLRecord.NIL);
    return true;
  }
 else {
    if (marshalNullRepresentation == XMLNullRepresentationType.EMPTY_NODE) {
      Node element=XPathEngine.getInstance().createUnownedElement(record.getDOM(),field);
      DOMRecord nestedRow=new DOMRecord(element);
      record.put(field,nestedRow);
      return true;
    }
 else {
      return false;
    }
  }
}","/** 
 * INTERNAL: When using the DOM Platform, this method is responsible for marshalling null values for the XML Composite Object Mapping.
 * @param record
 * @param object
 * @param field
 * @return true if this method caused any objects to be marshaled, else false.
 */
public boolean compositeObjectMarshal(AbstractMarshalRecord record,Object object,Field field,CoreAbstractSession session){
  if (marshalNullRepresentation == XMLNullRepresentationType.XSI_NIL) {
    record.put(field,XMLRecord.NIL);
    return true;
  }
 else {
    if (marshalNullRepresentation == XMLNullRepresentationType.EMPTY_NODE) {
      Node element=XPathEngine.getInstance().createUnownedElement(record.getDOM(),field);
      record.put(field,element);
      return true;
    }
 else {
      return false;
    }
  }
}"
63749,"/** 
 * INTERNAL
 */
public void writeHeader(){
  outputStreamWrite(getMarshaller().getXmlHeader().getBytes());
  outputStreamWrite(CR);
}","/** 
 * INTERNAL
 */
public void writeHeader(){
  outputStreamWrite(getMarshaller().getXmlHeader().getBytes());
  outputStreamWrite(cr);
}"
63750,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStreamWrite(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      outputStreamWrite(CR);
      outputStreamWriteTab();
    }
    outputStreamWrite(OPEN_START_ELEMENT);
    outputStreamWrite(qName.getBytes(Constants.DEFAULT_XML_ENCODING));
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      outputStreamWrite(CLOSE_ELEMENT);
    }
    if (!isLastEventText) {
      outputStreamWrite(cr);
      outputStreamWriteTab();
    }
    outputStreamWrite(OPEN_START_ELEMENT);
    outputStreamWrite(qName.getBytes(Constants.DEFAULT_XML_ENCODING));
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  UnsupportedEncodingException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63751,"/** 
 * INTERNAL:
 */
public void endDocument(){
  outputStreamWrite(CR);
}","/** 
 * INTERNAL:
 */
public void endDocument(){
  outputStreamWrite(cr);
}"
63752,"/** 
 * INTERNAL:
 */
public void startDocument(String encoding,String version){
  super.startDocument(encoding,version);
  outputStreamWrite(CR);
}","/** 
 * INTERNAL:
 */
public void startDocument(String encoding,String version){
  super.startDocument(encoding,version);
  outputStreamWrite(cr);
}"
63753,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  if (!isLastEventText) {
    if (numberOfTabs > 0) {
      outputStreamWrite(CR);
    }
    outputStreamWriteTab();
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  byte[] prefixBytes=getPrefixBytes(xPathFragment);
  if (null != prefixBytes) {
    outputStreamWrite(prefixBytes);
    outputStreamWrite((byte)':');
  }
  outputStreamWrite(xPathFragment.getLocalNameBytes());
  if (xPathFragment.isGeneratedPrefix()) {
    namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
  }
  numberOfTabs++;
  isLastEventText=false;
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  if (!isLastEventText) {
    if (numberOfTabs > 0) {
      outputStreamWrite(cr);
    }
    outputStreamWriteTab();
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  byte[] prefixBytes=getPrefixBytes(xPathFragment);
  if (null != prefixBytes) {
    outputStreamWrite(prefixBytes);
    outputStreamWrite((byte)':');
  }
  outputStreamWrite(xPathFragment.getLocalNameBytes());
  if (xPathFragment.isGeneratedPrefix()) {
    namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
  }
  numberOfTabs++;
  isLastEventText=false;
}"
63754,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  isLastEventText=false;
  numberOfTabs--;
  if (isStartElementOpen) {
    outputStreamWrite((byte)'/');
    outputStreamWrite((byte)'>');
    isStartElementOpen=false;
    complexType=true;
    return;
  }
  if (complexType) {
    outputStreamWrite(CR);
    outputStreamWriteTab();
  }
 else {
    complexType=true;
  }
  super.endElement(namespaceURI,localName,qName);
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  isLastEventText=false;
  numberOfTabs--;
  if (isStartElementOpen) {
    outputStreamWrite((byte)'/');
    outputStreamWrite((byte)'>');
    isStartElementOpen=false;
    complexType=true;
    return;
  }
  if (complexType) {
    outputStreamWrite(cr);
    outputStreamWriteTab();
  }
 else {
    complexType=true;
  }
  super.endElement(namespaceURI,localName,qName);
}"
63755,"public void comment(char[] ch,int start,int length) throws SAXException {
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    outputStreamWrite(CR);
    isStartElementOpen=false;
  }
  writeComment(ch,start,length);
  complexType=false;
}","public void comment(char[] ch,int start,int length) throws SAXException {
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    outputStreamWrite(cr);
    isStartElementOpen=false;
  }
  writeComment(ch,start,length);
  complexType=false;
}"
63756,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  isLastEventText=false;
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    isStartElementOpen=false;
  }
  outputStreamWrite(CR);
  outputStreamWriteTab();
  super.element(frag);
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  isLastEventText=false;
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
    isStartElementOpen=false;
  }
  outputStreamWrite(cr);
  outputStreamWriteTab();
  super.element(frag);
}"
63757,"/** 
 * INTERNAL
 */
public void writeHeader(){
  try {
    writer.write(getMarshaller().getXmlHeader());
    writer.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL
 */
public void writeHeader(){
  try {
    writer.write(getMarshaller().getXmlHeader());
    writer.write(cr);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63758,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      writer.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    writer.write('<');
    writer.write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      writer.write(cr);
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    writer.write('<');
    writer.write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63759,"public void startDocument(String encoding,String version){
  super.startDocument(encoding,version);
  try {
    writer.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startDocument(String encoding,String version){
  super.startDocument(encoding,version);
  try {
    writer.write(cr);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63760,"/** 
 * INTERNAL:
 */
public void endDocument(){
  try {
    writer.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endDocument(){
  try {
    writer.write(cr);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63761,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(CR);
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    if (xPathFragment.isGeneratedPrefix()) {
      namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(cr);
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    if (xPathFragment.isGeneratedPrefix()) {
      namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63762,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      writer.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      writer.write(cr);
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63763,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.write(CR);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.write(cr);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63764,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      writer.write(tab());
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Constants.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writer.write(tab());
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63765,"public void writeCR() throws IOException {
  writer.write(FormattedWriterRecord.CR);
}","public void writeCR() throws IOException {
  writer.write(cr);
}"
63766,"public JsonObjectBuilderWriterRecord(JsonArrayBuilder jsonArrayBuilder){
  this();
  rootJsonArrayBuilder=jsonArrayBuilder;
}","public JsonObjectBuilderWriterRecord(JsonArrayBuilder jsonArrayBuilder){
  this();
  rootJsonArrayBuilder=jsonArrayBuilder;
  isRootArray=true;
}"
63767,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(WithoutXmlRootElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementSetTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementSetTestCases.class);
  suite.addTestSuite(WithXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementJAXBElementNoRootTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementJAXBElementSetTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementJAXBElementSetTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementArrayTestCases.class);
  suite.addTestSuite(WithXmlRootElementArrayTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(WithoutXmlRootElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementSetTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementSetTestCases.class);
  suite.addTestSuite(WithXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementJAXBElementNoRootTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementJAXBElementTestCases.class);
  suite.addTestSuite(WithXmlRootElementJAXBElementSetTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementJAXBElementSetTestCases.class);
  suite.addTestSuite(WithoutXmlRootElementArrayTestCases.class);
  suite.addTestSuite(WithXmlRootElementArrayTestCases.class);
  suite.addTestSuite(JsonObjectInArrayBuilderTestCases.class);
  return suite;
}"
63768,"/** 
 * Return the <i>JAXBContext</i> that corresponds to the domain class.  This method does the following: <ol> <li>If an EclipseLink JAXB (MOXy) <i>JAXBContext</i> is available from a <i>ContextResolver</i> then use it.</li> <li>If an existing <i>JAXBContext</i> was not found in step one, then  create a new one on the domain class.</li> </ol>
 * @param domainClass - The domain class we need a <i>JAXBContext</i> for.
 * @param annotations - The annotations corresponding to domain object.
 * @param mediaType - The media type for the HTTP entity.
 * @param httpHeaders - HTTP headers associated with HTTP entity.
 * @return
 * @throws JAXBException
 */
protected JAXBContext getJAXBContext(Class<?> domainClass,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,?> httpHeaders) throws JAXBException {
  JAXBContext jaxbContext=contextCache.get(domainClass);
  if (null != jaxbContext) {
    return jaxbContext;
  }
  ContextResolver<JAXBContext> resolver=null;
  if (null != providers) {
    resolver=providers.getContextResolver(JAXBContext.class,mediaType);
  }
  if (null == resolver || null == (jaxbContext=resolver.getContext(domainClass))) {
    jaxbContext=JAXBContextFactory.createContext(new Class[]{domainClass},null);
    contextCache.put(domainClass,jaxbContext);
    return jaxbContext;
  }
 else   if (jaxbContext instanceof org.eclipse.persistence.jaxb.JAXBContext) {
    return jaxbContext;
  }
 else {
    jaxbContext=JAXBContextFactory.createContext(new Class[]{domainClass},null);
    contextCache.put(domainClass,jaxbContext);
    return jaxbContext;
  }
}","private JAXBContext getJAXBContext(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (null == genericType) {
    genericType=type;
  }
  try {
    Class<?> domainClass=getDomainClass(genericType);
    return getJAXBContext(domainClass,annotations,mediaType,null);
  }
 catch (  JAXBException e) {
    return null;
  }
}"
63769,"/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> <li>javax.ws.rs.core.StreamingOutput</li> </ul>
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (type == JSONWithPadding.class && APPLICATION_XJAVASCRIPT.equals(mediaType.toString())) {
    return true;
  }
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (StreamingOutput.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else {
    return true;
  }
}","/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> <li>javax.ws.rs.core.StreamingOutput</li> </ul>
 */
public boolean isWriteable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (type == JSONWithPadding.class && APPLICATION_XJAVASCRIPT.equals(mediaType.toString())) {
    return true;
  }
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (StreamingOutput.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isWriteable(domainClass,null,annotations,mediaType) || domainClass == String.class;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}"
63770,"/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.io.InputStream</li> <li>java.io.Reader</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> </ul>
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (InputStream.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Reader.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else {
    return true;
  }
}","/** 
 * @return true indicating that <i>MOXyJsonProvider</i> willbe used for the JSON binding if the media type is of the following  patterns *&#47;json or *&#47;*+json, and the type is not assignable from  any of (or a Collection or JAXBElement of) the following: <ul> <li>byte[]</li> <li>java.io.File</li> <li>java.io.InputStream</li> <li>java.io.Reader</li> <li>java.lang.Object</li> <li>java.lang.String</li> <li>javax.activation.DataSource</li> </ul>
 */
public boolean isReadable(Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType){
  if (!supportsMediaType(mediaType)) {
    return false;
  }
 else   if (CoreClassConstants.APBYTE == type || CoreClassConstants.STRING == type) {
    return false;
  }
 else   if (File.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (DataSource.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (InputStream.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Reader.class.isAssignableFrom(type)) {
    return false;
  }
 else   if (Object.class == type) {
    return false;
  }
 else   if (JAXBElement.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else   if (Collection.class.isAssignableFrom(type)) {
    Class domainClass=getDomainClass(genericType);
    return isReadable(domainClass,null,annotations,mediaType) || String.class == domainClass;
  }
 else {
    return null != getJAXBContext(type,genericType,annotations,mediaType);
  }
}"
63771,"public void setComplex(boolean isComplex){
  this.isComplex=isComplex;
  if (isComplex && jsonObjectBuilder == null) {
    jsonObjectBuilder=Json.createObjectBuilder();
  }
}","private void setComplex(Level level,boolean complex){
  boolean isAlreadyComplex=level.isComplex;
  level.setComplex(complex);
  if (complex && !isAlreadyComplex) {
    if (complex && level.jsonObjectBuilder == null) {
      level.jsonObjectBuilder=Json.createObjectBuilder();
    }
  }
}"
63772,"@Override public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (position != null) {
    Level newLevel=new Level(false,position);
    if (isLastEventStart) {
      position.setComplex(true);
    }
    String keyName=getKeyName(xPathFragment);
    if (position.isCollection && position.isEmptyCollection()) {
      position.setKeyName(keyName);
    }
 else {
      newLevel.setKeyName(keyName);
    }
    position=newLevel;
    isLastEventStart=true;
  }
}","@Override public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (position != null) {
    Level newLevel=new Level(false,position);
    if (isLastEventStart) {
      setComplex(position,true);
    }
    String keyName=getKeyName(xPathFragment);
    if (position.isCollection && position.isEmptyCollection()) {
      position.setKeyName(keyName);
    }
 else {
      newLevel.setKeyName(keyName);
    }
    position=newLevel;
    isLastEventStart=true;
  }
}"
63773,"public void endDocument() throws SAXException {
}","@Override public void endDocument(){
  if (position != null) {
    if (position.parentLevel != null && position.parentLevel.isCollection) {
      popAndSetInParentBuilder();
    }
 else {
      position=(Level)position.parentLevel;
    }
  }
}"
63774,"/** 
 * Handle marshal of an empty collection.  
 * @param xPathFragment
 * @param namespaceResolver
 * @param openGrouping if grouping elements should be marshalled for empty collections
 * @return
 */
public boolean emptyCollection(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean openGrouping){
  if (marshaller.isMarshalEmptyCollections()) {
    super.emptyCollection(xPathFragment,namespaceResolver,true);
    if (null != xPathFragment) {
      if (xPathFragment.isSelfFragment() || xPathFragment.nameIsText()) {
        String keyName=position.getKeyName();
        position.setComplex(false);
        position.parentLevel.getJsonObjectBuilder().add(keyName,Json.createArrayBuilder());
      }
 else {
        if (isLastEventStart) {
          position.setComplex(true);
        }
        String keyName=getKeyName(xPathFragment);
        if (keyName != null) {
          position.getJsonObjectBuilder().add(keyName,Json.createArrayBuilder());
        }
      }
      isLastEventStart=false;
    }
    return true;
  }
 else {
    return super.emptyCollection(xPathFragment,namespaceResolver,openGrouping);
  }
}","/** 
 * Handle marshal of an empty collection.  
 * @param xPathFragment
 * @param namespaceResolver
 * @param openGrouping if grouping elements should be marshalled for empty collections
 * @return
 */
public boolean emptyCollection(XPathFragment xPathFragment,NamespaceResolver namespaceResolver,boolean openGrouping){
  if (marshaller.isMarshalEmptyCollections()) {
    super.emptyCollection(xPathFragment,namespaceResolver,true);
    if (null != xPathFragment) {
      if (xPathFragment.isSelfFragment() || xPathFragment.nameIsText()) {
        String keyName=position.getKeyName();
        setComplex(position,false);
        ((Level)position.parentLevel).getJsonObjectBuilder().add(keyName,Json.createArrayBuilder());
      }
 else {
        if (isLastEventStart) {
          setComplex(position,true);
        }
        String keyName=getKeyName(xPathFragment);
        if (keyName != null) {
          position.getJsonObjectBuilder().add(keyName,Json.createArrayBuilder());
        }
      }
      isLastEventStart=false;
    }
    return true;
  }
 else {
    return super.emptyCollection(xPathFragment,namespaceResolver,openGrouping);
  }
}"
63775,"public Level(boolean isCollection,Level parentLevel){
  setCollection(isCollection);
  emptyCollection=true;
  this.parentLevel=parentLevel;
}","public Level(boolean isCollection,Level parentLevel){
  super(isCollection,parentLevel);
}"
63776,"public void setCollection(boolean isCollection){
  this.isCollection=isCollection;
  if (isCollection && jsonArrayBuilder == null) {
    jsonArrayBuilder=Json.createArrayBuilder();
  }
}","public void setCollection(boolean isCollection){
  super.setCollection(isCollection);
  if (isCollection && jsonArrayBuilder == null) {
    jsonArrayBuilder=Json.createArrayBuilder();
  }
}"
63777,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  XPathFragment xPathFragment=new XPathFragment(localName);
  xPathFragment.setNamespaceURI(namespaceURI);
  JsonBuilderRecord.this.endElement(xPathFragment,namespaceResolver);
}","@Override public void endElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  if (position != null) {
    if (isLastEventStart) {
      setComplex(position,true);
    }
    if (position.isComplex) {
      popAndSetInParentBuilder();
    }
 else {
      position=(Level)position.parentLevel;
    }
    isLastEventStart=false;
  }
}"
63778,"public void startCollection(){
  if (position == null) {
    isRootArray=true;
    Level rootLevel=new Level(true,null);
    if (rootJsonArrayBuilder == null) {
      rootJsonArrayBuilder=Json.createArrayBuilder();
    }
    rootLevel.setJsonArrayBuilder(rootJsonArrayBuilder);
    position=rootLevel;
  }
 else {
    if (isLastEventStart) {
      position.setComplex(true);
    }
    Level level=new Level(true,position);
    position=level;
  }
  isLastEventStart=false;
}","public void startCollection(){
  if (position == null) {
    isRootArray=true;
    Level rootLevel=new Level(true,null);
    if (rootJsonArrayBuilder == null) {
      rootJsonArrayBuilder=Json.createArrayBuilder();
    }
    rootLevel.setJsonArrayBuilder(rootJsonArrayBuilder);
    position=rootLevel;
  }
 else {
    if (isLastEventStart) {
      setComplex(position,true);
    }
    Level level=new Level(true,position);
    position=level;
  }
  isLastEventStart=false;
}"
63779,"public void writeValue(Object value,QName schemaType,boolean isAttribute){
  if (characterEscapeHandler != null && value instanceof String) {
    try {
      StringWriter stringWriter=new StringWriter();
      characterEscapeHandler.escape(((String)value).toCharArray(),0,((String)value).length(),isAttribute,stringWriter);
      value=stringWriter.toString();
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
  boolean textWrapperOpened=false;
  if (!isLastEventStart) {
    openStartElement(textWrapperFragment,namespaceResolver);
    textWrapperOpened=true;
  }
  Level currentLevel=position;
  String keyName=position.getKeyName();
  if (!position.isComplex) {
    currentLevel=position.parentLevel;
    currentLevel.setComplex(true);
  }
  if (currentLevel.isCollection()) {
    currentLevel.setEmptyCollection(false);
    addValueToArrayBuilder(currentLevel.getJsonArrayBuilder(),value,schemaType);
  }
 else {
    JsonObjectBuilder builder=currentLevel.getJsonObjectBuilder();
    addValueToObjectBuilder(builder,keyName,value,schemaType);
  }
  isLastEventStart=false;
  if (textWrapperOpened) {
    endElement(textWrapperFragment,namespaceResolver);
  }
}","public void writeValue(Object value,QName schemaType,boolean isAttribute){
  if (characterEscapeHandler != null && value instanceof String) {
    try {
      StringWriter stringWriter=new StringWriter();
      characterEscapeHandler.escape(((String)value).toCharArray(),0,((String)value).length(),isAttribute,stringWriter);
      value=stringWriter.toString();
    }
 catch (    IOException e) {
      throw XMLMarshalException.marshalException(e);
    }
  }
  boolean textWrapperOpened=false;
  if (!isLastEventStart) {
    openStartElement(textWrapperFragment,namespaceResolver);
    textWrapperOpened=true;
  }
  Level currentLevel=position;
  String keyName=position.getKeyName();
  if (!position.isComplex) {
    currentLevel=(Level)position.parentLevel;
  }
  addValue(currentLevel,keyName,value,schemaType);
  isLastEventStart=false;
  if (textWrapperOpened) {
    endElement(textWrapperFragment,namespaceResolver);
  }
}"
63780,"public void startDocument() throws SAXException {
}","@Override public void startDocument(String encoding,String version){
  if (isRootArray) {
    if (position == null) {
      startCollection();
    }
    position.setEmptyCollection(false);
    Level newLevel=new Level(false,position);
    position=newLevel;
    isLastEventStart=true;
  }
 else {
    Level rootLevel=new Level(false,null);
    position=rootLevel;
    if (rootJsonObjectBuilder == null) {
      rootJsonObjectBuilder=Json.createObjectBuilder();
    }
    rootLevel.setJsonObjectBuilder(rootJsonObjectBuilder);
  }
}"
63781,"private void popAndSetInParentBuilder(){
  Level removedLevel=position;
  Level parentLevel=position.parentLevel;
  position=position.parentLevel;
  if (removedLevel.isCollection && removedLevel.isEmptyCollection() && removedLevel.keyName == null) {
    return;
  }
  if (parentLevel != null) {
    if (parentLevel.isCollection) {
      if (removedLevel.isCollection) {
        parentLevel.getJsonArrayBuilder().add(removedLevel.getJsonArrayBuilder());
      }
 else {
        parentLevel.getJsonArrayBuilder().add(removedLevel.getJsonObjectBuilder());
      }
    }
 else {
      if (removedLevel.isCollection) {
        parentLevel.getJsonObjectBuilder().add(removedLevel.getKeyName(),removedLevel.getJsonArrayBuilder());
      }
 else {
        parentLevel.getJsonObjectBuilder().add(removedLevel.getKeyName(),removedLevel.getJsonObjectBuilder());
      }
    }
  }
}","private void popAndSetInParentBuilder(){
  Level removedLevel=position;
  Level parentLevel=(Level)position.parentLevel;
  position=(Level)position.parentLevel;
  if (removedLevel.isCollection && removedLevel.isEmptyCollection() && removedLevel.keyName == null) {
    return;
  }
  if (parentLevel != null) {
    if (parentLevel.isCollection) {
      if (removedLevel.isCollection) {
        parentLevel.getJsonArrayBuilder().add(removedLevel.getJsonArrayBuilder());
      }
 else {
        parentLevel.getJsonArrayBuilder().add(removedLevel.getJsonObjectBuilder());
      }
    }
 else {
      if (removedLevel.isCollection) {
        parentLevel.getJsonObjectBuilder().add(removedLevel.getKeyName(),removedLevel.getJsonArrayBuilder());
      }
 else {
        parentLevel.getJsonObjectBuilder().add(removedLevel.getKeyName(),removedLevel.getJsonObjectBuilder());
      }
    }
  }
}"
63782,"private void marshal(Object object,Writer writer,ABSTRACT_SESSION session,DESCRIPTOR xmlDescriptor) throws XMLMarshalException {
  if ((object == null) || (writer == null)) {
    throw XMLMarshalException.nullArgumentException();
  }
  boolean isXMLRoot=false;
  String version=DEFAULT_XML_VERSION;
  String encoding=getEncoding();
  String callbackName=null;
  if (object instanceof JSONWithPadding) {
    callbackName=((JSONWithPadding)object).getCallbackName();
    object=((JSONWithPadding)object).getObject();
    if (object == null) {
      throw XMLMarshalException.nullArgumentException();
    }
  }
  if (object instanceof Root) {
    isXMLRoot=true;
    Root xroot=(Root)object;
    version=xroot.getXMLVersion() != null ? xroot.getXMLVersion() : version;
    encoding=xroot.getEncoding() != null ? xroot.getEncoding() : encoding;
  }
  MarshalRecord writerRecord;
  writer=wrapWriter(writer);
  if (isFormattedOutput()) {
    if (isApplicationJSON()) {
      writerRecord=new JSONFormattedWriterRecord(writer,callbackName);
    }
 else {
      writerRecord=new FormattedWriterRecord();
      ((FormattedWriterRecord)writerRecord).setWriter(writer);
    }
  }
 else {
    if (isApplicationJSON()) {
      writerRecord=new JSONWriterRecord(writer,callbackName);
    }
 else {
      writerRecord=new WriterRecord();
      ((WriterRecord)writerRecord).setWriter(writer);
    }
  }
  writerRecord.setMarshaller(this);
  String rootName=null;
  String rootNamespace=null;
  if (isXMLRoot) {
    rootName=((Root)object).getLocalName();
    rootNamespace=((Root)object).getNamespaceURI();
    if (session == null || xmlDescriptor == null) {
      try {
        session=context.getSession(((Root)object).getObject());
        if (session != null) {
          xmlDescriptor=getDescriptor(((Root)object).getObject(),session);
        }
      }
 catch (      XMLMarshalException marshalException) {
        if (!isSimpleXMLRoot((Root)object)) {
          throw marshalException;
        }
      }
    }
  }
 else {
    Class objectClass=object.getClass();
    if (object instanceof Collection) {
      try {
        writerRecord.startCollection();
        for (        Object o : (Collection)object) {
          marshal(o,writerRecord);
        }
        writerRecord.endCollection();
        writer.flush();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
 else     if (objectClass.isArray()) {
      try {
        writerRecord.startCollection();
        int arrayLength=Array.getLength(object);
        for (int x=0; x < arrayLength; x++) {
          marshal(Array.get(object,x),writerRecord);
        }
        writerRecord.endCollection();
        writer.flush();
      }
 catch (      IOException e) {
        throw XMLMarshalException.marshalException(e);
      }
      return;
    }
    if (session == null || xmlDescriptor == null) {
      session=context.getSession(objectClass);
      xmlDescriptor=getDescriptor(objectClass,session);
    }
  }
  marshal(object,writerRecord,session,xmlDescriptor,isXMLRoot);
  try {
    writer.flush();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","private void marshal(Object object,Writer writer,ABSTRACT_SESSION session,DESCRIPTOR xmlDescriptor) throws XMLMarshalException {
  if ((object == null) || (writer == null)) {
    throw XMLMarshalException.nullArgumentException();
  }
  boolean isXMLRoot=false;
  String version=DEFAULT_XML_VERSION;
  String encoding=getEncoding();
  String callbackName=null;
  if (object instanceof JSONWithPadding) {
    callbackName=((JSONWithPadding)object).getCallbackName();
    object=((JSONWithPadding)object).getObject();
    if (object == null) {
      throw XMLMarshalException.nullArgumentException();
    }
  }
  if (object instanceof Root) {
    isXMLRoot=true;
    Root xroot=(Root)object;
    version=xroot.getXMLVersion() != null ? xroot.getXMLVersion() : version;
    encoding=xroot.getEncoding() != null ? xroot.getEncoding() : encoding;
  }
  MarshalRecord marshalRecord;
  writer=wrapWriter(writer);
  if (isFormattedOutput()) {
    if (isApplicationJSON()) {
      marshalRecord=new JSONFormattedWriterRecord(writer,callbackName);
    }
 else {
      marshalRecord=new FormattedWriterRecord();
      ((FormattedWriterRecord)marshalRecord).setWriter(writer);
    }
  }
 else {
    if (isApplicationJSON()) {
      marshalRecord=new JSONWriterRecord(writer,callbackName);
    }
 else {
      marshalRecord=new WriterRecord();
      ((WriterRecord)marshalRecord).setWriter(writer);
    }
  }
  marshalStreamOrWriter(object,marshalRecord,session,xmlDescriptor,isXMLRoot);
}"
63783,"private void resetShortName(){
  shortName=null;
  shortNameBytes=null;
}","private void resetShortName(){
  shortName=null;
  prefixBytes=null;
  localNameBytes=null;
}"
63784,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (null == level) {
      level=new Level(true,true,level);
      newLevel=level;
    }
 else {
      position=level;
      level=new Level(true,true,level);
      newLevel=level;
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        charactersAllowed=true;
        return;
      }
    }
    if (position != null && position.needToOpenComplex) {
      writer.write('{');
      position.needToOpenComplex=false;
      position.needToCloseComplex=true;
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        position.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    if (level.isFirst()) {
      level.setFirst(false);
    }
 else {
      writer.write(',');
    }
    if (xPathFragment.nameIsText()) {
      if (level != null && level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        level.setEmptyCollection(false);
        level.setNeedToOpenComplex(false);
        charactersAllowed=true;
        level=new Level(true,true,level);
        return;
      }
    }
    if (level.needToOpenComplex) {
      writer.write('{');
      level.needToOpenComplex=false;
      level.needToCloseComplex=true;
    }
    if (!(level.isCollection() && !level.isEmptyCollection())) {
      writeKey(xPathFragment);
      if (level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        level.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
    level=new Level(true,true,level);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63785,"protected void writeKey(XPathFragment xPathFragment) throws IOException {
  super.openStartElement(xPathFragment,namespaceResolver);
  isStartElementOpen=true;
  writer.write('""');
  if (xPathFragment.isAttribute() && attributePrefix != null) {
    writer.writeAttributePrefix();
  }
  if (isNamespaceAware()) {
    if (xPathFragment.getNamespaceURI() != null) {
      String prefix=null;
      if (getNamespaceResolver() != null) {
        prefix=getNamespaceResolver().resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
 else       if (namespaceResolver != null) {
        prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
      if (prefix != null && !prefix.equals(Constants.EMPTY_STRING)) {
        writer.write(prefix);
        writer.writeNamespaceSeparator();
      }
    }
  }
  writer.writeLocalName(xPathFragment);
  writer.write('""');
  writer.write(space);
  writer.write(Constants.COLON);
  writer.write(space);
}","protected void writeKey(XPathFragment xPathFragment) throws IOException {
  super.openStartElement(xPathFragment,namespaceResolver);
  isStartElementOpen=true;
  writer.write('""');
  if (xPathFragment.isAttribute() && attributePrefix != null) {
    writer.writeAttributePrefix();
  }
  if (isNamespaceAware()) {
    if (xPathFragment.getNamespaceURI() != null) {
      String prefix=null;
      if (getNamespaceResolver() != null) {
        prefix=getNamespaceResolver().resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
 else       if (namespaceResolver != null) {
        prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
      if (prefix != null && !prefix.equals(Constants.EMPTY_STRING)) {
        writer.write(prefix);
        writer.writeNamespaceSeparator();
      }
    }
  }
  writer.writeLocalName(xPathFragment);
  writer.write('""');
  writeSpace();
  writer.write(Constants.COLON);
  writeSpace();
}"
63786,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (null == level) {
      level=new Level(true,true);
    }
 else {
      position=level;
      level=new Level(true,true,level);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        numberOfTabs++;
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.writeCR();
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab(),false);
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    if (level.isFirst()) {
      level.setFirst(false);
    }
 else {
      writer.write(',');
    }
    if (xPathFragment.nameIsText()) {
      if (level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        level.setEmptyCollection(false);
        level.setNeedToOpenComplex(false);
        level=new Level(true,true,level);
        numberOfTabs++;
        return;
      }
    }
    if (level.isNeedToOpenComplex()) {
      writer.write('{');
      level.setNeedToOpenComplex(false);
      level.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (level.isCollection() && !level.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.writeCR();
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab(),false);
        }
      }
    }
    if (!(level.isCollection() && !level.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        level.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
    level=new Level(true,true,level);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63787,"/** 
 * INTERNAL:
 */
public void characters(String value){
  super.characters(value);
  isLastEventText=true;
  complexType=false;
}","/** 
 * INTERNAL:
 */
public void characters(String value){
  super.characters(value);
  isLastEventText=true;
}"
63788,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.writeCR();
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.writeCR();
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63789,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    if (level.isFirst()) {
      level.setFirst(false);
    }
 else {
      writer.write(',');
    }
    if (xPathFragment.nameIsText()) {
      if (level != null && level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        level.setEmptyCollection(false);
        level.setNeedToOpenComplex(false);
        charactersAllowed=true;
        level=new Level(true,true,level);
        return;
      }
    }
    if (level.needToOpenComplex) {
      writer.write('{');
      level.needToOpenComplex=false;
      level.needToCloseComplex=true;
    }
    if (!(level.isCollection() && !level.isEmptyCollection())) {
      writeKey(xPathFragment);
      if (level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        level.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
    level=new Level(true,true,level);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    if (level.isFirst()) {
      level.setFirst(false);
    }
 else {
      writer.write(',');
    }
    if (xPathFragment.nameIsText()) {
      if (level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        level.setEmptyCollection(false);
        level.setNeedToOpenComplex(false);
        charactersAllowed=true;
        level=new Level(true,true,level);
        return;
      }
    }
    if (level.needToOpenComplex) {
      writer.write('{');
      level.needToOpenComplex=false;
      level.needToCloseComplex=true;
    }
    if (!(level.isCollection() && !level.isEmptyCollection())) {
      writeKey(xPathFragment);
      if (level.isCollection() && level.isEmptyCollection()) {
        writer.write('[');
        level.setEmptyCollection(false);
      }
    }
    charactersAllowed=true;
    level=new Level(true,true,level);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63790,"protected void writeKey(XPathFragment xPathFragment) throws IOException {
  super.openStartElement(xPathFragment,namespaceResolver);
  isStartElementOpen=true;
  writer.write('""');
  if (xPathFragment.isAttribute() && attributePrefix != null) {
    writer.writeAttributePrefix();
  }
  if (isNamespaceAware()) {
    if (xPathFragment.getNamespaceURI() != null) {
      String prefix=null;
      if (getNamespaceResolver() != null) {
        prefix=getNamespaceResolver().resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
 else       if (namespaceResolver != null) {
        prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
      if (prefix != null && !prefix.equals(Constants.EMPTY_STRING)) {
        writer.write(prefix);
        writer.writeNamespaceSeparator();
      }
    }
  }
  writer.writeLocalName(xPathFragment);
  writer.write('""');
  writeSpace();
  writer.write(Constants.COLON);
  writeSpace();
}","protected void writeKey(XPathFragment xPathFragment) throws IOException {
  super.openStartElement(xPathFragment,namespaceResolver);
  isStartElementOpen=true;
  writer.write('""');
  if (xPathFragment.isAttribute() && attributePrefix != null) {
    writer.writeAttributePrefix();
  }
  if (isNamespaceAware()) {
    if (xPathFragment.getNamespaceURI() != null) {
      String prefix=null;
      if (getNamespaceResolver() != null) {
        prefix=getNamespaceResolver().resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
 else       if (namespaceResolver != null) {
        prefix=namespaceResolver.resolveNamespaceURI(xPathFragment.getNamespaceURI());
      }
      if (prefix != null && !prefix.equals(Constants.EMPTY_STRING)) {
        writer.write(prefix);
        writer.writeNamespaceSeparator();
      }
    }
  }
  writer.writeLocalName(xPathFragment);
  writer.write('""');
  writeSeparator();
}"
63791,"public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=((ObjectBuilder)xmlDescriptor.getObjectBuilder()).classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          XPathQName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator != null) {
              clazz=(Class)indicator;
            }
          }
        }
        if (clazz != null) {
          xmlDescriptor=(Descriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      UnmarshalRecord childRecord=unmarshalRecord.getUnmarshaller().createUnmarshalRecord(xmlDescriptor,unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument();
      childRecord.initializeRecord(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}","public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=((ObjectBuilder)xmlDescriptor.getObjectBuilder()).classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          XPathQName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator != null) {
              clazz=(Class)indicator;
            }
          }
        }
        if (clazz != null) {
          xmlDescriptor=(Descriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      UnmarshalRecord childRecord=unmarshalRecord.getChildUnmarshalRecord((ObjectBuilder)xmlDescriptor.getObjectBuilder());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.startDocument();
      childRecord.initializeRecord(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}"
63792,"public UnmarshalRecord getChildUnmarshalRecord(ObjectBuilder treeObjectBuilder){
  if (childRecord != null && !childRecord.isSelfRecord()) {
    childRecord.initialize(treeObjectBuilder);
    childRecord.setParentRecord(this);
    return childRecord;
  }
 else {
    childRecord=new UnmarshalRecordImpl(treeObjectBuilder);
    childRecord.setSession(session);
    childRecord.setUnmarshaller(unmarshaller);
    childRecord.setTextWrapperFragment(textWrapperFragment);
    childRecord.setXMLReader(this.xmlReader);
    childRecord.setFragmentBuilder(fragmentBuilder);
    childRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    childRecord.setReferenceResolver(referenceResolver);
    childRecord.setParentRecord(this);
  }
  return childRecord;
}","public UnmarshalRecord getChildUnmarshalRecord(ObjectBuilder treeObjectBuilder){
  if (childRecord != null && !childRecord.isSelfRecord()) {
    childRecord.initialize(treeObjectBuilder);
    childRecord.setParentRecord(this);
    return childRecord;
  }
 else {
    childRecord=new UnmarshalRecordImpl(treeObjectBuilder,referenceResolver);
    childRecord.setSession(session);
    childRecord.setUnmarshaller(unmarshaller);
    childRecord.setTextWrapperFragment(textWrapperFragment);
    childRecord.setXMLReader(this.xmlReader);
    childRecord.setFragmentBuilder(fragmentBuilder);
    childRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    childRecord.setParentRecord(this);
  }
  return childRecord;
}"
63793,"public UnmarshalRecordImpl(ObjectBuilder objectBuilder){
  super();
  this.xPathFragment=new XPathFragment();
  xPathFragment.setNamespaceAware(isNamespaceAware());
  this.setUnmarshalAttributeGroup(DEFAULT_ATTRIBUTE_GROUP);
  initialize(objectBuilder);
}","private UnmarshalRecordImpl(ObjectBuilder objectBuilder,ReferenceResolver referenceResolver){
  super();
  this.referenceResolver=referenceResolver;
  this.xPathFragment=new XPathFragment();
  xPathFragment.setNamespaceAware(isNamespaceAware());
  this.setUnmarshalAttributeGroup(DEFAULT_ATTRIBUTE_GROUP);
  initialize(objectBuilder);
}"
63794,"public void parse(XMLStreamReader xmlStreamReader) throws SAXException {
  this.xmlStreamReader=xmlStreamReader;
  unmarshalNamespaceContext.setXmlStreamReader(xmlStreamReader);
  indexedAttributeList.setXmlStreamReader(xmlStreamReader);
  try {
    contentHandler.startDocument();
    parseEvent(xmlStreamReader,xmlStreamReader.getEventType());
    while (depth > 0) {
      int eventType=xmlStreamReader.next();
      parseEvent(xmlStreamReader,eventType);
    }
    contentHandler.endDocument();
  }
 catch (  SAXException e) {
    throw e;
  }
catch (  Exception e) {
    throw new SAXException(e);
  }
}","public void parse(XMLStreamReader xmlStreamReader) throws SAXException {
  this.xmlStreamReader=xmlStreamReader;
  unmarshalNamespaceContext.setXmlStreamReader(xmlStreamReader);
  indexedAttributeList.setXmlStreamReader(xmlStreamReader);
  try {
    contentHandler.startDocument();
    parseEvent(xmlStreamReader,xmlStreamReader.getEventType());
    while (depth > 0) {
      int eventType=xmlStreamReader.next();
      parseEvent(xmlStreamReader,eventType);
    }
    if (xmlStreamReader.hasNext()) {
      xmlStreamReader.next();
    }
    contentHandler.endDocument();
  }
 catch (  SAXException e) {
    throw e;
  }
catch (  Exception e) {
    throw new SAXException(e);
  }
}"
63795,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.XmlElementsEnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.choice.InterfaceChoiceTestCases.class);
  suite.addTestSuite(InvalidTransientInterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.inheritance.interfaces.InterfacesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.HandleListenerExceptionsTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.ExtraPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.MissingPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.IgnoreInvalidNonPublicFieldTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeTwoDatesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.NonNegativeIntegerSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.CharTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(ObjectFactoryTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathWithMultipleEqualsCharactersTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalAutoDetectTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ValidationTestCases.class);
  suite.addTestSuite(AutoDetectMediaTypeTestCases.class);
  suite.addTestSuite(AutoDetectFailsTestCases.class);
  suite.addTestSuite(AutoDetectSmallDocTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(PrefixMapperContextTestCases.class);
  suite.addTestSuite(DefaultNSPrefixMapperSimpleTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.XmlElementsEnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.choice.InterfaceChoiceTestCases.class);
  suite.addTestSuite(InvalidTransientInterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.inheritance.interfaces.InterfacesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.HandleListenerExceptionsTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(XMLStreamReaderEndEventTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.ExtraPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.MissingPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.IgnoreInvalidNonPublicFieldTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeTwoDatesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.NonNegativeIntegerSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.CharTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(ObjectFactoryTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathWithMultipleEqualsCharactersTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalAutoDetectTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ValidationTestCases.class);
  suite.addTestSuite(AutoDetectMediaTypeTestCases.class);
  suite.addTestSuite(AutoDetectFailsTestCases.class);
  suite.addTestSuite(AutoDetectSmallDocTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(PrefixMapperContextTestCases.class);
  suite.addTestSuite(DefaultNSPrefixMapperSimpleTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  return suite;
}"
63796,"public void testUnmarshalLevelElementWithClass() throws Exception {
  if (null == xmlInputFactory) {
    return;
  }
  InputStream instream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  XMLStreamReader xmlStreamReader=xmlInputFactory.createXMLStreamReader(instream);
  xmlStreamReader.next();
  XMLStreamReaderReader staxReader=new XMLStreamReaderReader();
  XMLContext xmlContext=new XMLContext(new AddressProject());
  XMLUnmarshaller xmlUnmarshaller=xmlContext.createUnmarshaller();
  staxReader.setErrorHandler(xmlUnmarshaller.getErrorHandler());
  XMLStreamReaderInputSource inputSource=new XMLStreamReaderInputSource(xmlStreamReader);
  xmlUnmarshaller.unmarshal(staxReader,inputSource,Address.class);
  if (xmlStreamReader.getEventType() != XMLStreamReader.END_ELEMENT) {
    fail(""String_Node_Str"");
  }
  if (!xmlStreamReader.getLocalName().equals(""String_Node_Str"")) {
    fail(""String_Node_Str"");
  }
  instream.close();
}","public void testUnmarshalLevelElementWithClass() throws Exception {
  if (null == xmlInputFactory) {
    return;
  }
  InputStream instream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  XMLStreamReader xmlStreamReader=xmlInputFactory.createXMLStreamReader(instream);
  xmlStreamReader.next();
  XMLStreamReaderReader staxReader=new XMLStreamReaderReader();
  XMLContext xmlContext=new XMLContext(new AddressProject());
  XMLUnmarshaller xmlUnmarshaller=xmlContext.createUnmarshaller();
  staxReader.setErrorHandler(xmlUnmarshaller.getErrorHandler());
  XMLStreamReaderInputSource inputSource=new XMLStreamReaderInputSource(xmlStreamReader);
  xmlUnmarshaller.unmarshal(staxReader,inputSource,Address.class);
  if (xmlStreamReader.getEventType() != XMLStreamReader.END_DOCUMENT) {
    fail(""String_Node_Str"");
  }
  instream.close();
}"
63797,"public void testUnmarshalLevelElement() throws Exception {
  if (null == xmlInputFactory) {
    return;
  }
  InputStream instream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  XMLStreamReader xmlStreamReader=xmlInputFactory.createXMLStreamReader(instream);
  xmlStreamReader.next();
  XMLStreamReaderReader staxReader=new XMLStreamReaderReader();
  XMLContext xmlContext=new XMLContext(new AddressProject());
  XMLUnmarshaller xmlUnmarshaller=xmlContext.createUnmarshaller();
  staxReader.setErrorHandler(xmlUnmarshaller.getErrorHandler());
  XMLStreamReaderInputSource inputSource=new XMLStreamReaderInputSource(xmlStreamReader);
  xmlUnmarshaller.unmarshal(staxReader,inputSource);
  if (xmlStreamReader.getEventType() != XMLStreamReader.END_ELEMENT) {
    fail(""String_Node_Str"");
  }
  if (!xmlStreamReader.getLocalName().equals(""String_Node_Str"")) {
    fail(""String_Node_Str"");
  }
  instream.close();
}","public void testUnmarshalLevelElement() throws Exception {
  if (null == xmlInputFactory) {
    return;
  }
  InputStream instream=ClassLoader.getSystemResourceAsStream(""String_Node_Str"");
  XMLStreamReader xmlStreamReader=xmlInputFactory.createXMLStreamReader(instream);
  xmlStreamReader.next();
  XMLStreamReaderReader staxReader=new XMLStreamReaderReader();
  XMLContext xmlContext=new XMLContext(new AddressProject());
  XMLUnmarshaller xmlUnmarshaller=xmlContext.createUnmarshaller();
  staxReader.setErrorHandler(xmlUnmarshaller.getErrorHandler());
  XMLStreamReaderInputSource inputSource=new XMLStreamReaderInputSource(xmlStreamReader);
  xmlUnmarshaller.unmarshal(staxReader,inputSource);
  if (xmlStreamReader.getEventType() != XMLStreamReader.END_DOCUMENT) {
    fail(""String_Node_Str"");
  }
  instream.close();
}"
63798,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Marshaller marshaller=marshalRecord.getMarshaller();
  value=xmlCompositeCollectionMapping.convertObjectValueToDataValue(value,session,marshaller);
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  Descriptor descriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(value.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=value.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(Field)xmlCompositeCollectionMapping.getField(),false);
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.popAttributeGroup();
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeCollectionMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(value.getClass().getName());
    }
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=((Field)xmlCompositeCollectionMapping.getField()).getSchemaTypeForValue(value,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(schemaType,value,null,false);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  Marshaller marshaller=marshalRecord.getMarshaller();
  value=xmlCompositeCollectionMapping.convertObjectValueToDataValue(value,session,marshaller);
  if (null == value) {
    return xmlCompositeCollectionMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  Descriptor descriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(value.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=value.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
    return true;
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(value);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,value);
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor(),(Field)xmlCompositeCollectionMapping.getField(),false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,xPathFragment);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.popAttributeGroup();
    marshalRecord.endElement(xPathFragment,namespaceResolver);
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeCollectionMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(value.getClass().getName());
    }
    xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,value);
    QName schemaType=((Field)xmlCompositeCollectionMapping.getField()).getSchemaTypeForValue(value,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeCollectionMapping.getField()));
    marshalRecord.characters(schemaType,value,null,false);
    marshalRecord.endElement(xPathFragment,namespaceResolver);
  }
  return true;
}"
63799,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  objectValue=xmlCompositeObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.hasAttribute) {
    ObjectBuilder tob=(ObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, childrenLength=children.getLength(); i < childrenLength; i++) {
        Node next=children.item(i);
        short nodeType=next.getNodeType();
        if (nodeType == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
 else         if (nodeType == Node.TEXT_NODE) {
          marshalRecord.characters(((Text)next).getNodeValue());
          return true;
        }
      }
      return false;
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  Descriptor descriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(objectValue.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=objectValue.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    if (!(isSelfFragment || xPathFragment.nameIsText)) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=null;
    if (!marshalRecord.hasEqualNamespaceResolvers()) {
      extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    }
    if (!isSelfFragment) {
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(Field)xmlCompositeObjectMapping.getField(),false);
    }
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshalRecord.getMarshaller(),xPathFragment);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    marshalRecord.popAttributeGroup();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeObjectMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(objectValue.getClass().getName());
    }
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaTypeForValue(objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  objectValue=xmlCompositeObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return xmlCompositeObjectMapping.getNullPolicy().compositeObjectMarshal(xPathFragment,marshalRecord,object,session,namespaceResolver);
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (xPathFragment.hasAttribute) {
    ObjectBuilder tob=(ObjectBuilder)xmlCompositeObjectMapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(objectValue,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      marshalRecord.attribute(xPathFragment,namespaceResolver,fieldValue,schemaType);
      marshalRecord.closeStartGroupingElements(groupingFragment);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(xPathFragment,marshalRecord,objectValue,textMapping.getAttributeValueFromObject(objectValue),session,namespaceResolver,marshalContext);
    }
  }
  boolean isSelfFragment=xPathFragment.isSelfFragment;
  marshalRecord.closeStartGroupingElements(groupingFragment);
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeObjectMapping.getKeepAsElementPolicy();
  if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && objectValue instanceof Node) {
    if (isSelfFragment) {
      NodeList children=((org.w3c.dom.Element)objectValue).getChildNodes();
      for (int i=0, childrenLength=children.getLength(); i < childrenLength; i++) {
        Node next=children.item(i);
        short nodeType=next.getNodeType();
        if (nodeType == Node.ELEMENT_NODE) {
          marshalRecord.node(next,marshalRecord.getNamespaceResolver());
          return true;
        }
 else         if (nodeType == Node.TEXT_NODE) {
          marshalRecord.characters(((Text)next).getNodeValue());
          return true;
        }
      }
      return false;
    }
 else {
      marshalRecord.node((Node)objectValue,marshalRecord.getNamespaceResolver());
      return true;
    }
  }
  Descriptor descriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
  if (descriptor == null) {
    descriptor=(Descriptor)session.getDescriptor(objectValue.getClass());
  }
 else   if (descriptor.hasInheritance()) {
    Class objectValueClass=objectValue.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  if (descriptor != null) {
    marshalRecord.beforeContainmentMarshal(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    CoreAttributeGroup group=marshalRecord.getCurrentAttributeGroup();
    CoreAttributeItem item=group.getItem(getMapping().getAttributeName());
    CoreAttributeGroup nestedGroup=XMLRecord.DEFAULT_ATTRIBUTE_GROUP;
    if (item != null) {
      if (item.getGroups() != null) {
        nestedGroup=item.getGroup(descriptor.getJavaClass());
      }
      if (nestedGroup == null) {
        nestedGroup=item.getGroup() == null ? XMLRecord.DEFAULT_ATTRIBUTE_GROUP : item.getGroup();
      }
    }
    marshalRecord.pushAttributeGroup(nestedGroup);
    if (!(isSelfFragment || xPathFragment.nameIsText)) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,objectBuilder,objectValue);
    }
    List extraNamespaces=null;
    if (!marshalRecord.hasEqualNamespaceResolvers()) {
      extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,false);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    }
    if (!isSelfFragment) {
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor(),(Field)xmlCompositeObjectMapping.getField(),false);
    }
    objectBuilder.buildRow(marshalRecord,objectValue,session,marshalRecord.getMarshaller(),xPathFragment);
    marshalRecord.afterContainmentMarshal(object,objectValue);
    marshalRecord.popAttributeGroup();
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
 else {
    if (Constants.UNKNOWN_OR_TRANSIENT_CLASS.equals(xmlCompositeObjectMapping.getReferenceClassName())) {
      throw XMLMarshalException.descriptorNotFoundInProject(objectValue.getClass().getName());
    }
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      xPathNode.startElement(marshalRecord,xPathFragment,object,session,namespaceResolver,null,objectValue);
    }
    QName schemaType=((Field)xmlCompositeObjectMapping.getField()).getSchemaTypeForValue(objectValue,session);
    updateNamespaces(schemaType,marshalRecord,((Field)xmlCompositeObjectMapping.getField()));
    marshalRecord.characters(schemaType,objectValue,null,false);
    if (!(isSelfFragment || xPathFragment.nameIsText())) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
  }
  return true;
}"
63800,"/** 
 * Set this Marshaller's CharacterEscapeHandler.
 * @since 2.3.3
 */
public void setCharacterEscapeHandler(CharacterEscapeHandler c){
  this.charEscapeHandler=c;
}","/** 
 * Set this Marshaller's CharacterEscapeHandler.
 * @since 2.3.3
 */
public void setCharacterEscapeHandler(CHARACTER_ESCAPE_HANDLER c){
  this.charEscapeHandler=c;
}"
63801,"/** 
 * Copy constructor
 */
protected Marshaller(Marshaller marshaller){
  this.charEscapeHandler=marshaller.getCharacterEscapeHandler();
  this.context=(CONTEXT)marshaller.getContext();
  this.encoding=marshaller.getEncoding();
  this.equalUsingIdenity=marshaller.isEqualUsingIdenity();
  this.errorHandler=marshaller.getErrorHandler();
  this.formattedOutput=marshaller.isFormattedOutput();
  this.indentString=marshaller.getIndentString();
  this.mapper=(NAMESPACE_PREFIX_MAPPER)marshaller.getNamespacePrefixMapper();
  this.marshalListener=(MARSHALLER_LISTENER)marshaller.getMarshalListener();
  if (marshaller.marshalProperties != null) {
    marshalProperties=new Properties();
    for (    Entry entry : marshalProperties.entrySet()) {
      marshalProperties.put(entry.getKey(),entry.getValue());
    }
  }
}","/** 
 * Copy constructor
 */
protected Marshaller(Marshaller marshaller){
  this.charEscapeHandler=(CHARACTER_ESCAPE_HANDLER)marshaller.getCharacterEscapeHandler();
  this.context=(CONTEXT)marshaller.getContext();
  this.encoding=marshaller.getEncoding();
  this.equalUsingIdenity=marshaller.isEqualUsingIdenity();
  this.errorHandler=marshaller.getErrorHandler();
  this.formattedOutput=marshaller.isFormattedOutput();
  this.indentString=marshaller.getIndentString();
  this.mapper=(NAMESPACE_PREFIX_MAPPER)marshaller.getNamespacePrefixMapper();
  this.marshalListener=(MARSHALLER_LISTENER)marshaller.getMarshalListener();
  if (marshaller.marshalProperties != null) {
    marshalProperties=new Properties();
    for (    Entry entry : marshalProperties.entrySet()) {
      marshalProperties.put(entry.getKey(),entry.getValue());
    }
  }
}"
63802,"/** 
 * Return this Marshaller's CharacterEscapeHandler.
 * @since 2.3.3
 */
public CharacterEscapeHandler getCharacterEscapeHandler(){
  return this.charEscapeHandler;
}","/** 
 * Return this Marshaller's CharacterEscapeHandler.
 * @since 2.3.3
 */
public CHARACTER_ESCAPE_HANDLER getCharacterEscapeHandler(){
  return this.charEscapeHandler;
}"
63803,"@Override public XMLRecord buildRow(XMLRecord record,Object object,CoreAbstractSession session,Marshaller marshaller,XPathFragment rootFragment){
  lazyInitialize();
  XPathNode textNode=rootXPathNode.getTextNode();
  List<XPathNode> nonAttributeChildren=rootXPathNode.getNonAttributeChildren();
  if (null == textNode && null == nonAttributeChildren) {
    return record;
  }
  Descriptor xmlDescriptor=(Descriptor)descriptor;
  XPathNode node=rootXPathNode;
  MarshalRecord marshalRecord=(MarshalRecord)record;
  QName schemaType=null;
  if (marshalRecord.getCycleDetectionStack().contains(object,marshaller.isEqualUsingIdenity())) {
    if (cycleRecoverableClass == null) {
      initCycleRecoverableClasses();
    }
    if (cycleRecoverableClass != null && cycleRecoverableClass.isAssignableFrom(object.getClass())) {
      try {
        Object jaxbMarshaller=marshaller.getProperty(Constants.JAXB_MARSHALLER);
        Object contextProxy=CycleRecoverableContextProxy.getProxy(cycleRecoverableContextClass,jaxbMarshaller);
        Method onCycleDetectedMethod=object.getClass().getMethod(ON_CYCLE_DETECTED,new Class[]{cycleRecoverableContextClass});
        object=PrivilegedAccessHelper.invokeMethod(onCycleDetectedMethod,object,new Object[]{contextProxy});
      }
 catch (      Exception e) {
        throw XMLMarshalException.marshalException(e);
      }
      xmlDescriptor=(Descriptor)session.getDescriptor(object.getClass());
      if (xmlDescriptor != null) {
        node=((TreeObjectBuilder)xmlDescriptor.getObjectBuilder()).getRootXPathNode();
      }
 else {
        node=null;
      }
      marshalRecord.getCycleDetectionStack().push(object);
      if (xmlDescriptor != descriptor) {
        if (xmlDescriptor == null) {
          schemaType=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        }
 else {
          schemaType=xmlDescriptor.getSchemaReference().getSchemaContextAsQName();
        }
        marshalRecord.writeXsiTypeAttribute(xmlDescriptor,schemaType.getNamespaceURI(),schemaType.getLocalPart(),schemaType.getPrefix(),false);
      }
    }
 else {
      marshalRecord.getCycleDetectionStack().push(object);
      throw XMLMarshalException.objectCycleDetected(marshalRecord.getCycleDetectionStack().getCycleString());
    }
  }
 else {
    marshalRecord.getCycleDetectionStack().push(object);
  }
  NamespaceResolver namespaceResolver=null;
  if (xmlDescriptor != null) {
    namespaceResolver=xmlDescriptor.getNamespaceResolver();
  }
  MarshalContext marshalContext=null;
  if (xmlDescriptor != null && xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  if (null == nonAttributeChildren) {
    textNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
  }
 else {
    if (node == null) {
      XPathNode n=new XPathNode();
      CompositeObjectMapping m=new XMLCompositeObjectMapping();
      m.setXPath(""String_Node_Str"");
      XMLCompositeObjectMappingNodeValue nv=new XMLCompositeObjectMappingNodeValue(m);
      n.setMarshalNodeValue(nv);
      nv.marshalSingleValue(new XPathFragment(""String_Node_Str""),marshalRecord,null,object,session,namespaceResolver,marshalContext);
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(node); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,node);
        xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
      }
    }
  }
  marshalRecord.getCycleDetectionStack().pop();
  return record;
}","@Override public XMLRecord buildRow(XMLRecord record,Object object,CoreAbstractSession session,Marshaller marshaller,XPathFragment rootFragment){
  lazyInitialize();
  XPathNode textNode=rootXPathNode.getTextNode();
  List<XPathNode> nonAttributeChildren=rootXPathNode.getNonAttributeChildren();
  if (null == textNode && null == nonAttributeChildren) {
    return record;
  }
  Descriptor xmlDescriptor=(Descriptor)descriptor;
  XPathNode node=rootXPathNode;
  MarshalRecord marshalRecord=(MarshalRecord)record;
  QName schemaType=null;
  if (marshalRecord.getCycleDetectionStack().contains(object,marshaller.isEqualUsingIdenity())) {
    if (cycleRecoverableClass == null) {
      initCycleRecoverableClasses();
    }
    if (cycleRecoverableClass != null && cycleRecoverableClass.isAssignableFrom(object.getClass())) {
      try {
        Object jaxbMarshaller=marshaller.getProperty(Constants.JAXB_MARSHALLER);
        Object contextProxy=CycleRecoverableContextProxy.getProxy(cycleRecoverableContextClass,jaxbMarshaller);
        Method onCycleDetectedMethod=object.getClass().getMethod(ON_CYCLE_DETECTED,new Class[]{cycleRecoverableContextClass});
        object=PrivilegedAccessHelper.invokeMethod(onCycleDetectedMethod,object,new Object[]{contextProxy});
      }
 catch (      Exception e) {
        throw XMLMarshalException.marshalException(e);
      }
      xmlDescriptor=(Descriptor)session.getDescriptor(object.getClass());
      if (xmlDescriptor != null) {
        node=((ObjectBuilder)xmlDescriptor.getObjectBuilder()).getRootXPathNode();
      }
 else {
        node=null;
      }
      marshalRecord.getCycleDetectionStack().push(object);
      if (xmlDescriptor != descriptor) {
        if (xmlDescriptor == null) {
          schemaType=(QName)XMLConversionManager.getDefaultJavaTypes().get(object.getClass());
        }
 else {
          schemaType=xmlDescriptor.getSchemaReference().getSchemaContextAsQName();
        }
        marshalRecord.writeXsiTypeAttribute(xmlDescriptor,schemaType.getNamespaceURI(),schemaType.getLocalPart(),schemaType.getPrefix(),false);
      }
    }
 else {
      marshalRecord.getCycleDetectionStack().push(object);
      throw XMLMarshalException.objectCycleDetected(marshalRecord.getCycleDetectionStack().getCycleString());
    }
  }
 else {
    marshalRecord.getCycleDetectionStack().push(object);
  }
  NamespaceResolver namespaceResolver=null;
  if (xmlDescriptor != null) {
    namespaceResolver=xmlDescriptor.getNamespaceResolver();
  }
  MarshalContext marshalContext=null;
  if (xmlDescriptor != null && xmlDescriptor.isSequencedObject()) {
    SequencedObject sequencedObject=(SequencedObject)object;
    marshalContext=new SequencedMarshalContext(sequencedObject.getSettings());
  }
 else {
    marshalContext=ObjectMarshalContext.getInstance();
  }
  if (null == nonAttributeChildren) {
    textNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
  }
 else {
    if (node == null) {
      XPathNode n=new XPathNode();
      CompositeObjectMapping m=new XMLCompositeObjectMapping();
      m.setXPath(""String_Node_Str"");
      XMLCompositeObjectMappingNodeValue nv=new XMLCompositeObjectMappingNodeValue(m);
      n.setMarshalNodeValue(nv);
      nv.marshalSingleValue(new XPathFragment(""String_Node_Str""),marshalRecord,null,object,session,namespaceResolver,marshalContext);
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(node); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,node);
        xPathNode.marshal((MarshalRecord)record,object,session,namespaceResolver,marshaller,marshalContext.getMarshalContext(x),rootFragment);
      }
    }
  }
  marshalRecord.getCycleDetectionStack().pop();
  return record;
}"
63804,"/** 
 * <p> Perform character escaping and write the result to the output. </p> <p> Note: This feature is <i>not</i> supported when marshalling to the following targets: <ul> <li>javax.xml.stream.XMLStreamWriter</li> <li>javax.xml.stream.XMLEventWriter</li> <li>org.xml.sax.ContentHandler</li> <li>org.w3c.dom.Node</li> </ul> </p>
 * @param buffer Array of characters to be escaped
 * @param start The starting position
 * @param length The number of characters being escaped
 * @param isAttributeValue A value of 'true' indicates this is an attribute value
 * @param out The resulting escaped characters will be written to this Writer
 * @throws IOException In an error condition, IOException can be thrown to stop the marshalling process
 */
public void escape(char[] buffer,int start,int length,boolean isAttributeValue,Writer out) throws IOException ;","/** 
 * <p> Perform character escaping and write the result to the output. </p> <p> Note: This feature is <i>not</i> supported when marshalling to the following targets: <ul> <li>javax.xml.stream.XMLStreamWriter</li> <li>javax.xml.stream.XMLEventWriter</li> <li>org.xml.sax.ContentHandler</li> <li>org.w3c.dom.Node</li> </ul> </p>
 * @param buffer Array of characters to be escaped
 * @param start The starting position
 * @param length The number of characters being escaped
 * @param isAttributeValue A value of 'true' indicates this is an attribute value
 * @param out The resulting escaped characters will be written to this Writer
 * @throws IOException In an error condition, IOException can be thrown to stop the marshalling process
 */
@Override public void escape(char[] buffer,int start,int length,boolean isAttributeValue,Writer out) throws IOException ;"
63805,"public boolean hasEqualNamespaceResolvers(){
  return equalNamespaceResolvers;
}","@Override public boolean hasEqualNamespaceResolvers(){
  return equalNamespaceResolvers;
}"
63806,"/** 
 * INTERNAL
 */
public void writeHeader(){
  try {
    writer.write(getMarshaller().getXmlHeader());
    writer.write(Helper.cr());
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL
 */
public void writeHeader(){
  try {
    writer.write(getMarshaller().getXmlHeader());
    writer.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63807,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      writer.write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    writer.write('<');
    writer.write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      writer.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    writer.write('<');
    writer.write(qName);
    numberOfTabs++;
    isStartElementOpen=true;
    isLastEventText=false;
    handleAttributes(atts);
    writePrefixMappings();
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63808,"public void startDocument(String encoding,String version){
  super.startDocument(encoding,version);
  try {
    writer.write(Helper.cr());
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void startDocument(String encoding,String version){
  super.startDocument(encoding,version);
  try {
    writer.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63809,"/** 
 * INTERNAL:
 */
public void endDocument(){
  try {
    writer.write(Helper.cr());
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void endDocument(){
  try {
    writer.write(CR);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63810,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    if (xPathFragment.isGeneratedPrefix()) {
      namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(CR);
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    if (xPathFragment.isGeneratedPrefix()) {
      namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63811,"public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      writer.write(Helper.cr());
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  try {
    isLastEventText=false;
    numberOfTabs--;
    if (isStartElementOpen) {
      writer.write('/');
      writer.write('>');
      isStartElementOpen=false;
      complexType=true;
      return;
    }
    if (complexType) {
      writer.write(CR);
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
 else {
      complexType=true;
    }
    super.endElement(namespaceURI,localName,qName);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63812,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.write(Helper.cr());
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.write(CR);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63813,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writer.write(tab());
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(CR);
    for (int x=0; x < numberOfTabs; x++) {
      writer.write(tab());
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63814,"@Override protected void closeComplex() throws IOException {
  writer.write(Helper.cr());
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab(),false);
  }
  writer.write('}');
}","@Override protected void closeComplex() throws IOException {
  writer.write(FormattedWriterRecord.CR);
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab(),false);
  }
  writer.write('}');
}"
63815,"@Override protected void writeKey(XPathFragment xPathFragment) throws IOException {
  writer.write(Helper.cr());
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab(),false);
  }
  super.writeKey(xPathFragment);
}","@Override protected void writeKey(XPathFragment xPathFragment) throws IOException {
  writer.write(FormattedWriterRecord.CR);
  for (int x=0; x < numberOfTabs; x++) {
    writeValue(tab(),false);
  }
  super.writeKey(xPathFragment);
}"
63816,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        numberOfTabs++;
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(Helper.cr());
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab(),false);
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    Level newLevel=null;
    Level position=null;
    if (levels.isEmpty()) {
      newLevel=new Level(true,true);
      levels.push(newLevel);
    }
 else {
      position=levels.peek();
      newLevel=new Level(true,true);
      levels.push(newLevel);
      if (position.isFirst()) {
        position.setFirst(false);
      }
 else {
        writer.write(',');
      }
    }
    if (xPathFragment.nameIsText()) {
      if (position != null && position.isCollection() && position.isEmptyCollection()) {
        if (!charactersAllowed) {
          throw JAXBException.jsonValuePropertyRequired(""String_Node_Str"");
        }
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
        position.setNeedToOpenComplex(false);
        numberOfTabs++;
        return;
      }
    }
    this.addPositionalNodes(xPathFragment,namespaceResolver);
    if (position.isNeedToOpenComplex()) {
      writer.write('{');
      position.setNeedToOpenComplex(false);
      position.setNeedToCloseComplex(true);
    }
    if (!isLastEventText) {
      if (position.isCollection() && !position.isEmptyCollection()) {
        writer.write(' ');
      }
 else {
        writer.write(FormattedWriterRecord.CR);
        for (int x=0; x < numberOfTabs; x++) {
          writeValue(tab(),false);
        }
      }
    }
    if (!(position.isCollection() && !position.isEmptyCollection())) {
      super.writeKey(xPathFragment);
      if (position.isCollection() && position.isEmptyCollection()) {
        writer.write('[');
        writer.write(' ');
        position.setEmptyCollection(false);
      }
    }
    numberOfTabs++;
    isLastEventText=false;
    charactersAllowed=true;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63817,"public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.write(Helper.cr());
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void comment(char[] ch,int start,int length) throws SAXException {
  try {
    if (isStartElementOpen) {
      writer.write('>');
      writer.write(FormattedWriterRecord.CR);
      isStartElementOpen=false;
    }
    writeComment(ch,start,length);
    complexType=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63818,"/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(Helper.cr());
    for (int x=0; x < numberOfTabs; x++) {
      writeValue(tab(),false);
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void element(XPathFragment frag){
  try {
    isLastEventText=false;
    if (isStartElementOpen) {
      writer.write('>');
      isStartElementOpen=false;
    }
    writer.write(FormattedWriterRecord.CR);
    for (int x=0; x < numberOfTabs; x++) {
      writeValue(tab(),false);
    }
    super.element(frag);
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63819,"public static void main(String[] args) throws WSDLException {
  DBWSBuilder builder=new DBWSBuilder();
  builder.start(args);
}","/** 
 * This method creates a new DBWSBuilder instance, and calls the start method with the given arguments.
 */
public static void main(String[] args) throws WSDLException {
  DBWSBuilder builder=new DBWSBuilder();
  builder.start(args);
}"
63820,"public void start() throws WSDLException {
  packager.setHasAttachments(hasAttachments());
  OutputStream dbwsSchemaStream=null;
  try {
    dbwsSchemaStream=packager.getSchemaStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_SCHEMA_XML,fnfe);
    return;
  }
  OutputStream dbwsSessionsStream=null;
  try {
    dbwsSessionsStream=packager.getSessionsStream(getSessionsFileName());
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_SESSIONS_XML,fnfe);
    return;
  }
  ;
  OutputStream dbwsServiceStream=null;
  try {
    dbwsServiceStream=packager.getServiceStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_SERVICE_XML,fnfe);
    return;
  }
  ;
  OutputStream dbwsOrStream=null;
  try {
    dbwsOrStream=packager.getOrStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_OR_XML,fnfe);
    return;
  }
  ;
  OutputStream dbwsOxStream=null;
  try {
    dbwsOxStream=packager.getOxStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_OX_XML,fnfe);
    return;
  }
  ;
  OutputStream wsdlStream=null;
  try {
    wsdlStream=packager.getWSDLStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_WSDL,fnfe);
    return;
  }
  ;
  OutputStream swarefStream=null;
  try {
    swarefStream=packager.getSWARefStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + SWAREF_FILENAME,fnfe);
    return;
  }
  ;
  OutputStream webXmlStream=null;
  try {
    webXmlStream=packager.getWebXmlStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + WEB_XML_FILENAME,fnfe);
    return;
  }
  ;
  OutputStream classProviderStream=null;
  try {
    classProviderStream=packager.getProviderClassStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_PROVIDER_CLASS_FILE,fnfe);
    return;
  }
  ;
  OutputStream sourceProviderStream=null;
  try {
    sourceProviderStream=packager.getProviderSourceStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_PROVIDER_SOURCE_FILE,fnfe);
    return;
  }
  ;
  OutputStream classProviderListenerStream=null;
  try {
    classProviderListenerStream=packager.getProviderListenerClassStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + PROVIDER_LISTENER_CLASS_FILE,fnfe);
    return;
  }
  ;
  OutputStream sourceProviderListenerStream=null;
  try {
    sourceProviderListenerStream=packager.getProviderListenerSourceStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + PROVIDER_LISTENER_SOURCE_FILE,fnfe);
    return;
  }
  ;
  build(dbwsSchemaStream,dbwsSessionsStream,dbwsServiceStream,dbwsOrStream,dbwsOxStream,swarefStream,webXmlStream,wsdlStream,classProviderStream,sourceProviderStream,classProviderListenerStream,sourceProviderListenerStream,logger);
}","/** 
 * Initialize the required OutputStreams and call the build method.
 */
public void start() throws WSDLException {
  packager.setHasAttachments(hasAttachments());
  OutputStream dbwsSchemaStream=null;
  try {
    dbwsSchemaStream=packager.getSchemaStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_SCHEMA_XML,fnfe);
    return;
  }
  OutputStream dbwsSessionsStream=null;
  try {
    dbwsSessionsStream=packager.getSessionsStream(getSessionsFileName());
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_SESSIONS_XML,fnfe);
    return;
  }
  ;
  OutputStream dbwsServiceStream=null;
  try {
    dbwsServiceStream=packager.getServiceStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_SERVICE_XML,fnfe);
    return;
  }
  ;
  OutputStream dbwsOrStream=null;
  try {
    dbwsOrStream=packager.getOrStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_OR_XML,fnfe);
    return;
  }
  ;
  OutputStream dbwsOxStream=null;
  try {
    dbwsOxStream=packager.getOxStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_OX_XML,fnfe);
    return;
  }
  ;
  OutputStream wsdlStream=null;
  try {
    wsdlStream=packager.getWSDLStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_WSDL,fnfe);
    return;
  }
  ;
  OutputStream swarefStream=null;
  try {
    swarefStream=packager.getSWARefStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + SWAREF_FILENAME,fnfe);
    return;
  }
  ;
  OutputStream webXmlStream=null;
  try {
    webXmlStream=packager.getWebXmlStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + WEB_XML_FILENAME,fnfe);
    return;
  }
  ;
  OutputStream classProviderStream=null;
  try {
    classProviderStream=packager.getProviderClassStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_PROVIDER_CLASS_FILE,fnfe);
    return;
  }
  ;
  OutputStream sourceProviderStream=null;
  try {
    sourceProviderStream=packager.getProviderSourceStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + DBWS_PROVIDER_SOURCE_FILE,fnfe);
    return;
  }
  ;
  OutputStream classProviderListenerStream=null;
  try {
    classProviderListenerStream=packager.getProviderListenerClassStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + PROVIDER_LISTENER_CLASS_FILE,fnfe);
    return;
  }
  ;
  OutputStream sourceProviderListenerStream=null;
  try {
    sourceProviderListenerStream=packager.getProviderListenerSourceStream();
  }
 catch (  FileNotFoundException fnfe) {
    logMessage(SEVERE,""String_Node_Str"" + PROVIDER_LISTENER_SOURCE_FILE,fnfe);
    return;
  }
  ;
  OutputStream deploymentDescriptorStream=null;
  if (packager.getDeploymentDescriptorFileName() != null) {
    try {
      deploymentDescriptorStream=packager.getDeploymentDescriptorStream();
    }
 catch (    FileNotFoundException fnfe) {
      logMessage(SEVERE,""String_Node_Str"" + packager.getDeploymentDescriptorFileName(),fnfe);
      return;
    }
  }
  build(dbwsSchemaStream,dbwsSessionsStream,dbwsServiceStream,dbwsOrStream,dbwsOxStream,swarefStream,webXmlStream,wsdlStream,classProviderStream,sourceProviderStream,classProviderListenerStream,sourceProviderListenerStream,deploymentDescriptorStream,logger);
}"
63821,"public void build(OutputStream dbwsSchemaStream,OutputStream dbwsSessionsStream,OutputStream dbwsServiceStream,OutputStream dbwsOrStream,OutputStream dbwsOxStream,OutputStream swarefStream,OutputStream webXmlStream,OutputStream wsdlStream,OutputStream classProviderStream,OutputStream sourceProviderStream,OutputStream classProviderListenerStream,OutputStream sourceProviderListenerStream,Logger logger) throws WSDLException {
  this.logger=logger;
  xrServiceModel.setName(getProjectName());
  String sessionsFileName=getSessionsFileName();
  if (sessionsFileName != null && sessionsFileName.length() > 0) {
    xrServiceModel.setSessionsFile(sessionsFileName);
  }
  if (topTransformer == null) {
    ServiceLoader<NamingConventionTransformer> transformers=ServiceLoader.load(NamingConventionTransformer.class);
    Iterator<NamingConventionTransformer> transformerIter=transformers.iterator();
    topTransformer=transformerIter.next();
    LinkedList<NamingConventionTransformer> transformerList=new LinkedList<NamingConventionTransformer>();
    if (!((DefaultNamingConventionTransformer)topTransformer).isDefaultTransformer()) {
      for (; transformerIter.hasNext(); ) {
        NamingConventionTransformer nextTransformer=transformerIter.next();
        if (!((DefaultNamingConventionTransformer)nextTransformer).isDefaultTransformer()) {
          transformerList.addLast(nextTransformer);
        }
 else         if (nextTransformer instanceof SQLX2003Transformer) {
          transformerList.addLast(nextTransformer);
        }
      }
    }
 else {
      for (; transformerIter.hasNext(); ) {
        transformerList.addLast(transformerIter.next());
      }
    }
    NamingConventionTransformer nextTransformer=topTransformer;
    for (Iterator<NamingConventionTransformer> i=transformerList.iterator(); i.hasNext(); ) {
      NamingConventionTransformer nct=i.next();
      ((DefaultNamingConventionTransformer)nextTransformer).setNextTransformer(nct);
      nextTransformer=nct;
    }
  }
  packager.start();
  DBWSBuilderHelper helper=getBuilderHelper();
  helper.buildDbArtifacts();
  helper.buildOROXProjects(topTransformer,helper.buildTypesList(operations));
  helper.buildSchema(topTransformer);
  helper.buildSessionsXML(dbwsSessionsStream);
  packager.setHasAttachments(hasAttachments());
  helper.buildDBWSModel(topTransformer,dbwsServiceStream);
  helper.writeAttachmentSchema(swarefStream);
  helper.buildWSDL(wsdlStream,topTransformer);
  helper.writeWebXML(webXmlStream);
  helper.generateDBWSProvider(sourceProviderStream,classProviderStream,sourceProviderListenerStream,classProviderListenerStream);
  helper.writeSchema(dbwsSchemaStream);
  helper.writeOROXProjects(dbwsOrStream,dbwsOxStream);
  packager.end();
}","/** 
 * Generate the required artifacts for the target packaging/archiving, and write each to the given OutputStreams as appropriate.
 */
public void build(OutputStream dbwsSchemaStream,OutputStream dbwsSessionsStream,OutputStream dbwsServiceStream,OutputStream dbwsOrStream,OutputStream dbwsOxStream,OutputStream swarefStream,OutputStream webXmlStream,OutputStream wsdlStream,OutputStream classProviderStream,OutputStream sourceProviderStream,OutputStream classProviderListenerStream,OutputStream sourceProviderListenerStream,OutputStream deploymentDescriptorStream,Logger logger) throws WSDLException {
  this.logger=logger;
  xrServiceModel.setName(getProjectName());
  String sessionsFileName=getSessionsFileName();
  if (sessionsFileName != null && sessionsFileName.length() > 0) {
    xrServiceModel.setSessionsFile(sessionsFileName);
  }
  if (topTransformer == null) {
    ServiceLoader<NamingConventionTransformer> transformers=ServiceLoader.load(NamingConventionTransformer.class);
    Iterator<NamingConventionTransformer> transformerIter=transformers.iterator();
    topTransformer=transformerIter.next();
    LinkedList<NamingConventionTransformer> transformerList=new LinkedList<NamingConventionTransformer>();
    if (!((DefaultNamingConventionTransformer)topTransformer).isDefaultTransformer()) {
      for (; transformerIter.hasNext(); ) {
        NamingConventionTransformer nextTransformer=transformerIter.next();
        if (!((DefaultNamingConventionTransformer)nextTransformer).isDefaultTransformer()) {
          transformerList.addLast(nextTransformer);
        }
 else         if (nextTransformer instanceof SQLX2003Transformer) {
          transformerList.addLast(nextTransformer);
        }
      }
    }
 else {
      for (; transformerIter.hasNext(); ) {
        transformerList.addLast(transformerIter.next());
      }
    }
    NamingConventionTransformer nextTransformer=topTransformer;
    for (Iterator<NamingConventionTransformer> i=transformerList.iterator(); i.hasNext(); ) {
      NamingConventionTransformer nct=i.next();
      ((DefaultNamingConventionTransformer)nextTransformer).setNextTransformer(nct);
      nextTransformer=nct;
    }
  }
  packager.start();
  DBWSBuilderHelper helper=getBuilderHelper();
  helper.buildDbArtifacts();
  helper.buildOROXProjects(topTransformer,helper.buildTypesList(operations));
  helper.buildSchema(topTransformer);
  helper.buildSessionsXML(dbwsSessionsStream);
  packager.setHasAttachments(hasAttachments());
  helper.buildDBWSModel(topTransformer,dbwsServiceStream);
  helper.writeAttachmentSchema(swarefStream);
  helper.buildWSDL(wsdlStream,topTransformer);
  helper.writeWebXML(webXmlStream);
  helper.generateDBWSProvider(sourceProviderStream,classProviderStream,sourceProviderListenerStream,classProviderListenerStream);
  helper.writeSchema(dbwsSchemaStream);
  helper.writeOROXProjects(dbwsOrStream,dbwsOxStream);
  helper.writeDeploymentDescriptor(deploymentDescriptorStream);
  packager.end();
}"
63822,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.XmlElementsEnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.choice.InterfaceChoiceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.inheritance.interfaces.InterfacesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.HandleListenerExceptionsTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.ExtraPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.MissingPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.IgnoreInvalidNonPublicFieldTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeTwoDatesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.NonNegativeIntegerSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.CharTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(ObjectFactoryTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathWithMultipleEqualsCharactersTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalAutoDetectTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ValidationTestCases.class);
  suite.addTestSuite(AutoDetectMediaTypeTestCases.class);
  suite.addTestSuite(AutoDetectFailsTestCases.class);
  suite.addTestSuite(AutoDetectSmallDocTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(PrefixMapperContextTestCases.class);
  suite.addTestSuite(DefaultNSPrefixMapperSimpleTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(org.eclipse.persistence.testing.jaxb.singleobject.JAXBSingleObjectTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.DifferentClassLoaderTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.classloader.XmlElementsEnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.helper.JAXBHelperTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.any.AnyWithJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.InterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.interfaces.choice.InterfaceChoiceTestCases.class);
  suite.addTestSuite(InvalidTransientInterfaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.inheritance.interfaces.InterfacesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.MarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshalSchemaValidationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.UnmarshallerNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.NoSchemaRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.HandleListenerExceptionsTestCases.class);
  suite.addTestSuite(XMLStreamWriterDefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.qname.defaultnamespace.QNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.AnyCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlmarshaller.locator.ElementCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.XmlTypeNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.NonTransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.TransientTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.ExtraPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmltype.proporder.MissingPropTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.none.NoneTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.FieldAndPropertyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlaccessortype.IgnoreInvalidNonPublicFieldTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlvirtualaccessmethods.XmlVirtualAccessMethodsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeDateEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.XmlSchemaTypeTwoDatesTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.NonNegativeIntegerSchemaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschematype.CharTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithIndexTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefTestCases.class);
  suite.addTestSuite(JAXBContextByClassArrayWithRefInBindingsTestCases.class);
  suite.addTestSuite(JAXBContextByPackageWithIndexTestCases.class);
  suite.addTestSuite(ObjectFactoryTestCases.class);
  suite.addTestSuite(PropOrderTestCases.class);
  suite.addTestSuite(LazyInitTestCases.class);
  suite.addTestSuite(XmlMixedTestCases.class);
  suite.addTestSuite(XmlPathWithMultipleEqualsCharactersTestCases.class);
  suite.addTestSuite(XmlPathToElementWithXmlAttributeTestCases.class);
  suite.addTestSuite(XmlPathToAttributeTestCases.class);
  suite.addTestSuite(XmlPathWithXmlAttributeTestCases.class);
  suite.addTestSuite(RepeatedUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalTestCases.class);
  suite.addTestSuite(JSONUnmarshalAutoDetectTestCases.class);
  suite.addTestSuite(DefaultValueTestCases.class);
  suite.addTestSuite(ValidationTestCases.class);
  suite.addTestSuite(AutoDetectMediaTypeTestCases.class);
  suite.addTestSuite(AutoDetectFailsTestCases.class);
  suite.addTestSuite(AutoDetectSmallDocTestCases.class);
  suite.addTestSuite(ReadAndWriteOnlyTestCases.class);
  suite.addTestSuite(XMLBindingsTestCases.class);
  suite.addTestSuite(XMLBindingsPopulatedTestCases.class);
  suite.addTestSuite(XMLBindingsWithExternalMetadataTestCases.class);
  suite.addTestSuite(XMLSchemaModelTestCases.class);
  suite.addTestSuite(JAXBIntrospectorGetElementNameTestCases.class);
  suite.addTestSuite(UnmarshalWithSpaceEventTestCases.class);
  suite.addTestSuite(PrefixMapperTestCases.class);
  suite.addTestSuite(PrefixMapperMapTestCases.class);
  suite.addTestSuite(PrefixMapperContextTestCases.class);
  suite.addTestSuite(DefaultNSPrefixMapperSimpleTestCases.class);
  suite.addTestSuite(ChildURITestCases.class);
  suite.addTestSuite(URITestCases.class);
  suite.addTestSuite(PropertyTestCases.class);
  return suite;
}"
63823,"public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    Property property=null;
    JavaField nextField=fieldIt.next();
    int modifiers=nextField.getModifiers();
    if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic || hasJAXBAnnotations(nextField))) {
      if (!Modifier.isStatic(modifiers)) {
        if ((onlyExplicit && hasJAXBAnnotations(nextField)) || !onlyExplicit) {
          property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          properties.add(property);
        }
      }
 else {
        try {
          property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          if (helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
            Object value=((JavaFieldImpl)nextField).get(null);
            if (value != null) {
              String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
              property.setFixedValue(stringValue);
            }
          }
          property.setWriteOnly(true);
          if (!hasJAXBAnnotations(nextField)) {
            property.setTransient(true);
          }
          properties.add(property);
        }
 catch (        ClassCastException e) {
        }
catch (        IllegalAccessException e) {
        }
      }
    }
    if (helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (property != null) {
        property.setTransient(true);
      }
    }
  }
  return properties;
}","public ArrayList<Property> getFieldPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  for (Iterator<JavaField> fieldIt=cls.getDeclaredFields().iterator(); fieldIt.hasNext(); ) {
    Property property=null;
    JavaField nextField=fieldIt.next();
    int modifiers=nextField.getModifiers();
    if (!Modifier.isTransient(modifiers) && ((Modifier.isPublic(nextField.getModifiers()) && onlyPublic) || !onlyPublic || hasJAXBAnnotations(nextField))) {
      if (!Modifier.isStatic(modifiers)) {
        if ((onlyExplicit && hasJAXBAnnotations(nextField)) || !onlyExplicit) {
          try {
            property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
            properties.add(property);
          }
 catch (          JAXBException ex) {
            if (ex.getErrorCode() != JAXBException.INVALID_INTERFACE || !helper.isAnnotationPresent(nextField,XmlTransient.class)) {
              throw ex;
            }
          }
        }
      }
 else {
        try {
          property=buildNewProperty(info,cls,nextField,nextField.getName(),nextField.getResolvedType());
          if (helper.isAnnotationPresent(nextField,XmlAttribute.class)) {
            Object value=((JavaFieldImpl)nextField).get(null);
            if (value != null) {
              String stringValue=(String)XMLConversionManager.getDefaultXMLManager().convertObject(value,String.class,property.getSchemaType());
              property.setFixedValue(stringValue);
            }
          }
          property.setWriteOnly(true);
          if (!hasJAXBAnnotations(nextField)) {
            property.setTransient(true);
          }
          properties.add(property);
        }
 catch (        ClassCastException e) {
        }
catch (        IllegalAccessException e) {
        }
catch (        JAXBException ex) {
          if (ex.getErrorCode() != JAXBException.INVALID_INTERFACE || !helper.isAnnotationPresent(nextField,XmlTransient.class)) {
            throw ex;
          }
        }
      }
    }
    if (helper.isAnnotationPresent(nextField,XmlTransient.class)) {
      if (property != null) {
        property.setTransient(true);
      }
    }
  }
  return properties;
}"
63824,"public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (!next.isSynthetic()) {
      if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic || hasJAXBAnnotations(next))) {
          propertyMethods.add(next);
        }
      }
 else       if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic || hasJAXBAnnotations(next))) {
          propertyMethods.add(next);
        }
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod == null) {
        setMethod=cls.getMethod(setMethodName,paramTypes);
      }
      if (setMethod == null && !(hasJAXBAnnotations(getMethod))) {
        isPropertyTransient=true;
      }
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        propertyMethod=setMethod;
        if (isTransient) {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        propertyMethod=getMethod;
        if (isTransient) {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod == null) {
        getMethod=cls.getMethod(GET_STR + propertyName,new JavaClass[]{});
        if (getMethod == null) {
          getMethod=cls.getMethod(IS_STR + propertyName,new JavaClass[]{});
        }
      }
      if (getMethod == null && !(hasJAXBAnnotations(setMethod))) {
        isPropertyTransient=true;
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      propertyNames.add(propertyName);
      Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
      property.setTransient(isPropertyTransient);
      if (getMethod != null) {
        property.setOriginalGetMethodName(getMethod.getName());
        if (property.getGetMethodName() == null) {
          property.setGetMethodName(getMethod.getName());
        }
      }
      if (setMethod != null) {
        property.setOriginalSetMethodName(setMethod.getName());
        if (property.getSetMethodName() == null) {
          property.setSetMethodName(setMethod.getName());
        }
      }
      property.setMethodProperty(true);
      properties.add(property);
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}","public ArrayList<Property> getPropertyPropertiesForClass(JavaClass cls,TypeInfo info,boolean onlyPublic,boolean onlyExplicit){
  ArrayList<Property> properties=new ArrayList<Property>();
  if (cls == null) {
    return properties;
  }
  ArrayList<JavaMethod> propertyMethods=new ArrayList<JavaMethod>();
  for (  JavaMethod next : new ArrayList<JavaMethod>(cls.getDeclaredMethods())) {
    if (!next.isSynthetic()) {
      if (((next.getName().startsWith(GET_STR) && next.getName().length() > 3) || (next.getName().startsWith(IS_STR) && next.getName().length() > 2)) && next.getParameterTypes().length == 0 && next.getReturnType() != helper.getJavaClass(java.lang.Void.class)) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic || hasJAXBAnnotations(next))) {
          propertyMethods.add(next);
        }
      }
 else       if (next.getName().startsWith(SET_STR) && next.getName().length() > 3 && next.getParameterTypes().length == 1) {
        int modifiers=next.getModifiers();
        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers) && ((onlyPublic && Modifier.isPublic(next.getModifiers())) || !onlyPublic || hasJAXBAnnotations(next))) {
          propertyMethods.add(next);
        }
      }
    }
  }
  ArrayList<String> propertyNames=new ArrayList<String>();
  for (int i=0; i < propertyMethods.size(); i++) {
    boolean isPropertyTransient=false;
    JavaMethod nextMethod=propertyMethods.get(i);
    String propertyName=EMPTY_STRING;
    JavaMethod getMethod;
    JavaMethod setMethod;
    JavaMethod propertyMethod=null;
    if (!nextMethod.getName().startsWith(SET_STR)) {
      if (nextMethod.getName().startsWith(GET_STR)) {
        propertyName=nextMethod.getName().substring(3);
      }
 else       if (nextMethod.getName().startsWith(IS_STR)) {
        propertyName=nextMethod.getName().substring(2);
      }
      getMethod=nextMethod;
      String setMethodName=SET_STR + propertyName;
      propertyName=Introspector.decapitalize(propertyName);
      JavaClass[] paramTypes={(JavaClass)getMethod.getReturnType()};
      setMethod=cls.getDeclaredMethod(setMethodName,paramTypes);
      if (setMethod == null) {
        setMethod=cls.getMethod(setMethodName,paramTypes);
      }
      if (setMethod == null && !(hasJAXBAnnotations(getMethod))) {
        isPropertyTransient=true;
      }
      if (setMethod != null && hasJAXBAnnotations(setMethod)) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        propertyMethod=setMethod;
        if (isTransient) {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(getMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        propertyMethod=getMethod;
        if (isTransient) {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
    }
 else {
      propertyName=nextMethod.getName().substring(3);
      setMethod=nextMethod;
      String getMethodName=GET_STR + propertyName;
      getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      if (getMethod == null) {
        getMethodName=IS_STR + propertyName;
        getMethod=cls.getDeclaredMethod(getMethodName,new JavaClass[]{});
      }
      if (getMethod == null) {
        getMethod=cls.getMethod(GET_STR + propertyName,new JavaClass[]{});
        if (getMethod == null) {
          getMethod=cls.getMethod(IS_STR + propertyName,new JavaClass[]{});
        }
      }
      if (getMethod == null && !(hasJAXBAnnotations(setMethod))) {
        isPropertyTransient=true;
      }
      if (getMethod != null && hasJAXBAnnotations(getMethod)) {
        boolean isTransient=helper.isAnnotationPresent(getMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(getMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=getMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=getMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if ((onlyExplicit && hasJAXBAnnotations(setMethod)) || !onlyExplicit) {
        boolean isTransient=helper.isAnnotationPresent(setMethod,XmlTransient.class);
        boolean isLocation=helper.isAnnotationPresent(setMethod,XmlLocation.class) || helper.isAnnotationPresent(setMethod,CompilerHelper.XML_LOCATION_ANNOTATION_CLASS) || helper.isAnnotationPresent(setMethod,CompilerHelper.INTERNAL_XML_LOCATION_ANNOTATION_CLASS);
        if (!isTransient) {
          propertyMethod=setMethod;
        }
 else {
          isPropertyTransient=true;
          if (isLocation) {
            propertyMethod=setMethod;
            info.setLocationAware(true);
          }
        }
      }
 else       if (onlyExplicit) {
        continue;
      }
      propertyName=Introspector.decapitalize(propertyName);
    }
    JavaClass ptype=null;
    if (getMethod != null) {
      ptype=(JavaClass)getMethod.getReturnType();
    }
 else {
      ptype=setMethod.getParameterTypes()[0];
    }
    if (!propertyNames.contains(propertyName)) {
      try {
        Property property=buildNewProperty(info,cls,propertyMethod,propertyName,ptype);
        propertyNames.add(propertyName);
        property.setTransient(isPropertyTransient);
        if (getMethod != null) {
          property.setOriginalGetMethodName(getMethod.getName());
          if (property.getGetMethodName() == null) {
            property.setGetMethodName(getMethod.getName());
          }
        }
        if (setMethod != null) {
          property.setOriginalSetMethodName(setMethod.getName());
          if (property.getSetMethodName() == null) {
            property.setSetMethodName(setMethod.getName());
          }
        }
        property.setMethodProperty(true);
        properties.add(property);
      }
 catch (      JAXBException ex) {
        if (ex.getErrorCode() != JAXBException.INVALID_INTERFACE || !isPropertyTransient) {
          throw ex;
        }
      }
    }
  }
  properties=removeSuperclassProperties(cls,properties);
  Collections.sort(properties,new PropertyComparitor());
  return properties;
}"
63825,"private void parseRoot(Tree tree) throws SAXException {
  if (namespaces != null) {
    Map<String,String> namespacePairs=namespaces.getPrefixesToNamespaces();
    Iterator<String> keys=namespacePairs.keySet().iterator();
    while (keys.hasNext()) {
      String nextKey=keys.next();
      contentHandler.startPrefixMapping(nextKey,namespacePairs.get(nextKey));
    }
  }
  if (tree.getType() == JSONLexer.OBJECT) {
    contentHandler.startDocument();
    int children=tree.getChildCount();
    if (children == 0 && unmarshalClass == null) {
      return;
    }
    if (includeRoot) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      if (children == 1) {
        CommonTree ct=(CommonTree)tree.getChild(0);
        if (ct != null && ct.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(ct);
        contentHandler.endElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null);
      }
 else {
        contentHandler.startElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        for (int x=0, size=children; x < size; x++) {
          parse((CommonTree)tree.getChild(x));
        }
        contentHandler.endElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null);
      }
    }
    contentHandler.endDocument();
  }
 else   if (tree.getType() == JSONLexer.ARRAY) {
    SAXUnmarshallerHandler rootContentHandler=null;
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      rootContentHandler=(SAXUnmarshallerHandler)getContentHandler();
    }
    int size=tree.getChildCount();
    List list=new ArrayList(size);
    for (int x=0; x < size; x++) {
      parseRoot(tree.getChild(x));
      if (getContentHandler() instanceof SAXUnmarshallerHandler) {
        SAXUnmarshallerHandler saxUnmarshallerHandler=(SAXUnmarshallerHandler)contentHandler;
        list.add(saxUnmarshallerHandler.getObject());
        saxUnmarshallerHandler.setObject(null);
      }
 else       if (getContentHandler() instanceof UnmarshalRecord) {
        UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
        Object unmarshalledObject=unmarshalRecord.getCurrentObject();
        if (includeRoot && unmarshalClass != null) {
          if (!(unmarshalledObject instanceof Root)) {
            Root xmlRoot=unmarshalRecord.createRoot();
            xmlRoot.setNamespaceURI(unmarshalRecord.getRootElementNamespaceUri());
            xmlRoot.setLocalName(unmarshalRecord.getLocalName());
            xmlRoot.setObject(unmarshalledObject);
            unmarshalledObject=xmlRoot;
          }
        }
        list.add(unmarshalledObject);
        unmarshalRecord.setCurrentObject(null);
        unmarshalRecord.setRootElementName(null);
        unmarshalRecord.setLocalName(null);
      }
    }
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      ((SAXUnmarshallerHandler)getContentHandler()).setObject(list);
    }
 else     if (getContentHandler() instanceof UnmarshalRecord) {
      ((UnmarshalRecord)getContentHandler()).setCurrentObject(list);
      ((UnmarshalRecord)getContentHandler()).setRootElementName(Constants.EMPTY_STRING);
      ((UnmarshalRecord)getContentHandler()).setLocalName(Constants.EMPTY_STRING);
      if (rootContentHandler != null) {
        rootContentHandler.setObject(list);
      }
    }
  }
}","private void parseRoot(Tree tree) throws SAXException {
  if (namespaces != null) {
    Map<String,String> namespacePairs=namespaces.getPrefixesToNamespaces();
    Iterator<String> keys=namespacePairs.keySet().iterator();
    while (keys.hasNext()) {
      String nextKey=keys.next();
      contentHandler.startPrefixMapping(nextKey,namespacePairs.get(nextKey));
    }
  }
  if (tree.getType() == JSONLexer.OBJECT) {
    contentHandler.startDocument();
    int children=tree.getChildCount();
    if (children == 0 && unmarshalClass == null) {
      return;
    }
    if (includeRoot) {
      parse((CommonTree)tree.getChild(0));
    }
 else {
      if (children == 1) {
        CommonTree ct=(CommonTree)tree.getChild(0);
        if (ct != null && ct.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(ct);
        contentHandler.endElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null);
      }
 else {
        contentHandler.startElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null,attributes.setTree(tree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        for (int x=0, size=children; x < size; x++) {
          parse((CommonTree)tree.getChild(x));
        }
        contentHandler.endElement(Constants.EMPTY_STRING,Constants.EMPTY_STRING,null);
      }
    }
    contentHandler.endDocument();
  }
 else   if (tree.getType() == JSONLexer.ARRAY) {
    SAXUnmarshallerHandler rootContentHandler=null;
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      rootContentHandler=(SAXUnmarshallerHandler)getContentHandler();
    }
    int size=tree.getChildCount();
    List list=new ArrayList(size);
    for (int x=0; x < size; x++) {
      parseRoot(tree.getChild(x));
      if (getContentHandler() instanceof SAXUnmarshallerHandler) {
        SAXUnmarshallerHandler saxUnmarshallerHandler=(SAXUnmarshallerHandler)contentHandler;
        list.add(saxUnmarshallerHandler.getObject());
        saxUnmarshallerHandler.setObject(null);
      }
 else       if (getContentHandler() instanceof UnmarshalRecord) {
        UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
        Object unmarshalledObject=unmarshalRecord.getCurrentObject();
        if (includeRoot && unmarshalClass != null) {
          if (!(unmarshalledObject instanceof Root)) {
            Root xmlRoot=unmarshalRecord.createRoot();
            xmlRoot.setNamespaceURI(unmarshalRecord.getRootElementNamespaceUri());
            xmlRoot.setLocalName(unmarshalRecord.getLocalName());
            xmlRoot.setObject(unmarshalledObject);
            unmarshalledObject=xmlRoot;
          }
        }
        list.add(unmarshalledObject);
        unmarshalRecord.setCurrentObject(null);
        unmarshalRecord.setRootElementName(null);
        unmarshalRecord.setLocalName(null);
      }
    }
    if (getContentHandler() instanceof SAXUnmarshallerHandler) {
      ((SAXUnmarshallerHandler)getContentHandler()).setObject(list);
    }
 else     if (getContentHandler() instanceof UnmarshalRecord) {
      ((UnmarshalRecord)getContentHandler()).setCurrentObject(list);
      ((UnmarshalRecord)getContentHandler()).setRootElementName(Constants.EMPTY_STRING);
      ((UnmarshalRecord)getContentHandler()).setLocalName(Constants.EMPTY_STRING);
      if (rootContentHandler != null) {
        rootContentHandler.setObject(list);
      }
    }
  }
 else {
    getContentHandler().startDocument();
    parse(tree);
  }
}"
63826,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(IsReadableTestCases.class);
  suite.addTestSuite(IsWriteableTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(IsReadableTestCases.class);
  suite.addTestSuite(IsWriteableTestCases.class);
  suite.addTestSuite(SimpleListTestCases.class);
  return suite;
}"
63827,"public Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    unmarshaller.setProperty(UnmarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    StreamSource jsonSource;
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    if (mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      Reader entityReader=new InputStreamReader(entityStream,charSet);
      jsonSource=new StreamSource(entityReader);
    }
 else {
      jsonSource=new StreamSource(entityStream);
    }
    JAXBElement<?> jaxbElement=unmarshaller.unmarshal(jsonSource,domainClass);
    if (type.isAssignableFrom(JAXBElement.class)) {
      return jaxbElement;
    }
 else {
      Object value=jaxbElement.getValue();
      if (value instanceof ArrayList) {
        if (type.isArray()) {
          ArrayList<JAXBElement> arrayList=(ArrayList<JAXBElement>)value;
          int arrayListSize=arrayList.size();
          Object array;
          if (genericType instanceof GenericArrayType) {
            array=Array.newInstance(JAXBElement.class,arrayListSize);
            for (int x=0; x < arrayListSize; x++) {
              Array.set(array,x,arrayList.get(x));
            }
          }
 else {
            array=Array.newInstance(domainClass,arrayListSize);
            for (int x=0; x < arrayListSize; x++) {
              Array.set(array,x,arrayList.get(x).getValue());
            }
          }
          return array;
        }
 else {
          ContainerPolicy containerPolicy;
          if (type.isAssignableFrom(List.class) || type.isAssignableFrom(ArrayList.class) || type.isAssignableFrom(Collection.class)) {
            containerPolicy=new CollectionContainerPolicy(ArrayList.class);
          }
 else           if (type.isAssignableFrom(Set.class)) {
            containerPolicy=new CollectionContainerPolicy(HashSet.class);
          }
 else           if (type.isAssignableFrom(Deque.class) || type.isAssignableFrom(Queue.class)) {
            containerPolicy=new CollectionContainerPolicy(LinkedList.class);
          }
 else           if (type.isAssignableFrom(NavigableSet.class) || type.isAssignableFrom(SortedSet.class)) {
            containerPolicy=new CollectionContainerPolicy(TreeSet.class);
          }
 else {
            containerPolicy=new CollectionContainerPolicy(type);
          }
          Object container=containerPolicy.containerInstance();
          boolean wrapItemInJAXBElement=false;
          if (genericType instanceof ParameterizedType) {
            Type actualType=((ParameterizedType)genericType).getActualTypeArguments()[0];
            if (actualType instanceof ParameterizedType) {
              Type rawType=((ParameterizedType)actualType).getRawType();
              wrapItemInJAXBElement=rawType == JAXBElement.class;
            }
          }
          for (          Object element : (Collection<Object>)value) {
            if (wrapItemInJAXBElement) {
              if (!(element instanceof JAXBElement)) {
                element=new JAXBElement(new QName(""String_Node_Str""),domainClass,element);
              }
              containerPolicy.addInto(element,container,null);
            }
 else {
              containerPolicy.addInto(JAXBIntrospector.getValue(element),container,null);
            }
          }
          return container;
        }
      }
 else {
        return value;
      }
    }
  }
 catch (  UnmarshalException unmarshalException) {
    ResponseBuilder builder=Response.status(Status.BAD_REQUEST);
    throw new WebApplicationException(builder.build());
  }
catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","public Object readFrom(Class<Object> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    unmarshaller.setProperty(UnmarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    unmarshaller.setProperty(UnmarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      unmarshaller.setProperty(UnmarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    unmarshaller.setProperty(UnmarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    preReadFrom(type,genericType,annotations,mediaType,httpHeaders,unmarshaller);
    StreamSource jsonSource;
    Map<String,String> mediaTypeParameters=null;
    if (null != mediaType) {
      mediaTypeParameters=mediaType.getParameters();
    }
    if (null != mediaTypeParameters && mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      Reader entityReader=new InputStreamReader(entityStream,charSet);
      jsonSource=new StreamSource(entityReader);
    }
 else {
      jsonSource=new StreamSource(entityStream);
    }
    JAXBElement<?> jaxbElement=unmarshaller.unmarshal(jsonSource,domainClass);
    if (type.isAssignableFrom(JAXBElement.class)) {
      return jaxbElement;
    }
 else {
      Object value=jaxbElement.getValue();
      if (value instanceof ArrayList) {
        if (type.isArray()) {
          ArrayList<JAXBElement> arrayList=(ArrayList<JAXBElement>)value;
          int arrayListSize=arrayList.size();
          Object array;
          if (genericType instanceof GenericArrayType) {
            array=Array.newInstance(JAXBElement.class,arrayListSize);
            for (int x=0; x < arrayListSize; x++) {
              Array.set(array,x,arrayList.get(x));
            }
          }
 else {
            array=Array.newInstance(domainClass,arrayListSize);
            for (int x=0; x < arrayListSize; x++) {
              Array.set(array,x,arrayList.get(x).getValue());
            }
          }
          return array;
        }
 else {
          ContainerPolicy containerPolicy;
          if (type.isAssignableFrom(List.class) || type.isAssignableFrom(ArrayList.class) || type.isAssignableFrom(Collection.class)) {
            containerPolicy=new CollectionContainerPolicy(ArrayList.class);
          }
 else           if (type.isAssignableFrom(Set.class)) {
            containerPolicy=new CollectionContainerPolicy(HashSet.class);
          }
 else           if (type.isAssignableFrom(Deque.class) || type.isAssignableFrom(Queue.class)) {
            containerPolicy=new CollectionContainerPolicy(LinkedList.class);
          }
 else           if (type.isAssignableFrom(NavigableSet.class) || type.isAssignableFrom(SortedSet.class)) {
            containerPolicy=new CollectionContainerPolicy(TreeSet.class);
          }
 else {
            containerPolicy=new CollectionContainerPolicy(type);
          }
          Object container=containerPolicy.containerInstance();
          boolean wrapItemInJAXBElement=false;
          if (genericType instanceof ParameterizedType) {
            Type actualType=((ParameterizedType)genericType).getActualTypeArguments()[0];
            if (actualType instanceof ParameterizedType) {
              Type rawType=((ParameterizedType)actualType).getRawType();
              wrapItemInJAXBElement=rawType == JAXBElement.class;
            }
          }
          for (          Object element : (Collection<Object>)value) {
            if (wrapItemInJAXBElement) {
              if (!(element instanceof JAXBElement)) {
                element=new JAXBElement(new QName(""String_Node_Str""),domainClass,element);
              }
              containerPolicy.addInto(element,container,null);
            }
 else {
              containerPolicy.addInto(JAXBIntrospector.getValue(element),container,null);
            }
          }
          return container;
        }
      }
 else {
        return value;
      }
    }
  }
 catch (  UnmarshalException unmarshalException) {
    ResponseBuilder builder=Response.status(Status.BAD_REQUEST);
    throw new WebApplicationException(builder.build());
  }
catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
63828,"/** 
 * @see javax.ws.rs.ext.MessageBodyWriter#writeTo(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[],javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.io.OutputStream)
 */
public void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    marshaller.setProperty(MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS,marshalEmptyCollections);
    marshaller.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      marshaller.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    marshaller.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    if (mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      marshaller.setProperty(Marshaller.JAXB_ENCODING,charSet);
    }
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}","/** 
 * @see javax.ws.rs.ext.MessageBodyWriter#writeTo(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[],javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.io.OutputStream)
 */
public void writeTo(Object object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    if (null == genericType) {
      genericType=type;
    }
    Class<?> domainClass=getDomainClass(genericType);
    JAXBContext jaxbContext=getJAXBContext(domainClass,annotations,mediaType,httpHeaders);
    Marshaller marshaller=jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,formattedOutput);
    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,MediaType.APPLICATION_JSON);
    marshaller.setProperty(MarshallerProperties.JSON_ATTRIBUTE_PREFIX,attributePrefix);
    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,includeRoot);
    marshaller.setProperty(MarshallerProperties.JSON_MARSHAL_EMPTY_COLLECTIONS,marshalEmptyCollections);
    marshaller.setProperty(MarshallerProperties.JSON_NAMESPACE_SEPARATOR,namespaceSeperator);
    if (null != valueWrapper) {
      marshaller.setProperty(MarshallerProperties.JSON_VALUE_WRAPPER,valueWrapper);
    }
    marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,wrapperAsArrayName);
    marshaller.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,namespacePrefixMapper);
    Map<String,String> mediaTypeParameters=null;
    if (null != mediaType) {
      mediaTypeParameters=mediaType.getParameters();
    }
    if (null != mediaTypeParameters && mediaTypeParameters.containsKey(CHARSET)) {
      String charSet=mediaTypeParameters.get(CHARSET);
      marshaller.setProperty(Marshaller.JAXB_ENCODING,charSet);
    }
    preWriteTo(object,type,genericType,annotations,mediaType,httpHeaders,marshaller);
    marshaller.marshal(object,entityStream);
  }
 catch (  JAXBException jaxbException) {
    throw new WebApplicationException(jaxbException);
  }
}"
63829,"/** 
 * Gets the.
 * @param key the key
 * @return the object
 */
public static Object get(String key){
  Object value=storage.get().get(key);
  if (REQUEST_UNIQUE_ID.equals(key)) {
    if (value == null) {
      return ""String_Node_Str"";
    }
  }
  return value;
}","/** 
 * Gets the.
 * @param key the key
 * @return the object
 */
public static Object get(String key){
  Object value=storage.get().get(key);
  if (REQUEST_ID.equals(key)) {
    if (value == null) {
      return ""String_Node_Str"";
    }
  }
  return value;
}"
63830,"/** 
 * Update or add attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
public Object updateOrAddAttribute(Map<String,String> tenantId,String entityName,Object id,Map<String,Object> properties,String attribute,Object attributeValue,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(getClass(entityName));
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    Object object=null;
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      if (partner != null) {
        ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      transaction.beginTransaction(em);
      try {
        object=em.find(getClass(entityName),id,properties);
        if (object == null) {
          return null;
        }
        attributeValue=em.merge(attributeValue);
        setMappingValueInObject(object,attributeValue,mapping,partnerMapping);
        transaction.commitTransaction(em);
      }
 catch (      RollbackException e) {
        JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),entityName,getName(),e.toString()});
        return null;
      }
catch (      Exception e) {
        JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),entityName,getName(),e.toString()});
        transaction.rollbackTransaction(em);
        return null;
      }
    }
 else {
      return null;
    }
    return object;
  }
  finally {
    em.close();
  }
}","/** 
 * Update or add attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
public Object updateOrAddAttribute(Map<String,String> tenantId,String entityName,Object id,Map<String,Object> properties,String attribute,Object attributeValue,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(getClass(entityName));
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    Object object=null;
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      if (partner != null) {
        ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      transaction.beginTransaction(em);
      try {
        object=em.find(getClass(entityName),id,properties);
        if (object == null) {
          return null;
        }
        attributeValue=em.merge(attributeValue);
        setMappingValueInObject(object,attributeValue,mapping,partnerMapping);
        transaction.commitTransaction(em);
      }
 catch (      RollbackException e) {
        JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),entityName,getName(),e.toString()});
        return null;
      }
catch (      Exception e) {
        JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),entityName,getName(),e.toString()});
        transaction.rollbackTransaction(em);
        return null;
      }
    }
 else {
      return null;
    }
    return object;
  }
  finally {
    em.close();
  }
}"
63831,"/** 
 * Instantiates a new persistence context.
 * @param emfName the emf name
 * @param emf the emf
 * @param defaultURI the default uri
 */
public PersistenceContext(String emfName,EntityManagerFactoryImpl emf,URI defaultURI){
  super();
  this.emf=emf;
  this.name=emfName;
  if (getServerSession().hasExternalTransactionController()) {
    transaction=new JTATransactionWrapper();
  }
 else {
    transaction=new ResourceLocalTransactionWrapper();
  }
  try {
    this.jaxbContext=createDynamicJAXBContext(emf.getDatabaseSession());
  }
 catch (  JAXBException jaxbe) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,jaxbe.toString()},jaxbe);
    emf.close();
  }
catch (  IOException e) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,e.toString()},e);
    emf.close();
  }
  setBaseURI(defaultURI);
}","/** 
 * Instantiates a new persistence context.
 * @param emfName the emf name
 * @param emf the emf
 * @param defaultURI the default uri
 */
public PersistenceContext(String emfName,EntityManagerFactoryImpl emf,URI defaultURI){
  super();
  this.emf=emf;
  this.name=emfName;
  if (getServerSession().hasExternalTransactionController()) {
    transaction=new JTATransactionWrapper();
  }
 else {
    transaction=new ResourceLocalTransactionWrapper();
  }
  try {
    this.jaxbContext=createDynamicJAXBContext(emf.getDatabaseSession());
  }
 catch (  JAXBException jaxbe) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),emfName,jaxbe.toString()},jaxbe);
    emf.close();
  }
catch (  IOException e) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),emfName,e.toString()},e);
    emf.close();
  }
  setBaseURI(defaultURI);
}"
63832,"/** 
 * Removes the attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object removeAttribute(Map<String,String> tenantId,String entityName,Object id,String attribute,String listItemId,Object entity,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  String fieldName=null;
  try {
    Class<?> clazz=getClass(entityName);
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(clazz);
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      Object originalAttributeValue=null;
      ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
      if (partner != null) {
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      Field[] fields=null;
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        fields=AccessController.doPrivileged(new PrivilegedGetDeclaredFields(clazz));
      }
 else {
        fields=PrivilegedAccessHelper.getDeclaredFields(clazz);
      }
      for (int i=0; i < fields.length; i++) {
        Field field=fields[i];
        fieldName=field.getName();
        if (fieldName.equals(attribute)) {
          try {
            Object attributeValue=getAttribute(entity,attribute);
            originalAttributeValue=attributeValue;
            if (attributeValue instanceof Collection) {
              if (listItemId == null) {
                ((Collection)attributeValue).clear();
              }
 else {
                Object realListItemId=IdHelper.buildId(this,referenceDescriptor.getAlias(),listItemId);
                Object member=this.find(referenceDescriptor.getAlias(),realListItemId);
                ((Collection)attributeValue).remove(member);
              }
            }
 else             if (attributeValue instanceof Object) {
              attributeValue=null;
            }
 else {
              attributeValue=0;
            }
            break;
          }
 catch (          Exception e) {
            e.printStackTrace();
            return null;
          }
        }
      }
      transaction.beginTransaction(em);
      entity=em.merge(entity);
      removeMappingValueFromObject(entity,originalAttributeValue,mapping,partnerMapping);
      transaction.commitTransaction(em);
      return entity;
    }
    return null;
  }
 catch (  Exception e) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),fieldName,entityName,getName(),e.toString()});
    transaction.rollbackTransaction(em);
    return null;
  }
 finally {
    em.close();
  }
}","/** 
 * Removes the attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object removeAttribute(Map<String,String> tenantId,String entityName,Object id,String attribute,String listItemId,Object entity,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  String fieldName=null;
  try {
    Class<?> clazz=getClass(entityName);
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(clazz);
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      Object originalAttributeValue=null;
      ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
      if (partner != null) {
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      Field[] fields=null;
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        fields=AccessController.doPrivileged(new PrivilegedGetDeclaredFields(clazz));
      }
 else {
        fields=PrivilegedAccessHelper.getDeclaredFields(clazz);
      }
      for (int i=0; i < fields.length; i++) {
        Field field=fields[i];
        fieldName=field.getName();
        if (fieldName.equals(attribute)) {
          try {
            Object attributeValue=getAttribute(entity,attribute);
            originalAttributeValue=attributeValue;
            if (attributeValue instanceof Collection) {
              if (listItemId == null) {
                ((Collection)attributeValue).clear();
              }
 else {
                Object realListItemId=IdHelper.buildId(this,referenceDescriptor.getAlias(),listItemId);
                Object member=this.find(referenceDescriptor.getAlias(),realListItemId);
                ((Collection)attributeValue).remove(member);
              }
            }
 else             if (attributeValue instanceof Object) {
              attributeValue=null;
            }
 else {
              attributeValue=0;
            }
            break;
          }
 catch (          Exception e) {
            e.printStackTrace();
            return null;
          }
        }
      }
      transaction.beginTransaction(em);
      entity=em.merge(entity);
      removeMappingValueFromObject(entity,originalAttributeValue,mapping,partnerMapping);
      transaction.commitTransaction(em);
      return entity;
    }
    return null;
  }
 catch (  Exception e) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),fieldName,entityName,getName(),e.toString()});
    transaction.rollbackTransaction(em);
    return null;
  }
 finally {
    em.close();
  }
}"
63833,"/** 
 * A convenience method to create a new dynamic entity of the given type
 * @param tenantId
 * @param type
 * @return
 */
public DynamicEntity newEntity(Map<String,String> tenantId,String type){
  JPADynamicHelper helper=new JPADynamicHelper(getEmf());
  DynamicEntity entity=null;
  try {
    entity=helper.newDynamicEntity(type);
  }
 catch (  IllegalArgumentException e) {
    ClassDescriptor descriptor=getDescriptor(type);
    if (descriptor != null) {
      DynamicType jaxbType=(DynamicType)descriptor.getProperty(DynamicType.DESCRIPTOR_PROPERTY);
      if (jaxbType != null) {
        return jaxbType.newDynamicEntity();
      }
    }
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),type,e.toString()});
    throw e;
  }
  return entity;
}","/** 
 * A convenience method to create a new dynamic entity of the given type
 * @param tenantId
 * @param type
 * @return
 */
public DynamicEntity newEntity(Map<String,String> tenantId,String type){
  JPADynamicHelper helper=new JPADynamicHelper(getEmf());
  DynamicEntity entity=null;
  try {
    entity=helper.newDynamicEntity(type);
  }
 catch (  IllegalArgumentException e) {
    ClassDescriptor descriptor=getDescriptor(type);
    if (descriptor != null) {
      DynamicType jaxbType=(DynamicType)descriptor.getProperty(DynamicType.DESCRIPTOR_PROPERTY);
      if (jaxbType != null) {
        return jaxbType.newDynamicEntity();
      }
    }
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),type,e.toString()});
    throw e;
  }
  return entity;
}"
63834,"/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if ((entity != null) && (PersistenceWeavedRest.class.isAssignableFrom(entity.getClass()))) {
    if (!doesExist(null,entity)) {
      return entity;
    }
    ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
    if (entity instanceof FetchGroupTracker) {
      FetchGroup fetchGroup=new FetchGroup();
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (!(mapping instanceof XMLInverseReferenceMapping)) {
          fetchGroup.addAttribute(mapping.getAttributeName());
        }
      }
      (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
      ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
    }
 else     if (descriptor.hasRelationships()) {
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (mapping instanceof XMLInverseReferenceMapping) {
          JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
          throw JPARSException.invalidConfiguration(Status.INTERNAL_SERVER_ERROR.getStatusCode());
        }
      }
    }
  }
  return entity;
}","/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if ((entity != null) && (PersistenceWeavedRest.class.isAssignableFrom(entity.getClass()))) {
    if (!doesExist(null,entity)) {
      return entity;
    }
    ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
    if (entity instanceof FetchGroupTracker) {
      FetchGroup fetchGroup=new FetchGroup();
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (!(mapping instanceof XMLInverseReferenceMapping)) {
          fetchGroup.addAttribute(mapping.getAttributeName());
        }
      }
      (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
      ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
    }
 else     if (descriptor.hasRelationships()) {
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (mapping instanceof XMLInverseReferenceMapping) {
          JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID)});
          throw JPARSException.invalidConfiguration(Status.INTERNAL_SERVER_ERROR.getStatusCode());
        }
      }
    }
  }
  return entity;
}"
63835,"public PersistenceContext get(String persistenceUnitName,URI defaultURI,String version,Map<String,Object> initializationProperties){
  PersistenceContext persistenceContext=getDynamicPersistenceContext(persistenceUnitName,version);
  if (persistenceContext == null) {
    try {
      DynamicClassLoader dcl=new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
      Map<String,Object> properties=new HashMap<String,Object>();
      properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
      if (initializationProperties != null) {
        properties.putAll(initializationProperties);
      }
      EntityManagerFactoryImpl factory=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(persistenceUnitName,properties);
      ClassLoader sessionLoader=factory.getServerSession().getLoader();
      if (!DynamicClassLoader.class.isAssignableFrom(sessionLoader.getClass())) {
        properties=new HashMap<String,Object>();
        dcl=new DynamicClassLoader(sessionLoader);
        properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
        if (initializationProperties != null) {
          properties.putAll(initializationProperties);
        }
        factory.refreshMetadata(properties);
      }
      if (factory != null) {
        persistenceContext=bootstrapPersistenceContext(persistenceUnitName,factory,defaultURI,version,true);
        Set<PersistenceContext> persistenceContextSet=getDynamicPersistenceContextSet(persistenceUnitName);
        if (persistenceContext != null) {
          if (persistenceContextSet == null) {
            persistenceContextSet=new HashSet<PersistenceContext>();
          }
          persistenceContextSet.add(persistenceContext);
synchronized (this) {
            dynamicPersistenceContexts.put(persistenceUnitName,persistenceContextSet);
          }
        }
      }
    }
 catch (    Exception e) {
      JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),persistenceUnitName,e.toString()},e);
    }
  }
  if ((persistenceContext != null) && (!persistenceContext.isWeavingEnabled())) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
    throw JPARSException.invalidConfiguration(Status.INTERNAL_SERVER_ERROR.getStatusCode());
  }
  return persistenceContext;
}","public PersistenceContext get(String persistenceUnitName,URI defaultURI,String version,Map<String,Object> initializationProperties){
  PersistenceContext persistenceContext=getDynamicPersistenceContext(persistenceUnitName,version);
  if (persistenceContext == null) {
    try {
      DynamicClassLoader dcl=new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
      Map<String,Object> properties=new HashMap<String,Object>();
      properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
      if (initializationProperties != null) {
        properties.putAll(initializationProperties);
      }
      EntityManagerFactoryImpl factory=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(persistenceUnitName,properties);
      ClassLoader sessionLoader=factory.getServerSession().getLoader();
      if (!DynamicClassLoader.class.isAssignableFrom(sessionLoader.getClass())) {
        properties=new HashMap<String,Object>();
        dcl=new DynamicClassLoader(sessionLoader);
        properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
        if (initializationProperties != null) {
          properties.putAll(initializationProperties);
        }
        factory.refreshMetadata(properties);
      }
      if (factory != null) {
        persistenceContext=bootstrapPersistenceContext(persistenceUnitName,factory,defaultURI,version,true);
        Set<PersistenceContext> persistenceContextSet=getDynamicPersistenceContextSet(persistenceUnitName);
        if (persistenceContext != null) {
          if (persistenceContextSet == null) {
            persistenceContextSet=new HashSet<PersistenceContext>();
          }
          persistenceContextSet.add(persistenceContext);
synchronized (this) {
            dynamicPersistenceContexts.put(persistenceUnitName,persistenceContextSet);
          }
        }
      }
    }
 catch (    Exception e) {
      JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),persistenceUnitName,e.toString()},e);
    }
  }
  if ((persistenceContext != null) && (!persistenceContext.isWeavingEnabled())) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID)});
    throw JPARSException.invalidConfiguration(Status.INTERNAL_SERVER_ERROR.getStatusCode());
  }
  return persistenceContext;
}"
63836,"protected Response buildResponse(JPARSException exception){
  String path=null;
  exception.setHttpStatusCode(getHttpStatusCode(exception.getCause()));
  if (uriInfo != null) {
    URI requestURI=uriInfo.getRequestUri();
    if (requestURI != null) {
      path=requestURI.getPath();
    }
  }
  if ((path != null) && (path.contains(AbstractResource.SERVICE_VERSION_2_0))) {
    ErrorResponse errorResponse=new ErrorResponse(PROBLEM_TYPE,exception.getMessage(),String.valueOf(exception.getErrorCode()));
    errorResponse.setRequestUniqueId((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID));
    errorResponse.setHttpStatus(exception.getHttpStatusCode());
    return Response.status(exception.getHttpStatusCode()).entity(errorResponse).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
  }
  return Response.status(exception.getHttpStatusCode()).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
}","protected Response buildResponse(JPARSException exception){
  String path=null;
  exception.setHttpStatusCode(getHttpStatusCode(exception.getCause()));
  if (uriInfo != null) {
    URI requestURI=uriInfo.getRequestUri();
    if (requestURI != null) {
      path=requestURI.getPath();
    }
  }
  if ((path != null) && (path.contains(AbstractResource.SERVICE_VERSION_2_0))) {
    ErrorResponse errorResponse=new ErrorResponse(PROBLEM_TYPE,exception.getMessage(),String.valueOf(exception.getErrorCode()));
    errorResponse.setRequestId((String)DataStorage.get(DataStorage.REQUEST_ID));
    errorResponse.setHttpStatus(exception.getHttpStatusCode());
    return Response.status(exception.getHttpStatusCode()).entity(errorResponse).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
  }
  return Response.status(exception.getHttpStatusCode()).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
}"
63837,"public Response toResponse(JPARSException exception){
  if (exception.getCause() != null) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)},(Exception)exception.getCause());
  }
 else {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)},exception);
  }
  return buildResponse(exception);
}","public Response toResponse(JPARSException exception){
  if (exception.getCause() != null) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID)},(Exception)exception.getCause());
  }
 else {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID)},exception);
  }
  return buildResponse(exception);
}"
63838,"@Override public boolean isRequestValid(UriInfo uri,Map<String,Object> additionalParams){
  Query query=null;
  ReadQuery dbQuery=null;
  if ((additionalParams != null) && (!additionalParams.isEmpty())) {
    dbQuery=(ReadQuery)additionalParams.get(DB_QUERY);
    query=(Query)additionalParams.get(QUERY);
    if ((dbQuery != null) && (query != null) && ((dbQuery instanceof ObjectLevelReadQuery) || (dbQuery instanceof ReadAllQuery))) {
      List<Expression> orderBy=null;
      if (dbQuery instanceof ReadAllQuery) {
        orderBy=((ReadAllQuery)dbQuery).getOrderByExpressions();
      }
 else       if (dbQuery instanceof ObjectLevelReadQuery) {
        orderBy=((ObjectLevelReadQuery)dbQuery).getOrderByExpressions();
      }
      if ((orderBy == null) || (orderBy.isEmpty())) {
        JPARSLogger.warning(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),query.toString()});
      }
    }
  }
  Map<String,Object> queryParameters=getQueryParameters(uri);
  String paramLimit=(String)queryParameters.get(QueryParameters.JPARS_PAGING_LIMIT);
  String paramOffset=(String)queryParameters.get(QueryParameters.JPARS_PAGING_OFFSET);
  if ((paramLimit == null) && (paramOffset == null)) {
    return false;
  }
  if (paramOffset != null) {
    offset=paramOffset;
  }
 else {
    offset=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_OFFSET);
  }
  if (paramLimit != null) {
    limit=paramLimit;
  }
 else {
    limit=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_LIMIT);
  }
  try {
    if ((offset != null) && (limit != null)) {
      int intOffset=Integer.parseInt(offset);
      int intLimit=Integer.parseInt(limit);
      if ((intOffset >= 0) && (intLimit > 0)) {
        if (query != null) {
          setOfsetAndLimit(query,intOffset,intLimit);
          return true;
        }
        if (dbQuery != null) {
          setOfsetAndLimit(dbQuery,intOffset,intLimit);
          return true;
        }
      }
      return false;
    }
  }
 catch (  NumberFormatException ex) {
  }
  return false;
}","@Override public boolean isRequestValid(UriInfo uri,Map<String,Object> additionalParams){
  Query query=null;
  ReadQuery dbQuery=null;
  if ((additionalParams != null) && (!additionalParams.isEmpty())) {
    dbQuery=(ReadQuery)additionalParams.get(DB_QUERY);
    query=(Query)additionalParams.get(QUERY);
    if ((dbQuery != null) && (query != null) && ((dbQuery instanceof ObjectLevelReadQuery) || (dbQuery instanceof ReadAllQuery))) {
      List<Expression> orderBy=null;
      if (dbQuery instanceof ReadAllQuery) {
        orderBy=((ReadAllQuery)dbQuery).getOrderByExpressions();
      }
 else       if (dbQuery instanceof ObjectLevelReadQuery) {
        orderBy=((ObjectLevelReadQuery)dbQuery).getOrderByExpressions();
      }
      if ((orderBy == null) || (orderBy.isEmpty())) {
        JPARSLogger.warning(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_ID),query.toString()});
      }
    }
  }
  Map<String,Object> queryParameters=getQueryParameters(uri);
  String paramLimit=(String)queryParameters.get(QueryParameters.JPARS_PAGING_LIMIT);
  String paramOffset=(String)queryParameters.get(QueryParameters.JPARS_PAGING_OFFSET);
  if ((paramLimit == null) && (paramOffset == null)) {
    return false;
  }
  if (paramOffset != null) {
    offset=paramOffset;
  }
 else {
    offset=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_OFFSET);
  }
  if (paramLimit != null) {
    limit=paramLimit;
  }
 else {
    limit=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_LIMIT);
  }
  try {
    if ((offset != null) && (limit != null)) {
      int intOffset=Integer.parseInt(offset);
      int intLimit=Integer.parseInt(limit);
      if ((intOffset >= 0) && (intLimit > 0)) {
        if (query != null) {
          setOfsetAndLimit(query,intOffset,intLimit);
          return true;
        }
        if (dbQuery != null) {
          setOfsetAndLimit(dbQuery,intOffset,intLimit);
          return true;
        }
      }
      return false;
    }
  }
 catch (  NumberFormatException ex) {
  }
  return false;
}"
63839,"/** 
 * Update or add attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
public Object updateOrAddAttribute(Map<String,String> tenantId,String entityName,Object id,Map<String,Object> properties,String attribute,Object attributeValue,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(getClass(entityName));
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    Object object=null;
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      if (partner != null) {
        ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      transaction.beginTransaction(em);
      try {
        object=em.find(getClass(entityName),id,properties);
        if (object == null) {
          return null;
        }
        attributeValue=em.merge(attributeValue);
        setMappingValueInObject(object,attributeValue,mapping,partnerMapping);
        transaction.commitTransaction(em);
      }
 catch (      Exception e) {
        JPARSLogger.fine(""String_Node_Str"",new Object[]{entityName,getName(),e.toString()});
        transaction.rollbackTransaction(em);
        return null;
      }
    }
 else {
      return null;
    }
    return object;
  }
  finally {
    em.close();
  }
}","/** 
 * Update or add attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
public Object updateOrAddAttribute(Map<String,String> tenantId,String entityName,Object id,Map<String,Object> properties,String attribute,Object attributeValue,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(getClass(entityName));
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    Object object=null;
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      if (partner != null) {
        ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      transaction.beginTransaction(em);
      try {
        object=em.find(getClass(entityName),id,properties);
        if (object == null) {
          return null;
        }
        attributeValue=em.merge(attributeValue);
        setMappingValueInObject(object,attributeValue,mapping,partnerMapping);
        transaction.commitTransaction(em);
      }
 catch (      RollbackException e) {
        JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),entityName,getName(),e.toString()});
        return null;
      }
catch (      Exception e) {
        JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),entityName,getName(),e.toString()});
        transaction.rollbackTransaction(em);
        return null;
      }
    }
 else {
      return null;
    }
    return object;
  }
  finally {
    em.close();
  }
}"
63840,"/** 
 * A part of the facade over the JPA API Call jpa merge on the given object and commit If the passed object is a list, we will iterate through the list and merge each member
 * @param tenantId
 * @param entity
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object merge(Map<String,String> tenantId,Object entity){
  EntityManager em=getEmf().createEntityManager(tenantId);
  Object mergedEntity=null;
  try {
    transaction.beginTransaction(em);
    if (entity instanceof List) {
      List<Object> mergeList=new ArrayList<Object>();
      for (      Object o : (List)entity) {
        mergeList.add(em.merge(o));
      }
      mergedEntity=mergeList;
    }
 else {
      mergedEntity=em.merge(entity);
    }
    transaction.commitTransaction(em);
    return mergedEntity;
  }
  finally {
    em.close();
  }
}","/** 
 * A part of the facade over the JPA API Call jpa merge on the given object and commit If the passed object is a list, we will iterate through the list and merge each member
 * @param tenantId
 * @param entity
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object merge(Map<String,String> tenantId,Object entity){
  EntityManager em=getEmf().createEntityManager(tenantId);
  Object mergedEntity=null;
  try {
    transaction.beginTransaction(em);
    if (entity instanceof List) {
      List<Object> mergeList=new ArrayList<Object>();
      for (      Object o : (List)entity) {
        mergeList.add(em.merge(o));
      }
      mergedEntity=mergeList;
    }
 else {
      mergedEntity=em.merge(entity);
    }
    transaction.commitTransaction(em);
    return mergedEntity;
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
 finally {
    em.close();
  }
}"
63841,"/** 
 * A part of the facade over the JPA API Persist an entity in JPA and commit
 * @param tenantId
 * @param entity
 */
public void create(Map<String,String> tenantId,Object entity){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    transaction.beginTransaction(em);
    em.persist(entity);
    transaction.commitTransaction(em);
  }
  finally {
    em.close();
  }
}","/** 
 * A part of the facade over the JPA API Persist an entity in JPA and commit
 * @param tenantId
 * @param entity
 * @throws Exception 
 */
public void create(Map<String,String> tenantId,Object entity) throws Exception {
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    transaction.beginTransaction(em);
    em.persist(entity);
    transaction.commitTransaction(em);
  }
 catch (  RollbackException ex) {
    throw ex;
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw ex;
  }
 finally {
    em.close();
  }
}"
63842,"/** 
 * Marshall an entity to either JSON or XML
 * @param object
 * @param mediaType
 * @param output
 * @param sendRelationships if this is set to true, relationships will be sent as links instead of sending the actual objects in the relationships
 * @throws JAXBException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void marshallEntity(Object object,MediaType mediaType,OutputStream output,boolean sendRelationships) throws JAXBException {
  if (sendRelationships) {
    preMarshallEntity(object);
  }
  Marshaller marshaller=getJAXBContext().createMarshaller();
  marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  marshaller.setProperty(MarshallerProperties.JSON_REDUCE_ANY_ARRAYS,true);
  marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,true);
  marshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  marshaller.setAdapter(new RelationshipLinkAdapter(getBaseURI().toString(),this));
  for (  XmlAdapter adapter : getAdapters()) {
    marshaller.setAdapter(adapter);
  }
  if (mediaType == MediaType.APPLICATION_XML_TYPE && object instanceof List) {
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,true);
    XMLOutputFactory outputFactory=XMLOutputFactory.newFactory();
    XMLStreamWriter writer=null;
    try {
      writer=outputFactory.createXMLStreamWriter(output);
      writer.writeStartDocument();
      writer.writeStartElement(ReservedWords.JPARS_LIST_GROUPING_NAME);
      for (      Object o : (List<Object>)object) {
        marshaller.marshal(o,writer);
      }
      writer.writeEndDocument();
      writer.flush();
      postMarshallEntity(object);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new JPARSException(e.toString());
    }
  }
 else {
    marshaller.marshal(object,output);
    postMarshallEntity(object);
  }
}","/** 
 * Marshall an entity to either JSON or XML
 * @param object
 * @param mediaType
 * @param output
 * @param sendRelationships if this is set to true, relationships will be sent as links instead of sending the actual objects in the relationships
 * @throws JAXBException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void marshallEntity(Object object,MediaType mediaType,OutputStream output,boolean sendRelationships) throws JAXBException {
  if (sendRelationships) {
    preMarshallEntity(object);
  }
  Marshaller marshaller=getJAXBContext().createMarshaller();
  marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  marshaller.setProperty(MarshallerProperties.JSON_REDUCE_ANY_ARRAYS,true);
  marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,true);
  marshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  marshaller.setAdapter(new RelationshipLinkAdapter(getBaseURI().toString(),this));
  for (  XmlAdapter adapter : getAdapters()) {
    marshaller.setAdapter(adapter);
  }
  if (mediaType == MediaType.APPLICATION_XML_TYPE && object instanceof List) {
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,true);
    XMLOutputFactory outputFactory=XMLOutputFactory.newFactory();
    XMLStreamWriter writer=null;
    try {
      writer=outputFactory.createXMLStreamWriter(output);
      writer.writeStartDocument();
      writer.writeStartElement(ReservedWords.JPARS_LIST_GROUPING_NAME);
      for (      Object o : (List<Object>)object) {
        marshaller.marshal(o,writer);
      }
      writer.writeEndDocument();
      writer.flush();
      postMarshallEntity(object);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(e),e);
    }
  }
 else {
    marshaller.marshal(object,output);
    postMarshallEntity(object);
  }
}"
63843,"/** 
 * Instantiates a new persistence context.
 * @param emfName the emf name
 * @param emf the emf
 * @param defaultURI the default uri
 */
public PersistenceContext(String emfName,EntityManagerFactoryImpl emf,URI defaultURI){
  super();
  this.emf=emf;
  this.name=emfName;
  if (getServerSession().hasExternalTransactionController()) {
    transaction=new JTATransactionWrapper();
  }
 else {
    transaction=new ResourceLocalTransactionWrapper();
  }
  try {
    this.jaxbContext=createDynamicJAXBContext(emf.getDatabaseSession());
  }
 catch (  JAXBException jaxbe) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{emfName,jaxbe.toString()},jaxbe);
    emf.close();
  }
catch (  IOException e) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{emfName,e.toString()},e);
    emf.close();
  }
  setBaseURI(defaultURI);
}","/** 
 * Instantiates a new persistence context.
 * @param emfName the emf name
 * @param emf the emf
 * @param defaultURI the default uri
 */
public PersistenceContext(String emfName,EntityManagerFactoryImpl emf,URI defaultURI){
  super();
  this.emf=emf;
  this.name=emfName;
  if (getServerSession().hasExternalTransactionController()) {
    transaction=new JTATransactionWrapper();
  }
 else {
    transaction=new ResourceLocalTransactionWrapper();
  }
  try {
    this.jaxbContext=createDynamicJAXBContext(emf.getDatabaseSession());
  }
 catch (  JAXBException jaxbe) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,jaxbe.toString()},jaxbe);
    emf.close();
  }
catch (  IOException e) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,e.toString()},e);
    emf.close();
  }
  setBaseURI(defaultURI);
}"
63844,"/** 
 * A part of the facade over the JPA API Delete the given entity in JPA and commit the changes
 */
public void delete(Map<String,String> tenantId,String type,Object id){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    transaction.beginTransaction(em);
    Object entity=em.find(getClass(type),id);
    if (entity != null) {
      em.remove(entity);
    }
    transaction.commitTransaction(em);
  }
  finally {
    em.close();
  }
}","/** 
 * A part of the facade over the JPA API Delete the given entity in JPA and commit the changes
 */
public void delete(Map<String,String> tenantId,String type,Object id){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    transaction.beginTransaction(em);
    Object entity=em.find(getClass(type),id);
    if (entity != null) {
      em.remove(entity);
    }
    transaction.commitTransaction(em);
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
 finally {
    em.close();
  }
}"
63845,"/** 
 * Removes the attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object removeAttribute(Map<String,String> tenantId,String entityName,Object id,String attribute,String listItemId,Object entity,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  String fieldName=null;
  try {
    Class<?> clazz=getClass(entityName);
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(clazz);
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      Object originalAttributeValue=null;
      ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
      if (partner != null) {
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      Field[] fields=null;
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        fields=AccessController.doPrivileged(new PrivilegedGetDeclaredFields(clazz));
      }
 else {
        fields=PrivilegedAccessHelper.getDeclaredFields(clazz);
      }
      for (int i=0; i < fields.length; i++) {
        Field field=fields[i];
        fieldName=field.getName();
        if (fieldName.equals(attribute)) {
          try {
            Object attributeValue=getAttribute(entity,attribute);
            originalAttributeValue=attributeValue;
            if (attributeValue instanceof Collection) {
              if (listItemId == null) {
                ((Collection)attributeValue).clear();
              }
 else {
                Object realListItemId=IdHelper.buildId(this,referenceDescriptor.getAlias(),listItemId);
                Object member=this.find(referenceDescriptor.getAlias(),realListItemId);
                ((Collection)attributeValue).remove(member);
              }
            }
 else             if (attributeValue instanceof Object) {
              attributeValue=null;
            }
 else {
              attributeValue=0;
            }
            break;
          }
 catch (          Exception e) {
            e.printStackTrace();
            return null;
          }
        }
      }
      transaction.beginTransaction(em);
      entity=em.merge(entity);
      removeMappingValueFromObject(entity,originalAttributeValue,mapping,partnerMapping);
      transaction.commitTransaction(em);
      return entity;
    }
    return null;
  }
 catch (  Exception e) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{fieldName,entityName,getName(),e.toString()});
    transaction.rollbackTransaction(em);
    return null;
  }
 finally {
    em.close();
  }
}","/** 
 * Removes the attribute.
 * @param tenantId the tenant id
 * @param entityName the entity name
 * @param id the id
 * @param properties the properties
 * @param attribute the attribute
 * @param attributeValue the attribute value
 * @param partner the partner
 * @return the object
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Object removeAttribute(Map<String,String> tenantId,String entityName,Object id,String attribute,String listItemId,Object entity,String partner){
  EntityManager em=getEmf().createEntityManager(tenantId);
  String fieldName=null;
  try {
    Class<?> clazz=getClass(entityName);
    ClassDescriptor descriptor=getServerSession().getClassDescriptor(clazz);
    DatabaseMapping mapping=descriptor.getMappingForAttributeName(attribute);
    if (mapping == null) {
      return null;
    }
 else     if (mapping.isObjectReferenceMapping() || mapping.isCollectionMapping()) {
      DatabaseMapping partnerMapping=null;
      Object originalAttributeValue=null;
      ClassDescriptor referenceDescriptor=((ForeignReferenceMapping)mapping).getReferenceDescriptor();
      if (partner != null) {
        partnerMapping=referenceDescriptor.getMappingForAttributeName(partner);
        if (partnerMapping == null) {
          return null;
        }
      }
      Field[] fields=null;
      if (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) {
        fields=AccessController.doPrivileged(new PrivilegedGetDeclaredFields(clazz));
      }
 else {
        fields=PrivilegedAccessHelper.getDeclaredFields(clazz);
      }
      for (int i=0; i < fields.length; i++) {
        Field field=fields[i];
        fieldName=field.getName();
        if (fieldName.equals(attribute)) {
          try {
            Object attributeValue=getAttribute(entity,attribute);
            originalAttributeValue=attributeValue;
            if (attributeValue instanceof Collection) {
              if (listItemId == null) {
                ((Collection)attributeValue).clear();
              }
 else {
                Object realListItemId=IdHelper.buildId(this,referenceDescriptor.getAlias(),listItemId);
                Object member=this.find(referenceDescriptor.getAlias(),realListItemId);
                ((Collection)attributeValue).remove(member);
              }
            }
 else             if (attributeValue instanceof Object) {
              attributeValue=null;
            }
 else {
              attributeValue=0;
            }
            break;
          }
 catch (          Exception e) {
            e.printStackTrace();
            return null;
          }
        }
      }
      transaction.beginTransaction(em);
      entity=em.merge(entity);
      removeMappingValueFromObject(entity,originalAttributeValue,mapping,partnerMapping);
      transaction.commitTransaction(em);
      return entity;
    }
    return null;
  }
 catch (  Exception e) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),fieldName,entityName,getName(),e.toString()});
    transaction.rollbackTransaction(em);
    return null;
  }
 finally {
    em.close();
  }
}"
63846,"/** 
 * Build the set of properties used to create the JAXBContext based on the EntityManagerFactory that this PersistenceContext wraps
 * @param persistenceUnitName
 * @param session
 * @return
 * @throws IOException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Map<String,Object> createJAXBProperties(AbstractSession session) throws IOException {
  Map<String,Object> properties=new HashMap<String,Object>(1);
  List<Object> metadataLocations=new ArrayList<Object>();
  addDynamicXMLMetadataSources(metadataLocations,session);
  String oxmLocation=(String)emf.getProperties().get(""String_Node_Str"");
  if (oxmLocation != null) {
    metadataLocations.add(oxmLocation);
  }
  Object passedOXMLocations=emf.getProperties().get(JAXBContextProperties.OXM_METADATA_SOURCE);
  if (passedOXMLocations != null) {
    if (passedOXMLocations instanceof Collection) {
      metadataLocations.addAll((Collection)passedOXMLocations);
    }
 else {
      metadataLocations.add(passedOXMLocations);
    }
  }
  metadataLocations.add(new LinkMetadataSource());
  metadataLocations.add(new ReportQueryResultListMetadataSource());
  metadataLocations.add(new ReportQueryResultListItemMetadataSource());
  metadataLocations.add(new SingleResultQueryListMetadataSource());
  metadataLocations.add(new SimpleHomogeneousListMetadataSource());
  metadataLocations.add(new ReportQueryResultCollectionMetadataSource());
  metadataLocations.add(new ReadAllQueryResultCollectionMetadataSource());
  metadataLocations.add(new JavaLangMetadataSource());
  metadataLocations.add(new JavaMathMetadataSource());
  metadataLocations.add(new JavaUtilMetadataSource());
  metadataLocations.add(new LinkV2MetadataSource());
  metadataLocations.add(new ItemLinksMetadataSource());
  properties.put(JAXBContextProperties.OXM_METADATA_SOURCE,metadataLocations);
  properties.put(JAXBContextProperties.SESSION_EVENT_LISTENER,new PreLoginMappingAdapter((AbstractSession)session));
  return properties;
}","/** 
 * Build the set of properties used to create the JAXBContext based on the EntityManagerFactory that this PersistenceContext wraps
 * @param persistenceUnitName
 * @param session
 * @return
 * @throws IOException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Map<String,Object> createJAXBProperties(AbstractSession session) throws IOException {
  Map<String,Object> properties=new HashMap<String,Object>(1);
  List<Object> metadataLocations=new ArrayList<Object>();
  addDynamicXMLMetadataSources(metadataLocations,session);
  String oxmLocation=(String)emf.getProperties().get(""String_Node_Str"");
  if (oxmLocation != null) {
    metadataLocations.add(oxmLocation);
  }
  Object passedOXMLocations=emf.getProperties().get(JAXBContextProperties.OXM_METADATA_SOURCE);
  if (passedOXMLocations != null) {
    if (passedOXMLocations instanceof Collection) {
      metadataLocations.addAll((Collection)passedOXMLocations);
    }
 else {
      metadataLocations.add(passedOXMLocations);
    }
  }
  metadataLocations.add(new LinkMetadataSource());
  metadataLocations.add(new ReportQueryResultListMetadataSource());
  metadataLocations.add(new ReportQueryResultListItemMetadataSource());
  metadataLocations.add(new SingleResultQueryListMetadataSource());
  metadataLocations.add(new SimpleHomogeneousListMetadataSource());
  metadataLocations.add(new ReportQueryResultCollectionMetadataSource());
  metadataLocations.add(new ReadAllQueryResultCollectionMetadataSource());
  metadataLocations.add(new JavaLangMetadataSource());
  metadataLocations.add(new JavaMathMetadataSource());
  metadataLocations.add(new JavaUtilMetadataSource());
  metadataLocations.add(new LinkV2MetadataSource());
  metadataLocations.add(new ItemLinksMetadataSource());
  metadataLocations.add(new ErrorResponseMetadataSource());
  properties.put(JAXBContextProperties.OXM_METADATA_SOURCE,metadataLocations);
  properties.put(JAXBContextProperties.SESSION_EVENT_LISTENER,new PreLoginMappingAdapter((AbstractSession)session));
  return properties;
}"
63847,"/** 
 * A convenience method to create a new dynamic entity of the given type
 * @param tenantId
 * @param type
 * @return
 */
public DynamicEntity newEntity(Map<String,String> tenantId,String type){
  JPADynamicHelper helper=new JPADynamicHelper(getEmf());
  DynamicEntity entity=null;
  try {
    entity=helper.newDynamicEntity(type);
  }
 catch (  IllegalArgumentException e) {
    ClassDescriptor descriptor=getDescriptor(type);
    if (descriptor != null) {
      DynamicType jaxbType=(DynamicType)descriptor.getProperty(DynamicType.DESCRIPTOR_PROPERTY);
      if (jaxbType != null) {
        return jaxbType.newDynamicEntity();
      }
    }
    JPARSLogger.fine(""String_Node_Str"",new Object[]{type,e.toString()});
    throw e;
  }
  return entity;
}","/** 
 * A convenience method to create a new dynamic entity of the given type
 * @param tenantId
 * @param type
 * @return
 */
public DynamicEntity newEntity(Map<String,String> tenantId,String type){
  JPADynamicHelper helper=new JPADynamicHelper(getEmf());
  DynamicEntity entity=null;
  try {
    entity=helper.newDynamicEntity(type);
  }
 catch (  IllegalArgumentException e) {
    ClassDescriptor descriptor=getDescriptor(type);
    if (descriptor != null) {
      DynamicType jaxbType=(DynamicType)descriptor.getProperty(DynamicType.DESCRIPTOR_PROPERTY);
      if (jaxbType != null) {
        return jaxbType.newDynamicEntity();
      }
    }
    JPARSLogger.fine(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),type,e.toString()});
    throw e;
  }
  return entity;
}"
63848,"/** 
 * Query execute update.
 * @param tenantId the tenant id
 * @param name the name
 * @param parameters the parameters
 * @param hints the hints
 * @return the int
 */
public int queryExecuteUpdate(Map<String,String> tenantId,String name,Map<?,?> parameters,Map<String,?> hints){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    Query query=constructQuery(em,name,parameters,hints);
    transaction.beginTransaction(em);
    int result=query.executeUpdate();
    transaction.commitTransaction(em);
    return result;
  }
  finally {
    em.close();
  }
}","/** 
 * Query execute update.
 * @param tenantId the tenant id
 * @param name the name
 * @param parameters the parameters
 * @param hints the hints
 * @return the int
 */
public int queryExecuteUpdate(Map<String,String> tenantId,String name,Map<?,?> parameters,Map<String,?> hints){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    Query query=constructQuery(em,name,parameters,hints);
    transaction.beginTransaction(em);
    int result=query.executeUpdate();
    transaction.commitTransaction(em);
    return result;
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
 finally {
    em.close();
  }
}"
63849,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected List<XmlAdapter> getAdapters() throws JPARSException {
  if (adapters != null) {
    return adapters;
  }
  adapters=new ArrayList<XmlAdapter>();
  try {
    for (    ClassDescriptor desc : this.getServerSession().getDescriptors().values()) {
      if (!desc.isAggregateCollectionDescriptor() && !desc.isAggregateDescriptor()) {
        Class clz=desc.getJavaClass();
        String referenceAdapterName=RestAdapterClassWriter.constructClassNameForReferenceAdapter(clz.getName());
        ClassLoader cl=getServerSession().getDatasourcePlatform().getConversionManager().getLoader();
        Class referenceAdaptorClass=Class.forName(referenceAdapterName,true,cl);
        Class[] argTypes={String.class,PersistenceContext.class};
        Constructor referenceAdaptorConstructor=referenceAdaptorClass.getDeclaredConstructor(argTypes);
        Object[] args=new Object[]{getBaseURI().toString(),this};
        adapters.add((XmlAdapter)referenceAdaptorConstructor.newInstance(args));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new JPARSException(ex.getMessage());
  }
  return adapters;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected List<XmlAdapter> getAdapters() throws JPARSException {
  if (adapters != null) {
    return adapters;
  }
  adapters=new ArrayList<XmlAdapter>();
  try {
    for (    ClassDescriptor desc : this.getServerSession().getDescriptors().values()) {
      if (!desc.isAggregateCollectionDescriptor() && !desc.isAggregateDescriptor()) {
        Class clz=desc.getJavaClass();
        String referenceAdapterName=RestAdapterClassWriter.constructClassNameForReferenceAdapter(clz.getName());
        ClassLoader cl=getServerSession().getDatasourcePlatform().getConversionManager().getLoader();
        Class referenceAdaptorClass=Class.forName(referenceAdapterName,true,cl);
        Class[] argTypes={String.class,PersistenceContext.class};
        Constructor referenceAdaptorConstructor=referenceAdaptorClass.getDeclaredConstructor(argTypes);
        Object[] args=new Object[]{getBaseURI().toString(),this};
        adapters.add((XmlAdapter)referenceAdaptorConstructor.newInstance(args));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
  return adapters;
}"
63850,"/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if ((entity != null) && (PersistenceWeavedRest.class.isAssignableFrom(entity.getClass()))) {
    if (!doesExist(null,entity)) {
      return entity;
    }
    ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
    if (entity instanceof FetchGroupTracker) {
      FetchGroup fetchGroup=new FetchGroup();
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (!(mapping instanceof XMLInverseReferenceMapping)) {
          fetchGroup.addAttribute(mapping.getAttributeName());
        }
      }
      (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
      ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
    }
 else     if (descriptor.hasRelationships()) {
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (mapping instanceof XMLInverseReferenceMapping) {
          throw new JPARSConfigurationException(LoggingLocalization.buildMessage(""String_Node_Str"",new Object[]{}));
        }
      }
    }
  }
  return entity;
}","/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if ((entity != null) && (PersistenceWeavedRest.class.isAssignableFrom(entity.getClass()))) {
    if (!doesExist(null,entity)) {
      return entity;
    }
    ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
    if (entity instanceof FetchGroupTracker) {
      FetchGroup fetchGroup=new FetchGroup();
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (!(mapping instanceof XMLInverseReferenceMapping)) {
          fetchGroup.addAttribute(mapping.getAttributeName());
        }
      }
      (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
      ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
    }
 else     if (descriptor.hasRelationships()) {
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (mapping instanceof XMLInverseReferenceMapping) {
          JPARSLogger.fine(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
          throw JPARSException.invalidConfiguration((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),Status.INTERNAL_SERVER_ERROR.getStatusCode());
        }
      }
    }
  }
  return entity;
}"
63851,"public PersistenceContext get(String persistenceUnitName,URI defaultURI,String version,Map<String,Object> initializationProperties){
  PersistenceContext persistenceContext=getDynamicPersistenceContext(persistenceUnitName,version);
  if (persistenceContext == null) {
    try {
      DynamicClassLoader dcl=new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
      Map<String,Object> properties=new HashMap<String,Object>();
      properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
      if (initializationProperties != null) {
        properties.putAll(initializationProperties);
      }
      EntityManagerFactoryImpl factory=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(persistenceUnitName,properties);
      ClassLoader sessionLoader=factory.getServerSession().getLoader();
      if (!DynamicClassLoader.class.isAssignableFrom(sessionLoader.getClass())) {
        properties=new HashMap<String,Object>();
        dcl=new DynamicClassLoader(sessionLoader);
        properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
        if (initializationProperties != null) {
          properties.putAll(initializationProperties);
        }
        factory.refreshMetadata(properties);
      }
      if (factory != null) {
        persistenceContext=bootstrapPersistenceContext(persistenceUnitName,factory,defaultURI,version,true);
        Set<PersistenceContext> persistenceContextSet=getDynamicPersistenceContextSet(persistenceUnitName);
        if (persistenceContext != null) {
          if (persistenceContextSet == null) {
            persistenceContextSet=new HashSet<PersistenceContext>();
          }
          persistenceContextSet.add(persistenceContext);
synchronized (this) {
            dynamicPersistenceContexts.put(persistenceUnitName,persistenceContextSet);
          }
        }
      }
    }
 catch (    Exception e) {
      JPARSLogger.exception(""String_Node_Str"",new Object[]{persistenceUnitName,e.toString()},e);
    }
  }
  if ((persistenceContext != null) && (!persistenceContext.isWeavingEnabled())) {
    throw new JPARSConfigurationException(LoggingLocalization.buildMessage(""String_Node_Str"",new Object[]{persistenceUnitName}));
  }
  return persistenceContext;
}","public PersistenceContext get(String persistenceUnitName,URI defaultURI,String version,Map<String,Object> initializationProperties){
  PersistenceContext persistenceContext=getDynamicPersistenceContext(persistenceUnitName,version);
  if (persistenceContext == null) {
    try {
      DynamicClassLoader dcl=new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
      Map<String,Object> properties=new HashMap<String,Object>();
      properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
      if (initializationProperties != null) {
        properties.putAll(initializationProperties);
      }
      EntityManagerFactoryImpl factory=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(persistenceUnitName,properties);
      ClassLoader sessionLoader=factory.getServerSession().getLoader();
      if (!DynamicClassLoader.class.isAssignableFrom(sessionLoader.getClass())) {
        properties=new HashMap<String,Object>();
        dcl=new DynamicClassLoader(sessionLoader);
        properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
        if (initializationProperties != null) {
          properties.putAll(initializationProperties);
        }
        factory.refreshMetadata(properties);
      }
      if (factory != null) {
        persistenceContext=bootstrapPersistenceContext(persistenceUnitName,factory,defaultURI,version,true);
        Set<PersistenceContext> persistenceContextSet=getDynamicPersistenceContextSet(persistenceUnitName);
        if (persistenceContext != null) {
          if (persistenceContextSet == null) {
            persistenceContextSet=new HashSet<PersistenceContext>();
          }
          persistenceContextSet.add(persistenceContext);
synchronized (this) {
            dynamicPersistenceContexts.put(persistenceUnitName,persistenceContextSet);
          }
        }
      }
    }
 catch (    Exception e) {
      JPARSLogger.exception(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),persistenceUnitName,e.toString()},e);
    }
  }
  if ((persistenceContext != null) && (!persistenceContext.isWeavingEnabled())) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
    throw JPARSException.invalidConfiguration((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),Status.INTERNAL_SERVER_ERROR.getStatusCode());
  }
  return persistenceContext;
}"
63852,"public XMLMarshalListener getMarshalListener(){
  return this.marshalListener;
}","public MARSHALLER_LISTENER getMarshalListener(){
  return this.marshalListener;
}"
63853,"/** 
 * Copy constructor
 */
protected Marshaller(Marshaller marshaller){
  this.charEscapeHandler=marshaller.getCharacterEscapeHandler();
  this.context=(CONTEXT)marshaller.getContext();
  this.encoding=marshaller.getEncoding();
  this.equalUsingIdenity=marshaller.isEqualUsingIdenity();
  this.errorHandler=marshaller.getErrorHandler();
  this.formattedOutput=marshaller.isFormattedOutput();
  this.indentString=marshaller.getIndentString();
  this.mapper=(NAMESPACE_PREFIX_MAPPER)marshaller.getNamespacePrefixMapper();
  this.marshalListener=marshaller.getMarshalListener();
  if (marshaller.marshalProperties != null) {
    marshalProperties=new Properties();
    for (    Entry entry : marshalProperties.entrySet()) {
      marshalProperties.put(entry.getKey(),entry.getValue());
    }
  }
}","/** 
 * Copy constructor
 */
protected Marshaller(Marshaller marshaller){
  this.charEscapeHandler=marshaller.getCharacterEscapeHandler();
  this.context=(CONTEXT)marshaller.getContext();
  this.encoding=marshaller.getEncoding();
  this.equalUsingIdenity=marshaller.isEqualUsingIdenity();
  this.errorHandler=marshaller.getErrorHandler();
  this.formattedOutput=marshaller.isFormattedOutput();
  this.indentString=marshaller.getIndentString();
  this.mapper=(NAMESPACE_PREFIX_MAPPER)marshaller.getNamespacePrefixMapper();
  this.marshalListener=(MARSHALLER_LISTENER)marshaller.getMarshalListener();
  if (marshaller.marshalProperties != null) {
    marshalProperties=new Properties();
    for (    Entry entry : marshalProperties.entrySet()) {
      marshalProperties.put(entry.getKey(),entry.getValue());
    }
  }
}"
63854,"public void setMarshalListener(XMLMarshalListener listener){
  this.marshalListener=listener;
}","public void setMarshalListener(MARSHALLER_LISTENER listener){
  this.marshalListener=listener;
}"
63855,public abstract XMLUnmarshalListener getUnmarshalListener();,"public UNMARSHALLER_LISTENER getUnmarshalListener(){
  return unmarshalListener;
}"
63856,"public Unmarshaller(CONTEXT context){
  this.context=context;
}","/** 
 * Copy constructor
 */
protected Unmarshaller(Unmarshaller unmarshaller){
  this.context=(CONTEXT)unmarshaller.getContext();
  this.unmarshalListener=(UNMARSHALLER_LISTENER)unmarshaller.getUnmarshalListener();
}"
63857,"protected XMLUnmarshaller(XMLUnmarshaller xmlUnmarshaller){
  this((CONTEXT)xmlUnmarshaller.getContext());
  setAttachmentUnmarshaller(xmlUnmarshaller.getAttachmentUnmarshaller());
  setEntityResolver(xmlUnmarshaller.getEntityResolver());
  setErrorHandler(xmlUnmarshaller.getErrorHandler());
  for (  Entry entry : xmlUnmarshaller.getProperties().entrySet()) {
    getProperties().put(entry.getKey(),entry.getValue());
  }
  setResultAlwaysXMLRoot(xmlUnmarshaller.platformUnmarshaller.isResultAlwaysXMLRoot());
  try {
    Schema schema=xmlUnmarshaller.getSchema();
    if (null != schema) {
      setSchema(schema);
    }
  }
 catch (  UnsupportedOperationException e) {
  }
  setUnmappedContentHandlerClass(xmlUnmarshaller.unmappedContentHandlerClass);
  setUnmarshalListener(xmlUnmarshaller.unmarshalListener);
}","protected XMLUnmarshaller(XMLUnmarshaller xmlUnmarshaller){
  super(xmlUnmarshaller);
  stringBuffer=new StrBuffer();
  initialize(null);
  setAttachmentUnmarshaller(xmlUnmarshaller.getAttachmentUnmarshaller());
  setEntityResolver(xmlUnmarshaller.getEntityResolver());
  setErrorHandler(xmlUnmarshaller.getErrorHandler());
  for (  Entry entry : xmlUnmarshaller.getProperties().entrySet()) {
    getProperties().put(entry.getKey(),entry.getValue());
  }
  setResultAlwaysXMLRoot(xmlUnmarshaller.platformUnmarshaller.isResultAlwaysXMLRoot());
  try {
    Schema schema=xmlUnmarshaller.getSchema();
    if (null != schema) {
      setSchema(schema);
    }
  }
 catch (  UnsupportedOperationException e) {
  }
  setUnmappedContentHandlerClass(xmlUnmarshaller.unmappedContentHandlerClass);
}"
63858,"public void endDocument() throws SAXException {
  if (unmarshaller.getIDResolver() != null && parentRecord == null) {
    unmarshaller.getIDResolver().endDocument();
  }
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,selfRecords.get(x),attributes);
      }
    }
  }
  CoreDescriptor xmlDescriptor=(CoreDescriptor)treeObjectBuilder.getDescriptor();
  try {
    if (null != populatedContainerValues) {
      for (int populatedCVSize=populatedContainerValues.size(), i=populatedCVSize - 1; i >= 0; i--) {
        ContainerValue cv=((ContainerValue)populatedContainerValues.get(i));
        cv.setContainerInstance(currentObject,getContainerInstance(cv,cv.isDefaultEmptyContainer()));
      }
    }
    if (null != defaultEmptyContainerValues) {
      for (int defaultEmptyCVSize=defaultEmptyContainerValues.size(), i=defaultEmptyCVSize - 1; i >= 0; i--) {
        ContainerValue cv=((ContainerValue)defaultEmptyContainerValues.get(i));
        cv.setContainerInstance(currentObject,getContainerInstance(cv,cv.isDefaultEmptyContainer()));
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession((AbstractSession)session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,null,query,(AbstractSession)session,true);
      }
    }
    XMLUnmarshalListener listener=unmarshaller.getUnmarshalListener();
    if (listener != null) {
      if (this.parentRecord != null) {
        listener.afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        listener.afterUnmarshal(currentObject,null);
      }
    }
    if (xmlDescriptor.hasEventManager()) {
      CoreDescriptorEventManager eventManager=xmlDescriptor.getEventManager();
      if (null != eventManager && eventManager.hasAnyEventListeners()) {
        DescriptorEvent event=new DescriptorEvent(currentObject);
        event.setSession((AbstractSession)session);
        event.setRecord(null);
        event.setEventCode(DescriptorEventManager.PostBuildEvent);
        eventManager.executeEvent(event);
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (null != referenceResolver) {
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      if (null != primaryKeyFields) {
        int primaryKeyFieldsSize=primaryKeyFields.size();
        if (primaryKeyFieldsSize > 0) {
          CacheId pk=(CacheId)treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
          for (int x=0; x < primaryKeyFieldsSize; x++) {
            Object value=pk.getPrimaryKey()[x];
            if (null == value) {
              Field pkField=(Field)xmlDescriptor.getPrimaryKeyFields().get(x);
              pk.set(x,unmarshaller.getContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
            }
          }
          referenceResolver.putValue(xmlDescriptor.getJavaClass(),pk,currentObject);
          if (unmarshaller.getIDResolver() != null) {
            try {
              if (primaryKeyFieldsSize > 1) {
                Map<String,Object> idWrapper=new HashMap<String,Object>();
                for (int x=0; x < primaryKeyFieldsSize; x++) {
                  String idName=(String)xmlDescriptor.getPrimaryKeyFieldNames().get(x);
                  Object idValue=pk.getPrimaryKey()[x];
                  idWrapper.put(idName,idValue);
                }
                unmarshaller.getIDResolver().bind(idWrapper,currentObject);
              }
 else {
                unmarshaller.getIDResolver().bind(pk.getPrimaryKey()[0],currentObject);
              }
            }
 catch (            SAXException e) {
              throw XMLMarshalException.unmarshalException(e);
            }
          }
        }
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
  if (xmlLocation != null && ((Descriptor)xmlDescriptor).getLocationAccessor() != null) {
    ((Descriptor)xmlDescriptor).getLocationAccessor().setAttributeValueInObject(getCurrentObject(),xmlLocation);
  }
}","public void endDocument() throws SAXException {
  if (unmarshaller.getIDResolver() != null && parentRecord == null) {
    unmarshaller.getIDResolver().endDocument();
  }
  if (null != selfRecords) {
    for (int x=0, selfRecordsSize=selfRecords.size(); x < selfRecordsSize; x++) {
      UnmarshalRecord selfRecord=selfRecords.get(x);
      if (selfRecord != null) {
        selfRecord.endDocument();
      }
    }
  }
  if (null != xPathNode.getSelfChildren()) {
    int selfChildrenSize=xPathNode.getSelfChildren().size();
    for (int x=0; x < selfChildrenSize; x++) {
      XPathNode selfNode=xPathNode.getSelfChildren().get(x);
      if (null != selfNode.getNodeValue()) {
        selfNode.getNodeValue().endSelfNodeValue(this,selfRecords.get(x),attributes);
      }
    }
  }
  CoreDescriptor xmlDescriptor=(CoreDescriptor)treeObjectBuilder.getDescriptor();
  try {
    if (null != populatedContainerValues) {
      for (int populatedCVSize=populatedContainerValues.size(), i=populatedCVSize - 1; i >= 0; i--) {
        ContainerValue cv=((ContainerValue)populatedContainerValues.get(i));
        cv.setContainerInstance(currentObject,getContainerInstance(cv,cv.isDefaultEmptyContainer()));
      }
    }
    if (null != defaultEmptyContainerValues) {
      for (int defaultEmptyCVSize=defaultEmptyContainerValues.size(), i=defaultEmptyCVSize - 1; i >= 0; i--) {
        ContainerValue cv=((ContainerValue)defaultEmptyContainerValues.get(i));
        cv.setContainerInstance(currentObject,getContainerInstance(cv,cv.isDefaultEmptyContainer()));
      }
    }
    if (null != nullCapableValues) {
      for (int x=0, nullValuesSize=nullCapableValues.size(); x < nullValuesSize; x++) {
        nullCapableValues.get(x).setNullValue(currentObject,session);
      }
    }
    List transformationMappings=treeObjectBuilder.getTransformationMappings();
    if (null != transformationMappings) {
      ReadObjectQuery query=new ReadObjectQuery();
      query.setSession((AbstractSession)session);
      for (int x=0, transformationMappingsSize=transformationMappings.size(); x < transformationMappingsSize; x++) {
        AbstractTransformationMapping transformationMapping=(AbstractTransformationMapping)transformationMappings.get(x);
        transformationMapping.readFromRowIntoObject(transformationRecord,null,currentObject,null,query,(AbstractSession)session,true);
      }
    }
    Unmarshaller.Listener listener=unmarshaller.getUnmarshalListener();
    if (listener != null) {
      if (this.parentRecord != null) {
        listener.afterUnmarshal(currentObject,parentRecord.getCurrentObject());
      }
 else {
        listener.afterUnmarshal(currentObject,null);
      }
    }
    if (xmlDescriptor.hasEventManager()) {
      CoreDescriptorEventManager eventManager=xmlDescriptor.getEventManager();
      if (null != eventManager && eventManager.hasAnyEventListeners()) {
        DescriptorEvent event=new DescriptorEvent(currentObject);
        event.setSession((AbstractSession)session);
        event.setRecord(null);
        event.setEventCode(DescriptorEventManager.PostBuildEvent);
        eventManager.executeEvent(event);
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
  if (null != referenceResolver) {
    if (null != xmlDescriptor) {
      List primaryKeyFields=xmlDescriptor.getPrimaryKeyFields();
      if (null != primaryKeyFields) {
        int primaryKeyFieldsSize=primaryKeyFields.size();
        if (primaryKeyFieldsSize > 0) {
          CacheId pk=(CacheId)treeObjectBuilder.extractPrimaryKeyFromObject(currentObject,session);
          for (int x=0; x < primaryKeyFieldsSize; x++) {
            Object value=pk.getPrimaryKey()[x];
            if (null == value) {
              Field pkField=(Field)xmlDescriptor.getPrimaryKeyFields().get(x);
              pk.set(x,unmarshaller.getContext().getValueByXPath(currentObject,pkField.getXPath(),pkField.getNamespaceResolver(),Object.class));
            }
          }
          referenceResolver.putValue(xmlDescriptor.getJavaClass(),pk,currentObject);
          if (unmarshaller.getIDResolver() != null) {
            try {
              if (primaryKeyFieldsSize > 1) {
                Map<String,Object> idWrapper=new HashMap<String,Object>();
                for (int x=0; x < primaryKeyFieldsSize; x++) {
                  String idName=(String)xmlDescriptor.getPrimaryKeyFieldNames().get(x);
                  Object idValue=pk.getPrimaryKey()[x];
                  idWrapper.put(idName,idValue);
                }
                unmarshaller.getIDResolver().bind(idWrapper,currentObject);
              }
 else {
                unmarshaller.getIDResolver().bind(pk.getPrimaryKey()[0],currentObject);
              }
            }
 catch (            SAXException e) {
              throw XMLMarshalException.unmarshalException(e);
            }
          }
        }
      }
    }
  }
  if (null != parentRecord) {
    reset();
  }
  if (xmlLocation != null && ((Descriptor)xmlDescriptor).getLocationAccessor() != null) {
    ((Descriptor)xmlDescriptor).getLocationAccessor().setAttributeValueInObject(getCurrentObject(),xmlLocation);
  }
}"
63859,"public void initializeRecord(Mapping selfRecordMapping) throws SAXException {
  try {
    Descriptor xmlDescriptor=(Descriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    currentObject=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (currentObject == null) {
      currentObject=treeObjectBuilder.buildNewInstance();
    }
    if (xmlDescriptor.getLocationAccessor() != null && xmlReader.getLocator() != null) {
      xmlLocation=new Locator2Impl(xmlReader.getLocator());
    }
    Object parentRecordCurrentObject=null;
    if (null != this.parentRecord) {
      parentRecordCurrentObject=parentRecord.getCurrentObject();
    }
    XMLUnmarshalListener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(currentObject,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(currentObject,parentRecordCurrentObject);
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(currentObject,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(currentObject,parentRecordCurrentObject,selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      int containerSize=containerValues.size();
      containerInstances=new Object[containerSize];
      populatedContainerValues=new ArrayList(containerSize);
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        NodeValue nv=xPathNode.getSelfChildren().get(x).getNodeValue();
        if (null != nv) {
          selfRecords.add(nv.buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void initializeRecord(Mapping selfRecordMapping) throws SAXException {
  try {
    Descriptor xmlDescriptor=(Descriptor)treeObjectBuilder.getDescriptor();
    if (xmlDescriptor.isSequencedObject()) {
      unmarshalContext=new SequencedUnmarshalContext();
    }
 else {
      unmarshalContext=ObjectUnmarshalContext.getInstance();
    }
    currentObject=this.xmlReader.getCurrentObject(session,selfRecordMapping);
    if (currentObject == null) {
      currentObject=treeObjectBuilder.buildNewInstance();
    }
    if (xmlDescriptor.getLocationAccessor() != null && xmlReader.getLocator() != null) {
      xmlLocation=new Locator2Impl(xmlReader.getLocator());
    }
    Object parentRecordCurrentObject=null;
    if (null != this.parentRecord) {
      parentRecordCurrentObject=parentRecord.getCurrentObject();
    }
    Unmarshaller.Listener xmlUnmarshalListener=unmarshaller.getUnmarshalListener();
    if (null != xmlUnmarshalListener) {
      if (null == this.parentRecord) {
        xmlUnmarshalListener.beforeUnmarshal(currentObject,null);
      }
 else {
        xmlUnmarshalListener.beforeUnmarshal(currentObject,parentRecordCurrentObject);
      }
    }
    if (null == parentRecord) {
      this.xmlReader.newObjectEvent(currentObject,null,selfRecordMapping);
    }
 else {
      this.xmlReader.newObjectEvent(currentObject,parentRecordCurrentObject,selfRecordMapping);
    }
    List containerValues=treeObjectBuilder.getContainerValues();
    if (null != containerValues) {
      int containerSize=containerValues.size();
      containerInstances=new Object[containerSize];
      populatedContainerValues=new ArrayList(containerSize);
    }
    if (null != xPathNode.getSelfChildren()) {
      int selfChildrenSize=xPathNode.getSelfChildren().size();
      selfRecords=new ArrayList<UnmarshalRecord>(selfChildrenSize);
      for (int x=0; x < selfChildrenSize; x++) {
        NodeValue nv=xPathNode.getSelfChildren().get(x).getNodeValue();
        if (null != nv) {
          selfRecords.add(nv.buildSelfRecord(this,attributes));
        }
      }
    }
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,getDocumentLocator(),e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
63860,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  Descriptor descriptor;
  ObjectBuilder objectBuilder;
  CoreAbstractSession childSession;
  Marshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((Root)value).getObject();
    if (null == value) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(Descriptor)childSession.getDescriptor(value);
    objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,value);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  Descriptor descriptor;
  ObjectBuilder objectBuilder;
  CoreAbstractSession childSession;
  Marshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((Root)value).getObject();
    if (null == value) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(Descriptor)childSession.getDescriptor(value);
    objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      throw XMLMarshalException.defaultRootElementNotSpecified((XMLDescriptor)descriptor);
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,value);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}"
63861,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlAnyObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((Root)objectValue).getObject();
    if (objectValue == null) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    CoreSession childSession=null;
    try {
      childSession=marshaller.getContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    Descriptor descriptor=(Descriptor)childSession.getDescriptor(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlAnyObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((Root)objectValue).getObject();
    if (objectValue == null) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    CoreSession childSession=null;
    try {
      childSession=marshaller.getContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    Descriptor descriptor=(Descriptor)childSession.getDescriptor(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      throw XMLMarshalException.defaultRootElementNotSpecified((XMLDescriptor)descriptor);
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}"
63862,"public void testObjectToXMLEventWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLEventWriter eventWriter=factory.createXMLEventWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    jaxbMarshaller.marshal(objectToWrite,eventWriter);
    eventWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLEventWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLEventWriter eventWriter=factory.createXMLEventWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    try {
      jaxbMarshaller.marshal(objectToWrite,eventWriter);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    eventWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
63863,"public void objectToXMLStringWriter(Object objectToWrite) throws Exception {
  StringWriter writer=new StringWriter();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,writer);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document testDocument=getTestDocument(writer.toString());
  writer.close();
  objectToXMLDocumentTest(testDocument);
}","public void objectToXMLStringWriter(Object objectToWrite) throws Exception {
  StringWriter writer=new StringWriter();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,writer);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document testDocument=getTestDocument(writer.toString());
  writer.close();
  objectToXMLDocumentTest(testDocument);
}"
63864,"public void testObjectToXMLStreamWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    jaxbMarshaller.marshal(objectToWrite,streamWriter);
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLStreamWriter() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    try {
      jaxbMarshaller.marshal(objectToWrite,streamWriter);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
63865,"public void testObjectToContentHandler() throws Exception {
  SAXDocumentBuilder builder=new SAXDocumentBuilder();
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,builder);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document controlDocument=getWriteControlDocument();
  Document testDocument=builder.getDocument();
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(controlDocument);
  log(""String_Node_Str"");
  log(testDocument);
  assertXMLIdentical(controlDocument,testDocument);
}","public void testObjectToContentHandler() throws Exception {
  SAXDocumentBuilder builder=new SAXDocumentBuilder();
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,builder);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  Document controlDocument=getWriteControlDocument();
  Document testDocument=builder.getDocument();
  log(""String_Node_Str"");
  log(""String_Node_Str"");
  log(controlDocument);
  log(""String_Node_Str"");
  log(testDocument);
  assertXMLIdentical(controlDocument,testDocument);
}"
63866,"public void testObjectToXMLStreamWriterRecord() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    XMLStreamWriterRecord record=new XMLStreamWriterRecord(streamWriter);
    ((org.eclipse.persistence.jaxb.JAXBMarshaller)jaxbMarshaller).marshal(objectToWrite,record);
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}","public void testObjectToXMLStreamWriterRecord() throws Exception {
  if (XML_OUTPUT_FACTORY != null) {
    StringWriter writer=new StringWriter();
    XMLOutputFactory factory=XMLOutputFactory.newInstance();
    factory.setProperty(factory.IS_REPAIRING_NAMESPACES,new Boolean(false));
    XMLStreamWriter streamWriter=factory.createXMLStreamWriter(writer);
    Object objectToWrite=getWriteControlObject();
    XMLDescriptor desc=null;
    if (objectToWrite instanceof XMLRoot) {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
    }
 else {
      desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
    }
    jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
    int sizeBefore=getNamespaceResolverSize(desc);
    XMLStreamWriterRecord record=new XMLStreamWriterRecord(streamWriter);
    try {
      ((org.eclipse.persistence.jaxb.JAXBMarshaller)jaxbMarshaller).marshal(objectToWrite,record);
    }
 catch (    Exception e) {
      assertMarshalException(e);
      return;
    }
    streamWriter.flush();
    int sizeAfter=getNamespaceResolverSize(desc);
    assertEquals(sizeBefore,sizeAfter);
    Document testDocument=getTestDocument(writer.toString());
    writer.close();
    objectToXMLDocumentTest(testDocument);
  }
}"
63867,"public void testObjectToOutputStreamASCIIEncoding() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  String originalEncoding=(String)jaxbMarshaller.getProperty(Marshaller.JAXB_ENCODING);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,stream);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,originalEncoding);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
}","public void testObjectToOutputStreamASCIIEncoding() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  String originalEncoding=(String)jaxbMarshaller.getProperty(Marshaller.JAXB_ENCODING);
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,stream);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  jaxbMarshaller.setProperty(Marshaller.JAXB_ENCODING,originalEncoding);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
}"
63868,"public void testObjectToXMLDocument() throws Exception {
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  Document testDocument=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
  jaxbMarshaller.marshal(objectToWrite,testDocument);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  objectToXMLDocumentTest(testDocument);
}","public void testObjectToXMLDocument() throws Exception {
  Object objectToWrite=getWriteControlObject();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  int sizeBefore=getNamespaceResolverSize(desc);
  Document testDocument=XMLPlatformFactory.getInstance().getXMLPlatform().createDocument();
  try {
    jaxbMarshaller.marshal(objectToWrite,testDocument);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  objectToXMLDocumentTest(testDocument);
}"
63869,"public void testObjectToOutputStream() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  jaxbMarshaller.marshal(objectToWrite,stream);
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
  if (getProperties() != null) {
    log(""String_Node_Str"");
    ByteArrayOutputStream stream2=new ByteArrayOutputStream();
    JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
    Marshaller jaxbMarshallerFromJSONBindings=jaxbContextFromJSONBindings.createMarshaller();
    jaxbMarshallerFromJSONBindings.setAttachmentMarshaller(jaxbMarshaller.getAttachmentMarshaller());
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER));
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.OBJECT_GRAPH,jaxbMarshaller.getProperty(MarshallerProperties.OBJECT_GRAPH));
    jaxbMarshallerFromJSONBindings.marshal(objectToWrite,stream2);
    InputStream is2=new ByteArrayInputStream(stream2.toByteArray());
    Document testDocument2=parser.parse(is2);
    stream2.close();
    is2.close();
    objectToXMLDocumentTest(testDocument2);
  }
}","public void testObjectToOutputStream() throws Exception {
  Object objectToWrite=getWriteControlObject();
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  XMLDescriptor desc=null;
  if (objectToWrite instanceof XMLRoot) {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(((XMLRoot)objectToWrite).getObject().getClass());
  }
 else {
    desc=(XMLDescriptor)xmlContext.getSession(0).getProject().getDescriptor(objectToWrite.getClass());
  }
  int sizeBefore=getNamespaceResolverSize(desc);
  jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  try {
    jaxbMarshaller.marshal(objectToWrite,stream);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  int sizeAfter=getNamespaceResolverSize(desc);
  assertEquals(sizeBefore,sizeAfter);
  InputStream is=new ByteArrayInputStream(stream.toByteArray());
  Document testDocument=getTestDocument(is);
  stream.close();
  is.close();
  objectToXMLDocumentTest(testDocument);
  if (getProperties() != null) {
    log(""String_Node_Str"");
    ByteArrayOutputStream stream2=new ByteArrayOutputStream();
    JAXBContext jaxbContextFromJSONBindings=createJaxbContextFromJSONBindings();
    Marshaller jaxbMarshallerFromJSONBindings=jaxbContextFromJSONBindings.createMarshaller();
    jaxbMarshallerFromJSONBindings.setAttachmentMarshaller(jaxbMarshaller.getAttachmentMarshaller());
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER,jaxbMarshaller.getProperty(MarshallerProperties.NAMESPACE_PREFIX_MAPPER));
    jaxbMarshallerFromJSONBindings.setProperty(MarshallerProperties.OBJECT_GRAPH,jaxbMarshaller.getProperty(MarshallerProperties.OBJECT_GRAPH));
    jaxbMarshallerFromJSONBindings.marshal(objectToWrite,stream2);
    InputStream is2=new ByteArrayInputStream(stream2.toByteArray());
    Document testDocument2=parser.parse(is2);
    stream2.close();
    is2.close();
    objectToXMLDocumentTest(testDocument2);
  }
}"
63870,"public void testJSONMarshalToOutputStream() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  getJSONMarshaller().marshal(getWriteControlObject(),os);
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()));
  os.close();
}","public void testJSONMarshalToOutputStream() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),os);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()));
  os.close();
}"
63871,"public void testJSONMarshalToStringWriter_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  StringWriter sw=new StringWriter();
  getJSONMarshaller().marshal(getWriteControlObject(),sw);
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString(),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
}","public void testJSONMarshalToStringWriter_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  StringWriter sw=new StringWriter();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),sw);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString(),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
}"
63872,"public void testJSONMarshalToStringWriter() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  StringWriter sw=new StringWriter();
  getJSONMarshaller().marshal(getWriteControlObject(),sw);
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}","public void testJSONMarshalToStringWriter() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  StringWriter sw=new StringWriter();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),sw);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  log(sw.toString());
  compareStringToControlFile(""String_Node_Str"",sw.toString());
}"
63873,"public void testJSONMarshalToOutputStream_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  getJSONMarshaller().marshal(getWriteControlObject(),os);
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
  os.close();
}","public void testJSONMarshalToOutputStream_FORMATTED() throws Exception {
  getJSONMarshaller().setProperty(MarshallerProperties.MEDIA_TYPE,""String_Node_Str"");
  getJSONMarshaller().setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  try {
    getJSONMarshaller().marshal(getWriteControlObject(),os);
  }
 catch (  Exception e) {
    assertMarshalException(e);
    return;
  }
  compareStringToControlFile(""String_Node_Str"",new String(os.toByteArray()),getWriteControlJSONFormatted(),shouldRemoveWhitespaceFromControlDocJSON());
  os.close();
}"
63874,"/** 
 * Gets the.
 * @param key the key
 * @return the object
 */
public static Object get(String key){
  Object value=storage.get().get(key);
  if (REQUEST_UNIQUE_ID.equals(key)) {
    if (value == null) {
      return UNKNOWN_REQUEST_UNIQUE_ID;
    }
 else {
      return (String)value;
    }
  }
  return value;
}","/** 
 * Gets the.
 * @param key the key
 * @return the object
 */
public static Object get(String key){
  Object value=storage.get().get(key);
  if (REQUEST_UNIQUE_ID.equals(key)) {
    if (value == null) {
      return ""String_Node_Str"";
    }
  }
  return value;
}"
63875,"/** 
 * Destroy.
 */
public static void destroy(){
  storage.remove();
}","/** 
 * Destroy.
 */
public static void destroy(){
  if (storage != null) {
    if (storage.get() != null) {
      storage.get().clear();
    }
    storage.remove();
  }
}"
63876,"/** 
 * A part of the facade over the JPA API Call jpa merge on the given object and commit If the passed object is a list, we will iterate through the list and merge each member
 * @param tenantId
 * @param entity
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object merge(Map<String,String> tenantId,Object entity){
  EntityManager em=getEmf().createEntityManager(tenantId);
  Object mergedEntity=null;
  try {
    transaction.beginTransaction(em);
    if (entity instanceof List) {
      List<Object> mergeList=new ArrayList<Object>();
      for (      Object o : (List)entity) {
        mergeList.add(em.merge(o));
      }
      mergedEntity=mergeList;
    }
 else {
      mergedEntity=em.merge(entity);
    }
    transaction.commitTransaction(em);
    return mergedEntity;
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
 finally {
    em.close();
  }
}","/** 
 * A part of the facade over the JPA API Call jpa merge on the given object and commit If the passed object is a list, we will iterate through the list and merge each member
 * @param tenantId
 * @param entity
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object merge(Map<String,String> tenantId,Object entity){
  EntityManager em=getEmf().createEntityManager(tenantId);
  Object mergedEntity=null;
  try {
    transaction.beginTransaction(em);
    if (entity instanceof List) {
      List<Object> mergeList=new ArrayList<Object>();
      for (      Object o : (List)entity) {
        mergeList.add(em.merge(o));
      }
      mergedEntity=mergeList;
    }
 else {
      mergedEntity=em.merge(entity);
    }
    transaction.commitTransaction(em);
    return mergedEntity;
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred(ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred(ex);
  }
 finally {
    em.close();
  }
}"
63877,"/** 
 * Marshall an entity to either JSON or XML
 * @param object
 * @param mediaType
 * @param output
 * @param sendRelationships if this is set to true, relationships will be sent as links instead of sending the actual objects in the relationships
 * @throws JAXBException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void marshallEntity(Object object,MediaType mediaType,OutputStream output,boolean sendRelationships) throws JAXBException {
  if (sendRelationships) {
    preMarshallEntity(object);
  }
  Marshaller marshaller=getJAXBContext().createMarshaller();
  marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  marshaller.setProperty(MarshallerProperties.JSON_REDUCE_ANY_ARRAYS,true);
  marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,true);
  marshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  marshaller.setAdapter(new RelationshipLinkAdapter(getBaseURI().toString(),this));
  for (  XmlAdapter adapter : getAdapters()) {
    marshaller.setAdapter(adapter);
  }
  if (mediaType == MediaType.APPLICATION_XML_TYPE && object instanceof List) {
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,true);
    XMLOutputFactory outputFactory=XMLOutputFactory.newFactory();
    XMLStreamWriter writer=null;
    try {
      writer=outputFactory.createXMLStreamWriter(output);
      writer.writeStartDocument();
      writer.writeStartElement(ReservedWords.JPARS_LIST_GROUPING_NAME);
      for (      Object o : (List<Object>)object) {
        marshaller.marshal(o,writer);
      }
      writer.writeEndDocument();
      writer.flush();
      postMarshallEntity(object);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(e),e);
    }
  }
 else {
    marshaller.marshal(object,output);
    postMarshallEntity(object);
  }
}","/** 
 * Marshall an entity to either JSON or XML
 * @param object
 * @param mediaType
 * @param output
 * @param sendRelationships if this is set to true, relationships will be sent as links instead of sending the actual objects in the relationships
 * @throws JAXBException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void marshallEntity(Object object,MediaType mediaType,OutputStream output,boolean sendRelationships) throws JAXBException {
  if (sendRelationships) {
    preMarshallEntity(object);
  }
  Marshaller marshaller=getJAXBContext().createMarshaller();
  marshaller.setProperty(MarshallerProperties.MEDIA_TYPE,mediaType.toString());
  marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT,false);
  marshaller.setProperty(MarshallerProperties.JSON_REDUCE_ANY_ARRAYS,true);
  marshaller.setProperty(MarshallerProperties.JSON_WRAPPER_AS_ARRAY_NAME,true);
  marshaller.setAdapter(new LinkAdapter(getBaseURI().toString(),this));
  marshaller.setAdapter(new RelationshipLinkAdapter(getBaseURI().toString(),this));
  for (  XmlAdapter adapter : getAdapters()) {
    marshaller.setAdapter(adapter);
  }
  if (mediaType == MediaType.APPLICATION_XML_TYPE && object instanceof List) {
    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,true);
    XMLOutputFactory outputFactory=XMLOutputFactory.newFactory();
    XMLStreamWriter writer=null;
    try {
      writer=outputFactory.createXMLStreamWriter(output);
      writer.writeStartDocument();
      writer.writeStartElement(ReservedWords.JPARS_LIST_GROUPING_NAME);
      for (      Object o : (List<Object>)object) {
        marshaller.marshal(o,writer);
      }
      writer.writeEndDocument();
      writer.flush();
      postMarshallEntity(object);
    }
 catch (    Exception ex) {
      throw JPARSException.exceptionOccurred(ex);
    }
  }
 else {
    marshaller.marshal(object,output);
    postMarshallEntity(object);
  }
}"
63878,"/** 
 * Instantiates a new persistence context.
 * @param emfName the emf name
 * @param emf the emf
 * @param defaultURI the default uri
 */
public PersistenceContext(String emfName,EntityManagerFactoryImpl emf,URI defaultURI){
  super();
  this.emf=emf;
  this.name=emfName;
  if (getServerSession().hasExternalTransactionController()) {
    transaction=new JTATransactionWrapper();
  }
 else {
    transaction=new ResourceLocalTransactionWrapper();
  }
  try {
    this.jaxbContext=createDynamicJAXBContext(emf.getDatabaseSession());
  }
 catch (  JAXBException jaxbe) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,jaxbe.toString()},jaxbe);
    emf.close();
  }
catch (  IOException e) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,e.toString()},e);
    emf.close();
  }
  setBaseURI(defaultURI);
}","/** 
 * Instantiates a new persistence context.
 * @param emfName the emf name
 * @param emf the emf
 * @param defaultURI the default uri
 */
public PersistenceContext(String emfName,EntityManagerFactoryImpl emf,URI defaultURI){
  super();
  this.emf=emf;
  this.name=emfName;
  if (getServerSession().hasExternalTransactionController()) {
    transaction=new JTATransactionWrapper();
  }
 else {
    transaction=new ResourceLocalTransactionWrapper();
  }
  try {
    this.jaxbContext=createDynamicJAXBContext(emf.getDatabaseSession());
  }
 catch (  JAXBException jaxbe) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,jaxbe.toString()},jaxbe);
    emf.close();
  }
catch (  IOException e) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),emfName,e.toString()},e);
    emf.close();
  }
  setBaseURI(defaultURI);
}"
63879,"/** 
 * A part of the facade over the JPA API Delete the given entity in JPA and commit the changes
 */
public void delete(Map<String,String> tenantId,String type,Object id){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    transaction.beginTransaction(em);
    Object entity=em.find(getClass(type),id);
    if (entity != null) {
      em.remove(entity);
    }
    transaction.commitTransaction(em);
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
 finally {
    em.close();
  }
}","/** 
 * A part of the facade over the JPA API Delete the given entity in JPA and commit the changes
 */
public void delete(Map<String,String> tenantId,String type,Object id){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    transaction.beginTransaction(em);
    Object entity=em.find(getClass(type),id);
    if (entity != null) {
      em.remove(entity);
    }
    transaction.commitTransaction(em);
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred(ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred(ex);
  }
 finally {
    em.close();
  }
}"
63880,"/** 
 * A convenience method to create a new dynamic entity of the given type
 * @param tenantId
 * @param type
 * @return
 */
public DynamicEntity newEntity(Map<String,String> tenantId,String type){
  JPADynamicHelper helper=new JPADynamicHelper(getEmf());
  DynamicEntity entity=null;
  try {
    entity=helper.newDynamicEntity(type);
  }
 catch (  IllegalArgumentException e) {
    ClassDescriptor descriptor=getDescriptor(type);
    if (descriptor != null) {
      DynamicType jaxbType=(DynamicType)descriptor.getProperty(DynamicType.DESCRIPTOR_PROPERTY);
      if (jaxbType != null) {
        return jaxbType.newDynamicEntity();
      }
    }
    JPARSLogger.fine(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),type,e.toString()});
    throw e;
  }
  return entity;
}","/** 
 * A convenience method to create a new dynamic entity of the given type
 * @param tenantId
 * @param type
 * @return
 */
public DynamicEntity newEntity(Map<String,String> tenantId,String type){
  JPADynamicHelper helper=new JPADynamicHelper(getEmf());
  DynamicEntity entity=null;
  try {
    entity=helper.newDynamicEntity(type);
  }
 catch (  IllegalArgumentException e) {
    ClassDescriptor descriptor=getDescriptor(type);
    if (descriptor != null) {
      DynamicType jaxbType=(DynamicType)descriptor.getProperty(DynamicType.DESCRIPTOR_PROPERTY);
      if (jaxbType != null) {
        return jaxbType.newDynamicEntity();
      }
    }
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),type,e.toString()});
    throw e;
  }
  return entity;
}"
63881,"/** 
 * Query execute update.
 * @param tenantId the tenant id
 * @param name the name
 * @param parameters the parameters
 * @param hints the hints
 * @return the int
 */
public int queryExecuteUpdate(Map<String,String> tenantId,String name,Map<?,?> parameters,Map<String,?> hints){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    Query query=constructQuery(em,name,parameters,hints);
    transaction.beginTransaction(em);
    int result=query.executeUpdate();
    transaction.commitTransaction(em);
    return result;
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
 finally {
    em.close();
  }
}","/** 
 * Query execute update.
 * @param tenantId the tenant id
 * @param name the name
 * @param parameters the parameters
 * @param hints the hints
 * @return the int
 */
public int queryExecuteUpdate(Map<String,String> tenantId,String name,Map<?,?> parameters,Map<String,?> hints){
  EntityManager em=getEmf().createEntityManager(tenantId);
  try {
    Query query=constructQuery(em,name,parameters,hints);
    transaction.beginTransaction(em);
    int result=query.executeUpdate();
    transaction.commitTransaction(em);
    return result;
  }
 catch (  RollbackException ex) {
    throw JPARSException.exceptionOccurred(ex);
  }
catch (  Exception ex) {
    transaction.rollbackTransaction(em);
    throw JPARSException.exceptionOccurred(ex);
  }
 finally {
    em.close();
  }
}"
63882,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected List<XmlAdapter> getAdapters() throws JPARSException {
  if (adapters != null) {
    return adapters;
  }
  adapters=new ArrayList<XmlAdapter>();
  try {
    for (    ClassDescriptor desc : this.getServerSession().getDescriptors().values()) {
      if (!desc.isAggregateCollectionDescriptor() && !desc.isAggregateDescriptor()) {
        Class clz=desc.getJavaClass();
        String referenceAdapterName=RestAdapterClassWriter.constructClassNameForReferenceAdapter(clz.getName());
        ClassLoader cl=getServerSession().getDatasourcePlatform().getConversionManager().getLoader();
        Class referenceAdaptorClass=Class.forName(referenceAdapterName,true,cl);
        Class[] argTypes={String.class,PersistenceContext.class};
        Constructor referenceAdaptorConstructor=referenceAdaptorClass.getDeclaredConstructor(argTypes);
        Object[] args=new Object[]{getBaseURI().toString(),this};
        adapters.add((XmlAdapter)referenceAdaptorConstructor.newInstance(args));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw JPARSException.exceptionOccurred((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),AbstractResource.getHttpStatusCode(ex),ex);
  }
  return adapters;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected List<XmlAdapter> getAdapters() throws JPARSException {
  if (adapters != null) {
    return adapters;
  }
  adapters=new ArrayList<XmlAdapter>();
  try {
    for (    ClassDescriptor desc : this.getServerSession().getDescriptors().values()) {
      if (!desc.isAggregateCollectionDescriptor() && !desc.isAggregateDescriptor()) {
        Class clz=desc.getJavaClass();
        String referenceAdapterName=RestAdapterClassWriter.constructClassNameForReferenceAdapter(clz.getName());
        ClassLoader cl=getServerSession().getDatasourcePlatform().getConversionManager().getLoader();
        Class referenceAdaptorClass=Class.forName(referenceAdapterName,true,cl);
        Class[] argTypes={String.class,PersistenceContext.class};
        Constructor referenceAdaptorConstructor=referenceAdaptorClass.getDeclaredConstructor(argTypes);
        Object[] args=new Object[]{getBaseURI().toString(),this};
        adapters.add((XmlAdapter)referenceAdaptorConstructor.newInstance(args));
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw JPARSException.exceptionOccurred(ex);
  }
  return adapters;
}"
63883,"/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if ((entity != null) && (PersistenceWeavedRest.class.isAssignableFrom(entity.getClass()))) {
    if (!doesExist(null,entity)) {
      return entity;
    }
    ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
    if (entity instanceof FetchGroupTracker) {
      FetchGroup fetchGroup=new FetchGroup();
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (!(mapping instanceof XMLInverseReferenceMapping)) {
          fetchGroup.addAttribute(mapping.getAttributeName());
        }
      }
      (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
      ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
    }
 else     if (descriptor.hasRelationships()) {
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (mapping instanceof XMLInverseReferenceMapping) {
          JPARSLogger.fine(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
          throw JPARSException.invalidConfiguration((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),Status.INTERNAL_SERVER_ERROR.getStatusCode());
        }
      }
    }
  }
  return entity;
}","/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if ((entity != null) && (PersistenceWeavedRest.class.isAssignableFrom(entity.getClass()))) {
    if (!doesExist(null,entity)) {
      return entity;
    }
    ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
    if (entity instanceof FetchGroupTracker) {
      FetchGroup fetchGroup=new FetchGroup();
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (!(mapping instanceof XMLInverseReferenceMapping)) {
          fetchGroup.addAttribute(mapping.getAttributeName());
        }
      }
      (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
      ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
    }
 else     if (descriptor.hasRelationships()) {
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (mapping instanceof XMLInverseReferenceMapping) {
          JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
          throw JPARSException.invalidConfiguration(Status.INTERNAL_SERVER_ERROR.getStatusCode());
        }
      }
    }
  }
  return entity;
}"
63884,"public PersistenceContext get(String persistenceUnitName,URI defaultURI,String version,Map<String,Object> initializationProperties){
  PersistenceContext persistenceContext=getDynamicPersistenceContext(persistenceUnitName,version);
  if (persistenceContext == null) {
    try {
      DynamicClassLoader dcl=new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
      Map<String,Object> properties=new HashMap<String,Object>();
      properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
      if (initializationProperties != null) {
        properties.putAll(initializationProperties);
      }
      EntityManagerFactoryImpl factory=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(persistenceUnitName,properties);
      ClassLoader sessionLoader=factory.getServerSession().getLoader();
      if (!DynamicClassLoader.class.isAssignableFrom(sessionLoader.getClass())) {
        properties=new HashMap<String,Object>();
        dcl=new DynamicClassLoader(sessionLoader);
        properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
        if (initializationProperties != null) {
          properties.putAll(initializationProperties);
        }
        factory.refreshMetadata(properties);
      }
      if (factory != null) {
        persistenceContext=bootstrapPersistenceContext(persistenceUnitName,factory,defaultURI,version,true);
        Set<PersistenceContext> persistenceContextSet=getDynamicPersistenceContextSet(persistenceUnitName);
        if (persistenceContext != null) {
          if (persistenceContextSet == null) {
            persistenceContextSet=new HashSet<PersistenceContext>();
          }
          persistenceContextSet.add(persistenceContext);
synchronized (this) {
            dynamicPersistenceContexts.put(persistenceUnitName,persistenceContextSet);
          }
        }
      }
    }
 catch (    Exception e) {
      JPARSLogger.exception(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),persistenceUnitName,e.toString()},e);
    }
  }
  if ((persistenceContext != null) && (!persistenceContext.isWeavingEnabled())) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
    throw JPARSException.invalidConfiguration((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),Status.INTERNAL_SERVER_ERROR.getStatusCode());
  }
  return persistenceContext;
}","public PersistenceContext get(String persistenceUnitName,URI defaultURI,String version,Map<String,Object> initializationProperties){
  PersistenceContext persistenceContext=getDynamicPersistenceContext(persistenceUnitName,version);
  if (persistenceContext == null) {
    try {
      DynamicClassLoader dcl=new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
      Map<String,Object> properties=new HashMap<String,Object>();
      properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
      if (initializationProperties != null) {
        properties.putAll(initializationProperties);
      }
      EntityManagerFactoryImpl factory=(EntityManagerFactoryImpl)Persistence.createEntityManagerFactory(persistenceUnitName,properties);
      ClassLoader sessionLoader=factory.getServerSession().getLoader();
      if (!DynamicClassLoader.class.isAssignableFrom(sessionLoader.getClass())) {
        properties=new HashMap<String,Object>();
        dcl=new DynamicClassLoader(sessionLoader);
        properties.put(PersistenceUnitProperties.CLASSLOADER,dcl);
        if (initializationProperties != null) {
          properties.putAll(initializationProperties);
        }
        factory.refreshMetadata(properties);
      }
      if (factory != null) {
        persistenceContext=bootstrapPersistenceContext(persistenceUnitName,factory,defaultURI,version,true);
        Set<PersistenceContext> persistenceContextSet=getDynamicPersistenceContextSet(persistenceUnitName);
        if (persistenceContext != null) {
          if (persistenceContextSet == null) {
            persistenceContextSet=new HashSet<PersistenceContext>();
          }
          persistenceContextSet.add(persistenceContext);
synchronized (this) {
            dynamicPersistenceContexts.put(persistenceUnitName,persistenceContextSet);
          }
        }
      }
    }
 catch (    Exception e) {
      JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),persistenceUnitName,e.toString()},e);
    }
  }
  if ((persistenceContext != null) && (!persistenceContext.isWeavingEnabled())) {
    JPARSLogger.fine(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)});
    throw JPARSException.invalidConfiguration(Status.INTERNAL_SERVER_ERROR.getStatusCode());
  }
  return persistenceContext;
}"
63885,"protected Response buildResponse(JPARSException exception){
  String path=null;
  if (uriInfo != null) {
    URI requestURI=uriInfo.getRequestUri();
    if (requestURI != null) {
      path=requestURI.getPath();
    }
  }
  if ((path != null) && (path.contains(AbstractResource.SERVICE_VERSION_2_0))) {
    ErrorResponse errorResponse=new ErrorResponse(PROBLEM_TYPE,exception.getMessage(),String.valueOf(exception.getErrorCode()));
    errorResponse.setRequestUniqueId(exception.getRequestId());
    errorResponse.setHttpStatus(exception.getHttpStatusCode());
    return Response.status(exception.getHttpStatusCode()).entity(errorResponse).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
  }
  return Response.status(exception.getHttpStatusCode()).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
}","protected Response buildResponse(JPARSException exception){
  String path=null;
  exception.setHttpStatusCode(getHttpStatusCode(exception.getCause()));
  if (uriInfo != null) {
    URI requestURI=uriInfo.getRequestUri();
    if (requestURI != null) {
      path=requestURI.getPath();
    }
  }
  if ((path != null) && (path.contains(AbstractResource.SERVICE_VERSION_2_0))) {
    ErrorResponse errorResponse=new ErrorResponse(PROBLEM_TYPE,exception.getMessage(),String.valueOf(exception.getErrorCode()));
    errorResponse.setRequestUniqueId((String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID));
    errorResponse.setHttpStatus(exception.getHttpStatusCode());
    return Response.status(exception.getHttpStatusCode()).entity(errorResponse).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
  }
  return Response.status(exception.getHttpStatusCode()).type(StreamingOutputMarshaller.getResponseMediaType(headers)).build();
}"
63886,"public Response toResponse(JPARSException exception){
  JPARSLogger.exception(""String_Node_Str"",new Object[]{exception.getRequestId()},exception);
  return buildResponse(exception);
}","public Response toResponse(JPARSException exception){
  if (exception.getCause() != null) {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)},(Exception)exception.getCause());
  }
 else {
    JPARSLogger.exception(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID)},exception);
  }
  return buildResponse(exception);
}"
63887,"@Override public boolean isRequestValid(UriInfo uri,Map<String,Object> additionalParams){
  Query query=null;
  ReadQuery dbQuery=null;
  if ((additionalParams != null) && (!additionalParams.isEmpty())) {
    dbQuery=(ReadQuery)additionalParams.get(DB_QUERY);
    query=(Query)additionalParams.get(QUERY);
    if ((dbQuery != null) && (query != null) && ((dbQuery instanceof ObjectLevelReadQuery) || (dbQuery instanceof ReadAllQuery))) {
      List<Expression> orderBy=null;
      if (dbQuery instanceof ReadAllQuery) {
        orderBy=((ReadAllQuery)dbQuery).getOrderByExpressions();
      }
 else       if (dbQuery instanceof ObjectLevelReadQuery) {
        orderBy=((ObjectLevelReadQuery)dbQuery).getOrderByExpressions();
      }
      if ((orderBy == null) || (orderBy.isEmpty())) {
        JPARSLogger.warning(""String_Node_Str"",new Object[]{(String)DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),query.toString()});
      }
    }
  }
  Map<String,Object> queryParameters=getQueryParameters(uri);
  String paramLimit=(String)queryParameters.get(QueryParameters.JPARS_PAGING_LIMIT);
  String paramOffset=(String)queryParameters.get(QueryParameters.JPARS_PAGING_OFFSET);
  if ((paramLimit == null) && (paramOffset == null)) {
    return false;
  }
  if (paramOffset != null) {
    offset=paramOffset;
  }
 else {
    offset=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_OFFSET);
  }
  if (paramLimit != null) {
    limit=paramLimit;
  }
 else {
    limit=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_LIMIT);
  }
  try {
    if ((offset != null) && (limit != null)) {
      int intOffset=Integer.parseInt(offset);
      int intLimit=Integer.parseInt(limit);
      if ((intOffset >= 0) && (intLimit > 0)) {
        if (query != null) {
          setOfsetAndLimit(query,intOffset,intLimit);
          return true;
        }
        if (dbQuery != null) {
          setOfsetAndLimit(dbQuery,intOffset,intLimit);
          return true;
        }
      }
      return false;
    }
  }
 catch (  NumberFormatException ex) {
  }
  return false;
}","@Override public boolean isRequestValid(UriInfo uri,Map<String,Object> additionalParams){
  Query query=null;
  ReadQuery dbQuery=null;
  if ((additionalParams != null) && (!additionalParams.isEmpty())) {
    dbQuery=(ReadQuery)additionalParams.get(DB_QUERY);
    query=(Query)additionalParams.get(QUERY);
    if ((dbQuery != null) && (query != null) && ((dbQuery instanceof ObjectLevelReadQuery) || (dbQuery instanceof ReadAllQuery))) {
      List<Expression> orderBy=null;
      if (dbQuery instanceof ReadAllQuery) {
        orderBy=((ReadAllQuery)dbQuery).getOrderByExpressions();
      }
 else       if (dbQuery instanceof ObjectLevelReadQuery) {
        orderBy=((ObjectLevelReadQuery)dbQuery).getOrderByExpressions();
      }
      if ((orderBy == null) || (orderBy.isEmpty())) {
        JPARSLogger.warning(""String_Node_Str"",new Object[]{DataStorage.get(DataStorage.REQUEST_UNIQUE_ID),query.toString()});
      }
    }
  }
  Map<String,Object> queryParameters=getQueryParameters(uri);
  String paramLimit=(String)queryParameters.get(QueryParameters.JPARS_PAGING_LIMIT);
  String paramOffset=(String)queryParameters.get(QueryParameters.JPARS_PAGING_OFFSET);
  if ((paramLimit == null) && (paramOffset == null)) {
    return false;
  }
  if (paramOffset != null) {
    offset=paramOffset;
  }
 else {
    offset=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_OFFSET);
  }
  if (paramLimit != null) {
    limit=paramLimit;
  }
 else {
    limit=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_LIMIT);
  }
  try {
    if ((offset != null) && (limit != null)) {
      int intOffset=Integer.parseInt(offset);
      int intLimit=Integer.parseInt(limit);
      if ((intOffset >= 0) && (intLimit > 0)) {
        if (query != null) {
          setOfsetAndLimit(query,intOffset,intLimit);
          return true;
        }
        if (dbQuery != null) {
          setOfsetAndLimit(dbQuery,intOffset,intLimit);
          return true;
        }
      }
      return false;
    }
  }
 catch (  NumberFormatException ex) {
  }
  return false;
}"
63888,"@PUT @Path(""String_Node_Str"") public Response create(@PathParam(""String_Node_Str"") String version,@PathParam(""String_Node_Str"") String persistenceUnit,@PathParam(""String_Node_Str"") String type,@Context HttpHeaders hh,@Context UriInfo uriInfo,InputStream in) throws JAXBException {
  setRequestUniqueId();
  return create(version,persistenceUnit,type,hh,uriInfo,uriInfo.getBaseUri(),in);
}","@PUT @Path(""String_Node_Str"") public Response create(@PathParam(""String_Node_Str"") String version,@PathParam(""String_Node_Str"") String persistenceUnit,@PathParam(""String_Node_Str"") String type,@Context HttpHeaders hh,@Context UriInfo uriInfo,InputStream in) throws Exception {
  setRequestUniqueId();
  return create(version,persistenceUnit,type,hh,uriInfo,uriInfo.getBaseUri(),in);
}"
63889,"/** 
 * @return The mapping for the domain object that corresponds to this Setting.
 */
public DatabaseMapping getMapping(){
  return mapping;
}","/** 
 * @return The mapping for the domain object that corresponds to this Setting.
 */
public CoreMapping getMapping(){
  return mapping;
}"
63890,"/** 
 * @param mapping The mapping for the domain object that corresponds to this Setting.
 */
public void setMapping(DatabaseMapping mapping){
  this.mapping=mapping;
}","/** 
 * @param mapping The mapping for the domain object that corresponds to this Setting.
 */
public void setMapping(CoreMapping mapping){
  this.mapping=mapping;
}"
63891,"/** 
 * @param value
 * @param updateObject
 * @param container
 */
public void addValue(Object value,boolean updateObject,Object container){
  this.value=value;
  if (updateObject) {
    if (null != children) {
      return;
    }
    ContainerMapping containerMapping=(ContainerMapping)mapping;
    ContainerPolicy containerPolicy=containerMapping.getContainerPolicy();
    if (null == container && !(mapping.isWriteOnly())) {
      container=containerPolicy.containerInstance();
      mapping.setAttributeValueInObject(object,container);
    }
    containerMapping.getContainerPolicy().addInto(value,container,null);
  }
}","/** 
 * @param value
 * @param updateObject
 * @param container
 */
public void addValue(Object value,boolean updateObject,Object container){
  this.value=value;
  if (updateObject) {
    if (null != children) {
      return;
    }
    CoreContainerPolicy containerPolicy=mapping.getContainerPolicy();
    if (null == container && !(mapping.isWriteOnly())) {
      container=containerPolicy.containerInstance();
      mapping.setAttributeValueInObject(object,container);
    }
    containerPolicy.addInto(value,container,null);
  }
}"
63892,"private void remove(Setting setting){
  DatabaseMapping mapping=setting.getMapping();
  if (null != mapping) {
    Property property=null;
    if (null == setting.getName()) {
      XMLRoot xmlRoot=(XMLRoot)setting.getValue();
      if (null != xmlRoot) {
        property=dataObject.getInstanceProperty(xmlRoot.getLocalName());
        valuesToSettings.remove(new Key(property,setting.getValue()));
      }
    }
 else {
      property=dataObject.getInstanceProperty(mapping.getAttributeName());
      valuesToSettings.remove(new Key(property,setting.getValue()));
    }
    if (property.isMany()) {
      ListWrapper listWrapper=(ListWrapper)dataObject.getList(property);
      listWrapper.remove(setting.getValue(),false,false);
    }
 else {
      dataObject.unset(property,false,false);
    }
  }
 else   if (setting.getName() != null && setting.getName().equals(TEXT_XPATH)) {
    dataObject._setModified(true);
  }
  List<Setting> children=setting.getChildren();
  if (null != children) {
    int childrenSize=children.size();
    for (int x=0; x < childrenSize; x++) {
      remove(children.get(x));
    }
  }
}","private void remove(Setting setting){
  CoreMapping mapping=setting.getMapping();
  if (null != mapping) {
    Property property=null;
    if (null == setting.getName()) {
      XMLRoot xmlRoot=(XMLRoot)setting.getValue();
      if (null != xmlRoot) {
        property=dataObject.getInstanceProperty(xmlRoot.getLocalName());
        valuesToSettings.remove(new Key(property,setting.getValue()));
      }
    }
 else {
      property=dataObject.getInstanceProperty(mapping.getAttributeName());
      valuesToSettings.remove(new Key(property,setting.getValue()));
    }
    if (property.isMany()) {
      ListWrapper listWrapper=(ListWrapper)dataObject.getList(property);
      listWrapper.remove(setting.getValue(),false,false);
    }
 else {
      dataObject.unset(property,false,false);
    }
  }
 else   if (setting.getName() != null && setting.getName().equals(TEXT_XPATH)) {
    dataObject._setModified(true);
  }
  List<Setting> children=setting.getChildren();
  if (null != children) {
    int childrenSize=children.size();
    for (int x=0; x < childrenSize; x++) {
      remove(children.get(x));
    }
  }
}"
63893,"public void setConverter(Converter valueConverter){
  this.converter=valueConverter;
}","public void setConverter(CONVERTER valueConverter){
  this.converter=valueConverter;
}"
63894,"public Converter getConverter(){
  return this.converter;
}","public CONVERTER getConverter(){
  return this.converter;
}"
63895,"public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=((ObjectBuilder)xmlDescriptor.getObjectBuilder()).classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          XPathQName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator != null) {
              clazz=(Class)indicator;
            }
          }
        }
        if (clazz != null) {
          xmlDescriptor=(Descriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      ObjectBuilder stob2=(ObjectBuilder)xmlDescriptor.getObjectBuilder();
      org.eclipse.persistence.oxm.record.UnmarshalRecord wrapper=(org.eclipse.persistence.oxm.record.UnmarshalRecord)stob2.createRecord(unmarshalRecord.getSession());
      UnmarshalRecord childRecord=wrapper.getUnmarshalRecord();
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument();
      childRecord.initializeRecord(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}","public UnmarshalRecord buildSelfRecord(UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeObjectMapping.getReferenceDescriptor();
    if (null == xmlDescriptor) {
      xmlDescriptor=findReferenceDescriptor(null,unmarshalRecord,atts,xmlCompositeObjectMapping,xmlCompositeObjectMapping.getKeepAsElementPolicy());
    }
    if (xmlDescriptor != null) {
      if (xmlDescriptor.hasInheritance()) {
        unmarshalRecord.setAttributes(atts);
        Class clazz=((ObjectBuilder)xmlDescriptor.getObjectBuilder()).classFromRow(unmarshalRecord,unmarshalRecord.getSession());
        if (clazz == null) {
          XPathQName leafElementType=unmarshalRecord.getLeafElementType();
          if (leafElementType != null) {
            Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
            if (indicator != null) {
              clazz=(Class)indicator;
            }
          }
        }
        if (clazz != null) {
          xmlDescriptor=(Descriptor)unmarshalRecord.getSession().getDescriptor(clazz);
        }
 else {
          if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
            throw DescriptorException.missingClassIndicatorField(unmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
          }
        }
      }
      UnmarshalRecord childRecord=unmarshalRecord.getUnmarshaller().createUnmarshalRecord(xmlDescriptor,unmarshalRecord.getSession());
      childRecord.setUnmarshaller(unmarshalRecord.getUnmarshaller());
      childRecord.setSelfRecord(true);
      unmarshalRecord.setChildRecord(childRecord);
      childRecord.setXMLReader(unmarshalRecord.getXMLReader());
      childRecord.startDocument();
      childRecord.initializeRecord(this.xmlCompositeObjectMapping);
      return childRecord;
    }
 else {
      return null;
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
}"
63896,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    Descriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=null;
    if (xmlReader.isNamespaceAware()) {
      type=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_TYPE_ATTRIBUTE);
    }
 else {
      type=atts.getValue(Constants.EMPTY_STRING,Constants.SCHEMA_TYPE_ATTRIBUTE);
    }
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type,xmlReader.namespaceSeparator,xmlReader.isNamespaceAware());
      if (xmlReader.isNamespaceAware() && null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        QName lookupQName=null;
        if (typeFragment.getNamespaceURI() == null) {
          lookupQName=new QName(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI,typeFragment.getLocalName());
        }
 else {
          lookupQName=new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName());
        }
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(lookupQName);
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      XPathQName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new XPathQName(name,xmlReader.isNamespaceAware());
      }
 else {
        rootQName=new XPathQName(namespaceURI,name,xmlReader.isNamespaceAware());
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(Descriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (!this.keepAsElementPolicy.isKeepNoneAsElement()) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=unmarshaller.createRootUnmarshalRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((CoreAbstractSession)unmarshaller.getContext().getSession());
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecordImpl(null);
      unmarshalRecord.setUnmarshaller(unmarshaller);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setXMLReader(this.getXMLReader());
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(new org.eclipse.persistence.oxm.record.UnmarshalRecord(unmarshalRecord),(CoreAbstractSession)session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator != null) {
            classValue=(Class)indicator;
          }
        }
      }
      if (classValue != null) {
        xmlDescriptor=(Descriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField((XMLRecord)unmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      org.eclipse.persistence.oxm.record.UnmarshalRecord wrapper=(org.eclipse.persistence.oxm.record.UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord((CoreAbstractSession)session);
      unmarshalRecord=wrapper.getUnmarshalRecord();
    }
 else {
      unmarshalRecord=(UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord(session);
      if (unmarshalRecord instanceof org.eclipse.persistence.oxm.record.UnmarshalRecord) {
        org.eclipse.persistence.oxm.record.UnmarshalRecord wrapper=(org.eclipse.persistence.oxm.record.UnmarshalRecord)xmlDescriptor.getObjectBuilder().createRecord((CoreAbstractSession)session);
        unmarshalRecord=wrapper.getUnmarshalRecord();
      }
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(xmlReader.getLocator());
    }
    unmarshalRecord.setAttributes(atts);
    boolean hasNilAttribute=(atts != null && null != atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE));
    unmarshalRecord.setNil(isNil || hasNilAttribute);
    unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    unmarshalRecord.startDocument();
    unmarshalRecord.initializeRecord((Mapping)null);
    xmlReader.setContentHandler(unmarshalRecord);
    xmlReader.setLexicalHandler(unmarshalRecord);
    Object attributeGroup=this.unmarshaller.getUnmarshalAttributeGroup();
    if (attributeGroup != null) {
      if (attributeGroup.getClass() == CoreClassConstants.STRING) {
        CoreAttributeGroup group=descriptor.getAttributeGroup((String)attributeGroup);
        if (group != null) {
          unmarshalRecord.setUnmarshalAttributeGroup(group);
        }
 else {
        }
      }
 else       if (attributeGroup instanceof CoreAttributeGroup) {
        unmarshalRecord.setUnmarshalAttributeGroup((CoreAttributeGroup)attributeGroup);
      }
 else {
      }
    }
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    Descriptor xmlDescriptor=null;
    boolean isPrimitiveType=false;
    Class primitiveWrapperClass=null;
    String type=null;
    if (xmlReader.isNamespaceAware()) {
      type=atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_TYPE_ATTRIBUTE);
    }
 else {
      type=atts.getValue(Constants.EMPTY_STRING,Constants.SCHEMA_TYPE_ATTRIBUTE);
    }
    if (null != type) {
      XPathFragment typeFragment=new XPathFragment(type,xmlReader.namespaceSeparator,xmlReader.isNamespaceAware());
      if (xmlReader.isNamespaceAware() && null != unmarshalNamespaceResolver) {
        typeFragment.setNamespaceURI(unmarshalNamespaceResolver.getNamespaceURI(typeFragment.getPrefix()));
      }
      xmlDescriptor=xmlContext.getDescriptorByGlobalType(typeFragment);
      if (xmlDescriptor == null) {
        QName lookupQName=null;
        if (typeFragment.getNamespaceURI() == null) {
          lookupQName=new QName(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI,typeFragment.getLocalName());
        }
 else {
          lookupQName=new QName(typeFragment.getNamespaceURI(),typeFragment.getLocalName());
        }
        primitiveWrapperClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(lookupQName);
      }
    }
    if (xmlDescriptor == null) {
      String name;
      if (localName == null || localName.length() == 0) {
        name=qName;
      }
 else {
        name=localName;
      }
      XPathQName rootQName;
      if (namespaceURI == null || namespaceURI.length() == 0) {
        rootQName=new XPathQName(name,xmlReader.isNamespaceAware());
      }
 else {
        rootQName=new XPathQName(namespaceURI,name,xmlReader.isNamespaceAware());
      }
      xmlDescriptor=xmlContext.getDescriptor(rootQName);
      if (null == xmlDescriptor) {
        Object obj=this.xmlReader.getCurrentObject(session,null);
        if (obj != null) {
          xmlDescriptor=(Descriptor)xmlContext.getSession(obj.getClass()).getDescriptor(obj.getClass());
        }
        if (xmlDescriptor == null) {
          isPrimitiveType=primitiveWrapperClass != null;
        }
      }
      if (null == xmlDescriptor && !isPrimitiveType) {
        if (!this.keepAsElementPolicy.isKeepNoneAsElement()) {
          this.documentBuilder=new SAXDocumentBuilder();
          documentBuilder.startDocument();
          for (          String prefix : this.unmarshalNamespaceResolver.getPrefixes()) {
            documentBuilder.startPrefixMapping(prefix,this.unmarshalNamespaceResolver.getNamespaceURI(prefix));
          }
          documentBuilder.startElement(namespaceURI,localName,qName,atts);
          this.xmlReader.setContentHandler(documentBuilder);
          return;
        }
        Class unmappedContentHandlerClass=unmarshaller.getUnmappedContentHandlerClass();
        if (null == unmappedContentHandlerClass) {
          throw XMLMarshalException.noDescriptorWithMatchingRootElement(rootQName.toString());
        }
 else {
          UnmappedContentHandler unmappedContentHandler;
          try {
            PrivilegedNewInstanceFromClass privilegedNewInstanceFromClass=new PrivilegedNewInstanceFromClass(unmappedContentHandlerClass);
            unmappedContentHandler=(UnmappedContentHandler)privilegedNewInstanceFromClass.run();
          }
 catch (          ClassCastException e) {
            throw XMLMarshalException.unmappedContentHandlerDoesntImplement(e,unmappedContentHandlerClass.getName());
          }
catch (          IllegalAccessException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
catch (          InstantiationException e) {
            throw XMLMarshalException.errorInstantiatingUnmappedContentHandler(e,unmappedContentHandlerClass.getName());
          }
          UnmappedContentHandlerWrapper unmappedContentHandlerWrapper=new UnmappedContentHandlerWrapper(unmappedContentHandler,this);
          unmappedContentHandler.startElement(namespaceURI,localName,qName,atts);
          xmlReader.setContentHandler(unmappedContentHandler);
          setObject(unmappedContentHandlerWrapper.getCurrentObject());
          return;
        }
      }
    }
    session=xmlContext.getSession(xmlDescriptor);
    UnmarshalRecord unmarshalRecord;
    if (isPrimitiveType) {
      unmarshalRecord=unmarshaller.createRootUnmarshalRecord(primitiveWrapperClass);
      unmarshalRecord.setSession((CoreAbstractSession)unmarshaller.getContext().getSession());
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
 else     if (xmlDescriptor.hasInheritance()) {
      unmarshalRecord=new UnmarshalRecordImpl(null);
      unmarshalRecord.setUnmarshaller(unmarshaller);
      unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
      unmarshalRecord.setXMLReader(this.getXMLReader());
      unmarshalRecord.setAttributes(atts);
      Class classValue=xmlDescriptor.getInheritancePolicy().classFromRow(new org.eclipse.persistence.oxm.record.UnmarshalRecord(unmarshalRecord),(CoreAbstractSession)session);
      if (classValue == null) {
        QName leafElementType=xmlDescriptor.getDefaultRootElementType();
        if (leafElementType != null) {
          Object indicator=xmlDescriptor.getInheritancePolicy().getClassIndicatorMapping().get(leafElementType);
          if (indicator != null) {
            classValue=(Class)indicator;
          }
        }
      }
      if (classValue != null) {
        xmlDescriptor=(Descriptor)session.getDescriptor(classValue);
      }
 else {
        if (Modifier.isAbstract(xmlDescriptor.getJavaClass().getModifiers())) {
          throw DescriptorException.missingClassIndicatorField((XMLRecord)unmarshalRecord,(org.eclipse.persistence.oxm.XMLDescriptor)xmlDescriptor.getInheritancePolicy().getDescriptor());
        }
      }
      unmarshalRecord=unmarshaller.createUnmarshalRecord(xmlDescriptor,session);
    }
 else {
      unmarshalRecord=unmarshaller.createUnmarshalRecord(xmlDescriptor,session);
      unmarshalRecord.setXMLReader(this.getXMLReader());
    }
    this.descriptor=xmlDescriptor;
    this.rootRecord=unmarshalRecord;
    unmarshalRecord.setUnmarshaller(this.unmarshaller);
    unmarshalRecord.setXMLReader(this.getXMLReader());
    if (locator != null) {
      unmarshalRecord.setDocumentLocator(xmlReader.getLocator());
    }
    unmarshalRecord.setAttributes(atts);
    boolean hasNilAttribute=(atts != null && null != atts.getValue(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE));
    unmarshalRecord.setNil(isNil || hasNilAttribute);
    unmarshalRecord.setUnmarshalNamespaceResolver(unmarshalNamespaceResolver);
    unmarshalRecord.startDocument();
    unmarshalRecord.initializeRecord((Mapping)null);
    xmlReader.setContentHandler(unmarshalRecord);
    xmlReader.setLexicalHandler(unmarshalRecord);
    Object attributeGroup=this.unmarshaller.getUnmarshalAttributeGroup();
    if (attributeGroup != null) {
      if (attributeGroup.getClass() == CoreClassConstants.STRING) {
        CoreAttributeGroup group=descriptor.getAttributeGroup((String)attributeGroup);
        if (group != null) {
          unmarshalRecord.setUnmarshalAttributeGroup(group);
        }
 else {
        }
      }
 else       if (attributeGroup instanceof CoreAttributeGroup) {
        unmarshalRecord.setUnmarshalAttributeGroup((CoreAttributeGroup)attributeGroup);
      }
 else {
      }
    }
    unmarshalRecord.startElement(namespaceURI,localName,qName,atts);
  }
 catch (  EclipseLinkException e) {
    if (null == xmlReader.getErrorHandler()) {
      throw e;
    }
 else {
      SAXParseException saxParseException=new SAXParseException(null,null,null,0,0,e);
      xmlReader.getErrorHandler().error(saxParseException);
    }
  }
}"
63897,"public void reference(Reference reference){
  currentSetting.setObject(reference.getSourceObject());
  currentSetting.setMapping((DatabaseMapping)reference.getMapping());
  reference.setSetting(currentSetting);
}","public void reference(Reference reference){
  currentSetting.setObject(reference.getSourceObject());
  currentSetting.setMapping((CoreMapping)reference.getMapping());
  reference.setSetting(currentSetting);
}"
63898,"public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value,Object collection){
  currentSetting.setMapping((DatabaseMapping)containerValue.getMapping());
  currentSetting.setObject(unmarshalRecord.getCurrentObject());
  currentSetting.addValue(value,true,collection);
}","public void addAttributeValue(UnmarshalRecord unmarshalRecord,ContainerValue containerValue,Object value,Object collection){
  currentSetting.setMapping((CoreMapping)containerValue.getMapping());
  currentSetting.setObject(unmarshalRecord.getCurrentObject());
  currentSetting.addValue(value,true,collection);
}"
63899,"public void setAttributeValue(UnmarshalRecord unmarshalRecord,Object value,Mapping mapping){
  currentSetting.setMapping((DatabaseMapping)mapping);
  currentSetting.setObject(unmarshalRecord.getCurrentObject());
  currentSetting.setValue(value);
}","public void setAttributeValue(UnmarshalRecord unmarshalRecord,Object value,Mapping mapping){
  currentSetting.setMapping((CoreMapping)mapping);
  currentSetting.setObject(unmarshalRecord.getCurrentObject());
  currentSetting.setValue(value);
}"
63900,"public void setChoiceFieldToClassAssociations(ArrayList associations){
  if (associations.size() > 0) {
    for (    Object next : associations) {
      XMLChoiceFieldToClassAssociation<XMLField> association=(XMLChoiceFieldToClassAssociation)next;
      this.addChoiceElement(association.getXmlField(),association.getClassName());
      if (association.getConverter() != null) {
        this.addConverter(association.getXmlField(),association.getConverter());
      }
    }
  }
}","public void setChoiceFieldToClassAssociations(ArrayList associations){
  if (associations.size() > 0) {
    for (    Object next : associations) {
      XMLChoiceFieldToClassAssociation<Converter,XMLField> association=(XMLChoiceFieldToClassAssociation)next;
      this.addChoiceElement(association.getXmlField(),association.getClassName());
      if (association.getConverter() != null) {
        this.addConverter(association.getXmlField(),association.getConverter());
      }
    }
  }
}"
63901,"public void setChoiceFieldToClassAssociations(ArrayList associations){
  if (associations.size() > 0) {
    for (    Object next : associations) {
      XMLChoiceFieldToClassAssociation association=(XMLChoiceFieldToClassAssociation)next;
      this.addChoiceElement((XMLField)association.getXmlField(),association.getClassName());
      if (association.getConverter() != null) {
        this.addConverter((XMLField)association.getXmlField(),association.getConverter());
      }
    }
  }
}","public void setChoiceFieldToClassAssociations(ArrayList associations){
  if (associations.size() > 0) {
    for (    Object next : associations) {
      XMLChoiceFieldToClassAssociation<Converter,XMLField> association=(XMLChoiceFieldToClassAssociation<Converter,XMLField>)next;
      this.addChoiceElement(association.getXmlField(),association.getClassName());
      if (association.getConverter() != null) {
        this.addConverter(association.getXmlField(),association.getConverter());
      }
    }
  }
}"
63902,"private ArrayList<Property> removeSuperclassProperties(JavaClass cls,ArrayList<Property> properties){
  ArrayList<Property> revisedProperties=new ArrayList<Property>();
  revisedProperties.addAll(properties);
  JavaClass superClass=cls.getSuperclass();
  if (null != superClass) {
    TypeInfo superClassInfo=typeInfo.get(superClass.getQualifiedName());
    if (superClassInfo != null && !superClassInfo.isTransient()) {
      for (      Property prop : properties) {
        for (        Property superProp : superClassInfo.getProperties().values()) {
          if (superProp.getGetMethodName() != null && superProp.getGetMethodName().equals(prop.getGetMethodName())) {
            revisedProperties.remove(prop);
          }
        }
      }
    }
  }
  return revisedProperties;
}","private ArrayList<Property> removeSuperclassProperties(JavaClass cls,ArrayList<Property> properties){
  ArrayList<Property> revisedProperties=new ArrayList<Property>();
  revisedProperties.addAll(properties);
  JavaClass superClass=cls.getSuperclass();
  if (null != superClass) {
    TypeInfo superClassInfo=typeInfo.get(superClass.getQualifiedName());
    if (superClassInfo != null && !superClassInfo.isTransient()) {
      for (      Property prop : properties) {
        for (        Property superProp : superClassInfo.getProperties().values()) {
          if (superProp.getGetMethodName() != null && superProp.getGetMethodName().equals(prop.getGetMethodName()) && !superProp.isTransient()) {
            revisedProperties.remove(prop);
          }
        }
      }
    }
  }
  return revisedProperties;
}"
63903,"/** 
 * Build a Query for the given ProcedureType instance and add it to the given OR project's list of queries.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void buildQueryForProcedureType(ProcedureType procType,Project orProject,Project oxProject,ProcedureOperationModel opModel,boolean hasPLSQLArgs){
  StoredProcedureCall call;
  ArgumentType returnArg=procType.isFunctionType() ? ((FunctionType)procType).getReturnArgument() : null;
  boolean hasCursor=hasPLSQLCursorArg(getArgumentListForProcedureType(procType));
  hasPLSQLArgs=hasPLSQLArgs || hasCursor || opModel.isPLSQLProcedureOperation();
  if (hasPLSQLArgs) {
    if (procType.isFunctionType()) {
      org.eclipse.persistence.internal.helper.DatabaseType dType=buildDatabaseTypeFromMetadataType(returnArg,procType.getCatalogName());
      if (hasCursor) {
        call=new PLSQLStoredFunctionCall();
        ((PLSQLStoredFunctionCall)call).getArguments().remove(0);
        ((PLSQLStoredFunctionCall)call).useNamedCursorOutputAsResultSet(CURSOR_STR,dType);
      }
 else {
        Class wrapperClass=getWrapperClass(dType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)dType).setJavaType(wrapperClass);
        }
        call=new PLSQLStoredFunctionCall(dType);
        if (returnArg.getEnclosedType().isPLSQLCollectionType() && !((PLSQLCollectionType)returnArg.getEnclosedType()).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredFunctionCall)call).getArguments().get(0);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
    }
 else {
      call=new PLSQLStoredProcedureCall();
    }
  }
 else {
    if (procType.isFunctionType()) {
      String javaTypeName=returnArg.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(getGeneratedAlias(javaTypeName));
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
      if (returnArg.isComposite()) {
        DatabaseType dataType=returnArg.getEnclosedType();
        if (dataType.isVArrayType() || dataType.isObjectTableType()) {
          call=new StoredFunctionCall(Types.ARRAY,returnArg.getTypeName(),javaTypeName,buildFieldForNestedType(dataType));
        }
 else {
          call=new StoredFunctionCall(Types.STRUCT,returnArg.getTypeName(),javaTypeName);
        }
      }
 else {
        call=new StoredFunctionCall();
        if (returnArg.getEnclosedType().isBlobType()) {
          ((StoredFunctionCall)call).setResult(null,ClassConstants.BLOB);
        }
 else {
          int resultType=Util.getJDBCTypeFromTypeName(javaTypeName);
          if (resultType == Types.DATE || resultType == Types.TIME || resultType == Types.TIMESTAMP) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.TIMESTAMP);
          }
 else           if (returnArg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            ((StoredFunctionCall)call).setResult(null,Types.SQLXML);
          }
 else           if (resultType == Types.OTHER || resultType == Types.CLOB) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.OBJECT);
          }
 else {
            ((StoredFunctionCall)call).setResult(null,resultType);
          }
        }
      }
    }
 else {
      call=new StoredProcedureCall();
    }
  }
  String cat=procType.getCatalogName();
  String catalogPrefix=(cat == null || cat.length() == 0) ? EMPTY_STRING : cat + DOT;
  call.setProcedureName(catalogPrefix + procType.getProcedureName());
  String returnType=opModel.getReturnType();
  boolean hasResponse=returnType != null;
  DatabaseQuery dq=null;
  if (hasCursor || (hasResponse && opModel.isCollection())) {
    dq=new DataReadQuery();
  }
 else {
    dq=new ValueReadQuery();
  }
  dq.bindAllParameters();
  dq.setName(getNameForQueryOperation(opModel,procType));
  dq.setCall(call);
  for (  ArgumentType arg : procType.getArguments()) {
    if (arg.optional()) {
      call.addOptionalArgument(arg.getArgumentName());
    }
    DatabaseType argType=arg.getEnclosedType();
    ArgumentTypeDirection direction=arg.getDirection();
    org.eclipse.persistence.internal.helper.DatabaseType databaseType=null;
    String javaTypeName=null;
    if (hasPLSQLArgs) {
      databaseType=buildDatabaseTypeFromMetadataType(argType,cat);
    }
 else {
      javaTypeName=argType.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(getGeneratedAlias(javaTypeName));
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
    }
    if (direction == IN) {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        if (argType.isVArrayType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectTableType()) {
          dq.addArgument(arg.getArgumentName(),java.sql.Array.class);
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),getWrapperClass(javaTypeName),buildFieldForNestedType(argType));
        }
 else {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
        }
      }
    }
 else     if (direction == OUT) {
      if (hasPLSQLArgs) {
        if (arg.isPLSQLCursorType()) {
          ((PLSQLStoredProcedureCall)call).useNamedCursorOutputAsResultSet(arg.getArgumentName(),databaseType);
        }
 else {
          Class wrapperClass=getWrapperClass(databaseType);
          if (wrapperClass != null) {
            ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
          }
          ((PLSQLStoredProcedureCall)call).addNamedOutputArgument(arg.getArgumentName(),databaseType);
        }
      }
 else {
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),wrapperClass);
          }
        }
 else {
          if (argType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.SQLXML);
          }
 else           if (argType == ScalarDatabaseTypeEnum.SYS_REFCURSOR_TYPE) {
            call.addNamedCursorOutputArgument(arg.getArgumentName());
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
          }
        }
      }
    }
 else {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedInOutputArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        dq.addArgument(arg.getArgumentName());
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName());
          }
        }
 else {
          Class javaType=getClassFromJDBCType(argType.getTypeName(),dbwsBuilder.getDatabasePlatform());
          if (shouldSetJavaType(javaType.getName())) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()),argType.getTypeName(),javaType);
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName());
          }
        }
      }
    }
    if (hasPLSQLArgs && (direction == IN || direction == INOUT)) {
      ClassDescriptor xdesc=null;
      if (hasResponse) {
        int idx=returnType.indexOf(COLON);
        if (idx == -1) {
          idx=returnType.indexOf(CLOSE_PAREN);
        }
        if (idx > 0) {
          String typ=returnType.substring(idx + 1);
          for (          XMLDescriptor xd : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
            if (xd.getSchemaReference() != null) {
              String context=xd.getSchemaReference().getSchemaContext();
              if (context.substring(1).equals(typ)) {
                xdesc=xd;
                break;
              }
            }
          }
        }
      }
      if (xdesc != null) {
        dq.addArgumentByTypeName(arg.getArgumentName(),xdesc.getJavaClassName());
      }
 else {
        if (databaseType instanceof PLSQLCollection || databaseType instanceof VArrayType) {
          dq.addArgument(arg.getArgumentName(),Array.class);
        }
 else         if (databaseType instanceof PLSQLrecord || databaseType instanceof OracleObjectType) {
          dq.addArgument(arg.getArgumentName(),Struct.class);
        }
 else {
          dq.addArgument(arg.getArgumentName(),JDBCTypes.getClassForCode(databaseType.getConversionCode()));
        }
      }
    }
  }
  orProject.getQueries().add(dq);
}","/** 
 * Build a Query for the given ProcedureType instance and add it to the given OR project's list of queries.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void buildQueryForProcedureType(ProcedureType procType,Project orProject,Project oxProject,ProcedureOperationModel opModel,boolean hasPLSQLArgs){
  StoredProcedureCall call;
  ArgumentType returnArg=procType.isFunctionType() ? ((FunctionType)procType).getReturnArgument() : null;
  boolean hasCursor=hasPLSQLCursorArg(getArgumentListForProcedureType(procType));
  hasPLSQLArgs=hasPLSQLArgs || hasCursor || opModel.isPLSQLProcedureOperation();
  if (hasPLSQLArgs) {
    if (procType.isFunctionType()) {
      org.eclipse.persistence.internal.helper.DatabaseType dType=buildDatabaseTypeFromMetadataType(returnArg,procType.getCatalogName());
      if (hasCursor) {
        call=new PLSQLStoredFunctionCall();
        ((PLSQLStoredFunctionCall)call).getArguments().remove(0);
        ((PLSQLStoredFunctionCall)call).useNamedCursorOutputAsResultSet(CURSOR_STR,dType);
      }
 else {
        Class wrapperClass=getWrapperClass(dType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)dType).setJavaType(wrapperClass);
        }
        call=new PLSQLStoredFunctionCall(dType);
        if (returnArg.getEnclosedType().isPLSQLCollectionType() && !((PLSQLCollectionType)returnArg.getEnclosedType()).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredFunctionCall)call).getArguments().get(0);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
    }
 else {
      call=new PLSQLStoredProcedureCall();
    }
  }
 else {
    if (procType.isFunctionType()) {
      String javaTypeName=returnArg.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(getGeneratedAlias(javaTypeName));
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
      if (returnArg.isComposite()) {
        DatabaseType dataType=returnArg.getEnclosedType();
        if (dataType.isVArrayType() || dataType.isObjectTableType()) {
          call=new StoredFunctionCall(Types.ARRAY,returnArg.getTypeName(),javaTypeName,buildFieldForNestedType(dataType));
        }
 else {
          call=new StoredFunctionCall(Types.STRUCT,returnArg.getTypeName(),javaTypeName);
        }
      }
 else {
        call=new StoredFunctionCall();
        if (returnArg.getEnclosedType().isBlobType()) {
          ((StoredFunctionCall)call).setResult(null,ClassConstants.BLOB);
        }
 else {
          int resultType=Util.getJDBCTypeFromTypeName(javaTypeName);
          if (resultType == Types.DATE || resultType == Types.TIME || resultType == Types.TIMESTAMP) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.TIMESTAMP);
          }
 else           if (returnArg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            ((StoredFunctionCall)call).setResult(getJDBCTypeForTypeName(XMLTYPE_STR),XMLTYPE_STR,ClassConstants.OBJECT);
          }
 else           if (resultType == Types.OTHER || resultType == Types.CLOB) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.OBJECT);
          }
 else {
            ((StoredFunctionCall)call).setResult(null,resultType);
          }
        }
      }
    }
 else {
      call=new StoredProcedureCall();
    }
  }
  String cat=procType.getCatalogName();
  String catalogPrefix=(cat == null || cat.length() == 0) ? EMPTY_STRING : cat + DOT;
  call.setProcedureName(catalogPrefix + procType.getProcedureName());
  String returnType=opModel.getReturnType();
  boolean hasResponse=returnType != null;
  DatabaseQuery dq=null;
  if (hasCursor || (hasResponse && opModel.isCollection())) {
    dq=new DataReadQuery();
  }
 else {
    dq=new ValueReadQuery();
  }
  dq.bindAllParameters();
  dq.setName(getNameForQueryOperation(opModel,procType));
  dq.setCall(call);
  for (  ArgumentType arg : procType.getArguments()) {
    if (arg.optional()) {
      call.addOptionalArgument(arg.getArgumentName());
    }
    DatabaseType argType=arg.getEnclosedType();
    ArgumentTypeDirection direction=arg.getDirection();
    org.eclipse.persistence.internal.helper.DatabaseType databaseType=null;
    String javaTypeName=null;
    if (hasPLSQLArgs) {
      databaseType=buildDatabaseTypeFromMetadataType(argType,cat);
    }
 else {
      javaTypeName=argType.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(getGeneratedAlias(javaTypeName));
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
    }
    if (direction == IN) {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        if (argType.isVArrayType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectTableType()) {
          dq.addArgument(arg.getArgumentName(),java.sql.Array.class);
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),getWrapperClass(javaTypeName),buildFieldForNestedType(argType));
        }
 else {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
        }
      }
    }
 else     if (direction == OUT) {
      if (hasPLSQLArgs) {
        if (arg.isPLSQLCursorType()) {
          ((PLSQLStoredProcedureCall)call).useNamedCursorOutputAsResultSet(arg.getArgumentName(),databaseType);
        }
 else {
          Class wrapperClass=getWrapperClass(databaseType);
          if (wrapperClass != null) {
            ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
          }
          ((PLSQLStoredProcedureCall)call).addNamedOutputArgument(arg.getArgumentName(),databaseType);
        }
      }
 else {
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),wrapperClass);
          }
        }
 else {
          if (argType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),getJDBCTypeForTypeName(XMLTYPE_STR),XMLTYPE_STR);
          }
 else           if (argType == ScalarDatabaseTypeEnum.SYS_REFCURSOR_TYPE) {
            call.addNamedCursorOutputArgument(arg.getArgumentName());
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
          }
        }
      }
    }
 else {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedInOutputArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        dq.addArgument(arg.getArgumentName());
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName());
          }
        }
 else {
          Class javaType=getClassFromJDBCType(argType.getTypeName(),dbwsBuilder.getDatabasePlatform());
          if (shouldSetJavaType(javaType.getName())) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()),argType.getTypeName(),javaType);
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName());
          }
        }
      }
    }
    if (hasPLSQLArgs && (direction == IN || direction == INOUT)) {
      ClassDescriptor xdesc=null;
      if (hasResponse) {
        int idx=returnType.indexOf(COLON);
        if (idx == -1) {
          idx=returnType.indexOf(CLOSE_PAREN);
        }
        if (idx > 0) {
          String typ=returnType.substring(idx + 1);
          for (          XMLDescriptor xd : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
            if (xd.getSchemaReference() != null) {
              String context=xd.getSchemaReference().getSchemaContext();
              if (context.substring(1).equals(typ)) {
                xdesc=xd;
                break;
              }
            }
          }
        }
      }
      if (xdesc != null) {
        dq.addArgumentByTypeName(arg.getArgumentName(),xdesc.getJavaClassName());
      }
 else {
        if (databaseType instanceof PLSQLCollection || databaseType instanceof VArrayType) {
          dq.addArgument(arg.getArgumentName(),Array.class);
        }
 else         if (databaseType instanceof PLSQLrecord || databaseType instanceof OracleObjectType) {
          dq.addArgument(arg.getArgumentName(),Struct.class);
        }
 else {
          dq.addArgument(arg.getArgumentName(),JDBCTypes.getClassForCode(databaseType.getConversionCode()));
        }
      }
    }
  }
  orProject.getQueries().add(dq);
}"
63904,"/** 
 * Builds query operations for a given ProcedureOperationModel.
 */
public void buildProcedureOperation(ProcedureOperationModel procedureOperationModel){
  for (  ProcedureType storedProcedure : procedureOperationModel.getDbStoredProcedures()) {
    boolean hasComplexArgs=hasComplexArgs(storedProcedure);
    QueryOperation qo=new QueryOperation();
    qo.setName(getNameForQueryOperation(procedureOperationModel,storedProcedure));
    String qualifiedProcName=getQualifiedProcedureName(procedureOperationModel,storedProcedure);
    dbwsBuilder.logMessage(FINEST,BUILDING_QUERYOP_FOR + qualifiedProcName);
    QueryHandler qh=null;
    List<DatabaseQuery> queries=dbwsBuilder.getOrProject().getQueries();
    if (queries.size() > 0) {
      for (      DatabaseQuery q : queries) {
        if (q.getName().equals(qo.getName())) {
          qh=new NamedQueryHandler();
          ((NamedQueryHandler)qh).setName(qo.getName());
        }
      }
    }
    if (qh == null) {
      if (storedProcedure.isFunctionType()) {
        qh=new StoredFunctionQueryHandler();
      }
 else {
        qh=new StoredProcedureQueryHandler();
      }
      ((StoredProcedureQueryHandler)qh).setName(qualifiedProcName);
    }
    qo.setQueryHandler(qh);
    String returnType=procedureOperationModel.getReturnType();
    boolean isCollection=procedureOperationModel.isCollection();
    boolean isSimpleXMLFormat=procedureOperationModel.isSimpleXMLFormat();
    Result result=null;
    int outArgCount=0;
    for (    ArgumentType argument : storedProcedure.getArguments()) {
      ArgumentTypeDirection argDirection=argument.getDirection();
      if (argDirection == OUT) {
        outArgCount++;
      }
    }
    if (outArgCount > 1 || (outArgCount > 0 && storedProcedure.isFunctionType())) {
      isCollection=true;
      isSimpleXMLFormat=true;
      result=new CollectionResult();
      result.setType(ANY_QNAME);
    }
 else {
      if (storedProcedure.isFunctionType()) {
        ArgumentType returnArg=((FunctionType)storedProcedure).getReturnArgument();
        result=buildResultForStoredFunction(returnArg,returnType);
        if (returnArg.getEnclosedType().isPLSQLCursorType()) {
          customizeSimpleXMLTagNames((PLSQLCursorType)returnArg.getEnclosedType(),procedureOperationModel);
        }
      }
 else       if (hasComplexArgs) {
        if (Util.noOutArguments(storedProcedure)) {
          result=new Result();
          result.setType(new QName(SCHEMA_URL,INT,SCHEMA_PREFIX));
        }
      }
 else {
        if (returnType != null) {
          result=new Result();
          result.setType(buildCustomQName(returnType,dbwsBuilder));
        }
 else {
          if (isCollection) {
            result=new CollectionResult();
            if (isSimpleXMLFormat) {
              result.setType(SXF_QNAME_CURSOR);
            }
          }
 else {
            result=new Result();
            result.setType(SXF_QNAME);
          }
        }
      }
    }
    for (    ArgumentType arg : storedProcedure.getArguments()) {
      String argName=arg.getArgumentName();
      if (argName != null) {
        QName xmlType=null;
        ProcedureArgument pa=null;
        ProcedureArgument paShadow=null;
        Parameter parm=null;
        ArgumentTypeDirection direction=arg.getDirection();
        if (!hasComplexArgs) {
          if (arg.getEnclosedType().isPLSQLCursorType()) {
            PLSQLCursorType cursorType=(PLSQLCursorType)arg.getEnclosedType();
            if (cursorType.isWeaklyTyped()) {
              xmlType=buildCustomQName(""String_Node_Str"",dbwsBuilder);
            }
          }
 else {
            xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
          }
        }
 else {
          if (arg.getEnclosedType().isPLSQLType()) {
            String packageName=((PLSQLType)arg.getEnclosedType()).getParentType().getPackageName();
            String typeString=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + arg.getTypeName() : arg.getTypeName();
            typeString=typeString.contains(PERCENT) ? typeString.replace(PERCENT,UNDERSCORE) : typeString;
            xmlType=buildCustomQName(nct.generateSchemaAlias(typeString),dbwsBuilder);
          }
 else           if (arg.getEnclosedType().isVArrayType() || arg.getEnclosedType().isObjectType() || arg.getEnclosedType().isObjectTableType()) {
            xmlType=buildCustomQName(nct.generateSchemaAlias(arg.getTypeName()),dbwsBuilder);
          }
 else {
switch (Util.getJDBCTypeFromTypeName(arg.getTypeName())) {
case STRUCT:
case ARRAY:
              String typeString=nct.generateSchemaAlias(arg.getTypeName());
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          break;
default :
        xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
      break;
  }
}
}
if (direction == null || direction == IN) {
parm=new Parameter();
parm.setName(argName);
parm.setType(xmlType);
parm.setOptional(arg.optional());
pa=new ProcedureArgument();
pa.setName(argName);
pa.setParameterName(argName);
if (qh instanceof StoredProcedureQueryHandler) {
  ((StoredProcedureQueryHandler)qh).getInArguments().add(pa);
}
}
 else {
pa=new ProcedureOutputArgument();
ProcedureOutputArgument pao=(ProcedureOutputArgument)pa;
pao.setName(argName);
pao.setParameterName(argName);
boolean isCursor=arg.isPLSQLCursorType() || arg.getTypeName().contains(CURSOR_STR);
if (arg.isPLSQLCursorType()) {
  customizeSimpleXMLTagNames((PLSQLCursorType)arg.getEnclosedType(),procedureOperationModel);
}
if (isCursor && returnType == null) {
  pao.setResultType(SXF_QNAME_CURSOR);
  if (result == null) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
}
 else {
  if (returnType != null && !isSimpleXMLFormat) {
    xmlType=qNameFromString(OPEN_PAREN + dbwsBuilder.getTargetNamespace() + CLOSE_PAREN+ returnType,dbwsBuilder.getSchema());
  }
  if (isCursor) {
    pao.setResultType(new QName(EMPTY_STRING,CURSOR_OF_STR + returnType));
    Result newResult=new CollectionResult();
    newResult.setType(result.getType());
    result=newResult;
  }
 else {
    pao.setResultType(xmlType);
  }
  if (result == null) {
    if (isCollection) {
      result=new CollectionResult();
    }
 else {
      result=new Result();
    }
    result.setType(xmlType);
  }
}
if (direction == INOUT) {
  parm=new Parameter();
  parm.setName(argName);
  parm.setType(xmlType);
  result.setType(xmlType);
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getInOutArguments().add(pao);
  }
  paShadow=new ProcedureArgument();
  paShadow.setName(argName);
  paShadow.setParameterName(argName);
}
 else {
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getOutArguments().add(pao);
  }
}
}
if (arg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
pa.setJdbcType(getJDBCTypeForTypeName(ScalarDatabaseTypeEnum.XMLTYPE_TYPE.toString()));
}
if (hasComplexArgs && arg.getEnclosedType().isPLSQLType()) {
pa.setComplexTypeName(storedProcedure.getCatalogName() + UNDERSCORE + arg.getTypeName());
if (paShadow != null) {
  paShadow.setComplexTypeName(pa.getComplexTypeName());
}
}
if (parm != null) {
qo.getParameters().add(parm);
}
}
}
if (procedureOperationModel.getBinaryAttachment()) {
Attachment attachment=new Attachment();
attachment.setMimeType(APP_OCTET_STREAM);
result.setAttachment(attachment);
}
handleSimpleXMLFormat(isSimpleXMLFormat,result,procedureOperationModel);
qo.setResult(result);
dbwsBuilder.getXrServiceModel().getOperations().put(qo.getName(),qo);
}
finishProcedureOperation();
}","/** 
 * Builds query operations for a given ProcedureOperationModel.
 */
public void buildProcedureOperation(ProcedureOperationModel procedureOperationModel){
  for (  ProcedureType storedProcedure : procedureOperationModel.getDbStoredProcedures()) {
    boolean hasComplexArgs=hasComplexArgs(storedProcedure);
    QueryOperation qo=new QueryOperation();
    qo.setName(getNameForQueryOperation(procedureOperationModel,storedProcedure));
    String qualifiedProcName=getQualifiedProcedureName(procedureOperationModel,storedProcedure);
    dbwsBuilder.logMessage(FINEST,BUILDING_QUERYOP_FOR + qualifiedProcName);
    QueryHandler qh=null;
    List<DatabaseQuery> queries=dbwsBuilder.getOrProject().getQueries();
    if (queries.size() > 0) {
      for (      DatabaseQuery q : queries) {
        if (q.getName().equals(qo.getName())) {
          qh=new NamedQueryHandler();
          ((NamedQueryHandler)qh).setName(qo.getName());
        }
      }
    }
    if (qh == null) {
      if (storedProcedure.isFunctionType()) {
        qh=new StoredFunctionQueryHandler();
      }
 else {
        qh=new StoredProcedureQueryHandler();
      }
      ((StoredProcedureQueryHandler)qh).setName(qualifiedProcName);
    }
    qo.setQueryHandler(qh);
    String returnType=procedureOperationModel.getReturnType();
    boolean isCollection=procedureOperationModel.isCollection();
    boolean isSimpleXMLFormat=procedureOperationModel.isSimpleXMLFormat();
    Result result=null;
    int outArgCount=0;
    for (    ArgumentType argument : storedProcedure.getArguments()) {
      ArgumentTypeDirection argDirection=argument.getDirection();
      if (argDirection == OUT) {
        outArgCount++;
      }
    }
    if (outArgCount > 1 || (outArgCount > 0 && storedProcedure.isFunctionType())) {
      isCollection=true;
      isSimpleXMLFormat=true;
      result=new CollectionResult();
      result.setType(ANY_QNAME);
    }
 else {
      if (storedProcedure.isFunctionType()) {
        ArgumentType returnArg=((FunctionType)storedProcedure).getReturnArgument();
        result=buildResultForStoredFunction(returnArg,returnType);
        if (returnArg.getEnclosedType().isPLSQLCursorType()) {
          customizeSimpleXMLTagNames((PLSQLCursorType)returnArg.getEnclosedType(),procedureOperationModel);
        }
      }
 else       if (hasComplexArgs) {
        if (Util.noOutArguments(storedProcedure)) {
          result=new Result();
          result.setType(new QName(SCHEMA_URL,INT,SCHEMA_PREFIX));
        }
      }
 else {
        if (returnType != null) {
          result=new Result();
          result.setType(buildCustomQName(returnType,dbwsBuilder));
        }
 else {
          if (isCollection) {
            result=new CollectionResult();
            if (isSimpleXMLFormat) {
              result.setType(SXF_QNAME_CURSOR);
            }
          }
 else {
            result=new Result();
            result.setType(SXF_QNAME);
          }
        }
      }
    }
    for (    ArgumentType arg : storedProcedure.getArguments()) {
      String argName=arg.getArgumentName();
      if (argName != null) {
        QName xmlType=null;
        ProcedureArgument pa=null;
        ProcedureArgument paShadow=null;
        Parameter parm=null;
        ArgumentTypeDirection direction=arg.getDirection();
        if (!hasComplexArgs) {
          if (arg.getEnclosedType().isPLSQLCursorType()) {
            PLSQLCursorType cursorType=(PLSQLCursorType)arg.getEnclosedType();
            if (cursorType.isWeaklyTyped()) {
              xmlType=buildCustomQName(""String_Node_Str"",dbwsBuilder);
            }
          }
 else {
            xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
          }
        }
 else {
          if (arg.getEnclosedType().isPLSQLType()) {
            String packageName=((PLSQLType)arg.getEnclosedType()).getParentType().getPackageName();
            String typeString=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + arg.getTypeName() : arg.getTypeName();
            typeString=typeString.contains(PERCENT) ? typeString.replace(PERCENT,UNDERSCORE) : typeString;
            xmlType=buildCustomQName(nct.generateSchemaAlias(typeString),dbwsBuilder);
          }
 else           if (arg.getEnclosedType().isVArrayType() || arg.getEnclosedType().isObjectType() || arg.getEnclosedType().isObjectTableType()) {
            xmlType=buildCustomQName(nct.generateSchemaAlias(arg.getTypeName()),dbwsBuilder);
          }
 else {
switch (Util.getJDBCTypeFromTypeName(arg.getTypeName())) {
case STRUCT:
case ARRAY:
              String typeString=nct.generateSchemaAlias(arg.getTypeName());
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          break;
default :
        xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
      break;
  }
}
}
if (direction == null || direction == IN) {
parm=new Parameter();
parm.setName(argName);
parm.setType(xmlType);
parm.setOptional(arg.optional());
pa=new ProcedureArgument();
pa.setName(argName);
pa.setParameterName(argName);
if (qh instanceof StoredProcedureQueryHandler) {
  ((StoredProcedureQueryHandler)qh).getInArguments().add(pa);
}
}
 else {
pa=new ProcedureOutputArgument();
ProcedureOutputArgument pao=(ProcedureOutputArgument)pa;
pao.setName(argName);
pao.setParameterName(argName);
boolean isCursor=arg.isPLSQLCursorType() || arg.getTypeName().contains(CURSOR_STR);
if (arg.isPLSQLCursorType()) {
  customizeSimpleXMLTagNames((PLSQLCursorType)arg.getEnclosedType(),procedureOperationModel);
}
if (isCursor && returnType == null) {
  pao.setResultType(SXF_QNAME_CURSOR);
  if (result == null) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
}
 else {
  if (returnType != null && !isSimpleXMLFormat) {
    xmlType=qNameFromString(OPEN_PAREN + dbwsBuilder.getTargetNamespace() + CLOSE_PAREN+ returnType,dbwsBuilder.getSchema());
  }
  if (isCursor) {
    pao.setResultType(new QName(EMPTY_STRING,CURSOR_OF_STR + returnType));
    Result newResult=new CollectionResult();
    newResult.setType(result.getType());
    result=newResult;
  }
 else {
    pao.setResultType(xmlType);
  }
  if (result == null) {
    if (isCollection) {
      result=new CollectionResult();
    }
 else {
      result=new Result();
    }
    result.setType(xmlType);
  }
}
if (direction == INOUT) {
  parm=new Parameter();
  parm.setName(argName);
  parm.setType(xmlType);
  result.setType(xmlType);
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getInOutArguments().add(pao);
  }
  paShadow=new ProcedureArgument();
  paShadow.setName(argName);
  paShadow.setParameterName(argName);
}
 else {
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getOutArguments().add(pao);
  }
}
}
if (arg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
pa.setJdbcType(getJDBCTypeForTypeName(XMLTYPE_STR));
}
if (hasComplexArgs && arg.getEnclosedType().isPLSQLType()) {
pa.setComplexTypeName(storedProcedure.getCatalogName() + UNDERSCORE + arg.getTypeName());
if (paShadow != null) {
  paShadow.setComplexTypeName(pa.getComplexTypeName());
}
}
if (parm != null) {
qo.getParameters().add(parm);
}
}
}
if (procedureOperationModel.getBinaryAttachment()) {
Attachment attachment=new Attachment();
attachment.setMimeType(APP_OCTET_STREAM);
result.setAttachment(attachment);
}
handleSimpleXMLFormat(isSimpleXMLFormat,result,procedureOperationModel);
qo.setResult(result);
dbwsBuilder.getXrServiceModel().getOperations().put(qo.getName(),qo);
}
finishProcedureOperation();
}"
63905,"/** 
 * Build and return a Result instance based on a given ProcedureType and return type name.
 */
protected Result buildResultForStoredFunction(ArgumentType returnArgument,String returnType){
  Result result=null;
  DatabaseType rargDataType=returnArgument.getEnclosedType();
  if (rargDataType.isPLSQLCursorType() || returnArgument.getTypeName().contains(CURSOR_STR)) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
 else {
    result=new Result();
    int rargJdbcType=OTHER;
    if (rargDataType.isComposite()) {
      if (rargDataType.isObjectType()) {
        rargJdbcType=STRUCT;
      }
 else       if (rargDataType.isVArrayType() || rargDataType.isObjectTableType()) {
        rargJdbcType=ARRAY;
      }
    }
 else {
      rargJdbcType=Util.getJDBCTypeFromTypeName(returnArgument.getTypeName());
    }
switch (rargJdbcType) {
case OTHER:
      String returnTypeName;
    if (returnType != null && returnType.length() > 0) {
      returnTypeName=returnType;
    }
 else {
      returnType=rargDataType.getTypeName();
      String packageName=null;
      if (rargDataType.isPLSQLType()) {
        packageName=((PLSQLType)rargDataType).getParentType().getPackageName();
      }
      returnTypeName=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + returnType : returnType;
      returnTypeName=returnTypeName.contains(PERCENT) ? returnTypeName.replace(PERCENT,UNDERSCORE) : returnTypeName;
      returnTypeName=nct.generateSchemaAlias(returnTypeName);
    }
  result.setType(buildCustomQName(returnTypeName,dbwsBuilder));
break;
case STRUCT:
case ARRAY:
if (returnType == null || returnType.length() == 0) {
returnType=rargDataType.getTypeName().toLowerCase().concat(TYPE_STR);
}
result.setType(buildCustomQName(returnType,dbwsBuilder));
break;
default :
result.setType(getXMLTypeFromJDBCType(rargJdbcType));
break;
}
}
if (rargDataType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
result.setJdbcType(getJDBCTypeForTypeName(ScalarDatabaseTypeEnum.XMLTYPE_TYPE.toString()));
}
return result;
}","/** 
 * Build and return a Result instance based on a given ProcedureType and return type name.
 */
protected Result buildResultForStoredFunction(ArgumentType returnArgument,String returnType){
  Result result=null;
  DatabaseType rargDataType=returnArgument.getEnclosedType();
  if (rargDataType.isPLSQLCursorType() || returnArgument.getTypeName().contains(CURSOR_STR)) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
 else {
    result=new Result();
    int rargJdbcType=OTHER;
    if (rargDataType.isComposite()) {
      if (rargDataType.isObjectType()) {
        rargJdbcType=STRUCT;
      }
 else       if (rargDataType.isVArrayType() || rargDataType.isObjectTableType()) {
        rargJdbcType=ARRAY;
      }
    }
 else {
      rargJdbcType=Util.getJDBCTypeFromTypeName(returnArgument.getTypeName());
    }
switch (rargJdbcType) {
case OTHER:
      String returnTypeName;
    if (returnType != null && returnType.length() > 0) {
      returnTypeName=returnType;
    }
 else {
      returnType=rargDataType.getTypeName();
      String packageName=null;
      if (rargDataType.isPLSQLType()) {
        packageName=((PLSQLType)rargDataType).getParentType().getPackageName();
      }
      returnTypeName=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + returnType : returnType;
      returnTypeName=returnTypeName.contains(PERCENT) ? returnTypeName.replace(PERCENT,UNDERSCORE) : returnTypeName;
      returnTypeName=nct.generateSchemaAlias(returnTypeName);
    }
  result.setType(buildCustomQName(returnTypeName,dbwsBuilder));
break;
case STRUCT:
case ARRAY:
if (returnType == null || returnType.length() == 0) {
returnType=rargDataType.getTypeName().toLowerCase().concat(TYPE_STR);
}
result.setType(buildCustomQName(returnType,dbwsBuilder));
break;
default :
result.setType(getXMLTypeFromJDBCType(rargJdbcType));
break;
}
}
if (rargDataType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
result.setJdbcType(getJDBCTypeForTypeName(XMLTYPE_STR));
}
return result;
}"
63906,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  String value=unmarshalRecord.getCharacters().toString();
  unmarshalRecord.resetStringBuffer();
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  if (xmlField.usesSingleNode()) {
    StringTokenizer stringTokenizer=new StringTokenizer(value);
    while (stringTokenizer.hasMoreTokens()) {
      addUnmarshalValue(unmarshalRecord,stringTokenizer.nextToken(),collection);
    }
  }
 else {
    if (xmlField.getLastXPathFragment().nameIsText()) {
      if (!unmarshalRecord.getXMLReader().isInCollection() && unmarshalRecord.isNil()) {
        unmarshalRecord.setAttributeValueNull(this);
      }
 else {
        addUnmarshalValue(unmarshalRecord,value,collection);
      }
    }
  }
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  Object value=unmarshalRecord.getCharacters().toString();
  if (((String)value).length() == 0 && !xmlField.usesSingleNode()) {
    if (xmlCompositeDirectCollectionMapping.getNullValue() != null) {
      value=xmlCompositeDirectCollectionMapping.getNullValue();
    }
  }
  unmarshalRecord.resetStringBuffer();
  if (xmlField.usesSingleNode() && value instanceof String) {
    StringTokenizer stringTokenizer=new StringTokenizer((String)value);
    while (stringTokenizer.hasMoreTokens()) {
      addUnmarshalValue(unmarshalRecord,stringTokenizer.nextToken(),collection);
    }
  }
 else {
    if (xmlField.getLastXPathFragment().nameIsText()) {
      if (!unmarshalRecord.getXMLReader().isInCollection() && unmarshalRecord.isNil()) {
        unmarshalRecord.setAttributeValueNull(this);
      }
 else {
        addUnmarshalValue(unmarshalRecord,value,collection);
      }
    }
  }
}"
63907,"private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
if (size == 1) {
CommonTree ct=(CommonTree)tree.getChild(0);
if (ct != null && ct.getType() == JSONLexer.NULL) {
contentHandler.setNil(true);
}
if (!isTextValue) {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(ct,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
parse(ct);
if (!isTextValue) {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
 else {
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
  XPathFragment currentFragment=new XPathFragment();
  currentFragment.setLocalName(parentLocalName);
  currentFragment.setNamespaceURI(uri);
  currentFragment.setNamespaceAware(namespaceAware);
  XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
  if (groupingXPathNode != null) {
    if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
      groupingXPathFragment=groupingXPathNode.getXPathFragment();
      contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
      XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
      itemXPathFragment=itemXPathNode.getXPathFragment();
    }
 else     if (groupingXPathNode.getUnmarshalNodeValue() == null) {
      XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
      if (itemXPathNode != null) {
        if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
          groupingXPathFragment=groupingXPathNode.getXPathFragment();
          contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
          itemXPathFragment=itemXPathNode.getXPathFragment();
        }
      }
    }
  }
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
  contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
  contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
  contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
  contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}","private void parse(Tree tree) throws SAXException {
  if (tree == null) {
    return;
  }
switch (tree.getType()) {
case JSONLexer.PAIR:
{
      Tree valueTree=tree.getChild(1);
      if (valueTree.getType() == JSONLexer.ARRAY) {
        parse(valueTree);
      }
 else {
        Tree stringTree=tree.getChild(0);
        String qualifiedName=stringTree.getText().substring(1,stringTree.getText().length() - 1);
        String localName=qualifiedName;
        if (attributePrefix != null && qualifiedName.startsWith(attributePrefix)) {
          break;
        }
        String uri=Constants.EMPTY_STRING;
        if (namespaceAware && namespaces != null) {
          if (localName.length() > 2) {
            int nsIndex=localName.indexOf(namespaceSeparator,1);
            String prefix=Constants.EMPTY_STRING;
            if (nsIndex > -1) {
              prefix=localName.substring(0,nsIndex);
            }
            uri=namespaces.resolveNamespacePrefix(prefix);
            if (uri == null) {
              uri=namespaces.getDefaultNamespaceURI();
            }
 else {
              localName=localName.substring(nsIndex + 1);
            }
            if (localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && uri.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI)) {
              break;
            }
          }
 else {
            uri=namespaces.getDefaultNamespaceURI();
          }
        }
        if (contentHandler instanceof XMLRootRecord || contentHandler instanceof DeferredContentHandler) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE)) {
            break;
          }
          if (textWrapper != null && textWrapper.equals(localName)) {
            parse(valueTree);
            break;
          }
        }
 else         if (contentHandler instanceof UnmarshalRecord && ((UnmarshalRecord)contentHandler).getXPathNode() != null) {
          if (!namespaceAware && localName.equals(Constants.SCHEMA_TYPE_ATTRIBUTE) && !((UnmarshalRecord)contentHandler).getXPathNode().hasTypeChild()) {
            break;
          }
          boolean isTextValue=isTextValue(localName);
          if (isTextValue) {
            parse(valueTree);
            break;
          }
        }
        if (valueTree != null && valueTree.getType() == JSONLexer.NULL) {
          contentHandler.setNil(true);
        }
        contentHandler.startElement(uri,localName,localName,attributes.setTree(valueTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
        parse(valueTree);
        contentHandler.endElement(uri,localName,localName);
      }
      break;
    }
case JSONLexer.STRING:
{
    String string=string(tree.getChild(0).getText());
    contentHandler.characters(string);
    break;
  }
case JSONLexer.NUMBER:
{
  contentHandler.characters(tree.getChild(0).getText());
  break;
}
case JSONLexer.TRUE:
{
contentHandler.characters(TRUE);
break;
}
case JSONLexer.FALSE:
{
contentHandler.characters(FALSE);
break;
}
case JSONLexer.NULL:
{
break;
}
case JSONLexer.ARRAY:
{
Tree parentStringTree=tree.getParent().getChild(0);
String parentLocalName=parentStringTree.getText().substring(1,parentStringTree.getText().length() - 1);
if (attributePrefix != null && parentLocalName.startsWith(attributePrefix)) {
break;
}
String uri=Constants.EMPTY_STRING;
if (namespaceAware && namespaces != null) {
if (parentLocalName.length() > 2) {
int nsIndex=parentLocalName.indexOf(namespaceSeparator,1);
if (nsIndex > -1) {
String prefix=parentLocalName.substring(0,nsIndex);
uri=namespaces.resolveNamespacePrefix(prefix);
}
if (uri == null) {
uri=namespaces.getDefaultNamespaceURI();
}
 else {
parentLocalName=parentLocalName.substring(nsIndex + 1);
}
}
 else {
uri=namespaces.getDefaultNamespaceURI();
}
}
boolean isTextValue=isTextValue(parentLocalName);
int size=tree.getChildCount();
if (size == 0) {
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord ur=(UnmarshalRecord)contentHandler;
XPathNode node=ur.getNonAttributeXPathNode(uri,parentLocalName,parentLocalName,null);
if (node != null) {
NodeValue nv=node.getNodeValue();
if (nv == null && node.getTextNode() != null) {
  nv=node.getTextNode().getUnmarshalNodeValue();
}
if (nv != null && nv.isContainerValue()) {
  ur.getContainerInstance(((ContainerValue)nv));
}
}
}
}
startCollection();
XPathFragment groupingXPathFragment=null;
XPathFragment itemXPathFragment=null;
if (contentHandler instanceof UnmarshalRecord) {
UnmarshalRecord unmarshalRecord=(UnmarshalRecord)contentHandler;
if (unmarshalRecord.getUnmarshaller().isWrapperAsCollectionName()) {
XPathNode unmarshalRecordXPathNode=unmarshalRecord.getXPathNode();
if (null != unmarshalRecordXPathNode) {
XPathFragment currentFragment=new XPathFragment();
currentFragment.setLocalName(parentLocalName);
currentFragment.setNamespaceURI(uri);
currentFragment.setNamespaceAware(namespaceAware);
XPathNode groupingXPathNode=unmarshalRecordXPathNode.getNonAttributeChildrenMap().get(currentFragment);
if (groupingXPathNode != null) {
  if (groupingXPathNode.getUnmarshalNodeValue() instanceof CollectionGroupingElementNodeValue) {
    groupingXPathFragment=groupingXPathNode.getXPathFragment();
    contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    itemXPathFragment=itemXPathNode.getXPathFragment();
  }
 else   if (groupingXPathNode.getUnmarshalNodeValue() == null) {
    XPathNode itemXPathNode=groupingXPathNode.getNonAttributeChildren().get(0);
    if (itemXPathNode != null) {
      if (((MappingNodeValue)itemXPathNode.getUnmarshalNodeValue()).isContainerValue()) {
        groupingXPathFragment=groupingXPathNode.getXPathFragment();
        contentHandler.startElement(uri,parentLocalName,parentLocalName,new AttributesImpl());
        itemXPathFragment=itemXPathNode.getXPathFragment();
      }
    }
  }
}
}
}
}
for (int x=0; x < size; x++) {
CommonTree nextChildTree=(CommonTree)tree.getChild(x);
if (nextChildTree.getType() == JSONLexer.NULL) {
((UnmarshalRecord)contentHandler).setNil(true);
}
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.startElement(itemXPathFragment.getNamespaceURI(),itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName(),attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
 else {
contentHandler.startElement(uri,parentLocalName,parentLocalName,attributes.setTree(nextChildTree,attributePrefix,namespaces,namespaceSeparator,namespaceAware));
}
}
parse(nextChildTree);
if (!isTextValue) {
if (null != itemXPathFragment) {
contentHandler.endElement(uri,itemXPathFragment.getLocalName(),itemXPathFragment.getLocalName());
}
 else {
contentHandler.endElement(uri,parentLocalName,parentLocalName);
}
}
}
if (null != groupingXPathFragment) {
contentHandler.endElement(uri,groupingXPathFragment.getLocalName(),groupingXPathFragment.getLocalName());
}
endCollection();
break;
}
default :
{
for (int x=0, size=tree.getChildCount(); x < size; x++) {
parse((CommonTree)tree.getChild(x));
}
}
}
}"
63908,"/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if (!doesExist(null,entity)) {
    return entity;
  }
  ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
  if (entity instanceof FetchGroupTracker) {
    FetchGroup fetchGroup=new FetchGroup();
    for (    DatabaseMapping mapping : descriptor.getMappings()) {
      if (!(mapping instanceof XMLInverseReferenceMapping)) {
        fetchGroup.addAttribute(mapping.getAttributeName());
      }
    }
    (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
    ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
  }
 else   if (descriptor.hasRelationships()) {
    for (    DatabaseMapping mapping : descriptor.getMappings()) {
      if (mapping instanceof XMLInverseReferenceMapping) {
        throw new JPARSConfigurationException(LoggingLocalization.buildMessage(""String_Node_Str"",new Object[]{}));
      }
    }
  }
  return entity;
}","/** 
 * Make adjustments to an unmarshalled entity based on what is found in the weaved fields
 * @param entity
 * @return
 */
protected Object wrap(Object entity){
  if ((entity != null) && (PersistenceWeavedRest.class.isAssignableFrom(entity.getClass()))) {
    if (!doesExist(null,entity)) {
      return entity;
    }
    ClassDescriptor descriptor=getJAXBDescriptorForClass(entity.getClass());
    if (entity instanceof FetchGroupTracker) {
      FetchGroup fetchGroup=new FetchGroup();
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (!(mapping instanceof XMLInverseReferenceMapping)) {
          fetchGroup.addAttribute(mapping.getAttributeName());
        }
      }
      (new FetchGroupManager()).setObjectFetchGroup(entity,fetchGroup,null);
      ((FetchGroupTracker)entity)._persistence_setSession(JpaHelper.getDatabaseSession(getEmf()));
    }
 else     if (descriptor.hasRelationships()) {
      for (      DatabaseMapping mapping : descriptor.getMappings()) {
        if (mapping instanceof XMLInverseReferenceMapping) {
          throw new JPARSConfigurationException(LoggingLocalization.buildMessage(""String_Node_Str"",new Object[]{}));
        }
      }
    }
  }
  return entity;
}"
63909,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void preLogin(SessionEvent event){
  Project project=event.getSession().getProject();
  ClassLoader cl=jpaSession.getDatasourcePlatform().getConversionManager().getLoader();
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    Class<?> descriptorClass=descriptor.getJavaClass();
    if (PersistenceWeavedRest.class.isAssignableFrom(descriptorClass)) {
      XMLCompositeCollectionMapping relationshipMapping=new XMLCompositeCollectionMapping();
      relationshipMapping.setAttributeName(""String_Node_Str"");
      relationshipMapping.setGetMethodName(""String_Node_Str"");
      relationshipMapping.setSetMethodName(""String_Node_Str"");
      relationshipMapping.setDescriptor(descriptor);
      CollectionContainerPolicy containerPolicy=new CollectionContainerPolicy(ArrayList.class);
      relationshipMapping.setContainerPolicy(containerPolicy);
      relationshipMapping.setField(new XMLField(""String_Node_Str""));
      relationshipMapping.setReferenceClass(Link.class);
      XMLJavaTypeConverter converter=new XMLJavaTypeConverter(RelationshipLinkAdapter.class);
      converter.initialize(relationshipMapping,event.getSession());
      relationshipMapping.setConverter(converter);
      descriptor.addMapping(relationshipMapping);
      XMLCompositeObjectMapping hrefMapping=new XMLCompositeObjectMapping();
      hrefMapping.setAttributeName(""String_Node_Str"");
      hrefMapping.setGetMethodName(""String_Node_Str"");
      hrefMapping.setSetMethodName(""String_Node_Str"");
      hrefMapping.setDescriptor(descriptor);
      hrefMapping.setField(new XMLField(""String_Node_Str""));
      hrefMapping.setReferenceClass(Link.class);
      hrefMapping.setXPath(""String_Node_Str"");
      descriptor.addMapping(hrefMapping);
      XMLCompositeObjectMapping itemLinksMapping=new XMLCompositeObjectMapping();
      itemLinksMapping.setAttributeName(""String_Node_Str"");
      itemLinksMapping.setGetMethodName(""String_Node_Str"");
      itemLinksMapping.setSetMethodName(""String_Node_Str"");
      itemLinksMapping.setDescriptor(descriptor);
      itemLinksMapping.setReferenceClass(ItemLinks.class);
      itemLinksMapping.setXPath(""String_Node_Str"");
      descriptor.addMapping(itemLinksMapping);
    }
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (mapping.isAbstractCompositeCollectionMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeCollectionMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
 else           if (mapping.isAbstractCompositeObjectMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeObjectMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping != null) && (dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              if (jpaMapping != null) {
                if (jpaMapping.getMappedBy() != null) {
                  ClassDescriptor inverseDescriptor=project.getDescriptorForAlias(jpaMapping.getReferenceDescriptor().getAlias());
                  if (inverseDescriptor != null) {
                    DatabaseMapping inverseMapping=inverseDescriptor.getMappingForAttributeName(jpaMapping.getMappedBy());
                    if (inverseMapping != null) {
                      convertMappingToXMLInverseReferenceMapping(inverseDescriptor,inverseMapping,jpaMapping);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    InheritancePolicy inheritancePolicy=descriptor.getInheritancePolicyOrNull();
    if ((inheritancePolicy != null) && (inheritancePolicy.isRootParentDescriptor())) {
      boolean isAbstract=Modifier.isAbstract(descriptor.getJavaClass().getModifiers());
      if (isAbstract) {
        Class subClassToInstantiate=null;
        Map<?,?> classIndicatorMapping=inheritancePolicy.getClassIndicatorMapping();
        for (        Map.Entry<?,?> entry : classIndicatorMapping.entrySet()) {
          Object value=entry.getValue();
          if (value instanceof Class) {
            subClassToInstantiate=(Class)value;
            isAbstract=Modifier.isAbstract(subClassToInstantiate.getModifiers());
            if ((subClassToInstantiate != null) && (!isAbstract)) {
              InstantiationPolicy instantiationPolicy=new InstantiationPolicy();
              instantiationPolicy.useFactoryInstantiationPolicy(new ConcreteSubclassFactory(subClassToInstantiate),""String_Node_Str"");
              descriptor.setInstantiationPolicy(instantiationPolicy);
              break;
            }
          }
        }
      }
    }
  }
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              if (jpaMapping != null) {
                ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
                if (jaxbDescriptor != null) {
                  convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
                }
              }
            }
          }
 else           if (mapping instanceof XMLCompositeObjectMapping) {
            XMLCompositeObjectMapping jpaMapping=(XMLCompositeObjectMapping)mapping;
            if (jpaMapping != null) {
              ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
              if (jaxbDescriptor != null) {
                Class clazz=jpaMapping.getReferenceClass();
                if (clazz != null) {
                  if ((jpaSession.getDescriptor(clazz) != null) && (jpaSession.getDescriptor(clazz).isEISDescriptor()))                   convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
                }
              }
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void preLogin(SessionEvent event){
  Project project=event.getSession().getProject();
  ClassLoader cl=jpaSession.getDatasourcePlatform().getConversionManager().getLoader();
  DefaultXMLNameTransformer xmlNameTransformer=new DefaultXMLNameTransformer();
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    if (!PersistenceWeavedRest.class.isAssignableFrom(descriptor.getJavaClass())) {
      continue;
    }
    if (descriptor.isXMLDescriptor()) {
      XMLDescriptor xmlDescriptor=(XMLDescriptor)project.getAliasDescriptors().get(descriptorAlias);
      if (null != xmlDescriptor) {
        if (null == xmlDescriptor.getDefaultRootElement()) {
          xmlDescriptor.setDefaultRootElement(xmlNameTransformer.transformRootElementName(xmlDescriptor.getJavaClass().getName()));
          xmlDescriptor.setResultAlwaysXMLRoot(false);
        }
      }
    }
    XMLCompositeCollectionMapping relationshipMapping=new XMLCompositeCollectionMapping();
    relationshipMapping.setAttributeName(""String_Node_Str"");
    relationshipMapping.setGetMethodName(""String_Node_Str"");
    relationshipMapping.setSetMethodName(""String_Node_Str"");
    relationshipMapping.setDescriptor(descriptor);
    CollectionContainerPolicy containerPolicy=new CollectionContainerPolicy(ArrayList.class);
    relationshipMapping.setContainerPolicy(containerPolicy);
    relationshipMapping.setField(new XMLField(""String_Node_Str""));
    relationshipMapping.setReferenceClass(Link.class);
    XMLJavaTypeConverter converter=new XMLJavaTypeConverter(RelationshipLinkAdapter.class);
    converter.initialize(relationshipMapping,event.getSession());
    relationshipMapping.setConverter(converter);
    descriptor.addMapping(relationshipMapping);
    XMLCompositeObjectMapping hrefMapping=new XMLCompositeObjectMapping();
    hrefMapping.setAttributeName(""String_Node_Str"");
    hrefMapping.setGetMethodName(""String_Node_Str"");
    hrefMapping.setSetMethodName(""String_Node_Str"");
    hrefMapping.setDescriptor(descriptor);
    hrefMapping.setField(new XMLField(""String_Node_Str""));
    hrefMapping.setReferenceClass(Link.class);
    hrefMapping.setXPath(""String_Node_Str"");
    descriptor.addMapping(hrefMapping);
    XMLCompositeObjectMapping itemLinksMapping=new XMLCompositeObjectMapping();
    itemLinksMapping.setAttributeName(""String_Node_Str"");
    itemLinksMapping.setGetMethodName(""String_Node_Str"");
    itemLinksMapping.setSetMethodName(""String_Node_Str"");
    itemLinksMapping.setDescriptor(descriptor);
    itemLinksMapping.setReferenceClass(ItemLinks.class);
    itemLinksMapping.setXPath(""String_Node_Str"");
    descriptor.addMapping(itemLinksMapping);
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (mapping.isAbstractCompositeCollectionMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeCollectionMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
 else           if (mapping.isAbstractCompositeObjectMapping()) {
            XMLInverseReferenceMapping inverseMapping=((XMLCompositeObjectMapping)mapping).getInverseReferenceMapping();
            if (inverseMapping != null) {
              break;
            }
          }
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping != null) && (dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              if (jpaMapping != null) {
                if (jpaMapping.getMappedBy() != null) {
                  ClassDescriptor inverseDescriptor=project.getDescriptorForAlias(jpaMapping.getReferenceDescriptor().getAlias());
                  if (inverseDescriptor != null) {
                    DatabaseMapping inverseMapping=inverseDescriptor.getMappingForAttributeName(jpaMapping.getMappedBy());
                    if (inverseMapping != null) {
                      convertMappingToXMLInverseReferenceMapping(inverseDescriptor,inverseMapping,jpaMapping);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    InheritancePolicy inheritancePolicy=descriptor.getInheritancePolicyOrNull();
    if ((inheritancePolicy != null) && (inheritancePolicy.isRootParentDescriptor())) {
      boolean isAbstract=Modifier.isAbstract(descriptor.getJavaClass().getModifiers());
      if (isAbstract) {
        Class subClassToInstantiate=null;
        Map<?,?> classIndicatorMapping=inheritancePolicy.getClassIndicatorMapping();
        for (        Map.Entry<?,?> entry : classIndicatorMapping.entrySet()) {
          Object value=entry.getValue();
          if (value instanceof Class) {
            subClassToInstantiate=(Class)value;
            isAbstract=Modifier.isAbstract(subClassToInstantiate.getModifiers());
            if ((subClassToInstantiate != null) && (!isAbstract)) {
              InstantiationPolicy instantiationPolicy=new InstantiationPolicy();
              instantiationPolicy.useFactoryInstantiationPolicy(new ConcreteSubclassFactory(subClassToInstantiate),""String_Node_Str"");
              descriptor.setInstantiationPolicy(instantiationPolicy);
              break;
            }
          }
        }
      }
    }
  }
  for (  Object descriptorAlias : project.getAliasDescriptors().keySet()) {
    ClassDescriptor descriptor=(ClassDescriptor)project.getAliasDescriptors().get(descriptorAlias);
    ClassDescriptor jpaDescriptor=jpaSession.getDescriptorForAlias(descriptor.getAlias());
    Vector<DatabaseMapping> descriptorMappings=(Vector<DatabaseMapping>)descriptor.getMappings().clone();
    for (    DatabaseMapping mapping : descriptorMappings) {
      if (mapping.isXMLMapping()) {
        if (mapping.isAbstractCompositeObjectMapping() || mapping.isAbstractCompositeCollectionMapping()) {
          if (jpaDescriptor != null) {
            DatabaseMapping dbMapping=jpaDescriptor.getMappingForAttributeName(mapping.getAttributeName());
            if ((dbMapping instanceof ForeignReferenceMapping)) {
              ForeignReferenceMapping jpaMapping=(ForeignReferenceMapping)dbMapping;
              if (jpaMapping != null) {
                ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
                if (jaxbDescriptor != null) {
                  convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
                }
              }
            }
          }
 else           if (mapping instanceof XMLCompositeObjectMapping) {
            XMLCompositeObjectMapping jpaMapping=(XMLCompositeObjectMapping)mapping;
            if (jpaMapping != null) {
              ClassDescriptor jaxbDescriptor=project.getDescriptorForAlias(jpaMapping.getDescriptor().getAlias());
              if (jaxbDescriptor != null) {
                Class clazz=jpaMapping.getReferenceClass();
                if (clazz != null) {
                  if ((jpaSession.getDescriptor(clazz) != null) && (jpaSession.getDescriptor(clazz).isEISDescriptor()))                   convertMappingToXMLChoiceMapping(jaxbDescriptor,jpaMapping,cl,jpaSession);
                }
              }
            }
          }
        }
      }
    }
  }
}"
63910,"/** 
 * Create a javaType to be used by JAXB to map a particular class. For static classes, JAXB annotations, xml and defaults will be used to map the class. For Dynamic classes we create properties for each JPA mapping on the class thing we create is a 
 * @param classDescriptor
 * @param objectFactory
 * @return
 */
private JavaType createJAXBType(ClassDescriptor classDescriptor,ObjectFactory objectFactory){
  JavaType javaType=new JavaType();
  String alias=classDescriptor.getAlias();
  if (alias == null || alias.isEmpty()) {
    alias=classDescriptor.getJavaClass().getSimpleName();
  }
  javaType.setName(alias);
  javaType.setJavaAttributes(new JavaAttributes());
  boolean isDynamic=DynamicEntity.class.isAssignableFrom(classDescriptor.getJavaClass());
  for (  DatabaseMapping ormMapping : classDescriptor.getMappings()) {
    JAXBElement<XmlElement> element=createJAXBProperty(ormMapping,objectFactory,javaType,isDynamic);
    if (element != null) {
      javaType.getJavaAttributes().getJavaAttribute().add(element);
    }
  }
  javaType.setXmlRootElement(new org.eclipse.persistence.jaxb.xmlmodel.XmlRootElement());
  if (classDescriptor.isAggregateDescriptor()) {
    return javaType;
  }
  String name=RestAdapterClassWriter.constructClassNameForReferenceAdapter(classDescriptor.getJavaClassName());
  XmlJavaTypeAdapter adapter=new XmlJavaTypeAdapter();
  adapter.setValue(name);
  adapter.setValueType(classDescriptor.getJavaClassName());
  adapter.setType(classDescriptor.getJavaClassName());
  javaType.setXmlJavaTypeAdapter(adapter);
  return javaType;
}","/** 
 * Create a javaType to be used by JAXB to map a particular class. For static classes, JAXB annotations, xml and defaults will be used to map the class. For Dynamic classes we create properties for each JPA mapping on the class thing we create is a 
 * @param classDescriptor
 * @param objectFactory
 * @return
 */
private JavaType createJAXBType(ClassDescriptor classDescriptor,ObjectFactory objectFactory){
  JavaType javaType=new JavaType();
  String alias=classDescriptor.getAlias();
  if (alias == null || alias.isEmpty()) {
    alias=classDescriptor.getJavaClass().getSimpleName();
  }
  javaType.setName(alias);
  javaType.setJavaAttributes(new JavaAttributes());
  boolean isDynamic=DynamicEntity.class.isAssignableFrom(classDescriptor.getJavaClass());
  for (  DatabaseMapping ormMapping : classDescriptor.getMappings()) {
    JAXBElement<XmlElement> element=createJAXBProperty(ormMapping,objectFactory,javaType,isDynamic);
    if (element != null) {
      javaType.getJavaAttributes().getJavaAttribute().add(element);
    }
  }
  if (classDescriptor.isAggregateDescriptor()) {
    return javaType;
  }
  String name=RestAdapterClassWriter.constructClassNameForReferenceAdapter(classDescriptor.getJavaClassName());
  XmlJavaTypeAdapter adapter=new XmlJavaTypeAdapter();
  adapter.setValue(name);
  adapter.setValueType(classDescriptor.getJavaClassName());
  adapter.setType(classDescriptor.getJavaClassName());
  javaType.setXmlJavaTypeAdapter(adapter);
  return javaType;
}"
63911,"protected XMLDescriptor buildDeleteDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DeleteOperation.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping name=new XMLDirectMapping();
  name.setAttributeName(""String_Node_Str"");
  name.setXPath(""String_Node_Str"");
  descriptor.addMapping(name);
  XMLDirectMapping descriptorName=new XMLDirectMapping();
  descriptorName.setAttributeName(""String_Node_Str"");
  descriptorName.setXPath(""String_Node_Str"");
  descriptor.addMapping(descriptorName);
  XMLCompositeCollectionMapping parameters=new XMLCompositeCollectionMapping();
  parameters.setAttributeName(""String_Node_Str"");
  parameters.setReferenceClass(Parameter.class);
  parameters.setXPath(""String_Node_Str"");
  descriptor.addMapping(parameters);
  return descriptor;
}","protected XMLDescriptor buildDeleteDescriptor(){
  XMLDescriptor descriptor=new XMLDescriptor();
  descriptor.setJavaClass(DeleteOperation.class);
  descriptor.setDefaultRootElement(""String_Node_Str"");
  XMLDirectMapping name=new XMLDirectMapping();
  name.setAttributeName(""String_Node_Str"");
  name.setXPath(""String_Node_Str"");
  descriptor.addMapping(name);
  XMLDirectMapping descriptorName=new XMLDirectMapping();
  descriptorName.setAttributeName(""String_Node_Str"");
  descriptorName.setXPath(""String_Node_Str"");
  descriptor.addMapping(descriptorName);
  XMLDirectMapping findByPKQuery=new XMLDirectMapping();
  findByPKQuery.setAttributeName(""String_Node_Str"");
  findByPKQuery.setXPath(""String_Node_Str"");
  descriptor.addMapping(findByPKQuery);
  XMLCompositeCollectionMapping parameters=new XMLCompositeCollectionMapping();
  parameters.setAttributeName(""String_Node_Str"");
  parameters.setReferenceClass(Parameter.class);
  parameters.setXPath(""String_Node_Str"");
  descriptor.addMapping(parameters);
  return descriptor;
}"
63912,"/** 
 * Execute <tt>DELETE</tt> operation on the database
 * @param xrService parent <code>XRService</code> that owns this <code>Operation</code>
 * @param invocation contains runtime argument values to be bound to the list of{@link Parameter}'s.
 * @return  result - can be <code>null</code> if the underlying <tt>DELETE</tt> operation on thedatabase does not return a value
 * @see  {@link Operation}
 */
@SuppressWarnings(""String_Node_Str"") @Override public Object invoke(XRServiceAdapter xrService,Invocation invocation){
  DatabaseQuery query=classDescriptor.getQueryManager().getQuery(PK_QUERYNAME + UNDERSCORE_STR + descriptorName+ TYPE_STR);
  if (query instanceof JPAQuery) {
    query=((JPAQuery)query).processSQLQuery(xrService.getORSession().getActiveSession());
  }
  UnitOfWork uow=xrService.getORSession().acquireUnitOfWork();
  Object toBeDeleted;
  if (query.getArguments().size() == 0) {
    int idx=0;
    for (    Parameter param : getParameters()) {
      query.addArgument(Integer.toString(++idx),Util.SCHEMA_2_CLASS.get(param.getType()));
      query.addArgumentValue(invocation.getParameter(param.getName()));
    }
    toBeDeleted=uow.executeQuery(query);
  }
 else {
    List queryArguments=query.getArguments();
    int queryArgumentsSize=queryArguments.size();
    Vector executeArguments=new NonSynchronizedVector();
    for (int i=0; i < queryArgumentsSize; i++) {
      String argName=(String)queryArguments.get(i);
      executeArguments.add(invocation.getParameter(argName));
    }
    toBeDeleted=uow.executeQuery(query,executeArguments);
  }
  if (!isCollection() && toBeDeleted instanceof Vector) {
    if (((Vector)toBeDeleted).isEmpty()) {
      toBeDeleted=null;
    }
 else {
      toBeDeleted=((Vector)toBeDeleted).firstElement();
    }
  }
  if (toBeDeleted != null) {
    uow.deleteObject(toBeDeleted);
    uow.commit();
  }
  return null;
}","/** 
 * Execute <tt>DELETE</tt> operation on the database
 * @param xrService parent <code>XRService</code> that owns this <code>Operation</code>
 * @param invocation contains runtime argument values to be bound to the list of{@link Parameter}'s.
 * @return  result - can be <code>null</code> if the underlying <tt>DELETE</tt> operation on thedatabase does not return a value
 * @see  {@link Operation}
 */
@SuppressWarnings(""String_Node_Str"") @Override public Object invoke(XRServiceAdapter xrService,Invocation invocation){
  DatabaseQuery query=classDescriptor.getQueryManager().getQuery(getFindByPKQuery());
  if (query instanceof JPAQuery) {
    query=((JPAQuery)query).processSQLQuery(xrService.getORSession().getActiveSession());
  }
  UnitOfWork uow=xrService.getORSession().acquireUnitOfWork();
  Object toBeDeleted;
  if (query.getArguments().size() == 0) {
    int idx=0;
    for (    Parameter param : getParameters()) {
      query.addArgument(Integer.toString(++idx),Util.SCHEMA_2_CLASS.get(param.getType()));
      query.addArgumentValue(invocation.getParameter(param.getName()));
    }
    toBeDeleted=uow.executeQuery(query);
  }
 else {
    List queryArguments=query.getArguments();
    int queryArgumentsSize=queryArguments.size();
    Vector executeArguments=new NonSynchronizedVector();
    for (int i=0; i < queryArgumentsSize; i++) {
      String argName=(String)queryArguments.get(i);
      executeArguments.add(invocation.getParameter(argName));
    }
    toBeDeleted=uow.executeQuery(query,executeArguments);
  }
  if (!isCollection() && toBeDeleted instanceof Vector) {
    if (((Vector)toBeDeleted).isEmpty()) {
      toBeDeleted=null;
    }
 else {
      toBeDeleted=((Vector)toBeDeleted).firstElement();
    }
  }
  if (toBeDeleted != null) {
    uow.deleteObject(toBeDeleted);
    uow.commit();
  }
  return null;
}"
63913,"/** 
 * INTERNAL: calculateChanges creates a change set for a particular object.  In DeferredChangeDetectionPolicy all mappings will be compared against a backup copy of the object.
 * @return an object change set describingthe changes to this object
 * @param clone the Object to compute a change set for
 * @param backUp the old version of the object to use for comparison
 * @param changeSet the change set to add changes to
 * @param session the current session
 * @param descriptor the descriptor for this object
 * @param shouldRaiseEvent indicates whether PreUpdate event should be risen (usually true)
 */
public ObjectChangeSet calculateChanges(Object clone,Object backUp,boolean isNew,UnitOfWorkChangeSet changeSet,UnitOfWorkImpl unitOfWork,ClassDescriptor descriptor,boolean shouldRaiseEvent){
  if (descriptor.getEventManager().hasAnyEventListeners() && shouldRaiseEvent) {
    WriteObjectQuery writeQuery=new WriteObjectQuery(clone.getClass());
    writeQuery.setObject(clone);
    writeQuery.setBackupClone(backUp);
    writeQuery.setSession(unitOfWork);
    writeQuery.setDescriptor(descriptor);
    descriptor.getEventManager().executeEvent(new DescriptorEvent(DescriptorEventManager.PreWriteEvent,writeQuery));
    if (isNew) {
      descriptor.getEventManager().executeEvent(new DescriptorEvent(DescriptorEventManager.PreInsertEvent,writeQuery));
    }
 else {
      descriptor.getEventManager().executeEvent(new DescriptorEvent(DescriptorEventManager.PreUpdateEvent,writeQuery));
    }
  }
  ObjectChangeSet changes=createObjectChangeSet(clone,backUp,changeSet,isNew,unitOfWork,descriptor);
  if (changes.hasChanges() && descriptor.hasMappingsPostCalculateChanges() && !changes.isNew()&& !unitOfWork.getCommitManager().isActive()&& !unitOfWork.isNestedUnitOfWork()) {
    int size=descriptor.getMappingsPostCalculateChanges().size();
    for (int i=0; i < size; i++) {
      DatabaseMapping mapping=descriptor.getMappingsPostCalculateChanges().get(i);
      org.eclipse.persistence.sessions.changesets.ChangeRecord record=changes.getChangesForAttributeNamed(mapping.getAttributeName());
      if (record != null) {
        mapping.postCalculateChanges(record,unitOfWork);
      }
    }
  }
  if (changes.getId() == null && !isNew && !changes.isAggregate()) {
    if (!(unitOfWork.isNestedUnitOfWork()) || (unitOfWork.isNestedUnitOfWork() && !(unitOfWork.isNewObjectInParent(clone) || unitOfWork.isUnregisteredNewObjectInParent(unitOfWork.getCloneToOriginals().get(clone))))) {
      Object id=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(clone,unitOfWork,false);
      throw ValidationException.nullPrimaryKeyInUnitOfWorkClone(clone,id);
    }
  }
  if ((descriptor.getCMPPolicy() != null) && (descriptor.getCMPPolicy().getForceUpdate())) {
    changes.setHasCmpPolicyForcedUpdate(true);
  }
  if (!changes.hasForcedChangesFromCascadeLocking() && unitOfWork.hasOptimisticReadLockObjects()) {
    Boolean modifyVersionField=(Boolean)unitOfWork.getOptimisticReadLockObjects().get(clone);
    if (unitOfWork instanceof RepeatableWriteUnitOfWork && ((RepeatableWriteUnitOfWork)unitOfWork).getCumulativeUOWChangeSet() != null) {
      modifyVersionField=((RepeatableWriteUnitOfWork)unitOfWork).getCumulativeUOWChangeSet().getObjectChangeSetForClone(clone) == null;
    }
    changes.setShouldModifyVersionField(modifyVersionField);
  }
  if (changes.hasChanges() || changes.hasForcedChanges()) {
    return changes;
  }
  return null;
}","/** 
 * INTERNAL: calculateChanges creates a change set for a particular object.  In DeferredChangeDetectionPolicy all mappings will be compared against a backup copy of the object.
 * @return an object change set describingthe changes to this object
 * @param clone the Object to compute a change set for
 * @param backUp the old version of the object to use for comparison
 * @param changeSet the change set to add changes to
 * @param session the current session
 * @param descriptor the descriptor for this object
 * @param shouldRaiseEvent indicates whether PreUpdate event should be risen (usually true)
 */
public ObjectChangeSet calculateChanges(Object clone,Object backUp,boolean isNew,UnitOfWorkChangeSet changeSet,UnitOfWorkImpl unitOfWork,ClassDescriptor descriptor,boolean shouldRaiseEvent){
  if (descriptor.getEventManager().hasAnyEventListeners() && shouldRaiseEvent) {
    WriteObjectQuery writeQuery=new WriteObjectQuery(clone.getClass());
    writeQuery.setObject(clone);
    writeQuery.setBackupClone(backUp);
    writeQuery.setSession(unitOfWork);
    writeQuery.setDescriptor(descriptor);
    descriptor.getEventManager().executeEvent(new DescriptorEvent(DescriptorEventManager.PreWriteEvent,writeQuery));
    if (isNew) {
      descriptor.getEventManager().executeEvent(new DescriptorEvent(DescriptorEventManager.PreInsertEvent,writeQuery));
    }
 else {
      descriptor.getEventManager().executeEvent(new DescriptorEvent(DescriptorEventManager.PreUpdateEvent,writeQuery));
    }
  }
  ObjectChangeSet changes=createObjectChangeSet(clone,backUp,changeSet,isNew,unitOfWork,descriptor);
  if (changes.hasChanges() && descriptor.hasMappingsPostCalculateChanges() && !changes.isNew()&& !unitOfWork.getCommitManager().isActive()&& !unitOfWork.isNestedUnitOfWork()) {
    int size=descriptor.getMappingsPostCalculateChanges().size();
    for (int i=0; i < size; i++) {
      DatabaseMapping mapping=descriptor.getMappingsPostCalculateChanges().get(i);
      org.eclipse.persistence.sessions.changesets.ChangeRecord record=changes.getChangesForAttributeNamed(mapping.getAttributeName());
      if (record != null) {
        mapping.postCalculateChanges(record,unitOfWork);
      }
    }
  }
  if (changes.getId() == null && !isNew && !changes.isAggregate()) {
    if (!(unitOfWork.isNestedUnitOfWork()) || (unitOfWork.isNestedUnitOfWork() && !(unitOfWork.isNewObjectInParent(clone) || unitOfWork.isUnregisteredNewObjectInParent(unitOfWork.getCloneToOriginals().get(clone))))) {
      Object id=descriptor.getObjectBuilder().extractPrimaryKeyFromObject(clone,unitOfWork,false);
      throw ValidationException.nullPrimaryKeyInUnitOfWorkClone(clone,id);
    }
  }
  if ((descriptor.getCMPPolicy() != null) && (descriptor.getCMPPolicy().getForceUpdate())) {
    changes.setHasCmpPolicyForcedUpdate(true);
  }
  if (!changes.hasForcedChangesFromCascadeLocking() && unitOfWork.hasOptimisticReadLockObjects()) {
    Boolean modifyVersionField=(Boolean)unitOfWork.getOptimisticReadLockObjects().get(clone);
    if ((modifyVersionField != null) && (unitOfWork instanceof RepeatableWriteUnitOfWork) && (((RepeatableWriteUnitOfWork)unitOfWork).getCumulativeUOWChangeSet() != null)) {
      if (((RepeatableWriteUnitOfWork)unitOfWork).getCumulativeUOWChangeSet().getObjectChangeSetForClone(clone) == null) {
        modifyVersionField=Boolean.TRUE;
      }
    }
    changes.setShouldModifyVersionField(modifyVersionField);
  }
  if (changes.hasChanges() || changes.hasForcedChanges()) {
    return changes;
  }
  return null;
}"
63914,"/** 
 * Update the object. This is used by the unit-of-work update.
 */
public void updateObjectForWriteWithChangeSet(){
  WriteObjectQuery writeQuery=getWriteObjectQuery();
  ObjectChangeSet changeSet=writeQuery.getObjectChangeSet();
  Object object=writeQuery.getObject();
  ClassDescriptor descriptor=getDescriptor();
  DescriptorQueryManager queryManager=descriptor.getQueryManager();
  AbstractSession session=getSession();
  CommitManager commitManager=session.getCommitManager();
  if ((!writeQuery.isUserDefined()) && queryManager.hasUpdateQuery() && isExpressionQueryMechanism()) {
    commitManager.markPreModifyCommitInProgress(object);
    performUserDefinedUpdate();
    return;
  }
  commitManager.markPreModifyCommitInProgress(object);
  DescriptorEventManager eventManager=descriptor.getEventManager();
  if (changeSet.hasChanges()) {
    if (eventManager.hasAnyEventListeners()) {
      DescriptorEvent event=new DescriptorEvent(DescriptorEventManager.PreUpdateWithChangesEvent,writeQuery);
      eventManager.executeEvent(event);
      UnitOfWorkChangeSet uowChangeSet=(UnitOfWorkChangeSet)((UnitOfWorkImpl)session).getUnitOfWorkChangeSet();
      if (!uowChangeSet.isChangeSetFromOutsideUOW() && writeQuery.getObjectChangeSet().shouldRecalculateAfterUpdateEvent()) {
        if (!descriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
          writeQuery.getObjectChangeSet().clear(false);
        }
        if (descriptor.getObjectChangePolicy().calculateChangesForExistingObject(object,uowChangeSet,((UnitOfWorkImpl)session),descriptor,false) == null) {
          uowChangeSet.getAllChangeSets().remove(writeQuery.getObjectChangeSet());
        }
      }
    }
  }
  if (writeQuery.shouldCascadeParts()) {
    queryManager.preUpdate(writeQuery);
  }
  writeQuery.setModifyRow(descriptor.getObjectBuilder().buildRowForUpdateWithChangeSet(writeQuery));
  Boolean shouldModifyVersionField=changeSet.shouldModifyVersionField();
  if (!getModifyRow().isEmpty() || shouldModifyVersionField != null || changeSet.hasCmpPolicyForcedUpdate()) {
    if (writeQuery.isUserDefined() || writeQuery.isCallQuery()) {
      writeQuery.setModifyRow(descriptor.getObjectBuilder().buildRow(object,session,WriteType.UNDEFINED));
    }
    OptimisticLockingPolicy lockingPolicy=descriptor.getOptimisticLockingPolicy();
    if (lockingPolicy != null) {
      lockingPolicy.addLockValuesToTranslationRow(writeQuery);
      if ((shouldModifyVersionField != null && shouldModifyVersionField) || (shouldModifyVersionField == null && !getModifyRow().isEmpty())) {
        lockingPolicy.updateRowAndObjectForUpdate(writeQuery,object);
      }
 else       if (!shouldModifyVersionField && (lockingPolicy instanceof VersionLockingPolicy)) {
        ((VersionLockingPolicy)lockingPolicy).writeLockValueIntoRow(writeQuery,object);
      }
    }
    if (descriptor.hasSerializedObjectPolicy()) {
      descriptor.getSerializedObjectPolicy().putObjectIntoRow(getModifyRow(),object,session);
    }
    if (eventManager.hasAnyEventListeners()) {
      DescriptorEvent event=new DescriptorEvent(DescriptorEventManager.AboutToUpdateEvent,writeQuery);
      event.setRecord(getModifyRow());
      eventManager.executeEvent(event);
    }
    if (QueryMonitor.shouldMonitor()) {
      QueryMonitor.incrementUpdate(getWriteObjectQuery());
    }
    int rowCount=updateObject().intValue();
    if (rowCount < 1) {
      if (session.hasEventManager()) {
        session.getEventManager().noRowsModified(writeQuery,object);
      }
    }
    if (lockingPolicy != null) {
      lockingPolicy.validateUpdate(rowCount,object,writeQuery);
    }
  }
  commitManager.markPostModifyCommitInProgress(object);
  if (writeQuery.shouldCascadeParts()) {
    queryManager.postUpdate(writeQuery);
  }
  if ((descriptor.getHistoryPolicy() != null) && descriptor.getHistoryPolicy().shouldHandleWrites()) {
    descriptor.getHistoryPolicy().postUpdate(writeQuery);
  }
  if (eventManager.hasAnyEventListeners()) {
    eventManager.executeEvent(new DescriptorEvent(DescriptorEventManager.PostUpdateEvent,writeQuery));
  }
}","/** 
 * Update the object. This is used by the unit-of-work update.
 */
public void updateObjectForWriteWithChangeSet(){
  WriteObjectQuery writeQuery=getWriteObjectQuery();
  ObjectChangeSet changeSet=writeQuery.getObjectChangeSet();
  Object object=writeQuery.getObject();
  ClassDescriptor descriptor=getDescriptor();
  DescriptorQueryManager queryManager=descriptor.getQueryManager();
  AbstractSession session=getSession();
  CommitManager commitManager=session.getCommitManager();
  if ((!writeQuery.isUserDefined()) && queryManager.hasUpdateQuery() && isExpressionQueryMechanism()) {
    commitManager.markPreModifyCommitInProgress(object);
    performUserDefinedUpdate();
    return;
  }
  commitManager.markPreModifyCommitInProgress(object);
  DescriptorEventManager eventManager=descriptor.getEventManager();
  if (changeSet.hasChanges()) {
    if (eventManager.hasAnyEventListeners()) {
      DescriptorEvent event=new DescriptorEvent(DescriptorEventManager.PreUpdateWithChangesEvent,writeQuery);
      eventManager.executeEvent(event);
      UnitOfWorkChangeSet uowChangeSet=(UnitOfWorkChangeSet)((UnitOfWorkImpl)session).getUnitOfWorkChangeSet();
      if (!uowChangeSet.isChangeSetFromOutsideUOW() && writeQuery.getObjectChangeSet().shouldRecalculateAfterUpdateEvent()) {
        if (!descriptor.getObjectChangePolicy().isAttributeChangeTrackingPolicy()) {
          writeQuery.getObjectChangeSet().clear(false);
        }
        if (descriptor.getObjectChangePolicy().calculateChangesForExistingObject(object,uowChangeSet,((UnitOfWorkImpl)session),descriptor,false) == null) {
          uowChangeSet.getAllChangeSets().remove(writeQuery.getObjectChangeSet());
        }
      }
    }
  }
  if (writeQuery.shouldCascadeParts()) {
    queryManager.preUpdate(writeQuery);
  }
  writeQuery.setModifyRow(descriptor.getObjectBuilder().buildRowForUpdateWithChangeSet(writeQuery));
  Boolean shouldModifyVersionField=changeSet.shouldModifyVersionField();
  if (!getModifyRow().isEmpty() || shouldModifyVersionField != null || changeSet.hasCmpPolicyForcedUpdate()) {
    if (writeQuery.isUserDefined() || writeQuery.isCallQuery()) {
      writeQuery.setModifyRow(descriptor.getObjectBuilder().buildRow(object,session,WriteType.UNDEFINED));
    }
    OptimisticLockingPolicy lockingPolicy=descriptor.getOptimisticLockingPolicy();
    if (lockingPolicy != null) {
      lockingPolicy.addLockValuesToTranslationRow(writeQuery);
      boolean existingOptimisticLock=false;
      if (session instanceof RepeatableWriteUnitOfWork) {
        RepeatableWriteUnitOfWork uow=(RepeatableWriteUnitOfWork)session;
        if (uow.getOptimisticReadLockObjects().get(object) != null && uow.getCumulativeUOWChangeSet() != null && uow.getCumulativeUOWChangeSet().getObjectChangeSetForClone(object) != null) {
          existingOptimisticLock=true;
        }
      }
      if (!existingOptimisticLock) {
        if ((shouldModifyVersionField != null && shouldModifyVersionField) || !getModifyRow().isEmpty()) {
          lockingPolicy.updateRowAndObjectForUpdate(writeQuery,object);
        }
 else         if (!shouldModifyVersionField && (lockingPolicy instanceof VersionLockingPolicy)) {
          ((VersionLockingPolicy)lockingPolicy).writeLockValueIntoRow(writeQuery,object);
        }
      }
    }
    if (descriptor.hasSerializedObjectPolicy()) {
      descriptor.getSerializedObjectPolicy().putObjectIntoRow(getModifyRow(),object,session);
    }
    if (eventManager.hasAnyEventListeners()) {
      DescriptorEvent event=new DescriptorEvent(DescriptorEventManager.AboutToUpdateEvent,writeQuery);
      event.setRecord(getModifyRow());
      eventManager.executeEvent(event);
    }
    if (QueryMonitor.shouldMonitor()) {
      QueryMonitor.incrementUpdate(getWriteObjectQuery());
    }
    int rowCount=updateObject().intValue();
    if (rowCount < 1) {
      if (session.hasEventManager()) {
        session.getEventManager().noRowsModified(writeQuery,object);
      }
    }
    if (lockingPolicy != null) {
      lockingPolicy.validateUpdate(rowCount,object,writeQuery);
    }
  }
  commitManager.markPostModifyCommitInProgress(object);
  if (writeQuery.shouldCascadeParts()) {
    queryManager.postUpdate(writeQuery);
  }
  if ((descriptor.getHistoryPolicy() != null) && descriptor.getHistoryPolicy().shouldHandleWrites()) {
    descriptor.getHistoryPolicy().postUpdate(writeQuery);
  }
  if (eventManager.hasAnyEventListeners()) {
    eventManager.executeEvent(new DescriptorEvent(DescriptorEventManager.PostUpdateEvent,writeQuery));
  }
}"
63915,"public void testVersionIncrementPostFlushChanges(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.flush();
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
}","public void testVersionIncrementPostFlushChanges(){
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  counter.getSqlStatements().clear();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.flush();
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
  assertEquals(""String_Node_Str"",2,countNumberOfUpdateStatements(counter));
}"
63916,"public static TestSuite suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  return suite;
}","public static TestSuite suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  suite.addTest(new OptimisticLockForceIncrementTestSuite(""String_Node_Str""));
  return suite;
}"
63917,"public void testVersionIncrementCommitNoChanges(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
}","public void testVersionIncrementCommitNoChanges(){
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  counter.getSqlStatements().clear();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",1,countNumberOfUpdateStatements(counter));
}"
63918,"public void testVersionIncrementFlushCommitNoChanges(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.flush();
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
}","public void testVersionIncrementFlushCommitNoChanges(){
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  counter.getSqlStatements().clear();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.flush();
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",1,countNumberOfUpdateStatements(counter));
}"
63919,"public void testVersionIncrementPreCommitChanges(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
}","public void testVersionIncrementPreCommitChanges(){
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  counter.getSqlStatements().clear();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
  assertEquals(""String_Node_Str"",1,countNumberOfUpdateStatements(counter));
}"
63920,"public void testVersionIncrementNoChanges(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.flush();
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
}","public void testVersionIncrementNoChanges(){
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  counter.getSqlStatements().clear();
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  em.flush();
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",1,countNumberOfUpdateStatements(counter));
}"
63921,"public void testVersionIncrementPreFlushChanges(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.flush();
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
}","public void testVersionIncrementPreFlushChanges(){
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  counter.getSqlStatements().clear();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.flush();
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
  assertEquals(""String_Node_Str"",1,countNumberOfUpdateStatements(counter));
}"
63922,"public void testVersionIncrementPreAndPostFlushChanges(){
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.flush();
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
}","public void testVersionIncrementPreAndPostFlushChanges(){
  QuerySQLTracker counter=new QuerySQLTracker(getServerSession());
  EntityManager em=getEntityManagerFactory().createEntityManager();
  em.getTransaction().begin();
  List<Address> addresses=em.createQuery(""String_Node_Str"").getResultList();
  counter.getSqlStatements().clear();
  assertNotNull(""String_Node_Str"",addresses);
  assertNotSame(""String_Node_Str"",addresses.size(),0);
  Address entity=addresses.get(0);
  assertNotNull(""String_Node_Str"",entity);
  int startVersion=entity.getVersion();
  em.lock(entity,LockModeType.OPTIMISTIC_FORCE_INCREMENT);
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.flush();
  entity.setCity(""String_Node_Str"");
  entity.setProvince(""String_Node_Str"");
  entity.setCountry(""String_Node_Str"");
  em.getTransaction().commit();
  int expectedVersion=(startVersion + 1);
  int actualVersion=entity.getVersion();
  em.close();
  assertEquals(""String_Node_Str"",expectedVersion,actualVersion);
  assertEquals(""String_Node_Str"",""String_Node_Str"",entity.getCity());
  assertEquals(""String_Node_Str"",2,countNumberOfUpdateStatements(counter));
}"
63923,"public boolean marshal(MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver,Marshaller marshaller,MarshalContext marshalContext,XPathFragment rootFragment){
  if ((null == marshalNodeValue) || isMarshalOnlyNodeValue) {
    if (marshalRecord.isWrapperAsCollectionName() && null != nonAttributeChildren && nonAttributeChildren.size() == 1) {
      XPathNode childXPathNode=nonAttributeChildren.get(0);
      NodeValue childXPathNodeUnmarshalNodeValue=childXPathNode.getUnmarshalNodeValue();
      if (childXPathNode != null && childXPathNodeUnmarshalNodeValue.isContainerValue()) {
        ContainerValue containerValue=(ContainerValue)childXPathNodeUnmarshalNodeValue;
        if (containerValue.isWrapperAllowedAsCollectionName()) {
          XPathNode wrapperXPathNode=new XPathNode();
          wrapperXPathNode.setXPathFragment(this.getXPathFragment());
          wrapperXPathNode.setMarshalNodeValue(childXPathNode.getMarshalNodeValue());
          return wrapperXPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
        }
      }
    }
    marshalRecord.addGroupingElement(this);
    boolean hasValue=false;
    if (null != attributeChildren) {
      for (int x=0, size=attributeChildren.size(); x < size; x++) {
        XPathNode xPathNode=attributeChildren.get(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),this.xPathFragment) || hasValue;
      }
    }
    if (anyAttributeNode != null) {
      hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
    if (null == nonAttributeChildren) {
      if (textNode != null) {
        hasValue=textNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),null) || hasValue;
      }
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(this); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,this);
        MarshalContext childMarshalContext=marshalContext.getMarshalContext(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,childMarshalContext,this.xPathFragment) || hasValue;
      }
    }
    if (hasValue) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
 else {
      marshalRecord.removeGroupingElement(this);
    }
    return hasValue;
  }
 else {
    if (marshalNodeValue.isMappingNodeValue()) {
      Mapping mapping=((MappingNodeValue)marshalNodeValue).getMapping();
      CoreAttributeGroup currentGroup=marshalRecord.getCurrentAttributeGroup();
      if (!(currentGroup.containsAttributeInternal(mapping.getAttributeName()))) {
        return false;
      }
    }
    return marshalContext.marshal(marshalNodeValue,xPathFragment,marshalRecord,object,session,namespaceResolver,rootFragment);
  }
}","public boolean marshal(MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver,Marshaller marshaller,MarshalContext marshalContext,XPathFragment rootFragment){
  if ((null == marshalNodeValue) || isMarshalOnlyNodeValue) {
    if (marshalRecord.isWrapperAsCollectionName() && null != nonAttributeChildren && nonAttributeChildren.size() == 1) {
      XPathNode childXPathNode=nonAttributeChildren.get(0);
      NodeValue childXPathNodeUnmarshalNodeValue=childXPathNode.getUnmarshalNodeValue();
      if (childXPathNodeUnmarshalNodeValue != null && childXPathNodeUnmarshalNodeValue.isContainerValue()) {
        ContainerValue containerValue=(ContainerValue)childXPathNodeUnmarshalNodeValue;
        if (containerValue.isWrapperAllowedAsCollectionName()) {
          XPathNode wrapperXPathNode=new XPathNode();
          wrapperXPathNode.setXPathFragment(this.getXPathFragment());
          wrapperXPathNode.setMarshalNodeValue(childXPathNode.getMarshalNodeValue());
          return wrapperXPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,marshalContext,rootFragment);
        }
      }
    }
    marshalRecord.addGroupingElement(this);
    boolean hasValue=false;
    if (null != attributeChildren) {
      for (int x=0, size=attributeChildren.size(); x < size; x++) {
        XPathNode xPathNode=attributeChildren.get(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),this.xPathFragment) || hasValue;
      }
    }
    if (anyAttributeNode != null) {
      hasValue=anyAttributeNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),null) || hasValue;
    }
    if (null == nonAttributeChildren) {
      if (textNode != null) {
        hasValue=textNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,ObjectMarshalContext.getInstance(),null) || hasValue;
      }
    }
 else {
      for (int x=0, size=marshalContext.getNonAttributeChildrenSize(this); x < size; x++) {
        XPathNode xPathNode=(XPathNode)marshalContext.getNonAttributeChild(x,this);
        MarshalContext childMarshalContext=marshalContext.getMarshalContext(x);
        hasValue=xPathNode.marshal(marshalRecord,object,session,namespaceResolver,marshaller,childMarshalContext,this.xPathFragment) || hasValue;
      }
    }
    if (hasValue) {
      marshalRecord.endElement(xPathFragment,namespaceResolver);
    }
 else {
      marshalRecord.removeGroupingElement(this);
    }
    return hasValue;
  }
 else {
    if (marshalNodeValue.isMappingNodeValue()) {
      Mapping mapping=((MappingNodeValue)marshalNodeValue).getMapping();
      CoreAttributeGroup currentGroup=marshalRecord.getCurrentAttributeGroup();
      if (!(currentGroup.containsAttributeInternal(mapping.getAttributeName()))) {
        return false;
      }
    }
    return marshalContext.marshal(marshalNodeValue,xPathFragment,marshalRecord,object,session,namespaceResolver,rootFragment);
  }
}"
63924,"public void writeOROXProjects(OutputStream dbwsOrStream,OutputStream dbwsOxStream){
  Project orProject=dbwsBuilder.getOrProject();
  Project oxProject=dbwsBuilder.getOxProject();
  boolean writeORProject=false;
  if (hasTables() || dbwsBuilder.hasBuildSqlOperations()) {
    writeORProject=true;
  }
 else   if (hasComplexProcedureArgs()) {
    writeORProject=true;
  }
  if (!writeORProject) {
    if (orProject.getQueries().size() > 0) {
      writeORProject=true;
    }
 else     if (orProject.getDescriptors().size() > 0) {
      Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
      for (      ClassDescriptor desc : descriptors) {
        if (desc.isObjectRelationalDataTypeDescriptor()) {
          writeORProject=true;
          break;
        }
      }
    }
  }
  if ((writeORProject || !dbwsBuilder.xrServiceModel.getOperations().isEmpty()) && !isNullStream(dbwsOrStream)) {
    XMLContext context=new XMLContext(workbenchXMLProject);
    context.getSession(orProject).getEventManager().addListener(new MissingDescriptorListener());
    XMLEntityMappings mappings=XmlEntityMappingsGenerator.generateXmlEntityMappings(orProject,complextypes,crudOps);
    if (mappings != null) {
      XMLEntityMappingsWriter writer=new XMLEntityMappingsWriter();
      writer.write(mappings,dbwsOrStream);
    }
  }
  if (!isNullStream(dbwsOxStream)) {
    boolean writeOXProject=false;
    if (hasTables() || dbwsBuilder.hasBuildSqlOperations()) {
      writeOXProject=true;
    }
 else     if (hasComplexProcedureArgs()) {
      writeOXProject=true;
    }
    if (!writeOXProject) {
      if (orProject.getQueries().size() > 0) {
        writeOXProject=true;
      }
 else       if (orProject.getDescriptors().size() > 0) {
        Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
        for (        ClassDescriptor desc : descriptors) {
          if (desc.isObjectRelationalDataTypeDescriptor()) {
            writeOXProject=true;
            break;
          }
        }
      }
    }
    if (writeOXProject) {
      List<XmlBindings> xmlBindingsList=XmlBindingsGenerator.generateXmlBindings(oxProject.getOrderedDescriptors());
      if (xmlBindingsList.size() > 0) {
        XmlBindingsModel model=new XmlBindingsModel();
        model.setBindingsList(xmlBindingsList);
        try {
          JAXBContext jc=JAXBContext.newInstance(XmlBindingsModel.class);
          Marshaller marshaller=jc.createMarshaller();
          marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
          marshaller.marshal(model,dbwsOxStream);
        }
 catch (        JAXBException jaxbEx) {
          throw new DBWSException(OXM_MARSHAL_EX_MSG,jaxbEx);
        }
      }
    }
  }
  dbwsBuilder.getPackager().closeOrStream(dbwsOrStream);
  dbwsBuilder.getPackager().closeOxStream(dbwsOxStream);
}","public void writeOROXProjects(OutputStream dbwsOrStream,OutputStream dbwsOxStream){
  Project orProject=dbwsBuilder.getOrProject();
  Project oxProject=dbwsBuilder.getOxProject();
  boolean writeORProject=false;
  if (hasTables() || dbwsBuilder.hasBuildSqlOperations()) {
    writeORProject=true;
  }
  if (!writeORProject) {
    if (orProject.getQueries().size() > 0) {
      writeORProject=true;
    }
 else     if (orProject.getDescriptors().size() > 0) {
      Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
      for (      ClassDescriptor desc : descriptors) {
        if (desc.isObjectRelationalDataTypeDescriptor()) {
          writeORProject=true;
          break;
        }
      }
    }
  }
  if ((writeORProject || !dbwsBuilder.xrServiceModel.getOperations().isEmpty()) && !isNullStream(dbwsOrStream)) {
    XMLContext context=new XMLContext(workbenchXMLProject);
    context.getSession(orProject).getEventManager().addListener(new MissingDescriptorListener());
    XMLEntityMappings mappings=XmlEntityMappingsGenerator.generateXmlEntityMappings(orProject,complextypes,crudOps);
    if (mappings != null) {
      XMLEntityMappingsWriter writer=new XMLEntityMappingsWriter();
      writer.write(mappings,dbwsOrStream);
    }
  }
  if (!isNullStream(dbwsOxStream)) {
    boolean writeOXProject=false;
    if (hasTables() || dbwsBuilder.hasBuildSqlOperations()) {
      writeOXProject=true;
    }
    if (!writeOXProject) {
      if (orProject.getQueries().size() > 0) {
        writeOXProject=true;
      }
 else       if (orProject.getDescriptors().size() > 0) {
        Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
        for (        ClassDescriptor desc : descriptors) {
          if (desc.isObjectRelationalDataTypeDescriptor()) {
            writeOXProject=true;
            break;
          }
        }
      }
    }
    if (writeOXProject) {
      List<XmlBindings> xmlBindingsList=XmlBindingsGenerator.generateXmlBindings(oxProject.getOrderedDescriptors());
      if (xmlBindingsList.size() > 0) {
        XmlBindingsModel model=new XmlBindingsModel();
        model.setBindingsList(xmlBindingsList);
        try {
          JAXBContext jc=JAXBContext.newInstance(XmlBindingsModel.class);
          Marshaller marshaller=jc.createMarshaller();
          marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
          marshaller.marshal(model,dbwsOxStream);
        }
 catch (        JAXBException jaxbEx) {
          throw new DBWSException(OXM_MARSHAL_EX_MSG,jaxbEx);
        }
      }
    }
  }
  dbwsBuilder.getPackager().closeOrStream(dbwsOrStream);
  dbwsBuilder.getPackager().closeOxStream(dbwsOxStream);
}"
63925,"protected ProjectConfig buildOXProjectConfig(){
  ProjectConfig oxProjectConfig=null;
  boolean useProjectXML=false;
  if (builderHelper.hasTables() || hasBuildSqlOperations()) {
    useProjectXML=true;
  }
 else   if (builderHelper.hasComplexProcedureArgs()) {
    useProjectXML=true;
  }
  if (!useProjectXML) {
    if (orProject.getQueries().size() > 0) {
      useProjectXML=true;
    }
 else     if (orProject.getDescriptors().size() > 0) {
      Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
      for (      ClassDescriptor desc : descriptors) {
        if (desc.isObjectRelationalDataTypeDescriptor()) {
          useProjectXML=true;
          break;
        }
      }
    }
  }
  if (useProjectXML) {
    oxProjectConfig=new ProjectXMLConfig();
    String pathPrefix=packager.getOxProjectPathPrefix();
    oxProjectConfig.setProjectString(pathPrefix == null ? DBWS_OX_XML : pathPrefix + DBWS_OX_XML);
  }
 else {
    oxProjectConfig=new ProjectClassConfig();
    oxProjectConfig.setProjectString(SimpleXMLFormatProject.class.getName());
  }
  return oxProjectConfig;
}","protected ProjectConfig buildOXProjectConfig(){
  ProjectConfig oxProjectConfig=null;
  boolean useProjectXML=false;
  if (builderHelper.hasTables() || hasBuildSqlOperations()) {
    useProjectXML=true;
  }
  if (!useProjectXML) {
    if (orProject.getQueries().size() > 0) {
      useProjectXML=true;
    }
 else     if (orProject.getDescriptors().size() > 0) {
      Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
      for (      ClassDescriptor desc : descriptors) {
        if (desc.isObjectRelationalDataTypeDescriptor()) {
          useProjectXML=true;
          break;
        }
      }
    }
  }
  if (useProjectXML) {
    oxProjectConfig=new ProjectXMLConfig();
    String pathPrefix=packager.getOxProjectPathPrefix();
    oxProjectConfig.setProjectString(pathPrefix == null ? DBWS_OX_XML : pathPrefix + DBWS_OX_XML);
  }
 else {
    oxProjectConfig=new ProjectClassConfig();
    oxProjectConfig.setProjectString(SimpleXMLFormatProject.class.getName());
  }
  return oxProjectConfig;
}"
63926,"protected ProjectConfig buildORProjectConfig(){
  ProjectConfig orProjectConfig=null;
  boolean useProjectXML=false;
  if (builderHelper.hasTables() || hasBuildSqlOperations()) {
    useProjectXML=true;
  }
 else   if (builderHelper.hasComplexProcedureArgs()) {
    useProjectXML=true;
  }
  if (!useProjectXML) {
    if (orProject.getQueries().size() > 0) {
      useProjectXML=true;
    }
 else     if (orProject.getDescriptors().size() > 0) {
      Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
      for (      ClassDescriptor desc : descriptors) {
        if (desc.isObjectRelationalDataTypeDescriptor()) {
          useProjectXML=true;
          break;
        }
      }
    }
  }
  if (useProjectXML) {
    orProjectConfig=new ProjectXMLConfig();
    String pathPrefix=packager.getOrProjectPathPrefix();
    orProjectConfig.setProjectString(pathPrefix == null ? DBWS_OR_XML : pathPrefix + DBWS_OR_XML);
  }
 else {
    orProjectConfig=new ProjectClassConfig();
    orProjectConfig.setProjectString(Project.class.getName());
  }
  return orProjectConfig;
}","protected ProjectConfig buildORProjectConfig(){
  ProjectConfig orProjectConfig=null;
  boolean useProjectXML=false;
  if (builderHelper.hasTables() || hasBuildSqlOperations()) {
    useProjectXML=true;
  }
  if (!useProjectXML) {
    if (orProject.getQueries().size() > 0) {
      useProjectXML=true;
    }
 else     if (orProject.getDescriptors().size() > 0) {
      Collection<ClassDescriptor> descriptors=orProject.getDescriptors().values();
      for (      ClassDescriptor desc : descriptors) {
        if (desc.isObjectRelationalDataTypeDescriptor()) {
          useProjectXML=true;
          break;
        }
      }
    }
  }
  if (useProjectXML) {
    orProjectConfig=new ProjectXMLConfig();
    String pathPrefix=packager.getOrProjectPathPrefix();
    orProjectConfig.setProjectString(pathPrefix == null ? DBWS_OR_XML : pathPrefix + DBWS_OR_XML);
  }
 else {
    orProjectConfig=new ProjectClassConfig();
    orProjectConfig.setProjectString(Project.class.getName());
  }
  return orProjectConfig;
}"
63927,"public boolean hasTables(){
  if (dbTables.size() == 0) {
    return false;
  }
  return true;
}","/** 
 * Indicates if one or more database tables were discovered.
 */
public boolean hasTables(){
  return dbTables.size() != 0;
}"
63928,"/** 
 * Build a Query for the given ProcedureType instance and add it to the given OR project's list of queries.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void buildQueryForProcedureType(ProcedureType procType,Project orProject,Project oxProject,ProcedureOperationModel opModel,boolean hasPLSQLArgs){
  StoredProcedureCall call;
  ArgumentType returnArg=procType.isFunctionType() ? ((FunctionType)procType).getReturnArgument() : null;
  boolean hasCursor=hasPLSQLCursorArg(getArgumentListForProcedureType(procType));
  hasPLSQLArgs=hasPLSQLArgs || hasCursor || (hasComplexArgs(getArgumentListForProcedureType(procType)) && opModel.isPLSQLProcedureOperation());
  if (hasPLSQLArgs) {
    if (procType.isFunctionType()) {
      org.eclipse.persistence.internal.helper.DatabaseType dType=buildDatabaseTypeFromMetadataType(returnArg,procType.getCatalogName());
      if (hasCursor) {
        call=new PLSQLStoredFunctionCall();
        ((PLSQLStoredFunctionCall)call).getArguments().remove(0);
        ((PLSQLStoredFunctionCall)call).useNamedCursorOutputAsResultSet(CURSOR_STR,dType);
      }
 else {
        Class wrapperClass=getWrapperClass(dType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)dType).setJavaType(wrapperClass);
        }
        call=new PLSQLStoredFunctionCall(dType);
        if (returnArg.getEnclosedType().isPLSQLCollectionType() && !((PLSQLCollectionType)returnArg.getEnclosedType()).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredFunctionCall)call).getArguments().get(0);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
    }
 else {
      call=new PLSQLStoredProcedureCall();
    }
  }
 else {
    if (procType.isFunctionType()) {
      String javaTypeName=returnArg.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
      if (returnArg.isComposite()) {
        DatabaseType dataType=returnArg.getEnclosedType();
        if (dataType.isVArrayType() || dataType.isObjectTableType()) {
          call=new StoredFunctionCall(Types.ARRAY,returnArg.getTypeName(),javaTypeName,buildFieldForNestedType(dataType));
        }
 else {
          call=new StoredFunctionCall(Types.STRUCT,returnArg.getTypeName(),javaTypeName);
        }
      }
 else {
        call=new StoredFunctionCall();
        if (returnArg.getEnclosedType().isBlobType()) {
          ((StoredFunctionCall)call).setResult(null,ClassConstants.BLOB);
        }
 else {
          int resultType=Util.getJDBCTypeFromTypeName(javaTypeName);
          if (resultType == Types.DATE || resultType == Types.TIME || resultType == Types.TIMESTAMP) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.TIMESTAMP);
          }
 else           if (returnArg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            ((StoredFunctionCall)call).setResult(null,Types.SQLXML);
          }
 else           if (resultType == Types.OTHER || resultType == Types.CLOB) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.OBJECT);
          }
 else {
            ((StoredFunctionCall)call).setResult(null,resultType);
          }
        }
      }
    }
 else {
      call=new StoredProcedureCall();
    }
  }
  String cat=procType.getCatalogName();
  String catalogPrefix=(cat == null || cat.length() == 0) ? EMPTY_STRING : cat + DOT;
  call.setProcedureName(catalogPrefix + procType.getProcedureName());
  String returnType=opModel.getReturnType();
  boolean hasResponse=returnType != null;
  DatabaseQuery dq=null;
  if (hasCursor || (hasResponse && opModel.isCollection())) {
    dq=new DataReadQuery();
  }
 else {
    dq=new ValueReadQuery();
  }
  dq.bindAllParameters();
  dq.setName(getNameForQueryOperation(opModel,procType));
  dq.setCall(call);
  for (  ArgumentType arg : procType.getArguments()) {
    if (arg.optional()) {
      call.addOptionalArgument(arg.getArgumentName());
    }
    DatabaseType argType=arg.getEnclosedType();
    ArgumentTypeDirection direction=arg.getDirection();
    org.eclipse.persistence.internal.helper.DatabaseType databaseType=null;
    String javaTypeName=null;
    if (hasPLSQLArgs) {
      databaseType=buildDatabaseTypeFromMetadataType(argType,cat);
    }
 else {
      javaTypeName=argType.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
    }
    if (direction == IN) {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        if (argType.isVArrayType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectTableType()) {
          dq.addArgument(arg.getArgumentName(),java.sql.Array.class);
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),getWrapperClass(javaTypeName),buildFieldForNestedType(argType));
        }
 else {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
        }
      }
    }
 else     if (direction == OUT) {
      if (hasPLSQLArgs) {
        if (arg.isPLSQLCursorType()) {
          ((PLSQLStoredProcedureCall)call).useNamedCursorOutputAsResultSet(arg.getArgumentName(),databaseType);
        }
 else {
          Class wrapperClass=getWrapperClass(databaseType);
          if (wrapperClass != null) {
            ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
          }
          ((PLSQLStoredProcedureCall)call).addNamedOutputArgument(arg.getArgumentName(),databaseType);
        }
      }
 else {
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),wrapperClass);
          }
        }
 else {
          if (argType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.SQLXML);
          }
 else           if (argType == ScalarDatabaseTypeEnum.SYS_REFCURSOR_TYPE) {
            call.addNamedCursorOutputArgument(arg.getArgumentName());
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
          }
        }
      }
    }
 else {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedInOutputArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        dq.addArgument(arg.getArgumentName());
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName());
          }
        }
 else {
          Class javaType=getClassFromJDBCType(argType.getTypeName(),dbwsBuilder.getDatabasePlatform());
          if (shouldSetJavaType(javaType.getName())) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()),argType.getTypeName(),javaType);
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName());
          }
        }
      }
    }
    if (hasPLSQLArgs && (direction == IN || direction == INOUT)) {
      ClassDescriptor xdesc=null;
      if (hasResponse) {
        int idx=returnType.indexOf(COLON);
        if (idx == -1) {
          idx=returnType.indexOf(CLOSE_PAREN);
        }
        if (idx > 0) {
          String typ=returnType.substring(idx + 1);
          for (          XMLDescriptor xd : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
            if (xd.getSchemaReference() != null) {
              String context=xd.getSchemaReference().getSchemaContext();
              if (context.substring(1).equals(typ)) {
                xdesc=xd;
                break;
              }
            }
          }
        }
      }
      if (xdesc != null) {
        dq.addArgumentByTypeName(arg.getArgumentName(),xdesc.getJavaClassName());
      }
 else {
        if (databaseType instanceof PLSQLCollection || databaseType instanceof VArrayType) {
          dq.addArgument(arg.getArgumentName(),Array.class);
        }
 else         if (databaseType instanceof PLSQLrecord || databaseType instanceof OracleObjectType) {
          dq.addArgument(arg.getArgumentName(),Struct.class);
        }
 else {
          dq.addArgument(arg.getArgumentName(),JDBCTypes.getClassForCode(databaseType.getConversionCode()));
        }
      }
    }
  }
  orProject.getQueries().add(dq);
}","/** 
 * Build a Query for the given ProcedureType instance and add it to the given OR project's list of queries.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void buildQueryForProcedureType(ProcedureType procType,Project orProject,Project oxProject,ProcedureOperationModel opModel,boolean hasPLSQLArgs){
  StoredProcedureCall call;
  ArgumentType returnArg=procType.isFunctionType() ? ((FunctionType)procType).getReturnArgument() : null;
  boolean hasCursor=hasPLSQLCursorArg(getArgumentListForProcedureType(procType));
  hasPLSQLArgs=hasPLSQLArgs || hasCursor || opModel.isPLSQLProcedureOperation();
  if (hasPLSQLArgs) {
    if (procType.isFunctionType()) {
      org.eclipse.persistence.internal.helper.DatabaseType dType=buildDatabaseTypeFromMetadataType(returnArg,procType.getCatalogName());
      if (hasCursor) {
        call=new PLSQLStoredFunctionCall();
        ((PLSQLStoredFunctionCall)call).getArguments().remove(0);
        ((PLSQLStoredFunctionCall)call).useNamedCursorOutputAsResultSet(CURSOR_STR,dType);
      }
 else {
        Class wrapperClass=getWrapperClass(dType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)dType).setJavaType(wrapperClass);
        }
        call=new PLSQLStoredFunctionCall(dType);
        if (returnArg.getEnclosedType().isPLSQLCollectionType() && !((PLSQLCollectionType)returnArg.getEnclosedType()).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredFunctionCall)call).getArguments().get(0);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
    }
 else {
      call=new PLSQLStoredProcedureCall();
    }
  }
 else {
    if (procType.isFunctionType()) {
      String javaTypeName=returnArg.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
      if (returnArg.isComposite()) {
        DatabaseType dataType=returnArg.getEnclosedType();
        if (dataType.isVArrayType() || dataType.isObjectTableType()) {
          call=new StoredFunctionCall(Types.ARRAY,returnArg.getTypeName(),javaTypeName,buildFieldForNestedType(dataType));
        }
 else {
          call=new StoredFunctionCall(Types.STRUCT,returnArg.getTypeName(),javaTypeName);
        }
      }
 else {
        call=new StoredFunctionCall();
        if (returnArg.getEnclosedType().isBlobType()) {
          ((StoredFunctionCall)call).setResult(null,ClassConstants.BLOB);
        }
 else {
          int resultType=Util.getJDBCTypeFromTypeName(javaTypeName);
          if (resultType == Types.DATE || resultType == Types.TIME || resultType == Types.TIMESTAMP) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.TIMESTAMP);
          }
 else           if (returnArg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            ((StoredFunctionCall)call).setResult(null,Types.SQLXML);
          }
 else           if (resultType == Types.OTHER || resultType == Types.CLOB) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.OBJECT);
          }
 else {
            ((StoredFunctionCall)call).setResult(null,resultType);
          }
        }
      }
    }
 else {
      call=new StoredProcedureCall();
    }
  }
  String cat=procType.getCatalogName();
  String catalogPrefix=(cat == null || cat.length() == 0) ? EMPTY_STRING : cat + DOT;
  call.setProcedureName(catalogPrefix + procType.getProcedureName());
  String returnType=opModel.getReturnType();
  boolean hasResponse=returnType != null;
  DatabaseQuery dq=null;
  if (hasCursor || (hasResponse && opModel.isCollection())) {
    dq=new DataReadQuery();
  }
 else {
    dq=new ValueReadQuery();
  }
  dq.bindAllParameters();
  dq.setName(getNameForQueryOperation(opModel,procType));
  dq.setCall(call);
  for (  ArgumentType arg : procType.getArguments()) {
    if (arg.optional()) {
      call.addOptionalArgument(arg.getArgumentName());
    }
    DatabaseType argType=arg.getEnclosedType();
    ArgumentTypeDirection direction=arg.getDirection();
    org.eclipse.persistence.internal.helper.DatabaseType databaseType=null;
    String javaTypeName=null;
    if (hasPLSQLArgs) {
      databaseType=buildDatabaseTypeFromMetadataType(argType,cat);
    }
 else {
      javaTypeName=argType.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
    }
    if (direction == IN) {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        if (argType.isVArrayType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectTableType()) {
          dq.addArgument(arg.getArgumentName(),java.sql.Array.class);
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),getWrapperClass(javaTypeName),buildFieldForNestedType(argType));
        }
 else {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
        }
      }
    }
 else     if (direction == OUT) {
      if (hasPLSQLArgs) {
        if (arg.isPLSQLCursorType()) {
          ((PLSQLStoredProcedureCall)call).useNamedCursorOutputAsResultSet(arg.getArgumentName(),databaseType);
        }
 else {
          Class wrapperClass=getWrapperClass(databaseType);
          if (wrapperClass != null) {
            ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
          }
          ((PLSQLStoredProcedureCall)call).addNamedOutputArgument(arg.getArgumentName(),databaseType);
        }
      }
 else {
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),wrapperClass);
          }
        }
 else {
          if (argType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.SQLXML);
          }
 else           if (argType == ScalarDatabaseTypeEnum.SYS_REFCURSOR_TYPE) {
            call.addNamedCursorOutputArgument(arg.getArgumentName());
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
          }
        }
      }
    }
 else {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedInOutputArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        dq.addArgument(arg.getArgumentName());
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName());
          }
        }
 else {
          Class javaType=getClassFromJDBCType(argType.getTypeName(),dbwsBuilder.getDatabasePlatform());
          if (shouldSetJavaType(javaType.getName())) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()),argType.getTypeName(),javaType);
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName());
          }
        }
      }
    }
    if (hasPLSQLArgs && (direction == IN || direction == INOUT)) {
      ClassDescriptor xdesc=null;
      if (hasResponse) {
        int idx=returnType.indexOf(COLON);
        if (idx == -1) {
          idx=returnType.indexOf(CLOSE_PAREN);
        }
        if (idx > 0) {
          String typ=returnType.substring(idx + 1);
          for (          XMLDescriptor xd : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
            if (xd.getSchemaReference() != null) {
              String context=xd.getSchemaReference().getSchemaContext();
              if (context.substring(1).equals(typ)) {
                xdesc=xd;
                break;
              }
            }
          }
        }
      }
      if (xdesc != null) {
        dq.addArgumentByTypeName(arg.getArgumentName(),xdesc.getJavaClassName());
      }
 else {
        if (databaseType instanceof PLSQLCollection || databaseType instanceof VArrayType) {
          dq.addArgument(arg.getArgumentName(),Array.class);
        }
 else         if (databaseType instanceof PLSQLrecord || databaseType instanceof OracleObjectType) {
          dq.addArgument(arg.getArgumentName(),Struct.class);
        }
 else {
          dq.addArgument(arg.getArgumentName(),JDBCTypes.getClassForCode(databaseType.getConversionCode()));
        }
      }
    }
  }
  orProject.getQueries().add(dq);
}"
63929,"/** 
 * Builds query operations for a given ProcedureOperationModel.
 */
public void buildProcedureOperation(ProcedureOperationModel procedureOperationModel){
  for (  ProcedureType storedProcedure : procedureOperationModel.getDbStoredProcedures()) {
    boolean hasComplexArgs=Util.hasComplexArgs(storedProcedure);
    QueryOperation qo=new QueryOperation();
    qo.setName(getNameForQueryOperation(procedureOperationModel,storedProcedure));
    String qualifiedProcName=getQualifiedProcedureName(procedureOperationModel,storedProcedure);
    dbwsBuilder.logMessage(FINEST,BUILDING_QUERYOP_FOR + qualifiedProcName);
    QueryHandler qh=null;
    List<DatabaseQuery> queries=dbwsBuilder.getOrProject().getQueries();
    if (queries.size() > 0) {
      for (      DatabaseQuery q : queries) {
        if (q.getName().equals(qo.getName())) {
          qh=new NamedQueryHandler();
          ((NamedQueryHandler)qh).setName(qo.getName());
        }
      }
    }
    if (qh == null) {
      if (storedProcedure.isFunctionType()) {
        qh=new StoredFunctionQueryHandler();
      }
 else {
        qh=new StoredProcedureQueryHandler();
      }
      ((StoredProcedureQueryHandler)qh).setName(qualifiedProcName);
    }
    qo.setQueryHandler(qh);
    String returnType=procedureOperationModel.getReturnType();
    boolean isCollection=procedureOperationModel.isCollection();
    boolean isSimpleXMLFormat=procedureOperationModel.isSimpleXMLFormat();
    Result result=null;
    int outArgCount=0;
    for (    ArgumentType argument : storedProcedure.getArguments()) {
      ArgumentTypeDirection argDirection=argument.getDirection();
      if (argDirection == OUT) {
        outArgCount++;
      }
    }
    if (outArgCount > 1 || (outArgCount > 0 && storedProcedure.isFunctionType())) {
      isCollection=true;
      isSimpleXMLFormat=true;
      result=new CollectionResult();
      result.setType(ANY_QNAME);
    }
 else {
      if (storedProcedure.isFunctionType()) {
        ArgumentType returnArg=((FunctionType)storedProcedure).getReturnArgument();
        result=buildResultForStoredFunction(returnArg,returnType);
        if (returnArg.getEnclosedType().isPLSQLCursorType()) {
          customizeSimpleXMLTagNames((PLSQLCursorType)returnArg.getEnclosedType(),procedureOperationModel);
        }
      }
 else       if (hasComplexArgs) {
        if (Util.noOutArguments(storedProcedure)) {
          result=new Result();
          result.setType(new QName(SCHEMA_URL,INT,SCHEMA_PREFIX));
        }
      }
 else {
        if (returnType != null) {
          result=new Result();
          result.setType(buildCustomQName(returnType,dbwsBuilder));
        }
 else {
          if (isCollection) {
            result=new CollectionResult();
            if (isSimpleXMLFormat) {
              result.setType(SXF_QNAME_CURSOR);
            }
          }
 else {
            result=new Result();
            result.setType(SXF_QNAME);
          }
        }
      }
    }
    for (    ArgumentType arg : storedProcedure.getArguments()) {
      String argName=arg.getArgumentName();
      if (argName != null) {
        QName xmlType=null;
        ProcedureArgument pa=null;
        ProcedureArgument paShadow=null;
        Parameter parm=null;
        ArgumentTypeDirection direction=arg.getDirection();
        if (!hasComplexArgs) {
          if (arg.getEnclosedType().isPLSQLCursorType()) {
            PLSQLCursorType cursorType=(PLSQLCursorType)arg.getEnclosedType();
            if (cursorType.isWeaklyTyped()) {
              xmlType=buildCustomQName(""String_Node_Str"",dbwsBuilder);
            }
          }
 else {
            xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
          }
        }
 else {
          if (arg.getEnclosedType().isPLSQLType()) {
            hasComplexProcedureArgs=true;
            String packageName=((PLSQLType)arg.getEnclosedType()).getParentType().getPackageName();
            String typeString=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + arg.getTypeName() : arg.getTypeName();
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          }
 else           if (arg.getEnclosedType().isVArrayType() || arg.getEnclosedType().isObjectType() || arg.getEnclosedType().isObjectTableType()) {
            hasComplexProcedureArgs=true;
            String typeString=arg.getTypeName().toLowerCase().concat(TYPE_STR);
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          }
 else {
switch (Util.getJDBCTypeFromTypeName(arg.getTypeName())) {
case STRUCT:
case ARRAY:
              String typeString=nct.generateSchemaAlias(arg.getTypeName());
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          break;
default :
        xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
      break;
  }
}
}
if (direction == null || direction == IN) {
parm=new Parameter();
parm.setName(argName);
parm.setType(xmlType);
parm.setOptional(arg.optional());
pa=new ProcedureArgument();
pa.setName(argName);
pa.setParameterName(argName);
if (qh instanceof StoredProcedureQueryHandler) {
  ((StoredProcedureQueryHandler)qh).getInArguments().add(pa);
}
}
 else {
pa=new ProcedureOutputArgument();
ProcedureOutputArgument pao=(ProcedureOutputArgument)pa;
pao.setName(argName);
pao.setParameterName(argName);
boolean isCursor=arg.isPLSQLCursorType() || arg.getTypeName().contains(CURSOR_STR);
if (arg.isPLSQLCursorType()) {
  customizeSimpleXMLTagNames((PLSQLCursorType)arg.getEnclosedType(),procedureOperationModel);
}
if (isCursor && returnType == null) {
  pao.setResultType(SXF_QNAME_CURSOR);
  if (result == null) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
}
 else {
  if (returnType != null && !isSimpleXMLFormat) {
    xmlType=qNameFromString(OPEN_PAREN + dbwsBuilder.getTargetNamespace() + CLOSE_PAREN+ returnType,dbwsBuilder.getSchema());
  }
  if (isCursor) {
    pao.setResultType(new QName(EMPTY_STRING,CURSOR_OF_STR + returnType));
    Result newResult=new CollectionResult();
    newResult.setType(result.getType());
    result=newResult;
  }
 else {
    pao.setResultType(xmlType);
  }
  if (result == null) {
    if (isCollection) {
      result=new CollectionResult();
    }
 else {
      result=new Result();
    }
    result.setType(xmlType);
  }
}
if (direction == INOUT) {
  parm=new Parameter();
  parm.setName(argName);
  parm.setType(xmlType);
  result.setType(xmlType);
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getInOutArguments().add(pao);
  }
  paShadow=new ProcedureArgument();
  paShadow.setName(argName);
  paShadow.setParameterName(argName);
}
 else {
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getOutArguments().add(pao);
  }
}
}
if (arg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
pa.setJdbcType(getJDBCTypeForTypeName(ScalarDatabaseTypeEnum.XMLTYPE_TYPE.toString()));
}
if (hasComplexArgs && arg.getEnclosedType().isPLSQLType()) {
pa.setComplexTypeName(storedProcedure.getCatalogName() + UNDERSCORE + arg.getTypeName());
if (paShadow != null) {
  paShadow.setComplexTypeName(pa.getComplexTypeName());
}
}
if (parm != null) {
qo.getParameters().add(parm);
}
}
}
if (procedureOperationModel.getBinaryAttachment()) {
Attachment attachment=new Attachment();
attachment.setMimeType(APP_OCTET_STREAM);
result.setAttachment(attachment);
}
handleSimpleXMLFormat(isSimpleXMLFormat,result,procedureOperationModel);
qo.setResult(result);
dbwsBuilder.getXrServiceModel().getOperations().put(qo.getName(),qo);
}
finishProcedureOperation();
}","/** 
 * Builds query operations for a given ProcedureOperationModel.
 */
public void buildProcedureOperation(ProcedureOperationModel procedureOperationModel){
  for (  ProcedureType storedProcedure : procedureOperationModel.getDbStoredProcedures()) {
    boolean hasComplexArgs=hasComplexArgs(storedProcedure);
    QueryOperation qo=new QueryOperation();
    qo.setName(getNameForQueryOperation(procedureOperationModel,storedProcedure));
    String qualifiedProcName=getQualifiedProcedureName(procedureOperationModel,storedProcedure);
    dbwsBuilder.logMessage(FINEST,BUILDING_QUERYOP_FOR + qualifiedProcName);
    QueryHandler qh=null;
    List<DatabaseQuery> queries=dbwsBuilder.getOrProject().getQueries();
    if (queries.size() > 0) {
      for (      DatabaseQuery q : queries) {
        if (q.getName().equals(qo.getName())) {
          qh=new NamedQueryHandler();
          ((NamedQueryHandler)qh).setName(qo.getName());
        }
      }
    }
    if (qh == null) {
      if (storedProcedure.isFunctionType()) {
        qh=new StoredFunctionQueryHandler();
      }
 else {
        qh=new StoredProcedureQueryHandler();
      }
      ((StoredProcedureQueryHandler)qh).setName(qualifiedProcName);
    }
    qo.setQueryHandler(qh);
    String returnType=procedureOperationModel.getReturnType();
    boolean isCollection=procedureOperationModel.isCollection();
    boolean isSimpleXMLFormat=procedureOperationModel.isSimpleXMLFormat();
    Result result=null;
    int outArgCount=0;
    for (    ArgumentType argument : storedProcedure.getArguments()) {
      ArgumentTypeDirection argDirection=argument.getDirection();
      if (argDirection == OUT) {
        outArgCount++;
      }
    }
    if (outArgCount > 1 || (outArgCount > 0 && storedProcedure.isFunctionType())) {
      isCollection=true;
      isSimpleXMLFormat=true;
      result=new CollectionResult();
      result.setType(ANY_QNAME);
    }
 else {
      if (storedProcedure.isFunctionType()) {
        ArgumentType returnArg=((FunctionType)storedProcedure).getReturnArgument();
        result=buildResultForStoredFunction(returnArg,returnType);
        if (returnArg.getEnclosedType().isPLSQLCursorType()) {
          customizeSimpleXMLTagNames((PLSQLCursorType)returnArg.getEnclosedType(),procedureOperationModel);
        }
      }
 else       if (hasComplexArgs) {
        if (Util.noOutArguments(storedProcedure)) {
          result=new Result();
          result.setType(new QName(SCHEMA_URL,INT,SCHEMA_PREFIX));
        }
      }
 else {
        if (returnType != null) {
          result=new Result();
          result.setType(buildCustomQName(returnType,dbwsBuilder));
        }
 else {
          if (isCollection) {
            result=new CollectionResult();
            if (isSimpleXMLFormat) {
              result.setType(SXF_QNAME_CURSOR);
            }
          }
 else {
            result=new Result();
            result.setType(SXF_QNAME);
          }
        }
      }
    }
    for (    ArgumentType arg : storedProcedure.getArguments()) {
      String argName=arg.getArgumentName();
      if (argName != null) {
        QName xmlType=null;
        ProcedureArgument pa=null;
        ProcedureArgument paShadow=null;
        Parameter parm=null;
        ArgumentTypeDirection direction=arg.getDirection();
        if (!hasComplexArgs) {
          if (arg.getEnclosedType().isPLSQLCursorType()) {
            PLSQLCursorType cursorType=(PLSQLCursorType)arg.getEnclosedType();
            if (cursorType.isWeaklyTyped()) {
              xmlType=buildCustomQName(""String_Node_Str"",dbwsBuilder);
            }
          }
 else {
            xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
          }
        }
 else {
          if (arg.getEnclosedType().isPLSQLType()) {
            String packageName=((PLSQLType)arg.getEnclosedType()).getParentType().getPackageName();
            String typeString=(packageName != null && packageName.length() > 0) ? packageName + UNDERSCORE + arg.getTypeName() : arg.getTypeName();
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          }
 else           if (arg.getEnclosedType().isVArrayType() || arg.getEnclosedType().isObjectType() || arg.getEnclosedType().isObjectTableType()) {
            String typeString=arg.getTypeName().toLowerCase().concat(TYPE_STR);
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          }
 else {
switch (Util.getJDBCTypeFromTypeName(arg.getTypeName())) {
case STRUCT:
case ARRAY:
              String typeString=nct.generateSchemaAlias(arg.getTypeName());
            xmlType=buildCustomQName(typeString,dbwsBuilder);
          break;
default :
        xmlType=getXMLTypeFromJDBCType(Util.getJDBCTypeFromTypeName(arg.getTypeName()));
      break;
  }
}
}
if (direction == null || direction == IN) {
parm=new Parameter();
parm.setName(argName);
parm.setType(xmlType);
parm.setOptional(arg.optional());
pa=new ProcedureArgument();
pa.setName(argName);
pa.setParameterName(argName);
if (qh instanceof StoredProcedureQueryHandler) {
  ((StoredProcedureQueryHandler)qh).getInArguments().add(pa);
}
}
 else {
pa=new ProcedureOutputArgument();
ProcedureOutputArgument pao=(ProcedureOutputArgument)pa;
pao.setName(argName);
pao.setParameterName(argName);
boolean isCursor=arg.isPLSQLCursorType() || arg.getTypeName().contains(CURSOR_STR);
if (arg.isPLSQLCursorType()) {
  customizeSimpleXMLTagNames((PLSQLCursorType)arg.getEnclosedType(),procedureOperationModel);
}
if (isCursor && returnType == null) {
  pao.setResultType(SXF_QNAME_CURSOR);
  if (result == null) {
    result=new CollectionResult();
    result.setType(SXF_QNAME_CURSOR);
  }
}
 else {
  if (returnType != null && !isSimpleXMLFormat) {
    xmlType=qNameFromString(OPEN_PAREN + dbwsBuilder.getTargetNamespace() + CLOSE_PAREN+ returnType,dbwsBuilder.getSchema());
  }
  if (isCursor) {
    pao.setResultType(new QName(EMPTY_STRING,CURSOR_OF_STR + returnType));
    Result newResult=new CollectionResult();
    newResult.setType(result.getType());
    result=newResult;
  }
 else {
    pao.setResultType(xmlType);
  }
  if (result == null) {
    if (isCollection) {
      result=new CollectionResult();
    }
 else {
      result=new Result();
    }
    result.setType(xmlType);
  }
}
if (direction == INOUT) {
  parm=new Parameter();
  parm.setName(argName);
  parm.setType(xmlType);
  result.setType(xmlType);
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getInOutArguments().add(pao);
  }
  paShadow=new ProcedureArgument();
  paShadow.setName(argName);
  paShadow.setParameterName(argName);
}
 else {
  if (qh instanceof StoredProcedureQueryHandler) {
    ((StoredProcedureQueryHandler)qh).getOutArguments().add(pao);
  }
}
}
if (arg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
pa.setJdbcType(getJDBCTypeForTypeName(ScalarDatabaseTypeEnum.XMLTYPE_TYPE.toString()));
}
if (hasComplexArgs && arg.getEnclosedType().isPLSQLType()) {
pa.setComplexTypeName(storedProcedure.getCatalogName() + UNDERSCORE + arg.getTypeName());
if (paShadow != null) {
  paShadow.setComplexTypeName(pa.getComplexTypeName());
}
}
if (parm != null) {
qo.getParameters().add(parm);
}
}
}
if (procedureOperationModel.getBinaryAttachment()) {
Attachment attachment=new Attachment();
attachment.setMimeType(APP_OCTET_STREAM);
result.setAttachment(attachment);
}
handleSimpleXMLFormat(isSimpleXMLFormat,result,procedureOperationModel);
qo.setResult(result);
dbwsBuilder.getXrServiceModel().getOperations().put(qo.getName(),qo);
}
finishProcedureOperation();
}"
63930,"protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, length=attrs.getLength(); i < length; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
      contentHandler.startPrefixMapping(next.getLocalName(),next.getValue());
      handleXMLNSPrefixedAttribute(elem,next);
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
        contentHandler.startPrefixMapping(Constants.EMPTY_STRING,next.getValue());
      }
    }
    if (next.getNamespaceURI() != null && next.getNamespaceURI().equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) && next.getLocalName().equals(""String_Node_Str"")) {
      handleXsiTypeAttribute(next);
    }
    attributes.addAttribute(next);
  }
  return attributes;
}","protected IndexedAttributeList buildAttributeList(Element elem) throws SAXException {
  IndexedAttributeList attributes=new IndexedAttributeList();
  NamedNodeMap attrs=elem.getAttributes();
  for (int i=0, length=attrs.getLength(); i < length; i++) {
    Attr next=(Attr)attrs.item(i);
    String attrPrefix=next.getPrefix();
    if (attrPrefix != null && attrPrefix.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
      contentHandler.startPrefixMapping(next.getLocalName(),next.getValue());
      handleNewNamespaceDeclaration(elem,next.getLocalName(),next.getValue());
    }
 else     if (attrPrefix == null) {
      String name=next.getLocalName();
      if (name == null) {
        name=next.getNodeName();
      }
      if (name != null && name.equals(javax.xml.XMLConstants.XMLNS_ATTRIBUTE)) {
        contentHandler.startPrefixMapping(Constants.EMPTY_STRING,next.getValue());
        handleNewNamespaceDeclaration(elem,Constants.EMPTY_STRING,next.getValue());
      }
    }
    if (next.getNamespaceURI() != null && next.getNamespaceURI().equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI) && next.getLocalName().equals(""String_Node_Str"")) {
      handleXsiTypeAttribute(next);
    }
    attributes.addAttribute(next);
  }
  return attributes;
}"
63931,"/** 
 * Handle prefixed attribute - may need to declare the namespace  URI locally.
 */
protected void handlePrefixedAttribute(Element elem) throws SAXException {
  String prefix=elem.getPrefix();
  if (prefix == null) {
    prefix=Constants.EMPTY_STRING;
  }
  String uri=resolveNamespacePrefix(prefix);
  if (prefix == Constants.EMPTY_STRING && uri == null) {
    return;
  }
  if (uri == null || !uri.equals(elem.getNamespaceURI())) {
    NamespaceResolver tmpresolver=getTempResolver(elem);
    tmpresolver.put(prefix,elem.getNamespaceURI());
    if (!nsresolverList.contains(tmpresolver)) {
      nsresolverList.add(tmpresolver);
    }
    getContentHandler().startPrefixMapping(prefix,elem.getNamespaceURI());
  }
}","/** 
 * Handle prefixed attribute - may need to declare the namespace  URI locally.
 */
@Override protected void handlePrefixedAttribute(Element elem) throws SAXException {
  String prefix=elem.getPrefix();
  if (prefix == null) {
    prefix=Constants.EMPTY_STRING;
  }
  String uri=resolveNamespacePrefix(prefix);
  if ((uri == null && elem.getNamespaceURI() != null) || (uri != null && !uri.equals(elem.getNamespaceURI()))) {
    NamespaceResolver tmpresolver=getTempResolver(elem);
    tmpresolver.put(prefix,elem.getNamespaceURI());
    if (!nsresolverList.contains(tmpresolver)) {
      nsresolverList.add(tmpresolver);
    }
    String namespaceURI=elem.getNamespaceURI();
    if (null == namespaceURI) {
      namespaceURI=Constants.EMPTY_STRING;
    }
    getContentHandler().startPrefixMapping(prefix,namespaceURI);
  }
  NamedNodeMap attributes=elem.getAttributes();
  if (attributes != null) {
    for (int x=0; x < attributes.getLength(); x++) {
      Node attribute=attributes.item(x);
      if (XMLConstants.XMLNS_ATTRIBUTE.equals(attribute.getPrefix())) {
        NamespaceResolver tmpresolver=getTempResolver(elem);
        tmpresolver.put(attribute.getLocalName(),attribute.getNodeValue());
        if (!nsresolverList.contains(tmpresolver)) {
          nsresolverList.add(tmpresolver);
        }
      }
 else       if (XMLConstants.XMLNS_ATTRIBUTE.equals(attribute.getNodeName())) {
        NamespaceResolver tmpresolver=getTempResolver(elem);
        String namespace=attribute.getNodeValue();
        if (null == namespace) {
          namespace=Constants.EMPTY_STRING;
        }
        tmpresolver.put(Constants.EMPTY_STRING,namespace);
        if (!nsresolverList.contains(tmpresolver)) {
          nsresolverList.add(tmpresolver);
        }
      }
    }
  }
}"
63932,"/** 
 * Convenience method that iterates over each namespace resolver  in the resolver list until it locates a uri for 'prefix' or the final resolver is reached w/o success.
 * @param prefix
 * @return true if a URI exists in one of the resolvers in the list, false otherwise
 */
protected String resolveNamespacePrefix(String prefix){
  String uri=null;
  if (null == prefix) {
    for (int i=nsresolverList.size() - 1; i >= 0; i--) {
      NamespaceResolver next=nsresolverList.get(i);
      uri=next.getDefaultNamespaceURI();
      if ((uri != null) && uri.length() > 0) {
        break;
      }
    }
  }
 else {
    for (int i=nsresolverList.size() - 1; i >= 0; i--) {
      NamespaceResolver next=nsresolverList.get(i);
      uri=next.resolveNamespacePrefix(prefix);
      if ((uri != null) && uri.length() > 0) {
        break;
      }
    }
  }
  return uri;
}","/** 
 * Convenience method that iterates over each namespace resolver  in the resolver list until it locates a uri for 'prefix' or the final resolver is reached w/o success.
 * @param prefix
 * @return true if a URI exists in one of the resolvers in the list, false otherwise
 */
protected String resolveNamespacePrefix(String prefix){
  String uri=null;
  if (null == prefix || prefix.length() == 0) {
    for (int i=nsresolverList.size() - 1; i >= 0; i--) {
      NamespaceResolver next=nsresolverList.get(i);
      uri=next.getDefaultNamespaceURI();
      if ((uri != null) && uri.length() > 0) {
        break;
      }
    }
  }
 else {
    for (int i=nsresolverList.size() - 1; i >= 0; i--) {
      NamespaceResolver next=nsresolverList.get(i);
      uri=next.resolveNamespacePrefix(prefix);
      if ((uri != null) && uri.length() > 0) {
        break;
      }
    }
  }
  return uri;
}"
63933,"/** 
 * If there is a temporary namespace resolver for a given element, each entry contains a prefix that requires an endPrefixMapping event to be triggered
 */
protected void endPrefixMappings(Element elem) throws SAXException {
  NamespaceResolver tmpresolver=getTempResolver(elem);
  if (tmpresolver != null) {
    Enumeration<String> prefixes=tmpresolver.getPrefixes();
    while (prefixes.hasMoreElements()) {
      getContentHandler().endPrefixMapping(prefixes.nextElement());
    }
  }
}","/** 
 * If there is a temporary namespace resolver for a given element, each entry contains a prefix that requires an endPrefixMapping event to be triggered
 */
protected void endPrefixMappings(Element elem) throws SAXException {
  NamespaceResolver tmpresolver=getTempResolver(elem);
  if (tmpresolver != null) {
    ContentHandler contentHandler=getContentHandler();
    String defaultNamespace=tmpresolver.getDefaultNamespaceURI();
    if (null != defaultNamespace) {
      contentHandler.endPrefixMapping(Constants.EMPTY_STRING);
    }
    if (tmpresolver.hasPrefixesToNamespaces()) {
      for (      Entry<String,String> entry : tmpresolver.getPrefixesToNamespaces().entrySet()) {
        contentHandler.endPrefixMapping(entry.getKey());
      }
    }
  }
}"
63934,"public void node(Node node,NamespaceResolver namespaceResolver,String uri,String name){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),Constants.EMPTY_STRING,resolverPfx + Constants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),Constants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI,Constants.EMPTY_STRING,javax.xml.XMLConstants.XMLNS_ATTRIBUTE + Constants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    transformChildren(node,this.document,this.node,uri,name);
  }
}","public void node(Node node,NamespaceResolver namespaceResolver,String uri,String name){
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    Attr attr=(Attr)node;
    String resolverPfx=null;
    if (namespaceResolver != null) {
      resolverPfx=namespaceResolver.resolveNamespaceURI(attr.getNamespaceURI());
    }
    if (resolverPfx != null) {
      attribute(attr.getNamespaceURI(),Constants.EMPTY_STRING,resolverPfx + Constants.COLON + attr.getLocalName(),attr.getNodeValue());
    }
 else {
      attribute(attr.getNamespaceURI(),Constants.EMPTY_STRING,attr.getName(),attr.getNodeValue());
      if (attr.getNamespaceURI() != null) {
        attribute(javax.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI,Constants.EMPTY_STRING,javax.xml.XMLConstants.XMLNS_ATTRIBUTE + Constants.COLON + attr.getPrefix(),attr.getNamespaceURI());
      }
    }
  }
 else   if (node.getNodeType() == Node.TEXT_NODE) {
    characters(node.getNodeValue());
  }
 else {
    NodeRecordContentHandler mrcHdlr=new NodeRecordContentHandler(this,namespaceResolver);
    XMLFragmentReader xfRdr=new XMLFragmentReader(namespaceResolver);
    xfRdr.setContentHandler(mrcHdlr);
    xfRdr.setLexicalHandler(mrcHdlr);
    try {
      xfRdr.parse(node,uri,name);
    }
 catch (    SAXException sex) {
    }
  }
}"
63935,"/** 
 * Build the set of properties used to create the JAXBContext based on the EntityManagerFactory that this PersistenceContext wraps
 * @param persistenceUnitName
 * @param session
 * @return
 * @throws IOException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Map<String,Object> createJAXBProperties(AbstractSession session) throws IOException {
  Map<String,Object> properties=new HashMap<String,Object>(1);
  List<Object> metadataLocations=new ArrayList<Object>();
  addDynamicXMLMetadataSources(metadataLocations,session);
  String oxmLocation=(String)emf.getProperties().get(""String_Node_Str"");
  if (oxmLocation != null) {
    metadataLocations.add(oxmLocation);
  }
  Object passedOXMLocations=emf.getProperties().get(JAXBContextProperties.OXM_METADATA_SOURCE);
  if (passedOXMLocations != null) {
    if (passedOXMLocations instanceof Collection) {
      metadataLocations.addAll((Collection)passedOXMLocations);
    }
 else {
      metadataLocations.add(passedOXMLocations);
    }
  }
  metadataLocations.add(new LinkMetadataSource());
  metadataLocations.add(new ReportQueryResultListMetadataSource());
  metadataLocations.add(new ReportQueryResultListItemMetadataSource());
  metadataLocations.add(new SingleResultQueryListMetadataSource());
  metadataLocations.add(new SimpleHomogeneousListMetadataSource());
  metadataLocations.add(new ReportQueryResultCollectionMetadataSource());
  metadataLocations.add(new ReadAllQueryResultCollectionMetadataSource());
  metadataLocations.add(new JavaLangMetadataSource());
  metadataLocations.add(new JavaMathMetadataSource());
  metadataLocations.add(new JavaUtilMetadataSource());
  properties.put(JAXBContextProperties.OXM_METADATA_SOURCE,metadataLocations);
  properties.put(""String_Node_Str"",new PreLoginMappingAdapter((AbstractSession)session));
  return properties;
}","/** 
 * Build the set of properties used to create the JAXBContext based on the EntityManagerFactory that this PersistenceContext wraps
 * @param persistenceUnitName
 * @param session
 * @return
 * @throws IOException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected Map<String,Object> createJAXBProperties(AbstractSession session) throws IOException {
  Map<String,Object> properties=new HashMap<String,Object>(1);
  List<Object> metadataLocations=new ArrayList<Object>();
  addDynamicXMLMetadataSources(metadataLocations,session);
  String oxmLocation=(String)emf.getProperties().get(""String_Node_Str"");
  if (oxmLocation != null) {
    metadataLocations.add(oxmLocation);
  }
  Object passedOXMLocations=emf.getProperties().get(JAXBContextProperties.OXM_METADATA_SOURCE);
  if (passedOXMLocations != null) {
    if (passedOXMLocations instanceof Collection) {
      metadataLocations.addAll((Collection)passedOXMLocations);
    }
 else {
      metadataLocations.add(passedOXMLocations);
    }
  }
  metadataLocations.add(new LinkMetadataSource());
  metadataLocations.add(new ReportQueryResultListMetadataSource());
  metadataLocations.add(new ReportQueryResultListItemMetadataSource());
  metadataLocations.add(new SingleResultQueryListMetadataSource());
  metadataLocations.add(new SimpleHomogeneousListMetadataSource());
  metadataLocations.add(new ReportQueryResultCollectionMetadataSource());
  metadataLocations.add(new ReadAllQueryResultCollectionMetadataSource());
  metadataLocations.add(new JavaLangMetadataSource());
  metadataLocations.add(new JavaMathMetadataSource());
  metadataLocations.add(new JavaUtilMetadataSource());
  properties.put(JAXBContextProperties.OXM_METADATA_SOURCE,metadataLocations);
  properties.put(JAXBContextProperties.SESSION_EVENT_LISTENER,new PreLoginMappingAdapter((AbstractSession)session));
  return properties;
}"
63936,"private NodeList selectNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy){
  NodeList resultNodes=getNodes(contextNode,xPathFragment,xmlNamespaceResolver,nullPolicy);
  if (xPathFragment.getNextFragment() != null) {
    Node resultNode;
    XMLNodeList result=new XMLNodeList();
    int numberOfResultNodes=resultNodes.getLength();
    for (int x=0; x < numberOfResultNodes; x++) {
      resultNode=resultNodes.item(x);
      result.addAll(selectNodes(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,nullPolicy));
    }
    return result;
  }
  return resultNodes;
}","private NodeList selectNodes(Node contextNode,XPathFragment xPathFragment,XMLNamespaceResolver xmlNamespaceResolver,AbstractNullPolicy nullPolicy,boolean omitText){
  NodeList resultNodes=getNodes(contextNode,xPathFragment,xmlNamespaceResolver,nullPolicy);
  if (xPathFragment.getNextFragment() != null && !(omitText && xPathFragment.getNextFragment().nameIsText())) {
    Node resultNode;
    XMLNodeList result=new XMLNodeList();
    int numberOfResultNodes=resultNodes.getLength();
    for (int x=0; x < numberOfResultNodes; x++) {
      resultNode=resultNodes.item(x);
      result.addAll(selectNodes(resultNode,xPathFragment.getNextFragment(),xmlNamespaceResolver,nullPolicy,omitText));
    }
    return result;
  }
  return resultNodes;
}"
63937,"/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(Field xmlField,Node parent,Object value,CoreAbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          if (value == XMLRecord.NIL && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE))) {
            Element parentElement=(Element)node.getParentNode();
            addXsiNilToElement(parentElement,xmlField);
            parentElement.removeChild(node);
          }
 else {
            String stringValue=(String)session.getDatasourcePlatform().getConversionManager().convertObject(value,CoreClassConstants.STRING);
            Element parentElement=(Element)node.getParentNode();
            if (parentElement == null && parent.getNodeType() == Node.ELEMENT_NODE) {
              parentElement=(Element)parent;
            }
            if (stringValue.length() == 0 && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
              parentElement.removeChild(node);
            }
 else {
              node.setNodeValue(stringValue);
              if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
                Attr nil=parentElement.getAttributeNodeNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
                if (nil != null) {
                  parentElement.removeAttributeNode(nil);
                }
              }
            }
          }
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}","/** 
 * Replace the value of the nodes matching <code>xpathString</code> with <code>value</code>. This method handles elements, indexed elements, and attributes.
 * @param xmlField Field containing XPath query string
 * @param parent Parent element
 * @param value New value for the node
 * @return <code>NodeList</code> containing the nodes that were replaced.
 */
public NodeList replaceValue(Field xmlField,Node parent,Object value,CoreAbstractSession session) throws XMLMarshalException {
  NodeList nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField));
  int numberOfNodes=nodes.getLength();
  if (numberOfNodes == 0 && xmlField.getLastXPathFragment().nameIsText()) {
    nodes=unmarshalXPathEngine.selectNodes(parent,xmlField,getNamespaceResolverForField(xmlField),null,true);
    XMLNodeList textNodes=new XMLNodeList();
    for (int i=0; i < nodes.getLength(); i++) {
      Element nextNode=(Element)nodes.item(i);
      Text text=nextNode.getOwnerDocument().createTextNode(""String_Node_Str"");
      nextNode.appendChild(text);
      textNodes.add(text);
    }
    numberOfNodes=textNodes.getLength();
  }
  XMLNodeList createdElements=new XMLNodeList();
  for (int i=0; i < numberOfNodes; i++) {
    Node node=nodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && (value == null)) {
        Node parentNode=node.getParentNode();
        Node grandParentNode=parentNode.getParentNode();
        grandParentNode.removeChild(parentNode);
      }
 else {
        if (value == null) {
          ((Attr)node).getOwnerElement().removeAttributeNode((Attr)node);
        }
 else {
          if (value == XMLRecord.NIL && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE))) {
            Element parentElement=(Element)node.getParentNode();
            addXsiNilToElement(parentElement,xmlField);
            parentElement.removeChild(node);
          }
 else {
            String stringValue=(String)session.getDatasourcePlatform().getConversionManager().convertObject(value,CoreClassConstants.STRING);
            Element parentElement=(Element)node.getParentNode();
            if (parentElement == null && parent.getNodeType() == Node.ELEMENT_NODE) {
              parentElement=(Element)parent;
            }
            if (stringValue.length() == 0 && ((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
              parentElement.removeChild(node);
            }
 else {
              node.setNodeValue(stringValue);
              if (((node.getNodeType() == Node.TEXT_NODE) || (node.getNodeType() == Node.CDATA_SECTION_NODE)) && parentElement != null) {
                Attr nil=parentElement.getAttributeNodeNS(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,Constants.SCHEMA_NIL_ATTRIBUTE);
                if (nil != null) {
                  parentElement.removeAttributeNode(nil);
                }
              }
            }
          }
        }
      }
    }
 else {
      Element element=(Element)node;
      Node parentNode=element.getParentNode();
      if (value == null) {
        parentNode.removeChild(element);
      }
 else {
        String elementName=element.getTagName();
        Element newElement=null;
        Object valueToWrite=getValueToWrite(value,xmlField,session);
        XPathFragment childFrag=new XPathFragment(elementName);
        childFrag.setNamespaceURI(element.getNamespaceURI());
        newElement=(Element)createElement(parentNode,childFrag,xmlField,valueToWrite,session);
        createdElements.add(newElement);
        if (newElement != element) {
          parentNode.replaceChild(newElement,element);
        }
      }
    }
  }
  if (xmlField.isTypedTextField()) {
    addTypeAttributes(createdElements,xmlField,value,resolveNamespacePrefixForURI(javax.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI,getNamespaceResolverForField(xmlField)));
  }
  return nodes;
}"
63938,"@Override public QName buildQNameFromString(String stringValue,AbstractUnmarshalRecord record){
  int index=stringValue.lastIndexOf(Constants.COLON);
  if (index > -1) {
    String prefix=stringValue.substring(0,index);
    String localName=stringValue.substring(index + 1);
    String namespaceURI=record.resolveNamespacePrefix(prefix);
    return new QName(namespaceURI,localName,prefix);
  }
 else {
    String namespaceURI=record.resolveNamespacePrefix(Constants.EMPTY_STRING);
    if (namespaceURI == null) {
      namespaceURI=record.resolveNamespacePrefix(null);
    }
    return new QName(namespaceURI,stringValue);
  }
}","@Override public QName buildQNameFromString(String stringValue,AbstractUnmarshalRecord record){
  stringValue=stringValue.trim();
  int index=stringValue.lastIndexOf(Constants.COLON);
  if (index > -1) {
    String prefix=stringValue.substring(0,index);
    String localName=stringValue.substring(index + 1);
    if (record.isNamespaceAware()) {
      String namespaceURI=record.resolveNamespacePrefix(prefix);
      return new QName(namespaceURI,localName,prefix);
    }
 else {
      return new QName(null,localName,prefix);
    }
  }
 else {
    String namespaceURI=record.resolveNamespacePrefix(Constants.EMPTY_STRING);
    if (namespaceURI == null) {
      namespaceURI=record.resolveNamespacePrefix(null);
    }
    return new QName(namespaceURI,stringValue);
  }
}"
63939,"/** 
 * INTERNAL:
 * @since 2.4
 */
@Override public Object convertValueBasedOnSchemaType(Field xmlField,Object value,ConversionManager conversionManager,AbstractUnmarshalRecord record){
  if (xmlField.getSchemaType() != null) {
    if (Constants.QNAME_QNAME.equals(xmlField.getSchemaType())) {
      String stringValue=(String)value;
      int indexOpen=stringValue.indexOf('{');
      int indexClose=stringValue.indexOf('}');
      String uri=null;
      String localName=null;
      if (indexOpen > -1 && indexClose > -1) {
        uri=stringValue.substring(indexOpen + 1,indexClose);
        localName=stringValue.substring(indexClose + 1);
      }
 else {
        localName=stringValue;
      }
      if (uri != null) {
        return new QName(uri,localName);
      }
 else {
        return new QName(localName);
      }
    }
 else {
      Class fieldType=xmlField.getType();
      if (fieldType == null) {
        fieldType=xmlField.getJavaClass(xmlField.getSchemaType());
      }
      return conversionManager.convertObject(value,fieldType,xmlField.getSchemaType());
    }
  }
  return value;
}","/** 
 * INTERNAL:
 * @since 2.4
 */
@Override public Object convertValueBasedOnSchemaType(Field xmlField,Object value,ConversionManager conversionManager,AbstractUnmarshalRecord record){
  if (xmlField.getSchemaType() != null) {
    if (Constants.QNAME_QNAME.equals(xmlField.getSchemaType())) {
      String stringValue=(String)value;
      int indexOpen=stringValue.indexOf('{');
      int indexClose=stringValue.indexOf('}');
      String uri=null;
      String localName=null;
      if (indexOpen > -1 && indexClose > -1) {
        uri=stringValue.substring(indexOpen + 1,indexClose);
        localName=stringValue.substring(indexClose + 1);
      }
 else {
        QName obj=(QName)xmlField.convertValueBasedOnSchemaType(stringValue,conversionManager,record);
        localName=obj.getLocalPart();
        uri=obj.getNamespaceURI();
      }
      if (uri != null) {
        return new QName(uri,localName);
      }
 else {
        return new QName(localName);
      }
    }
 else {
      Class fieldType=xmlField.getType();
      if (fieldType == null) {
        fieldType=xmlField.getJavaClass(xmlField.getSchemaType());
      }
      return conversionManager.convertObject(value,fieldType,xmlField.getSchemaType());
    }
  }
  return value;
}"
63940,"protected String getStringForQName(QName qName){
  if (null == qName) {
    return null;
  }
  String namespaceURI=qName.getNamespaceURI();
  if (null == namespaceURI || 0 == namespaceURI.length()) {
    if (getNamespaceResolver() != null && getNamespaceResolver().getDefaultNamespaceURI() != null) {
      defaultNamespaceDeclaration(namespaceURI);
    }
    return qName.getLocalPart();
  }
 else {
    NamespaceResolver namespaceResolver=getNamespaceResolver();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    if (namespaceURI.equals(namespaceResolver.getDefaultNamespaceURI())) {
      return qName.getLocalPart();
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      prefix=namespaceResolver.generatePrefix();
      namespaceDeclaration(prefix,namespaceURI);
    }
    if (Constants.EMPTY_STRING.equals(prefix)) {
      return qName.getLocalPart();
    }
    return prefix + Constants.COLON + qName.getLocalPart();
  }
}","protected String getStringForQName(QName qName){
  if (null == qName) {
    return null;
  }
  String namespaceURI=qName.getNamespaceURI();
  if (null == namespaceURI || 0 == namespaceURI.length()) {
    if (getNamespaceResolver() != null && getNamespaceResolver().getDefaultNamespaceURI() != null) {
      defaultNamespaceDeclaration(namespaceURI);
    }
    return qName.getLocalPart();
  }
 else {
    NamespaceResolver namespaceResolver=getNamespaceResolver();
    if (namespaceResolver == null) {
      throw XMLMarshalException.namespaceResolverNotSpecified(namespaceURI);
    }
    if (namespaceURI.equals(namespaceResolver.getDefaultNamespaceURI())) {
      return qName.getLocalPart();
    }
    String prefix=namespaceResolver.resolveNamespaceURI(namespaceURI);
    if (null == prefix) {
      if (namespaceURI.equals(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI)) {
        prefix=namespaceResolver.generatePrefix(Constants.SCHEMA_PREFIX);
      }
 else {
        prefix=namespaceResolver.generatePrefix();
      }
      namespaceDeclaration(prefix,namespaceURI);
    }
    if (Constants.EMPTY_STRING.equals(prefix)) {
      return qName.getLocalPart();
    }
    return prefix + Constants.COLON + qName.getLocalPart();
  }
}"
63941,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field xmlField=null;
  if (isCollection) {
    xmlField=(Field)((BinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(Field)((BinaryDataMapping)mapping).getField();
  }
  if (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName)) {
    if (record.isNamespaceAware() && !Constants.XOP_URL.equals(namespaceURI)) {
      return;
    }
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attachmentUnmarshaller == null) {
      throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession());
    data=converter.convertDataValueToObjectValue(data,record.getSession(),unmarshaller);
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else   if (c_id == null) {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field xmlField=null;
  if (isCollection) {
    xmlField=(Field)((BinaryDataCollectionMapping)mapping).getField();
  }
 else {
    xmlField=(Field)((BinaryDataMapping)mapping).getField();
  }
  if (INCLUDE_ELEMENT_NAME.equals(localName) || INCLUDE_ELEMENT_NAME.equals(qName)) {
    if (record.isNamespaceAware() && !Constants.XOP_URL.equals(namespaceURI)) {
      return;
    }
    XMLAttachmentUnmarshaller attachmentUnmarshaller=record.getUnmarshaller().getAttachmentUnmarshaller();
    Object data=null;
    Class attributeClassification=null;
    if (isCollection) {
      attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    }
 else {
      attributeClassification=mapping.getAttributeClassification();
    }
    if (attachmentUnmarshaller == null) {
      throw XMLMarshalException.noAttachmentUnmarshallerSet(this.c_id);
    }
    if (attributeClassification.equals(XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER)) {
      data=attachmentUnmarshaller.getAttachmentAsDataHandler(this.c_id);
    }
 else {
      data=attachmentUnmarshaller.getAttachmentAsByteArray(this.c_id);
    }
    CoreContainerPolicy cp=null;
    if (isCollection) {
      cp=mapping.getContainerPolicy();
    }
    data=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(data,mapping.getAttributeClassification(),record.getSession(),cp);
    data=converter.convertDataValueToObjectValue(data,record.getSession(),unmarshaller);
    if (isCollection) {
      if (data != null) {
        record.addAttributeValue((ContainerValue)nodeValue,data);
      }
    }
 else {
      record.setAttributeValue(data,mapping);
    }
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
    }
  }
 else   if (c_id == null) {
    if (!xmlField.isSelfField()) {
      XMLReader xmlReader=record.getXMLReader();
      xmlReader.setContentHandler(record);
      xmlReader.setLexicalHandler(record);
      record.endElement(namespaceURI,localName,qName);
    }
  }
}"
63942,"public Object getObjectValueFromDataHandler(DataHandler handler,Class cls){
  return XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(handler,cls,record.getSession());
}","public Object getObjectValueFromDataHandler(DataHandler handler,Class cls){
  CoreContainerPolicy cp=null;
  if (isCollection) {
    cp=mapping.getContainerPolicy();
  }
  return XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(handler,cls,record.getSession(),cp);
}"
63943,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Field xmlField=(Field)xmlBinaryDataCollectionMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataCollectionMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Field xmlField=(Field)xmlBinaryDataCollectionMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataCollectionMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession(),xmlBinaryDataCollectionMapping.getContainerPolicy()));
        }
      }
 else {
        fieldValue=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession(),xmlBinaryDataCollectionMapping.getContainerPolicy()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}"
63944,"public EncodedData getBytesForBinaryValue(Object attributeValue,Marshaller marshaller,String mimeType){
  if (attributeValue instanceof DataHandler) {
    return getBytesFromDataHandler((DataHandler)attributeValue);
  }
 else   if (attributeValue instanceof Image) {
    return getBytesFromImage((Image)attributeValue,mimeType);
  }
 else   if (attributeValue instanceof Source) {
    return getBytesFromSource((Source)attributeValue,marshaller,mimeType);
  }
 else   if (attributeValue instanceof MimeMultipart) {
    return getBytesFromMultipart((MimeMultipart)attributeValue,marshaller);
  }
 else   if (attributeValue.getClass() == CoreClassConstants.APBYTE) {
    return new EncodedData((byte[])attributeValue,mimeType);
  }
 else   if (attributeValue.getClass() == CoreClassConstants.ABYTE) {
    return getBytesFromByteObjectArray((Byte[])attributeValue,mimeType);
  }
  return new EncodedData(new byte[0],null);
}","public EncodedData getBytesForBinaryValue(Object attributeValue,Marshaller marshaller,String mimeType){
  return getBytesForSingleBinaryValue(attributeValue,marshaller,mimeType);
}"
63945,"public Object convertObject(Object obj,Class classification,CoreAbstractSession session){
  if (classification == DATA_HANDLER) {
    return convertObjectToDataHandler(obj,session);
  }
 else   if (classification == IMAGE) {
    return convertObjectToImage(obj);
  }
 else   if (classification == SOURCE) {
    return convertObjectToSource(obj);
  }
 else   if (classification == MULTIPART) {
    return convertObjectToMultipart(obj);
  }
 else {
    return session.getDatasourcePlatform().getConversionManager().convertObject(obj,classification);
  }
}","public Object convertObject(Object obj,Class classification,CoreAbstractSession session,CoreContainerPolicy cp){
  if (obj instanceof List && cp != null) {
    List theList=(List)obj;
    Object container=cp.containerInstance(theList.size());
    for (int i=0; i < theList.size(); i++) {
      Object next=theList.get(i);
      cp.addInto(convertSingleObject(next,classification,session),container,session);
    }
    return container;
  }
  return convertSingleObject(obj,classification,session);
}"
63946,"/** 
 * Handle swaRef and inline attribute cases.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String URI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlBinaryDataMapping.getField();
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  Object fieldValue=null;
  if (xmlBinaryDataMapping.isSwaRef()) {
    if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
      if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
      }
 else {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
      }
      xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
    }
  }
 else {
    fieldValue=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
    xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
  }
}","/** 
 * Handle swaRef and inline attribute cases.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String URI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlBinaryDataMapping.getField();
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  Object fieldValue=null;
  if (xmlBinaryDataMapping.isSwaRef()) {
    if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
      if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
      }
 else {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
      }
      xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession(),null));
    }
  }
 else {
    fieldValue=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
    xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession(),null));
  }
}"
63947,"/** 
 * Convert the given object to the appropriate type by invoking the appropriate ConversionManager method.
 * @param sourceObject - will always be a string if read from XML
 * @param javaClass - the class that the object must be converted to
 * @param schemaTypeQName - the XML schema that the object is being converted from
 * @return - the newly converted object
 */
@Override public Object convertObject(Object sourceObject,Class javaClass,QName schemaTypeQName) throws ConversionException {
  if (schemaTypeQName == null) {
    return convertObject(sourceObject,javaClass);
  }
  if (sourceObject == null) {
    return super.convertObject(sourceObject,javaClass);
  }
 else   if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == CoreClassConstants.OBJECT)) {
    return sourceObject;
  }
 else   if ((javaClass == CoreClassConstants.CALENDAR) || (javaClass == CoreClassConstants.GREGORIAN_CALENDAR)) {
    return convertObjectToCalendar(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.ABYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteObjectArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteObjectArray(sourceObject);
    }
  }
 else   if (javaClass == CoreClassConstants.APBYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteArray(sourceObject);
    }
  }
 else   if ((javaClass == CoreClassConstants.List_Class) && (sourceObject instanceof String)) {
    return convertStringToList(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof List)) {
    return convertListToString(sourceObject);
  }
 else   if (sourceObject instanceof byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromBytes((byte[])sourceObject);
    }
    return Helper.buildHexStringFromBytes((byte[])sourceObject);
  }
 else   if (sourceObject instanceof Byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromObjectBytes((Byte[])sourceObject);
    }
    return buildHexStringFromObjectBytes((Byte[])sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.UTILDATE)) {
    return convertObjectToUtilDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.SQLDATE) {
    return convertObjectToSQLDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIME) {
    return convertObjectToSQLTime(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIMESTAMP) {
    return convertObjectToTimestamp(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == Constants.QNAME_CLASS) && (sourceObject != null)) {
    return convertObjectToQName(sourceObject);
  }
 else   if (javaClass == CoreClassConstants.STRING) {
    return convertObjectToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == java.net.URI.class)) {
    return convertObjectToURI(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.XML_GREGORIAN_CALENDAR)) {
    return convertObjectToXMLGregorianCalendar(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.DURATION)) {
    return convertObjectToDuration(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.CHAR)) {
    return convertObjectToChar(sourceObject,schemaTypeQName);
  }
 else {
    try {
      return super.convertObject(sourceObject,javaClass);
    }
 catch (    ConversionException ex) {
      if (sourceObject.getClass() == CoreClassConstants.STRING) {
        return super.convertObject(((String)sourceObject).trim(),javaClass);
      }
      throw ex;
    }
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}","/** 
 * Convert the given object to the appropriate type by invoking the appropriate ConversionManager method.
 * @param sourceObject - will always be a string if read from XML
 * @param javaClass - the class that the object must be converted to
 * @param schemaTypeQName - the XML schema that the object is being converted from
 * @return - the newly converted object
 */
@Override public Object convertObject(Object sourceObject,Class javaClass,QName schemaTypeQName) throws ConversionException {
  if (schemaTypeQName == null) {
    return convertObject(sourceObject,javaClass);
  }
  if (sourceObject == null) {
    return super.convertObject(sourceObject,javaClass);
  }
 else   if ((sourceObject.getClass() == javaClass) || (javaClass == null) || (javaClass == CoreClassConstants.OBJECT)) {
    return sourceObject;
  }
 else   if ((javaClass == CoreClassConstants.CALENDAR) || (javaClass == CoreClassConstants.GREGORIAN_CALENDAR)) {
    return convertObjectToCalendar(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.ABYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteObjectArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteObjectArray(sourceObject);
    }
  }
 else   if (javaClass == CoreClassConstants.APBYTE) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.HEX_BINARY)) {
      return super.convertObjectToByteArray(sourceObject);
    }
 else     if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return convertSchemaBase64ToByteArray(sourceObject);
    }
  }
 else   if ((javaClass == CoreClassConstants.List_Class) && (sourceObject instanceof String)) {
    return convertStringToList(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.STRING) && (sourceObject instanceof List)) {
    return convertListToString(sourceObject,schemaTypeQName);
  }
 else   if (sourceObject instanceof byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromBytes((byte[])sourceObject);
    }
    return Helper.buildHexStringFromBytes((byte[])sourceObject);
  }
 else   if (sourceObject instanceof Byte[]) {
    if (schemaTypeQName.getLocalPart().equalsIgnoreCase(Constants.BASE_64_BINARY)) {
      return buildBase64StringFromObjectBytes((Byte[])sourceObject);
    }
    return buildHexStringFromObjectBytes((Byte[])sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.UTILDATE)) {
    return convertObjectToUtilDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.SQLDATE) {
    return convertObjectToSQLDate(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIME) {
    return convertObjectToSQLTime(sourceObject,schemaTypeQName);
  }
 else   if (javaClass == CoreClassConstants.TIMESTAMP) {
    return convertObjectToTimestamp(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == Constants.QNAME_CLASS) && (sourceObject != null)) {
    return convertObjectToQName(sourceObject);
  }
 else   if (javaClass == CoreClassConstants.STRING) {
    return convertObjectToString(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == java.net.URI.class)) {
    return convertObjectToURI(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.XML_GREGORIAN_CALENDAR)) {
    return convertObjectToXMLGregorianCalendar(sourceObject,schemaTypeQName);
  }
 else   if ((javaClass == CoreClassConstants.DURATION)) {
    return convertObjectToDuration(sourceObject);
  }
 else   if ((javaClass == CoreClassConstants.CHAR)) {
    return convertObjectToChar(sourceObject,schemaTypeQName);
  }
 else {
    try {
      return super.convertObject(sourceObject,javaClass);
    }
 catch (    ConversionException ex) {
      if (sourceObject.getClass() == CoreClassConstants.STRING) {
        return super.convertObject(((String)sourceObject).trim(),javaClass);
      }
      throw ex;
    }
  }
  throw ConversionException.couldNotBeConverted(sourceObject,javaClass);
}"
63948,"public String convertListToString(Object sourceObject) throws ConversionException {
  StringBuilder returnStringBuilder=new StringBuilder();
  if (sourceObject instanceof List) {
    List list=(List)sourceObject;
    for (int i=0, listSize=list.size(); i < listSize; i++) {
      Object next=list.get(i);
      if (i > 0) {
        returnStringBuilder.append(' ');
      }
      returnStringBuilder.append(convertObjectToString(next));
    }
  }
  return returnStringBuilder.toString();
}","public String convertListToString(Object sourceObject,QName schemaType) throws ConversionException {
  StringBuilder returnStringBuilder=new StringBuilder();
  if (sourceObject instanceof List) {
    List list=(List)sourceObject;
    for (int i=0, listSize=list.size(); i < listSize; i++) {
      Object next=list.get(i);
      if (i > 0) {
        returnStringBuilder.append(' ');
      }
      returnStringBuilder.append((String)convertObject(next,String.class,schemaType));
    }
  }
  return returnStringBuilder.toString();
}"
63949,"/** 
 * Convert the given sourceObject (String) to the appropriate collection type specified by the containerPolicy, using the elementType to properly convert each element of the list.
 * @param sourceObject - will always be a string if read from XML
 * @param elementType - the type of the elements contained in the list
 * @return - the newly converted object
 */
public Object convertStringToList(Object sourceObject,Class elementType,ContainerPolicy containerPolicy) throws ConversionException {
  Collection collection=(Collection)containerPolicy.containerInstance();
  if (sourceObject instanceof String) {
    StringTokenizer tokenizer=new StringTokenizer((String)sourceObject,""String_Node_Str"");
    while (tokenizer.hasMoreElements()) {
      String token=tokenizer.nextToken();
      collection.add(convertObject(token,elementType));
    }
  }
  return collection;
}","/** 
 * Convert the given sourceObject (String) to the appropriate collection type specified by the containerPolicy, using the elementType to properly convert each element of the list.
 * @param sourceObject - will always be a string if read from XML
 * @param elementType - the type of the elements contained in the list
 * @return - the newly converted object
 */
public Object convertStringToList(Object sourceObject,Class elementType,ContainerPolicy containerPolicy,QName schemaType) throws ConversionException {
  Collection collection=(Collection)containerPolicy.containerInstance();
  if (sourceObject instanceof String) {
    StringTokenizer tokenizer=new StringTokenizer((String)sourceObject,""String_Node_Str"");
    while (tokenizer.hasMoreElements()) {
      String token=tokenizer.nextToken();
      collection.add(convertObject(token,elementType,schemaType));
    }
  }
  return collection;
}"
63950,"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field field=null;
  Object value=this.getCharacters();
  Class attributeClassification=null;
  AbstractNullPolicy nullPolicy;
  boolean isSwaRef=false;
  if (isCollection) {
    isSwaRef=((BinaryDataCollectionMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    nullPolicy=((BinaryDataCollectionMapping)mapping).getNullPolicy();
  }
 else {
    isSwaRef=((BinaryDataMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataMapping)mapping).getField();
    attributeClassification=((BinaryDataMapping)mapping).getAttributeClassification();
    nullPolicy=((BinaryDataMapping)mapping).getNullPolicy();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(getCharacters(),attributeClassification);
    if (parent.isNil() && parent.getXMLReader().isNullRepresentedByXsiNil(nullPolicy)) {
      value=null;
      isCollection=isCollection && parent.getXMLReader().isInCollection();
    }
 else {
      if (null != valueFromReader) {
        value=valueFromReader;
      }
 else {
        String valueString=value.toString();
        if (valueString.length() == 0 && nullPolicy.isNullRepresentedByEmptyNode()) {
          value=null;
        }
 else {
          value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(valueString);
        }
      }
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession());
    }
  }
  value=converter.convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
  if (isCollection) {
    parent.addAttributeValue((ContainerValue)nodeValue,value);
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}","@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {
  Field field=null;
  Object value=this.getCharacters();
  Class attributeClassification=null;
  AbstractNullPolicy nullPolicy;
  boolean isSwaRef=false;
  CoreContainerPolicy cp=null;
  if (isCollection) {
    isSwaRef=((BinaryDataCollectionMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataCollectionMapping)mapping).getField();
    attributeClassification=((BinaryDataCollectionMapping)mapping).getAttributeElementClass();
    nullPolicy=((BinaryDataCollectionMapping)mapping).getNullPolicy();
    cp=((BinaryDataCollectionMapping)mapping).getContainerPolicy();
  }
 else {
    isSwaRef=((BinaryDataMapping)mapping).isSwaRef();
    field=(Field)((BinaryDataMapping)mapping).getField();
    attributeClassification=((BinaryDataMapping)mapping).getAttributeClassification();
    nullPolicy=((BinaryDataMapping)mapping).getNullPolicy();
  }
  if (isSwaRef && (parent.getUnmarshaller().getAttachmentUnmarshaller() != null)) {
    if (attributeClassification != null && attributeClassification == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value.toString());
    }
 else {
      value=parent.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value.toString());
    }
  }
 else {
    Object valueFromReader=this.parent.getXMLReader().getValue(getCharacters(),attributeClassification);
    if (parent.isNil() && parent.getXMLReader().isNullRepresentedByXsiNil(nullPolicy)) {
      value=null;
      isCollection=isCollection && parent.getXMLReader().isInCollection();
    }
 else {
      if (null != valueFromReader) {
        value=valueFromReader;
      }
 else {
        String valueString=value.toString();
        if (valueString.length() == 0 && nullPolicy.isNullRepresentedByEmptyNode()) {
          value=null;
        }
 else {
          if (field.usesSingleNode()) {
            value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ListToByteArrayList(valueString,cp,parent.getSession());
          }
 else {
            value=XMLConversionManager.getDefaultXMLManager().convertSchemaBase64ToByteArray(valueString);
          }
        }
      }
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(value,attributeClassification,parent.getSession(),cp);
    }
  }
  value=converter.convertDataValueToObjectValue(value,parent.getSession(),parent.getUnmarshaller());
  if (isCollection) {
    parent.addAttributeValue((ContainerValue)nodeValue,value);
  }
 else {
    parent.setAttributeValue(value,mapping);
  }
  if (!field.isSelfField()) {
    parent.getXMLReader().setContentHandler(parent);
    parent.endElement(namespaceURI,localName,qName);
  }
  resetStringBuffer();
}"
63951,"public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,CacheKey cacheKey,AbstractSession executionSession,boolean isTargetProtected,Boolean[] wasCacheUsed){
  Object value=row.get(this.field);
  if (value == null) {
    return value;
  }
  Object fieldValue=null;
  XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
  if (value instanceof String) {
    if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
      }
 else {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
      }
    }
 else     if (!this.isSwaRef()) {
      byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      fieldValue=bytes;
    }
  }
 else   if (value instanceof byte[] || value instanceof Byte[]) {
    fieldValue=value;
  }
 else {
    XMLRecord record=(XMLRecord)value;
    if (getNullPolicy().valueIsNull((Element)record.getDOM())) {
      return null;
    }
    record.setSession(executionSession);
    if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
      String xpath=XMLConstants.EMPTY_STRING;
      String prefix=null;
      NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
      if (descriptorResolver != null) {
        prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
      }
      NamespaceResolver tempResolver=new NamespaceResolver();
      tempResolver.put(prefix,XMLConstants.XOP_URL);
      xpath=prefix + include;
      XMLField field=new XMLField(xpath);
      field.setNamespaceResolver(tempResolver);
      String includeValue=(String)record.get(field);
      if (includeValue != null) {
        if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
        }
 else {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
        }
      }
 else {
        fieldValue=record.get(XMLConstants.TEXT);
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
 else     if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
      String refValue=(String)record.get(XMLConstants.TEXT);
      if (refValue != null) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
      }
    }
 else {
      fieldValue=record.get(XMLConstants.TEXT);
      if (fieldValue != null) {
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
 else {
        fieldValue=new byte[0];
      }
    }
  }
  Object attributeValue=convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
  attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,getAttributeClassification(),executionSession);
  return attributeValue;
}","public Object valueFromRow(AbstractRecord row,JoinedAttributeManager joinManager,ObjectBuildingQuery query,CacheKey cacheKey,AbstractSession executionSession,boolean isTargetProtected,Boolean[] wasCacheUsed){
  Object value=row.get(this.field);
  if (value == null) {
    return value;
  }
  Object fieldValue=null;
  XMLUnmarshaller unmarshaller=((XMLRecord)row).getUnmarshaller();
  if (value instanceof String) {
    if (this.isSwaRef() && (unmarshaller.getAttachmentUnmarshaller() != null)) {
      if (getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler((String)value);
      }
 else {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray((String)value);
      }
    }
 else     if (!this.isSwaRef()) {
      byte[] bytes=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
      fieldValue=bytes;
    }
  }
 else   if (value instanceof byte[] || value instanceof Byte[]) {
    fieldValue=value;
  }
 else {
    XMLRecord record=(XMLRecord)value;
    if (getNullPolicy().valueIsNull((Element)record.getDOM())) {
      return null;
    }
    record.setSession(executionSession);
    if ((unmarshaller.getAttachmentUnmarshaller() != null) && unmarshaller.getAttachmentUnmarshaller().isXOPPackage() && !this.isSwaRef()&& !this.shouldInlineBinaryData()) {
      String xpath=XMLConstants.EMPTY_STRING;
      String prefix=null;
      NamespaceResolver descriptorResolver=((XMLDescriptor)getDescriptor()).getNamespaceResolver();
      if (descriptorResolver != null) {
        prefix=descriptorResolver.resolveNamespaceURI(XMLConstants.XOP_URL);
      }
      if (prefix == null) {
        prefix=XMLConstants.XOP_PREFIX;
      }
      NamespaceResolver tempResolver=new NamespaceResolver();
      tempResolver.put(prefix,XMLConstants.XOP_URL);
      xpath=prefix + include;
      XMLField field=new XMLField(xpath);
      field.setNamespaceResolver(tempResolver);
      String includeValue=(String)record.get(field);
      if (includeValue != null) {
        if ((getAttributeClassification() == ClassConstants.ABYTE) || (getAttributeClassification() == ClassConstants.APBYTE)) {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsByteArray(includeValue);
        }
 else {
          fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(includeValue);
        }
      }
 else {
        fieldValue=record.get(XMLConstants.TEXT);
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
    }
 else     if ((unmarshaller.getAttachmentUnmarshaller() != null) && isSwaRef()) {
      String refValue=(String)record.get(XMLConstants.TEXT);
      if (refValue != null) {
        fieldValue=unmarshaller.getAttachmentUnmarshaller().getAttachmentAsDataHandler(refValue);
      }
    }
 else {
      fieldValue=record.get(XMLConstants.TEXT);
      if (fieldValue != null) {
        fieldValue=((XMLConversionManager)executionSession.getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(fieldValue);
      }
 else {
        fieldValue=new byte[0];
      }
    }
  }
  Object attributeValue=convertDataValueToObjectValue(fieldValue,executionSession,unmarshaller);
  attributeValue=XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(attributeValue,getAttributeClassification(),executionSession,null);
  return attributeValue;
}"
63952,"public Object convertObjectValueToDataValue(Object objectValue,Session session){
  return this.conversionManager.convertListToString(objectValue);
}","public Object convertObjectValueToDataValue(Object objectValue,Session session){
  return this.conversionManager.convertListToString(objectValue,((Field)mapping.getField()).getSchemaType());
}"
63953,"public Object convertDataValueToObjectValue(Object dataValue,Session session){
  return this.conversionManager.convertStringToList(dataValue,getObjectClass(),mapping.getContainerPolicy());
}","public Object convertDataValueToObjectValue(Object dataValue,Session session){
  return this.conversionManager.convertStringToList(dataValue,getObjectClass(),mapping.getContainerPolicy(),((Field)mapping.getField()).getSchemaType());
}"
63954,"/** 
 * Convert the value if necessary and write out the converted value.
 * @since EclipseLink 2.4 
 */
public void characters(QName schemaType,Object value,String mimeType,boolean isCDATA){
  if (mimeType != null) {
    value=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(value,marshaller,mimeType).getData();
  }
  if (schemaType != null && Constants.QNAME_QNAME.equals(schemaType)) {
    String convertedValue=getStringForQName((QName)value);
    characters(convertedValue);
  }
 else {
    String convertedValue=((String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING,schemaType));
    if (isCDATA) {
      cdata(convertedValue);
    }
 else {
      characters(convertedValue);
    }
  }
}","/** 
 * Convert the value if necessary and write out the converted value.
 * @since EclipseLink 2.4 
 */
public void characters(QName schemaType,Object value,String mimeType,boolean isCDATA){
  if (mimeType != null) {
    if (value instanceof List) {
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesListForBinaryValues((List)value,marshaller,mimeType);
    }
 else {
      value=XMLBinaryDataHelper.getXMLBinaryDataHelper().getBytesForBinaryValue(value,marshaller,mimeType).getData();
    }
  }
  if (schemaType != null && Constants.QNAME_QNAME.equals(schemaType)) {
    String convertedValue=getStringForQName((QName)value);
    characters(convertedValue);
  }
 else {
    String convertedValue=((String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,ClassConstants.STRING,schemaType));
    if (isCDATA) {
      cdata(convertedValue);
    }
 else {
      characters(convertedValue);
    }
  }
}"
63955,"public Document createDocumentWithSystemIdentifier(String name,String systemIdentifier) throws XMLPlatformException {
  try {
    Document document=null;
    if (null == systemIdentifier) {
      document=createDocument();
      Element rootElement=document.createElement(name);
      document.appendChild(rootElement);
      return document;
    }
    DocumentBuilder documentBuilder=DocumentBuilderFactoryHelper.getDocumentBuilderFactory().newDocumentBuilder();
    DOMImplementation domImpl=documentBuilder.getDOMImplementation();
    DocumentType docType=domImpl.createDocumentType(name,null,systemIdentifier);
    document=domImpl.createDocument(null,name,docType);
    return document;
  }
 catch (  Exception e) {
    throw XMLPlatformException.xmlPlatformCouldNotCreateDocument(e);
  }
}","public Document createDocumentWithSystemIdentifier(String name,String systemIdentifier) throws XMLPlatformException {
  try {
    Document document=null;
    if (null == systemIdentifier) {
      document=createDocument();
      Element rootElement=document.createElement(name);
      document.appendChild(rootElement);
      return document;
    }
    DocumentBuilder documentBuilder=getDocumentBuilderFactory().newDocumentBuilder();
    DOMImplementation domImpl=documentBuilder.getDOMImplementation();
    DocumentType docType=domImpl.createDocumentType(name,null,systemIdentifier);
    document=domImpl.createDocument(null,name,docType);
    return document;
  }
 catch (  Exception e) {
    throw XMLPlatformException.xmlPlatformCouldNotCreateDocument(e);
  }
}"
63956,"public Document createDocument() throws XMLPlatformException {
  try {
    DocumentBuilder documentBuilder=DocumentBuilderFactoryHelper.getDocumentBuilderFactory().newDocumentBuilder();
    return documentBuilder.newDocument();
  }
 catch (  Exception e) {
    throw XMLPlatformException.xmlPlatformCouldNotCreateDocument(e);
  }
}","public Document createDocument() throws XMLPlatformException {
  try {
    DocumentBuilder documentBuilder=getDocumentBuilderFactory().newDocumentBuilder();
    return documentBuilder.newDocument();
  }
 catch (  Exception e) {
    throw XMLPlatformException.xmlPlatformCouldNotCreateDocument(e);
  }
}"
63957,"static DocumentBuilderFactory getDocumentBuilderFactory(){
  return documentBuilderFactory;
}","private DocumentBuilderFactory getDocumentBuilderFactory(){
  if (null == documentBuilderFactory) {
    documentBuilderFactory=DocumentBuilderFactory.newInstance();
    documentBuilderFactory.setNamespaceAware(true);
  }
  return documentBuilderFactory;
}"
63958,"public Document createDocumentWithPublicIdentifier(String name,String publicIdentifier,String systemIdentifier) throws XMLPlatformException {
  try {
    if (null == publicIdentifier) {
      return createDocumentWithSystemIdentifier(name,systemIdentifier);
    }
    DocumentBuilder documentBuilder=DocumentBuilderFactoryHelper.getDocumentBuilderFactory().newDocumentBuilder();
    DOMImplementation domImpl=documentBuilder.getDOMImplementation();
    DocumentType docType=domImpl.createDocumentType(name,publicIdentifier,systemIdentifier);
    Document document=domImpl.createDocument(null,name,docType);
    return document;
  }
 catch (  Exception e) {
    throw XMLPlatformException.xmlPlatformCouldNotCreateDocument(e);
  }
}","public Document createDocumentWithPublicIdentifier(String name,String publicIdentifier,String systemIdentifier) throws XMLPlatformException {
  try {
    if (null == publicIdentifier) {
      return createDocumentWithSystemIdentifier(name,systemIdentifier);
    }
    DocumentBuilder documentBuilder=getDocumentBuilderFactory().newDocumentBuilder();
    DOMImplementation domImpl=documentBuilder.getDOMImplementation();
    DocumentType docType=domImpl.createDocumentType(name,publicIdentifier,systemIdentifier);
    Document document=domImpl.createDocument(null,name,docType);
    return document;
  }
 catch (  Exception e) {
    throw XMLPlatformException.xmlPlatformCouldNotCreateDocument(e);
  }
}"
63959,"@Override public boolean isRequestValid(UriInfo uri,Map<String,Object> additionalParams){
  Object query=null;
  Object dbQuery=null;
  if ((additionalParams != null) && (!additionalParams.isEmpty())) {
    dbQuery=additionalParams.get(DB_QUERY);
    query=additionalParams.get(QUERY);
    if ((dbQuery != null) && ((dbQuery instanceof ObjectLevelReadQuery) || (dbQuery instanceof ReadAllQuery))) {
      List<Expression> orderBy=null;
      if (dbQuery instanceof ReadAllQuery) {
        orderBy=((ReadAllQuery)dbQuery).getOrderByExpressions();
      }
 else       if (dbQuery instanceof ObjectLevelReadQuery) {
        orderBy=((ObjectLevelReadQuery)dbQuery).getOrderByExpressions();
      }
      if ((orderBy != null) && (!orderBy.isEmpty())) {
        return false;
      }
    }
  }
  Map<String,Object> queryParameters=getQueryParameters(uri);
  String paramLimit=(String)queryParameters.get(QueryParameters.JPARS_PAGING_LIMIT);
  String paramOffset=(String)queryParameters.get(QueryParameters.JPARS_PAGING_OFFSET);
  if ((paramLimit == null) && (paramOffset == null)) {
    return false;
  }
  if (paramOffset != null) {
    offset=paramOffset;
  }
 else {
    offset=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_OFFSET);
  }
  if (paramLimit != null) {
    limit=paramLimit;
  }
 else {
    limit=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_LIMIT);
  }
  try {
    if ((offset != null) && (limit != null)) {
      if ((Integer.parseInt(offset) >= 0) && (Integer.parseInt(limit) > 0)) {
        if (query != null) {
          ((Query)query).setFirstResult((Integer.parseInt(offset)));
          ((Query)query).setMaxResults((Integer.parseInt(limit)));
        }
 else         if ((dbQuery != null) && (dbQuery instanceof ReadAllQuery)) {
          ((ReadAllQuery)dbQuery).setFirstResult((Integer.parseInt(offset)));
          ((ReadAllQuery)dbQuery).setMaxRows((Integer.parseInt(limit)));
        }
 else         if ((dbQuery != null) && (dbQuery instanceof DirectReadQuery)) {
          ((DirectReadQuery)dbQuery).setFirstResult((Integer.parseInt(offset)));
          ((DirectReadQuery)dbQuery).setMaxRows((Integer.parseInt(limit)));
        }
        return true;
      }
    }
  }
 catch (  NumberFormatException ex) {
  }
  return false;
}","@Override public boolean isRequestValid(UriInfo uri,Map<String,Object> additionalParams){
  Object query=null;
  Object dbQuery=null;
  if ((additionalParams != null) && (!additionalParams.isEmpty())) {
    dbQuery=additionalParams.get(DB_QUERY);
    query=additionalParams.get(QUERY);
    if ((dbQuery != null) && ((dbQuery instanceof ObjectLevelReadQuery) || (dbQuery instanceof ReadAllQuery))) {
      List<Expression> orderBy=null;
      if (dbQuery instanceof ReadAllQuery) {
        orderBy=((ReadAllQuery)dbQuery).getOrderByExpressions();
      }
 else       if (dbQuery instanceof ObjectLevelReadQuery) {
        orderBy=((ObjectLevelReadQuery)dbQuery).getOrderByExpressions();
      }
      if ((orderBy == null) || (orderBy.isEmpty())) {
        return false;
      }
    }
  }
  Map<String,Object> queryParameters=getQueryParameters(uri);
  String paramLimit=(String)queryParameters.get(QueryParameters.JPARS_PAGING_LIMIT);
  String paramOffset=(String)queryParameters.get(QueryParameters.JPARS_PAGING_OFFSET);
  if ((paramLimit == null) && (paramOffset == null)) {
    return false;
  }
  if (paramOffset != null) {
    offset=paramOffset;
  }
 else {
    offset=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_OFFSET);
  }
  if (paramLimit != null) {
    limit=paramLimit;
  }
 else {
    limit=Integer.toString(SystemDefaults.JPARS_DEFAULT_PAGE_LIMIT);
  }
  try {
    if ((offset != null) && (limit != null)) {
      if ((Integer.parseInt(offset) >= 0) && (Integer.parseInt(limit) > 0)) {
        if (query != null) {
          ((Query)query).setFirstResult((Integer.parseInt(offset)));
          ((Query)query).setMaxResults((Integer.parseInt(limit)));
        }
 else         if ((dbQuery != null) && (dbQuery instanceof ReadAllQuery)) {
          ((ReadAllQuery)dbQuery).setFirstResult((Integer.parseInt(offset)));
          ((ReadAllQuery)dbQuery).setMaxRows((Integer.parseInt(limit)));
        }
 else         if ((dbQuery != null) && (dbQuery instanceof DirectReadQuery)) {
          ((DirectReadQuery)dbQuery).setFirstResult((Integer.parseInt(offset)));
          ((DirectReadQuery)dbQuery).setMaxRows((Integer.parseInt(limit)));
        }
        return true;
      }
    }
  }
 catch (  NumberFormatException ex) {
  }
  return false;
}"
63960,"static TransformerFactory getTransformerFactory(){
  return transformerFactory;
}","static TransformerFactory getTransformerFactory(){
  return TransformerFactory.newInstance();
}"
63961,"@SuppressWarnings(""String_Node_Str"") public Object buildCollectionAttributeResponse(PersistenceContext context,Map<String,Object> queryParams,String attribute,Object item,UriInfo uriInfo){
  if (item instanceof Collection) {
    return responseWithSelfLinks(context,(List<Object>)item,uriInfo);
  }
  return item;
}","@SuppressWarnings(""String_Node_Str"") public Object buildCollectionAttributeResponse(PersistenceContext context,Map<String,Object> queryParams,String attribute,Object item,UriInfo uriInfo){
  if (item instanceof Collection) {
    return response(context,(List<Object>)item,uriInfo);
  }
  return item;
}"
63962,"@Override public Object buildReportQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object[]> results,List<ReportItem> items,UriInfo uriInfo){
  return populateReportQueryResultListWithSelfLinks(results,items,uriInfo);
}","@Override public Object buildReportQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object[]> results,List<ReportItem> items,UriInfo uriInfo){
  return populateReportQueryResultList(results,items,uriInfo);
}"
63963,"@Override public Object buildReadAllQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object> items,UriInfo uriInfo){
  return responseWithSelfLinks(context,items,uriInfo);
}","@Override public Object buildReadAllQueryResponse(PersistenceContext context,Map<String,Object> queryParams,List<Object> items,UriInfo uriInfo){
  return response(context,items,uriInfo);
}"
63964,"@Override public Object buildSingleEntityResponse(PersistenceContext context,Map<String,Object> queryParams,Object result,UriInfo uriInfo){
  if (result instanceof PersistenceWeavedRest) {
    PersistenceWeavedRest entity=(PersistenceWeavedRest)result;
    List<Link> links=new ArrayList<Link>();
    links.add(new Link(ReservedWords.JPARS_REL_SELF,null,uriInfo.getRequestUri().toString()));
    entity._persistence_setLinks(links);
  }
  return result;
}","@Override public Object buildSingleEntityResponse(PersistenceContext context,Map<String,Object> queryParams,Object result,UriInfo uriInfo){
  if (result instanceof PersistenceWeavedRest) {
    ClassDescriptor descriptor=context.getJAXBDescriptorForClass(result.getClass());
    PersistenceWeavedRest entity=(PersistenceWeavedRest)result;
    entity._persistence_setLinks(new ArrayList<Link>());
    String href=context.getBaseURI() + context.getVersion() + ""String_Node_Str""+ context.getName()+ ""String_Node_Str""+ descriptor.getAlias()+ ""String_Node_Str""+ IdHelper.stringifyId(result,descriptor.getAlias(),context);
    entity._persistence_getLinks().add(new Link(ReservedWords.JPARS_REL_SELF,null,href));
  }
  return result;
}"
63965,"/** 
 * Build a Query for the given ProcedureType instance and add it to the given OR project's list of queries.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void buildQueryForProcedureType(ProcedureType procType,Project orProject,Project oxProject,ProcedureOperationModel opModel,boolean hasPLSQLArgs){
  StoredProcedureCall call;
  ArgumentType returnArg=procType.isFunctionType() ? ((FunctionType)procType).getReturnArgument() : null;
  boolean hasCursor=hasPLSQLCursorArg(getArgumentListForProcedureType(procType));
  hasPLSQLArgs=hasPLSQLArgs || hasCursor || (hasComplexArgs(getArgumentListForProcedureType(procType)) && opModel.isPLSQLProcedureOperation());
  if (hasPLSQLArgs) {
    if (procType.isFunctionType()) {
      org.eclipse.persistence.internal.helper.DatabaseType dType=buildDatabaseTypeFromMetadataType(returnArg,procType.getCatalogName());
      if (hasCursor) {
        call=new PLSQLStoredFunctionCall();
        ((PLSQLStoredFunctionCall)call).getArguments().remove(0);
        ((PLSQLStoredFunctionCall)call).useNamedCursorOutputAsResultSet(CURSOR_STR,dType);
      }
 else {
        Class wrapperClass=getWrapperClass(dType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)dType).setJavaType(wrapperClass);
        }
        call=new PLSQLStoredFunctionCall(dType);
        if (returnArg.getEnclosedType().isPLSQLCollectionType() && !((PLSQLCollectionType)returnArg.getEnclosedType()).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredFunctionCall)call).getArguments().get(0);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
    }
 else {
      call=new PLSQLStoredProcedureCall();
    }
  }
 else {
    if (procType.isFunctionType()) {
      String javaTypeName=returnArg.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
      if (returnArg.isComposite()) {
        DatabaseType dataType=returnArg.getEnclosedType();
        if (dataType.isVArrayType() || dataType.isObjectTableType()) {
          call=new StoredFunctionCall(Types.ARRAY,returnArg.getTypeName(),javaTypeName,buildFieldForNestedType(dataType));
        }
 else {
          call=new StoredFunctionCall(Types.STRUCT,returnArg.getTypeName(),javaTypeName);
        }
      }
 else {
        call=new StoredFunctionCall();
        if (returnArg.getEnclosedType().isBlobType()) {
          ((StoredFunctionCall)call).setResult(null,ClassConstants.BLOB);
        }
 else {
          int resultType=Util.getJDBCTypeFromTypeName(javaTypeName);
          if (resultType == Types.DATE || resultType == Types.TIME || resultType == Types.TIMESTAMP) {
            ((StoredFunctionCall)call).setResult(null,java.sql.Timestamp.class);
          }
 else           if (returnArg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            ((StoredFunctionCall)call).setResult(null,2009);
          }
 else {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.OBJECT);
          }
        }
      }
    }
 else {
      call=new StoredProcedureCall();
    }
  }
  String cat=procType.getCatalogName();
  String catalogPrefix=(cat == null || cat.length() == 0) ? EMPTY_STRING : cat + DOT;
  call.setProcedureName(catalogPrefix + procType.getProcedureName());
  String returnType=opModel.getReturnType();
  boolean hasResponse=returnType != null;
  DatabaseQuery dq=null;
  if (hasCursor || (hasResponse && opModel.isCollection())) {
    dq=new DataReadQuery();
  }
 else {
    dq=new ValueReadQuery();
  }
  dq.bindAllParameters();
  dq.setName(getNameForQueryOperation(opModel,procType));
  dq.setCall(call);
  for (  ArgumentType arg : procType.getArguments()) {
    if (arg.optional()) {
      call.addOptionalArgument(arg.getArgumentName());
    }
    DatabaseType argType=arg.getEnclosedType();
    ArgumentTypeDirection direction=arg.getDirection();
    org.eclipse.persistence.internal.helper.DatabaseType databaseType=null;
    String javaTypeName=null;
    if (hasPLSQLArgs) {
      databaseType=buildDatabaseTypeFromMetadataType(argType,cat);
    }
 else {
      javaTypeName=argType.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
    }
    if (direction == IN) {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        if (argType.isVArrayType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectTableType()) {
          dq.addArgument(arg.getArgumentName(),java.sql.Array.class);
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),getWrapperClass(javaTypeName),buildFieldForNestedType(argType));
        }
 else {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
        }
      }
    }
 else     if (direction == OUT) {
      if (hasPLSQLArgs) {
        if (arg.isPLSQLCursorType()) {
          ((PLSQLStoredProcedureCall)call).useNamedCursorOutputAsResultSet(arg.getArgumentName(),databaseType);
        }
 else {
          Class wrapperClass=getWrapperClass(databaseType);
          if (wrapperClass != null) {
            ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
          }
          ((PLSQLStoredProcedureCall)call).addNamedOutputArgument(arg.getArgumentName(),databaseType);
        }
      }
 else {
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),wrapperClass);
          }
        }
 else {
          if (argType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.SQLXML);
          }
 else           if (argType == ScalarDatabaseTypeEnum.SYS_REFCURSOR_TYPE) {
            call.addNamedCursorOutputArgument(arg.getArgumentName());
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
          }
        }
      }
    }
 else {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedInOutputArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        dq.addArgument(arg.getArgumentName());
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName());
          }
        }
 else {
          Class javaType=getClassFromJDBCType(argType.getTypeName(),dbwsBuilder.getDatabasePlatform());
          if (shouldSetJavaType(javaType.getName())) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()),argType.getTypeName(),javaType);
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName());
          }
        }
      }
    }
    if (hasPLSQLArgs && (direction == IN || direction == INOUT)) {
      ClassDescriptor xdesc=null;
      if (hasResponse) {
        int idx=returnType.indexOf(COLON);
        if (idx == -1) {
          idx=returnType.indexOf(CLOSE_PAREN);
        }
        if (idx > 0) {
          String typ=returnType.substring(idx + 1);
          for (          XMLDescriptor xd : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
            if (xd.getSchemaReference() != null) {
              String context=xd.getSchemaReference().getSchemaContext();
              if (context.substring(1).equals(typ)) {
                xdesc=xd;
                break;
              }
            }
          }
        }
      }
      if (xdesc != null) {
        dq.addArgumentByTypeName(arg.getArgumentName(),xdesc.getJavaClassName());
      }
 else {
        if (databaseType instanceof PLSQLCollection || databaseType instanceof VArrayType) {
          dq.addArgument(arg.getArgumentName(),Array.class);
        }
 else         if (databaseType instanceof PLSQLrecord || databaseType instanceof OracleObjectType) {
          dq.addArgument(arg.getArgumentName(),Struct.class);
        }
 else {
          dq.addArgument(arg.getArgumentName(),JDBCTypes.getClassForCode(databaseType.getConversionCode()));
        }
      }
    }
  }
  orProject.getQueries().add(dq);
}","/** 
 * Build a Query for the given ProcedureType instance and add it to the given OR project's list of queries.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void buildQueryForProcedureType(ProcedureType procType,Project orProject,Project oxProject,ProcedureOperationModel opModel,boolean hasPLSQLArgs){
  StoredProcedureCall call;
  ArgumentType returnArg=procType.isFunctionType() ? ((FunctionType)procType).getReturnArgument() : null;
  boolean hasCursor=hasPLSQLCursorArg(getArgumentListForProcedureType(procType));
  hasPLSQLArgs=hasPLSQLArgs || hasCursor || (hasComplexArgs(getArgumentListForProcedureType(procType)) && opModel.isPLSQLProcedureOperation());
  if (hasPLSQLArgs) {
    if (procType.isFunctionType()) {
      org.eclipse.persistence.internal.helper.DatabaseType dType=buildDatabaseTypeFromMetadataType(returnArg,procType.getCatalogName());
      if (hasCursor) {
        call=new PLSQLStoredFunctionCall();
        ((PLSQLStoredFunctionCall)call).getArguments().remove(0);
        ((PLSQLStoredFunctionCall)call).useNamedCursorOutputAsResultSet(CURSOR_STR,dType);
      }
 else {
        Class wrapperClass=getWrapperClass(dType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)dType).setJavaType(wrapperClass);
        }
        call=new PLSQLStoredFunctionCall(dType);
        if (returnArg.getEnclosedType().isPLSQLCollectionType() && !((PLSQLCollectionType)returnArg.getEnclosedType()).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredFunctionCall)call).getArguments().get(0);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
    }
 else {
      call=new PLSQLStoredProcedureCall();
    }
  }
 else {
    if (procType.isFunctionType()) {
      String javaTypeName=returnArg.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
      if (returnArg.isComposite()) {
        DatabaseType dataType=returnArg.getEnclosedType();
        if (dataType.isVArrayType() || dataType.isObjectTableType()) {
          call=new StoredFunctionCall(Types.ARRAY,returnArg.getTypeName(),javaTypeName,buildFieldForNestedType(dataType));
        }
 else {
          call=new StoredFunctionCall(Types.STRUCT,returnArg.getTypeName(),javaTypeName);
        }
      }
 else {
        call=new StoredFunctionCall();
        if (returnArg.getEnclosedType().isBlobType()) {
          ((StoredFunctionCall)call).setResult(null,ClassConstants.BLOB);
        }
 else {
          int resultType=Util.getJDBCTypeFromTypeName(javaTypeName);
          if (resultType == Types.DATE || resultType == Types.TIME || resultType == Types.TIMESTAMP) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.TIMESTAMP);
          }
 else           if (returnArg.getEnclosedType() == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            ((StoredFunctionCall)call).setResult(null,Types.SQLXML);
          }
 else           if (resultType == Types.OTHER || resultType == Types.CLOB) {
            ((StoredFunctionCall)call).setResult(null,ClassConstants.OBJECT);
          }
 else {
            ((StoredFunctionCall)call).setResult(null,resultType);
          }
        }
      }
    }
 else {
      call=new StoredProcedureCall();
    }
  }
  String cat=procType.getCatalogName();
  String catalogPrefix=(cat == null || cat.length() == 0) ? EMPTY_STRING : cat + DOT;
  call.setProcedureName(catalogPrefix + procType.getProcedureName());
  String returnType=opModel.getReturnType();
  boolean hasResponse=returnType != null;
  DatabaseQuery dq=null;
  if (hasCursor || (hasResponse && opModel.isCollection())) {
    dq=new DataReadQuery();
  }
 else {
    dq=new ValueReadQuery();
  }
  dq.bindAllParameters();
  dq.setName(getNameForQueryOperation(opModel,procType));
  dq.setCall(call);
  for (  ArgumentType arg : procType.getArguments()) {
    if (arg.optional()) {
      call.addOptionalArgument(arg.getArgumentName());
    }
    DatabaseType argType=arg.getEnclosedType();
    ArgumentTypeDirection direction=arg.getDirection();
    org.eclipse.persistence.internal.helper.DatabaseType databaseType=null;
    String javaTypeName=null;
    if (hasPLSQLArgs) {
      databaseType=buildDatabaseTypeFromMetadataType(argType,cat);
    }
 else {
      javaTypeName=argType.getTypeName();
      ClassDescriptor desc=oxProject.getDescriptorForAlias(javaTypeName.toLowerCase());
      if (desc != null) {
        javaTypeName=desc.getJavaClassName();
      }
    }
    if (direction == IN) {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        if (argType.isVArrayType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectType()) {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),javaTypeName);
        }
 else         if (argType.isObjectTableType()) {
          dq.addArgument(arg.getArgumentName(),java.sql.Array.class);
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),getWrapperClass(javaTypeName),buildFieldForNestedType(argType));
        }
 else {
          dq.addArgument(arg.getArgumentName());
          call.addNamedArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
        }
      }
    }
 else     if (direction == OUT) {
      if (hasPLSQLArgs) {
        if (arg.isPLSQLCursorType()) {
          ((PLSQLStoredProcedureCall)call).useNamedCursorOutputAsResultSet(arg.getArgumentName(),databaseType);
        }
 else {
          Class wrapperClass=getWrapperClass(databaseType);
          if (wrapperClass != null) {
            ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
          }
          ((PLSQLStoredProcedureCall)call).addNamedOutputArgument(arg.getArgumentName(),databaseType);
        }
      }
 else {
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName(),wrapperClass);
          }
        }
 else {
          if (argType == ScalarDatabaseTypeEnum.XMLTYPE_TYPE) {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Types.SQLXML);
          }
 else           if (argType == ScalarDatabaseTypeEnum.SYS_REFCURSOR_TYPE) {
            call.addNamedCursorOutputArgument(arg.getArgumentName());
          }
 else {
            call.addNamedOutputArgument(arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()));
          }
        }
      }
    }
 else {
      if (hasPLSQLArgs) {
        Class wrapperClass=getWrapperClass(databaseType);
        if (wrapperClass != null) {
          ((ComplexDatabaseType)databaseType).setJavaType(wrapperClass);
        }
        ((PLSQLStoredProcedureCall)call).addNamedInOutputArgument(arg.getArgumentName(),databaseType);
        if (argType.isPLSQLCollectionType() && !((PLSQLCollectionType)argType).isIndexed()) {
          PLSQLargument plsqlArg=((PLSQLStoredProcedureCall)call).getArguments().get(((PLSQLStoredProcedureCall)call).getArguments().size() - 1);
          ((PLSQLCollection)plsqlArg.databaseType).setIsNestedTable(true);
        }
      }
 else {
        dq.addArgument(arg.getArgumentName());
        if (argType.isComposite()) {
          Class wrapperClass=getWrapperClass(javaTypeName);
          if (argType.isVArrayType() || argType.isObjectTableType()) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.ARRAY,argType.getTypeName(),wrapperClass,buildFieldForNestedType(argType));
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Types.STRUCT,argType.getTypeName());
          }
        }
 else {
          Class javaType=getClassFromJDBCType(argType.getTypeName(),dbwsBuilder.getDatabasePlatform());
          if (shouldSetJavaType(javaType.getName())) {
            call.addNamedInOutputArgument(arg.getArgumentName(),arg.getArgumentName(),arg.getArgumentName(),Util.getJDBCTypeFromTypeName(argType.getTypeName()),argType.getTypeName(),javaType);
          }
 else {
            call.addNamedInOutputArgument(arg.getArgumentName());
          }
        }
      }
    }
    if (hasPLSQLArgs && (direction == IN || direction == INOUT)) {
      ClassDescriptor xdesc=null;
      if (hasResponse) {
        int idx=returnType.indexOf(COLON);
        if (idx == -1) {
          idx=returnType.indexOf(CLOSE_PAREN);
        }
        if (idx > 0) {
          String typ=returnType.substring(idx + 1);
          for (          XMLDescriptor xd : (List<XMLDescriptor>)(List)oxProject.getOrderedDescriptors()) {
            if (xd.getSchemaReference() != null) {
              String context=xd.getSchemaReference().getSchemaContext();
              if (context.substring(1).equals(typ)) {
                xdesc=xd;
                break;
              }
            }
          }
        }
      }
      if (xdesc != null) {
        dq.addArgumentByTypeName(arg.getArgumentName(),xdesc.getJavaClassName());
      }
 else {
        if (databaseType instanceof PLSQLCollection || databaseType instanceof VArrayType) {
          dq.addArgument(arg.getArgumentName(),Array.class);
        }
 else         if (databaseType instanceof PLSQLrecord || databaseType instanceof OracleObjectType) {
          dq.addArgument(arg.getArgumentName(),Struct.class);
        }
 else {
          dq.addArgument(arg.getArgumentName(),JDBCTypes.getClassForCode(databaseType.getConversionCode()));
        }
      }
    }
  }
  orProject.getQueries().add(dq);
}"
63966,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNullInCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.DotTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.emptynamespace.XmlAttributeEmptyNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.imports.XmlAttributeImportsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.unqualified.AttributeFormUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueByteArrayWithIdTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(XMLNamespaceTestCases.class);
  suite.addTestSuite(XMLNamespaceXmlPathTestCases.class);
  suite.addTestSuite(NoMappingsTestCases.class);
  suite.addTestSuite(JAXBContextMediaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeNSQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.NoAttributeQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeNSUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.NoAttributeUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.defaultns.emptyprefix.DefaultNamespaceEmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldAddressTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldLinkTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldCollectionAddressTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldCollectionLinkTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.PredicateAddressTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.PredicateLinkTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNoDomTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNSTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.qualified.XMLAnyElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.collections.ChoiceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.collections.ChoiceCollectionNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefAttachmentTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefAttachmentEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefAttachmentNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.enums.EnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.notincontext.XmlElementRefNotGivenToContextTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(IDResolverTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.idresolver.collection.IDResolverTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.attachments.contenttype.ContentTypeTestCases.class);
  suite.addTestSuite(XmlElementRefWithNamespaceTests.class);
  suite.addTestSuite(XmlElementRefPrefixesTestCases.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.JAXBEmployeeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNamespaceCancellationTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.employee.EmployeeNullInCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.EmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.emptystring.ListsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.InnerClassTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.XmlRootElementNilTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlrootelement.DotTestCases.class);
  suite.addTest(org.eclipse.persistence.testing.jaxb.xmlelement.XmlElementTestSuite.suite());
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeNoNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.XmlAttributeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.emptynamespace.XmlAttributeEmptyNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.imports.XmlAttributeImportsTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.unqualified.AttributeFormUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlattribute.ObjectTestCases.class);
  suite.addTestSuite(XmlValueTestCases.class);
  suite.addTestSuite(XmlValueByteArrayTestCases.class);
  suite.addTestSuite(XmlValueByteArrayWithIdTestCases.class);
  suite.addTestSuite(XmlValueWithAttributesTestCases.class);
  suite.addTestSuite(XmlValueListTestCases.class);
  suite.addTestSuite(InvalidTestCases.class);
  suite.addTestSuite(ValidTestCases.class);
  suite.addTestSuite(XMLNamespaceTestCases.class);
  suite.addTestSuite(XMLNamespaceXmlPathTestCases.class);
  suite.addTestSuite(NoMappingsTestCases.class);
  suite.addTestSuite(JAXBContextMediaTypeTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeFormDefaultQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeFormDefaultUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unset.AttributeFormDefaultUnsetTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeNSQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.AttributeQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.qualified.NoAttributeQualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeNSUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.AttributeUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.attributeformdefault.unqualified.NoAttributeUnqualifiedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlschema.defaultns.emptyprefix.DefaultNamespaceEmptyStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsStringTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsAdapterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsIntegerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsComplexTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsInheritanceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.XmlElementsArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldAddressTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldLinkTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldCollectionAddressTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.SameFieldCollectionLinkTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.PredicateAddressTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelements.PredicateLinkTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementArrayTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNoDomTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementNSTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyElementLaxMixedEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.XmlAnyJAXBElementTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.domhandler.DOMHandlerTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.DefaultNamespaceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlanyelement.ns.qualified.XMLAnyElementNamespaceTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.collections.ChoiceCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.collections.ChoiceCollectionNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeCollectionTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.EmployeeSingleTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.XMLElementRefConverterTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefAttachmentTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefAttachmentEmptyTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefAttachmentNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.attachment.XMLElementRefNullTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.duplicatename.DuplicateNameTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.enums.EnumTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance1.Inheritance1TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.inheritance2.Inheritance2TestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.missingref.MissingRefTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.xmlelementref.notincontext.XmlElementRefNotGivenToContextTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.multiplepackage.MultiplePackageInfoTestCases.class);
  suite.addTestSuite(IDResolverTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.idresolver.collection.IDResolverTestCases.class);
  suite.addTestSuite(org.eclipse.persistence.testing.jaxb.attachments.contenttype.ContentTypeTestCases.class);
  suite.addTestSuite(XmlElementRefWithNamespaceTests.class);
  suite.addTestSuite(XmlElementRefPrefixesTestCases.class);
  return suite;
}"
63967,"/** 
 * Generate a mapping for a given Property.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @return newly created mapping
 */
public Mapping generateMapping(Property property,Descriptor descriptor,JavaClass descriptorJavaClass,NamespaceInfo namespaceInfo){
  if (property.isSetXmlJavaTypeAdapter()) {
    if (property.isReference()) {
      return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
    }
    XmlJavaTypeAdapter xja=property.getXmlJavaTypeAdapter();
    JavaClass adapterClass=helper.getJavaClass(xja.getValue());
    JavaClass valueType=null;
    String sValType=xja.getValueType();
    if (sValType.equals(""String_Node_Str"")) {
      valueType=property.getActualType();
    }
 else {
      valueType=helper.getJavaClass(xja.getValueType());
    }
    Mapping mapping;
    boolean isArray=property.getType().isArray() && !property.getType().getRawName().equals(""String_Node_Str"");
    if (property.isChoice()) {
      if (helper.isCollectionType(property.getType())) {
        mapping=generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
        ((ChoiceCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateChoiceMapping(property,descriptor,namespaceInfo);
        ((ChoiceObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
 else     if (typeInfo.containsKey(valueType.getQualifiedName())) {
      TypeInfo reference=typeInfo.get(valueType.getQualifiedName());
      if (helper.isCollectionType(property.getType())) {
        if (reference.isEnumerationType()) {
          mapping=generateEnumCollectionMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
          XMLJavaTypeConverter converter=new XMLJavaTypeConverter(adapterClass.getQualifiedName());
          converter.setNestedConverter(((DirectCollectionMapping)mapping).getValueConverter());
          ((DirectCollectionMapping)mapping).setValueConverter(converter);
        }
 else {
          if (property.getVariableAttributeName() != null) {
            mapping=generateVariableXPathCollectionMapping(property,descriptor,namespaceInfo,valueType);
            ((VariableXPathCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
 else {
            mapping=generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,valueType.getQualifiedName());
            ((CompositeCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
        }
      }
 else {
        if (reference.isEnumerationType()) {
          mapping=generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
          XMLJavaTypeConverter converter=new XMLJavaTypeConverter(adapterClass.getQualifiedName());
          converter.setNestedConverter(((DirectMapping)mapping).getConverter());
          ((DirectMapping)mapping).setConverter(converter);
        }
 else         if (property.isInverseReference()) {
          mapping=generateInverseReferenceMapping(property,descriptor,namespaceInfo);
        }
 else {
          if (property.getVariableAttributeName() != null) {
            mapping=generateVariableXPathObjectMapping(property,descriptor,namespaceInfo,valueType);
            ((VariableXPathObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
 else {
            mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
            ((CompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
        }
      }
    }
 else {
      if (property.isAny()) {
        if (helper.isCollectionType(property.getType())) {
          mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
          ((AnyCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateAnyObjectMapping(property,descriptor,namespaceInfo);
          ((AnyObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (helper.isCollectionType(property.getType()) || isArray) {
        if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
          mapping=generateBinaryDataCollectionMapping(property,descriptor,namespaceInfo);
          ((BinaryDataCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateDirectCollectionMapping(property,descriptor,namespaceInfo);
          if (adapterClass.getQualifiedName().equals(CollapsedStringAdapter.class.getName())) {
            ((DirectCollectionMapping)mapping).setCollapsingStringValues(true);
          }
 else           if (adapterClass.getQualifiedName().equals(NormalizedStringAdapter.class.getName())) {
            ((DirectCollectionMapping)mapping).setNormalizingStringValues(true);
          }
 else {
            ((DirectCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
        }
      }
 else       if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
        mapping=generateBinaryMapping(property,descriptor,namespaceInfo);
        ((BinaryDataMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        if (!property.isAttribute() && areEquals(valueType,Object.class) || property.isTyped()) {
          mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
          ((CompositeObjectMapping)mapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
          ((CompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          return mapping;
        }
        mapping=generateDirectMapping(property,descriptor,namespaceInfo);
        if (adapterClass.getQualifiedName().equals(CollapsedStringAdapter.class.getName())) {
          ((DirectMapping)mapping).setCollapsingStringValues(true);
        }
 else         if (adapterClass.getQualifiedName().equals(NormalizedStringAdapter.class.getName())) {
          ((DirectMapping)mapping).setNormalizingStringValues(true);
        }
 else {
          ((DirectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
    }
    return mapping;
  }
  if (property.getVariableAttributeName() != null) {
    if (helper.isCollectionType(property.getType()) || property.getType().isArray() || property.isMap()) {
      return generateVariableXPathCollectionMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
 else {
      return generateVariableXPathObjectMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
  }
  if (property.isSetXmlJoinNodes()) {
    if (helper.isCollectionType(property.getType())) {
      return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,property.getType());
  }
  if (property.isXmlTransformation()) {
    return generateTransformationMapping(property,descriptor,namespaceInfo);
  }
  if (property.isChoice()) {
    if (helper.isCollectionType(property.getType())) {
      return generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
    }
    return generateChoiceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isInverseReference()) {
    return generateInverseReferenceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isAny()) {
    if (helper.isCollectionType(property.getType()) || property.getType().isArray()) {
      return generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
    }
    return generateAnyObjectMapping(property,descriptor,namespaceInfo);
  }
  if (property.isReference()) {
    return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
  }
  if (property.isMap()) {
    if (property.isAnyAttribute()) {
      return generateAnyAttributeMapping(property,descriptor,namespaceInfo);
    }
    return generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,null);
  }
  if (helper.isCollectionType(property.getType())) {
    return generateCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo);
  }
  JavaClass referenceClass=property.getType();
  String referenceClassName=referenceClass.getRawName();
  if (referenceClass.isArray() && !referenceClassName.equals(""String_Node_Str"")) {
    JavaClass componentType=referenceClass.getComponentType();
    TypeInfo reference=typeInfo.get(componentType.getName());
    if (reference != null && reference.isEnumerationType()) {
      return generateEnumCollectionMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    if (areEquals(componentType,Object.class)) {
      CompositeCollectionMapping mapping=generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,null);
      mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      return mapping;
    }
    if (reference != null || componentType.isArray()) {
      if (property.isXmlIdRef() || property.isSetXmlJoinNodes()) {
        return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,componentType);
      }
      return generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,componentType.getQualifiedName());
    }
    return generateDirectCollectionMapping(property,descriptor,namespaceInfo);
  }
  if (property.isXmlIdRef()) {
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,referenceClass);
  }
  TypeInfo reference=typeInfo.get(referenceClass.getQualifiedName());
  if (reference != null) {
    if (reference.isEnumerationType()) {
      return generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    if (property.isXmlLocation()) {
      CompositeObjectMapping locationMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
      reference.getDescriptor().setInstantiationPolicy(new NullInstantiationPolicy());
      descriptor.setLocationAccessor((CoreAttributeAccessor)locationMapping.getAttributeAccessor());
      return locationMapping;
    }
 else {
      return generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
    }
  }
  if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
    return generateBinaryMapping(property,descriptor,namespaceInfo);
  }
  if (referenceClass.getQualifiedName().equals(OBJECT_CLASS_NAME) && !property.isAttribute() || property.isTyped()) {
    CompositeObjectMapping coMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
    coMapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    return coMapping;
  }
  if (property.isXmlLocation()) {
    return null;
  }
  return generateDirectMapping(property,descriptor,namespaceInfo);
}","/** 
 * Generate a mapping for a given Property.
 * @param property
 * @param descriptor
 * @param namespaceInfo
 * @return newly created mapping
 */
public Mapping generateMapping(Property property,Descriptor descriptor,JavaClass descriptorJavaClass,NamespaceInfo namespaceInfo){
  if (property.isSetXmlJavaTypeAdapter()) {
    if (property.isReference()) {
      return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
    }
    XmlJavaTypeAdapter xja=property.getXmlJavaTypeAdapter();
    JavaClass adapterClass=helper.getJavaClass(xja.getValue());
    JavaClass valueType=null;
    String sValType=xja.getValueType();
    if (sValType.equals(""String_Node_Str"")) {
      valueType=property.getActualType();
    }
 else {
      valueType=helper.getJavaClass(xja.getValueType());
    }
    Mapping mapping;
    boolean isArray=property.getType().isArray() && !property.getType().getRawName().equals(""String_Node_Str"");
    if (property.isChoice()) {
      if (helper.isCollectionType(property.getType()) || property.getType().isArray()) {
        mapping=generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
        ((ChoiceCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        mapping=generateChoiceMapping(property,descriptor,namespaceInfo);
        ((ChoiceObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
    }
 else     if (typeInfo.containsKey(valueType.getQualifiedName())) {
      TypeInfo reference=typeInfo.get(valueType.getQualifiedName());
      if (helper.isCollectionType(property.getType())) {
        if (reference.isEnumerationType()) {
          mapping=generateEnumCollectionMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
          XMLJavaTypeConverter converter=new XMLJavaTypeConverter(adapterClass.getQualifiedName());
          converter.setNestedConverter(((DirectCollectionMapping)mapping).getValueConverter());
          ((DirectCollectionMapping)mapping).setValueConverter(converter);
        }
 else {
          if (property.getVariableAttributeName() != null) {
            mapping=generateVariableXPathCollectionMapping(property,descriptor,namespaceInfo,valueType);
            ((VariableXPathCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
 else {
            mapping=generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,valueType.getQualifiedName());
            ((CompositeCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
        }
      }
 else {
        if (reference.isEnumerationType()) {
          mapping=generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
          XMLJavaTypeConverter converter=new XMLJavaTypeConverter(adapterClass.getQualifiedName());
          converter.setNestedConverter(((DirectMapping)mapping).getConverter());
          ((DirectMapping)mapping).setConverter(converter);
        }
 else         if (property.isInverseReference()) {
          mapping=generateInverseReferenceMapping(property,descriptor,namespaceInfo);
        }
 else {
          if (property.getVariableAttributeName() != null) {
            mapping=generateVariableXPathObjectMapping(property,descriptor,namespaceInfo,valueType);
            ((VariableXPathObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
 else {
            mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,valueType.getQualifiedName());
            ((CompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
        }
      }
    }
 else {
      if (property.isAny()) {
        if (helper.isCollectionType(property.getType())) {
          mapping=generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
          ((AnyCollectionMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateAnyObjectMapping(property,descriptor,namespaceInfo);
          ((AnyObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
 else       if (helper.isCollectionType(property.getType()) || isArray) {
        if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
          mapping=generateBinaryDataCollectionMapping(property,descriptor,namespaceInfo);
          ((BinaryDataCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
 else {
          mapping=generateDirectCollectionMapping(property,descriptor,namespaceInfo);
          if (adapterClass.getQualifiedName().equals(CollapsedStringAdapter.class.getName())) {
            ((DirectCollectionMapping)mapping).setCollapsingStringValues(true);
          }
 else           if (adapterClass.getQualifiedName().equals(NormalizedStringAdapter.class.getName())) {
            ((DirectCollectionMapping)mapping).setNormalizingStringValues(true);
          }
 else {
            ((DirectCollectionMapping)mapping).setValueConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          }
        }
      }
 else       if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
        mapping=generateBinaryMapping(property,descriptor,namespaceInfo);
        ((BinaryDataMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
      }
 else {
        if (!property.isAttribute() && areEquals(valueType,Object.class) || property.isTyped()) {
          mapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
          ((CompositeObjectMapping)mapping).setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
          ((CompositeObjectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
          return mapping;
        }
        mapping=generateDirectMapping(property,descriptor,namespaceInfo);
        if (adapterClass.getQualifiedName().equals(CollapsedStringAdapter.class.getName())) {
          ((DirectMapping)mapping).setCollapsingStringValues(true);
        }
 else         if (adapterClass.getQualifiedName().equals(NormalizedStringAdapter.class.getName())) {
          ((DirectMapping)mapping).setNormalizingStringValues(true);
        }
 else {
          ((DirectMapping)mapping).setConverter(new XMLJavaTypeConverter(adapterClass.getQualifiedName()));
        }
      }
    }
    return mapping;
  }
  if (property.getVariableAttributeName() != null) {
    if (helper.isCollectionType(property.getType()) || property.getType().isArray() || property.isMap()) {
      return generateVariableXPathCollectionMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
 else {
      return generateVariableXPathObjectMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
  }
  if (property.isSetXmlJoinNodes()) {
    if (helper.isCollectionType(property.getType())) {
      return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,property.getActualType());
    }
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,property.getType());
  }
  if (property.isXmlTransformation()) {
    return generateTransformationMapping(property,descriptor,namespaceInfo);
  }
  if (property.isChoice()) {
    if (helper.isCollectionType(property.getType()) || property.getType().isArray()) {
      return generateChoiceCollectionMapping(property,descriptor,namespaceInfo);
    }
    return generateChoiceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isInverseReference()) {
    return generateInverseReferenceMapping(property,descriptor,namespaceInfo);
  }
  if (property.isAny()) {
    if (helper.isCollectionType(property.getType()) || property.getType().isArray()) {
      return generateAnyCollectionMapping(property,descriptor,namespaceInfo,property.isMixedContent());
    }
    return generateAnyObjectMapping(property,descriptor,namespaceInfo);
  }
  if (property.isReference()) {
    return generateMappingForReferenceProperty(property,descriptor,namespaceInfo);
  }
  if (property.isMap()) {
    if (property.isAnyAttribute()) {
      return generateAnyAttributeMapping(property,descriptor,namespaceInfo);
    }
    return generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,null);
  }
  if (helper.isCollectionType(property.getType())) {
    return generateCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo);
  }
  JavaClass referenceClass=property.getType();
  String referenceClassName=referenceClass.getRawName();
  if (referenceClass.isArray() && !referenceClassName.equals(""String_Node_Str"")) {
    JavaClass componentType=referenceClass.getComponentType();
    TypeInfo reference=typeInfo.get(componentType.getName());
    if (reference != null && reference.isEnumerationType()) {
      return generateEnumCollectionMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    if (areEquals(componentType,Object.class)) {
      CompositeCollectionMapping mapping=generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,null);
      mapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
      return mapping;
    }
    if (reference != null || componentType.isArray()) {
      if (property.isXmlIdRef() || property.isSetXmlJoinNodes()) {
        return generateXMLCollectionReferenceMapping(property,descriptor,namespaceInfo,componentType);
      }
      return generateCompositeCollectionMapping(property,descriptor,descriptorJavaClass,namespaceInfo,componentType.getQualifiedName());
    }
    return generateDirectCollectionMapping(property,descriptor,namespaceInfo);
  }
  if (property.isXmlIdRef()) {
    return generateXMLObjectReferenceMapping(property,descriptor,namespaceInfo,referenceClass);
  }
  TypeInfo reference=typeInfo.get(referenceClass.getQualifiedName());
  if (reference != null) {
    if (reference.isEnumerationType()) {
      return generateDirectEnumerationMapping(property,descriptor,namespaceInfo,(EnumTypeInfo)reference);
    }
    if (property.isXmlLocation()) {
      CompositeObjectMapping locationMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
      reference.getDescriptor().setInstantiationPolicy(new NullInstantiationPolicy());
      descriptor.setLocationAccessor((CoreAttributeAccessor)locationMapping.getAttributeAccessor());
      return locationMapping;
    }
 else {
      return generateCompositeObjectMapping(property,descriptor,namespaceInfo,referenceClass.getQualifiedName());
    }
  }
  if (property.isSwaAttachmentRef() || property.isMtomAttachment()) {
    return generateBinaryMapping(property,descriptor,namespaceInfo);
  }
  if (referenceClass.getQualifiedName().equals(OBJECT_CLASS_NAME) && !property.isAttribute() || property.isTyped()) {
    CompositeObjectMapping coMapping=generateCompositeObjectMapping(property,descriptor,namespaceInfo,null);
    coMapping.setKeepAsElementPolicy(UnmarshalKeepAsElementPolicy.KEEP_UNKNOWN_AS_ELEMENT);
    return coMapping;
  }
  if (property.isXmlLocation()) {
    return null;
  }
  return generateDirectMapping(property,descriptor,namespaceInfo);
}"
63968,"public ChoiceCollectionMapping generateChoiceCollectionMapping(Property property,Descriptor descriptor,NamespaceInfo namespace){
  ChoiceCollectionMapping mapping=new XMLChoiceCollectionMapping();
  initializeXMLContainerMapping(mapping,property.getType().isArray());
  initializeXMLMapping((XMLChoiceCollectionMapping)mapping,property);
  JavaClass collectionType=property.getType();
  collectionType=containerClassImpl(collectionType);
  mapping.useCollectionClassName(collectionType.getRawName());
  if (property.isSetXmlElementWrapper()) {
    mapping.setWrapperNullPolicy(getWrapperNullPolicyFromProperty(property));
  }
  boolean isIdRef=property.isXmlIdRef();
  Iterator<Property> choiceProperties=property.getChoiceProperties().iterator();
  while (choiceProperties.hasNext()) {
    Property next=choiceProperties.next();
    JavaClass type=next.getType();
    JavaClass originalType=next.getType();
    Converter converter=null;
    Field xmlField=null;
    TypeInfo info=typeInfo.get(type.getName());
    if (info != null) {
      XmlJavaTypeAdapter adapter=info.getXmlJavaTypeAdapter();
      if (adapter != null) {
        String adapterValue=adapter.getValue();
        JavaClass adapterClass=helper.getJavaClass(adapterValue);
        JavaClass theClass=CompilerHelper.getTypeFromAdapterClass(adapterClass,helper);
        type=theClass;
        converter=new XMLJavaTypeConverter(adapterClass.getQualifiedName());
      }
    }
    if (next.getXmlJoinNodes() != null) {
      List<Field> srcFlds=new ArrayList<Field>();
      List<Field> tgtFlds=new ArrayList<Field>();
      for (      XmlJoinNode xmlJoinNode : next.getXmlJoinNodes().getXmlJoinNode()) {
        srcFlds.add(new XMLField(xmlJoinNode.getXmlPath()));
        tgtFlds.add(new XMLField(xmlJoinNode.getReferencedXmlPath()));
      }
      mapping.addChoiceElement(srcFlds,type.getQualifiedName(),tgtFlds);
    }
 else     if (isIdRef) {
      String tgtXPath=null;
      TypeInfo referenceType=typeInfo.get(type.getQualifiedName());
      if (null != referenceType && referenceType.isIDSet()) {
        Property prop=referenceType.getIDProperty();
        tgtXPath=getXPathForField(prop,namespace,!prop.isAttribute(),false).getXPath();
      }
      Field srcXPath;
      if (next.getXmlPath() != null) {
        srcXPath=new XMLField(next.getXmlPath());
      }
 else {
        srcXPath=getXPathForField(next,namespace,true,false);
      }
      mapping.addChoiceElement(srcXPath.getXPath(),type.getQualifiedName(),tgtXPath);
    }
 else {
      Field xpath;
      if (next.getXmlPath() != null) {
        xpath=new XMLField(next.getXmlPath());
      }
 else {
        xpath=getXPathForField(next,namespace,(!(this.typeInfo.containsKey(type.getQualifiedName()))) || type.isEnum(),false);
      }
      xmlField=xpath;
      mapping.addChoiceElement(xpath.getName(),type.getQualifiedName());
      if (!originalType.getQualifiedName().equals(type.getQualifiedName())) {
        if (mapping.getClassNameToFieldMappings().get(originalType.getQualifiedName()) == null) {
          mapping.getClassNameToFieldMappings().put(originalType.getQualifiedName(),xpath);
        }
        mapping.addConverter(xpath,converter);
      }
    }
    if (xmlField != null) {
      Mapping nestedMapping=(Mapping)mapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        if (property.isSetNullPolicy()) {
          ((CompositeCollectionMapping)nestedMapping).setNullPolicy(getNullPolicyFromProperty(property,namespace.getNamespaceResolverForDescriptor()));
        }
 else         if (next.isNillable() && property.isNillable()) {
          ((CompositeCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByXsiNil(true);
          ((CompositeCollectionMapping)nestedMapping).getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
        }
      }
 else       if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        if (next.isSetNullPolicy()) {
          ((DirectCollectionMapping)nestedMapping).setNullPolicy(getNullPolicyFromProperty(next,namespace.getNamespaceResolverForDescriptor()));
        }
 else         if (next.isNillable() && property.isNillable()) {
          ((DirectCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByXsiNil(true);
          ((DirectCollectionMapping)nestedMapping).getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
        }
        if (type.isEnum()) {
          ((DirectCollectionMapping)nestedMapping).setValueConverter(buildJAXBEnumTypeConverter(nestedMapping,(EnumTypeInfo)info));
        }
      }
 else       if (nestedMapping instanceof BinaryDataCollectionMapping) {
        if (next.isSetNullPolicy()) {
          ((BinaryDataCollectionMapping)nestedMapping).setNullPolicy(getNullPolicyFromProperty(next,namespace.getNamespaceResolverForDescriptor()));
        }
 else         if (next.isNillable() && property.isNillable()) {
          ((BinaryDataCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByXsiNil(true);
          ((BinaryDataCollectionMapping)nestedMapping).getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
        }
      }
    }
  }
  return mapping;
}","public ChoiceCollectionMapping generateChoiceCollectionMapping(Property property,Descriptor descriptor,NamespaceInfo namespace){
  ChoiceCollectionMapping mapping=new XMLChoiceCollectionMapping();
  initializeXMLContainerMapping(mapping,property.getType().isArray());
  initializeXMLMapping((XMLChoiceCollectionMapping)mapping,property);
  JavaClass collectionType=property.getType();
  if (collectionType.isArray()) {
    JAXBArrayAttributeAccessor accessor=new JAXBArrayAttributeAccessor(mapping.getAttributeAccessor(),mapping.getContainerPolicy(),helper.getClassLoader());
    JavaClass componentType=collectionType.getComponentType();
    if (componentType.isArray()) {
      JavaClass baseComponentType=getBaseComponentType(componentType);
      if (baseComponentType.isPrimitive()) {
        Class primitiveClass=XMLConversionManager.getDefaultManager().convertClassNameToClass(baseComponentType.getRawName());
        accessor.setComponentClass(primitiveClass);
      }
 else {
        accessor.setComponentClassName(baseComponentType.getQualifiedName());
      }
    }
 else {
      accessor.setComponentClassName(componentType.getQualifiedName());
    }
    mapping.setAttributeAccessor(accessor);
  }
  collectionType=containerClassImpl(collectionType);
  mapping.useCollectionClassName(collectionType.getRawName());
  if (property.isSetXmlElementWrapper()) {
    mapping.setWrapperNullPolicy(getWrapperNullPolicyFromProperty(property));
  }
  boolean isIdRef=property.isXmlIdRef();
  Iterator<Property> choiceProperties=property.getChoiceProperties().iterator();
  while (choiceProperties.hasNext()) {
    Property next=choiceProperties.next();
    JavaClass type=next.getType();
    JavaClass originalType=next.getType();
    Converter converter=null;
    Field xmlField=null;
    TypeInfo info=typeInfo.get(type.getName());
    if (info != null) {
      XmlJavaTypeAdapter adapter=info.getXmlJavaTypeAdapter();
      if (adapter != null) {
        String adapterValue=adapter.getValue();
        JavaClass adapterClass=helper.getJavaClass(adapterValue);
        JavaClass theClass=CompilerHelper.getTypeFromAdapterClass(adapterClass,helper);
        type=theClass;
        converter=new XMLJavaTypeConverter(adapterClass.getQualifiedName());
      }
    }
    if (next.getXmlJoinNodes() != null) {
      List<Field> srcFlds=new ArrayList<Field>();
      List<Field> tgtFlds=new ArrayList<Field>();
      for (      XmlJoinNode xmlJoinNode : next.getXmlJoinNodes().getXmlJoinNode()) {
        srcFlds.add(new XMLField(xmlJoinNode.getXmlPath()));
        tgtFlds.add(new XMLField(xmlJoinNode.getReferencedXmlPath()));
      }
      mapping.addChoiceElement(srcFlds,type.getQualifiedName(),tgtFlds);
    }
 else     if (isIdRef) {
      String tgtXPath=null;
      TypeInfo referenceType=typeInfo.get(type.getQualifiedName());
      if (null != referenceType && referenceType.isIDSet()) {
        Property prop=referenceType.getIDProperty();
        tgtXPath=getXPathForField(prop,namespace,!prop.isAttribute(),false).getXPath();
      }
      Field srcXPath;
      if (next.getXmlPath() != null) {
        srcXPath=new XMLField(next.getXmlPath());
      }
 else {
        srcXPath=getXPathForField(next,namespace,true,false);
      }
      mapping.addChoiceElement(srcXPath.getXPath(),type.getQualifiedName(),tgtXPath);
    }
 else {
      Field xpath;
      if (next.getXmlPath() != null) {
        xpath=new XMLField(next.getXmlPath());
      }
 else {
        xpath=getXPathForField(next,namespace,(!(this.typeInfo.containsKey(type.getQualifiedName()))) || type.isEnum(),false);
      }
      xmlField=xpath;
      mapping.addChoiceElement(xpath.getName(),type.getQualifiedName());
      if (!originalType.getQualifiedName().equals(type.getQualifiedName())) {
        if (mapping.getClassNameToFieldMappings().get(originalType.getQualifiedName()) == null) {
          mapping.getClassNameToFieldMappings().put(originalType.getQualifiedName(),xpath);
        }
        mapping.addConverter(xpath,converter);
      }
    }
    if (xmlField != null) {
      Mapping nestedMapping=(Mapping)mapping.getChoiceElementMappings().get(xmlField);
      if (nestedMapping.isAbstractCompositeCollectionMapping()) {
        if (property.isSetNullPolicy()) {
          ((CompositeCollectionMapping)nestedMapping).setNullPolicy(getNullPolicyFromProperty(property,namespace.getNamespaceResolverForDescriptor()));
        }
 else         if (next.isNillable() && property.isNillable()) {
          ((CompositeCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByXsiNil(true);
          ((CompositeCollectionMapping)nestedMapping).getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
        }
      }
 else       if (nestedMapping.isAbstractCompositeDirectCollectionMapping()) {
        if (next.isSetNullPolicy()) {
          ((DirectCollectionMapping)nestedMapping).setNullPolicy(getNullPolicyFromProperty(next,namespace.getNamespaceResolverForDescriptor()));
        }
 else         if (next.isNillable() && property.isNillable()) {
          ((DirectCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByXsiNil(true);
          ((DirectCollectionMapping)nestedMapping).getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
        }
        if (type.isEnum()) {
          ((DirectCollectionMapping)nestedMapping).setValueConverter(buildJAXBEnumTypeConverter(nestedMapping,(EnumTypeInfo)info));
        }
      }
 else       if (nestedMapping instanceof BinaryDataCollectionMapping) {
        if (next.isSetNullPolicy()) {
          ((BinaryDataCollectionMapping)nestedMapping).setNullPolicy(getNullPolicyFromProperty(next,namespace.getNamespaceResolverForDescriptor()));
        }
 else         if (next.isNillable() && property.isNillable()) {
          ((BinaryDataCollectionMapping)nestedMapping).getNullPolicy().setNullRepresentedByXsiNil(true);
          ((BinaryDataCollectionMapping)nestedMapping).getNullPolicy().setMarshalNullRepresentation(XMLNullRepresentationType.XSI_NIL);
        }
      }
    }
  }
  return mapping;
}"
63969,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object value=unmarshalRecord.getCharacters().toString();
  boolean isCDATA=unmarshalRecord.isBufferCDATA();
  unmarshalRecord.resetStringBuffer();
  Field toWrite=xmlField;
  if (xmlField.isCDATA() != isCDATA) {
    toWrite=new XMLField(xmlField.getName());
    toWrite.setNamespaceResolver(xmlField.getNamespaceResolver());
    toWrite.setIsCDATA(isCDATA);
  }
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(toWrite,value);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord){
  Object value=unmarshalRecord.getCharacters().toString();
  boolean isCDATA=unmarshalRecord.isBufferCDATA();
  unmarshalRecord.resetStringBuffer();
  Field toWrite=xmlField;
  if (xmlField.isCDATA() != isCDATA) {
    toWrite=new XMLField(xmlField.getName());
    toWrite.setNamespaceResolver(xmlField.getNamespaceResolver());
    toWrite.setIsCDATA(isCDATA);
  }
  ConversionManager conversionManager=(ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=conversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(toWrite,value);
}"
63970,"public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  Object objectValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(xmlField,objectValue);
}","public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  ConversionManager conversionManager=(ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  Object objectValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  if (null == unmarshalRecord.getTransformationRecord()) {
    unmarshalRecord.setTransformationRecord(new XMLTransformationRecord(""String_Node_Str"",unmarshalRecord));
  }
  unmarshalRecord.getTransformationRecord().put(xmlField,objectValue);
}"
63971,"private QName getSchemaTypeForUnion(UnionField xmlField,Object value,CoreAbstractSession session){
  List schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  QName nextQName;
  Class javaClass;
  for (int i=0; i < schemaTypes.size(); i++) {
    nextQName=(QName)xmlField.getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        javaClass=xmlField.getJavaClass(nextQName);
        value=((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}","private QName getSchemaTypeForUnion(UnionField xmlField,Object value,CoreAbstractSession session){
  List schemaTypes=xmlField.getSchemaTypes();
  QName schemaType=null;
  QName nextQName;
  Class javaClass;
  for (int i=0; i < schemaTypes.size(); i++) {
    nextQName=(QName)xmlField.getSchemaTypes().get(i);
    try {
      if (nextQName != null) {
        javaClass=xmlField.getJavaClass(nextQName);
        value=((ConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,javaClass,nextQName);
        schemaType=nextQName;
        break;
      }
    }
 catch (    ConversionException ce) {
      if (i == (schemaTypes.size() - 1)) {
        schemaType=nextQName;
      }
    }
  }
  return schemaType;
}"
63972,"protected String getValueToWrite(QName schemaType,Object value,CoreAbstractSession session){
  return (String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,CoreClassConstants.STRING,schemaType);
}","protected String getValueToWrite(QName schemaType,Object value,CoreAbstractSession session){
  return (String)((ConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,CoreClassConstants.STRING,schemaType);
}"
63973,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Field xmlField=(Field)xmlBinaryDataCollectionMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataCollectionMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Field xmlField=(Field)xmlBinaryDataCollectionMapping.getField();
    XPathFragment lastFragment=xmlField.getLastXPathFragment();
    if (!lastFragment.isAttribute()) {
      BinaryMappingContentHandler handler=new BinaryMappingContentHandler(unmarshalRecord,this,this.xmlBinaryDataCollectionMapping);
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      handler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
      XMLReader xmlReader=unmarshalRecord.getXMLReader();
      xmlReader.setContentHandler(handler);
      xmlReader.setLexicalHandler(handler);
    }
 else     if (lastFragment.isAttribute()) {
      String value=atts.getValue(lastFragment.getNamespaceURI(),lastFragment.getLocalName());
      Object fieldValue=null;
      if (xmlBinaryDataCollectionMapping.isSwaRef()) {
        if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
          if (xmlBinaryDataCollectionMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
          }
 else {
            fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
          }
          xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
        }
      }
 else {
        fieldValue=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
        xmlBinaryDataCollectionMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataCollectionMapping.getAttributeClassification(),unmarshalRecord.getSession()));
      }
    }
    return true;
  }
 catch (  SAXException ex) {
    throw XMLMarshalException.unmarshalException(ex);
  }
}"
63974,"protected String getValueToWrite(QName schemaType,Object value,CoreAbstractSession session){
  return (String)((XMLConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,CoreClassConstants.STRING,schemaType);
}","protected String getValueToWrite(QName schemaType,Object value,CoreAbstractSession session){
  return (String)((ConversionManager)session.getDatasourcePlatform().getConversionManager()).convertObject(value,CoreClassConstants.STRING,schemaType);
}"
63975,"/** 
 * Handle swaRef and inline attribute cases.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String URI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlBinaryDataMapping.getField();
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  Object fieldValue=null;
  if (xmlBinaryDataMapping.isSwaRef()) {
    if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
      if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
      }
 else {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
      }
      xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
    }
  }
 else {
    fieldValue=((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
    xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
  }
}","/** 
 * Handle swaRef and inline attribute cases.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String URI,String localName,String value){
  unmarshalRecord.removeNullCapableValue(this);
  Field xmlField=(Field)xmlBinaryDataMapping.getField();
  XPathFragment lastFragment=xmlField.getLastXPathFragment();
  Object fieldValue=null;
  if (xmlBinaryDataMapping.isSwaRef()) {
    if (unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller() != null) {
      if (xmlBinaryDataMapping.getAttributeClassification() == XMLBinaryDataHelper.getXMLBinaryDataHelper().DATA_HANDLER) {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsDataHandler(value);
      }
 else {
        fieldValue=unmarshalRecord.getUnmarshaller().getAttachmentUnmarshaller().getAttachmentAsByteArray(value);
      }
      xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
    }
  }
 else {
    fieldValue=((ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).convertSchemaBase64ToByteArray(value);
    xmlBinaryDataMapping.setAttributeValueInObject(unmarshalRecord.getCurrentObject(),XMLBinaryDataHelper.getXMLBinaryDataHelper().convertObject(fieldValue,xmlBinaryDataMapping.getAttributeClassification(),unmarshalRecord.getSession()));
  }
}"
63976,"/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  CoreContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,false);
  }
  Object objectValue;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    StringBuilder stringValueStringBuilder=new StringBuilder();
    String newValue;
    QName schemaType;
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          Field fkField=(Field)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          break;
        }
      }
      schemaType=xmlField.getSchemaTypeForValue(fieldValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Handle the marshal operation for this NodeValue.  Each of the target object's primary key values that are mapped to the collection mapping's fields  (in the XMLCollectionReferenceMapping's source-target key field association list) are retrieved and written out. 
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (this.xmlCollectionReferenceMapping.isReadOnly()) {
    return false;
  }
  CoreContainerPolicy cp=xmlCollectionReferenceMapping.getContainerPolicy();
  Object collection=xmlCollectionReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (collection == null) {
    return false;
  }
  Object iterator=cp.iteratorFor(collection);
  if (cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,false);
  }
  Object objectValue;
  if (xmlCollectionReferenceMapping.usesSingleNode()) {
    StringBuilder stringValueStringBuilder=new StringBuilder();
    String newValue;
    QName schemaType;
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      Object fieldValue=xmlCollectionReferenceMapping.buildFieldValue(objectValue,xmlField,session);
      if (fieldValue == null) {
        if (null != objectValue) {
          Field fkField=(Field)xmlCollectionReferenceMapping.getSourceToTargetKeyFieldAssociations().get(xmlField);
          fieldValue=marshalRecord.getMarshaller().getContext().getValueByXPath(objectValue,fkField.getXPath(),fkField.getNamespaceResolver(),Object.class);
        }
        if (null == fieldValue) {
          break;
        }
      }
      schemaType=xmlField.getSchemaTypeForValue(fieldValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,fieldValue,(ConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (newValue != null) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    marshalSingleValue(xPathFragment,marshalRecord,object,stringValueStringBuilder.toString(),session,namespaceResolver,ObjectMarshalContext.getInstance());
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}"
63977,"/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's map of target primary key values - based on the target key field name.  Note  that if a reference already exists for the xmlCollectionReferenceMapping's  source object instance, we will simply add to the target pk value list.   The Reference object is stored on the ReferenceResolver associated with  the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    Object container=unmarshalRecord.getContainerInstance(this);
    xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession(),container);
  }
}","/** 
 * Handle attribute operation.  Here we will create and populate an  org.eclipse.persistence.internal.oxm.Reference instance to be used during  the mapping resolution stage.  In particular, the primary key value for this element will be added to the Reference object's map of target primary key values - based on the target key field name.  Note  that if a reference already exists for the xmlCollectionReferenceMapping's  source object instance, we will simply add to the target pk value list.   The Reference object is stored on the ReferenceResolver associated with  the UnmarshalRecord's session.
 */
public void attribute(UnmarshalRecord unmarshalRecord,String namespaceURI,String localName,String value){
  if (value != null) {
    Object realValue=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,(ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager(),unmarshalRecord);
    Object container=unmarshalRecord.getContainerInstance(this);
    xmlCollectionReferenceMapping.buildReference(unmarshalRecord,xmlField,realValue,unmarshalRecord.getSession(),container);
  }
}"
63978,"public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
          if (unmarshalRecord.isNil()) {
            return true;
          }
        }
 else         if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (policy != null && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeCollectionMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (!(unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil())) {
      Field xmlFld=(Field)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}","public boolean startElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Attributes atts){
  try {
    Descriptor xmlDescriptor=(Descriptor)xmlCompositeCollectionMapping.getReferenceDescriptor();
    if (xmlDescriptor == null) {
      xmlDescriptor=findReferenceDescriptor(xPathFragment,unmarshalRecord,atts,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping.getKeepAsElementPolicy());
      if (xmlDescriptor == null) {
        if (unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
          if (unmarshalRecord.isNil()) {
            return true;
          }
        }
 else         if (xmlCompositeCollectionMapping.getNullPolicy().valueIsNull(atts)) {
          getContainerPolicy().addInto(null,unmarshalRecord.getContainerInstance(this),unmarshalRecord.getSession());
          return true;
        }
        if (xmlCompositeCollectionMapping.getField() != null) {
          QName leafType=((Field)xmlCompositeCollectionMapping.getField()).getLastXPathFragment().getLeafElementType();
          if (leafType != null) {
            XPathFragment frag=new XPathFragment();
            frag.setNamespaceAware(unmarshalRecord.isNamespaceAware());
            String xpath=leafType.getLocalPart();
            String uri=leafType.getNamespaceURI();
            if (uri != null && uri.length() > 0) {
              frag.setNamespaceURI(uri);
              String prefix=((Descriptor)xmlCompositeCollectionMapping.getDescriptor()).getNonNullNamespaceResolver().resolveNamespaceURI(uri);
              if (prefix != null && prefix.length() > 0) {
                xpath=prefix + Constants.COLON + xpath;
              }
            }
            frag.setXPath(xpath);
            Context xmlContext=unmarshalRecord.getUnmarshaller().getContext();
            xmlDescriptor=xmlContext.getDescriptorByGlobalType(frag);
          }
        }
      }
      UnmarshalKeepAsElementPolicy policy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
      if (policy != null && ((xmlDescriptor == null && policy.isKeepUnknownAsElement()) || policy.isKeepAllAsElement())) {
        if (unmarshalRecord.getTypeQName() != null) {
          Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
          if (theClass == null) {
            setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
            return true;
          }
        }
 else {
          setupHandlerForKeepAsElementPolicy(unmarshalRecord,xPathFragment,atts);
          return true;
        }
      }
    }
    AbstractNullPolicy nullPolicy=xmlCompositeCollectionMapping.getNullPolicy();
    if (nullPolicy.isNullRepresentedByEmptyNode()) {
      String qnameString=xPathFragment.getLocalName();
      if (xPathFragment.getPrefix() != null) {
        qnameString=xPathFragment.getPrefix() + Constants.COLON + qnameString;
      }
      if (null != xmlDescriptor) {
        CompositeCollectionMappingContentHandler aHandler=new CompositeCollectionMappingContentHandler(unmarshalRecord,this,xmlCompositeCollectionMapping,atts,xPathFragment,xmlDescriptor);
        aHandler.startElement(xPathFragment.getNamespaceURI(),xPathFragment.getLocalName(),qnameString,atts);
        XMLReader xmlReader=unmarshalRecord.getXMLReader();
        xmlReader.setContentHandler(aHandler);
        xmlReader.setLexicalHandler(aHandler);
      }
    }
 else     if (!(unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(nullPolicy) && unmarshalRecord.isNil())) {
      Field xmlFld=(Field)this.xmlCompositeCollectionMapping.getField();
      if (xmlFld.hasLastXPathFragment()) {
        unmarshalRecord.setLeafElementType(xmlFld.getLastXPathFragment().getLeafElementType());
      }
      processChild(xPathFragment,unmarshalRecord,atts,xmlDescriptor,xmlCompositeCollectionMapping);
    }
  }
 catch (  SAXException e) {
    throw XMLMarshalException.unmarshalException(e);
  }
  return true;
}"
63979,"public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
    if (unmarshalRecord.getXMLReader().isInCollection()) {
      unmarshalRecord.addAttributeValue(this,null);
    }
 else {
      unmarshalRecord.setAttributeValueNull(this);
    }
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)((XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager()).getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
          return;
        }
      }
      if (builder.getNodes().size() > 1) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping,unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  InverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      Object currentValue=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (!isInverseReference || (currentValue == null && isInverseReference)) {
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
      }
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  objectValue=xmlCompositeCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}","public void endElement(XPathFragment xPathFragment,UnmarshalRecord unmarshalRecord,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeCollectionMapping.getNullPolicy())) {
    if (unmarshalRecord.getXMLReader().isInCollection()) {
      unmarshalRecord.addAttributeValue(this,null);
    }
 else {
      unmarshalRecord.setAttributeValueNull(this);
    }
    unmarshalRecord.resetStringBuffer();
    return;
  }
  if (null == unmarshalRecord.getChildRecord()) {
    SAXFragmentBuilder builder=unmarshalRecord.getFragmentBuilder();
    UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlCompositeCollectionMapping.getKeepAsElementPolicy();
    if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && builder.getNodes().size() > 1) {
      if (unmarshalRecord.getTypeQName() != null) {
        Class theClass=(Class)XMLConversionManager.getDefaultXMLTypes().get(unmarshalRecord.getTypeQName());
        if (theClass != null) {
          endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
          return;
        }
      }
      if (builder.getNodes().size() > 1) {
        setOrAddAttributeValueForKeepAsElement(builder,xmlCompositeCollectionMapping,xmlCompositeCollectionMapping,unmarshalRecord,true,collection);
        return;
      }
    }
 else {
      endElementProcessText(unmarshalRecord,xmlCompositeCollectionMapping,xPathFragment,collection);
      return;
    }
    return;
  }
  Object objectValue=unmarshalRecord.getChildRecord().getCurrentObject();
  InverseReferenceMapping inverseReferenceMapping=xmlCompositeCollectionMapping.getInverseReferenceMapping();
  if (null != inverseReferenceMapping) {
    if (inverseReferenceMapping.getContainerPolicy() == null) {
      Object currentValue=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (!isInverseReference || (currentValue == null && isInverseReference)) {
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,unmarshalRecord.getCurrentObject());
      }
    }
 else {
      Object backpointerContainer=inverseReferenceMapping.getAttributeAccessor().getAttributeValueFromObject(objectValue);
      if (backpointerContainer == null) {
        backpointerContainer=inverseReferenceMapping.getContainerPolicy().containerInstance();
        inverseReferenceMapping.getAttributeAccessor().setAttributeValueInObject(objectValue,backpointerContainer);
      }
      inverseReferenceMapping.getContainerPolicy().addInto(unmarshalRecord.getCurrentObject(),backpointerContainer,unmarshalRecord.getSession());
    }
  }
  objectValue=xmlCompositeCollectionMapping.convertDataValueToObjectValue(objectValue,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  unmarshalRecord.addAttributeValue(this,objectValue,collection);
  unmarshalRecord.setChildRecord(null);
}"
63980,"private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeDirectCollectionMapping.getNullPolicy())) {
    value=null;
  }
 else   if (!isWhitespaceAware() && Constants.EMPTY_STRING.equals(value)) {
    value=null;
  }
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  XMLConversionManager xmlConversionManager=(XMLConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=xmlConversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,xmlConversionManager,unmarshalRecord);
  }
  value=xmlCompositeDirectCollectionMapping.convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  if (value != null && value.getClass() == CoreClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}","private void addUnmarshalValue(UnmarshalRecord unmarshalRecord,Object value,Object collection){
  if (unmarshalRecord.isNil() && unmarshalRecord.getXMLReader().isNullRepresentedByXsiNil(xmlCompositeDirectCollectionMapping.getNullPolicy())) {
    value=null;
  }
 else   if (!isWhitespaceAware() && Constants.EMPTY_STRING.equals(value)) {
    value=null;
  }
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  ConversionManager conversionManager=(ConversionManager)unmarshalRecord.getSession().getDatasourcePlatform().getConversionManager();
  if (unmarshalRecord.getTypeQName() != null) {
    Class typeClass=xmlField.getJavaClass(unmarshalRecord.getTypeQName());
    value=conversionManager.convertObject(value,typeClass,unmarshalRecord.getTypeQName());
  }
 else {
    value=unmarshalRecord.getXMLReader().convertValueBasedOnSchemaType(xmlField,value,conversionManager,unmarshalRecord);
  }
  value=xmlCompositeDirectCollectionMapping.convertDataValueToObjectValue(value,unmarshalRecord.getSession(),unmarshalRecord.getUnmarshaller());
  if (value != null && value.getClass() == CoreClassConstants.STRING) {
    if (xmlCompositeDirectCollectionMapping.isCollapsingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().collapseStringValue((String)value);
    }
 else     if (xmlCompositeDirectCollectionMapping.isNormalizingStringValues()) {
      value=XMLConversionManager.getDefaultXMLManager().normalizeStringValue((String)value);
    }
  }
  unmarshalRecord.addAttributeValue(this,value,collection);
}"
63981,"/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeDirectCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlField.usesSingleNode() && !xmlCompositeDirectCollectionMapping.isDefaultEmptyContainer()) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeDirectCollectionMapping.getWrapperNullPolicy() != null);
    }
  }
  Object objectValue;
  if (xmlField.usesSingleNode()) {
    StringBuilder stringValueStringBuilder=new StringBuilder();
    String newValue;
    QName schemaType=null;
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      objectValue=xmlCompositeDirectCollectionMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      schemaType=xmlField.getSchemaTypeForValue(objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(XMLConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}","/** 
 * Override the method in XPathNode such that the marshaller can be set on the marshalRecord - this is required for XMLConverter usage.
 */
public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlCompositeDirectCollectionMapping.isReadOnly()) {
    return false;
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object collection=xmlCompositeDirectCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlCompositeDirectCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  Field xmlField=(Field)xmlCompositeDirectCollectionMapping.getField();
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    if (xmlField.usesSingleNode() && !xmlCompositeDirectCollectionMapping.isDefaultEmptyContainer()) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlCompositeDirectCollectionMapping.getWrapperNullPolicy() != null);
    }
  }
  Object objectValue;
  if (xmlField.usesSingleNode()) {
    StringBuilder stringValueStringBuilder=new StringBuilder();
    String newValue;
    QName schemaType=null;
    if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
      marshalRecord.openStartElement(xPathFragment,namespaceResolver);
    }
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      objectValue=xmlCompositeDirectCollectionMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      schemaType=xmlField.getSchemaTypeForValue(objectValue,session);
      newValue=marshalRecord.getValueToWrite(schemaType,objectValue,(ConversionManager)session.getDatasourcePlatform().getConversionManager());
      if (null != newValue) {
        stringValueStringBuilder.append(newValue);
        if (cp.hasNext(iterator)) {
          stringValueStringBuilder.append(SPACE);
        }
      }
    }
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    if (xPathFragment != null && xPathFragment.isAttribute()) {
      marshalRecord.attribute(xPathFragment,namespaceResolver,stringValueStringBuilder.toString());
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
 else {
      marshalRecord.closeStartGroupingElements(groupingFragment);
      if (xmlCompositeDirectCollectionMapping.isCDATA()) {
        marshalRecord.cdata(stringValueStringBuilder.toString());
      }
 else {
        marshalRecord.characters(stringValueStringBuilder.toString());
        if (xPathFragment != null && !xPathFragment.isAttribute() && !xPathFragment.nameIsText) {
          marshalRecord.endElement(xPathFragment,namespaceResolver);
        }
      }
    }
  }
 else {
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
  }
  return true;
}"
63982,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((Root)originalValue).getSchemaType();
    Namespace generatedNamespace=setupFragment((Root)originalValue,xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters(qname,value,null,false);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((Root)originalValue).getSchemaType();
    setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    updateNamespaces(qname,marshalRecord,null);
  }
  marshalRecord.characters(qname,value,null,false);
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
63983,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  Descriptor descriptor;
  ObjectBuilder objectBuilder;
  CoreAbstractSession childSession;
  Marshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((Root)value).getObject();
    if (null == value) {
      return false;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(Descriptor)childSession.getDescriptor(value);
    objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        if (extraNamespaces == null) {
          extraNamespaces=new java.util.ArrayList();
        }
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,value);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=value;
  Descriptor descriptor;
  ObjectBuilder objectBuilder;
  CoreAbstractSession childSession;
  Marshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  if (xmlAnyCollectionMapping.usesXMLRoot() && (value instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    value=((Root)value).getObject();
    if (null == value) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  UnmarshalKeepAsElementPolicy keepAsElementPolicy=xmlAnyCollectionMapping.getKeepAsElementPolicy();
  if (value instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
  }
 else   if (null != keepAsElementPolicy && (keepAsElementPolicy.isKeepUnknownAsElement() || keepAsElementPolicy.isKeepAllAsElement()) && value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    try {
      childSession=marshaller.getContext().getSession(value);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,value,session,namespaceResolver);
      return true;
    }
    descriptor=(Descriptor)childSession.getDescriptor(value);
    objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(value);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
          rootFragment.setNamespaceURI(uri);
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,childSession,marshalRecord.getNamespaceResolver(),objectBuilder,value);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyCollectionMapping.getField(),originalValue,value,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,value);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}"
63984,"private Namespace setupFragment(Root originalValue,XPathFragment xmlRootFragment,MarshalRecord marshalRecord){
  Namespace generatedNamespace=null;
  String xpath=originalValue.getLocalName();
  if (originalValue.getNamespaceURI() != null) {
    xmlRootFragment.setNamespaceURI((originalValue).getNamespaceURI());
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI((originalValue).getNamespaceURI());
    if (prefix == null || prefix.length() == 0) {
      prefix=marshalRecord.getNamespaceResolver().generatePrefix();
      generatedNamespace=new Namespace(prefix,xmlRootFragment.getNamespaceURI());
    }
    xpath=prefix + Constants.COLON + xpath;
  }
  xmlRootFragment.setXPath(xpath);
  return generatedNamespace;
}","private Namespace setupFragment(Root originalValue,XPathFragment xmlRootFragment,MarshalRecord marshalRecord){
  Namespace generatedNamespace=null;
  String xpath=originalValue.getLocalName();
  if (originalValue.getNamespaceURI() != null) {
    xmlRootFragment.setNamespaceURI((originalValue).getNamespaceURI());
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI((originalValue).getNamespaceURI());
    if (prefix == null || prefix.length() == 0) {
      prefix=marshalRecord.getNamespaceResolver().generatePrefix();
      generatedNamespace=new Namespace(prefix,xmlRootFragment.getNamespaceURI());
      xmlRootFragment.setGeneratedPrefix(true);
    }
    xpath=prefix + Constants.COLON + xpath;
  }
  xmlRootFragment.setXPath(xpath);
  return generatedNamespace;
}"
63985,"private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((Root)originalValue).getSchemaType();
    Namespace generatedNamespace=setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    if (generatedNamespace != null) {
      marshalRecord.namespaceDeclaration(generatedNamespace.getPrefix(),generatedNamespace.getNamespaceURI());
    }
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    marshalRecord.characters(qname,value,null,false);
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}","private void marshalSimpleValue(XPathFragment xmlRootFragment,MarshalRecord marshalRecord,Object originalValue,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  QName qname=null;
  if (xmlRootFragment != null) {
    qname=((Root)originalValue).getSchemaType();
    setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    getXPathNode().startElement(marshalRecord,xmlRootFragment,object,session,namespaceResolver,null,null);
    updateNamespaces(qname,marshalRecord,null);
  }
  if (value instanceof org.w3c.dom.Node) {
    marshalRecord.node((org.w3c.dom.Node)value,marshalRecord.getNamespaceResolver());
  }
 else {
    marshalRecord.characters(qname,value,null,false);
  }
  if (xmlRootFragment != null) {
    marshalRecord.endElement(xmlRootFragment,namespaceResolver);
  }
}"
63986,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlAnyObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((Root)objectValue).getObject();
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    CoreSession childSession=null;
    try {
      childSession=marshaller.getContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    Descriptor descriptor=(Descriptor)childSession.getDescriptor(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      Namespace generatedNamespace=setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      if (generatedNamespace != null) {
        extraNamespaces.add(generatedNamespace);
      }
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object objectValue,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  XPathFragment rootFragment=null;
  Marshaller marshaller=marshalRecord.getMarshaller();
  objectValue=xmlAnyObjectMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
  if (null == objectValue) {
    return false;
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  marshalRecord.closeStartGroupingElements(groupingFragment);
  boolean wasXMLRoot=false;
  XPathFragment xmlRootFragment=null;
  Object originalValue=objectValue;
  if (xmlAnyObjectMapping.usesXMLRoot() && (objectValue instanceof Root)) {
    xmlRootFragment=new XPathFragment();
    xmlRootFragment.setNamespaceAware(marshalRecord.isNamespaceAware());
    wasXMLRoot=true;
    objectValue=((Root)objectValue).getObject();
    if (objectValue == null) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
      marshalRecord.nilComplex(xmlRootFragment,namespaceResolver);
      return true;
    }
  }
  if (objectValue instanceof String) {
    marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
  }
 else {
    CoreSession childSession=null;
    try {
      childSession=marshaller.getContext().getSession(objectValue);
    }
 catch (    XMLMarshalException e) {
      marshalSimpleValue(xmlRootFragment,marshalRecord,originalValue,object,objectValue,session,namespaceResolver);
      return true;
    }
    Descriptor descriptor=(Descriptor)childSession.getDescriptor(objectValue);
    ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
    List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
    if (wasXMLRoot) {
      setupFragment(((Root)originalValue),xmlRootFragment,marshalRecord);
    }
    String defaultRootElementString=descriptor.getDefaultRootElement();
    if (!wasXMLRoot && (defaultRootElementString == null)) {
      AbstractSessionLog.getLog().log(SessionLog.WARNING,""String_Node_Str"",new Object[]{Helper.getShortClassName(this.getClass()),descriptor});
    }
 else {
      marshalRecord.beforeContainmentMarshal(objectValue);
      if (xmlRootFragment != null) {
        rootFragment=xmlRootFragment;
      }
 else {
        rootFragment=new XPathFragment(defaultRootElementString);
        if (rootFragment.getNamespaceURI() == null) {
          if (rootFragment.getPrefix() != null) {
            String uri=descriptor.getNonNullNamespaceResolver().resolveNamespacePrefix(rootFragment.getPrefix());
            rootFragment.setNamespaceURI(uri);
          }
 else {
            rootFragment.setNamespaceURI(descriptor.getNonNullNamespaceResolver().getDefaultNamespaceURI());
          }
        }
      }
      if (!wasXMLRoot) {
        marshalRecord.setLeafElementType(descriptor.getDefaultRootElementType());
      }
      getXPathNode().startElement(marshalRecord,rootFragment,object,session,descriptor.getNonNullNamespaceResolver(),objectBuilder,objectValue);
      writeExtraNamespaces(extraNamespaces,marshalRecord,session);
      marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,descriptor,(Field)xmlAnyObjectMapping.getField(),originalValue,objectValue,wasXMLRoot,false);
      objectBuilder.buildRow(marshalRecord,objectValue,(org.eclipse.persistence.internal.sessions.AbstractSession)childSession,marshaller,null);
      marshalRecord.afterContainmentMarshal(object,objectValue);
      marshalRecord.endElement(rootFragment,namespaceResolver);
      marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
    }
  }
  return true;
}"
63987,"private Namespace setupFragment(Root originalValue,XPathFragment xmlRootFragment,MarshalRecord marshalRecord){
  Namespace generatedNamespace=null;
  String xpath=originalValue.getLocalName();
  if (originalValue.getNamespaceURI() != null) {
    xmlRootFragment.setNamespaceURI((originalValue).getNamespaceURI());
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI((originalValue).getNamespaceURI());
    if (prefix == null || prefix.length() == 0) {
      prefix=marshalRecord.getNamespaceResolver().generatePrefix(""String_Node_Str"");
      generatedNamespace=new Namespace(prefix,xmlRootFragment.getNamespaceURI());
    }
    xpath=prefix + Constants.COLON + xpath;
  }
  xmlRootFragment.setXPath(xpath);
  return generatedNamespace;
}","private Namespace setupFragment(Root originalValue,XPathFragment xmlRootFragment,MarshalRecord marshalRecord){
  Namespace generatedNamespace=null;
  String xpath=originalValue.getLocalName();
  if (originalValue.getNamespaceURI() != null) {
    xmlRootFragment.setNamespaceURI((originalValue).getNamespaceURI());
    String prefix=marshalRecord.getNamespaceResolver().resolveNamespaceURI((originalValue).getNamespaceURI());
    if (prefix == null || prefix.length() == 0) {
      prefix=marshalRecord.getNamespaceResolver().generatePrefix(""String_Node_Str"");
      generatedNamespace=new Namespace(prefix,xmlRootFragment.getNamespaceURI());
      xmlRootFragment.setGeneratedPrefix(true);
    }
    xpath=prefix + Constants.COLON + xpath;
  }
  xmlRootFragment.setXPath(xpath);
  return generatedNamespace;
}"
63988,"public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  Object originalValue=value;
  VariableXPathObjectMapping mapping=(VariableXPathObjectMapping)this.getMapping();
  Descriptor descriptor=(Descriptor)mapping.getReferenceDescriptor();
  if (descriptor.hasInheritance()) {
    Class objectValueClass=value.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  Marshaller marshaller=marshalRecord.getMarshaller();
  XPathFragment rootFragment;
  ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
  List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
  String defaultRootElementString=descriptor.getDefaultRootElement();
  marshalRecord.beforeContainmentMarshal(value);
  rootFragment=mapping.getXPathFragmentForValue(value,marshalRecord.getNamespaceResolver(),marshalRecord.isNamespaceAware(),marshalRecord.getNamespaceSeparator());
  if (rootFragment.isGeneratedPrefix()) {
    if (extraNamespaces == null) {
      extraNamespaces=new ArrayList();
    }
    extraNamespaces.add(new Namespace(rootFragment.getPrefix(),rootFragment.getNamespaceURI()));
  }
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (mapping.isAttribute()) {
    ObjectBuilder tob=(ObjectBuilder)mapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(value,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      marshalRecord.attribute(rootFragment,namespaceResolver,fieldValue,schemaType);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(rootFragment,marshalRecord,value,textMapping.getAttributeValueFromObject(value),session,namespaceResolver,marshalContext);
    }
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    getXPathNode().startElement(marshalRecord,rootFragment,object,session,marshalRecord.getNamespaceResolver(),objectBuilder,value);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)mapping.getReferenceDescriptor(),(Field)mapping.getField(),originalValue,value,false,false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(rootFragment,namespaceResolver);
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
  return true;
}","public boolean marshalSingleValue(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,Object value,CoreAbstractSession session,NamespaceResolver namespaceResolver,MarshalContext marshalContext){
  if (null == value) {
    return false;
  }
  Object originalValue=value;
  VariableXPathObjectMapping mapping=(VariableXPathObjectMapping)this.getMapping();
  Descriptor descriptor=(Descriptor)mapping.getReferenceDescriptor();
  if (descriptor.hasInheritance()) {
    Class objectValueClass=value.getClass();
    if (!(objectValueClass == descriptor.getJavaClass())) {
      descriptor=(Descriptor)session.getDescriptor(objectValueClass);
    }
  }
  Marshaller marshaller=marshalRecord.getMarshaller();
  ObjectBuilder objectBuilder=(ObjectBuilder)descriptor.getObjectBuilder();
  List extraNamespaces=objectBuilder.addExtraNamespacesToNamespaceResolver(descriptor,marshalRecord,session,true,true);
  String defaultRootElementString=descriptor.getDefaultRootElement();
  marshalRecord.beforeContainmentMarshal(value);
  XPathFragment rootFragment=mapping.getXPathFragmentForValue(value,marshalRecord.getNamespaceResolver(),marshalRecord.isNamespaceAware(),marshalRecord.getNamespaceSeparator());
  XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
  if (mapping.isAttribute()) {
    ObjectBuilder tob=(ObjectBuilder)mapping.getReferenceDescriptor().getObjectBuilder();
    MappingNodeValue textMappingNodeValue=(MappingNodeValue)tob.getRootXPathNode().getTextNode().getMarshalNodeValue();
    Mapping textMapping=textMappingNodeValue.getMapping();
    if (textMapping.isAbstractDirectMapping()) {
      DirectMapping xmlDirectMapping=(DirectMapping)textMapping;
      Object fieldValue=xmlDirectMapping.getFieldValue(xmlDirectMapping.valueFromObject(value,xmlDirectMapping.getField(),session),session,marshalRecord);
      QName schemaType=((Field)xmlDirectMapping.getField()).getSchemaTypeForValue(fieldValue,session);
      marshalRecord.attribute(rootFragment,namespaceResolver,fieldValue,schemaType);
      return true;
    }
 else {
      return textMappingNodeValue.marshalSingleValue(rootFragment,marshalRecord,value,textMapping.getAttributeValueFromObject(value),session,namespaceResolver,marshalContext);
    }
  }
 else {
    marshalRecord.closeStartGroupingElements(groupingFragment);
    getXPathNode().startElement(marshalRecord,rootFragment,object,session,marshalRecord.getNamespaceResolver(),objectBuilder,value);
    writeExtraNamespaces(extraNamespaces,marshalRecord,session);
    marshalRecord.addXsiTypeAndClassIndicatorIfRequired(descriptor,(Descriptor)mapping.getReferenceDescriptor(),(Field)mapping.getField(),originalValue,value,false,false);
    objectBuilder.buildRow(marshalRecord,value,session,marshaller,null);
    marshalRecord.afterContainmentMarshal(object,value);
    marshalRecord.endElement(rootFragment,namespaceResolver);
    marshalRecord.removeExtraNamespacesFromNamespaceResolver(extraNamespaces,session);
  }
  return true;
}"
63989,"/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    String namespaceUri=xPathFragment.getNamespaceURI();
    if (namespaceUri == null) {
      namespaceUri=Constants.EMPTY_STRING;
    }
    contentHandler.startElement(namespaceUri,xPathFragment.getLocalName(),getNameForFragment(xPathFragment),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL: Create a start element tag - this call results in a complete start element,  i.e. closeStartElement() does not need to be called after a call to this  method.
 */
private void openAndCloseStartElement(){
  try {
    String namespaceUri=xPathFragment.getNamespaceURI();
    if (namespaceUri == null) {
      namespaceUri=Constants.EMPTY_STRING;
    }
    if (xPathFragment.isGeneratedPrefix()) {
      this.namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
    contentHandler.startElement(namespaceUri,xPathFragment.getLocalName(),getNameForFragment(xPathFragment),attributes);
  }
 catch (  SAXException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63990,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  if (!isLastEventText) {
    if (numberOfTabs > 0) {
      outputStreamWrite(CR);
    }
    outputStreamWriteTab();
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(getNameForFragmentBytes(xPathFragment));
  numberOfTabs++;
  isLastEventText=false;
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  if (!isLastEventText) {
    if (numberOfTabs > 0) {
      outputStreamWrite(CR);
    }
    outputStreamWriteTab();
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(getNameForFragmentBytes(xPathFragment));
  if (xPathFragment.isGeneratedPrefix()) {
    namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
  }
  numberOfTabs++;
  isLastEventText=false;
}"
63991,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  this.addPositionalNodes(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    if (!isLastEventText) {
      if (numberOfTabs > 0) {
        writer.write(Helper.cr());
      }
      for (int x=0; x < numberOfTabs; x++) {
        writer.write(tab());
      }
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    if (xPathFragment.isGeneratedPrefix()) {
      namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
    numberOfTabs++;
    isLastEventText=false;
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63992,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    super.openStartElement(xPathFragment,namespaceResolver);
    Element element=document.createElementNS(xPathFragment.getNamespaceURI(),getNameForFragment(xPathFragment));
    node=node.appendChild(element);
  }
 catch (  DOMException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  try {
    super.openStartElement(xPathFragment,namespaceResolver);
    Element element=document.createElementNS(xPathFragment.getNamespaceURI(),getNameForFragment(xPathFragment));
    node=node.appendChild(element);
    if (xPathFragment.isGeneratedPrefix()) {
      namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
  }
 catch (  DOMException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63993,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(getNameForFragmentBytes(xPathFragment));
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    outputStreamWrite(CLOSE_ELEMENT);
  }
  isStartElementOpen=true;
  outputStreamWrite(OPEN_START_ELEMENT);
  outputStreamWrite(getNameForFragmentBytes(xPathFragment));
  if (xPathFragment.isGeneratedPrefix()) {
    namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
  }
}"
63994,"/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","/** 
 * INTERNAL:
 */
public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    if (isStartElementOpen) {
      writer.write('>');
    }
    isStartElementOpen=true;
    writer.write('<');
    writer.write(getNameForFragment(xPathFragment));
    if (xPathFragment.isGeneratedPrefix()) {
      namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
    }
  }
 catch (  IOException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63995,"public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes=null;
  this.namespaceDeclarations=null;
  writePrefixMappings();
}","public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  if (isStartElementOpen) {
    openAndCloseStartElement();
  }
  isStartElementOpen=true;
  this.xPathFragment=xPathFragment;
  this.attributes=null;
  this.namespaceDeclarations=null;
  if (xPathFragment.isGeneratedPrefix()) {
    namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
  }
  writePrefixMappings();
}"
63996,"public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    String namespaceURI=xPathFragment.getNamespaceURI();
    if (namespaceURI == null) {
      NamespaceContext namespaceContext=xmlStreamWriter.getNamespaceContext();
      if (null == namespaceContext) {
        xmlStreamWriter.writeStartElement(xPathFragment.getLocalName());
      }
 else {
        String defaultNamespace=namespaceContext.getNamespaceURI(Constants.EMPTY_STRING);
        xmlStreamWriter.writeStartElement(Constants.EMPTY_STRING,xPathFragment.getLocalName(),Constants.EMPTY_STRING);
        if (defaultNamespace != null && defaultNamespace.length() > 0) {
          xmlStreamWriter.writeDefaultNamespace(Constants.EMPTY_STRING);
        }
      }
    }
 else {
      String prefix=getPrefixForFragment(xPathFragment);
      if (prefix == null) {
        prefix=Constants.EMPTY_STRING;
      }
      xmlStreamWriter.writeStartElement(prefix,xPathFragment.getLocalName(),namespaceURI);
    }
    writePrefixMappings();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}","public void openStartElement(XPathFragment xPathFragment,NamespaceResolver namespaceResolver){
  super.openStartElement(xPathFragment,namespaceResolver);
  try {
    String namespaceURI=xPathFragment.getNamespaceURI();
    if (namespaceURI == null) {
      NamespaceContext namespaceContext=xmlStreamWriter.getNamespaceContext();
      if (null == namespaceContext) {
        xmlStreamWriter.writeStartElement(xPathFragment.getLocalName());
      }
 else {
        String defaultNamespace=namespaceContext.getNamespaceURI(Constants.EMPTY_STRING);
        xmlStreamWriter.writeStartElement(Constants.EMPTY_STRING,xPathFragment.getLocalName(),Constants.EMPTY_STRING);
        if (defaultNamespace != null && defaultNamespace.length() > 0) {
          xmlStreamWriter.writeDefaultNamespace(Constants.EMPTY_STRING);
        }
      }
    }
 else {
      String prefix=getPrefixForFragment(xPathFragment);
      if (prefix == null) {
        prefix=Constants.EMPTY_STRING;
      }
      xmlStreamWriter.writeStartElement(prefix,xPathFragment.getLocalName(),namespaceURI);
      if (xPathFragment.isGeneratedPrefix()) {
        namespaceDeclaration(xPathFragment.getPrefix(),xPathFragment.getNamespaceURI());
      }
    }
    writePrefixMappings();
  }
 catch (  XMLStreamException e) {
    throw XMLMarshalException.marshalException(e);
  }
}"
63997,"/** 
 * INTERNAL: This method is used to build the results. Interpreting the SQLResultSetMapping.
 */
protected List buildObjectsFromRecords(List databaseRecords,SQLResultSetMapping mapping){
  int numberOfRecords=databaseRecords.size();
  List results=new ArrayList(numberOfRecords);
  if (mapping == null) {
    for (Iterator iterator=databaseRecords.iterator(); iterator.hasNext(); ) {
      DatabaseRecord record=(DatabaseRecord)iterator.next();
      results.add(record.values().toArray());
    }
  }
 else {
    for (Iterator iterator=databaseRecords.iterator(); iterator.hasNext(); ) {
      if (mapping.getResults().size() > 1) {
        Object[] resultElement=new Object[mapping.getResults().size()];
        DatabaseRecord record=(DatabaseRecord)iterator.next();
        for (int i=0; i < mapping.getResults().size(); i++) {
          resultElement[i]=((SQLResult)mapping.getResults().get(i)).getValueFromRecord(record,this);
        }
        results.add(resultElement);
      }
 else       if (mapping.getResults().size() == 1) {
        DatabaseRecord record=(DatabaseRecord)iterator.next();
        results.add(((SQLResult)mapping.getResults().get(0)).getValueFromRecord(record,this));
      }
 else {
        return results;
      }
    }
  }
  return results;
}","/** 
 * INTERNAL: This method is used to build the results. Interpreting the SQLResultSetMapping.
 */
protected List buildObjectsFromRecords(List databaseRecords,SQLResultSetMapping mapping){
  int numberOfRecords=databaseRecords.size();
  List results=new ArrayList(numberOfRecords);
  if (mapping == null) {
    if (shouldReturnNameValuePairs()) {
      return databaseRecords;
    }
    for (Iterator iterator=databaseRecords.iterator(); iterator.hasNext(); ) {
      DatabaseRecord record=(DatabaseRecord)iterator.next();
      results.add(record.values().toArray());
    }
  }
 else {
    for (Iterator iterator=databaseRecords.iterator(); iterator.hasNext(); ) {
      if (mapping.getResults().size() > 1) {
        Object[] resultElement=new Object[mapping.getResults().size()];
        DatabaseRecord record=(DatabaseRecord)iterator.next();
        for (int i=0; i < mapping.getResults().size(); i++) {
          resultElement[i]=((SQLResult)mapping.getResults().get(i)).getValueFromRecord(record,this);
        }
        results.add(resultElement);
      }
 else       if (mapping.getResults().size() == 1) {
        DatabaseRecord record=(DatabaseRecord)iterator.next();
        results.add(((SQLResult)mapping.getResults().get(0)).getValueFromRecord(record,this));
      }
 else {
        return results;
      }
    }
  }
  return results;
}"
63998,"/** 
 * INTERNAL:
 */
public void processArgument(StoredProcedureCall call,boolean callByIndex,int index){
  boolean shouldCallByIndex=process(call,index);
  if (!callByIndex) {
    callByIndex=shouldCallByIndex;
  }
  if (m_mode.equals(JPA_PARAMETER_IN)) {
    if (hasType()) {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter,getJavaClass(m_type));
      }
 else {
        if (hasJdbcType() && hasJdbcTypeName()) {
          OracleArrayTypeMetadata aType=null;
          if (hasTypeName() && (aType=getArrayTypeMetadata(m_typeName)) != null) {
            call.addNamedArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type),buildNestedField(aType));
          }
 else {
            call.addNamedArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type));
          }
        }
 else {
          call.addNamedArgument(m_name,m_queryParameter,getJavaClass(m_type));
        }
      }
    }
 else     if (hasJdbcType() && hasJdbcTypeName()) {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
 else {
        call.addNamedArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
    }
 else     if (hasJdbcType()) {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter,m_jdbcType);
      }
 else {
        call.addNamedArgument(m_name,m_queryParameter,m_jdbcType);
      }
    }
 else {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter);
      }
 else {
        call.addNamedArgument(m_name,m_queryParameter);
      }
    }
  }
 else   if (m_mode.equals(JPA_PARAMETER_OUT)) {
    if (hasType()) {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter,getJavaClass(m_type));
      }
 else {
        if (hasJdbcType() && hasJdbcTypeName()) {
          OracleArrayTypeMetadata aType=null;
          if (hasTypeName() && (aType=getArrayTypeMetadata(m_typeName)) != null) {
            call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type),buildNestedField(aType));
          }
 else {
            call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type));
          }
        }
 else {
          call.addNamedOutputArgument(m_name,m_queryParameter,getJavaClass(m_type));
        }
      }
    }
 else     if (hasJdbcType() && hasJdbcTypeName()) {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
 else {
        call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
    }
 else     if (hasJdbcType()) {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter,m_jdbcType);
      }
 else {
        call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType);
      }
    }
 else {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter);
      }
 else {
        call.addNamedOutputArgument(m_name,m_queryParameter);
      }
    }
    setDatabaseFieldSettings((DatabaseField)call.getParameters().get(call.getParameters().size() - 1));
  }
 else   if (m_mode.equals(Direction.IN_OUT.name()) || m_mode.equals(JPA_PARAMETER_INOUT)) {
    if (hasType()) {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter,m_queryParameter,getJavaClass(m_type));
      }
 else {
        if (hasJdbcType() && hasJdbcTypeName()) {
          call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type));
        }
 else {
          call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,getJavaClass(m_type));
        }
      }
    }
 else     if (hasJdbcType() && hasJdbcTypeName()) {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
 else {
        call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
    }
 else     if (hasJdbcType()) {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter,m_queryParameter,m_jdbcType);
      }
 else {
        call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,m_jdbcType);
      }
    }
 else {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter);
      }
 else {
        call.addNamedInOutputArgument(m_name,m_queryParameter);
      }
    }
    Object[] array=(Object[])call.getParameters().get(call.getParameters().size() - 1);
    if (array[0] == array[1]) {
      array[1]=((DatabaseField)array[1]).clone();
    }
    setDatabaseFieldSettings((DatabaseField)array[1]);
  }
 else   if (m_mode.equals(Direction.OUT_CURSOR.name()) || m_mode.equals(JPA_PARAMETER_REF_CURSOR)) {
    if (callByIndex) {
      call.useUnnamedCursorOutputAsResultSet(index);
    }
 else {
      call.useNamedCursorOutputAsResultSet(m_queryParameter);
    }
  }
}","/** 
 * INTERNAL:
 */
public void processArgument(StoredProcedureCall call,boolean callByIndex,int index){
  boolean shouldCallByIndex=process(call,index);
  if (!callByIndex) {
    callByIndex=shouldCallByIndex;
  }
  if (m_mode.equals(JPA_PARAMETER_IN)) {
    if (hasType()) {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter,getJavaClass(m_type));
      }
 else {
        if (hasJdbcType() && hasJdbcTypeName()) {
          OracleArrayTypeMetadata aType=null;
          if (hasTypeName() && (aType=getArrayTypeMetadata(m_typeName)) != null) {
            call.addNamedArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type),buildNestedField(aType));
          }
 else {
            call.addNamedArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type));
          }
        }
 else {
          call.addNamedArgument(m_name,m_queryParameter,getJavaClass(m_type));
        }
      }
    }
 else     if (hasJdbcType() && hasJdbcTypeName()) {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
 else {
        call.addNamedArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
    }
 else     if (hasJdbcType()) {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter,m_jdbcType);
      }
 else {
        call.addNamedArgument(m_name,m_queryParameter,m_jdbcType);
      }
    }
 else {
      if (callByIndex) {
        call.addUnamedArgument(m_queryParameter);
      }
 else {
        call.addNamedArgument(m_name,m_queryParameter);
      }
    }
  }
 else   if (m_mode.equals(JPA_PARAMETER_OUT)) {
    if (hasType()) {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter,getJavaClass(m_type));
      }
 else {
        if (hasJdbcType() && hasJdbcTypeName()) {
          OracleArrayTypeMetadata aType=null;
          if (hasTypeName() && (aType=getArrayTypeMetadata(m_typeName)) != null) {
            call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type),buildNestedField(aType));
          }
 else {
            call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type));
          }
        }
 else {
          call.addNamedOutputArgument(m_name,m_queryParameter,getJavaClass(m_type));
        }
      }
    }
 else     if (hasJdbcType() && hasJdbcTypeName()) {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
 else {
        call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
    }
 else     if (hasJdbcType()) {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter,m_jdbcType);
      }
 else {
        call.addNamedOutputArgument(m_name,m_queryParameter,m_jdbcType);
      }
    }
 else {
      if (callByIndex) {
        call.addUnamedOutputArgument(m_queryParameter);
      }
 else {
        call.addNamedOutputArgument(m_name,m_queryParameter);
      }
    }
    setDatabaseFieldSettings((DatabaseField)call.getParameters().get(call.getParameters().size() - 1));
  }
 else   if (m_mode.equals(Direction.IN_OUT.name()) || m_mode.equals(JPA_PARAMETER_INOUT)) {
    if (hasType()) {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter,m_queryParameter,getJavaClass(m_type));
      }
 else {
        if (hasJdbcType() && hasJdbcTypeName()) {
          OracleArrayTypeMetadata aType=null;
          if (hasTypeName() && (aType=getArrayTypeMetadata(m_typeName)) != null) {
            call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type),buildNestedField(aType));
          }
 else {
            call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,m_jdbcType,m_jdbcTypeName,getJavaClass(m_type));
          }
        }
 else {
          call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,getJavaClass(m_type));
        }
      }
    }
 else     if (hasJdbcType() && hasJdbcTypeName()) {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
 else {
        call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,m_jdbcType,m_jdbcTypeName);
      }
    }
 else     if (hasJdbcType()) {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter,m_queryParameter,m_jdbcType);
      }
 else {
        call.addNamedInOutputArgument(m_name,m_queryParameter,m_queryParameter,m_jdbcType);
      }
    }
 else {
      if (callByIndex) {
        call.addUnamedInOutputArgument(m_queryParameter);
      }
 else {
        call.addNamedInOutputArgument(m_name,m_queryParameter);
      }
    }
    Object[] array=(Object[])call.getParameters().get(call.getParameters().size() - 1);
    if (array[0] == array[1]) {
      array[1]=((DatabaseField)array[1]).clone();
    }
    setDatabaseFieldSettings((DatabaseField)array[1]);
  }
 else   if (m_mode.equals(Direction.OUT_CURSOR.name()) || m_mode.equals(JPA_PARAMETER_REF_CURSOR)) {
    if (callByIndex) {
      call.useUnnamedCursorOutputAsResultSet(index);
    }
 else {
      call.useNamedCursorOutputAsResultSet(m_queryParameter);
    }
  }
}"
63999,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  CoreContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlAnyCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().getMediaType().isApplicationJSON()) {
    List<XPathFragment> frags=new ArrayList();
    List<List> values=new ArrayList<List>();
    List mixedValues=new ArrayList();
    XPathFragment xmlRootFragment;
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      nextValue=xmlAnyCollectionMapping.convertObjectValueToDataValue(nextValue,session,marshalRecord.getMarshaller());
      XPathFragment frag=getXPathFragmentForValue(nextValue,marshalRecord,marshalRecord.getMarshaller());
      if (frag != null) {
        if (frag == SIMPLE_FRAGMENT) {
          mixedValues.add(nextValue);
        }
 else {
          int index=frags.indexOf(frag);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            frags.add(frag);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedValues.size() > 0) {
      frags.add(SIMPLE_FRAGMENT);
      values.add(mixedValues);
    }
    for (int i=0; i < frags.size(); i++) {
      XPathFragment nextFragment=frags.get(i);
      List listValue=values.get(i);
      if (nextFragment != null) {
        int valueSize=listValue.size();
        if (valueSize > 1 || !marshalRecord.getMarshaller().isReduceAnyArrays()) {
          marshalRecord.startCollection();
        }
        for (int j=0; j < valueSize; j++) {
          marshalSingleValue(nextFragment,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        if (valueSize > 1 || !marshalRecord.getMarshaller().isReduceAnyArrays()) {
          marshalRecord.endCollection();
        }
      }
    }
    return true;
  }
 else {
    Object objectValue;
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      objectValue=xmlAnyCollectionMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    return true;
  }
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlAnyCollectionMapping.isReadOnly()) {
    return false;
  }
  CoreContainerPolicy cp=xmlAnyCollectionMapping.getContainerPolicy();
  Object collection=xmlAnyCollectionMapping.getAttributeAccessor().getAttributeValueFromObject(object);
  if (null == collection) {
    AbstractNullPolicy wrapperNP=xmlAnyCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation().equals(XMLNullRepresentationType.XSI_NIL)) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  Object iterator=cp.iteratorFor(collection);
  if (null != iterator && cp.hasNext(iterator)) {
    XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
    marshalRecord.closeStartGroupingElements(groupingFragment);
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlAnyCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().isApplicationJSON()) {
    List<XPathFragment> frags=new ArrayList();
    List<List> values=new ArrayList<List>();
    List mixedValues=new ArrayList();
    XPathFragment xmlRootFragment;
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      nextValue=xmlAnyCollectionMapping.convertObjectValueToDataValue(nextValue,session,marshalRecord.getMarshaller());
      XPathFragment frag=getXPathFragmentForValue(nextValue,marshalRecord,marshalRecord.getMarshaller());
      if (frag != null) {
        if (frag == SIMPLE_FRAGMENT) {
          mixedValues.add(nextValue);
        }
 else {
          int index=frags.indexOf(frag);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            frags.add(frag);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedValues.size() > 0) {
      frags.add(SIMPLE_FRAGMENT);
      values.add(mixedValues);
    }
    for (int i=0; i < frags.size(); i++) {
      XPathFragment nextFragment=frags.get(i);
      List listValue=values.get(i);
      if (nextFragment != null) {
        int valueSize=listValue.size();
        if (valueSize > 1 || !marshalRecord.getMarshaller().isReduceAnyArrays()) {
          marshalRecord.startCollection();
        }
        for (int j=0; j < valueSize; j++) {
          marshalSingleValue(nextFragment,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance());
        }
        if (valueSize > 1 || !marshalRecord.getMarshaller().isReduceAnyArrays()) {
          marshalRecord.endCollection();
        }
      }
    }
    return true;
  }
 else {
    Object objectValue;
    marshalRecord.startCollection();
    while (cp.hasNext(iterator)) {
      objectValue=cp.next(iterator,session);
      objectValue=xmlAnyCollectionMapping.convertObjectValueToDataValue(objectValue,session,marshalRecord.getMarshaller());
      marshalSingleValue(xPathFragment,marshalRecord,object,objectValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
    marshalRecord.endCollection();
    return true;
  }
}"
64000,"public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlChoiceCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().getMediaType().isApplicationJSON()) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=xmlChoiceCollectionMapping.convertObjectValueToDataValue(cp.next(iterator,session),session,marshalRecord.getMarshaller());
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        int valueSize=listValue.size();
        marshalRecord.startCollection();
        for (int j=0; j < valueSize; j++) {
          marshalSingleValueWithNodeValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance(),associatedNodeValue);
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}","public boolean marshal(XPathFragment xPathFragment,MarshalRecord marshalRecord,Object object,CoreAbstractSession session,NamespaceResolver namespaceResolver){
  if (xmlChoiceCollectionMapping.isReadOnly()) {
    return false;
  }
  Object value=xmlChoiceCollectionMapping.getAttributeValueFromObject(object);
  if (value == null) {
    AbstractNullPolicy wrapperNP=xmlChoiceCollectionMapping.getWrapperNullPolicy();
    if (wrapperNP != null && wrapperNP.getMarshalNullRepresentation() == XMLNullRepresentationType.XSI_NIL) {
      marshalRecord.nilSimple(namespaceResolver);
      return true;
    }
 else {
      return false;
    }
  }
  CoreContainerPolicy cp=getContainerPolicy();
  Object iterator=cp.iteratorFor(value);
  if (null != iterator && cp.hasNext(iterator)) {
    if (xPathFragment != null) {
      XPathFragment groupingFragment=marshalRecord.openStartGroupingElements(namespaceResolver);
      marshalRecord.closeStartGroupingElements(groupingFragment);
    }
  }
 else {
    return marshalRecord.emptyCollection(xPathFragment,namespaceResolver,xmlChoiceCollectionMapping.getWrapperNullPolicy() != null);
  }
  if (marshalRecord.getMarshaller().isApplicationJSON()) {
    List<NodeValue> nodeValues=new ArrayList();
    List<List> values=new ArrayList<List>();
    NodeValue mixedNodeValue=null;
    List mixedValues=null;
    while (cp.hasNext(iterator)) {
      Object nextValue=xmlChoiceCollectionMapping.convertObjectValueToDataValue(cp.next(iterator,session),session,marshalRecord.getMarshaller());
      NodeValue nodeValue=getNodeValueForValue(nextValue);
      if (nodeValue != null) {
        if (nodeValue == this) {
          mixedNodeValue=this;
          if (mixedValues == null) {
            mixedValues=new ArrayList();
          }
          mixedValues.add(nextValue);
        }
 else {
          int index=nodeValues.indexOf(nodeValue);
          if (index > -1) {
            values.get(index).add(nextValue);
          }
 else {
            nodeValues.add(nodeValue);
            List valuesList=new ArrayList();
            valuesList.add(nextValue);
            values.add(valuesList);
          }
        }
      }
    }
    if (mixedNodeValue != null) {
      nodeValues.add(mixedNodeValue);
      values.add(mixedValues);
    }
    for (int i=0; i < nodeValues.size(); i++) {
      NodeValue associatedNodeValue=nodeValues.get(i);
      List listValue=values.get(i);
      XPathFragment frag=null;
      if (associatedNodeValue == this) {
        frag=marshalRecord.getTextWrapperFragment();
      }
 else {
        frag=associatedNodeValue.getXPathNode().getXPathFragment();
        if (frag != null) {
          frag=getOwningFragment(associatedNodeValue,frag);
          associatedNodeValue=((XMLChoiceCollectionMappingUnmarshalNodeValue)associatedNodeValue).getChoiceElementMarshalNodeValue();
        }
      }
      if (frag != null) {
        int valueSize=listValue.size();
        marshalRecord.startCollection();
        for (int j=0; j < valueSize; j++) {
          marshalSingleValueWithNodeValue(frag,marshalRecord,object,listValue.get(j),session,namespaceResolver,ObjectMarshalContext.getInstance(),associatedNodeValue);
        }
        marshalRecord.endCollection();
      }
    }
  }
 else {
    while (cp.hasNext(iterator)) {
      Object nextValue=cp.next(iterator,session);
      marshalSingleValue(xPathFragment,marshalRecord,object,nextValue,session,namespaceResolver,ObjectMarshalContext.getInstance());
    }
  }
  return true;
}"
