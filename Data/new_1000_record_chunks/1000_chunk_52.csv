record_number,buggy_code,fixed_code
51001,"private void relabelGraph2MultisetLabels(DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph,int startLabel){
  Map<String,Bucket<VertexIndexPair>> bucketsV=new HashMap<String,Bucket<VertexIndexPair>>();
  Map<String,Bucket<EdgeIndexPair>> bucketsE=new HashMap<String,Bucket<EdgeIndexPair>>();
  for (int i=startLabel; i < labelCounter; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<VertexIndexPair>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<EdgeIndexPair>(Integer.toString(i)));
  }
  if (reverse) {
    for (    Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
      for (      int index : edge.getLabel().keySet()) {
        bucketsV.get(edge.getLabel().get(index).toString()).getContents().add(new VertexIndexPair(graph.getSource(edge),index + 1));
      }
    }
    for (    Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
      Collection<Edge<Map<Integer,StringBuilder>>> v2=graph.getInEdges(vertex);
      for (      int index : vertex.getLabel().keySet()) {
        for (        Edge<Map<Integer,StringBuilder>> e2 : v2) {
          if (e2.getLabel().containsKey(index)) {
            bucketsE.get(vertex.getLabel().get(index).toString()).getContents().add(new EdgeIndexPair(e2,index));
          }
        }
      }
    }
  }
 else {
    for (    Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
      for (      int index : edge.getLabel().keySet()) {
        bucketsV.get(edge.getLabel().get(index).toString()).getContents().add(new VertexIndexPair(graph.getDest(edge),index));
      }
    }
    for (    Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
      Collection<Edge<Map<Integer,StringBuilder>>> v2=graph.getOutEdges(vertex);
      for (      int index : vertex.getLabel().keySet()) {
        if (index > 0) {
          for (          Edge<Map<Integer,StringBuilder>> e2 : v2) {
            bucketsE.get(vertex.getLabel().get(index).toString()).getContents().add(new EdgeIndexPair(e2,index - 1));
          }
        }
      }
    }
  }
  for (  Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
    for (    int i : edge.getLabel().keySet()) {
      edge.getLabel().get(i).append(""String_Node_Str"");
    }
  }
  for (  Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
    for (    int i : vertex.getLabel().keySet()) {
      vertex.getLabel().get(i).append(""String_Node_Str"");
    }
  }
  for (int i=startLabel; i < labelCounter; i++) {
    Bucket<VertexIndexPair> bucketV=bucketsV.get(Integer.toString(i));
    for (    VertexIndexPair vp : bucketV.getContents()) {
      vp.getVertex().getLabel().get(vp.getIndex()).append(bucketV.getLabel());
      vp.getVertex().getLabel().get(vp.getIndex()).append(""String_Node_Str"");
    }
    Bucket<EdgeIndexPair> bucketE=bucketsE.get(Integer.toString(i));
    for (    EdgeIndexPair ep : bucketE.getContents()) {
      ep.getEdge().getLabel().get(ep.getIndex()).append(bucketE.getLabel());
      ep.getEdge().getLabel().get(ep.getIndex()).append(""String_Node_Str"");
    }
  }
}","private void relabelGraph2MultisetLabels(DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph){
  Map<String,Bucket<VertexIndexPair>> bucketsV=new HashMap<String,Bucket<VertexIndexPair>>();
  Map<String,Bucket<EdgeIndexPair>> bucketsE=new HashMap<String,Bucket<EdgeIndexPair>>();
  for (int i=startLabel; i < labelCounter; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<VertexIndexPair>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<EdgeIndexPair>(Integer.toString(i)));
  }
  if (reverse) {
    for (    Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
      for (      int index : edge.getLabel().keySet()) {
        bucketsV.get(edge.getLabel().get(index).toString()).getContents().add(new VertexIndexPair(graph.getSource(edge),index + 1));
      }
    }
    for (    Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
      Collection<Edge<Map<Integer,StringBuilder>>> v2=graph.getInEdges(vertex);
      for (      int index : vertex.getLabel().keySet()) {
        for (        Edge<Map<Integer,StringBuilder>> e2 : v2) {
          if (e2.getLabel().containsKey(index)) {
            bucketsE.get(vertex.getLabel().get(index).toString()).getContents().add(new EdgeIndexPair(e2,index));
          }
        }
      }
    }
  }
 else {
    for (    Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
      for (      int index : edge.getLabel().keySet()) {
        bucketsV.get(edge.getLabel().get(index).toString()).getContents().add(new VertexIndexPair(graph.getDest(edge),index));
      }
    }
    for (    Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
      Collection<Edge<Map<Integer,StringBuilder>>> v2=graph.getOutEdges(vertex);
      for (      int index : vertex.getLabel().keySet()) {
        if (index > 0) {
          for (          Edge<Map<Integer,StringBuilder>> e2 : v2) {
            bucketsE.get(vertex.getLabel().get(index).toString()).getContents().add(new EdgeIndexPair(e2,index - 1));
          }
        }
      }
    }
  }
  for (  Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
    for (    int i : edge.getLabel().keySet()) {
      edge.getLabel().get(i).append(""String_Node_Str"");
    }
  }
  for (  Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
    for (    int i : vertex.getLabel().keySet()) {
      vertex.getLabel().get(i).append(""String_Node_Str"");
    }
  }
  for (int i=startLabel; i < labelCounter; i++) {
    Bucket<VertexIndexPair> bucketV=bucketsV.get(Integer.toString(i));
    for (    VertexIndexPair vp : bucketV.getContents()) {
      vp.getVertex().getLabel().get(vp.getIndex()).append(bucketV.getLabel());
      vp.getVertex().getLabel().get(vp.getIndex()).append(""String_Node_Str"");
    }
    Bucket<EdgeIndexPair> bucketE=bucketsE.get(Integer.toString(i));
    for (    EdgeIndexPair ep : bucketE.getContents()) {
      ep.getEdge().getLabel().get(ep.getIndex()).append(bucketE.getLabel());
      ep.getEdge().getLabel().get(ep.getIndex()).append(""String_Node_Str"");
    }
  }
}"
51002,"@Override protected void setup(){
  directed=graph instanceof DGraph<?>;
  if (size.equals(""String_Node_Str""))   experiments.add(new HugeGraph<N>(graph));
 else   if (size.equals(""String_Node_Str""))   experiments.add(new LargeGraph<N>(graph));
 else   if (size.equals(""String_Node_Str""))   experiments.add(new SmallGraph<N>(graph));
 else   throw new RuntimeException(""String_Node_Str"" + size + ""String_Node_Str"");
  if (!size.equals(""String_Node_Str""))   experiments.add(new GraphDimension<N>(graph,1,6,""String_Node_Str""));
}","@Override protected void setup(){
  directed=graph instanceof DGraph<?>;
  if (size.equals(""String_Node_Str""))   experiments.add(new HugeGraph<N>(graph));
 else   if (size.equals(""String_Node_Str""))   experiments.add(new LargeGraph<N>(graph));
 else   if (size.equals(""String_Node_Str""))   experiments.add(new SmallGraph<N>(graph));
 else   throw new RuntimeException(""String_Node_Str"" + size + ""String_Node_Str"");
  experiments.add(new GraphDimension<N>(graph,1,6,""String_Node_Str""));
}"
51003,"public static void main(String[] args){
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.001,0.01,0.1,1,10,100,1000};
  int[] depths={1,2,3};
  int[] depths2={1,2,3};
  int[] iterations={0,2,4,6};
  createAffiliationPredictionDataSet(1);
  boolean inference=false;
  List<EvaluationFunction> evalFuncs=new ArrayList<EvaluationFunction>();
  evalFuncs.add(new Accuracy());
  evalFuncs.add(new F1());
  List<Double> targets=EvaluationUtils.createTarget(labels);
  LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
  linParms.setEvalFunction(new Accuracy());
  linParms.setDoCrossValidation(true);
  linParms.setSplitFraction((float)0.8);
  linParms.setEps(0.00001);
  Map<Double,Double> counts=EvaluationUtils.computeClassCounts(targets);
  int[] wLabels=new int[counts.size()];
  double[] weights=new double[counts.size()];
  for (  double label : counts.keySet()) {
    wLabels[(int)label - 1]=(int)label;
    weights[(int)label - 1]=1 / counts.get(label);
  }
  linParms.setWeightLabels(wLabels);
  linParms.setWeights(weights);
  ResultsTable resTable=new ResultsTable();
  for (  int depth : depths) {
    resTable.newRow(""String_Node_Str"");
    for (    int it : iterations) {
      RDFLinearKernelExperiment exp=new RDFLinearKernelExperiment(new RDFWLSubTreeKernel(it,depth,inference,true),seeds,linParms,dataset,instances,targets,blackList,evalFuncs);
      System.out.println(""String_Node_Str"" + depth + ""String_Node_Str""+ it);
      exp.setDoCV(true);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  for (  int depth : depths2) {
    resTable.newRow(""String_Node_Str"");
    RDFLinearKernelExperiment exp=new RDFLinearKernelExperiment(new RDFIntersectionTreeEdgePathKernel(depth,inference,true),seeds,linParms,dataset,instances,targets,blackList,evalFuncs);
    System.out.println(""String_Node_Str"" + depth);
    exp.setDoCV(true);
    exp.run();
    for (    Result res : exp.getResults()) {
      resTable.addResult(res);
    }
  }
  for (  int depth : depths2) {
    resTable.newRow(""String_Node_Str"");
    RDFLinearKernelExperiment exp=new RDFLinearKernelExperiment(new RDFIntersectionTreeEdgeVertexPathKernel(depth,inference,true),seeds,linParms,dataset,instances,targets,blackList,evalFuncs);
    System.out.println(""String_Node_Str"" + depth);
    exp.setDoCV(true);
    exp.run();
    for (    Result res : exp.getResults()) {
      resTable.addResult(res);
    }
  }
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
}","public static void main(String[] args){
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.001,0.01,0.1,1,10,100,1000};
  int[] depths={1,2,3};
  int[] depths2={1,2,3};
  int[] iterations={0,2,4,6};
  createAffiliationPredictionDataSet(1);
  boolean inference=false;
  List<EvaluationFunction> evalFuncs=new ArrayList<EvaluationFunction>();
  evalFuncs.add(new Accuracy());
  evalFuncs.add(new F1());
  List<Double> targets=EvaluationUtils.createTarget(labels);
  LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
  linParms.setEvalFunction(new Accuracy());
  linParms.setDoCrossValidation(true);
  linParms.setSplitFraction((float)0.8);
  linParms.setEps(0.1);
  Map<Double,Double> counts=EvaluationUtils.computeClassCounts(targets);
  int[] wLabels=new int[counts.size()];
  double[] weights=new double[counts.size()];
  for (  double label : counts.keySet()) {
    wLabels[(int)label - 1]=(int)label;
    weights[(int)label - 1]=1 / counts.get(label);
  }
  linParms.setWeightLabels(wLabels);
  linParms.setWeights(weights);
  ResultsTable resTable=new ResultsTable();
  for (  int depth : depths) {
    resTable.newRow(""String_Node_Str"");
    for (    int it : iterations) {
      RDFLinearKernelExperiment exp=new RDFLinearKernelExperiment(new RDFWLSubTreeKernel(it,depth,inference,true),seeds,linParms,dataset,instances,targets,blackList,evalFuncs);
      System.out.println(""String_Node_Str"" + depth + ""String_Node_Str""+ it);
      exp.setDoCV(true);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  for (  int depth : depths2) {
    resTable.newRow(""String_Node_Str"");
    RDFLinearKernelExperiment exp=new RDFLinearKernelExperiment(new RDFIntersectionTreeEdgePathKernel(depth,inference,true),seeds,linParms,dataset,instances,targets,blackList,evalFuncs);
    System.out.println(""String_Node_Str"" + depth);
    exp.setDoCV(true);
    exp.run();
    for (    Result res : exp.getResults()) {
      resTable.addResult(res);
    }
  }
  for (  int depth : depths2) {
    resTable.newRow(""String_Node_Str"");
    RDFLinearKernelExperiment exp=new RDFLinearKernelExperiment(new RDFIntersectionTreeEdgeVertexPathKernel(depth,inference,true),seeds,linParms,dataset,instances,targets,blackList,evalFuncs);
    System.out.println(""String_Node_Str"" + depth);
    exp.setDoCV(true);
    exp.run();
    for (    Result res : exp.getResults()) {
      resTable.addResult(res);
    }
  }
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
}"
51004,"public double[][] compute(List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> trainGraphs,List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> testGraphs){
  List<DirectedGraph<Vertex<String>,Edge<String>>> graphs=copyGraphs(testGraphs);
  graphs.addAll(copyGraphs(trainGraphs));
  SparseVector[] featureVectors=new SparseVector[graphs.size()];
  Map<String,String> labelDict=new HashMap<String,String>();
  double[][] kernel=KernelUtils.initMatrix(testGraphs.size(),trainGraphs.size());
  double[] ss=new double[testGraphs.size() + trainGraphs.size()];
  int startLabel=1;
  int currentLabel=1;
  for (  DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph : trainGraphs) {
    graph.getRootVertex().setLabel(KernelUtils.ROOTID);
  }
  for (  DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph : testGraphs) {
    graph.getRootVertex().setLabel(KernelUtils.ROOTID);
  }
  currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
  if (!skipFirst) {
    computeFeatureVectors(graphs,featureVectors,startLabel,currentLabel);
    computeKernelMatrix(trainGraphs,testGraphs,featureVectors,kernel,ss,1);
  }
  for (int i=0; i < this.iterations; i++) {
    relabelGraphs2MultisetLabels(graphs,startLabel,currentLabel);
    startLabel=currentLabel;
    currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
    computeFeatureVectors(graphs,featureVectors,startLabel,currentLabel);
    computeKernelMatrix(trainGraphs,testGraphs,featureVectors,kernel,ss,i + 2);
  }
  if (normalize) {
    double[] ssTest=Arrays.copyOfRange(ss,0,testGraphs.size());
    double[] ssTrain=Arrays.copyOfRange(ss,testGraphs.size(),ss.length);
    return KernelUtils.normalize(kernel,ssTrain,ssTest);
  }
 else {
    return kernel;
  }
}","public double[][] compute(List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> trainGraphs,List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> testGraphs){
  List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs=copyGraphs(testGraphs);
  graphs.addAll(copyGraphs(trainGraphs));
  SparseVector[] featureVectors=new SparseVector[graphs.size()];
  for (int i=0; i < featureVectors.length; i++) {
    featureVectors[i]=new SparseVector();
  }
  Map<String,String> labelDict=new HashMap<String,String>();
  double[][] kernel=KernelUtils.initMatrix(testGraphs.size(),trainGraphs.size());
  double[] ss=new double[testGraphs.size() + trainGraphs.size()];
  int startLabel=1;
  int currentLabel=1;
  for (  DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    graph.getRootVertex().setLabel(new StringBuffer(KernelUtils.ROOTID));
  }
  currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
  computeFVs(graphs,featureVectors,Math.sqrt(1.0 / ((double)(iterations + 1))));
  for (int i=0; i < this.iterations; i++) {
    relabelGraphs2MultisetLabels(graphs,startLabel,currentLabel);
    startLabel=currentLabel;
    currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
    computeFVs(graphs,featureVectors,Math.sqrt((2.0 + i) / ((double)(iterations + 1))));
  }
  computeKernelMatrix(trainGraphs,testGraphs,featureVectors,kernel,ss);
  if (normalize) {
    double[] ssTest=Arrays.copyOfRange(ss,0,testGraphs.size());
    double[] ssTrain=Arrays.copyOfRange(ss,testGraphs.size(),ss.length);
    return KernelUtils.normalize(kernel,ssTrain,ssTest);
  }
 else {
    return kernel;
  }
}"
51005,"/** 
 * Second step in the WL algorithm. We compress the long labels into new short labels
 * @param graphs
 * @param labelDict
 * @param currentLabel
 * @return
 */
private int compressGraphLabels(List<DirectedGraph<Vertex<String>,Edge<String>>> graphs,Map<String,String> labelDict,int currentLabel){
  String label;
  for (  DirectedGraph<Vertex<String>,Edge<String>> graph : graphs) {
    for (    Edge<String> edge : graph.getEdges()) {
      label=labelDict.get(edge.getLabel());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(edge.getLabel(),label);
      }
      edge.setLabel(label);
    }
    for (    Vertex<String> vertex : graph.getVertices()) {
      label=labelDict.get(vertex.getLabel());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(vertex.getLabel(),label);
      }
      vertex.setLabel(label);
    }
  }
  return currentLabel;
}","/** 
 * Second step in the WL algorithm. We compress the long labels into new short labels
 * @param graphs
 * @param labelDict
 * @param currentLabel
 * @return
 */
private int compressGraphLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,Map<String,String> labelDict,int currentLabel){
  String label;
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      label=labelDict.get(edge.getLabel());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(edge.getLabel().toString(),label);
      }
      edge.setLabel(new StringBuffer(label));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      label=labelDict.get(vertex.getLabel());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(vertex.getLabel().toString(),label);
      }
      vertex.setLabel(new StringBuffer(label));
    }
  }
  return currentLabel;
}"
51006,"private void computeKernelMatrix(List<? extends DirectedGraph<Vertex<String>,Edge<String>>> trainGraphs,List<? extends DirectedGraph<Vertex<String>,Edge<String>>> testGraphs,SparseVector[] featureVectors,double[][] kernel,double[] ss,int iteration){
  for (int i=0; i < testGraphs.size(); i++) {
    for (int j=0; j < trainGraphs.size(); j++) {
      kernel[i][j]+=featureVectors[i].dot(featureVectors[j + testGraphs.size()]) * (((double)iteration) / ((double)this.iterations + 1));
    }
  }
  for (int i=0; i < testGraphs.size() + trainGraphs.size(); i++) {
    ss[i]+=featureVectors[i].dot(featureVectors[i]) * (((double)iteration) / ((double)this.iterations + 1));
  }
}","private void computeKernelMatrix(List<? extends DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> trainGraphs,List<? extends DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> testGraphs,SparseVector[] featureVectors,double[][] kernel,double[] ss){
  for (int i=0; i < testGraphs.size(); i++) {
    for (int j=0; j < trainGraphs.size(); j++) {
      kernel[i][j]+=featureVectors[i].dot(featureVectors[j + testGraphs.size()]);
    }
  }
  for (int i=0; i < testGraphs.size() + trainGraphs.size(); i++) {
    ss[i]+=featureVectors[i].dot(featureVectors[i]);
  }
}"
51007,"private List<DirectedGraph<Vertex<String>,Edge<String>>> copyGraphs(List<? extends DirectedGraph<Vertex<String>,Edge<String>>> oldGraphs){
  List<DirectedGraph<Vertex<String>,Edge<String>>> graphs=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  for (  DirectedGraph<Vertex<String>,Edge<String>> graph : oldGraphs) {
    graphs.add(GraphFactory.copyDirectedGraph(graph));
  }
  return graphs;
}","private List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> copyGraphs(List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> oldGraphs){
  List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs=new ArrayList<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>>();
  for (  DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph : oldGraphs) {
    DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> newGraph=new DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>();
    String rootLabel=graph.getRootVertex().getLabel();
    Map<Vertex<String>,Vertex<StringBuffer>> nodes=new HashMap<Vertex<String>,Vertex<StringBuffer>>();
    for (    Vertex<String> vertex : graph.getVertices()) {
      Vertex<StringBuffer> newV=new Vertex<StringBuffer>(new StringBuffer(vertex.getLabel()));
      nodes.put(vertex,newV);
      if (vertex.getLabel().equals(rootLabel)) {
        newGraph.setRootVertex(newV);
      }
    }
    for (    Edge<String> edge : graph.getEdges()) {
      newGraph.addEdge(new Edge<StringBuffer>(new StringBuffer(edge.getLabel())),nodes.get(graph.getSource(edge)),nodes.get(graph.getDest(edge)),EdgeType.DIRECTED);
    }
    graphs.add(newGraph);
  }
  return graphs;
}"
51008,"/** 
 * First step in the Weisfeiler-Lehman algorithm, applied to directedgraphs with edge labels.
 * @param graphs
 * @param startLabel
 * @param currentLabel
 */
private void relabelGraphs2MultisetLabels(List<DirectedGraph<Vertex<String>,Edge<String>>> graphs,int startLabel,int currentLabel){
  Map<String,Bucket<Vertex<String>>> bucketsV=new HashMap<String,Bucket<Vertex<String>>>();
  Map<String,Bucket<Edge<String>>> bucketsE=new HashMap<String,Bucket<Edge<String>>>();
  for (int i=startLabel; i < currentLabel; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<Vertex<String>>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<Edge<String>>(Integer.toString(i)));
  }
  for (  DirectedGraph<Vertex<String>,Edge<String>> graph : graphs) {
    for (    Edge<String> edge : graph.getEdges()) {
      bucketsV.get(edge.getLabel()).getContents().add(graph.getDest(edge));
    }
    for (    Vertex<String> vertex : graph.getVertices()) {
      Collection<Edge<String>> v2=graph.getOutEdges(vertex);
      bucketsE.get(vertex.getLabel()).getContents().addAll(v2);
    }
  }
  for (  DirectedGraph<Vertex<String>,Edge<String>> graph : graphs) {
    for (    Edge<String> edge : graph.getEdges()) {
      edge.setLabel(edge.getLabel() + ""String_Node_Str"");
    }
    for (    Vertex<String> vertex : graph.getVertices()) {
      vertex.setLabel(vertex.getLabel() + ""String_Node_Str"");
    }
  }
  for (int i=startLabel; i < currentLabel; i++) {
    Bucket<Vertex<String>> bucketV=bucketsV.get(Integer.toString(i));
    for (    Vertex<String> vertex : bucketV.getContents()) {
      vertex.setLabel(vertex.getLabel() + bucketV.getLabel());
    }
    Bucket<Edge<String>> bucketE=bucketsE.get(Integer.toString(i));
    for (    Edge<String> edge : bucketE.getContents()) {
      edge.setLabel(edge.getLabel() + bucketE.getLabel());
    }
  }
}","/** 
 * First step in the Weisfeiler-Lehman algorithm, applied to directedgraphs with edge labels.
 * @param graphs
 * @param startLabel
 * @param currentLabel
 */
private void relabelGraphs2MultisetLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,int startLabel,int currentLabel){
  Map<String,Bucket<Vertex<StringBuffer>>> bucketsV=new HashMap<String,Bucket<Vertex<StringBuffer>>>();
  Map<String,Bucket<Edge<StringBuffer>>> bucketsE=new HashMap<String,Bucket<Edge<StringBuffer>>>();
  for (int i=startLabel; i < currentLabel; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<Vertex<StringBuffer>>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<Edge<StringBuffer>>(Integer.toString(i)));
  }
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      bucketsV.get(edge.getLabel()).getContents().add(graph.getDest(edge));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      Collection<Edge<StringBuffer>> v2=graph.getOutEdges(vertex);
      bucketsE.get(vertex.getLabel()).getContents().addAll(v2);
    }
  }
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      edge.setLabel(edge.getLabel().append(""String_Node_Str""));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      vertex.setLabel(vertex.getLabel().append(""String_Node_Str""));
    }
  }
  for (int i=startLabel; i < currentLabel; i++) {
    Bucket<Vertex<StringBuffer>> bucketV=bucketsV.get(Integer.toString(i));
    for (    Vertex<StringBuffer> vertex : bucketV.getContents()) {
      vertex.getLabel().append(bucketV.getLabel());
    }
    Bucket<Edge<StringBuffer>> bucketE=bucketsE.get(Integer.toString(i));
    for (    Edge<StringBuffer> edge : bucketE.getContents()) {
      edge.getLabel().append(bucketE.getLabel());
    }
  }
}"
51009,"public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.001,0.01,0.1,1,10,100,1000};
  PropertyPredictionDataSet dataset;
  PropertyPredictionExperiment exp;
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  ResultsTable resultsWLadd=new ResultsTable();
  ResultsTable resultsSTFadd=new ResultsTable();
  ResultsTable resultsSTPadd=new ResultsTable();
  ResultsTable resultsIGWadd=new ResultsTable();
  ResultsTable resultsIGPadd=new ResultsTable();
  List<PropertyPredictionDataSetParameters> dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,true));
  try {
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      dataset.removeVertexAndEdgeLabels();
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          WLSubTreeKernel kernel=new WLSubTreeKernel(i,true,false);
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),kernel,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGW.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
    }
    dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",3,false,false));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",3,false,true));
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      dataset.removeVertexAndEdgeLabels();
      resultsWLadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          WLSubTreeKernel kernel=new WLSubTreeKernel(i,true,false);
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),kernel,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWLadd.addResult(exp.getResults().getAccuracy());
          resultsWLadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTFadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTFadd.addResult(exp.getResults().getAccuracy());
          resultsSTFadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTPadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTPadd.addResult(exp.getResults().getAccuracy());
          resultsSTPadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGPadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGPadd.addResult(exp.getResults().getAccuracy());
          resultsIGPadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGWadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGWadd.addResult(exp.getResults().getAccuracy());
          resultsIGWadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    int fileId=(int)(Math.random() * 100000000);
    File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    PrintWriter fileOut=new PrintWriter(new FileOutputStream(file));
    List<Result> bestResults=new ArrayList<Result>();
    bestResults=resultsWL.getBestResults(bestResults);
    bestResults=resultsSTF.getBestResults(bestResults);
    bestResults=resultsSTP.getBestResults(bestResults);
    bestResults=resultsIGW.getBestResults(bestResults);
    bestResults=resultsIGP.getBestResults(bestResults);
    bestResults=resultsWLadd.getBestResults(bestResults);
    bestResults=resultsSTFadd.getBestResults(bestResults);
    bestResults=resultsSTPadd.getBestResults(bestResults);
    bestResults=resultsIGWadd.getBestResults(bestResults);
    bestResults=resultsIGPadd.getBestResults(bestResults);
    resultsWL.addCompResults(bestResults);
    resultsSTF.addCompResults(bestResults);
    resultsSTP.addCompResults(bestResults);
    resultsIGW.addCompResults(bestResults);
    resultsIGP.addCompResults(bestResults);
    resultsWLadd.addCompResults(bestResults);
    resultsSTFadd.addCompResults(bestResults);
    resultsSTPadd.addCompResults(bestResults);
    resultsIGWadd.addCompResults(bestResults);
    resultsIGPadd.addCompResults(bestResults);
    fileOut.println(resultsWL);
    fileOut.println(resultsSTF);
    fileOut.println(resultsSTP);
    fileOut.println(resultsIGW);
    fileOut.println(resultsIGP);
    fileOut.println(resultsWLadd);
    fileOut.println(resultsSTFadd);
    fileOut.println(resultsSTPadd);
    fileOut.println(resultsIGWadd);
    fileOut.println(resultsIGPadd);
    fileOut.println(resultsWL.allScoresToString());
    fileOut.println(resultsSTF.allScoresToString());
    fileOut.println(resultsSTP.allScoresToString());
    fileOut.println(resultsIGW.allScoresToString());
    fileOut.println(resultsIGP.allScoresToString());
    fileOut.println(resultsWLadd.allScoresToString());
    fileOut.println(resultsSTFadd.allScoresToString());
    fileOut.println(resultsSTPadd.allScoresToString());
    fileOut.println(resultsIGWadd.allScoresToString());
    fileOut.println(resultsIGPadd.allScoresToString());
    fileOut.close();
    System.out.println(resultsWL);
    System.out.println(resultsSTF);
    System.out.println(resultsSTP);
    System.out.println(resultsIGW);
    System.out.println(resultsIGP);
    System.out.println(resultsWLadd);
    System.out.println(resultsSTFadd);
    System.out.println(resultsSTPadd);
    System.out.println(resultsIGWadd);
    System.out.println(resultsIGPadd);
    System.out.println(resultsWL.allScoresToString());
    System.out.println(resultsSTF.allScoresToString());
    System.out.println(resultsSTP.allScoresToString());
    System.out.println(resultsIGW.allScoresToString());
    System.out.println(resultsIGP.allScoresToString());
    System.out.println(resultsWLadd.allScoresToString());
    System.out.println(resultsSTFadd.allScoresToString());
    System.out.println(resultsSTPadd.allScoresToString());
    System.out.println(resultsIGWadd.allScoresToString());
    System.out.println(resultsIGPadd.allScoresToString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.001,0.01,0.1,1,10,100,1000};
  PropertyPredictionDataSet dataset;
  PropertyPredictionExperiment exp;
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  ResultsTable resultsWLadd=new ResultsTable();
  ResultsTable resultsSTFadd=new ResultsTable();
  ResultsTable resultsSTPadd=new ResultsTable();
  ResultsTable resultsIGWadd=new ResultsTable();
  ResultsTable resultsIGPadd=new ResultsTable();
  List<PropertyPredictionDataSetParameters> dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,true));
  try {
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      dataset.removeVertexAndEdgeLabels();
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          WLSubTreeKernel kernel=new WLSubTreeKernel(i,true);
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),kernel,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGW.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
    }
    dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",3,false,false));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
    dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",3,false,true));
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      dataset.removeVertexAndEdgeLabels();
      resultsWLadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          WLSubTreeKernel kernel=new WLSubTreeKernel(i,true);
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),kernel,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWLadd.addResult(exp.getResults().getAccuracy());
          resultsWLadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTFadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTFadd.addResult(exp.getResults().getAccuracy());
          resultsSTFadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsSTPadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTPadd.addResult(exp.getResults().getAccuracy());
          resultsSTPadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGPadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGPadd.addResult(exp.getResults().getAccuracy());
          resultsIGPadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
      resultsIGWadd.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGWadd.addResult(exp.getResults().getAccuracy());
          resultsIGWadd.addResult(exp.getResults().getF1());
          System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ dataset.getLabel());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    int fileId=(int)(Math.random() * 100000000);
    File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    PrintWriter fileOut=new PrintWriter(new FileOutputStream(file));
    List<Result> bestResults=new ArrayList<Result>();
    bestResults=resultsWL.getBestResults(bestResults);
    bestResults=resultsSTF.getBestResults(bestResults);
    bestResults=resultsSTP.getBestResults(bestResults);
    bestResults=resultsIGW.getBestResults(bestResults);
    bestResults=resultsIGP.getBestResults(bestResults);
    bestResults=resultsWLadd.getBestResults(bestResults);
    bestResults=resultsSTFadd.getBestResults(bestResults);
    bestResults=resultsSTPadd.getBestResults(bestResults);
    bestResults=resultsIGWadd.getBestResults(bestResults);
    bestResults=resultsIGPadd.getBestResults(bestResults);
    resultsWL.addCompResults(bestResults);
    resultsSTF.addCompResults(bestResults);
    resultsSTP.addCompResults(bestResults);
    resultsIGW.addCompResults(bestResults);
    resultsIGP.addCompResults(bestResults);
    resultsWLadd.addCompResults(bestResults);
    resultsSTFadd.addCompResults(bestResults);
    resultsSTPadd.addCompResults(bestResults);
    resultsIGWadd.addCompResults(bestResults);
    resultsIGPadd.addCompResults(bestResults);
    fileOut.println(resultsWL);
    fileOut.println(resultsSTF);
    fileOut.println(resultsSTP);
    fileOut.println(resultsIGW);
    fileOut.println(resultsIGP);
    fileOut.println(resultsWLadd);
    fileOut.println(resultsSTFadd);
    fileOut.println(resultsSTPadd);
    fileOut.println(resultsIGWadd);
    fileOut.println(resultsIGPadd);
    fileOut.println(resultsWL.allScoresToString());
    fileOut.println(resultsSTF.allScoresToString());
    fileOut.println(resultsSTP.allScoresToString());
    fileOut.println(resultsIGW.allScoresToString());
    fileOut.println(resultsIGP.allScoresToString());
    fileOut.println(resultsWLadd.allScoresToString());
    fileOut.println(resultsSTFadd.allScoresToString());
    fileOut.println(resultsSTPadd.allScoresToString());
    fileOut.println(resultsIGWadd.allScoresToString());
    fileOut.println(resultsIGPadd.allScoresToString());
    fileOut.close();
    System.out.println(resultsWL);
    System.out.println(resultsSTF);
    System.out.println(resultsSTP);
    System.out.println(resultsIGW);
    System.out.println(resultsIGP);
    System.out.println(resultsWLadd);
    System.out.println(resultsSTFadd);
    System.out.println(resultsSTPadd);
    System.out.println(resultsIGWadd);
    System.out.println(resultsIGPadd);
    System.out.println(resultsWL.allScoresToString());
    System.out.println(resultsSTF.allScoresToString());
    System.out.println(resultsSTP.allScoresToString());
    System.out.println(resultsIGW.allScoresToString());
    System.out.println(resultsIGP.allScoresToString());
    System.out.println(resultsWLadd.allScoresToString());
    System.out.println(resultsSTFadd.allScoresToString());
    System.out.println(resultsSTPadd.allScoresToString());
    System.out.println(resultsIGWadd.allScoresToString());
    System.out.println(resultsIGPadd.allScoresToString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
51010,"/** 
 * First step in the Weisfeiler-Lehman algorithm, applied to directedgraphs with edge labels.
 * @param graphs
 * @param startLabel
 * @param currentLabel
 */
private void relabelGraphs2MultisetLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,int startLabel,int currentLabel){
  Map<String,Bucket<Vertex<StringBuffer>>> bucketsV=new HashMap<String,Bucket<Vertex<StringBuffer>>>();
  Map<String,Bucket<Edge<StringBuffer>>> bucketsE=new HashMap<String,Bucket<Edge<StringBuffer>>>();
  for (int i=startLabel; i < currentLabel; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<Vertex<StringBuffer>>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<Edge<StringBuffer>>(Integer.toString(i)));
  }
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      bucketsV.get(edge.getLabel()).getContents().add(graph.getDest(edge));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      Collection<Edge<StringBuffer>> v2=graph.getOutEdges(vertex);
      bucketsE.get(vertex.getLabel()).getContents().addAll(v2);
    }
  }
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      edge.setLabel(edge.getLabel().append(""String_Node_Str""));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      vertex.setLabel(vertex.getLabel().append(""String_Node_Str""));
    }
  }
  for (int i=startLabel; i < currentLabel; i++) {
    Bucket<Vertex<StringBuffer>> bucketV=bucketsV.get(Integer.toString(i));
    for (    Vertex<StringBuffer> vertex : bucketV.getContents()) {
      vertex.getLabel().append(bucketV.getLabel());
    }
    Bucket<Edge<StringBuffer>> bucketE=bucketsE.get(Integer.toString(i));
    for (    Edge<StringBuffer> edge : bucketE.getContents()) {
      edge.getLabel().append(bucketE.getLabel());
    }
  }
}","/** 
 * First step in the Weisfeiler-Lehman algorithm, applied to directedgraphs with edge labels.
 * @param graphs
 * @param startLabel
 * @param currentLabel
 */
private void relabelGraphs2MultisetLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,int startLabel,int currentLabel){
  Map<String,Bucket<Vertex<StringBuffer>>> bucketsV=new HashMap<String,Bucket<Vertex<StringBuffer>>>();
  Map<String,Bucket<Edge<StringBuffer>>> bucketsE=new HashMap<String,Bucket<Edge<StringBuffer>>>();
  for (int i=startLabel; i < currentLabel; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<Vertex<StringBuffer>>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<Edge<StringBuffer>>(Integer.toString(i)));
  }
  for (  DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      bucketsV.get(edge.getLabel().toString()).getContents().add(graph.getDest(edge));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      Collection<Edge<StringBuffer>> v2=graph.getOutEdges(vertex);
      bucketsE.get(vertex.getLabel().toString()).getContents().addAll(v2);
    }
  }
  for (  DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      edge.setLabel(edge.getLabel().append(""String_Node_Str""));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      vertex.setLabel(vertex.getLabel().append(""String_Node_Str""));
    }
  }
  for (int i=startLabel; i < currentLabel; i++) {
    Bucket<Vertex<StringBuffer>> bucketV=bucketsV.get(Integer.toString(i));
    for (    Vertex<StringBuffer> vertex : bucketV.getContents()) {
      vertex.getLabel().append(bucketV.getLabel());
    }
    Bucket<Edge<StringBuffer>> bucketE=bucketsE.get(Integer.toString(i));
    for (    Edge<StringBuffer> edge : bucketE.getContents()) {
      edge.getLabel().append(bucketE.getLabel());
    }
  }
}"
51011,"/** 
 * @param args
 */
public static void main(String[] args){
  long[] seeds={11,31,51,71,91};
  double[] cs={1,10,100,1000,10000};
  int[] depths={1,2,3};
  int[] iterations={0,2,4,6};
  dataset=new RDFFileDataSet(""String_Node_Str"",RDFFormat.NTRIPLES);
  createGeoDataSet(10,0.1,""String_Node_Str"");
  List<Double> target=EvaluationUtils.createTarget(labels);
  List<EvaluationFunction> evalFuncs=new ArrayList<EvaluationFunction>();
  evalFuncs.add(new Accuracy());
  evalFuncs.add(new F1());
  ResultsTable resTable=new ResultsTable();
  resTable.setManWU(0.05);
  boolean inference=false;
  for (  int i : depths) {
    for (    int it : iterations) {
      resTable.newRow(""String_Node_Str"");
      LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
      KernelExperiment<RDFFeatureVectorKernel> exp=new RDFLinearKernelExperiment(new RDFWLSubTreeKernel(it,i,inference,true),seeds,linParms,dataset,instances,target,blackList,evalFuncs);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ it);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  saveResults(resTable,""String_Node_Str"");
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
  saveResults(resTable.toString(),""String_Node_Str"");
}","/** 
 * @param args
 */
public static void main(String[] args){
  long[] seeds={11,31,51,71,91};
  double[] cs={1,10,100,1000,10000};
  int[] depths={1,2,3};
  int[] iterations={0,2,4,6};
  dataset=new RDFFileDataSet(""String_Node_Str"",RDFFormat.NTRIPLES);
  createGeoDataSet(10,0.1,1,""String_Node_Str"");
  List<Double> target=EvaluationUtils.createTarget(labels);
  List<EvaluationFunction> evalFuncs=new ArrayList<EvaluationFunction>();
  evalFuncs.add(new Accuracy());
  evalFuncs.add(new F1());
  ResultsTable resTable=new ResultsTable();
  resTable.setManWU(0.05);
  boolean inference=false;
  for (  int i : depths) {
    for (    int it : iterations) {
      resTable.newRow(""String_Node_Str"");
      LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
      KernelExperiment<RDFFeatureVectorKernel> exp=new RDFLinearKernelExperiment(new RDFWLSubTreeKernel(it,i,inference,true),seeds,linParms,dataset,instances,target,blackList,evalFuncs);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ it);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  saveResults(resTable,""String_Node_Str"");
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
  saveResults(resTable.toString(),""String_Node_Str"");
}"
51012,"private static void createGeoDataSet(int minSize,double frac,String property){
  List<Statement> stmts=dataset.getStatementsFromStrings(null,""String_Node_Str"",""String_Node_Str"");
  instances=new ArrayList<Resource>();
  labels=new ArrayList<Value>();
  blackList=new ArrayList<Statement>();
  for (  Statement stmt : stmts) {
    List<Statement> stmts2=dataset.getStatementsFromStrings(stmt.getSubject().toString(),property,null);
    if (stmts2.size() > 1) {
      System.out.println(""String_Node_Str"");
    }
    for (    Statement stmt2 : stmts2) {
      if (Math.random() < frac) {
        instances.add(stmt2.getSubject());
        labels.add(stmt2.getObject());
      }
    }
  }
  removeSmallClasses(minSize);
  createBlackList();
  Map<Value,Integer> labelMap=new HashMap<Value,Integer>();
  System.out.println(LibSVM.computeClassCounts(LibSVM.createTargets(labels,labelMap)));
}","protected static void createGeoDataSet(int minSize,double frac,long seed,String property){
  List<Statement> stmts=dataset.getStatementsFromStrings(null,""String_Node_Str"",""String_Node_Str"");
  instances=new ArrayList<Resource>();
  labels=new ArrayList<Value>();
  blackList=new ArrayList<Statement>();
  Random rand=new Random(seed);
  for (  Statement stmt : stmts) {
    List<Statement> stmts2=dataset.getStatementsFromStrings(stmt.getSubject().toString(),property,null);
    if (stmts2.size() > 1) {
      System.out.println(""String_Node_Str"");
    }
    for (    Statement stmt2 : stmts2) {
      if (rand.nextDouble() < frac) {
        instances.add(stmt2.getSubject());
        labels.add(stmt2.getObject());
      }
    }
  }
  removeSmallClasses(minSize);
  createBlackList();
  Map<Value,Integer> labelMap=new HashMap<Value,Integer>();
  System.out.println(LibSVM.computeClassCounts(LibSVM.createTargets(labels,labelMap)));
}"
51013,"public static void main(String[] args){
  String dataDir=""String_Node_Str"";
  dataset=new RDFFileDataSet(dataDir,RDFFormat.NTRIPLES);
  long seed=11;
  long tic, toc;
  double[] fractions={0.1,0.15,0.2,0.25,0.3};
  double[] fractionsSlow={0.1,0.15,0.2};
  ResultsTable resTable=new ResultsTable();
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFFeatureVectorKernel k=new RDFWLSubTreeKernel(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.computeFeatureVectors(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFGraphKernel k=new RDFWLSubTreeKernel(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFFeatureVectorKernel k=new RDFWLSubTreeKernelString(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.computeFeatureVectors(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFGraphKernel k=new RDFWLSubTreeKernelString(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFGraphKernel k=new RDFIntersectionSubTreeKernel(1,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractionsSlow) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    tic=System.currentTimeMillis();
    PropertyPredictionDataSet ds=DataSetFactory.createPropertyPredictionDataSet(new GeneralPredictionDataSetParameters(dataset,blackLists,instances,3,false,true));
    toc=System.currentTimeMillis();
    double dsComp=toc - tic;
    FeatureVectorKernel k=new WLSubTreeKernel(6,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.computeFeatureVectors(ds.getGraphs());
    toc=System.currentTimeMillis();
    double[] comp={(toc - tic) + dsComp};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractionsSlow) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    tic=System.currentTimeMillis();
    PropertyPredictionDataSet ds=DataSetFactory.createPropertyPredictionDataSet(new GeneralPredictionDataSetParameters(dataset,blackLists,instances,3,false,true));
    toc=System.currentTimeMillis();
    double dsComp=toc - tic;
    GraphKernel k=new WLSubTreeKernel(6,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(ds.getGraphs());
    toc=System.currentTimeMillis();
    double[] comp={(toc - tic) + dsComp};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
}","public static void main(String[] args){
  String dataDir=""String_Node_Str"";
  dataset=new RDFFileDataSet(dataDir,RDFFormat.NTRIPLES);
  long seed=11;
  long tic, toc;
  double[] fractions={0.01,0.05,0.1,0.15,0.2};
  double[] fractionsSlow={0.01,0.05,0.1,0.15,0.2};
  ResultsTable resTable=new ResultsTable();
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFFeatureVectorKernel k=new RDFWLSubTreeKernel(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.computeFeatureVectors(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFGraphKernel k=new RDFWLSubTreeKernel(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFFeatureVectorKernel k=new RDFWLSubTreeKernelString(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.computeFeatureVectors(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFGraphKernel k=new RDFWLSubTreeKernelString(6,3,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractions) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    RDFGraphKernel k=new RDFIntersectionSubTreeKernel(3,1,false,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(dataset,instances,blackList);
    toc=System.currentTimeMillis();
    double[] comp={toc - tic};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractionsSlow) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    tic=System.currentTimeMillis();
    PropertyPredictionDataSet ds=DataSetFactory.createPropertyPredictionDataSet(new GeneralPredictionDataSetParameters(dataset,blackLists,instances,3,false,true));
    toc=System.currentTimeMillis();
    double dsComp=toc - tic;
    FeatureVectorKernel k=new WLSubTreeKernel(6,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.computeFeatureVectors(ds.getGraphs());
    toc=System.currentTimeMillis();
    double[] comp={(toc - tic) + dsComp};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
  resTable.newRow(""String_Node_Str"");
  for (  double frac : fractionsSlow) {
    createGeoDataSet((int)(1000 * frac),frac,seed,""String_Node_Str"");
    tic=System.currentTimeMillis();
    PropertyPredictionDataSet ds=DataSetFactory.createPropertyPredictionDataSet(new GeneralPredictionDataSetParameters(dataset,blackLists,instances,3,false,true));
    toc=System.currentTimeMillis();
    double dsComp=toc - tic;
    GraphKernel k=new WLSubTreeKernel(6,true);
    System.out.println(""String_Node_Str"" + frac);
    tic=System.currentTimeMillis();
    k.compute(ds.getGraphs());
    toc=System.currentTimeMillis();
    double[] comp={(toc - tic) + dsComp};
    Result res=new Result(comp,""String_Node_Str"");
    resTable.addResult(res);
  }
  System.out.println(resTable);
}"
51014,"private void compressGraphLabels(DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph){
  String label;
  for (  Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
    for (    int i : edge.getLabel().keySet()) {
      label=labelMap.get(edge.getLabel().get(i));
      if (label == null) {
        label=Integer.toString(labelCounter);
        labelCounter++;
        labelMap.put(edge.getLabel().get(i).toString(),label);
      }
      edge.getLabel().put(i,new StringBuilder(label));
    }
  }
  for (  Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
    for (    int i : vertex.getLabel().keySet()) {
      label=labelMap.get(vertex.getLabel().get(i));
      if (label == null) {
        label=Integer.toString(labelCounter);
        labelCounter++;
        labelMap.put(vertex.getLabel().get(i).toString(),label);
      }
      vertex.getLabel().put(i,new StringBuilder(label));
    }
  }
}","private void compressGraphLabels(DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph){
  String label;
  for (  Edge<Map<Integer,StringBuilder>> edge : graph.getEdges()) {
    for (    int i : edge.getLabel().keySet()) {
      label=labelMap.get(edge.getLabel().get(i).toString());
      if (label == null) {
        label=Integer.toString(labelCounter);
        labelCounter++;
        labelMap.put(edge.getLabel().get(i).toString(),label);
      }
      edge.getLabel().put(i,new StringBuilder(label));
    }
  }
  for (  Vertex<Map<Integer,StringBuilder>> vertex : graph.getVertices()) {
    for (    int i : vertex.getLabel().keySet()) {
      label=labelMap.get(vertex.getLabel().get(i).toString());
      if (label == null) {
        label=Integer.toString(labelCounter);
        labelCounter++;
        labelMap.put(vertex.getLabel().get(i).toString(),label);
      }
      vertex.getLabel().put(i,new StringBuilder(label));
    }
  }
}"
51015,"/** 
 * Second step in the WL algorithm. We compress the long labels into new short labels
 * @param graphs
 * @param labelDict
 * @param currentLabel
 * @return
 */
private int compressGraphLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,Map<String,String> labelDict,int currentLabel){
  String label;
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      label=labelDict.get(edge.getLabel());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(edge.getLabel().toString(),label);
      }
      edge.setLabel(new StringBuffer(label));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      label=labelDict.get(vertex.getLabel());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(vertex.getLabel().toString(),label);
      }
      vertex.setLabel(new StringBuffer(label));
    }
  }
  return currentLabel;
}","/** 
 * Second step in the WL algorithm. We compress the long labels into new short labels
 * @param graphs
 * @param labelDict
 * @param currentLabel
 * @return
 */
private int compressGraphLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,Map<String,String> labelDict,int currentLabel){
  String label;
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      label=labelDict.get(edge.getLabel().toString());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(edge.getLabel().toString(),label);
      }
      edge.setLabel(new StringBuffer(label));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      label=labelDict.get(vertex.getLabel().toString());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(vertex.getLabel().toString(),label);
      }
      vertex.setLabel(new StringBuffer(label));
    }
  }
  return currentLabel;
}"
51016,"/** 
 * The computation of the feature vectors assumes that each edge and vertex is only processed once. We can encounter the same vertex/edge on different depths during computation, this could lead to multiple counts of the same vertex, possibly of different depth labels.
 * @param graph
 * @param instances
 * @param weight
 * @param featureVectors
 */
private void computeFVs(DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph,List<Resource> instances,double weight,SparseVector[] featureVectors){
  int index;
  Map<Vertex<Map<Integer,StringBuilder>>,Integer> vertexIndexMap;
  Map<Edge<Map<Integer,StringBuilder>>,Integer> edgeIndexMap;
  for (int i=0; i < instances.size(); i++) {
    vertexIndexMap=instanceVertexIndexMap.get(instances.get(i).toString());
    for (    Vertex<Map<Integer,StringBuilder>> vertex : vertexIndexMap.keySet()) {
      index=Integer.parseInt(vertex.getLabel().get(vertexIndexMap.get(vertex)).toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
    edgeIndexMap=instanceEdgeIndexMap.get(instances.get(i).toString());
    for (    Edge<Map<Integer,StringBuilder>> edge : edgeIndexMap.keySet()) {
      index=Integer.parseInt(edge.getLabel().get(edgeIndexMap.get(edge)).toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
  }
}","/** 
 * The computation of the feature vectors assumes that each edge and vertex is only processed once. We can encounter the same vertex/edge on different depths during computation, this could lead to multiple counts of the same vertex, possibly of different depth labels.
 * @param graph
 * @param instances
 * @param weight
 * @param featureVectors
 */
private void computeFVs(DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph,List<Resource> instances,double weight,SparseVector[] featureVectors){
  int index;
  Map<Vertex<Map<Integer,StringBuilder>>,Integer> vertexIndexMap;
  Map<Edge<Map<Integer,StringBuilder>>,Integer> edgeIndexMap;
  for (int i=0; i < instances.size(); i++) {
    featureVectors[i].setLastIndex(labelCounter - 1);
    vertexIndexMap=instanceVertexIndexMap.get(instances.get(i).toString());
    for (    Vertex<Map<Integer,StringBuilder>> vertex : vertexIndexMap.keySet()) {
      index=Integer.parseInt(vertex.getLabel().get(vertexIndexMap.get(vertex)).toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
    edgeIndexMap=instanceEdgeIndexMap.get(instances.get(i).toString());
    for (    Edge<Map<Integer,StringBuilder>> edge : edgeIndexMap.keySet()) {
      index=Integer.parseInt(edge.getLabel().get(edgeIndexMap.get(edge)).toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
  }
}"
51017,"public double[][] compute(List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> trainGraphs,List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> testGraphs){
  List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs=copyGraphs(testGraphs);
  graphs.addAll(copyGraphs(trainGraphs));
  SparseVector[] featureVectors=new SparseVector[graphs.size()];
  for (int i=0; i < featureVectors.length; i++) {
    featureVectors[i]=new SparseVector();
  }
  Map<String,String> labelDict=new HashMap<String,String>();
  double[][] kernel=KernelUtils.initMatrix(testGraphs.size(),trainGraphs.size());
  double[] ss=new double[testGraphs.size() + trainGraphs.size()];
  int startLabel=1;
  int currentLabel=1;
  for (  DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    graph.getRootVertex().setLabel(new StringBuffer(KernelUtils.ROOTID));
  }
  currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
  computeFVs(graphs,featureVectors,Math.sqrt(1.0 / ((double)(iterations + 1))));
  for (int i=0; i < this.iterations; i++) {
    relabelGraphs2MultisetLabels(graphs,startLabel,currentLabel);
    startLabel=currentLabel;
    currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
    computeFVs(graphs,featureVectors,Math.sqrt((2.0 + i) / ((double)(iterations + 1))));
  }
  computeKernelMatrix(trainGraphs,testGraphs,featureVectors,kernel,ss);
  if (normalize) {
    double[] ssTest=Arrays.copyOfRange(ss,0,testGraphs.size());
    double[] ssTrain=Arrays.copyOfRange(ss,testGraphs.size(),ss.length);
    return KernelUtils.normalize(kernel,ssTrain,ssTest);
  }
 else {
    return kernel;
  }
}","public double[][] compute(List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> trainGraphs,List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> testGraphs){
  List<DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>> graphs=copyGraphs(testGraphs);
  graphs.addAll(copyGraphs(trainGraphs));
  SparseVector[] featureVectors=new SparseVector[graphs.size()];
  for (int i=0; i < featureVectors.length; i++) {
    featureVectors[i]=new SparseVector();
  }
  Map<String,String> labelDict=new HashMap<String,String>();
  double[][] kernel=KernelUtils.initMatrix(testGraphs.size(),trainGraphs.size());
  double[] ss=new double[testGraphs.size() + trainGraphs.size()];
  int startLabel=1;
  int currentLabel=1;
  for (  DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>> graph : graphs) {
    graph.getRootVertex().setLabel(new StringBuilder(KernelUtils.ROOTID));
  }
  currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
  computeFVs(graphs,featureVectors,Math.sqrt(1.0 / ((double)(iterations + 1))),currentLabel - 1);
  for (int i=0; i < this.iterations; i++) {
    relabelGraphs2MultisetLabels(graphs,startLabel,currentLabel);
    startLabel=currentLabel;
    currentLabel=compressGraphLabels(graphs,labelDict,currentLabel);
    computeFVs(graphs,featureVectors,Math.sqrt((2.0 + i) / ((double)(iterations + 1))),currentLabel - 1);
  }
  computeKernelMatrix(trainGraphs,testGraphs,featureVectors,kernel,ss);
  if (normalize) {
    double[] ssTest=Arrays.copyOfRange(ss,0,testGraphs.size());
    double[] ssTrain=Arrays.copyOfRange(ss,testGraphs.size(),ss.length);
    return KernelUtils.normalize(kernel,ssTrain,ssTest);
  }
 else {
    return kernel;
  }
}"
51018,"/** 
 * Second step in the WL algorithm. We compress the long labels into new short labels
 * @param graphs
 * @param labelDict
 * @param currentLabel
 * @return
 */
private int compressGraphLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,Map<String,String> labelDict,int currentLabel){
  String label;
  for (  DirectedGraph<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      label=labelDict.get(edge.getLabel().toString());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(edge.getLabel().toString(),label);
      }
      edge.setLabel(new StringBuffer(label));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      label=labelDict.get(vertex.getLabel().toString());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(vertex.getLabel().toString(),label);
      }
      vertex.setLabel(new StringBuffer(label));
    }
  }
  return currentLabel;
}","/** 
 * Second step in the WL algorithm. We compress the long labels into new short labels
 * @param graphs
 * @param labelDict
 * @param currentLabel
 * @return
 */
private int compressGraphLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>> graphs,Map<String,String> labelDict,int currentLabel){
  String label;
  for (  DirectedGraph<Vertex<StringBuilder>,Edge<StringBuilder>> graph : graphs) {
    for (    Edge<StringBuilder> edge : graph.getEdges()) {
      label=labelDict.get(edge.getLabel().toString());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(edge.getLabel().toString(),label);
      }
      edge.setLabel(new StringBuilder(label));
    }
    for (    Vertex<StringBuilder> vertex : graph.getVertices()) {
      label=labelDict.get(vertex.getLabel().toString());
      if (label == null) {
        label=Integer.toString(currentLabel);
        currentLabel++;
        labelDict.put(vertex.getLabel().toString(),label);
      }
      vertex.setLabel(new StringBuilder(label));
    }
  }
  return currentLabel;
}"
51019,"/** 
 * Compute feature vector for the graphs based on the label dictionary created in the previous two steps
 * @param graphs
 * @param featureVectors
 * @param startLabel
 * @param currentLabel
 */
private void computeFVs(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,SparseVector[] featureVectors,double weight){
  int index;
  for (int i=0; i < graphs.size(); i++) {
    for (    Vertex<StringBuffer> vertex : graphs.get(i).getVertices()) {
      index=Integer.parseInt(vertex.getLabel().toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
    for (    Edge<StringBuffer> edge : graphs.get(i).getEdges()) {
      index=Integer.parseInt(edge.getLabel().toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
  }
}","/** 
 * Compute feature vector for the graphs based on the label dictionary created in the previous two steps
 * @param graphs
 * @param featureVectors
 * @param startLabel
 * @param currentLabel
 */
private void computeFVs(List<DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>> graphs,SparseVector[] featureVectors,double weight,int lastIndex){
  int index;
  for (int i=0; i < graphs.size(); i++) {
    featureVectors[i].setLastIndex(lastIndex);
    for (    Vertex<StringBuilder> vertex : graphs.get(i).getVertices()) {
      index=Integer.parseInt(vertex.getLabel().toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
    for (    Edge<StringBuilder> edge : graphs.get(i).getEdges()) {
      index=Integer.parseInt(edge.getLabel().toString());
      featureVectors[i].setValue(index,featureVectors[i].getValue(index) + weight);
    }
  }
}"
51020,"private List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> copyGraphs(List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> oldGraphs){
  List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs=new ArrayList<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>>();
  for (  DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph : oldGraphs) {
    DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> newGraph=new DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>();
    String rootLabel=graph.getRootVertex().getLabel();
    Map<Vertex<String>,Vertex<StringBuffer>> nodes=new HashMap<Vertex<String>,Vertex<StringBuffer>>();
    for (    Vertex<String> vertex : graph.getVertices()) {
      Vertex<StringBuffer> newV=new Vertex<StringBuffer>(new StringBuffer(vertex.getLabel()));
      nodes.put(vertex,newV);
      if (vertex.getLabel().equals(rootLabel)) {
        newGraph.setRootVertex(newV);
      }
    }
    for (    Edge<String> edge : graph.getEdges()) {
      newGraph.addEdge(new Edge<StringBuffer>(new StringBuffer(edge.getLabel())),nodes.get(graph.getSource(edge)),nodes.get(graph.getDest(edge)),EdgeType.DIRECTED);
    }
    graphs.add(newGraph);
  }
  return graphs;
}","private List<DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>> copyGraphs(List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> oldGraphs){
  List<DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>> graphs=new ArrayList<DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>>();
  for (  DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph : oldGraphs) {
    DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>> newGraph=new DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>();
    String rootLabel=graph.getRootVertex().getLabel();
    Map<Vertex<String>,Vertex<StringBuilder>> nodes=new HashMap<Vertex<String>,Vertex<StringBuilder>>();
    for (    Vertex<String> vertex : graph.getVertices()) {
      Vertex<StringBuilder> newV=new Vertex<StringBuilder>(new StringBuilder(vertex.getLabel()));
      nodes.put(vertex,newV);
      if (vertex.getLabel().equals(rootLabel)) {
        newGraph.setRootVertex(newV);
      }
    }
    for (    Edge<String> edge : graph.getEdges()) {
      newGraph.addEdge(new Edge<StringBuilder>(new StringBuilder(edge.getLabel())),nodes.get(graph.getSource(edge)),nodes.get(graph.getDest(edge)),EdgeType.DIRECTED);
    }
    graphs.add(newGraph);
  }
  return graphs;
}"
51021,"/** 
 * First step in the Weisfeiler-Lehman algorithm, applied to directedgraphs with edge labels.
 * @param graphs
 * @param startLabel
 * @param currentLabel
 */
private void relabelGraphs2MultisetLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>>> graphs,int startLabel,int currentLabel){
  Map<String,Bucket<Vertex<StringBuffer>>> bucketsV=new HashMap<String,Bucket<Vertex<StringBuffer>>>();
  Map<String,Bucket<Edge<StringBuffer>>> bucketsE=new HashMap<String,Bucket<Edge<StringBuffer>>>();
  for (int i=startLabel; i < currentLabel; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<Vertex<StringBuffer>>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<Edge<StringBuffer>>(Integer.toString(i)));
  }
  for (  DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      bucketsV.get(edge.getLabel().toString()).getContents().add(graph.getDest(edge));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      Collection<Edge<StringBuffer>> v2=graph.getOutEdges(vertex);
      bucketsE.get(vertex.getLabel().toString()).getContents().addAll(v2);
    }
  }
  for (  DirectedMultigraphWithRoot<Vertex<StringBuffer>,Edge<StringBuffer>> graph : graphs) {
    for (    Edge<StringBuffer> edge : graph.getEdges()) {
      edge.setLabel(edge.getLabel().append(""String_Node_Str""));
    }
    for (    Vertex<StringBuffer> vertex : graph.getVertices()) {
      vertex.setLabel(vertex.getLabel().append(""String_Node_Str""));
    }
  }
  for (int i=startLabel; i < currentLabel; i++) {
    Bucket<Vertex<StringBuffer>> bucketV=bucketsV.get(Integer.toString(i));
    for (    Vertex<StringBuffer> vertex : bucketV.getContents()) {
      vertex.getLabel().append(bucketV.getLabel());
    }
    Bucket<Edge<StringBuffer>> bucketE=bucketsE.get(Integer.toString(i));
    for (    Edge<StringBuffer> edge : bucketE.getContents()) {
      edge.getLabel().append(bucketE.getLabel());
    }
  }
}","/** 
 * First step in the Weisfeiler-Lehman algorithm, applied to directedgraphs with edge labels.
 * @param graphs
 * @param startLabel
 * @param currentLabel
 */
private void relabelGraphs2MultisetLabels(List<DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>>> graphs,int startLabel,int currentLabel){
  Map<String,Bucket<Vertex<StringBuilder>>> bucketsV=new HashMap<String,Bucket<Vertex<StringBuilder>>>();
  Map<String,Bucket<Edge<StringBuilder>>> bucketsE=new HashMap<String,Bucket<Edge<StringBuilder>>>();
  for (int i=startLabel; i < currentLabel; i++) {
    bucketsV.put(Integer.toString(i),new Bucket<Vertex<StringBuilder>>(Integer.toString(i)));
    bucketsE.put(Integer.toString(i),new Bucket<Edge<StringBuilder>>(Integer.toString(i)));
  }
  for (  DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>> graph : graphs) {
    for (    Edge<StringBuilder> edge : graph.getEdges()) {
      bucketsV.get(edge.getLabel().toString()).getContents().add(graph.getDest(edge));
    }
    for (    Vertex<StringBuilder> vertex : graph.getVertices()) {
      Collection<Edge<StringBuilder>> v2=graph.getOutEdges(vertex);
      bucketsE.get(vertex.getLabel().toString()).getContents().addAll(v2);
    }
  }
  for (  DirectedMultigraphWithRoot<Vertex<StringBuilder>,Edge<StringBuilder>> graph : graphs) {
    for (    Edge<StringBuilder> edge : graph.getEdges()) {
      edge.getLabel().append(""String_Node_Str"");
    }
    for (    Vertex<StringBuilder> vertex : graph.getVertices()) {
      vertex.getLabel().append(""String_Node_Str"");
    }
  }
  for (int i=startLabel; i < currentLabel; i++) {
    Bucket<Vertex<StringBuilder>> bucketV=bucketsV.get(Integer.toString(i));
    for (    Vertex<StringBuilder> vertex : bucketV.getContents()) {
      vertex.getLabel().append(bucketV.getLabel());
    }
    Bucket<Edge<StringBuilder>> bucketE=bucketsE.get(Integer.toString(i));
    for (    Edge<StringBuilder> edge : bucketE.getContents()) {
      edge.getLabel().append(bucketE.getLabel());
    }
  }
}"
51022,"/** 
 * @param args
 */
public static void main(String[] args){
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.001,0.01,0.1,1,10,100,1000};
  int depth=3;
  int[] iterations={0,2,4,6};
  dataset=new RDFFileDataSet(""String_Node_Str"",RDFFormat.NTRIPLES);
  createGeoDataSet(50,""String_Node_Str"");
  ResultsTable resTable=new ResultsTable();
  resTable.setManWU(0.05);
  boolean inference=false;
  for (int i=1; i <= depth; i++) {
    resTable.newRow(""String_Node_Str"");
    for (    int it : iterations) {
      LibSVMParameters parms=new LibSVMParameters(LibSVMParameters.C_SVC,cs);
      LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
      KernelExperiment<RDFWLSubTreeKernel> exp=new RDFLinearVSKernelExperiment(new RDFWLSubTreeKernel(it,i,inference,true),seeds,parms,linParms,dataset,instances,labels,blackList);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ it);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  saveResults(resTable,""String_Node_Str"");
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
  saveResults(resTable.toString(),""String_Node_Str"");
}","/** 
 * @param args
 */
public static void main(String[] args){
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={1,10,100,1000};
  int depth=3;
  int[] iterations={0,2,4,6};
  dataset=new RDFFileDataSet(""String_Node_Str"",RDFFormat.NTRIPLES);
  createGeoDataSet(10,""String_Node_Str"");
  ResultsTable resTable=new ResultsTable();
  resTable.setManWU(0.05);
  boolean inference=false;
  for (int i=1; i <= depth; i++) {
    for (    int it : iterations) {
      resTable.newRow(""String_Node_Str"");
      LibSVMParameters parms=new LibSVMParameters(LibSVMParameters.C_SVC,cs);
      LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
      KernelExperiment<RDFWLSubTreeKernel> exp=new RDFLinearVSKernelExperiment(new RDFWLSubTreeKernel(it,i,inference,true),seeds,parms,linParms,dataset,instances,labels,blackList);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ it);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  saveResults(resTable,""String_Node_Str"");
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
  saveResults(resTable.toString(),""String_Node_Str"");
}"
51023,"private static void createGeoDataSet(int minSize,String property){
  List<Statement> stmts=dataset.getStatementsFromStrings(null,""String_Node_Str"",""String_Node_Str"");
  instances=new ArrayList<Resource>();
  labels=new ArrayList<Value>();
  blackList=new ArrayList<Statement>();
  for (  Statement stmt : stmts) {
    List<Statement> stmts2=dataset.getStatementsFromStrings(stmt.getSubject().toString(),property,null);
    if (stmts2.size() > 1) {
      System.out.println(""String_Node_Str"");
    }
    for (    Statement stmt2 : stmts2) {
      if (Math.random() < 0.1) {
        instances.add(stmt2.getSubject());
        labels.add(stmt2.getObject());
      }
    }
  }
  removeSmallClasses(minSize);
  createBlackList();
  Map<Value,Integer> labelMap=new HashMap<Value,Integer>();
  System.out.println(LibSVM.computeClassCounts(LibSVM.createTargets(labels,labelMap)));
}","private static void createGeoDataSet(int minSize,String property){
  List<Statement> stmts=dataset.getStatementsFromStrings(null,""String_Node_Str"",""String_Node_Str"");
  instances=new ArrayList<Resource>();
  labels=new ArrayList<Value>();
  blackList=new ArrayList<Statement>();
  for (  Statement stmt : stmts) {
    List<Statement> stmts2=dataset.getStatementsFromStrings(stmt.getSubject().toString(),property,null);
    if (stmts2.size() > 1) {
      System.out.println(""String_Node_Str"");
    }
    for (    Statement stmt2 : stmts2) {
      if (Math.random() < 0.01) {
        instances.add(stmt2.getSubject());
        labels.add(stmt2.getObject());
      }
    }
  }
  removeSmallClasses(minSize);
  createBlackList();
  Map<Value,Integer> labelMap=new HashMap<Value,Integer>();
  System.out.println(LibSVM.computeClassCounts(LibSVM.createTargets(labels,labelMap)));
}"
51024,"public void run(){
  long tic, toc;
  List<Value> tempLabels=new ArrayList<Value>();
  tempLabels.addAll(labels);
  tic=System.currentTimeMillis();
  SparseVector[] fv=kernel.computeFeatureVectors(dataset,instances,blackList);
  toc=System.currentTimeMillis();
  double[] comp={0.0,0.0};
  comp[0]=toc - tic;
  comp[1]=toc - tic;
  compR.setScores(comp);
  double avg=0;
  for (  SparseVector v : fv) {
    avg+=v.size();
  }
  avg/=fv.length;
  System.out.println(""String_Node_Str"" + avg);
  double[] accLA=new double[seeds.length];
  double[] f1LA=new double[seeds.length];
  double[] accKA=new double[seeds.length];
  double[] f1KA=new double[seeds.length];
  double[] compLA=new double[seeds.length];
  double[] compKA=new double[seeds.length];
  accL.setLabel(""String_Node_Str"");
  f1L.setLabel(""String_Node_Str"");
  accK.setLabel(""String_Node_Str"");
  f1K.setLabel(""String_Node_Str"");
  compR.setLabel(""String_Node_Str"");
  compL.setLabel(""String_Node_Str"");
  compK.setLabel(""String_Node_Str"");
  for (int j=0; j < seeds.length; j++) {
    List<SparseVector> fvList=Arrays.asList(fv);
    Collections.shuffle(fvList,new Random(seeds[j]));
    fv=fvList.toArray(new SparseVector[1]);
    Collections.shuffle(tempLabels,new Random(seeds[j]));
    double[] target=LibSVM.createTargets(tempLabels);
    Map<Double,Double> counts=LibSVM.computeClassCounts(target);
    int[] wLabels=new int[counts.size()];
    double[] weights=new double[counts.size()];
    for (    double label : counts.keySet()) {
      wLabels[(int)label - 1]=(int)label;
      weights[(int)label - 1]=1 / counts.get(label);
    }
    svmParms.setWeightLabels(wLabels);
    svmParms.setWeights(weights);
    linearParms.setWeightLabels(wLabels);
    linearParms.setWeights(weights);
    tic=System.currentTimeMillis();
    Prediction[] predA=LibLINEAR.crossValidate(fv,target,linearParms,10);
    toc=System.currentTimeMillis();
    compLA[j]=toc - tic;
    double[][] matrix=Kernel.featureVectors2Kernel(fv,true);
    svmParms.setPrecomputedKernel();
    tic=System.currentTimeMillis();
    Prediction[] predB=LibSVM.crossValidate(matrix,target,svmParms,10);
    toc=System.currentTimeMillis();
    compKA[j]=toc - tic;
    accLA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    f1LA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    accKA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
    f1KA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
  }
  accL.setScores(accLA);
  f1L.setScores(f1LA);
  accK.setScores(accKA);
  f1K.setScores(f1KA);
  compL.setScores(compLA);
  compK.setScores(compKA);
}","public void run(){
  long tic, toc;
  List<Value> tempLabels=new ArrayList<Value>();
  tempLabels.addAll(labels);
  tic=System.currentTimeMillis();
  SparseVector[] fv=kernel.computeFeatureVectors(dataset,instances,blackList);
  toc=System.currentTimeMillis();
  double[] comp={0.0,0.0};
  comp[0]=toc - tic;
  comp[1]=toc - tic;
  compR.setScores(comp);
  double avg=0;
  for (  SparseVector v : fv) {
    avg+=v.size();
  }
  avg/=fv.length;
  System.out.println(""String_Node_Str"" + avg);
  double[] accLA=new double[seeds.length];
  double[] f1LA=new double[seeds.length];
  double[] accKA=new double[seeds.length];
  double[] f1KA=new double[seeds.length];
  double[] compLA=new double[seeds.length];
  double[] compKA=new double[seeds.length];
  accL.setLabel(""String_Node_Str"");
  f1L.setLabel(""String_Node_Str"");
  accK.setLabel(""String_Node_Str"");
  f1K.setLabel(""String_Node_Str"");
  compR.setLabel(""String_Node_Str"");
  compL.setLabel(""String_Node_Str"");
  compK.setLabel(""String_Node_Str"");
  for (int j=0; j < seeds.length; j++) {
    List<SparseVector> fvList=Arrays.asList(fv);
    Collections.shuffle(fvList,new Random(seeds[j]));
    fv=fvList.toArray(new SparseVector[1]);
    Collections.shuffle(tempLabels,new Random(seeds[j]));
    double[] target=LibSVM.createTargets(tempLabels);
    Map<Double,Double> counts=LibSVM.computeClassCounts(target);
    int[] wLabels=new int[counts.size()];
    double[] weights=new double[counts.size()];
    for (    double label : counts.keySet()) {
      wLabels[(int)label - 1]=(int)label;
      weights[(int)label - 1]=1 / counts.get(label);
    }
    svmParms.setWeightLabels(wLabels);
    svmParms.setWeights(weights);
    linearParms.setWeightLabels(wLabels);
    linearParms.setWeights(weights);
    tic=System.currentTimeMillis();
    Prediction[] predA=LibLINEAR.crossValidate(fv,target,linearParms,10);
    toc=System.currentTimeMillis();
    compLA[j]=toc - tic;
    svmParms.setPrecomputedKernel();
    tic=System.currentTimeMillis();
    double[][] matrix=Kernel.featureVectors2Kernel(fv,true);
    Prediction[] predB=LibSVM.crossValidate(matrix,target,svmParms,10);
    toc=System.currentTimeMillis();
    compKA[j]=toc - tic;
    accLA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    f1LA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    accKA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
    f1KA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
  }
  accL.setScores(accLA);
  f1L.setScores(f1LA);
  accK.setScores(accKA);
  f1K.setScores(f1KA);
  compL.setScores(compLA);
  compK.setScores(compKA);
}"
51025,"public void run(){
  long tic, toc;
  List<Value> tempLabels=new ArrayList<Value>();
  tempLabels.addAll(labels);
  tic=System.currentTimeMillis();
  SparseVector[] fv=kernel.computeFeatureVectors(dataset,instances,blackList);
  toc=System.currentTimeMillis();
  double[] comp={0.0,0.0};
  comp[0]=toc - tic;
  comp[1]=toc - tic;
  compR.setScores(comp);
  double avg=0;
  for (  SparseVector v : fv) {
    avg+=v.size();
  }
  avg/=fv.length;
  System.out.println(""String_Node_Str"" + avg);
  double[] accLA=new double[seeds.length];
  double[] f1LA=new double[seeds.length];
  double[] accKA=new double[seeds.length];
  double[] f1KA=new double[seeds.length];
  double[] compLA=new double[seeds.length];
  double[] compKA=new double[seeds.length];
  accL.setLabel(""String_Node_Str"");
  f1L.setLabel(""String_Node_Str"");
  accK.setLabel(""String_Node_Str"");
  f1K.setLabel(""String_Node_Str"");
  compR.setLabel(""String_Node_Str"");
  compL.setLabel(""String_Node_Str"");
  compK.setLabel(""String_Node_Str"");
  for (int j=0; j < seeds.length; j++) {
    List<SparseVector> fvList=Arrays.asList(fv);
    Collections.shuffle(fvList,new Random(seeds[j]));
    fv=fvList.toArray(new SparseVector[1]);
    Collections.shuffle(tempLabels,new Random(seeds[j]));
    double[] target=LibSVM.createTargets(tempLabels);
    Map<Double,Double> counts=LibSVM.computeClassCounts(target);
    int[] wLabels=new int[counts.size()];
    double[] weights=new double[counts.size()];
    for (    double label : counts.keySet()) {
      wLabels[(int)label - 1]=(int)label;
      weights[(int)label - 1]=1 / counts.get(label);
    }
    svmParms.setWeightLabels(wLabels);
    svmParms.setWeights(weights);
    linearParms.setWeightLabels(wLabels);
    linearParms.setWeights(weights);
    tic=System.currentTimeMillis();
    Prediction[] predA=LibLINEAR.crossValidate(fv,target,linearParms,10);
    toc=System.currentTimeMillis();
    compLA[j]=toc - tic;
    svmParms.setPrecomputedKernel();
    tic=System.currentTimeMillis();
    double[][] matrix=Kernel.featureVectors2Kernel(fv,false);
    Prediction[] predB=LibSVM.crossValidate(matrix,target,svmParms,10);
    toc=System.currentTimeMillis();
    compKA[j]=toc - tic;
    accLA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    f1LA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    accKA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
    f1KA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
  }
  accL.setScores(accLA);
  f1L.setScores(f1LA);
  accK.setScores(accKA);
  f1K.setScores(f1KA);
  compL.setScores(compLA);
  compK.setScores(compKA);
}","public void run(){
  long tic, toc;
  List<Value> tempLabels=new ArrayList<Value>();
  tempLabels.addAll(labels);
  tic=System.currentTimeMillis();
  SparseVector[] fv=kernel.computeFeatureVectors(dataset,instances,blackList);
  toc=System.currentTimeMillis();
  double[] comp={0.0,0.0};
  comp[0]=toc - tic;
  comp[1]=toc - tic;
  compR.setScores(comp);
  double avg=0;
  for (  SparseVector v : fv) {
    avg+=v.size();
  }
  avg/=fv.length;
  System.out.println(""String_Node_Str"" + avg);
  double[] accLA=new double[seeds.length];
  double[] f1LA=new double[seeds.length];
  double[] accKA=new double[seeds.length];
  double[] f1KA=new double[seeds.length];
  double[] compLA=new double[seeds.length];
  double[] compKA=new double[seeds.length];
  accL.setLabel(""String_Node_Str"");
  f1L.setLabel(""String_Node_Str"");
  accK.setLabel(""String_Node_Str"");
  f1K.setLabel(""String_Node_Str"");
  compR.setLabel(""String_Node_Str"");
  compL.setLabel(""String_Node_Str"");
  compK.setLabel(""String_Node_Str"");
  for (int j=0; j < seeds.length; j++) {
    List<SparseVector> fvList=Arrays.asList(fv);
    Collections.shuffle(fvList,new Random(seeds[j]));
    fv=fvList.toArray(new SparseVector[1]);
    Collections.shuffle(tempLabels,new Random(seeds[j]));
    double[] target=LibSVM.createTargets(tempLabels);
    Map<Double,Double> counts=LibSVM.computeClassCounts(target);
    int[] wLabels=new int[counts.size()];
    double[] weights=new double[counts.size()];
    for (    double label : counts.keySet()) {
      wLabels[(int)label - 1]=(int)label;
      weights[(int)label - 1]=1 / counts.get(label);
    }
    svmParms.setWeightLabels(wLabels);
    svmParms.setWeights(weights);
    linearParms.setWeightLabels(wLabels);
    linearParms.setWeights(weights);
    tic=System.currentTimeMillis();
    Prediction[] predA=LibLINEAR.crossValidate(fv,target,linearParms,10);
    toc=System.currentTimeMillis();
    compLA[j]=toc - tic;
    svmParms.setPrecomputedKernel();
    tic=System.currentTimeMillis();
    double[][] matrix=Kernel.featureVectors2Kernel(fv);
    Prediction[] predB=LibSVM.crossValidate(matrix,target,svmParms,10);
    toc=System.currentTimeMillis();
    compKA[j]=toc - tic;
    accLA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    f1LA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    accKA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
    f1KA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
  }
  accL.setScores(accLA);
  f1L.setScores(f1LA);
  accK.setScores(accKA);
  f1K.setScores(f1KA);
  compL.setScores(compLA);
  compK.setScores(compKA);
}"
51026,"public static double[][] featureVectors2Kernel(SparseVector[] featureVectors,boolean normalize){
  double[][] kernel=initMatrix(featureVectors.length,featureVectors.length);
  for (int i=0; i < featureVectors.length; i++) {
    for (int j=i; j < featureVectors.length; j++) {
      kernel[i][j]=featureVectors[i].dot(featureVectors[j]);
      kernel[j][i]=kernel[i][j];
    }
  }
  if (normalize) {
    kernel=normalize(kernel);
  }
  return kernel;
}","public static double[][] featureVectors2Kernel(SparseVector[] featureVectors){
  double[][] kernel=initMatrix(featureVectors.length,featureVectors.length);
  for (int i=0; i < featureVectors.length; i++) {
    for (int j=i; j < featureVectors.length; j++) {
      kernel[i][j]=featureVectors[i].dot(featureVectors[j]);
      kernel[j][i]=kernel[i][j];
    }
  }
  return kernel;
}"
51027,"public double[][] compute(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=computeFeatureVectors(dataset,instances,blackList);
  double[][] kernel=initMatrix(instances.size(),instances.size());
  computeKernelMatrix(instances,featureVectors,kernel,1);
  if (this.normalize) {
    kernel=normalize(kernel);
  }
  return kernel;
}","public double[][] compute(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=computeFeatureVectors(dataset,instances,blackList);
  double[][] kernel=initMatrix(instances.size(),instances.size());
  computeKernelMatrix(instances,featureVectors,kernel,1);
  return kernel;
}"
51028,"public double dot(SparseVector v2){
  int i=0, j=0;
  double ret=0;
  if (!converted) {
    convert2Arrays();
  }
  if (!v2.converted) {
    v2.convert2Arrays();
  }
  while (i < indices.length && j < v2.indices.length) {
    if (indices[i] == v2.indices[j]) {
      ret+=values[i] * v2.values[j];
      i++;
      j++;
    }
 else     if (indices[i] < v2.indices[j]) {
      j++;
    }
 else {
      i++;
    }
  }
  return ret;
}","public double dot(SparseVector v2){
  int i=0, j=0;
  double ret=0;
  if (!converted) {
    convert2Arrays();
  }
  if (!v2.converted) {
    v2.convert2Arrays();
  }
  while (i < indices.length && j < v2.indices.length) {
    if (indices[i] > v2.indices[j]) {
      j++;
    }
 else     if (indices[i] < v2.indices[j]) {
      i++;
    }
 else {
      ret+=values[i] * v2.values[j];
      i++;
      j++;
    }
  }
  return ret;
}"
51029,"/** 
 * @param args
 */
public static void main(String[] args){
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={1,10,100,1000};
  int depth=3;
  int[] iterations={0,2,4,6};
  dataset=new RDFFileDataSet(""String_Node_Str"",RDFFormat.NTRIPLES);
  createGeoDataSet(10,""String_Node_Str"");
  ResultsTable resTable=new ResultsTable();
  resTable.setManWU(0.05);
  boolean inference=false;
  for (int i=1; i <= depth; i++) {
    for (    int it : iterations) {
      resTable.newRow(""String_Node_Str"");
      LibSVMParameters parms=new LibSVMParameters(LibSVMParameters.C_SVC,cs);
      LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
      KernelExperiment<RDFWLSubTreeKernel> exp=new RDFLinearVSKernelExperiment(new RDFWLSubTreeKernel(it,i,inference,true),seeds,parms,linParms,dataset,instances,labels,blackList);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ it);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  saveResults(resTable,""String_Node_Str"");
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
  saveResults(resTable.toString(),""String_Node_Str"");
}","/** 
 * @param args
 */
public static void main(String[] args){
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={1,10,100,1000};
  int depth=3;
  int[] iterations={0,2,4};
  dataset=new RDFFileDataSet(""String_Node_Str"",RDFFormat.NTRIPLES);
  createGeoDataSet(10,""String_Node_Str"");
  ResultsTable resTable=new ResultsTable();
  resTable.setManWU(0.05);
  boolean inference=false;
  for (int i=1; i <= depth; i++) {
    for (    int it : iterations) {
      resTable.newRow(""String_Node_Str"");
      LibSVMParameters parms=new LibSVMParameters(LibSVMParameters.C_SVC,cs);
      LibLINEARParameters linParms=new LibLINEARParameters(LibLINEARParameters.SVC_DUAL,cs);
      KernelExperiment<RDFWLSubTreeKernel> exp=new RDFLinearVSKernelExperiment(new RDFWLSubTreeKernel(it,i,inference,true),seeds,parms,linParms,dataset,instances,labels,blackList);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ it);
      exp.run();
      for (      Result res : exp.getResults()) {
        resTable.addResult(res);
      }
    }
  }
  saveResults(resTable,""String_Node_Str"");
  resTable.addCompResults(resTable.getBestResults());
  System.out.println(resTable);
  saveResults(resTable.toString(),""String_Node_Str"");
}"
51030,"public void run(){
  long tic, toc;
  List<Value> tempLabels=new ArrayList<Value>();
  tempLabels.addAll(labels);
  tic=System.currentTimeMillis();
  SparseVector[] fv=kernel.computeFeatureVectors(dataset,instances,blackList);
  toc=System.currentTimeMillis();
  double[] comp={0.0,0.0};
  comp[0]=toc - tic;
  comp[1]=toc - tic;
  compR.setScores(comp);
  double avg=0;
  for (  SparseVector v : fv) {
    avg+=v.size();
  }
  avg/=fv.length;
  System.out.println(""String_Node_Str"" + avg);
  double[] accLA=new double[seeds.length];
  double[] f1LA=new double[seeds.length];
  double[] accKA=new double[seeds.length];
  double[] f1KA=new double[seeds.length];
  double[] compLA=new double[seeds.length];
  double[] compKA=new double[seeds.length];
  accL.setLabel(""String_Node_Str"");
  f1L.setLabel(""String_Node_Str"");
  accK.setLabel(""String_Node_Str"");
  f1K.setLabel(""String_Node_Str"");
  compR.setLabel(""String_Node_Str"");
  compL.setLabel(""String_Node_Str"");
  compK.setLabel(""String_Node_Str"");
  for (int j=0; j < seeds.length; j++) {
    List<SparseVector> fvList=Arrays.asList(fv);
    Collections.shuffle(fvList,new Random(seeds[j]));
    fv=fvList.toArray(new SparseVector[1]);
    Collections.shuffle(tempLabels,new Random(seeds[j]));
    double[] target=LibSVM.createTargets(tempLabels);
    Map<Double,Double> counts=LibSVM.computeClassCounts(target);
    int[] wLabels=new int[counts.size()];
    double[] weights=new double[counts.size()];
    for (    double label : counts.keySet()) {
      wLabels[(int)label - 1]=(int)label;
      weights[(int)label - 1]=1 / counts.get(label);
    }
    svmParms.setWeightLabels(wLabels);
    svmParms.setWeights(weights);
    linearParms.setWeightLabels(wLabels);
    linearParms.setWeights(weights);
    tic=System.currentTimeMillis();
    Prediction[] predA=LibLINEAR.crossValidate(fv,target,linearParms,10);
    toc=System.currentTimeMillis();
    compLA[j]=toc - tic;
    svmParms.setPrecomputedKernel();
    tic=System.currentTimeMillis();
    double[][] matrix=Kernel.featureVectors2Kernel(fv,true);
    Prediction[] predB=LibSVM.crossValidate(matrix,target,svmParms,10);
    toc=System.currentTimeMillis();
    compKA[j]=toc - tic;
    accLA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    f1LA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    accKA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
    f1KA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
  }
  accL.setScores(accLA);
  f1L.setScores(f1LA);
  accK.setScores(accKA);
  f1K.setScores(f1KA);
  compL.setScores(compLA);
  compK.setScores(compKA);
}","public void run(){
  long tic, toc;
  List<Value> tempLabels=new ArrayList<Value>();
  tempLabels.addAll(labels);
  tic=System.currentTimeMillis();
  SparseVector[] fv=kernel.computeFeatureVectors(dataset,instances,blackList);
  toc=System.currentTimeMillis();
  double[] comp={0.0,0.0};
  comp[0]=toc - tic;
  comp[1]=toc - tic;
  compR.setScores(comp);
  double avg=0;
  for (  SparseVector v : fv) {
    avg+=v.size();
  }
  avg/=fv.length;
  System.out.println(""String_Node_Str"" + avg);
  double[] accLA=new double[seeds.length];
  double[] f1LA=new double[seeds.length];
  double[] accKA=new double[seeds.length];
  double[] f1KA=new double[seeds.length];
  double[] compLA=new double[seeds.length];
  double[] compKA=new double[seeds.length];
  accL.setLabel(""String_Node_Str"");
  f1L.setLabel(""String_Node_Str"");
  accK.setLabel(""String_Node_Str"");
  f1K.setLabel(""String_Node_Str"");
  compR.setLabel(""String_Node_Str"");
  compL.setLabel(""String_Node_Str"");
  compK.setLabel(""String_Node_Str"");
  for (int j=0; j < seeds.length; j++) {
    List<SparseVector> fvList=Arrays.asList(fv);
    Collections.shuffle(fvList,new Random(seeds[j]));
    fv=fvList.toArray(new SparseVector[1]);
    Collections.shuffle(tempLabels,new Random(seeds[j]));
    double[] target=LibSVM.createTargets(tempLabels);
    Map<Double,Double> counts=LibSVM.computeClassCounts(target);
    int[] wLabels=new int[counts.size()];
    double[] weights=new double[counts.size()];
    for (    double label : counts.keySet()) {
      wLabels[(int)label - 1]=(int)label;
      weights[(int)label - 1]=1 / counts.get(label);
    }
    svmParms.setWeightLabels(wLabels);
    svmParms.setWeights(weights);
    linearParms.setWeightLabels(wLabels);
    linearParms.setWeights(weights);
    tic=System.currentTimeMillis();
    Prediction[] predA=LibLINEAR.crossValidate(fv,target,linearParms,10);
    toc=System.currentTimeMillis();
    compLA[j]=toc - tic;
    svmParms.setPrecomputedKernel();
    tic=System.currentTimeMillis();
    double[][] matrix=Kernel.featureVectors2Kernel(fv,false);
    Prediction[] predB=LibSVM.crossValidate(matrix,target,svmParms,10);
    toc=System.currentTimeMillis();
    compKA[j]=toc - tic;
    accLA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    f1LA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predA));
    accKA[j]=LibSVM.computeAccuracy(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
    f1KA[j]=LibSVM.computeF1(LibSVM.createTargets(tempLabels),LibSVM.extractLabels(predB));
  }
  accL.setScores(accLA);
  f1L.setScores(f1LA);
  accK.setScores(accKA);
  f1K.setScores(f1KA);
  compL.setScores(compLA);
  compK.setScores(compKA);
}"
51031,"public SparseVector[] computeFeatureVectors(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=new SparseVector[instances.size()];
  for (int i=0; i < featureVectors.length; i++) {
    featureVectors[i]=new SparseVector();
  }
  int startLabel=1;
  DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph=createGraphFromRDF(dataset,instances,blackList);
  createInstanceIndexMaps(graph,instances);
  if (blankLabels) {
    setBlankLabels(graph);
  }
  computeFVs(graph,instances,1,featureVectors);
  for (int i=0; i < iterations; i++) {
    relabelGraph2MultisetLabels(graph,startLabel);
    startLabel=labelCounter;
    compressGraphLabels(graph);
    computeFVs(graph,instances,1,featureVectors);
  }
  if (this.normalize) {
    featureVectors=Kernel.normalize(featureVectors);
  }
  return featureVectors;
}","public SparseVector[] computeFeatureVectors(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=new SparseVector[instances.size()];
  for (int i=0; i < featureVectors.length; i++) {
    featureVectors[i]=new SparseVector();
  }
  int startLabel=1;
  DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph=createGraphFromRDF(dataset,instances,blackList);
  createInstanceIndexMaps(graph,instances);
  if (blankLabels) {
    setBlankLabels(graph);
  }
  computeFVs(graph,instances,1.0 / Math.sqrt(iterations + 1),featureVectors);
  for (int i=0; i < iterations; i++) {
    relabelGraph2MultisetLabels(graph,startLabel);
    startLabel=labelCounter;
    compressGraphLabels(graph);
    computeFVs(graph,instances,(2.0 + i) / Math.sqrt(iterations + 1),featureVectors);
  }
  if (this.normalize) {
    featureVectors=Kernel.normalize(featureVectors);
  }
  return featureVectors;
}"
51032,"public double[][] compute(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=computeFeatureVectors(dataset,instances,blackList);
  double[][] kernel=initMatrix(instances.size(),instances.size());
  computeKernelMatrix(instances,featureVectors,kernel,1);
  return kernel;
}","public double[][] compute(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=computeFeatureVectors(dataset,instances,blackList);
  double[][] kernel=initMatrix(instances.size(),instances.size());
  computeKernelMatrix(instances,featureVectors,kernel);
  return kernel;
}"
51033,"public SparseVector[] computeFeatureVectors(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=new SparseVector[instances.size()];
  for (int i=0; i < featureVectors.length; i++) {
    featureVectors[i]=new SparseVector();
  }
  int startLabel=1;
  DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph=createGraphFromRDF(dataset,instances,blackList);
  createInstanceIndexMaps(graph,instances);
  if (blankLabels) {
    setBlankLabels(graph);
  }
  computeFVs(graph,instances,1.0 / Math.sqrt(iterations + 1),featureVectors);
  for (int i=0; i < iterations; i++) {
    relabelGraph2MultisetLabels(graph,startLabel);
    startLabel=labelCounter;
    compressGraphLabels(graph);
    computeFVs(graph,instances,(2.0 + i) / Math.sqrt(iterations + 1),featureVectors);
  }
  if (this.normalize) {
    featureVectors=Kernel.normalize(featureVectors);
  }
  return featureVectors;
}","public SparseVector[] computeFeatureVectors(RDFDataSet dataset,List<Resource> instances,List<Statement> blackList){
  SparseVector[] featureVectors=new SparseVector[instances.size()];
  for (int i=0; i < featureVectors.length; i++) {
    featureVectors[i]=new SparseVector();
  }
  DirectedGraph<Vertex<Map<Integer,StringBuilder>>,Edge<Map<Integer,StringBuilder>>> graph=createGraphFromRDF(dataset,instances,blackList);
  createInstanceIndexMaps(graph,instances);
  if (blankLabels) {
    setBlankLabels(graph);
  }
  computeFVs(graph,instances,Math.sqrt(1.0 / ((double)(iterations + 1))),featureVectors);
  int startLabel=1;
  for (int i=0; i < iterations; i++) {
    relabelGraph2MultisetLabels(graph,startLabel);
    startLabel=labelCounter;
    compressGraphLabels(graph);
    computeFVs(graph,instances,Math.sqrt((2.0 + i) / ((double)(iterations + 1))),featureVectors);
  }
  if (this.normalize) {
    featureVectors=Kernel.normalize(featureVectors);
  }
  return featureVectors;
}"
51034,"/** 
 * The computation of the feature vectors assumes that each edge and vertex is only processed once. We can encounter the same vertex/edge on different depths during computation, this could lead to multiple counts of the same vertex, possibly of different depth labels.
 * @param graph
 * @param instances
 * @param startLabel
 * @param featureVectors
 */
private void computeKernelMatrix(List<Resource> instances,SparseVector[] featureVectors,double[][] kernel,int iteration){
  for (int i=0; i < instances.size(); i++) {
    for (int j=i; j < instances.size(); j++) {
      kernel[i][j]+=featureVectors[i].dot(featureVectors[j]) * ((iteration) / ((double)this.iterations + 1));
      kernel[j][i]=kernel[i][j];
    }
  }
}","/** 
 * The computation of the feature vectors assumes that each edge and vertex is only processed once. We can encounter the same vertex/edge on different depths during computation, this could lead to multiple counts of the same vertex, possibly of different depth labels.
 * @param graph
 * @param instances
 * @param startLabel
 * @param featureVectors
 */
private void computeKernelMatrix(List<Resource> instances,SparseVector[] featureVectors,double[][] kernel){
  for (int i=0; i < instances.size(); i++) {
    for (int j=i; j < instances.size(); j++) {
      kernel[i][j]+=featureVectors[i].dot(featureVectors[j]);
      kernel[j][i]=kernel[i][j];
    }
  }
}"
51035,"private static LibSVMModel trainSVMModel(svm_problem svmProb,double[] target,LibSVMParameters params){
  if (!params.isVerbose()) {
    setNoOutput();
  }
  double[] prediction=new double[target.length];
  svm_parameter svmParams=params.getParams();
  double score=0, bestScore=0, bestC=1;
  for (  double c : params.getItParams()) {
    if (svmParams.svm_type == LibSVMParameters.C_SVC || svmParams.svm_type == LibSVMParameters.EPSILON_SVR) {
      svmParams.C=c;
    }
 else {
      svmParams.nu=c;
    }
    svm.svm_cross_validation(svmProb,svmParams,10,prediction);
    if (params.getEvalFunction() == LibSVM.ACCURACY) {
      score=computeAccuracy(target,prediction);
    }
    if (params.getEvalFunction() == LibSVM.F1) {
      score=computeF1(target,prediction);
    }
    if (params.getEvalFunction() == LibSVM.MSE) {
      score=1 / computeMeanSquaredError(target,prediction);
    }
    if (params.getEvalFunction() == LibSVM.MAE) {
      score=1 / computeMeanAbsoluteError(target,prediction);
    }
    if (score > bestScore) {
      bestC=c;
      bestScore=score;
    }
  }
  svmParams.C=bestC;
  return new LibSVMModel(svm.svm_train(svmProb,svmParams));
}","private static LibSVMModel trainSVMModel(svm_problem svmProb,double[] target,LibSVMParameters params){
  if (!params.isVerbose()) {
    setNoOutput();
  }
  double[] prediction=new double[target.length];
  svm_parameter svmParams=params.getParams();
  double score=0, bestScore=0, bestC=1;
  for (  double c : params.getItParams()) {
    if (svmParams.svm_type == LibSVMParameters.C_SVC || svmParams.svm_type == LibSVMParameters.EPSILON_SVR) {
      svmParams.C=c;
    }
 else {
      svmParams.nu=c;
    }
    svm.svm_cross_validation(svmProb,svmParams,5,prediction);
    if (params.getEvalFunction() == LibSVM.ACCURACY) {
      score=computeAccuracy(target,prediction);
    }
    if (params.getEvalFunction() == LibSVM.F1) {
      score=computeF1(target,prediction);
    }
    if (params.getEvalFunction() == LibSVM.MSE) {
      score=1 / computeMeanSquaredError(target,prediction);
    }
    if (params.getEvalFunction() == LibSVM.MAE) {
      score=1 / computeMeanAbsoluteError(target,prediction);
    }
    if (score > bestScore) {
      bestC=c;
      bestScore=score;
    }
  }
  svmParams.C=bestC;
  return new LibSVMModel(svm.svm_train(svmProb,svmParams));
}"
51036,"/** 
 * Note that the itParams have to be set manually when using this constructor.
 * @param algorithm, one of the 5 algorithms
 */
public LibSVMParameters(int algorithm){
  params=new svm_parameter();
  params.svm_type=algorithm;
  params.kernel_type=svm_parameter.PRECOMPUTED;
  params.eps=0.0001;
  params.shrinking=0;
  params.probability=0;
  params.cache_size=300;
  params.nr_weight=0;
  params.p=0.1;
  verbose=false;
  if (params.svm_type == EPSILON_SVR || params.svm_type == NU_SVR) {
    evalFunction=LibSVM.MSE;
  }
 else {
    evalFunction=LibSVM.ACCURACY;
  }
}","/** 
 * Note that the itParams have to be set manually when using this constructor.
 * @param algorithm, one of the 5 algorithms
 */
public LibSVMParameters(int algorithm){
  params=new svm_parameter();
  params.svm_type=algorithm;
  params.kernel_type=svm_parameter.PRECOMPUTED;
  params.eps=0.00001;
  params.shrinking=0;
  params.probability=0;
  params.cache_size=300;
  params.nr_weight=0;
  params.p=0.1;
  verbose=false;
  if (params.svm_type == EPSILON_SVR || params.svm_type == NU_SVR) {
    evalFunction=LibSVM.MSE;
  }
 else {
    evalFunction=LibSVM.ACCURACY;
  }
}"
51037,"public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<PropertyPredictionDataSetParameters> dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,true));
  PropertyPredictionDataSet dataset;
  PropertyPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      dataset.removeVertexAndEdgeLabels();
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          WLSubTreeKernel kernel=new WLSubTreeKernel(i,true,false);
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),kernel,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
        }
      }
      resultsIGP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
        }
      }
      resultsIGW.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    int fileId=(int)(Math.random() * 100000000);
    File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    PrintWriter fileOut=new PrintWriter(new FileOutputStream(file));
    fileOut.println(resultsWL);
    fileOut.println(resultsSTF);
    fileOut.println(resultsSTP);
    fileOut.println(resultsIGW);
    fileOut.println(resultsIGP);
    fileOut.println(resultsWL.allScoresToString());
    fileOut.println(resultsSTF.allScoresToString());
    fileOut.println(resultsSTP.allScoresToString());
    fileOut.println(resultsIGW.allScoresToString());
    fileOut.println(resultsIGP.allScoresToString());
    fileOut.close();
    System.out.println(resultsWL);
    System.out.println(resultsSTF);
    System.out.println(resultsSTP);
    System.out.println(resultsIGW);
    System.out.println(resultsIGP);
    System.out.println(resultsWL.allScoresToString());
    System.out.println(resultsSTF.allScoresToString());
    System.out.println(resultsSTP.allScoresToString());
    System.out.println(resultsIGW.allScoresToString());
    System.out.println(resultsIGP.allScoresToString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<PropertyPredictionDataSetParameters> dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,true));
  PropertyPredictionDataSet dataset;
  PropertyPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      resultsIGP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
        }
      }
      resultsIGW.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    int fileId=(int)(Math.random() * 100000000);
    File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    PrintWriter fileOut=new PrintWriter(new FileOutputStream(file));
    fileOut.println(resultsWL);
    fileOut.println(resultsSTF);
    fileOut.println(resultsSTP);
    fileOut.println(resultsIGW);
    fileOut.println(resultsIGP);
    fileOut.println(resultsWL.allScoresToString());
    fileOut.println(resultsSTF.allScoresToString());
    fileOut.println(resultsSTP.allScoresToString());
    fileOut.println(resultsIGW.allScoresToString());
    fileOut.println(resultsIGP.allScoresToString());
    fileOut.close();
    System.out.println(resultsWL);
    System.out.println(resultsSTF);
    System.out.println(resultsSTP);
    System.out.println(resultsIGW);
    System.out.println(resultsIGP);
    System.out.println(resultsWL.allScoresToString());
    System.out.println(resultsSTF.allScoresToString());
    System.out.println(resultsSTP.allScoresToString());
    System.out.println(resultsIGW.allScoresToString());
    System.out.println(resultsIGP.allScoresToString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
51038,"@Override public double[][] compute(List<? extends DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> trainGraphs,List<? extends DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> testGraphs){
  double[][] kernel=initMatrix(testGraphs.size(),trainGraphs.size());
  DirectedGraph<Vertex<String>,Edge<String>> graph;
  double[] ssTest=new double[testGraphs.size()];
  double[] ssTrain=new double[trainGraphs.size()];
  for (int i=0; i < testGraphs.size(); i++) {
    for (int j=0; j < trainGraphs.size(); j++) {
      graph=computeIntersectionGraph(testGraphs.get(i),trainGraphs.get(j));
      kernel[i][j]=subGraphCount(graph,maxLength,discountFactor);
    }
  }
  for (int i=0; i < testGraphs.size(); i++) {
    graph=computeIntersectionGraph(testGraphs.get(i),testGraphs.get(i));
    ssTest[i]=subGraphCount(graph,maxLength,discountFactor);
  }
  for (int i=0; i < trainGraphs.size(); i++) {
    graph=computeIntersectionGraph(trainGraphs.get(i),trainGraphs.get(i));
    ssTrain[i]=subGraphCount(graph,maxLength,discountFactor);
  }
  if (normalize) {
    return normalize(kernel,ssTrain,ssTest);
  }
 else {
    return kernel;
  }
}","@Override public double[][] compute(List<? extends DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> trainGraphs,List<? extends DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> testGraphs){
  double[][] kernel=initMatrix(testGraphs.size(),trainGraphs.size());
  DirectedGraph<Vertex<String>,Edge<String>> graph;
  double[] ssTest=new double[testGraphs.size()];
  double[] ssTrain=new double[trainGraphs.size()];
  for (  DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graphT : trainGraphs) {
    graphT.getRootVertex().setLabel(ROOTID);
  }
  for (  DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graphT : testGraphs) {
    graphT.getRootVertex().setLabel(ROOTID);
  }
  for (int i=0; i < testGraphs.size(); i++) {
    for (int j=0; j < trainGraphs.size(); j++) {
      graph=computeIntersectionGraph(testGraphs.get(i),trainGraphs.get(j));
      kernel[i][j]=subGraphCount(graph,maxLength,discountFactor);
    }
  }
  for (int i=0; i < testGraphs.size(); i++) {
    graph=computeIntersectionGraph(testGraphs.get(i),testGraphs.get(i));
    ssTest[i]=subGraphCount(graph,maxLength,discountFactor);
  }
  for (int i=0; i < trainGraphs.size(); i++) {
    graph=computeIntersectionGraph(trainGraphs.get(i),trainGraphs.get(i));
    ssTrain[i]=subGraphCount(graph,maxLength,discountFactor);
  }
  if (normalize) {
    return normalize(kernel,ssTrain,ssTest);
  }
 else {
    return kernel;
  }
}"
51039,"/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,true,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),new IntersectionGraphWalkKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),new IntersectionGraphPathKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),new IntersectionGraphWalkKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),new IntersectionGraphPathKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}"
51040,"/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<LinkPredictionDataSetParameters> dataSetsParams=new ArrayList<LinkPredictionDataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    LinkPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),5 / 6,1 / 6,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
          resultsWL.addResult(exp.getResults().getrPrecision());
          resultsWL.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),5 / 6,1 / 6,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
          resultsSTF.addResult(exp.getResults().getrPrecision());
          resultsSTF.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),5 / 6,1 / 6,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
          resultsSTP.addResult(exp.getResults().getrPrecision());
          resultsSTP.addResult(exp.getResults().getAveragePrecision());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.out.println(resultsWL);
  System.out.println(resultsSTF);
  System.out.println(resultsSTP);
}","/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<LinkPredictionDataSetParameters> dataSetsParams=new ArrayList<LinkPredictionDataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    LinkPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),5.0 / 6.0,1.0 / 6.0,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
          resultsWL.addResult(exp.getResults().getrPrecision());
          resultsWL.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),5.0 / 6.0,1.0 / 6.0,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
          resultsSTF.addResult(exp.getResults().getrPrecision());
          resultsSTF.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),5.0 / 6.0,1.0 / 6.0,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
          resultsSTP.addResult(exp.getResults().getrPrecision());
          resultsSTP.addResult(exp.getResults().getAveragePrecision());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.out.println(resultsWL);
  System.out.println(resultsSTF);
  System.out.println(resultsSTP);
}"
51041,"public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",bl,2,true,true));
  GraphClassificationDataSet dataset;
  ClassificationExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createClassificationDataSet(params);
      dataset.removeSmallClasses(5);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new WLSubTreeKernel(i),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}","public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,true));
  GraphClassificationDataSet dataset;
  ClassificationExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createClassificationDataSet(params);
      dataset.removeSmallClasses(5);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new WLSubTreeKernel(i),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}"
51042,"public void run(){
  double acc=0, meanAcc=0, f=0;
  double[][] matrix=kernel.compute(dataSet.getGraphs());
  for (int i=0; i < seeds.length; i++) {
    kernel.shuffle(matrix,seeds[i]);
    dataSet.shuffle(seeds[i]);
    double[] target=LibSVM.createTargets(dataSet.getLabels());
    double[] prediction=LibSVM.crossValidate(matrix,target,10,cs);
    acc+=LibSVM.computeAccuracy(target,prediction);
    f+=LibSVM.computeF1(target,prediction);
  }
  accuracy=acc / seeds.length;
  f1=f / seeds.length;
  output.println(dataSet.getLabel());
  output.println(kernel.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + accuracy);
  output.print(""String_Node_Str"" + f1);
  output.println(""String_Node_Str"");
  output.flush();
  results.setLabel(dataSet.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs)+ ""String_Node_Str""+ kernel.getLabel());
  results.setAccuracy(accuracy);
  results.setF1(f1);
}","public void run(){
  double acc=0, meanAcc=0, f=0;
  double[][] matrix=kernel.compute(dataSet.getGraphs());
  for (int i=0; i < seeds.length; i++) {
    matrix=kernel.shuffle(matrix,seeds[i]);
    dataSet.shuffle(seeds[i]);
    double[] target=LibSVM.createTargets(dataSet.getLabels());
    double[] prediction=LibSVM.crossValidate(matrix,target,10,cs);
    acc+=LibSVM.computeAccuracy(target,prediction);
    f+=LibSVM.computeF1(target,prediction);
  }
  accuracy=acc / seeds.length;
  f1=f / seeds.length;
  output.println(dataSet.getLabel());
  output.println(kernel.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + accuracy);
  output.print(""String_Node_Str"" + f1);
  output.println(""String_Node_Str"");
  output.flush();
  results.setLabel(dataSet.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs)+ ""String_Node_Str""+ kernel.getLabel());
  results.setAccuracy(accuracy);
  results.setF1(f1);
}"
51043,"public void shuffle(double[][] kernel,long seed){
  Double[][] kernelDouble=convert2DoubleObjects(kernel);
  for (int i=0; i < kernel.length; i++) {
    Collections.shuffle(Arrays.asList(kernelDouble[i]),new Random(seed));
  }
  Collections.shuffle(Arrays.asList(kernelDouble),new Random(seed));
  kernel=convert2DoublePrimitives(kernelDouble);
}","public double[][] shuffle(double[][] kernel,long seed){
  Double[][] kernelDouble=convert2DoubleObjects(kernel);
  for (int i=0; i < kernel.length; i++) {
    Collections.shuffle(Arrays.asList(kernelDouble[i]),new Random(seed));
  }
  Collections.shuffle(Arrays.asList(kernelDouble),new Random(seed));
  return convert2DoublePrimitives(kernelDouble);
}"
51044,"/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),new IntersectionGraphWalkKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),new IntersectionGraphPathKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),new IntersectionGraphWalkKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),new IntersectionGraphPathKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}"
51045,"private static void read(Graph<Vertex<Integer>,Edge<Integer>> graph,File file) throws IOException {
  BufferedReader reader=new BufferedReader(new FileReader(file));
  String line;
  int i=0;
  int edges=0;
  HashSet<Integer> set=new HashSet<Integer>();
  do {
    line=reader.readLine();
    i++;
    if (line == null)     continue;
    if (line.trim().isEmpty())     continue;
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] split=line.split(""String_Node_Str"");
    if (split.length < 2)     throw new IllegalArgumentException(""String_Node_Str"" + i + ""String_Node_Str"");
    Integer a, b, c=null;
    try {
      a=Integer.parseInt(split[0]);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ split[0]+ ""String_Node_Str"",e);
    }
    try {
      b=Integer.parseInt(split[1]);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ split[1]+ ""String_Node_Str"",e);
    }
    if (split.length > 2)     try {
      c=Integer.parseInt(split[2]);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ split[1]+ ""String_Node_Str"",e);
    }
    edges++;
    Vertex<Integer> av=new Vertex<Integer>(a), bv=new Vertex<Integer>(b);
    Edge<Integer> edge=new Edge<Integer>(c == null ? edges : c);
    if (((long)edges) > Integer.MAX_VALUE)     throw new IllegalStateException(""String_Node_Str"" + edges + ""String_Node_Str""+ i+ ""String_Node_Str""+ Integer.MAX_VALUE+ ""String_Node_Str"");
    set.add(a);
    set.add(b);
    graph.addEdge(new Edge<Integer>(edges),av,bv);
    if (edges % 100000 == 0)     System.out.print(""String_Node_Str"" + edges + ""String_Node_Str"");
  }
 while (line != null);
  System.out.println(""String_Node_Str"" + edges + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + set.size() + ""String_Node_Str"");
  HashSet<Integer> all=new HashSet<Integer>();
  for (int j=1; j < 307; j++)   all.add(j);
  System.out.println(all.removeAll(set));
  System.out.println(all);
}","private static void read(Graph<Vertex<Integer>,Edge<Integer>> graph,File file) throws IOException {
  Map<Integer,Vertex<Integer>> map=new HashMap<Integer,Vertex<Integer>>();
  BufferedReader reader=new BufferedReader(new FileReader(file));
  String line;
  int i=0;
  int edges=0;
  HashSet<Integer> set=new HashSet<Integer>();
  do {
    line=reader.readLine();
    i++;
    if (line == null)     continue;
    if (line.trim().isEmpty())     continue;
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] split=line.split(""String_Node_Str"");
    if (split.length < 2)     throw new IllegalArgumentException(""String_Node_Str"" + i + ""String_Node_Str"");
    Integer a, b, c=null;
    try {
      a=Integer.parseInt(split[0]);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ split[0]+ ""String_Node_Str"",e);
    }
    try {
      b=Integer.parseInt(split[1]);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ split[1]+ ""String_Node_Str"",e);
    }
    if (split.length > 2)     try {
      c=Integer.parseInt(split[2]);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException(""String_Node_Str"" + i + ""String_Node_Str""+ split[1]+ ""String_Node_Str"",e);
    }
    edges++;
    Vertex<Integer> av=vertex(a,map), bv=vertex(b,map);
    Edge<Integer> edge=new Edge<Integer>(c == null ? edges : c);
    if (((long)edges) > Integer.MAX_VALUE)     throw new IllegalStateException(""String_Node_Str"" + edges + ""String_Node_Str""+ i+ ""String_Node_Str""+ Integer.MAX_VALUE+ ""String_Node_Str"");
    set.add(a);
    set.add(b);
    graph.addEdge(new Edge<Integer>(edges),av,bv);
    if (edges % 100000 == 0)     System.out.print(""String_Node_Str"" + edges + ""String_Node_Str"");
  }
 while (line != null);
  System.out.println(""String_Node_Str"" + edges + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + set.size() + ""String_Node_Str"");
  HashSet<Integer> all=new HashSet<Integer>();
  for (int j=1; j < 307; j++)   all.add(j);
  System.out.println(all.removeAll(set));
  System.out.println(all);
}"
51046,"/** 
 * Reads a graph from a basic tab-separated value file. The file can contain  comments on lines that start with a '#', and edges in the form of two  whitespace separated labels. Empty lines are ignored.
 * @param tsFile
 * @return
 * @throws FileNotFoundException 
 */
public static UndirectedGraph<Vertex<String>,Edge<String>> graphFromTSV(File file) throws IOException {
  UndirectedSparseGraph<Vertex<String>,Edge<String>> graph=new UndirectedSparseGraph<Vertex<String>,Edge<String>>();
  BufferedReader reader=new BufferedReader(new FileReader(file));
  String line;
  int i=0;
  int edges=0;
  do {
    line=reader.readLine();
    i++;
    if (line == null)     continue;
    if (line.trim().isEmpty())     continue;
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] split=line.split(""String_Node_Str"");
    if (split.length < 2)     throw new IllegalArgumentException(""String_Node_Str"" + i + ""String_Node_Str"");
    String a, b;
    a=split[0];
    b=split[1];
    Vertex<String> av=new Vertex<String>(a), bv=new Vertex<String>(b);
    graph.addEdge(new Edge<String>(""String_Node_Str"" + edges++),Arrays.asList(av,bv));
    if (edges % 10000 == 0)     System.out.print(""String_Node_Str"" + edges + ""String_Node_Str"");
  }
 while (line != null);
  System.out.println(""String_Node_Str"" + edges + ""String_Node_Str"");
  return graph;
}","/** 
 * Reads a graph from a basic tab-separated value file. The file can contain  comments on lines that start with a '#', and edges in the form of two  whitespace separated labels. Empty lines are ignored.
 * @param tsFile
 * @return
 * @throws FileNotFoundException 
 */
public static UndirectedGraph<Vertex<String>,Edge<String>> graphFromTSV(File file) throws IOException {
  Map<String,Vertex<String>> map=new HashMap<String,Vertex<String>>();
  UndirectedSparseGraph<Vertex<String>,Edge<String>> graph=new UndirectedSparseGraph<Vertex<String>,Edge<String>>();
  BufferedReader reader=new BufferedReader(new FileReader(file));
  String line;
  int i=0;
  int edges=0;
  do {
    line=reader.readLine();
    i++;
    if (line == null)     continue;
    if (line.trim().isEmpty())     continue;
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] split=line.split(""String_Node_Str"");
    if (split.length < 2)     throw new IllegalArgumentException(""String_Node_Str"" + i + ""String_Node_Str"");
    String a, b;
    a=split[0];
    b=split[1];
    Vertex<String> av=vertex(a,map), bv=vertex(b,map);
    graph.addEdge(new Edge<String>(""String_Node_Str"" + edges++),Arrays.asList(av,bv));
    if (edges % 10000 == 0)     System.out.print(""String_Node_Str"" + edges + ""String_Node_Str"");
  }
 while (line != null);
  System.out.println(""String_Node_Str"" + edges + ""String_Node_Str"");
  return graph;
}"
51047,"public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,true));
  GraphClassificationDataSet dataset;
  ClassificationExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createClassificationDataSet(params);
      dataset.removeSmallClasses(5);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new WLSubTreeKernel(i),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}","public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new DataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,true));
  GraphClassificationDataSet dataset;
  ClassificationExperiment exp;
  List<ExperimentResults> resultsWL=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTF=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsSTP=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGW=new ArrayList<ExperimentResults>();
  List<ExperimentResults> resultsIGP=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    DataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createClassificationDataSet(params);
      dataset.removeSmallClasses(5);
      dataset.removeVertexAndEdgeLabels();
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new WLSubTreeKernel(i),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.add(exp.getResults());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.add(exp.getResults());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new ClassificationExperiment(new GraphClassificationDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.add(exp.getResults());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : resultsWL) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTF) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsSTP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGW) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
  for (  ExperimentResults res : resultsIGP) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}"
51048,"public static GraphClassificationDataSet createClassificationDataSet(RDFDataSet rdfDataSet,String property,List<String> blackList,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphs=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<String> labels=new ArrayList<String>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,property,null,false);
  for (  Statement triple : triples) {
    if (triple.getSubject() instanceof URI) {
      DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference)));
      graphs.add(graph);
      labels.add(triple.getObject().toString());
      graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
      Graphs.removeVerticesAndEdges(graph,null,blackList);
    }
  }
  return new GraphClassificationDataSet(label.toString(),graphs,labels);
}","public static GraphClassificationDataSet createClassificationDataSet(RDFDataSet rdfDataSet,String property,String invProperty,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphs=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<String> labels=new ArrayList<String>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,property,null,false);
  List<Statement> blackList;
  for (  Statement triple : triples) {
    if (triple.getSubject() instanceof URI) {
      blackList=new ArrayList<Statement>();
      blackList.add(rdfDataSet.createStatement((URI)triple.getSubject(),rdfDataSet.createURI(property),rdfDataSet.createURI(triple.getObject().toString())));
      blackList.add(rdfDataSet.createStatement(rdfDataSet.createURI(triple.getObject().toString()),rdfDataSet.createURI(invProperty),(URI)triple.getSubject()));
      DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference,blackList)));
      graphs.add(graph);
      labels.add(triple.getObject().toString());
      graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
      for (      Vertex<String> vertex : graph.getVertices()) {
        if (vertex.getLabel().equals(triple.getObject().toString())) {
          for (          Edge<String> edge : graph.getInEdges(vertex)) {
            if (graph.getSource(edge).getLabel().equals(triple.getSubject().toString())) {
              System.out.println(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  return new GraphClassificationDataSet(label.toString(),graphs,labels);
}"
51049,"public static LinkPredictionDataSet createLinkPredictonDataSet(RDFDataSet rdfDataSet,String classA,String classB,String property,List<String> blackList,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsA=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsB=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<Vertex<String>> rootVerticesA=new ArrayList<Vertex<String>>();
  List<Vertex<String>> rootVerticesB=new ArrayList<Vertex<String>>();
  Map<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean> labels=new HashMap<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classA,false);
  for (  Statement triple : triples) {
    DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference)));
    graphsA.add(graph);
    graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
    rootVerticesA.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classB,false);
  for (  Statement triple : triples) {
    DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference)));
    graphsB.add(graph);
    graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
    rootVerticesB.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  for (int i=0; i < rootVerticesA.size(); i++) {
    for (int j=0; j < rootVerticesB.size(); j++) {
      List<Statement> triples3=rdfDataSet.getStatementsFromStrings(rootVerticesA.get(i).getLabel(),null,rootVerticesB.get(j).getLabel(),false);
      labels.put(new Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),false);
      for (      Statement triple : triples3) {
        if (triple.getPredicate().toString().equals(property)) {
          labels.put(new Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),true);
        }
      }
    }
  }
  return new LinkPredictionDataSet(label.toString(),graphsA,graphsB,labels);
}","public static LinkPredictionDataSet createLinkPredictonDataSet(RDFDataSet rdfDataSet,String classA,String classB,String property,List<String> blackList,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsA=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsB=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<Vertex<String>> rootVerticesA=new ArrayList<Vertex<String>>();
  List<Vertex<String>> rootVerticesB=new ArrayList<Vertex<String>>();
  Map<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean> labels=new HashMap<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classA,false);
  for (  Statement triple : triples) {
    DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference,null)));
    graphsA.add(graph);
    graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
    rootVerticesA.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classB,false);
  for (  Statement triple : triples) {
    DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference,null)));
    graphsB.add(graph);
    graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
    rootVerticesB.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  for (int i=0; i < rootVerticesA.size(); i++) {
    for (int j=0; j < rootVerticesB.size(); j++) {
      List<Statement> triples3=rdfDataSet.getStatementsFromStrings(rootVerticesA.get(i).getLabel(),null,rootVerticesB.get(j).getLabel(),false);
      labels.put(new Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),false);
      for (      Statement triple : triples3) {
        if (triple.getPredicate().toString().equals(property)) {
          labels.put(new Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),true);
        }
      }
    }
  }
  return new LinkPredictionDataSet(label.toString(),graphsA,graphsB,labels);
}"
51050,"public LinkPredictionExperiment(LinkPredictionDataSet dataSet,GraphKernel kernelA,GraphKernel kernelB,double weightA,double weightB,long[] seeds,double[] cs,OutputStream outputStream){
  this.dataSet=dataSet;
  this.kernelA=kernelA;
  this.kernelB=kernelB;
  this.weightA=weightA;
  this.weightB=weightB;
  this.seeds=seeds;
  this.cs=cs;
  output=new PrintWriter(outputStream);
  results=new ExperimentResults();
  results.setAccuracy(new Result());
  results.setF1(new Result());
  results.setAveragePrecision(new Result());
  results.setrPrecision(new Result());
}","public LinkPredictionExperiment(LinkPredictionDataSet dataSet,GraphKernel kernelA,GraphKernel kernelB,double weightA,double weightB,long[] seeds,double[] cs,OutputStream outputStream){
  this.dataSet=dataSet;
  this.kernelA=kernelA;
  this.kernelB=kernelB;
  this.weightA=weightA;
  this.weightB=weightB;
  this.seeds=seeds;
  this.cs=cs;
  output=new PrintWriter(outputStream);
  results=new ExperimentResults();
  results.setAccuracy(new Result());
  results.setF1(new Result());
  results.setAveragePrecision(new Result());
  results.setrPrecision(new Result());
  results.setNdcg(new Result());
}"
51051,"/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<LinkPredictionDataSetParameters> dataSetsParams=new ArrayList<LinkPredictionDataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    LinkPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
          resultsWL.addResult(exp.getResults().getrPrecision());
          resultsWL.addResult(exp.getResults().getAveragePrecision());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
          resultsSTF.addResult(exp.getResults().getrPrecision());
          resultsSTF.addResult(exp.getResults().getAveragePrecision());
        }
      }
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
          resultsSTP.addResult(exp.getResults().getrPrecision());
          resultsSTP.addResult(exp.getResults().getAveragePrecision());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),new IntersectionGraphWalkKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
          resultsIGW.addResult(exp.getResults().getrPrecision());
          resultsIGW.addResult(exp.getResults().getAveragePrecision());
        }
      }
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),new IntersectionGraphPathKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
          resultsIGP.addResult(exp.getResults().getrPrecision());
          resultsIGP.addResult(exp.getResults().getAveragePrecision());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.out.println(resultsWL);
  System.out.println(resultsSTF);
  System.out.println(resultsSTP);
  System.out.println(resultsIGW);
  System.out.println(resultsIGP);
}","/** 
 * @param args
 */
public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<LinkPredictionDataSetParameters> dataSetsParams=new ArrayList<LinkPredictionDataSetParameters>();
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,false,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,false));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,1,true,true));
  dataSetsParams.add(new LinkPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bl,2,true,true));
  LinkPredictionDataSet dataset;
  LinkPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    LinkPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createLinkPredictonDataSet(params);
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new WLSubTreeKernel(i),new WLSubTreeKernel(i),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
          resultsWL.addResult(exp.getResults().getrPrecision());
          resultsWL.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),new IntersectionSubTreeKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
          resultsSTF.addResult(exp.getResults().getrPrecision());
          resultsSTF.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),new IntersectionPartialSubTreeKernel(i,0.01),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
          resultsSTP.addResult(exp.getResults().getrPrecision());
          resultsSTP.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsIGW.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),new IntersectionGraphWalkKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
          resultsIGW.addResult(exp.getResults().getrPrecision());
          resultsIGW.addResult(exp.getResults().getAveragePrecision());
        }
      }
      resultsIGP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + ""String_Node_Str"" + ""String_Node_Str""+ fileId+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new LinkPredictionExperiment(new LinkPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),new IntersectionGraphPathKernel(i,1),0.5,0.5,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
          resultsIGP.addResult(exp.getResults().getrPrecision());
          resultsIGP.addResult(exp.getResults().getAveragePrecision());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.out.println(resultsWL);
  System.out.println(resultsSTF);
  System.out.println(resultsSTP);
  System.out.println(resultsIGW);
  System.out.println(resultsIGP);
}"
51052,"public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<PropertyPredictionDataSetParameters> dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetB,""String_Node_Str"",""String_Node_Str"",2,true,true));
  PropertyPredictionDataSet dataset;
  PropertyPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          WLSubTreeKernel kernel=new WLSubTreeKernel(i,true,false);
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),kernel,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
        }
      }
      resultsIGP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
        }
      }
      resultsIGW.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    int fileId=(int)(Math.random() * 100000000);
    File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    PrintWriter fileOut=new PrintWriter(new FileOutputStream(file));
    fileOut.println(resultsWL);
    fileOut.println(resultsSTF);
    fileOut.println(resultsSTP);
    fileOut.println(resultsIGW);
    fileOut.println(resultsIGP);
    fileOut.println(resultsWL.allScoresToString());
    fileOut.println(resultsSTF.allScoresToString());
    fileOut.println(resultsSTP.allScoresToString());
    fileOut.println(resultsIGW.allScoresToString());
    fileOut.println(resultsIGP.allScoresToString());
    System.out.println(resultsWL);
    System.out.println(resultsSTF);
    System.out.println(resultsSTP);
    System.out.println(resultsIGW);
    System.out.println(resultsIGP);
    System.out.println(resultsWL.allScoresToString());
    System.out.println(resultsSTF.allScoresToString());
    System.out.println(resultsSTP.allScoresToString());
    System.out.println(resultsIGW.allScoresToString());
    System.out.println(resultsIGP.allScoresToString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  RDFDataSet testSetA=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(DATA_DIR + ""String_Node_Str"",RDFFormat.N3);
  List<PropertyPredictionDataSetParameters> dataSetsParams=new ArrayList<PropertyPredictionDataSetParameters>();
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={0.01,0.1,1,10,100};
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,false,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,false));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",1,true,true));
  dataSetsParams.add(new PropertyPredictionDataSetParameters(testSetA,""String_Node_Str"",""String_Node_Str"",2,true,true));
  PropertyPredictionDataSet dataset;
  PropertyPredictionExperiment exp;
  ResultsTable resultsWL=new ResultsTable();
  ResultsTable resultsSTF=new ResultsTable();
  ResultsTable resultsSTP=new ResultsTable();
  ResultsTable resultsIGW=new ResultsTable();
  ResultsTable resultsIGP=new ResultsTable();
  Experimenter experimenter=new Experimenter(NUMBER_OF_PROC);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  try {
    for (    PropertyPredictionDataSetParameters params : dataSetsParams) {
      dataset=DataSetFactory.createPropertyPredictionDataSet(params);
      dataset.removeSmallClasses(5);
      dataset.removeVertexAndEdgeLabels();
      resultsWL.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 10; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          WLSubTreeKernel kernel=new WLSubTreeKernel(i,true,false);
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),kernel,seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsWL.addResult(exp.getResults().getAccuracy());
          resultsWL.addResult(exp.getResults().getF1());
        }
      }
      resultsSTF.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionSubTreeKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTF.addResult(exp.getResults().getAccuracy());
          resultsSTF.addResult(exp.getResults().getF1());
        }
      }
      resultsSTP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=0; i < 4; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionPartialSubTreeKernel(i,0.01),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsSTP.addResult(exp.getResults().getAccuracy());
          resultsSTP.addResult(exp.getResults().getF1());
        }
      }
      resultsIGP.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphPathKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGP.addResult(exp.getResults().getAccuracy());
          resultsIGP.addResult(exp.getResults().getF1());
        }
      }
      resultsIGW.newRow(dataset.getLabel() + ""String_Node_Str"");
      for (int i=1; i < 3; i++) {
        if (experimenter.hasSpace()) {
          int fileId=(int)(Math.random() * 100000000);
          File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
          exp=new PropertyPredictionExperiment(new PropertyPredictionDataSet(dataset),new IntersectionGraphWalkKernel(i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          resultsIGW.addResult(exp.getResults().getAccuracy());
          resultsIGW.addResult(exp.getResults().getF1());
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    int fileId=(int)(Math.random() * 100000000);
    File file=new File(DATA_DIR + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    PrintWriter fileOut=new PrintWriter(new FileOutputStream(file));
    fileOut.println(resultsWL);
    fileOut.println(resultsSTF);
    fileOut.println(resultsSTP);
    fileOut.println(resultsIGW);
    fileOut.println(resultsIGP);
    fileOut.println(resultsWL.allScoresToString());
    fileOut.println(resultsSTF.allScoresToString());
    fileOut.println(resultsSTP.allScoresToString());
    fileOut.println(resultsIGW.allScoresToString());
    fileOut.println(resultsIGP.allScoresToString());
    System.out.println(resultsWL);
    System.out.println(resultsSTF);
    System.out.println(resultsSTP);
    System.out.println(resultsIGW);
    System.out.println(resultsIGP);
    System.out.println(resultsWL.allScoresToString());
    System.out.println(resultsSTF.allScoresToString());
    System.out.println(resultsSTP.allScoresToString());
    System.out.println(resultsIGW.allScoresToString());
    System.out.println(resultsIGP.allScoresToString());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
51053,"public void run(){
  double[] accScores=new double[seeds.length];
  double[] fScores=new double[seeds.length];
  double[][] matrix=new double[1][1];
  double[] target;
  if (maxClassSize == 0) {
    matrix=kernel.compute(dataSet.getGraphs());
  }
  for (int i=0; i < seeds.length; i++) {
    if (maxClassSize == 0) {
      matrix=kernel.shuffle(matrix,seeds[i]);
      dataSet.shuffle(seeds[i]);
      target=LibSVM.createTargets(dataSet.getLabels());
    }
 else {
      PropertyPredictionDataSet subset=dataSet.getSubSet(maxClassSize,seeds[i]);
      matrix=kernel.compute(subset.getGraphs());
      target=LibSVM.createTargets(subset.getLabels());
    }
    double[] prediction=LibSVM.crossValidate(matrix,target,10,cs);
    accScores[i]=LibSVM.computeAccuracy(target,prediction);
    fScores[i]=LibSVM.computeF1(target,prediction);
  }
  Result accRes=results.getAccuracy();
  Result fRes=results.getF1();
  accRes.setLabel(""String_Node_Str"");
  fRes.setLabel(""String_Node_Str"");
  accRes.setScores(accScores);
  fRes.setScores(fScores);
  output.println(dataSet.getLabel());
  output.println(kernel.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + accRes.getScore());
  output.print(""String_Node_Str"" + fRes.getScore());
  output.println(""String_Node_Str"");
  output.print(""String_Node_Str"" + Arrays.toString(accScores));
  output.print(""String_Node_Str"" + Arrays.toString(fScores));
  output.println(""String_Node_Str"");
  output.flush();
  results.setLabel(dataSet.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs)+ ""String_Node_Str""+ kernel.getLabel());
  results.setAccuracy(accRes);
  results.setF1(fRes);
}","public void run(){
  double[] accScores=new double[seeds.length];
  double[] fScores=new double[seeds.length];
  double[][] matrix=new double[1][1];
  double[] target;
  if (maxClassSize == 0) {
    matrix=kernel.compute(dataSet.getGraphs());
  }
  for (int i=0; i < seeds.length; i++) {
    if (maxClassSize == 0) {
      matrix=kernel.shuffle(matrix,seeds[i]);
      dataSet.shuffle(seeds[i]);
      target=LibSVM.createTargets(dataSet.getLabels());
    }
 else {
      PropertyPredictionDataSet subset=dataSet.getSubSet(maxClassSize,seeds[i]);
      subset.shuffle(seeds[i]);
      matrix=kernel.compute(subset.getGraphs());
      target=LibSVM.createTargets(subset.getLabels());
    }
    double[] prediction=LibSVM.crossValidate(matrix,target,10,cs);
    accScores[i]=LibSVM.computeAccuracy(target,prediction);
    fScores[i]=LibSVM.computeF1(target,prediction);
  }
  Result accRes=results.getAccuracy();
  Result fRes=results.getF1();
  accRes.setLabel(""String_Node_Str"");
  fRes.setLabel(""String_Node_Str"");
  accRes.setScores(accScores);
  fRes.setScores(fScores);
  output.println(dataSet.getLabel());
  output.println(kernel.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + accRes.getScore());
  output.print(""String_Node_Str"" + fRes.getScore());
  output.println(""String_Node_Str"");
  output.print(""String_Node_Str"" + Arrays.toString(accScores));
  output.print(""String_Node_Str"" + Arrays.toString(fScores));
  output.println(""String_Node_Str"");
  output.flush();
  results.setLabel(dataSet.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs)+ ""String_Node_Str""+ kernel.getLabel());
  results.setAccuracy(accRes);
  results.setF1(fRes);
}"
51054,"public static LinkPredictionDataSet createLinkPredictonDataSet(RDFDataSet rdfDataSet,String classA,String classB,String property,List<String> blackList,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedGraph<Vertex<String>,Edge<String>>> graphsA=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  List<DirectedGraph<Vertex<String>,Edge<String>>> graphsB=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  List<Vertex<String>> rootVerticesA=new ArrayList<Vertex<String>>();
  List<Vertex<String>> rootVerticesB=new ArrayList<Vertex<String>>();
  Map<Pair<DirectedGraph<Vertex<String>,Edge<String>>>,Boolean> labels=new HashMap<Pair<DirectedGraph<Vertex<String>,Edge<String>>>,Boolean>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classA,false);
  for (  Statement triple : triples) {
    DirectedGraph<Vertex<String>,Edge<String>> graph=GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference));
    graphsA.add(graph);
    rootVerticesA.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classB,false);
  for (  Statement triple : triples) {
    DirectedGraph<Vertex<String>,Edge<String>> graph=GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference));
    graphsB.add(graph);
    rootVerticesB.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  for (int i=0; i < rootVerticesA.size(); i++) {
    for (int j=0; j < rootVerticesB.size(); j++) {
      List<Statement> triples3=rdfDataSet.getStatementsFromStrings(rootVerticesA.get(i).getLabel(),null,rootVerticesB.get(j).getLabel(),false);
      labels.put(new Pair<DirectedGraph<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),false);
      for (      Statement triple : triples3) {
        if (triple.getPredicate().toString().equals(property)) {
          labels.put(new Pair<DirectedGraph<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),true);
        }
      }
    }
  }
  return new LinkPredictionDataSet(label.toString(),graphsA,graphsB,rootVerticesA,rootVerticesB,labels);
}","public static LinkPredictionDataSet createLinkPredictonDataSet(RDFDataSet rdfDataSet,String classA,String classB,String property,List<String> blackList,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsA=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsB=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  List<Vertex<String>> rootVerticesA=new ArrayList<Vertex<String>>();
  List<Vertex<String>> rootVerticesB=new ArrayList<Vertex<String>>();
  Map<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean> labels=new HashMap<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classA,false);
  for (  Statement triple : triples) {
    DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference)));
    graphsA.add(graph);
    graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
    rootVerticesA.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  triples=rdfDataSet.getStatementsFromStrings(null,""String_Node_Str"",classB,false);
  for (  Statement triple : triples) {
    DirectedMultigraphWithRoot<Vertex<String>,Edge<String>> graph=GraphFactory.copyDirectedGraph2GraphWithRoot(GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference)));
    graphsB.add(graph);
    graph.setRootVertex((findVertex(graph,triple.getSubject().toString())));
    rootVerticesB.add(findVertex(graph,triple.getSubject().toString()));
    Graphs.removeVerticesAndEdges(graph,null,blackList);
  }
  for (int i=0; i < rootVerticesA.size(); i++) {
    for (int j=0; j < rootVerticesB.size(); j++) {
      List<Statement> triples3=rdfDataSet.getStatementsFromStrings(rootVerticesA.get(i).getLabel(),null,rootVerticesB.get(j).getLabel(),false);
      labels.put(new Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),false);
      for (      Statement triple : triples3) {
        if (triple.getPredicate().toString().equals(property)) {
          labels.put(new Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>(graphsA.get(i),graphsB.get(j)),true);
        }
      }
    }
  }
  return new LinkPredictionDataSet(label.toString(),graphsA,graphsB,labels);
}"
51055,"public Map<Pair<DirectedGraph<Vertex<String>,Edge<String>>>,Boolean> getLabels(){
  return labels;
}","public Map<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean> getLabels(){
  return labels;
}"
51056,"public List<DirectedGraph<Vertex<String>,Edge<String>>> getGraphsA(){
  return graphsA;
}","public List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> getGraphsA(){
  return graphsA;
}"
51057,"public List<DirectedGraph<Vertex<String>,Edge<String>>> getGraphsB(){
  return graphsB;
}","public List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> getGraphsB(){
  return graphsB;
}"
51058,"public LinkPredictionDataSet(String label,List<DirectedGraph<Vertex<String>,Edge<String>>> graphsA,List<DirectedGraph<Vertex<String>,Edge<String>>> graphsB,List<Vertex<String>> rootVerticesA,List<Vertex<String>> rootVerticesB,Map<Pair<DirectedGraph<Vertex<String>,Edge<String>>>,Boolean> labels){
  super();
  this.label=label;
  this.graphsA=graphsA;
  this.graphsB=graphsB;
  this.rootVerticesA=rootVerticesA;
  this.rootVerticesB=rootVerticesB;
  this.labels=labels;
}","public LinkPredictionDataSet(String label,List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsA,List<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> graphsB,Map<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>,Boolean> labels){
  super();
  this.label=label;
  this.graphsA=graphsA;
  this.graphsB=graphsB;
  this.labels=labels;
}"
51059,"public void shuffle(long seed){
  Collections.shuffle(graphsA,new Random(seed));
  Collections.shuffle(graphsB,new Random(seed));
  Collections.shuffle(rootVerticesA,new Random(seed));
  Collections.shuffle(rootVerticesB,new Random(seed));
}","public void shuffle(long seed){
  Collections.shuffle(graphsA,new Random(seed));
  Collections.shuffle(graphsB,new Random(seed));
}"
51060,"private double[][] combineTestKernels(double[][] matrixA,double[][] matrixB){
  double[][] matrix=new double[testSet.size()][trainSet.size()];
  Pair<DirectedGraph<Vertex<String>,Edge<String>>> pairA, pairB;
  for (int i=0; i < testSet.size(); i++) {
    pairA=testSet.get(i);
    for (int j=i; j < trainSet.size(); j++) {
      pairB=trainSet.get(j);
      matrix[i][j]=weightA * matrixA[testGraphsA.indexOf(pairA.getFirst())][trainGraphsA.indexOf(pairB.getFirst())] + weightB * matrixB[testGraphsB.indexOf(pairA.getSecond())][trainGraphsB.indexOf(pairB.getSecond())];
    }
  }
  return matrix;
}","private double[][] combineTestKernels(double[][] matrixA,double[][] matrixB){
  double[][] matrix=new double[testSet.size()][trainSet.size()];
  Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pairA, pairB;
  for (int i=0; i < testSet.size(); i++) {
    pairA=testSet.get(i);
    for (int j=i; j < trainSet.size(); j++) {
      pairB=trainSet.get(j);
      matrix[i][j]=weightA * matrixA[testGraphsA.indexOf(pairA.getFirst())][trainGraphsA.indexOf(pairB.getFirst())] + weightB * matrixB[testGraphsB.indexOf(pairA.getSecond())][trainGraphsB.indexOf(pairB.getSecond())];
    }
  }
  return matrix;
}"
51061,"private void createRandomSubSet(int trainSetSize,int testSetSize,long seed){
  List<Pair<DirectedGraph<Vertex<String>,Edge<String>>>> allPairs=new ArrayList<Pair<DirectedGraph<Vertex<String>,Edge<String>>>>(dataSet.getLabels().keySet());
  trainGraphsA=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  trainGraphsB=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  testGraphsA=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  testGraphsB=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  trainSet=new ArrayList<Pair<DirectedGraph<Vertex<String>,Edge<String>>>>();
  testSet=new ArrayList<Pair<DirectedGraph<Vertex<String>,Edge<String>>>>();
  Collections.shuffle(allPairs,new Random(seed));
  boolean classLabel=false;
  int posClass=0, testPosClass=0;
  int negClass=0, testNegClass=0;
  int totalPos=0;
  for (  Pair<DirectedGraph<Vertex<String>,Edge<String>>> pair : allPairs) {
    if (dataSet.getLabels().get(pair)) {
      totalPos++;
    }
  }
  long testPosSize=Math.round(((double)totalPos / (double)allPairs.size()) * ((double)testSetSize));
  long testNegSize=Math.round(((double)(allPairs.size() - totalPos) / (double)allPairs.size()) * ((double)testSetSize));
  for (  Pair<DirectedGraph<Vertex<String>,Edge<String>>> pair : allPairs) {
    classLabel=dataSet.getLabels().get(pair);
    if (classLabel) {
      if (posClass < trainSetSize / 2) {
        trainSet.add(pair);
        posClass++;
        if (!trainGraphsA.contains(pair.getFirst())) {
          trainGraphsA.add(pair.getFirst());
        }
        if (!trainGraphsB.contains(pair.getSecond())) {
          trainGraphsB.add(pair.getSecond());
        }
      }
 else       if (testPosClass < testPosSize) {
        testSet.add(pair);
        testPosClass++;
        if (!testGraphsA.contains(pair.getFirst())) {
          testGraphsA.add(pair.getFirst());
        }
        if (!testGraphsB.contains(pair.getSecond())) {
          testGraphsB.add(pair.getSecond());
        }
      }
    }
 else {
      if (negClass < trainSetSize / 2) {
        trainSet.add(pair);
        negClass++;
        if (!trainGraphsA.contains(pair.getFirst())) {
          trainGraphsA.add(pair.getFirst());
        }
        if (!trainGraphsB.contains(pair.getSecond())) {
          trainGraphsB.add(pair.getSecond());
        }
      }
 else       if (testNegClass < testNegSize) {
        testSet.add(pair);
        testNegClass++;
        if (!testGraphsA.contains(pair.getFirst())) {
          testGraphsA.add(pair.getFirst());
        }
        if (!testGraphsB.contains(pair.getSecond())) {
          testGraphsB.add(pair.getSecond());
        }
      }
      if (posClass == trainSetSize / 2 && negClass == trainSetSize / 2 && testPosClass == testPosSize && testNegClass == testNegSize) {
        break;
      }
    }
  }
}","private void createRandomSubSet(int trainSetSize,int testSetSize,long seed){
  List<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>> allPairs=new ArrayList<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>>(dataSet.getLabels().keySet());
  trainGraphsA=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  trainGraphsB=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  testGraphsA=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  testGraphsB=new ArrayList<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>();
  trainSet=new ArrayList<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>>();
  testSet=new ArrayList<Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>>>();
  Collections.shuffle(allPairs,new Random(seed));
  boolean classLabel=false;
  int posClass=0, testPosClass=0;
  int negClass=0, testNegClass=0;
  int totalPos=0;
  for (  Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : allPairs) {
    if (dataSet.getLabels().get(pair)) {
      totalPos++;
    }
  }
  long testPosSize=Math.round(((double)totalPos / (double)allPairs.size()) * ((double)testSetSize));
  long testNegSize=Math.round(((double)(allPairs.size() - totalPos) / (double)allPairs.size()) * ((double)testSetSize));
  for (  Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : allPairs) {
    classLabel=dataSet.getLabels().get(pair);
    if (classLabel) {
      if (posClass < trainSetSize / 2) {
        trainSet.add(pair);
        posClass++;
        if (!trainGraphsA.contains(pair.getFirst())) {
          trainGraphsA.add(pair.getFirst());
        }
        if (!trainGraphsB.contains(pair.getSecond())) {
          trainGraphsB.add(pair.getSecond());
        }
      }
 else       if (testPosClass < testPosSize) {
        testSet.add(pair);
        testPosClass++;
        if (!testGraphsA.contains(pair.getFirst())) {
          testGraphsA.add(pair.getFirst());
        }
        if (!testGraphsB.contains(pair.getSecond())) {
          testGraphsB.add(pair.getSecond());
        }
      }
    }
 else {
      if (negClass < trainSetSize / 2) {
        trainSet.add(pair);
        negClass++;
        if (!trainGraphsA.contains(pair.getFirst())) {
          trainGraphsA.add(pair.getFirst());
        }
        if (!trainGraphsB.contains(pair.getSecond())) {
          trainGraphsB.add(pair.getSecond());
        }
      }
 else       if (testNegClass < testNegSize) {
        testSet.add(pair);
        testNegClass++;
        if (!testGraphsA.contains(pair.getFirst())) {
          testGraphsA.add(pair.getFirst());
        }
        if (!testGraphsB.contains(pair.getSecond())) {
          testGraphsB.add(pair.getSecond());
        }
      }
      if (posClass == trainSetSize / 2 && negClass == trainSetSize / 2 && testPosClass == testPosSize && testNegClass == testNegSize) {
        break;
      }
    }
  }
}"
51062,"private double[][] combineTrainKernels(double[][] matrixA,double[][] matrixB){
  double[][] matrix=new double[trainSet.size()][trainSet.size()];
  Pair<DirectedGraph<Vertex<String>,Edge<String>>> pairA, pairB;
  for (int i=0; i < trainSet.size(); i++) {
    pairA=trainSet.get(i);
    for (int j=i; j < trainSet.size(); j++) {
      pairB=trainSet.get(j);
      matrix[i][j]=weightA * matrixA[trainGraphsA.indexOf(pairA.getFirst())][trainGraphsA.indexOf(pairB.getFirst())] + weightB * matrixB[trainGraphsB.indexOf(pairA.getSecond())][trainGraphsB.indexOf(pairB.getSecond())];
      matrix[j][i]=matrix[i][j];
    }
  }
  return matrix;
}","private double[][] combineTrainKernels(double[][] matrixA,double[][] matrixB){
  double[][] matrix=new double[trainSet.size()][trainSet.size()];
  Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pairA, pairB;
  for (int i=0; i < trainSet.size(); i++) {
    pairA=trainSet.get(i);
    for (int j=i; j < trainSet.size(); j++) {
      pairB=trainSet.get(j);
      matrix[i][j]=weightA * matrixA[trainGraphsA.indexOf(pairA.getFirst())][trainGraphsA.indexOf(pairB.getFirst())] + weightB * matrixB[trainGraphsB.indexOf(pairA.getSecond())][trainGraphsB.indexOf(pairB.getSecond())];
      matrix[j][i]=matrix[i][j];
    }
  }
  return matrix;
}"
51063,"@Override public void run(){
  double acc=0, f=0;
  double p5=0, p10=0, p20=0;
  double map=0, rPrec=0;
  List<String> labels;
  for (int i=0; i < seeds.length; i++) {
    createRandomSubSet(200,200,seeds[i]);
    double[][] matrixA=kernelA.compute(trainGraphsA);
    double[][] matrixB=kernelB.compute(trainGraphsB);
    double[][] testMatrixA=kernelA.compute(trainGraphsA,testGraphsA);
    double[][] testMatrixB=kernelB.compute(trainGraphsB,testGraphsB);
    double[][] matrix=combineTrainKernels(matrixA,matrixB);
    Collections.shuffle(trainSet,new Random(seeds[i]));
    labels=new ArrayList<String>();
    for (    Pair<DirectedGraph<Vertex<String>,Edge<String>>> pair : trainSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    Map<String,Integer> labelMap=new TreeMap<String,Integer>();
    labelMap.put(""String_Node_Str"",1);
    labelMap.put(""String_Node_Str"",-1);
    LibSVMModel model=LibSVM.trainSVMModel(matrix,LibSVM.createTargets(labels,labelMap),new LibSVMParameters(cs));
    double[][] testMatrix=combineTestKernels(testMatrixA,testMatrixB);
    labels=new ArrayList<String>();
    for (    Pair<DirectedGraph<Vertex<String>,Edge<String>>> pair : testSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    LibSVMPrediction[] pred=LibSVM.testSVMModel(model,testMatrix);
    double[] target=LibSVM.createTargets(labels,labelMap);
    acc+=LibSVM.computeAccuracy(target,LibSVM.extractLabels(pred));
    f+=LibSVM.computeF1(target,LibSVM.extractLabels(pred));
    p5+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),5,1);
    p10+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),10,1);
    p20+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),20,1);
    map+=LibSVM.computeAveragePrecision(target,LibSVM.computeRanking(pred),1);
    rPrec+=LibSVM.computeRPrecision(target,LibSVM.computeRanking(pred),1);
  }
  acc=acc / seeds.length;
  f=f / seeds.length;
  p5=p5 / seeds.length;
  p10=p10 / seeds.length;
  p20=p20 / seeds.length;
  map=map / seeds.length;
  rPrec=rPrec / seeds.length;
  results.setAccuracy(acc);
  results.setF1(f);
  results.setAveragePrecision(map);
  results.setrPrecision(rPrec);
  output.println(dataSet.getLabel());
  output.println(kernelA.getLabel() + ""String_Node_Str"" + weightA+ ""String_Node_Str""+ kernelB.getLabel()+ ""String_Node_Str""+ weightB+ ""String_Node_Str""+ Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + acc);
  output.print(""String_Node_Str"" + f);
  output.print(""String_Node_Str"" + p5);
  output.print(""String_Node_Str"" + p10);
  output.print(""String_Node_Str"" + p20);
  output.print(""String_Node_Str"" + map);
  output.print(""String_Node_Str"" + rPrec);
  output.println(""String_Node_Str"");
  output.flush();
}","@Override public void run(){
  double acc=0, f=0;
  double p5=0, p10=0, p20=0;
  double map=0, rPrec=0;
  List<String> labels;
  for (int i=0; i < seeds.length; i++) {
    createRandomSubSet(200,200,seeds[i]);
    double[][] matrixA=kernelA.compute(trainGraphsA);
    double[][] matrixB=kernelB.compute(trainGraphsB);
    double[][] testMatrixA=kernelA.compute(trainGraphsA,testGraphsA);
    double[][] testMatrixB=kernelB.compute(trainGraphsB,testGraphsB);
    double[][] matrix=combineTrainKernels(matrixA,matrixB);
    Collections.shuffle(trainSet,new Random(seeds[i]));
    labels=new ArrayList<String>();
    for (    Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : trainSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    Map<String,Integer> labelMap=new TreeMap<String,Integer>();
    labelMap.put(""String_Node_Str"",1);
    labelMap.put(""String_Node_Str"",-1);
    LibSVMModel model=LibSVM.trainSVMModel(matrix,LibSVM.createTargets(labels,labelMap),new LibSVMParameters(cs));
    double[][] testMatrix=combineTestKernels(testMatrixA,testMatrixB);
    labels=new ArrayList<String>();
    for (    Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : testSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    LibSVMPrediction[] pred=LibSVM.testSVMModel(model,testMatrix);
    double[] target=LibSVM.createTargets(labels,labelMap);
    acc+=LibSVM.computeAccuracy(target,LibSVM.extractLabels(pred));
    f+=LibSVM.computeF1(target,LibSVM.extractLabels(pred));
    p5+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),5,1);
    p10+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),10,1);
    p20+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),20,1);
    map+=LibSVM.computeAveragePrecision(target,LibSVM.computeRanking(pred),1);
    rPrec+=LibSVM.computeRPrecision(target,LibSVM.computeRanking(pred),1);
  }
  acc=acc / seeds.length;
  f=f / seeds.length;
  p5=p5 / seeds.length;
  p10=p10 / seeds.length;
  p20=p20 / seeds.length;
  map=map / seeds.length;
  rPrec=rPrec / seeds.length;
  results.setAccuracy(acc);
  results.setF1(f);
  results.setAveragePrecision(map);
  results.setrPrecision(rPrec);
  output.println(dataSet.getLabel());
  output.println(kernelA.getLabel() + ""String_Node_Str"" + weightA+ ""String_Node_Str""+ kernelB.getLabel()+ ""String_Node_Str""+ weightB+ ""String_Node_Str""+ Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + acc);
  output.print(""String_Node_Str"" + f);
  output.print(""String_Node_Str"" + p5);
  output.print(""String_Node_Str"" + p10);
  output.print(""String_Node_Str"" + p20);
  output.print(""String_Node_Str"" + map);
  output.print(""String_Node_Str"" + rPrec);
  output.println(""String_Node_Str"");
  output.flush();
}"
51064,"@Override public void run(){
  double acc=0, f=0;
  double p5=0, p10=0, p20=0;
  double map=0, rPrec=0;
  List<String> labels;
  for (int i=0; i < seeds.length; i++) {
    createRandomSubSet(200,200,seeds[i]);
    double[][] matrixA=kernelA.compute(trainGraphsA);
    double[][] matrixB=kernelB.compute(trainGraphsB);
    double[][] testMatrixA=kernelA.compute(trainGraphsA,testGraphsA);
    double[][] testMatrixB=kernelB.compute(trainGraphsB,testGraphsB);
    double[][] matrix=combineTrainKernels(matrixA,matrixB);
    Collections.shuffle(trainSet,new Random(seeds[i]));
    labels=new ArrayList<String>();
    for (    Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : trainSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    Map<String,Integer> labelMap=new TreeMap<String,Integer>();
    labelMap.put(""String_Node_Str"",1);
    labelMap.put(""String_Node_Str"",-1);
    LibSVMModel model=LibSVM.trainSVMModel(matrix,LibSVM.createTargets(labels,labelMap),new LibSVMParameters(cs));
    double[][] testMatrix=combineTestKernels(testMatrixA,testMatrixB);
    labels=new ArrayList<String>();
    for (    Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : testSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    LibSVMPrediction[] pred=LibSVM.testSVMModel(model,testMatrix);
    double[] target=LibSVM.createTargets(labels,labelMap);
    acc+=LibSVM.computeAccuracy(target,LibSVM.extractLabels(pred));
    f+=LibSVM.computeF1(target,LibSVM.extractLabels(pred));
    p5+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),5,1);
    p10+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),10,1);
    p20+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),20,1);
    map+=LibSVM.computeAveragePrecision(target,LibSVM.computeRanking(pred),1);
    rPrec+=LibSVM.computeRPrecision(target,LibSVM.computeRanking(pred),1);
  }
  acc=acc / seeds.length;
  f=f / seeds.length;
  p5=p5 / seeds.length;
  p10=p10 / seeds.length;
  p20=p20 / seeds.length;
  map=map / seeds.length;
  rPrec=rPrec / seeds.length;
  results.setAccuracy(acc);
  results.setF1(f);
  results.setAveragePrecision(map);
  results.setrPrecision(rPrec);
  output.println(dataSet.getLabel());
  output.println(kernelA.getLabel() + ""String_Node_Str"" + weightA+ ""String_Node_Str""+ kernelB.getLabel()+ ""String_Node_Str""+ weightB+ ""String_Node_Str""+ Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + acc);
  output.print(""String_Node_Str"" + f);
  output.print(""String_Node_Str"" + p5);
  output.print(""String_Node_Str"" + p10);
  output.print(""String_Node_Str"" + p20);
  output.print(""String_Node_Str"" + map);
  output.print(""String_Node_Str"" + rPrec);
  output.println(""String_Node_Str"");
  output.flush();
}","@Override public void run(){
  double acc=0, f=0;
  double p5=0, p10=0, p20=0;
  double map=0, rPrec=0;
  List<String> labels;
  for (int i=0; i < seeds.length; i++) {
    createRandomSubSet(200,200,seeds[i]);
    double[][] matrixA=kernelA.compute(trainGraphsA);
    double[][] matrixB=kernelB.compute(trainGraphsB);
    double[][] testMatrixA=kernelA.compute(trainGraphsA,testGraphsA);
    double[][] testMatrixB=kernelB.compute(trainGraphsB,testGraphsB);
    double[][] matrix=combineTrainKernels(matrixA,matrixB);
    Collections.shuffle(trainSet,new Random(seeds[i]));
    labels=new ArrayList<String>();
    for (    Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : trainSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    Map<String,Integer> labelMap=new TreeMap<String,Integer>();
    labelMap.put(""String_Node_Str"",1);
    labelMap.put(""String_Node_Str"",-1);
    LibSVMModel model=LibSVM.trainSVMModel(matrix,LibSVM.createTargets(labels,labelMap),new LibSVMParameters(cs));
    double[][] testMatrix=combineTestKernels(testMatrixA,testMatrixB);
    labels=new ArrayList<String>();
    for (    Pair<DirectedMultigraphWithRoot<Vertex<String>,Edge<String>>> pair : testSet) {
      if (dataSet.getLabels().get(pair)) {
        labels.add(""String_Node_Str"");
      }
 else {
        labels.add(""String_Node_Str"");
      }
    }
    LibSVMPrediction[] pred=LibSVM.testSVMModel(model,testMatrix);
    double[] target=LibSVM.createTargets(labels,labelMap);
    acc+=LibSVM.computeAccuracy(target,LibSVM.extractLabels(pred));
    f+=LibSVM.computeF1(target,LibSVM.extractLabels(pred));
    p5+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),5,1);
    p10+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),10,1);
    p20+=LibSVM.computePrecisionAt(target,LibSVM.computeRanking(pred),20,1);
    map+=LibSVM.computeAveragePrecision(target,LibSVM.computeRanking(pred),1);
    rPrec+=LibSVM.computeRPrecision(target,LibSVM.computeRanking(pred),1);
  }
  acc=acc / seeds.length;
  f=f / seeds.length;
  p5=p5 / seeds.length;
  p10=p10 / seeds.length;
  p20=p20 / seeds.length;
  map=map / seeds.length;
  rPrec=rPrec / seeds.length;
  results.setLabel(dataSet.getLabel() + ""String_Node_Str"" + Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs)+ ""String_Node_Str""+ kernelA.getLabel()+ ""String_Node_Str""+ kernelB.getLabel());
  results.setAccuracy(acc);
  results.setF1(f);
  results.setAveragePrecision(map);
  results.setrPrecision(rPrec);
  output.println(dataSet.getLabel());
  output.println(kernelA.getLabel() + ""String_Node_Str"" + weightA+ ""String_Node_Str""+ kernelB.getLabel()+ ""String_Node_Str""+ weightB+ ""String_Node_Str""+ Arrays.toString(seeds)+ ""String_Node_Str""+ Arrays.toString(cs));
  output.print(""String_Node_Str"" + acc);
  output.print(""String_Node_Str"" + f);
  output.print(""String_Node_Str"" + p5);
  output.print(""String_Node_Str"" + p10);
  output.print(""String_Node_Str"" + p20);
  output.print(""String_Node_Str"" + map);
  output.print(""String_Node_Str"" + rPrec);
  output.println(""String_Node_Str"");
  output.flush();
}"
51065,"public ClassificationExperiment(GraphClassificationDataSet dataSet,GraphKernel kernel,long[] seeds,double[] cs,OutputStream outputStream){
  this.dataSet=dataSet;
  this.kernel=kernel;
  this.seeds=seeds;
  this.cs=cs;
  output=new PrintWriter(outputStream);
  results=new ExperimentResults();
}","public ClassificationExperiment(GraphClassificationDataSet dataSet,GraphKernel kernel,long[] seeds,double[] cs,OutputStream outputStream){
  this.dataSet=new GraphClassificationDataSet(dataSet);
  this.kernel=kernel;
  this.seeds=seeds;
  this.cs=cs;
  output=new PrintWriter(outputStream);
  results=new ExperimentResults();
}"
51066,"public static GraphClassificationDataSet createClassificationDataSet(RDFDataSet rdfDataSet,String property,List<String> blackList,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedGraph<Vertex<String>,Edge<String>>> graphs=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  List<String> labels=new ArrayList<String>();
  List<Vertex<String>> rootVertices=new ArrayList<Vertex<String>>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,property,null,false);
  for (  Statement triple : triples) {
    if (triple.getSubject() instanceof URI) {
      DirectedGraph<Vertex<String>,Edge<String>> graph=GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference));
      graphs.add(graph);
      labels.add(triple.getObject().toString());
      rootVertices.add(findVertex(graph,triple.getSubject().toString()));
      Graphs.removeVerticesAndEdges(graph,null,blackList);
    }
  }
  return new GraphClassificationDataSet(label.toString(),graphs,labels,rootVertices);
}","public static GraphClassificationDataSet createClassificationDataSet(RDFDataSet rdfDataSet,String property,List<String> blackList,int depth,boolean includeInverse,boolean includeInference){
  List<DirectedGraph<Vertex<String>,Edge<String>>> graphs=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>();
  List<String> labels=new ArrayList<String>();
  List<Vertex<String>> rootVertices=new ArrayList<Vertex<String>>();
  StringBuffer label=new StringBuffer();
  label.append(rdfDataSet.getLabel());
  label.append(""String_Node_Str"");
  label.append(property);
  label.append(""String_Node_Str"");
  label.append(depth);
  label.append(""String_Node_Str"");
  label.append(includeInverse);
  label.append(""String_Node_Str"");
  label.append(includeInference);
  List<Statement> triples=rdfDataSet.getStatementsFromStrings(null,property,null,false);
  for (  Statement triple : triples) {
    if (triple.getSubject() instanceof URI) {
      DirectedGraph<Vertex<String>,Edge<String>> graph=GraphFactory.createDirectedGraph(rdfDataSet.getSubGraph((URI)triple.getSubject(),depth,includeInverse,includeInference));
      graphs.add(graph);
      labels.add(triple.getObject().toString());
      rootVertices.add(findVertex(graph,triple.getSubject().toString()));
      Graphs.removeVerticesAndEdges(graph,null,blackList);
    }
  }
  return new GraphClassificationDataSet(label.toString(),graphs,labels,Collections.unmodifiableList(rootVertices));
}"
51067,"public GraphClassificationDataSet(String label,List<DirectedGraph<Vertex<String>,Edge<String>>> graphs,List<String> labels,List<Vertex<String>> rootVertices){
  super();
  this.label=label;
  this.graphs=graphs;
  this.labels=labels;
  this.rootVertices=rootVertices;
}","public GraphClassificationDataSet(GraphClassificationDataSet set){
  this.label=new String(set.getLabel());
  this.graphs=new ArrayList<DirectedGraph<Vertex<String>,Edge<String>>>(set.getGraphs());
  this.labels=new ArrayList<String>(set.getLabels());
  this.rootVertices=new ArrayList<Vertex<String>>(set.getRootVertices());
}"
51068,"@Test public void test(){
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  RDFDataSet testSetA=new RDFFileDataSet(""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(""String_Node_Str"",RDFFormat.N3);
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={1};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,true));
  GraphClassificationDataSet dataset;
  ClassificationExperiment exp;
  List<ExperimentResults> results=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(3);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  int j=0;
  for (  DataSetParameters params : dataSetsParams) {
    for (int i=0; i < 3; i++) {
      if (experimenter.hasSpace()) {
        dataset=DataSetFactory.createClassificationDataSet(params);
        dataset.removeSmallClasses(5);
        int fileId=(int)(Math.random() * 10000000);
        File file=new File(""String_Node_Str"" + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
        try {
          exp=new ClassificationExperiment(dataset,new WLSubTreeKernel(dataset.getGraphs(),i),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          results.add(exp.getResults());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    j++;
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : results) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}","@Test public void test(){
  List<DataSetParameters> dataSetsParams=new ArrayList<DataSetParameters>();
  RDFDataSet testSetA=new RDFFileDataSet(""String_Node_Str"",RDFFormat.RDFXML);
  RDFDataSet testSetB=new RDFFileDataSet(""String_Node_Str"",RDFFormat.N3);
  List<String> bl=new ArrayList<String>();
  bl.add(""String_Node_Str"");
  bl.add(""String_Node_Str"");
  long[] seeds={11,21,31,41,51,61,71,81,91,101};
  double[] cs={1};
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,false));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,1,false,true));
  dataSetsParams.add(new DataSetParameters(testSetA,""String_Node_Str"",bl,2,false,true));
  GraphClassificationDataSet dataset;
  ClassificationExperiment exp;
  List<ExperimentResults> results=new ArrayList<ExperimentResults>();
  Experimenter experimenter=new Experimenter(3);
  Thread expT=new Thread(experimenter);
  expT.setDaemon(true);
  expT.start();
  int j=0;
  for (  DataSetParameters params : dataSetsParams) {
    dataset=DataSetFactory.createClassificationDataSet(params);
    dataset.removeSmallClasses(5);
    for (int i=0; i < 3; i++) {
      if (experimenter.hasSpace()) {
        int fileId=(int)(Math.random() * 10000000);
        File file=new File(""String_Node_Str"" + fileId + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ i+ ""String_Node_Str"");
        try {
          exp=new ClassificationExperiment(dataset,new IntersectionSubTreeKernel(dataset.getGraphs(),dataset.getRootVertices(),i,1),seeds,cs,new FileOutputStream(file));
          experimenter.addExperiment(exp);
          results.add(exp.getResults());
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    j++;
  }
  experimenter.stop();
  while (expT.isAlive()) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  for (  ExperimentResults res : results) {
    System.out.println(res.getLabel() + ""String_Node_Str"" + res.getAccuracy()+ ""String_Node_Str""+ res.getF1());
  }
}"
51069,"@Override public ClientResponse handle(final ClientRequest request) throws ClientHandlerException {
  boolean reqHadAuthHeaders=false;
  if (state.get().nextNonce != null) {
    reqHadAuthHeaders=true;
    String qopStr=null;
    if (state.get().qop != null) {
      qopStr=(state.get().qop == QOP.AUTH_INT) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StringBuffer buff=new StringBuffer();
    buff.append(""String_Node_Str"");
    addKeyVal(buff,""String_Node_Str"",this.user);
    addKeyVal(buff,""String_Node_Str"",state.get().realm);
    addKeyVal(buff,""String_Node_Str"",state.get().nextNonce);
    if (state.get().opaque != null) {
      addKeyVal(buff,""String_Node_Str"",state.get().opaque);
    }
    if (state.get().algorithm != null) {
      addKeyVal(buff,""String_Node_Str"",state.get().algorithm,false);
    }
    if (state.get().qop != null) {
      addKeyVal(buff,""String_Node_Str"",qopStr,false);
    }
    String HA1=md5ForJoined(this.user.getBytes(CHARACTER_SET),state.get().realm.getBytes(CHARACTER_SET),this.password);
    String uri=request.getURI().getPath();
    addKeyVal(buff,""String_Node_Str"",uri);
    String HA2;
    if (state.get().qop == QOP.AUTH_INT && (request.getEntity() != null)) {
      HA2=md5ForJoined(request.getMethod(),uri,request.getEntity().toString());
    }
 else {
      HA2=md5ForJoined(request.getMethod(),uri);
    }
    String response;
    if (state.get().qop == null) {
      response=md5ForJoined(HA1,state.get().nextNonce,HA2);
    }
 else {
      String cnonce=randHexBytes(CNONCE_NB_BYTES);
      String nc=String.format(""String_Node_Str"",state.get().counter);
      state.get().counter+=1;
      addKeyVal(buff,""String_Node_Str"",cnonce);
      addKeyVal(buff,""String_Node_Str"",nc,false);
      response=md5ForJoined(HA1,state.get().nextNonce,nc,cnonce,qopStr,HA2);
    }
    addKeyVal(buff,""String_Node_Str"",response);
    buff.deleteCharAt(buff.length() - 1);
    String authLine=buff.toString();
    request.getHeaders().add(HttpHeaders.AUTHORIZATION,authLine);
  }
  ClientResponse response=getNext().handle(request);
  if (response.getClientResponseStatus() == Status.UNAUTHORIZED) {
    HashMap<String,String> map=parseHeaders(response.getHeaders().get(HttpHeaders.WWW_AUTHENTICATE));
    if (map == null) {
      return response;
    }
    state.get().realm=map.get(""String_Node_Str"");
    state.get().nextNonce=map.get(""String_Node_Str"");
    state.get().opaque=map.get(""String_Node_Str"");
    state.get().algorithm=map.get(""String_Node_Str"");
    state.get().domain=map.get(""String_Node_Str"");
    String qop=map.get(""String_Node_Str"");
    if (qop == null) {
      state.get().qop=null;
    }
 else {
      if (qop.contains(""String_Node_Str"")) {
        state.get().qop=QOP.AUTH_INT;
      }
 else       if (qop.contains(""String_Node_Str"")) {
        state.get().qop=QOP.AUTH;
      }
 else {
        state.get().qop=null;
      }
    }
    String staleStr=map.get(""String_Node_Str"");
    boolean stale=(staleStr != null) && staleStr.toLowerCase().equals(""String_Node_Str"");
    if (stale || !reqHadAuthHeaders) {
      return this.handle(request);
    }
 else {
      return response;
    }
  }
  return response;
}","@Override public ClientResponse handle(final ClientRequest request) throws ClientHandlerException {
  boolean reqHadAuthHeaders=false;
  if (state.get().nextNonce != null) {
    reqHadAuthHeaders=true;
    String qopStr=null;
    if (state.get().qop != null) {
      qopStr=(state.get().qop == QOP.AUTH_INT) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StringBuffer buff=new StringBuffer();
    buff.append(""String_Node_Str"");
    addKeyVal(buff,""String_Node_Str"",this.user);
    addKeyVal(buff,""String_Node_Str"",state.get().realm);
    addKeyVal(buff,""String_Node_Str"",state.get().nextNonce);
    if (state.get().opaque != null) {
      addKeyVal(buff,""String_Node_Str"",state.get().opaque);
    }
    if (state.get().algorithm != null) {
      addKeyVal(buff,""String_Node_Str"",state.get().algorithm,false);
    }
    if (state.get().qop != null) {
      addKeyVal(buff,""String_Node_Str"",qopStr,false);
    }
    String HA1=md5ForJoined(this.user.getBytes(CHARACTER_SET),state.get().realm.getBytes(CHARACTER_SET),this.password);
    String uri=request.getURI().getRawPath();
    addKeyVal(buff,""String_Node_Str"",uri);
    String HA2;
    if (state.get().qop == QOP.AUTH_INT && (request.getEntity() != null)) {
      HA2=md5ForJoined(request.getMethod(),uri,request.getEntity().toString());
    }
 else {
      HA2=md5ForJoined(request.getMethod(),uri);
    }
    String response;
    if (state.get().qop == null) {
      response=md5ForJoined(HA1,state.get().nextNonce,HA2);
    }
 else {
      String cnonce=randHexBytes(CNONCE_NB_BYTES);
      String nc=String.format(""String_Node_Str"",state.get().counter);
      state.get().counter+=1;
      addKeyVal(buff,""String_Node_Str"",cnonce);
      addKeyVal(buff,""String_Node_Str"",nc,false);
      response=md5ForJoined(HA1,state.get().nextNonce,nc,cnonce,qopStr,HA2);
    }
    addKeyVal(buff,""String_Node_Str"",response);
    buff.deleteCharAt(buff.length() - 1);
    String authLine=buff.toString();
    request.getHeaders().add(HttpHeaders.AUTHORIZATION,authLine);
  }
  ClientResponse response=getNext().handle(request);
  if (response.getClientResponseStatus() == Status.UNAUTHORIZED) {
    HashMap<String,String> map=parseHeaders(response.getHeaders().get(HttpHeaders.WWW_AUTHENTICATE));
    if (map == null) {
      return response;
    }
    state.get().realm=map.get(""String_Node_Str"");
    state.get().nextNonce=map.get(""String_Node_Str"");
    state.get().opaque=map.get(""String_Node_Str"");
    state.get().algorithm=map.get(""String_Node_Str"");
    state.get().domain=map.get(""String_Node_Str"");
    String qop=map.get(""String_Node_Str"");
    if (qop == null) {
      state.get().qop=null;
    }
 else {
      if (qop.contains(""String_Node_Str"")) {
        state.get().qop=QOP.AUTH_INT;
      }
 else       if (qop.contains(""String_Node_Str"")) {
        state.get().qop=QOP.AUTH;
      }
 else {
        state.get().qop=null;
      }
    }
    String staleStr=map.get(""String_Node_Str"");
    boolean stale=(staleStr != null) && staleStr.toLowerCase().equals(""String_Node_Str"");
    if (stale || !reqHadAuthHeaders) {
      return this.handle(request);
    }
 else {
      return response;
    }
  }
  return response;
}"
51070,"public void testHTTPDigestAuthFilter(){
  startServer(Resource.class);
  Client c=Client.create();
  c.addFilter(new HTTPDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS));
  WebResource r=c.resource(getUri().path(""String_Node_Str"").build());
  ClientResponse response=r.get(ClientResponse.class);
  assertTrue(response.getStatus() == 200);
}","public void testHTTPDigestAuthFilter(){
  final String path=""String_Node_Str"";
  testRequest(path);
}"
51071,"@GET public Response get1(){
  if (context.getRequest().getHeaderValue(""String_Node_Str"") == null) {
    return Response.status(401).header(""String_Node_Str"",""String_Node_Str"" + DIGEST_TEST_REALM + ""String_Node_Str""+ ""String_Node_Str""+ DIGEST_TEST_NONCE+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ DIGEST_TEST_DOMAIN+ ""String_Node_Str"").build();
  }
 else {
    String authHeader=context.getRequest().getHeaderValue(""String_Node_Str"");
    String HA1=concatMD5(DIGEST_TEST_LOGIN,DIGEST_TEST_REALM,DIGEST_TEST_PASS);
    String HA2=concatMD5(""String_Node_Str"",context.getRequest().getRequestUri().getPath().toString());
    String response=concatMD5(HA1,DIGEST_TEST_NONCE,getDigestAuthHeaderValue(authHeader,""String_Node_Str""),getDigestAuthHeaderValue(authHeader,""String_Node_Str""),getDigestAuthHeaderValue(authHeader,""String_Node_Str""),HA2);
    if (response.equals(getDigestAuthHeaderValue(authHeader,""String_Node_Str""))) {
      return Response.ok().build();
    }
 else {
      return Response.status(401).build();
    }
  }
}","@GET public Response get1(){
  return verify();
}"
51072,"public QueryParamException(Throwable cause,String name,String defaultStringValue){
  super(cause,QueryParam.class,name,defaultStringValue);
}","public QueryParamException(Throwable cause,String name,String defaultStringValue){
  super(cause,Responses.CLIENT_ERROR,QueryParam.class,name,defaultStringValue);
}"
51073,"/** 
 * Sets the request or access token.
 */
public void setToken(String token){
  put(TOKEN,token);
}","/** 
 * Sets the request or access token.
 */
public void setToken(String token){
  if (token == null) {
    remove(TOKEN);
  }
 else {
    put(TOKEN,token);
  }
}"
51074,"public final void writeList(Class<?> elementType,Collection<?> t,MediaType mediaType,Charset c,Marshaller m,OutputStream entityStream) throws JAXBException, IOException {
  final String rootElement=getRootElementName(elementType);
  final String cName=c.name();
  entityStream.write(String.format(""String_Node_Str"",cName).getBytes(cName));
  String property=""String_Node_Str"";
  String header;
  try {
    header=(String)m.getProperty(property);
  }
 catch (  PropertyException e) {
    property=""String_Node_Str"";
    try {
      header=(String)m.getProperty(property);
    }
 catch (    PropertyException ex) {
      header=null;
      Logger.getLogger(XMLListElementProvider.class.getName()).log(Level.WARNING,""String_Node_Str"");
    }
  }
  if (header != null) {
    m.setProperty(property,""String_Node_Str"");
    entityStream.write(header.getBytes(cName));
  }
  entityStream.write(String.format(""String_Node_Str"",rootElement).getBytes(cName));
  for (  Object o : t)   m.marshal(o,entityStream);
  entityStream.write(String.format(""String_Node_Str"",rootElement).getBytes(cName));
}","@Override public final void writeList(Class<?> elementType,Collection<?> t,MediaType mediaType,Charset c,Marshaller m,OutputStream entityStream) throws JAXBException, IOException {
  final String rootElement=getRootElementName(elementType);
  final String cName=c.name();
  entityStream.write(String.format(""String_Node_Str"",cName).getBytes(cName));
  String property=""String_Node_Str"";
  String header;
  try {
    header=(String)m.getProperty(property);
  }
 catch (  PropertyException e) {
    property=""String_Node_Str"";
    try {
      header=(String)m.getProperty(property);
    }
 catch (    PropertyException ex) {
      header=null;
      Logger.getLogger(XMLListElementProvider.class.getName()).log(Level.WARNING,""String_Node_Str"");
    }
  }
  if (header != null) {
    m.setProperty(property,""String_Node_Str"");
    entityStream.write(header.getBytes(cName));
  }
  entityStream.write(String.format(""String_Node_Str"",rootElement).getBytes(cName));
  for (  Object o : t)   m.marshal(o,entityStream);
  entityStream.write(String.format(""String_Node_Str"",rootElement).getBytes(cName));
}"
51075,"@Override public final Object readFrom(Class<Object> type,Type genericType,Annotation annotations[],MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException {
  try {
    final Class elementType=getElementClass(type,genericType);
    final Unmarshaller u=getUnmarshaller(elementType,mediaType);
    final XMLStreamReader r=getXMLStreamReader(elementType,mediaType,u,entityStream);
    final List l=new ArrayList();
    boolean jaxbElement=false;
    int event=r.next();
    while (event != XMLStreamReader.START_ELEMENT)     event=r.next();
    event=r.next();
    while (event != XMLStreamReader.START_ELEMENT && event != XMLStreamReader.END_DOCUMENT)     event=r.next();
    while (event != XMLStreamReader.END_DOCUMENT) {
      if (elementType.isAnnotationPresent(XmlRootElement.class)) {
        l.add(u.unmarshal(r));
      }
 else       if (elementType.isAnnotationPresent(XmlType.class)) {
        l.add(u.unmarshal(r,elementType).getValue());
      }
 else {
        l.add(u.unmarshal(r,elementType));
        jaxbElement=true;
      }
      event=r.getEventType();
      while (event != XMLStreamReader.START_ELEMENT && event != XMLStreamReader.END_DOCUMENT)       event=r.next();
    }
    return (type.isArray()) ? createArray(l,jaxbElement ? JAXBElement.class : elementType) : l;
  }
 catch (  UnmarshalException ex) {
    throw new WebApplicationException(ex,Status.BAD_REQUEST);
  }
catch (  XMLStreamException ex) {
    throw new WebApplicationException(ex,Status.BAD_REQUEST);
  }
catch (  JAXBException ex) {
    throw new WebApplicationException(ex,Status.INTERNAL_SERVER_ERROR);
  }
}","@Override public final Object readFrom(Class<Object> type,Type genericType,Annotation annotations[],MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException {
  try {
    final Class elementType=getElementClass(type,genericType);
    final Unmarshaller u=getUnmarshaller(elementType,mediaType);
    final XMLStreamReader r=getXMLStreamReader(elementType,mediaType,u,entityStream);
    boolean jaxbElement=false;
    Collection l=null;
    if (type.isArray()) {
      l=new ArrayList();
    }
 else {
      try {
        l=(Collection)type.newInstance();
      }
 catch (      Exception e) {
        for (        Class c : DEFAULT_IMPLS) {
          if (type.isAssignableFrom(c)) {
            try {
              l=(Collection)c.newInstance();
              break;
            }
 catch (            InstantiationException ex) {
              Logger.getLogger(AbstractListElementProvider.class.getName()).log(Level.SEVERE,null,ex);
            }
catch (            IllegalAccessException ex) {
              Logger.getLogger(AbstractListElementProvider.class.getName()).log(Level.SEVERE,null,ex);
            }
          }
        }
      }
    }
    int event=r.next();
    while (event != XMLStreamReader.START_ELEMENT)     event=r.next();
    event=r.next();
    while (event != XMLStreamReader.START_ELEMENT && event != XMLStreamReader.END_DOCUMENT)     event=r.next();
    while (event != XMLStreamReader.END_DOCUMENT) {
      if (elementType.isAnnotationPresent(XmlRootElement.class)) {
        l.add(u.unmarshal(r));
      }
 else       if (elementType.isAnnotationPresent(XmlType.class)) {
        l.add(u.unmarshal(r,elementType).getValue());
      }
 else {
        l.add(u.unmarshal(r,elementType));
        jaxbElement=true;
      }
      event=r.getEventType();
      while (event != XMLStreamReader.START_ELEMENT && event != XMLStreamReader.END_DOCUMENT)       event=r.next();
    }
    return (type.isArray()) ? createArray((List)l,jaxbElement ? JAXBElement.class : elementType) : l;
  }
 catch (  UnmarshalException ex) {
    throw new WebApplicationException(ex,Status.BAD_REQUEST);
  }
catch (  XMLStreamException ex) {
    throw new WebApplicationException(ex,Status.BAD_REQUEST);
  }
catch (  JAXBException ex) {
    throw new WebApplicationException(ex,Status.INTERNAL_SERVER_ERROR);
  }
}"
51076,"@Override public boolean isReadable(Class<?> type,Type genericType,Annotation annotations[],MediaType mediaType){
  if (type == List.class || type == Collection.class) {
    return verifyGenericType(genericType) && isSupported(mediaType);
  }
 else   if (type.isArray()) {
    return verifyArrayType(type) && isSupported(mediaType);
  }
 else   return false;
}","@Override public boolean isReadable(Class<?> type,Type genericType,Annotation annotations[],MediaType mediaType){
  if (verifyCollectionSubclass(type)) {
    return verifyGenericType(genericType) && isSupported(mediaType);
  }
 else   if (type.isArray()) {
    return verifyArrayType(type) && isSupported(mediaType);
  }
 else   return false;
}"
51077,"@Override public boolean isWriteable(Class<?> type,Type genericType,Annotation annotations[],MediaType mediaType){
  if (List.class.isAssignableFrom(type)) {
    return verifyGenericType(genericType) && isSupported(mediaType);
  }
 else   if (type.isArray()) {
    return verifyArrayType(type) && isSupported(mediaType);
  }
 else   return false;
}","@Override public boolean isWriteable(Class<?> type,Type genericType,Annotation annotations[],MediaType mediaType){
  if (Collection.class.isAssignableFrom(type)) {
    return verifyGenericType(genericType) && isSupported(mediaType);
  }
 else   if (type.isArray()) {
    return verifyArrayType(type) && isSupported(mediaType);
  }
 else   return false;
}"
51078,"public void testJAXBListRepresentationMediaType(){
  initiateWebApplication(JAXBListResourceMediaType.class);
  WebResource r=resource(""String_Node_Str"");
  Collection<JAXBBean> a=r.get(new GenericType<Collection<JAXBBean>>(){
  }
);
  Collection<JAXBBean> b=r.type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
}","public void testJAXBListRepresentationMediaType(){
  initiateWebApplication(JAXBListResourceMediaType.class);
  WebResource r=resource(""String_Node_Str"");
  Collection<JAXBBean> a=r.get(new GenericType<Collection<JAXBBean>>(){
  }
);
  Collection<JAXBBean> b=r.type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  a=new LinkedList(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Queue<JAXBBean>>(){
  }
,new GenericEntity<Queue<JAXBBean>>((Queue)a){
  }
);
  assertEquals(a,b);
  a=new HashSet(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Set<JAXBBean>>(){
  }
,new GenericEntity<Set<JAXBBean>>((Set)a){
  }
);
  Comparator<JAXBBean> c=new Comparator<JAXBBean>(){
    @Override public int compare(    JAXBBean t,    JAXBBean t1){
      return t.value.compareTo(t1.value);
    }
  }
;
  TreeSet t1=new TreeSet(c), t2=new TreeSet(c);
  t1.addAll(a);
  t2.addAll(b);
  assertEquals(t1,t2);
  Stack s=new Stack();
  s.addAll(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Stack<JAXBBean>>(){
  }
,new GenericEntity<Stack<JAXBBean>>(s){
  }
);
  assertEquals(s,b);
  a=new MyArrayList(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<MyArrayList<JAXBBean>>(){
  }
,new GenericEntity<MyArrayList<JAXBBean>>((MyArrayList)a){
  }
);
  assertEquals(a,b);
}"
51079,"/** 
 * TODO, the unmarshalling fails.
 */
public void testJAXBListRepresentationFastInfoset(){
  initiateWebApplication(JAXBListResourceFastInfoset.class);
  WebResource r=resource(""String_Node_Str"");
  r.addFilter(new LoggingFilter());
  Collection<JAXBBean> a=r.get(new GenericType<Collection<JAXBBean>>(){
  }
);
  Collection<JAXBBean> b=r.type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
}","/** 
 * TODO, the unmarshalling fails.
 */
public void testJAXBListRepresentationFastInfoset(){
  initiateWebApplication(JAXBListResourceFastInfoset.class);
  WebResource r=resource(""String_Node_Str"");
  r.addFilter(new LoggingFilter());
  Collection<JAXBBean> a=r.get(new GenericType<Collection<JAXBBean>>(){
  }
);
  Collection<JAXBBean> b=r.type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  a=new LinkedList(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Queue<JAXBBean>>(){
  }
,new GenericEntity<Queue<JAXBBean>>((Queue)a){
  }
);
  assertEquals(a,b);
  a=new HashSet(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Set<JAXBBean>>(){
  }
,new GenericEntity<Set<JAXBBean>>((Set)a){
  }
);
  Comparator<JAXBBean> c=new Comparator<JAXBBean>(){
    @Override public int compare(    JAXBBean t,    JAXBBean t1){
      return t.value.compareTo(t1.value);
    }
  }
;
  TreeSet t1=new TreeSet(c), t2=new TreeSet(c);
  t1.addAll(a);
  t2.addAll(b);
  assertEquals(t1,t2);
  Stack s=new Stack();
  s.addAll(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Stack<JAXBBean>>(){
  }
,new GenericEntity<Stack<JAXBBean>>(s){
  }
);
  assertEquals(s,b);
  a=new MyArrayList(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<MyArrayList<JAXBBean>>(){
  }
,new GenericEntity<MyArrayList<JAXBBean>>((MyArrayList)a){
  }
);
  assertEquals(a,b);
}"
51080,"public void testJAXBListRepresentationJSON() throws Exception {
  initiateWebApplication(JAXBListResourceJSON.class);
  WebResource r=resource(""String_Node_Str"");
  Collection<JAXBBean> a=r.get(new GenericType<Collection<JAXBBean>>(){
  }
);
  Collection<JAXBBean> b=r.type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
}","public void testJAXBListRepresentationJSON() throws Exception {
  initiateWebApplication(JAXBListResourceJSON.class);
  WebResource r=resource(""String_Node_Str"");
  Collection<JAXBBean> a=r.get(new GenericType<Collection<JAXBBean>>(){
  }
);
  Collection<JAXBBean> b=r.type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Collection<JAXBBean>>(){
  }
,new GenericEntity<Collection<JAXBBean>>(a){
  }
);
  assertEquals(a,b);
  a=new LinkedList(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Queue<JAXBBean>>(){
  }
,new GenericEntity<Queue<JAXBBean>>((Queue)a){
  }
);
  assertEquals(a,b);
  a=new HashSet(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Set<JAXBBean>>(){
  }
,new GenericEntity<Set<JAXBBean>>((Set)a){
  }
);
  Comparator<JAXBBean> c=new Comparator<JAXBBean>(){
    @Override public int compare(    JAXBBean t,    JAXBBean t1){
      return t.value.compareTo(t1.value);
    }
  }
;
  TreeSet t1=new TreeSet(c), t2=new TreeSet(c);
  t1.addAll(a);
  t2.addAll(b);
  assertEquals(t1,t2);
  Stack s=new Stack();
  s.addAll(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<Stack<JAXBBean>>(){
  }
,new GenericEntity<Stack<JAXBBean>>(s){
  }
);
  assertEquals(s,b);
  a=new MyArrayList(a);
  b=r.path(""String_Node_Str"").type(""String_Node_Str"").post(new GenericType<MyArrayList<JAXBBean>>(){
  }
,new GenericEntity<MyArrayList<JAXBBean>>((MyArrayList)a){
  }
);
  assertEquals(a,b);
}"
51081,"/** 
 * Note: This method automatically sets the nonce and timestamp.
 */
@Override public ClientResponse handle(final ClientRequest request) throws ClientHandlerException {
  if (!request.getHeaders().containsKey(""String_Node_Str"")) {
switch (state) {
case MANAGED:
      if (parameters.getToken() == null) {
        state=State.UNMANAGED;
        try {
          ClientResponse cr=handle(ClientRequest.create().build(requestTokenUri,HttpMethod.POST));
          Form response=cr.getEntity(Form.class);
          String token=response.getFirst(OAuthParameters.TOKEN);
          parameters.token(token);
          secrets.tokenSecret(response.getFirst(OAuthParameters.TOKEN_SECRET));
          state=State.REQUEST_TOKEN;
          parameters.verifier(handler.authorize(getAuthorizationUri()));
          return handle(request);
        }
  finally {
          if (state == State.UNMANAGED) {
            parameters.setToken(null);
            secrets.setTokenSecret(null);
          }
          state=State.MANAGED;
        }
      }
    break;
case REQUEST_TOKEN:
  if (parameters.getVerifier() == null) {
    throw new UnauthorizedRequestException(parameters,getAuthorizationUri());
  }
state=State.UNMANAGED;
try {
ClientResponse cr=handle(ClientRequest.create().build(accessTokenUri,HttpMethod.POST));
Form response=cr.getEntity(Form.class);
String token=response.getFirst(OAuthParameters.TOKEN);
String secret=response.getFirst(OAuthParameters.TOKEN_SECRET);
if (token == null) {
  throw new UnauthorizedRequestException(parameters,null);
}
parameters.token(token);
secrets.tokenSecret(secret);
handler.authorized(parameters.getToken(),secrets.getTokenSecret());
state=State.MANAGED;
}
  finally {
parameters.remove(OAuthParameters.VERIFIER);
if (state == State.UNMANAGED) {
  parameters.remove(OAuthParameters.TOKEN);
  secrets.tokenSecret(null);
  state=State.MANAGED;
}
}
}
final OAuthParameters p=(OAuthParameters)parameters.clone();
if (p.getTimestamp() == null) {
p.setTimestamp();
}
if (p.getNonce() == null) {
p.setNonce();
}
try {
OAuthSignature.sign(new RequestWrapper(request,providers),p,secrets);
}
 catch (OAuthSignatureException se) {
throw new ClientHandlerException(se);
}
}
ClientResponse response;
UniformInterfaceException uie=null;
try {
response=getNext().handle(request);
}
 catch (UniformInterfaceException e) {
response=e.getResponse();
uie=e;
}
if (state == State.MANAGED && response.getClientResponseStatus() == ClientResponse.Status.UNAUTHORIZED) {
request.getHeaders().remove(""String_Node_Str"");
parameters.remove(OAuthParameters.TOKEN);
secrets.tokenSecret(null);
uie=null;
return handle(request);
}
if (uie != null) {
throw uie;
}
return response;
}","/** 
 * Note: This method automatically sets the nonce and timestamp.
 */
@Override public ClientResponse handle(final ClientRequest request) throws ClientHandlerException {
  if (!request.getHeaders().containsKey(""String_Node_Str"")) {
switch (state) {
case MANAGED:
      if (parameters.getToken() == null) {
        state=State.UNMANAGED;
        try {
          ClientResponse cr=handle(ClientRequest.create().build(requestTokenUri,HttpMethod.POST));
          Form response=cr.getEntity(Form.class);
          String token=response.getFirst(OAuthParameters.TOKEN);
          parameters.token(token);
          secrets.tokenSecret(response.getFirst(OAuthParameters.TOKEN_SECRET));
          state=State.REQUEST_TOKEN;
          parameters.verifier(handler.authorize(getAuthorizationUri()));
          return handle(request);
        }
  finally {
          if (state == State.UNMANAGED) {
            parameters.setToken(null);
            secrets.setTokenSecret(null);
          }
          if (state != State.REQUEST_TOKEN) {
            state=State.MANAGED;
          }
        }
      }
    break;
case REQUEST_TOKEN:
  if (parameters.getVerifier() == null) {
    throw new UnauthorizedRequestException(parameters,getAuthorizationUri());
  }
state=State.UNMANAGED;
try {
ClientResponse cr=handle(ClientRequest.create().build(accessTokenUri,HttpMethod.POST));
Form response=cr.getEntity(Form.class);
String token=response.getFirst(OAuthParameters.TOKEN);
String secret=response.getFirst(OAuthParameters.TOKEN_SECRET);
if (token == null) {
  throw new UnauthorizedRequestException(parameters,null);
}
parameters.token(token);
secrets.tokenSecret(secret);
handler.authorized(parameters.getToken(),secrets.getTokenSecret());
state=State.MANAGED;
}
  finally {
parameters.remove(OAuthParameters.VERIFIER);
if (state == State.UNMANAGED) {
  parameters.remove(OAuthParameters.TOKEN);
  secrets.tokenSecret(null);
  state=State.MANAGED;
}
}
}
final OAuthParameters p=(OAuthParameters)parameters.clone();
if (p.getTimestamp() == null) {
p.setTimestamp();
}
if (p.getNonce() == null) {
p.setNonce();
}
try {
OAuthSignature.sign(new RequestWrapper(request,providers),p,secrets);
}
 catch (OAuthSignatureException se) {
throw new ClientHandlerException(se);
}
}
ClientResponse response;
UniformInterfaceException uie=null;
try {
response=getNext().handle(request);
}
 catch (UniformInterfaceException e) {
response=e.getResponse();
uie=e;
}
if (state == State.MANAGED && response.getClientResponseStatus() == ClientResponse.Status.UNAUTHORIZED) {
request.getHeaders().remove(""String_Node_Str"");
parameters.remove(OAuthParameters.TOKEN);
secrets.tokenSecret(null);
uie=null;
return handle(request);
}
if (uie != null) {
throw uie;
}
return response;
}"
51082,"private T _getInstance() throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  ConstructorInjectablePair<T> cip=getConstructor();
  if (cip == null || cip.is.size() == 0) {
    return c.newInstance();
  }
 else {
    if (cip.is.contains(null)) {
      for (int i=0; i < cip.is.size(); i++) {
        if (cip.is.get(i) == null) {
          Errors.missingDependency(cip.con,i);
        }
      }
    }
    Object[] params=new Object[cip.is.size()];
    int i=0;
    for (    Injectable injectable : cip.is) {
      if (injectable != null)       params[i++]=injectable.getValue();
    }
    return cip.con.newInstance(params);
  }
}","private T _getInstance() throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  ConstructorInjectablePair<T> cip=getConstructor();
  if (cip == null || cip.is.isEmpty()) {
    return c.newInstance();
  }
 else {
    if (cip.is.contains(null)) {
      for (int i=0; i < cip.is.size(); i++) {
        if (cip.is.get(i) == null) {
          Errors.missingDependency(cip.con,i);
        }
      }
    }
    Object[] params=new Object[cip.is.size()];
    int i=0;
    for (    Injectable injectable : cip.is) {
      if (injectable != null)       params[i++]=injectable.getValue();
    }
    return cip.con.newInstance(params);
  }
}"
51083,"public int compare(ConstructorInjectablePair<T> o1,ConstructorInjectablePair<T> o2){
  int p=Collections.frequency(o1.is,null) - Collections.frequency(o2.is,null);
  if (p != 0)   return p;
  return o2.con.getParameterTypes().length - o1.con.getParameterTypes().length;
}","@Override public int compare(ConstructorInjectablePair<T> o1,ConstructorInjectablePair<T> o2){
  int p=Collections.frequency(o1.is,null) - Collections.frequency(o2.is,null);
  if (p != 0)   return p;
  return o2.con.getParameterTypes().length - o1.con.getParameterTypes().length;
}"
51084,"public ComponentConstructor(InjectableProviderContext ipc,Class<T> c,ComponentInjector<T> ci){
  this.ipc=ipc;
  this.c=c;
  this.ci=ci;
  this.postConstruct=getPostConstructMethod(c);
}","public ComponentConstructor(InjectableProviderContext ipc,Class<T> c,ComponentInjector<T> ci){
  this.ipc=ipc;
  this.c=c;
  this.ci=ci;
  this.postConstructs=getPostConstructMethods(c);
}"
51085,"/** 
 * Get a new instance.
 * @return a new instance.
 */
public T getInstance() throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  final int modifiers=c.getModifiers();
  if (!Modifier.isPublic(modifiers)) {
    Errors.nonPublicClass(c);
  }
  if (Modifier.isAbstract(modifiers)) {
    if (Modifier.isInterface(modifiers)) {
      Errors.interfaceClass(c);
    }
 else {
      Errors.abstractClass(c);
    }
  }
  if (c.getEnclosingClass() != null && !Modifier.isStatic(modifiers)) {
    Errors.innerClass(c);
  }
  if (Modifier.isPublic(modifiers) && !Modifier.isAbstract(modifiers)) {
    if (c.getConstructors().length == 0) {
      Errors.nonPublicConstructor(c);
    }
  }
  final T t=_getInstance();
  ci.inject(t);
  if (postConstruct != null)   postConstruct.invoke(t);
  return t;
}","/** 
 * Get a new instance.
 * @return a new instance.
 */
public T getInstance() throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  final int modifiers=c.getModifiers();
  if (!Modifier.isPublic(modifiers)) {
    Errors.nonPublicClass(c);
  }
  if (Modifier.isAbstract(modifiers)) {
    if (Modifier.isInterface(modifiers)) {
      Errors.interfaceClass(c);
    }
 else {
      Errors.abstractClass(c);
    }
  }
  if (c.getEnclosingClass() != null && !Modifier.isStatic(modifiers)) {
    Errors.innerClass(c);
  }
  if (Modifier.isPublic(modifiers) && !Modifier.isAbstract(modifiers)) {
    if (c.getConstructors().length == 0) {
      Errors.nonPublicConstructor(c);
    }
  }
  final T t=_getInstance();
  ci.inject(t);
  for (  Method postConstruct : postConstructs) {
    postConstruct.invoke(t);
  }
  return t;
}"
51086,"public void destroy(Object o) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  if (preDestroy != null)   preDestroy.invoke(o);
}","public void destroy(Object o) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  for (  Method preDestroy : preDestroys) {
    preDestroy.invoke(o);
  }
}"
51087,"/** 
 * Create a component destructor.
 * @param c the class of instances to destruct.
 */
public ComponentDestructor(Class c){
  this.preDestroy=getPreDestroyMethod(c);
}","/** 
 * Create a component destructor.
 * @param c the class of instances to destruct.
 */
public ComponentDestructor(Class c){
  this.preDestroys=getPreDestroyMethods(c);
}"
51088,"public MultivaluedParameterExtractor getWithoutDefaultValue(Parameter p){
  return process(w,null,p.getParameterClass(),p.getParameterType(),p.getAnnotations(),p.getSourceName());
}","@Override public MultivaluedParameterExtractor getWithoutDefaultValue(Parameter p){
  return process(w,null,p.getParameterClass(),p.getParameterType(),p.getAnnotations(),p.getSourceName());
}"
51089,"public MultivaluedParameterExtractor get(Parameter p){
  return process(w,p.getDefaultValue(),p.getParameterClass(),p.getParameterType(),p.getAnnotations(),p.getSourceName());
}","@Override public MultivaluedParameterExtractor get(Parameter p){
  return process(w,p.getDefaultValue(),p.getParameterClass(),p.getParameterType(),p.getAnnotations(),p.getSourceName());
}"
51090,"public String getName(){
  return parameter;
}","@Override public String getName(){
  return parameter;
}"
51091,"public Object extract(MultivaluedMap<String,String> parameters){
  String v=parameters.getFirst(parameter);
  if (v != null && !v.trim().isEmpty()) {
    return getValue(v);
  }
 else   if (defaultValue != null) {
    return defaultValue;
  }
  return defaultDefaultValue;
}","@Override public Object extract(MultivaluedMap<String,String> parameters){
  String v=parameters.getFirst(parameter);
  if (v != null && !v.trim().isEmpty()) {
    return getValue(v);
  }
 else   if (defaultValue != null) {
    return defaultValue;
  }
  return defaultDefaultValue;
}"
51092,"public String getDefaultStringValue(){
  return defaultStringValue;
}","@Override public String getDefaultStringValue(){
  return defaultStringValue;
}"
51093,"private static void workOutPostConstructPreDestroy(AbstractResource resource){
  Class postConstruct=ReflectionHelper.classForName(""String_Node_Str"");
  if (postConstruct == null)   return;
  Class preDestroy=ReflectionHelper.classForName(""String_Node_Str"");
  final MethodList methodList=new MethodList(resource.getResourceClass(),true);
  for (  AnnotatedMethod m : methodList.hasAnnotation(postConstruct).hasNumParams(0).hasReturnType(void.class)) {
    ReflectionHelper.setAccessibleMethod(m.getMethod());
    resource.getPostConstructMethods().add(m.getMethod());
  }
  for (  AnnotatedMethod m : methodList.hasAnnotation(preDestroy).hasNumParams(0).hasReturnType(void.class)) {
    ReflectionHelper.setAccessibleMethod(m.getMethod());
    resource.getPreDestroyMethods().add(m.getMethod());
  }
}","private static void workOutPostConstructPreDestroy(AbstractResource resource){
  Class postConstruct=ReflectionHelper.classForName(""String_Node_Str"");
  if (postConstruct == null)   return;
  Class preDestroy=ReflectionHelper.classForName(""String_Node_Str"");
  final MethodList methodList=new MethodList(resource.getResourceClass(),true);
  HashSet<String> names=new HashSet<String>();
  for (  AnnotatedMethod m : methodList.hasAnnotation(postConstruct).hasNumParams(0).hasReturnType(void.class)) {
    Method method=m.getMethod();
    if (names.add(method.getName())) {
      ReflectionHelper.setAccessibleMethod(method);
      resource.getPostConstructMethods().add(0,method);
    }
  }
  names=new HashSet<String>();
  for (  AnnotatedMethod m : methodList.hasAnnotation(preDestroy).hasNumParams(0).hasReturnType(void.class)) {
    Method method=m.getMethod();
    if (names.add(method.getName())) {
      ReflectionHelper.setAccessibleMethod(method);
      resource.getPreDestroyMethods().add(method);
    }
  }
}"
51094,"public Object construct(HttpContext hc) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  final Object o=_construct(hc);
  rci.inject(hc,o);
  if (postConstruct != null)   postConstruct.invoke(o);
  return o;
}","public Object construct(HttpContext hc) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  final Object o=_construct(hc);
  rci.inject(hc,o);
  for (  Method postConstruct : postConstructs) {
    postConstruct.invoke(o);
  }
  return o;
}"
51095,"public ResourceComponentConstructor(ServerInjectableProviderContext sipc,ComponentScope scope,AbstractResource ar){
  this.c=ar.getResourceClass();
  final int modifiers=c.getModifiers();
  if (!Modifier.isPublic(modifiers)) {
    Errors.nonPublicClass(c);
  }
  if (Modifier.isAbstract(modifiers)) {
    if (Modifier.isInterface(modifiers)) {
      Errors.interfaceClass(c);
    }
 else {
      Errors.abstractClass(c);
    }
  }
  if (c.getEnclosingClass() != null && !Modifier.isStatic(modifiers)) {
    Errors.innerClass(c);
  }
  if (Modifier.isPublic(modifiers) && !Modifier.isAbstract(modifiers)) {
    if (c.getConstructors().length == 0) {
      Errors.nonPublicConstructor(c);
    }
  }
  this.rci=new ResourceComponentInjector(sipc,scope,ar);
  if (ar.getPostConstructMethods().size() > 0) {
    this.postConstruct=ar.getPostConstructMethods().get(0);
  }
 else {
    this.postConstruct=null;
  }
  ConstructorInjectablePair cip=getConstructor(sipc,scope,ar);
  if (cip == null) {
    this.constructor=null;
    this.injectables=null;
  }
 else   if (cip.is.isEmpty()) {
    this.constructor=cip.con;
    this.injectables=null;
  }
 else {
    if (cip.is.contains(null)) {
      for (int i=0; i < cip.is.size(); i++) {
        if (cip.is.get(i) == null) {
          Errors.missingDependency(cip.con,i);
        }
      }
    }
    this.constructor=cip.con;
    this.injectables=AbstractHttpContextInjectable.transform(cip.is);
  }
}","public ResourceComponentConstructor(ServerInjectableProviderContext sipc,ComponentScope scope,AbstractResource ar){
  this.c=ar.getResourceClass();
  final int modifiers=c.getModifiers();
  if (!Modifier.isPublic(modifiers)) {
    Errors.nonPublicClass(c);
  }
  if (Modifier.isAbstract(modifiers)) {
    if (Modifier.isInterface(modifiers)) {
      Errors.interfaceClass(c);
    }
 else {
      Errors.abstractClass(c);
    }
  }
  if (c.getEnclosingClass() != null && !Modifier.isStatic(modifiers)) {
    Errors.innerClass(c);
  }
  if (Modifier.isPublic(modifiers) && !Modifier.isAbstract(modifiers)) {
    if (c.getConstructors().length == 0) {
      Errors.nonPublicConstructor(c);
    }
  }
  this.rci=new ResourceComponentInjector(sipc,scope,ar);
  this.postConstructs.addAll(ar.getPostConstructMethods());
  ConstructorInjectablePair cip=getConstructor(sipc,scope,ar);
  if (cip == null) {
    this.constructor=null;
    this.injectables=null;
  }
 else   if (cip.is.isEmpty()) {
    this.constructor=cip.con;
    this.injectables=null;
  }
 else {
    if (cip.is.contains(null)) {
      for (int i=0; i < cip.is.size(); i++) {
        if (cip.is.get(i) == null) {
          Errors.missingDependency(cip.con,i);
        }
      }
    }
    this.constructor=cip.con;
    this.injectables=AbstractHttpContextInjectable.transform(cip.is);
  }
}"
51096,"public void destroy(Object o) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  if (preDestroy != null)   preDestroy.invoke(o);
}","public void destroy(Object o) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
  for (  Method preDestroy : preDestroys) {
    preDestroy.invoke(o);
  }
}"
51097,"public ResourceComponentDestructor(AbstractResource ar){
  if (ar.getPreDestroyMethods().size() > 0) {
    this.preDestroy=ar.getPreDestroyMethods().get(0);
  }
 else {
    this.preDestroy=null;
  }
}","public ResourceComponentDestructor(AbstractResource ar){
  preDestroys.addAll(ar.getPreDestroyMethods());
}"
51098,"public static CDIExtension getInitializedExtension(){
  try {
    InitialContext ic=InitialContextHelper.getInitialContext();
    if (ic == null) {
      throw new RuntimeException();
    }
    return (CDIExtension)ic.lookup(JNDI_CDIEXTENSION_NAME);
  }
 catch (  NamingException ex) {
    throw new RuntimeException(ex);
  }
}","public static CDIExtension getInitializedExtension(){
  try {
    InitialContext ic=InitialContextHelper.getInitialContext();
    if (ic == null) {
      throw new RuntimeException();
    }
    return (CDIExtension)lookupJerseyConfigJNDIContext(ic).lookup(JNDI_CDIEXTENSION_NAME);
  }
 catch (  NamingException ex) {
    throw new RuntimeException(ex);
  }
}"
51099,"private void initialize(BeanManager manager){
  if (!lookupExtensionInBeanManager) {
    try {
      InitialContext ic=InitialContextHelper.getInitialContext();
      if (ic != null) {
        ic.rebind(JNDI_CDIEXTENSION_NAME,this);
      }
    }
 catch (    NamingException ex) {
      throw new RuntimeException(ex);
    }
  }
  Set<Class<? extends Annotation>> set=new HashSet<Class<? extends Annotation>>();
  set.add(CookieParam.class);
  set.add(FormParam.class);
  set.add(HeaderParam.class);
  set.add(MatrixParam.class);
  set.add(PathParam.class);
  set.add(QueryParam.class);
  set.add(Context.class);
  knownParameterQualifiers=Collections.unmodifiableSet(set);
  Map<Class<? extends Annotation>,Parameter.Source> map=new HashMap<Class<? extends Annotation>,Parameter.Source>();
  map.put(CookieParam.class,Parameter.Source.COOKIE);
  map.put(FormParam.class,Parameter.Source.FORM);
  map.put(HeaderParam.class,Parameter.Source.HEADER);
  map.put(MatrixParam.class,Parameter.Source.MATRIX);
  map.put(PathParam.class,Parameter.Source.PATH);
  map.put(QueryParam.class,Parameter.Source.QUERY);
  map.put(Context.class,Parameter.Source.CONTEXT);
  paramQualifiersMap=Collections.unmodifiableMap(map);
  Set<Class<?>> set3=new HashSet<Class<?>>();
  set3.add(Application.class);
  set3.add(HttpHeaders.class);
  set3.add(Providers.class);
  set3.add(Request.class);
  set3.add(SecurityContext.class);
  set3.add(UriInfo.class);
  set3.add(ExceptionMapperContext.class);
  set3.add(ExtendedUriInfo.class);
  set3.add(FeaturesAndProperties.class);
  set3.add(HttpContext.class);
  set3.add(HttpRequestContext.class);
  set3.add(HttpResponseContext.class);
  set3.add(MessageBodyWorkers.class);
  set3.add(ResourceContext.class);
  set3.add(WebApplication.class);
  staticallyDefinedContextBeans=Collections.unmodifiableSet(set3);
  Map<Class<? extends Annotation>,Set<DiscoveredParameter>> map2=new HashMap<Class<? extends Annotation>,Set<DiscoveredParameter>>();
  for (  Class<? extends Annotation> qualifier : knownParameterQualifiers) {
    map2.put(qualifier,new HashSet<DiscoveredParameter>());
  }
  discoveredParameterMap=Collections.unmodifiableMap(map2);
  syntheticQualifierMap=new HashMap<DiscoveredParameter,SyntheticQualifier>();
  toBeInitializedLater=new ArrayList<InitializedLater>();
}","private void initialize(BeanManager manager){
  if (!lookupExtensionInBeanManager) {
    try {
      InitialContext ic=InitialContextHelper.getInitialContext();
      if (ic != null) {
        javax.naming.Context jerseyConfigJNDIContext=createJerseyConfigJNDIContext(ic);
        jerseyConfigJNDIContext.rebind(JNDI_CDIEXTENSION_NAME,this);
      }
    }
 catch (    NamingException ex) {
      throw new RuntimeException(ex);
    }
  }
  Set<Class<? extends Annotation>> set=new HashSet<Class<? extends Annotation>>();
  set.add(CookieParam.class);
  set.add(FormParam.class);
  set.add(HeaderParam.class);
  set.add(MatrixParam.class);
  set.add(PathParam.class);
  set.add(QueryParam.class);
  set.add(Context.class);
  knownParameterQualifiers=Collections.unmodifiableSet(set);
  Map<Class<? extends Annotation>,Parameter.Source> map=new HashMap<Class<? extends Annotation>,Parameter.Source>();
  map.put(CookieParam.class,Parameter.Source.COOKIE);
  map.put(FormParam.class,Parameter.Source.FORM);
  map.put(HeaderParam.class,Parameter.Source.HEADER);
  map.put(MatrixParam.class,Parameter.Source.MATRIX);
  map.put(PathParam.class,Parameter.Source.PATH);
  map.put(QueryParam.class,Parameter.Source.QUERY);
  map.put(Context.class,Parameter.Source.CONTEXT);
  paramQualifiersMap=Collections.unmodifiableMap(map);
  Set<Class<?>> set3=new HashSet<Class<?>>();
  set3.add(Application.class);
  set3.add(HttpHeaders.class);
  set3.add(Providers.class);
  set3.add(Request.class);
  set3.add(SecurityContext.class);
  set3.add(UriInfo.class);
  set3.add(ExceptionMapperContext.class);
  set3.add(ExtendedUriInfo.class);
  set3.add(FeaturesAndProperties.class);
  set3.add(HttpContext.class);
  set3.add(HttpRequestContext.class);
  set3.add(HttpResponseContext.class);
  set3.add(MessageBodyWorkers.class);
  set3.add(ResourceContext.class);
  set3.add(WebApplication.class);
  staticallyDefinedContextBeans=Collections.unmodifiableSet(set3);
  Map<Class<? extends Annotation>,Set<DiscoveredParameter>> map2=new HashMap<Class<? extends Annotation>,Set<DiscoveredParameter>>();
  for (  Class<? extends Annotation> qualifier : knownParameterQualifiers) {
    map2.put(qualifier,new HashSet<DiscoveredParameter>());
  }
  discoveredParameterMap=Collections.unmodifiableMap(map2);
  syntheticQualifierMap=new HashMap<DiscoveredParameter,SyntheticQualifier>();
  toBeInitializedLater=new ArrayList<InitializedLater>();
}"
51100,"void lateInitialize(){
  try {
    for (    InitializedLater object : toBeInitializedLater) {
      object.later();
    }
  }
  finally {
    if (!lookupExtensionInBeanManager) {
      try {
        InitialContext ic=InitialContextHelper.getInitialContext();
        if (ic != null) {
          ic.unbind(JNDI_CDIEXTENSION_NAME);
        }
      }
 catch (      NamingException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
}","void lateInitialize(){
  try {
    for (    InitializedLater object : toBeInitializedLater) {
      object.later();
    }
  }
  finally {
    if (!lookupExtensionInBeanManager) {
      try {
        InitialContext ic=InitialContextHelper.getInitialContext();
        if (ic != null) {
          lookupJerseyConfigJNDIContext(ic).unbind(JNDI_CDIEXTENSION_NAME);
        }
      }
 catch (      NamingException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
}"
51101,"public Object extract(MultivaluedMap<String,String> parameters){
  String v=parameters.getFirst(parameter);
  if (v != null) {
    return getValue(v);
  }
 else   if (defaultValue != null) {
    return defaultValue;
  }
  return defaultDefaultValue;
}","public Object extract(MultivaluedMap<String,String> parameters){
  String v=parameters.getFirst(parameter);
  if (v != null && !v.trim().isEmpty()) {
    return getValue(v);
  }
 else   if (defaultValue != null) {
    return defaultValue;
  }
  return defaultDefaultValue;
}"
51102,"@Override public String toString(){
  return ""String_Node_Str"" + getMethod().getDeclaringClass().getSimpleName() + ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + getResource().getResourceClass().getSimpleName() + ""String_Node_Str"";
}"
51103,"/** 
 * Match a URI against the template. <p> If the URI matches against the pattern then the template variable to value  map will be filled with template variables as keys and template values as  values. <p>
 * @param uri the uri to match against the template.
 * @param groupValues the list to store the values of a pattern's capturing groups is matching is successful. The values are stored  in the same order as the pattern's capturing groups.
 * @return true if the URI matches the template, otherwise false.
 * @throws IllegalArgumentException if the uri ortemplateVariableToValue is null.
 */
public final boolean match(CharSequence uri,List<String> groupValues) throws IllegalArgumentException {
  if (groupValues == null)   throw new IllegalArgumentException();
  return pattern.match(uri,groupValues);
}","/** 
 * Match a URI against the template. <p> If the URI matches against the pattern then the template variable to value  map will be filled with template variables as keys and template values as  values. <p>
 * @param uri the uri to match against the template.
 * @param groupValues the list to store the values of a pattern's capturing groups if matching is successful. The values are stored in the same order as the pattern's capturing groups.
 * @return true if the URI matches the template, otherwise false.
 * @throws IllegalArgumentException if the uri ortemplateVariableToValue is null.
 */
public final boolean match(CharSequence uri,List<String> groupValues) throws IllegalArgumentException {
  if (groupValues == null)   throw new IllegalArgumentException();
  return pattern.match(uri,groupValues);
}"
51104,"public DefaultClientConfig(Set<Class<?>> cs){
  providers.addAll(cs);
}","/** 
 * Create a new DefaultClientConfig instance
 * @param providers set of provider classes used during request processing.
 */
public DefaultClientConfig(Set<Class<?>> providers){
  this.providers.addAll(providers);
}"
51105,"public Object getProperty(String propertyName){
  return properties.get(propertyName);
}","/** 
 * {@inheritDoc}
 */
@Override public Object getProperty(String propertyName){
  return properties.get(propertyName);
}"
51106,"public Map<String,Boolean> getFeatures(){
  return features;
}","/** 
 * {@inheritDoc}
 */
@Override public Map<String,Boolean> getFeatures(){
  return features;
}"
51107,"public boolean getPropertyAsFeature(String name){
  Boolean v=(Boolean)getProperties().get(name);
  return (v != null) ? v : false;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean getPropertyAsFeature(String name){
  Boolean v=(Boolean)getProperties().get(name);
  return (v != null) ? v : false;
}"
51108,"public Map<String,Object> getProperties(){
  return properties;
}","/** 
 * {@inheritDoc}
 */
@Override public Map<String,Object> getProperties(){
  return properties;
}"
51109,"public Set<Object> getSingletons(){
  return providerInstances;
}","/** 
 * {@inheritDoc}
 */
@Override public Set<Object> getSingletons(){
  return providerInstances;
}"
51110,"public Set<Class<?>> getClasses(){
  return providers;
}","/** 
 * {@inheritDoc}
 */
@Override public Set<Class<?>> getClasses(){
  return providers;
}"
51111,"public boolean getFeature(String featureName){
  final Boolean v=features.get(featureName);
  return (v != null) ? v : false;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean getFeature(String featureName){
  final Boolean v=features.get(featureName);
  return (v != null) ? v : false;
}"
51112,"public OAuthProviderInjectionProvider(@Context ProviderServices ps){
  Iterator<OAuthProvider> providers=ps.getProviders(OAuthProvider.class).iterator();
  if (!providers.hasNext()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  instance=providers.next();
  if (providers.hasNext()) {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    sb.append(instance.getClass().getName());
    while (providers.hasNext()) {
      sb.append(""String_Node_Str"").append(providers.next().getClass().getName());
    }
    LOGGER.warning(sb.toString());
  }
}","public OAuthProviderInjectionProvider(@Context ProviderServices ps){
  Iterator<OAuthProvider> providers=ps.getProviders(OAuthProvider.class).iterator();
  if (!providers.hasNext()) {
    instance=null;
  }
 else {
    instance=providers.next();
    if (providers.hasNext()) {
      StringBuilder sb=new StringBuilder(""String_Node_Str"");
      sb.append(instance.getClass().getName());
      while (providers.hasNext()) {
        sb.append(""String_Node_Str"").append(providers.next().getClass().getName());
      }
      LOGGER.warning(sb.toString());
    }
  }
}"
51113,"@Override public Injectable getInjectable(ComponentContext cc,Context a,Type t){
  if (t instanceof Class) {
    Class c=(Class)t;
    if (OAuthProvider.class.isAssignableFrom(c) && c.isInstance(instance)) {
      return this;
    }
  }
  return null;
}","@Override public Injectable getInjectable(ComponentContext cc,Context a,Type t){
  if ((instance != null) && (t instanceof Class)) {
    Class c=(Class)t;
    if (OAuthProvider.class.isAssignableFrom(c) && c.isInstance(instance)) {
      return this;
    }
  }
  return null;
}"
51114,"public void testAuthDelete(){
  ResourceConfig rc=new DefaultResourceConfig(AuthResource.class);
  startServer(rc);
  CredentialsProvider credentialsProvider=new org.apache.http.impl.client.BasicCredentialsProvider();
  credentialsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""));
  DefaultApacheHttpClient4Config config=new DefaultApacheHttpClient4Config();
  config.getProperties().put(ApacheHttpClient4Config.PROPERTY_CREDENTIALS_PROVIDER,credentialsProvider);
  ApacheHttpClient4 c=ApacheHttpClient4.create(config);
  WebResource r=c.resource(getUri().path(""String_Node_Str"").build());
  ClientResponse response=r.delete(ClientResponse.class);
  assertEquals(response.getStatus(),204);
}","public void testAuthDelete(){
  ResourceConfig rc=new DefaultResourceConfig(AuthResource.class);
  rc.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,LoggingFilter.class.getName());
  rc.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS,LoggingFilter.class.getName());
  startServer(rc);
  CredentialsProvider credentialsProvider=new org.apache.http.impl.client.BasicCredentialsProvider();
  credentialsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(""String_Node_Str"",""String_Node_Str""));
  DefaultApacheHttpClient4Config config=new DefaultApacheHttpClient4Config();
  config.getProperties().put(ApacheHttpClient4Config.PROPERTY_CREDENTIALS_PROVIDER,credentialsProvider);
  ApacheHttpClient4 c=ApacheHttpClient4.create(config);
  WebResource r=c.resource(getUri().path(""String_Node_Str"").build());
  ClientResponse response=r.delete(ClientResponse.class);
  assertEquals(response.getStatus(),204);
}"
51115,"public void testAuthDeleteWithClientFilter(){
  ResourceConfig rc=new DefaultResourceConfig(AuthResource.class);
  startServer(rc);
  ApacheHttpClient4 c=ApacheHttpClient4.create();
  c.addFilter(new HTTPBasicAuthFilter(""String_Node_Str"",""String_Node_Str""));
  WebResource r=c.resource(getUri().path(""String_Node_Str"").build());
  ClientResponse response=r.delete(ClientResponse.class);
  assertEquals(204,response.getStatus());
}","public void testAuthDeleteWithClientFilter(){
  ResourceConfig rc=new DefaultResourceConfig(AuthResource.class);
  rc.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS,LoggingFilter.class.getName());
  rc.getProperties().put(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS,LoggingFilter.class.getName());
  startServer(rc);
  ApacheHttpClient4 c=ApacheHttpClient4.create();
  c.addFilter(new HTTPBasicAuthFilter(""String_Node_Str"",""String_Node_Str""));
  WebResource r=c.resource(getUri().path(""String_Node_Str"").build());
  ClientResponse response=r.delete(ClientResponse.class);
  assertEquals(204,response.getStatus());
}"
51116,"public AnnotatedParameterImpl(AnnotatedParameter<T> param,Set<Annotation> annotations,AnnotatedCallable<T> declaringCallable){
  this(param.getBaseType(),param.getTypeClosure(),annotations,declaringCallable,param.getPosition());
}","public AnnotatedParameterImpl(AnnotatedParameter<? super T> param,Set<Annotation> annotations,AnnotatedCallable<T> declaringCallable){
  this(param.getBaseType(),param.getTypeClosure(),annotations,declaringCallable,param.getPosition());
}"
51117,"private <T>void patchAnnotatedCallable(AnnotatedCallable<T> callable,AnnotatedCallableImpl<T> newCallable,Map<AnnotatedParameter<T>,PatchInformation> parameterToPatchInfoMap){
  List<AnnotatedParameter<T>> newParams=new ArrayList<AnnotatedParameter<T>>();
  for (  AnnotatedParameter<T> parameter : callable.getParameters()) {
    PatchInformation patchInfo=parameterToPatchInfoMap.get(parameter);
    if (patchInfo != null) {
      Set<Annotation> annotations=new HashSet<Annotation>();
      if (patchInfo.mustAddInject()) {
        annotations.add(injectAnnotationLiteral);
      }
      if (patchInfo.getSyntheticQualifier() != null) {
        annotations.add(patchInfo.getSyntheticQualifier());
        Annotation skippedQualifier=patchInfo.getParameter().getAnnotation();
        for (        Annotation annotation : parameter.getAnnotations()) {
          if (annotation != skippedQualifier) {
            annotations.add(annotation);
          }
        }
      }
 else {
        annotations.addAll(parameter.getAnnotations());
      }
      if (patchInfo.getAnnotation() != null) {
        annotations.add(patchInfo.getAnnotation());
      }
      newParams.add(new AnnotatedParameterImpl<T>(parameter,annotations,callable));
    }
 else {
      newParams.add(new AnnotatedParameterImpl<T>(parameter,newCallable));
    }
  }
  newCallable.setParameters(newParams);
}","private <T>void patchAnnotatedCallable(AnnotatedCallable<? super T> callable,AnnotatedCallableImpl<T> newCallable,Map<AnnotatedParameter<? super T>,PatchInformation> parameterToPatchInfoMap){
  List<AnnotatedParameter<T>> newParams=new ArrayList<AnnotatedParameter<T>>();
  for (  AnnotatedParameter<? super T> parameter : callable.getParameters()) {
    PatchInformation patchInfo=parameterToPatchInfoMap.get(parameter);
    if (patchInfo != null) {
      Set<Annotation> annotations=new HashSet<Annotation>();
      if (patchInfo.mustAddInject()) {
        annotations.add(injectAnnotationLiteral);
      }
      if (patchInfo.getSyntheticQualifier() != null) {
        annotations.add(patchInfo.getSyntheticQualifier());
        Annotation skippedQualifier=patchInfo.getParameter().getAnnotation();
        for (        Annotation annotation : parameter.getAnnotations()) {
          if (annotation != skippedQualifier) {
            annotations.add(annotation);
          }
        }
      }
 else {
        annotations.addAll(parameter.getAnnotations());
      }
      if (patchInfo.getAnnotation() != null) {
        annotations.add(patchInfo.getAnnotation());
      }
      newParams.add(new AnnotatedParameterImpl<T>(parameter,annotations,newCallable));
    }
 else {
      newParams.add(new AnnotatedParameterImpl<T>(parameter,newCallable));
    }
  }
  newCallable.setParameters(newParams);
}"
51118,"private <T>boolean processAnnotatedConstructor(AnnotatedConstructor<T> constructor,boolean classHasEncodedAnnotation,Map<AnnotatedParameter<T>,PatchInformation> parameterToPatchInfoMap){
  boolean mustPatch=false;
  if (constructor.getAnnotation(Inject.class) != null) {
    boolean methodHasEncodedAnnotation=constructor.isAnnotationPresent(Encoded.class);
    for (    AnnotatedParameter<T> parameter : constructor.getParameters()) {
      for (      Annotation annotation : parameter.getAnnotations()) {
        Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
        if (discovered != null) {
          if (knownParameterQualifiers.contains(annotation.annotationType())) {
            if (methodHasEncodedAnnotation || classHasEncodedAnnotation || parameter.isAnnotationPresent(DefaultValue.class)) {
              mustPatch=true;
            }
            boolean encoded=parameter.isAnnotationPresent(Encoded.class) || methodHasEncodedAnnotation || classHasEncodedAnnotation;
            DefaultValue defaultValue=parameter.getAnnotation(DefaultValue.class);
            if (defaultValue != null) {
              mustPatch=true;
            }
            DiscoveredParameter jerseyParameter=new DiscoveredParameter(annotation,parameter.getBaseType(),defaultValue,encoded);
            discovered.add(jerseyParameter);
            LOGGER.fine(""String_Node_Str"" + jerseyParameter);
            parameterToPatchInfoMap.put(parameter,new PatchInformation(jerseyParameter,getSyntheticQualifierFor(jerseyParameter),false));
          }
        }
      }
    }
  }
  return mustPatch;
}","private <T>boolean processAnnotatedConstructor(AnnotatedConstructor<T> constructor,boolean classHasEncodedAnnotation,Map<AnnotatedParameter<? super T>,PatchInformation> parameterToPatchInfoMap){
  boolean mustPatch=false;
  if (constructor.getAnnotation(Inject.class) != null) {
    boolean methodHasEncodedAnnotation=constructor.isAnnotationPresent(Encoded.class);
    for (    AnnotatedParameter<T> parameter : constructor.getParameters()) {
      for (      Annotation annotation : parameter.getAnnotations()) {
        Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
        if (discovered != null) {
          if (knownParameterQualifiers.contains(annotation.annotationType())) {
            if (methodHasEncodedAnnotation || classHasEncodedAnnotation || parameter.isAnnotationPresent(DefaultValue.class)) {
              mustPatch=true;
            }
            boolean encoded=parameter.isAnnotationPresent(Encoded.class) || methodHasEncodedAnnotation || classHasEncodedAnnotation;
            DefaultValue defaultValue=parameter.getAnnotation(DefaultValue.class);
            if (defaultValue != null) {
              mustPatch=true;
            }
            DiscoveredParameter jerseyParameter=new DiscoveredParameter(annotation,parameter.getBaseType(),defaultValue,encoded);
            discovered.add(jerseyParameter);
            LOGGER.fine(""String_Node_Str"" + jerseyParameter);
            parameterToPatchInfoMap.put(parameter,new PatchInformation(jerseyParameter,getSyntheticQualifierFor(jerseyParameter),false));
          }
        }
      }
    }
  }
  return mustPatch;
}"
51119,"private <T>boolean processAnnotatedField(AnnotatedField<T> field,boolean classHasEncodedAnnotation,Map<AnnotatedField<T>,PatchInformation> fieldToPatchInfoMap){
  boolean mustPatch=false;
  for (  Annotation annotation : field.getAnnotations()) {
    if (knownParameterQualifiers.contains(annotation.annotationType())) {
      boolean mustAddInjectAnnotation=!field.isAnnotationPresent(Inject.class);
      if (field.isAnnotationPresent(Encoded.class) || classHasEncodedAnnotation || mustAddInjectAnnotation|| field.isAnnotationPresent(DefaultValue.class)) {
        mustPatch=true;
      }
      Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
      if (discovered != null) {
        boolean encoded=field.isAnnotationPresent(Encoded.class) || classHasEncodedAnnotation;
        DefaultValue defaultValue=field.getAnnotation(DefaultValue.class);
        DiscoveredParameter parameter=new DiscoveredParameter(annotation,field.getBaseType(),defaultValue,encoded);
        discovered.add(parameter);
        LOGGER.fine(""String_Node_Str"" + parameter);
        fieldToPatchInfoMap.put(field,new PatchInformation(parameter,getSyntheticQualifierFor(parameter),mustAddInjectAnnotation));
      }
    }
  }
  return mustPatch;
}","private <T>boolean processAnnotatedField(AnnotatedField<? super T> field,Class<T> token,boolean classHasEncodedAnnotation,Map<AnnotatedField<? super T>,PatchInformation> fieldToPatchInfoMap){
  boolean mustPatch=false;
  for (  Annotation annotation : field.getAnnotations()) {
    if (knownParameterQualifiers.contains(annotation.annotationType())) {
      boolean mustAddInjectAnnotation=!field.isAnnotationPresent(Inject.class);
      if (field.isAnnotationPresent(Encoded.class) || classHasEncodedAnnotation || mustAddInjectAnnotation|| field.isAnnotationPresent(DefaultValue.class)) {
        mustPatch=true;
      }
      Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
      if (discovered != null) {
        boolean encoded=field.isAnnotationPresent(Encoded.class) || classHasEncodedAnnotation;
        DefaultValue defaultValue=field.getAnnotation(DefaultValue.class);
        DiscoveredParameter parameter=new DiscoveredParameter(annotation,field.getBaseType(),defaultValue,encoded);
        discovered.add(parameter);
        LOGGER.fine(""String_Node_Str"" + parameter);
        fieldToPatchInfoMap.put(field,new PatchInformation(parameter,getSyntheticQualifierFor(parameter),mustAddInjectAnnotation));
      }
    }
  }
  return mustPatch;
}"
51120,"void beforeBeanDiscovery(@Observes BeforeBeanDiscovery event){
  LOGGER.fine(""String_Node_Str"");
  initialize();
  for (  Class<? extends Annotation> qualifier : knownParameterQualifiers) {
    event.addQualifier(qualifier);
  }
}","void beforeBeanDiscovery(@Observes BeforeBeanDiscovery event,BeanManager manager){
  LOGGER.fine(""String_Node_Str"");
  initialize(manager);
  for (  Class<? extends Annotation> qualifier : knownParameterQualifiers) {
    event.addQualifier(qualifier);
  }
}"
51121,"private <T>void copyParametersOfAnnotatedCallable(AnnotatedCallable<T> callable,AnnotatedCallableImpl<T> newCallable){
  List<AnnotatedParameter<T>> newParams=new ArrayList<AnnotatedParameter<T>>();
  for (  AnnotatedParameter<T> parameter : callable.getParameters()) {
    newParams.add(new AnnotatedParameterImpl<T>(parameter,newCallable));
  }
  newCallable.setParameters(newParams);
}","private <T>void copyParametersOfAnnotatedCallable(AnnotatedCallable<? super T> callable,AnnotatedCallableImpl<T> newCallable){
  List<AnnotatedParameter<T>> newParams=new ArrayList<AnnotatedParameter<T>>();
  for (  AnnotatedParameter<? super T> parameter : callable.getParameters()) {
    newParams.add(new AnnotatedParameterImpl<T>(parameter,newCallable));
  }
  newCallable.setParameters(newParams);
}"
51122,"private <T>boolean processAnnotatedMethod(AnnotatedMethod<T> method,boolean classHasEncodedAnnotation,Map<AnnotatedParameter<T>,PatchInformation> parameterToPatchInfoMap,Set<AnnotatedMethod<T>> setterMethodsWithoutInject){
  boolean mustPatch=false;
  if (method.getAnnotation(Inject.class) != null) {
    boolean methodHasEncodedAnnotation=method.isAnnotationPresent(Encoded.class);
    for (    AnnotatedParameter<T> parameter : method.getParameters()) {
      for (      Annotation annotation : parameter.getAnnotations()) {
        Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
        if (discovered != null) {
          if (knownParameterQualifiers.contains(annotation.annotationType())) {
            if (methodHasEncodedAnnotation || classHasEncodedAnnotation || parameter.isAnnotationPresent(DefaultValue.class)) {
              mustPatch=true;
            }
            boolean encoded=parameter.isAnnotationPresent(Encoded.class) || methodHasEncodedAnnotation || classHasEncodedAnnotation;
            DefaultValue defaultValue=parameter.getAnnotation(DefaultValue.class);
            if (defaultValue != null) {
              mustPatch=true;
            }
            DiscoveredParameter jerseyParameter=new DiscoveredParameter(annotation,parameter.getBaseType(),defaultValue,encoded);
            discovered.add(jerseyParameter);
            LOGGER.fine(""String_Node_Str"" + jerseyParameter);
            parameterToPatchInfoMap.put(parameter,new PatchInformation(jerseyParameter,getSyntheticQualifierFor(jerseyParameter),false));
          }
        }
      }
    }
  }
 else {
    if (isSetterMethod(method)) {
      boolean methodHasEncodedAnnotation=method.isAnnotationPresent(Encoded.class);
      for (      Annotation annotation : method.getAnnotations()) {
        Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
        if (discovered != null) {
          if (knownParameterQualifiers.contains(annotation.annotationType())) {
            mustPatch=true;
            setterMethodsWithoutInject.add(method);
            for (            AnnotatedParameter<T> parameter : method.getParameters()) {
              boolean encoded=parameter.isAnnotationPresent(Encoded.class) || methodHasEncodedAnnotation || classHasEncodedAnnotation;
              DefaultValue defaultValue=parameter.getAnnotation(DefaultValue.class);
              if (defaultValue == null) {
                defaultValue=method.getAnnotation(DefaultValue.class);
              }
              DiscoveredParameter jerseyParameter=new DiscoveredParameter(annotation,parameter.getBaseType(),defaultValue,encoded);
              discovered.add(jerseyParameter);
              LOGGER.fine(""String_Node_Str"" + jerseyParameter);
              SyntheticQualifier syntheticQualifier=getSyntheticQualifierFor(jerseyParameter);
              Annotation addedAnnotation=syntheticQualifier == null ? annotation : null;
              parameterToPatchInfoMap.put(parameter,new PatchInformation(jerseyParameter,syntheticQualifier,addedAnnotation,false));
            }
            break;
          }
        }
      }
    }
  }
  return mustPatch;
}","private <T>boolean processAnnotatedMethod(AnnotatedMethod<? super T> method,Class<T> token,boolean classHasEncodedAnnotation,Map<AnnotatedParameter<? super T>,PatchInformation> parameterToPatchInfoMap,Set<AnnotatedMethod<? super T>> setterMethodsWithoutInject){
  boolean mustPatch=false;
  if (method.getAnnotation(Inject.class) != null) {
    boolean methodHasEncodedAnnotation=method.isAnnotationPresent(Encoded.class);
    for (    AnnotatedParameter<? super T> parameter : method.getParameters()) {
      for (      Annotation annotation : parameter.getAnnotations()) {
        Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
        if (discovered != null) {
          if (knownParameterQualifiers.contains(annotation.annotationType())) {
            if (methodHasEncodedAnnotation || classHasEncodedAnnotation || parameter.isAnnotationPresent(DefaultValue.class)) {
              mustPatch=true;
            }
            boolean encoded=parameter.isAnnotationPresent(Encoded.class) || methodHasEncodedAnnotation || classHasEncodedAnnotation;
            DefaultValue defaultValue=parameter.getAnnotation(DefaultValue.class);
            if (defaultValue != null) {
              mustPatch=true;
            }
            DiscoveredParameter jerseyParameter=new DiscoveredParameter(annotation,parameter.getBaseType(),defaultValue,encoded);
            discovered.add(jerseyParameter);
            LOGGER.fine(""String_Node_Str"" + jerseyParameter);
            parameterToPatchInfoMap.put(parameter,new PatchInformation(jerseyParameter,getSyntheticQualifierFor(jerseyParameter),false));
          }
        }
      }
    }
  }
 else {
    if (isSetterMethod(method)) {
      boolean methodHasEncodedAnnotation=method.isAnnotationPresent(Encoded.class);
      for (      Annotation annotation : method.getAnnotations()) {
        Set<DiscoveredParameter> discovered=discoveredParameterMap.get(annotation.annotationType());
        if (discovered != null) {
          if (knownParameterQualifiers.contains(annotation.annotationType())) {
            mustPatch=true;
            setterMethodsWithoutInject.add(method);
            for (            AnnotatedParameter<? super T> parameter : method.getParameters()) {
              boolean encoded=parameter.isAnnotationPresent(Encoded.class) || methodHasEncodedAnnotation || classHasEncodedAnnotation;
              DefaultValue defaultValue=parameter.getAnnotation(DefaultValue.class);
              if (defaultValue == null) {
                defaultValue=method.getAnnotation(DefaultValue.class);
              }
              DiscoveredParameter jerseyParameter=new DiscoveredParameter(annotation,parameter.getBaseType(),defaultValue,encoded);
              discovered.add(jerseyParameter);
              LOGGER.fine(""String_Node_Str"" + jerseyParameter);
              SyntheticQualifier syntheticQualifier=getSyntheticQualifierFor(jerseyParameter);
              Annotation addedAnnotation=syntheticQualifier == null ? annotation : null;
              parameterToPatchInfoMap.put(parameter,new PatchInformation(jerseyParameter,syntheticQualifier,addedAnnotation,false));
            }
            break;
          }
        }
      }
    }
  }
  return mustPatch;
}"
51123,"private void initialize(){
  if (!lookupExtensionInBeanManager) {
    try {
      InitialContext ic=InitialContextHelper.getInitialContext();
      if (ic != null) {
        ic.rebind(JNDI_CDIEXTENSION_NAME,this);
      }
    }
 catch (    NamingException ex) {
      throw new RuntimeException(ex);
    }
  }
  Set<Class<? extends Annotation>> set=new HashSet<Class<? extends Annotation>>();
  set.add(CookieParam.class);
  set.add(FormParam.class);
  set.add(HeaderParam.class);
  set.add(MatrixParam.class);
  set.add(PathParam.class);
  set.add(QueryParam.class);
  set.add(Context.class);
  knownParameterQualifiers=Collections.unmodifiableSet(set);
  Map<Class<? extends Annotation>,Parameter.Source> map=new HashMap<Class<? extends Annotation>,Parameter.Source>();
  map.put(CookieParam.class,Parameter.Source.COOKIE);
  map.put(FormParam.class,Parameter.Source.FORM);
  map.put(HeaderParam.class,Parameter.Source.HEADER);
  map.put(MatrixParam.class,Parameter.Source.MATRIX);
  map.put(PathParam.class,Parameter.Source.PATH);
  map.put(QueryParam.class,Parameter.Source.QUERY);
  map.put(Context.class,Parameter.Source.CONTEXT);
  paramQualifiersMap=Collections.unmodifiableMap(map);
  Set<Class<?>> set3=new HashSet<Class<?>>();
  set3.add(Application.class);
  set3.add(HttpHeaders.class);
  set3.add(Providers.class);
  set3.add(Request.class);
  set3.add(SecurityContext.class);
  set3.add(UriInfo.class);
  set3.add(ExceptionMapperContext.class);
  set3.add(ExtendedUriInfo.class);
  set3.add(FeaturesAndProperties.class);
  set3.add(HttpContext.class);
  set3.add(HttpRequestContext.class);
  set3.add(HttpResponseContext.class);
  set3.add(MessageBodyWorkers.class);
  set3.add(ResourceContext.class);
  set3.add(WebApplication.class);
  staticallyDefinedContextBeans=Collections.unmodifiableSet(set3);
  Map<Class<? extends Annotation>,Set<DiscoveredParameter>> map2=new HashMap<Class<? extends Annotation>,Set<DiscoveredParameter>>();
  for (  Class<? extends Annotation> qualifier : knownParameterQualifiers) {
    map2.put(qualifier,new HashSet<DiscoveredParameter>());
  }
  discoveredParameterMap=Collections.unmodifiableMap(map2);
  syntheticQualifierMap=new HashMap<DiscoveredParameter,SyntheticQualifier>();
  toBeInitializedLater=new ArrayList<InitializedLater>();
}","private void initialize(BeanManager manager){
  if (!lookupExtensionInBeanManager) {
    try {
      InitialContext ic=InitialContextHelper.getInitialContext();
      if (ic != null) {
        ic.rebind(JNDI_CDIEXTENSION_NAME,this);
      }
    }
 catch (    NamingException ex) {
      throw new RuntimeException(ex);
    }
  }
  Set<Class<? extends Annotation>> set=new HashSet<Class<? extends Annotation>>();
  set.add(CookieParam.class);
  set.add(FormParam.class);
  set.add(HeaderParam.class);
  set.add(MatrixParam.class);
  set.add(PathParam.class);
  set.add(QueryParam.class);
  set.add(Context.class);
  knownParameterQualifiers=Collections.unmodifiableSet(set);
  Map<Class<? extends Annotation>,Parameter.Source> map=new HashMap<Class<? extends Annotation>,Parameter.Source>();
  map.put(CookieParam.class,Parameter.Source.COOKIE);
  map.put(FormParam.class,Parameter.Source.FORM);
  map.put(HeaderParam.class,Parameter.Source.HEADER);
  map.put(MatrixParam.class,Parameter.Source.MATRIX);
  map.put(PathParam.class,Parameter.Source.PATH);
  map.put(QueryParam.class,Parameter.Source.QUERY);
  map.put(Context.class,Parameter.Source.CONTEXT);
  paramQualifiersMap=Collections.unmodifiableMap(map);
  Set<Class<?>> set3=new HashSet<Class<?>>();
  set3.add(Application.class);
  set3.add(HttpHeaders.class);
  set3.add(Providers.class);
  set3.add(Request.class);
  set3.add(SecurityContext.class);
  set3.add(UriInfo.class);
  set3.add(ExceptionMapperContext.class);
  set3.add(ExtendedUriInfo.class);
  set3.add(FeaturesAndProperties.class);
  set3.add(HttpContext.class);
  set3.add(HttpRequestContext.class);
  set3.add(HttpResponseContext.class);
  set3.add(MessageBodyWorkers.class);
  set3.add(ResourceContext.class);
  set3.add(WebApplication.class);
  staticallyDefinedContextBeans=Collections.unmodifiableSet(set3);
  Map<Class<? extends Annotation>,Set<DiscoveredParameter>> map2=new HashMap<Class<? extends Annotation>,Set<DiscoveredParameter>>();
  for (  Class<? extends Annotation> qualifier : knownParameterQualifiers) {
    map2.put(qualifier,new HashSet<DiscoveredParameter>());
  }
  discoveredParameterMap=Collections.unmodifiableMap(map2);
  syntheticQualifierMap=new HashMap<DiscoveredParameter,SyntheticQualifier>();
  toBeInitializedLater=new ArrayList<InitializedLater>();
}"
51124,"<T>void processAnnotatedType(@Observes ProcessAnnotatedType<T> event){
  LOGGER.fine(""String_Node_Str"" + event.getAnnotatedType().getJavaClass().getName());
  AnnotatedType<T> type=event.getAnnotatedType();
  boolean classHasEncodedAnnotation=type.isAnnotationPresent(Encoded.class);
  Set<AnnotatedConstructor<T>> mustPatchConstructors=new HashSet<AnnotatedConstructor<T>>();
  Map<AnnotatedParameter<T>,PatchInformation> parameterToPatchInfoMap=new HashMap<AnnotatedParameter<T>,PatchInformation>();
  for (  AnnotatedConstructor<T> constructor : type.getConstructors()) {
    if (processAnnotatedConstructor(constructor,classHasEncodedAnnotation,parameterToPatchInfoMap)) {
      mustPatchConstructors.add(constructor);
    }
  }
  Set<AnnotatedField<T>> mustPatchFields=new HashSet<AnnotatedField<T>>();
  Map<AnnotatedField<T>,PatchInformation> fieldToPatchInfoMap=new HashMap<AnnotatedField<T>,PatchInformation>();
  outer:   for (  AnnotatedField<? super T> field : type.getFields()) {
    if (field.getDeclaringType() == type) {
      if (processAnnotatedField((AnnotatedField<T>)field,classHasEncodedAnnotation,fieldToPatchInfoMap)) {
        mustPatchFields.add((AnnotatedField<T>)field);
      }
    }
  }
  Set<AnnotatedMethod<T>> mustPatchMethods=new HashSet<AnnotatedMethod<T>>();
  Set<AnnotatedMethod<T>> setterMethodsWithoutInject=new HashSet<AnnotatedMethod<T>>();
  for (  AnnotatedMethod<? super T> method : type.getMethods()) {
    if (method.getDeclaringType() == type) {
      if (processAnnotatedMethod((AnnotatedMethod<T>)method,classHasEncodedAnnotation,parameterToPatchInfoMap,setterMethodsWithoutInject)) {
        mustPatchMethods.add((AnnotatedMethod<T>)method);
      }
    }
  }
  boolean typeNeedsPatching=!(mustPatchConstructors.isEmpty() && mustPatchFields.isEmpty() && mustPatchMethods.isEmpty());
  if (typeNeedsPatching) {
    AnnotatedTypeImpl<T> newType=new AnnotatedTypeImpl(type);
    Set<AnnotatedConstructor<T>> newConstructors=new HashSet<AnnotatedConstructor<T>>();
    for (    AnnotatedConstructor<T> constructor : type.getConstructors()) {
      AnnotatedConstructorImpl<T> newConstructor=new AnnotatedConstructorImpl(constructor,newType);
      if (mustPatchConstructors.contains(constructor)) {
        patchAnnotatedCallable(constructor,newConstructor,parameterToPatchInfoMap);
      }
 else {
        copyParametersOfAnnotatedCallable(constructor,newConstructor);
      }
      newConstructors.add(newConstructor);
    }
    Set<AnnotatedField<? super T>> newFields=new HashSet<AnnotatedField<? super T>>();
    for (    AnnotatedField<? super T> field : type.getFields()) {
      if (field.getDeclaringType() == type) {
        if (mustPatchFields.contains((AnnotatedField<T>)field)) {
          PatchInformation patchInfo=fieldToPatchInfoMap.get((AnnotatedField<T>)field);
          Set<Annotation> annotations=new HashSet<Annotation>();
          if (patchInfo.mustAddInject()) {
            annotations.add(injectAnnotationLiteral);
          }
          if (patchInfo.getSyntheticQualifier() != null) {
            annotations.add(patchInfo.getSyntheticQualifier());
            Annotation skippedQualifier=patchInfo.getParameter().getAnnotation();
            for (            Annotation annotation : field.getAnnotations()) {
              if (annotation != skippedQualifier) {
                annotations.add(annotation);
              }
            }
          }
 else {
            annotations.addAll(field.getAnnotations());
          }
          if (patchInfo.getAnnotation() != null) {
            annotations.add(patchInfo.getAnnotation());
          }
          newFields.add(new AnnotatedFieldImpl<T>(field,annotations,newType));
        }
 else {
          newFields.add(new AnnotatedFieldImpl<T>(field,newType));
        }
      }
 else {
        newFields.add(field);
      }
    }
    Set<AnnotatedMethod<? super T>> newMethods=new HashSet<AnnotatedMethod<? super T>>();
    for (    AnnotatedMethod<? super T> method : type.getMethods()) {
      if (method.getDeclaringType() == type) {
        if (mustPatchMethods.contains((AnnotatedMethod<T>)method)) {
          if (setterMethodsWithoutInject.contains((AnnotatedMethod<T>)method)) {
            Set<Annotation> annotations=new HashSet<Annotation>();
            annotations.add(injectAnnotationLiteral);
            for (            Annotation annotation : method.getAnnotations()) {
              if (!knownParameterQualifiers.contains(annotation.annotationType())) {
                annotations.add(annotation);
              }
            }
            AnnotatedMethodImpl<T> newMethod=new AnnotatedMethodImpl<T>(method,annotations,newType);
            patchAnnotatedCallable((AnnotatedMethod<T>)method,newMethod,parameterToPatchInfoMap);
            newMethods.add(newMethod);
          }
 else {
            AnnotatedMethodImpl<T> newMethod=new AnnotatedMethodImpl<T>(method,newType);
            patchAnnotatedCallable((AnnotatedMethod<T>)method,newMethod,parameterToPatchInfoMap);
            newMethods.add(newMethod);
          }
        }
 else {
          AnnotatedMethodImpl<T> newMethod=new AnnotatedMethodImpl<T>(method,newType);
          copyParametersOfAnnotatedCallable((AnnotatedMethod<T>)method,newMethod);
          newMethods.add(newMethod);
        }
      }
 else {
        newMethods.add(method);
      }
    }
    newType.setConstructors(newConstructors);
    newType.setFields(newFields);
    newType.setMethods(newMethods);
    event.setAnnotatedType(newType);
    LOGGER.fine(""String_Node_Str"" + type.getJavaClass());
  }
}","<T>void processAnnotatedType(@Observes ProcessAnnotatedType<T> event){
  LOGGER.fine(""String_Node_Str"" + event.getAnnotatedType().getJavaClass().getName());
  AnnotatedType<T> type=event.getAnnotatedType();
  boolean classHasEncodedAnnotation=type.isAnnotationPresent(Encoded.class);
  Set<AnnotatedConstructor<T>> mustPatchConstructors=new HashSet<AnnotatedConstructor<T>>();
  Map<AnnotatedParameter<? super T>,PatchInformation> parameterToPatchInfoMap=new HashMap<AnnotatedParameter<? super T>,PatchInformation>();
  for (  AnnotatedConstructor<T> constructor : type.getConstructors()) {
    if (processAnnotatedConstructor(constructor,classHasEncodedAnnotation,parameterToPatchInfoMap)) {
      mustPatchConstructors.add(constructor);
    }
  }
  Set<AnnotatedField<? super T>> mustPatchFields=new HashSet<AnnotatedField<? super T>>();
  Map<AnnotatedField<? super T>,PatchInformation> fieldToPatchInfoMap=new HashMap<AnnotatedField<? super T>,PatchInformation>();
  for (  AnnotatedField<? super T> field : type.getFields()) {
    if (processAnnotatedField(field,type.getJavaClass(),classHasEncodedAnnotation,fieldToPatchInfoMap)) {
      mustPatchFields.add(field);
    }
  }
  Set<AnnotatedMethod<? super T>> mustPatchMethods=new HashSet<AnnotatedMethod<? super T>>();
  Set<AnnotatedMethod<? super T>> setterMethodsWithoutInject=new HashSet<AnnotatedMethod<? super T>>();
  for (  AnnotatedMethod<? super T> method : type.getMethods()) {
    if (processAnnotatedMethod(method,type.getJavaClass(),classHasEncodedAnnotation,parameterToPatchInfoMap,setterMethodsWithoutInject)) {
      mustPatchMethods.add(method);
    }
  }
  boolean typeNeedsPatching=!(mustPatchConstructors.isEmpty() && mustPatchFields.isEmpty() && mustPatchMethods.isEmpty());
  if (typeNeedsPatching) {
    AnnotatedTypeImpl<T> newType=new AnnotatedTypeImpl(type);
    Set<AnnotatedConstructor<T>> newConstructors=new HashSet<AnnotatedConstructor<T>>();
    for (    AnnotatedConstructor<T> constructor : type.getConstructors()) {
      AnnotatedConstructorImpl<T> newConstructor=new AnnotatedConstructorImpl(constructor,newType);
      if (mustPatchConstructors.contains(constructor)) {
        patchAnnotatedCallable(constructor,newConstructor,parameterToPatchInfoMap);
      }
 else {
        copyParametersOfAnnotatedCallable(constructor,newConstructor);
      }
      newConstructors.add(newConstructor);
    }
    Set<AnnotatedField<? super T>> newFields=new HashSet<AnnotatedField<? super T>>();
    for (    AnnotatedField<? super T> field : type.getFields()) {
      if (mustPatchFields.contains(field)) {
        PatchInformation patchInfo=fieldToPatchInfoMap.get(field);
        Set<Annotation> annotations=new HashSet<Annotation>();
        if (patchInfo.mustAddInject()) {
          annotations.add(injectAnnotationLiteral);
        }
        if (patchInfo.getSyntheticQualifier() != null) {
          annotations.add(patchInfo.getSyntheticQualifier());
          Annotation skippedQualifier=patchInfo.getParameter().getAnnotation();
          for (          Annotation annotation : field.getAnnotations()) {
            if (annotation != skippedQualifier) {
              annotations.add(annotation);
            }
          }
        }
 else {
          annotations.addAll(field.getAnnotations());
        }
        if (patchInfo.getAnnotation() != null) {
          annotations.add(patchInfo.getAnnotation());
        }
        newFields.add(new AnnotatedFieldImpl<T>(field,annotations,newType));
      }
 else {
        newFields.add(new AnnotatedFieldImpl<T>(field,newType));
      }
    }
    Set<AnnotatedMethod<? super T>> newMethods=new HashSet<AnnotatedMethod<? super T>>();
    for (    AnnotatedMethod<? super T> method : type.getMethods()) {
      if (mustPatchMethods.contains((AnnotatedMethod<T>)method)) {
        if (setterMethodsWithoutInject.contains((AnnotatedMethod<T>)method)) {
          Set<Annotation> annotations=new HashSet<Annotation>();
          annotations.add(injectAnnotationLiteral);
          for (          Annotation annotation : method.getAnnotations()) {
            if (!knownParameterQualifiers.contains(annotation.annotationType())) {
              annotations.add(annotation);
            }
          }
          AnnotatedMethodImpl<T> newMethod=new AnnotatedMethodImpl<T>(method,annotations,newType);
          patchAnnotatedCallable(method,newMethod,parameterToPatchInfoMap);
          newMethods.add(newMethod);
        }
 else {
          AnnotatedMethodImpl<T> newMethod=new AnnotatedMethodImpl<T>(method,newType);
          patchAnnotatedCallable(method,newMethod,parameterToPatchInfoMap);
          newMethods.add(newMethod);
        }
      }
 else {
        AnnotatedMethodImpl<T> newMethod=new AnnotatedMethodImpl<T>(method,newType);
        copyParametersOfAnnotatedCallable(method,newMethod);
        newMethods.add(newMethod);
      }
    }
    newType.setConstructors(newConstructors);
    newType.setFields(newFields);
    newType.setMethods(newMethods);
    event.setAnnotatedType(newType);
    LOGGER.fine(""String_Node_Str"" + type.getJavaClass());
  }
}"
51125,"public char next(){
  if (!hasNext())   throw new NoSuchElementException();
  return s.charAt(pos++);
}","@Override public char next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  return s.charAt(pos++);
}"
51126,"private void parseName(CharacterIterator ci){
  char c=consumeWhiteSpace(ci);
  StringBuffer nameBuffer=new StringBuffer();
  if (Character.isLetterOrDigit(c) || c == '_') {
    nameBuffer.append(c);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str""+ ci.pos()+ ""String_Node_Str"");
  }
  String nameRegexString=""String_Node_Str"";
  while (true) {
    c=ci.next();
    if (Character.isLetterOrDigit(c) || c == '_' || c == '-' || c == '.') {
      nameBuffer.append(c);
    }
 else     if (c == ':') {
      nameRegexString=parseRegex(ci);
      break;
    }
 else     if (c == '}') {
      break;
    }
 else     if (c == ' ') {
      c=consumeWhiteSpace(ci);
      if (c == ':') {
        nameRegexString=parseRegex(ci);
        break;
      }
 else       if (c == '}') {
        break;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str""+ ci.pos()+ ""String_Node_Str"");
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str""+ ci.pos()+ ""String_Node_Str"");
    }
  }
  String name=nameBuffer.toString();
  names.add(name);
  try {
    if (nameRegexString.length() > 0)     numOfExplicitRegexes++;
    Pattern namePattern=(nameRegexString.length() == 0) ? TEMPLATE_VALUE_PATTERN : Pattern.compile(nameRegexString);
    if (nameToPattern.containsKey(name)) {
      if (!nameToPattern.get(name).equals(namePattern)) {
        throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else {
      nameToPattern.put(name,namePattern);
    }
    Matcher m=namePattern.matcher(""String_Node_Str"");
    int g=m.groupCount();
    groupCounts.add(g + 1);
    regex.append('(').append(namePattern).append(')');
    normalizedTemplate.append('{').append(name).append('}');
  }
 catch (  PatternSyntaxException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + nameRegexString + ""String_Node_Str""+ name+ ""String_Node_Str"",ex);
  }
}","private void parseName(final CharacterIterator ci){
  char c=consumeWhiteSpace(ci);
  StringBuilder nameBuffer=new StringBuilder();
  if (Character.isLetterOrDigit(c) || c == '_') {
    nameBuffer.append(c);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str""+ ci.pos()+ ""String_Node_Str"");
  }
  String nameRegexString=""String_Node_Str"";
  while (true) {
    c=ci.next();
    if (Character.isLetterOrDigit(c) || c == '_' || c == '-' || c == '.') {
      nameBuffer.append(c);
    }
 else     if (c == ':') {
      nameRegexString=parseRegex(ci);
      break;
    }
 else     if (c == '}') {
      break;
    }
 else     if (c == ' ') {
      c=consumeWhiteSpace(ci);
      if (c == ':') {
        nameRegexString=parseRegex(ci);
        break;
      }
 else       if (c == '}') {
        break;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str""+ ci.pos()+ ""String_Node_Str"");
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str""+ ci.pos()+ ""String_Node_Str"");
    }
  }
  String name=nameBuffer.toString();
  names.add(name);
  try {
    if (nameRegexString.length() > 0) {
      numOfExplicitRegexes++;
    }
    Pattern namePattern=(nameRegexString.length() == 0) ? TEMPLATE_VALUE_PATTERN : Pattern.compile(nameRegexString);
    if (nameToPattern.containsKey(name)) {
      if (!nameToPattern.get(name).equals(namePattern)) {
        throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else {
      nameToPattern.put(name,namePattern);
    }
    Matcher m=namePattern.matcher(""String_Node_Str"");
    int g=m.groupCount();
    groupCounts.add(g + 1);
    regex.append('(').append(namePattern).append(')');
    normalizedTemplate.append('{').append(name).append('}');
  }
 catch (  PatternSyntaxException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + nameRegexString + ""String_Node_Str""+ name+ ""String_Node_Str"",ex);
  }
}"
51127,"/** 
 * Get the group indexes to capturing groups. <p> Any nested capturing groups will be ignored and the the group index will refer to the top-level capturing groups associated with the templates variables.
 * @return the group indexes to capturing groups.
 */
public final int[] getGroupIndexes(){
  if (names.isEmpty())   return EMPTY_INT_ARRAY;
  int[] indexes=new int[names.size() + 1];
  indexes[0]=1;
  for (int i=1; i < indexes.length; i++) {
    indexes[i]=indexes[i - 1] + groupCounts.get(i - 1);
  }
  for (int i=0; i < indexes.length; i++) {
    if (indexes[i] != i + 1)     return indexes;
  }
  return EMPTY_INT_ARRAY;
}","/** 
 * Get the group indexes to capturing groups. <p> Any nested capturing groups will be ignored and the the group index will refer to the top-level capturing groups associated with the templates variables.
 * @return the group indexes to capturing groups.
 */
public final int[] getGroupIndexes(){
  if (names.isEmpty()) {
    return EMPTY_INT_ARRAY;
  }
  int[] indexes=new int[names.size() + 1];
  indexes[0]=1;
  for (int i=1; i < indexes.length; i++) {
    indexes[i]=indexes[i - 1] + groupCounts.get(i - 1);
  }
  for (int i=0; i < indexes.length; i++) {
    if (indexes[i] != i + 1) {
      return indexes;
    }
  }
  return EMPTY_INT_ARRAY;
}"
51128,"public boolean hasNext(){
  return pos < s.length();
}","@Override public boolean hasNext(){
  return pos < s.length();
}"
51129,"private void parse(CharacterIterator ci){
  try {
    while (ci.hasNext()) {
      char c=ci.next();
      if (c == '{') {
        processLiteralCharacters();
        parseName(ci);
      }
 else {
        literalCharactersBuffer.append(c);
      }
    }
    processLiteralCharacters();
  }
 catch (  NoSuchElementException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + template + ""String_Node_Str"",ex);
  }
}","private void parse(final CharacterIterator ci){
  try {
    while (ci.hasNext()) {
      char c=ci.next();
      if (c == '{') {
        processLiteralCharacters();
        parseName(ci);
      }
 else {
        literalCharactersBuffer.append(c);
      }
    }
    processLiteralCharacters();
  }
 catch (  NoSuchElementException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + template + ""String_Node_Str"",ex);
  }
}"
51130,"public char peek(){
  if (!hasNext())   throw new NoSuchElementException();
  return s.charAt(pos++);
}","@Override public char peek(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  return s.charAt(pos++);
}"
51131,"/** 
 * Encode literal characters of a template.
 * @param literalCharacters the literal characters
 * @return the encoded literal characters.
 */
protected String encodeLiteralCharacters(String literalCharacters){
  return literalCharacters;
}","/** 
 * Encode literal characters of a template.
 * @param characters the literal characters
 * @return the encoded literal characters.
 */
protected String encodeLiteralCharacters(final String characters){
  return characters;
}"
51132,"public int pos(){
  if (pos == 0)   return 0;
  return pos - 1;
}","@Override public int pos(){
  if (pos == 0) {
    return 0;
  }
  return pos - 1;
}"
51133,"private void processLiteralCharacters(){
  if (literalCharactersBuffer.length() > 0) {
    literalCharacters+=literalCharactersBuffer.length();
    String s=encodeLiteralCharacters(literalCharactersBuffer.toString());
    normalizedTemplate.append(s);
    for (int i=0; i < s.length(); i++) {
      char c=s.charAt(i);
      if (RESERVED_REGEX_CHARACTERS.contains(c))       regex.append(""String_Node_Str"");
      regex.append(c);
    }
    literalCharactersBuffer.setLength(0);
  }
}","private void processLiteralCharacters(){
  if (literalCharactersBuffer.length() > 0) {
    literalCharacters+=literalCharactersBuffer.length();
    String s=encodeLiteralCharacters(literalCharactersBuffer.toString());
    normalizedTemplate.append(s);
    for (int i=0; i < s.length(); i++) {
      char c=s.charAt(i);
      if (RESERVED_REGEX_CHARACTERS.contains(c)) {
        regex.append(""String_Node_Str"");
      }
      regex.append(c);
    }
    literalCharactersBuffer.setLength(0);
  }
}"
51134,"private String parseRegex(CharacterIterator ci){
  StringBuffer regexBuffer=new StringBuffer();
  int braceCount=1;
  while (true) {
    char c=ci.next();
    if (c == '{') {
      braceCount++;
    }
 else     if (c == '}') {
      braceCount--;
      if (braceCount == 0)       break;
    }
    regexBuffer.append(c);
  }
  return regexBuffer.toString().trim();
}","private String parseRegex(final CharacterIterator ci){
  StringBuilder regexBuffer=new StringBuilder();
  int braceCount=1;
  while (true) {
    char c=ci.next();
    if (c == '{') {
      braceCount++;
    }
 else     if (c == '}') {
      braceCount--;
      if (braceCount == 0) {
        break;
      }
    }
    regexBuffer.append(c);
  }
  return regexBuffer.toString().trim();
}"
51135,"/** 
 * Parse a template.
 * @param template the template.
 * @throws IllegalArgumentException if the template is null, an empty stringor does not conform to a JAX-RS URI template.
 */
public UriTemplateParser(String template){
  if (template == null || template.length() == 0)   throw new IllegalArgumentException();
  this.template=template;
  parse(new StringCharacterIterator(template));
  try {
    pattern=Pattern.compile(regex.toString());
  }
 catch (  PatternSyntaxException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + regex + ""String_Node_Str"",ex);
  }
}","/** 
 * Parse a template.
 * @param template the template.
 * @throws IllegalArgumentException if the template is null, an empty stringor does not conform to a JAX-RS URI template.
 */
public UriTemplateParser(final String template) throws IllegalArgumentException {
  if (template == null || template.length() == 0) {
    throw new IllegalArgumentException();
  }
  this.template=template;
  parse(new StringCharacterIterator(template));
  try {
    pattern=Pattern.compile(regex.toString());
  }
 catch (  PatternSyntaxException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + regex + ""String_Node_Str"",ex);
  }
}"
51136,"@Override public OAuthProvider getValue(){
  return instance.get();
}","@Override public OAuthProvider getValue(){
  return instance;
}"
51137,"@Override public Injectable getInjectable(ComponentContext cc,Context a,Type t){
  if (t instanceof Class) {
    Class c=(Class)t;
    if (OAuthProvider.class.isAssignableFrom(c) && c.isInstance(instance.get())) {
      return this;
    }
  }
  return null;
}","@Override public Injectable getInjectable(ComponentContext cc,Context a,Type t){
  if (t instanceof Class) {
    Class c=(Class)t;
    if (OAuthProvider.class.isAssignableFrom(c) && c.isInstance(instance)) {
      return this;
    }
  }
  return null;
}"
51138,"/** 
 * Geneerates a new non-guessable random string (used for token/customer strings, secrets and verifier.
 * @return Random UUID string.
 */
protected String newUUIDString(){
  String tmp=UUID.randomUUID().toString();
  return tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Generates a new non-guessable random string (used for token/customer strings, secrets and verifier.
 * @return Random UUID string.
 */
protected String newUUIDString(){
  String tmp=UUID.randomUUID().toString();
  return tmp.replaceAll(""String_Node_Str"",""String_Node_Str"");
}"
51139,"private void _initiate(final ResourceConfig rc,final IoCComponentProviderFactory _provider){
  if (rc == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (initiated) {
    throw new ContainerException(ImplMessages.WEB_APP_ALREADY_INITIATED());
  }
  this.initiated=true;
  LOGGER.info(""String_Node_Str"" + BuildId.getBuildId() + ""String_Node_Str"");
  Class<?>[] components=ServiceFinder.find(""String_Node_Str"").toClassArray();
  if (components.length > 0) {
    if (LOGGER.isLoggable(Level.INFO)) {
      StringBuilder b=new StringBuilder();
      b.append(""String_Node_Str"");
      for (      Class c : components)       b.append('\n').append(""String_Node_Str"").append(c);
      LOGGER.log(Level.INFO,b.toString());
    }
    this.resourceConfig=rc.clone();
    this.resourceConfig.getClasses().addAll(Arrays.asList(components));
  }
 else {
    this.resourceConfig=rc;
  }
  this.provider=_provider;
  this.providerFactories=new ArrayList<IoCComponentProviderFactory>(2);
  for (  Object o : resourceConfig.getProviderSingletons()) {
    if (o instanceof IoCComponentProviderFactory) {
      providerFactories.add((IoCComponentProviderFactory)o);
    }
  }
  if (_provider != null)   providerFactories.add(_provider);
  this.cpFactory=(providerFactories.isEmpty()) ? new ProviderFactory(injectableFactory) : new IoCProviderFactory(injectableFactory,providerFactories);
  this.rcpFactory=(providerFactories.isEmpty()) ? new ResourceFactory(this.resourceConfig,this.injectableFactory) : new IoCResourceFactory(this.resourceConfig,this.injectableFactory,providerFactories);
  for (  IoCComponentProviderFactory f : providerFactories) {
    IoCComponentProcessorFactory cpf=null;
    if (f instanceof IoCComponentProcessorFactoryInitializer) {
      if (cpf == null) {
        cpf=new ComponentProcessorFactoryImpl();
      }
      IoCComponentProcessorFactoryInitializer i=(IoCComponentProcessorFactoryInitializer)f;
      i.init(cpf);
    }
  }
  this.resourceContext=new ResourceContext(){
    public ExtendedUriInfo matchUriInfo(    URI u) throws ContainerException {
      try {
        return handleMatchResourceRequest(u);
      }
 catch (      ContainerException ex) {
        throw ex;
      }
catch (      WebApplicationException ex) {
        if (ex.getResponse().getStatus() == 404) {
          return null;
        }
 else {
          throw new ContainerException(ex);
        }
      }
catch (      RuntimeException ex) {
        throw new ContainerException(ex);
      }
    }
    public Object matchResource(    URI u) throws ContainerException {
      ExtendedUriInfo ui=matchUriInfo(u);
      return (ui != null) ? ui.getMatchedResources().get(0) : null;
    }
    public <T>T matchResource(    URI u,    Class<T> c) throws ContainerException, ClassCastException {
      return c.cast(matchResource(u));
    }
    public <T>T getResource(    Class<T> c){
      return c.cast(getResourceComponentProvider(c).getInstance(context));
    }
  }
;
  ProviderServices providerServices=new ProviderServices(ServerSide.class,this.cpFactory,resourceConfig.getProviderClasses(),resourceConfig.getProviderSingletons());
  injectableFactory.add(new InjectableProvider<ParentRef,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.PerRequest;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    ParentRef a,    Type t){
      if (!(t instanceof Class))       return null;
      final Class target=ReflectionHelper.getDeclaringClass(cc.getAccesibleObject());
      final Class inject=(Class)t;
      return new Injectable<Object>(){
        public Object getValue(){
          final UriInfo ui=context.getUriInfo();
          final List l=ui.getMatchedResources();
          final Object parent=getParent(l,target);
          if (parent == null)           return null;
          try {
            return inject.cast(parent);
          }
 catch (          ClassCastException ex) {
            throw new ContainerException(""String_Node_Str"" + inject.getName() + ""String_Node_Str""+ l.get(1).getClass().getName(),ex);
          }
        }
        private Object getParent(        List l,        Class target){
          if (l.isEmpty()) {
            return null;
          }
 else           if (l.size() == 1) {
            return (l.get(0).getClass() == target) ? null : l.get(0);
          }
 else {
            return (l.get(0).getClass() == target) ? l.get(1) : l.get(0);
          }
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<Inject,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.PerRequest;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    Inject a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<Inject,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Undefined;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    Inject a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() == ComponentScope.PerRequest)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<Inject,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    Inject a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() != ComponentScope.Singleton)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<InjectParam,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.PerRequest;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    InjectParam a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<InjectParam,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Undefined;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    InjectParam a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() == ComponentScope.PerRequest)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<InjectParam,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    InjectParam a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() != ComponentScope.Singleton)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new ContextInjectableProvider<FeaturesAndProperties>(FeaturesAndProperties.class,resourceConfig));
  injectableFactory.add(new InjectableProvider<Context,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<ResourceConfig> getInjectable(    ComponentContext cc,    Context a,    Type t){
      if (t != ResourceConfig.class)       return null;
      return new Injectable<ResourceConfig>(){
        public ResourceConfig getValue(){
          return resourceConfig;
        }
      }
;
    }
  }
);
  injectableFactory.add(new ContextInjectableProvider<ResourceContext>(ResourceContext.class,resourceContext));
  injectableFactory.configure(providerServices);
  boolean updateRequired=false;
  if (rc instanceof DeferredResourceConfig) {
    final DeferredResourceConfig drc=(DeferredResourceConfig)rc;
    if (resourceConfig == drc)     resourceConfig=drc.clone();
    final DeferredResourceConfig.ApplicationHolder da=drc.getApplication(cpFactory);
    resourceConfig.add(da.getApplication());
    updateRequired=true;
    injectableFactory.add(new ContextInjectableProvider<Application>(Application.class,da.getOriginalApplication()));
  }
 else {
    injectableFactory.add(new ContextInjectableProvider<FeaturesAndProperties>(Application.class,resourceConfig));
  }
  for (  ResourceConfigurator configurator : providerServices.getProviders(ResourceConfigurator.class)) {
    configurator.configure(this.resourceConfig);
    updateRequired=true;
  }
  this.resourceConfig.validate();
  if (updateRequired) {
    providerServices.update(resourceConfig.getProviderClasses(),resourceConfig.getProviderSingletons(),injectableFactory);
  }
  this.templateContext=new TemplateFactory(providerServices);
  injectableFactory.add(new ContextInjectableProvider<TemplateContext>(TemplateContext.class,templateContext));
  final ContextResolverFactory crf=new ContextResolverFactory();
  this.exceptionFactory=new ExceptionMapperFactory();
  this.bodyFactory=new MessageBodyFactory(providerServices,getFeaturesAndProperties().getFeature(FeaturesAndProperties.FEATURE_PRE_1_4_PROVIDER_PRECEDENCE));
  injectableFactory.add(new ContextInjectableProvider<MessageBodyWorkers>(MessageBodyWorkers.class,bodyFactory));
  this.providers=new Providers(){
    public <T>MessageBodyReader<T> getMessageBodyReader(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyFactory.getMessageBodyReader(c,t,as,m);
    }
    public <T>MessageBodyWriter<T> getMessageBodyWriter(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyFactory.getMessageBodyWriter(c,t,as,m);
    }
    public <T extends Throwable>ExceptionMapper<T> getExceptionMapper(    Class<T> c){
      if (Throwable.class.isAssignableFrom(c))       return exceptionFactory.find((Class<Throwable>)c);
 else       return null;
    }
    public <T>ContextResolver<T> getContextResolver(    Class<T> ct,    MediaType m){
      return crf.resolve(ct,m);
    }
  }
;
  injectableFactory.add(new ContextInjectableProvider<Providers>(Providers.class,providers));
  this.stringReaderFactory=new StringReaderFactory();
  injectableFactory.add(new ContextInjectableProvider<StringReaderWorkers>(StringReaderWorkers.class,stringReaderFactory));
  MultivaluedParameterExtractorProvider mpep=new MultivaluedParameterExtractorFactory(stringReaderFactory);
  injectableFactory.add(new ContextInjectableProvider<MultivaluedParameterExtractorProvider>(MultivaluedParameterExtractorProvider.class,mpep));
  injectableFactory.add(new CookieParamInjectableProvider(mpep));
  injectableFactory.add(new HeaderParamInjectableProvider(mpep));
  injectableFactory.add(new HttpContextInjectableProvider());
  injectableFactory.add(new MatrixParamInjectableProvider(mpep));
  injectableFactory.add(new PathParamInjectableProvider(mpep));
  injectableFactory.add(new QueryParamInjectableProvider(mpep));
  injectableFactory.add(new FormParamInjectableProvider(mpep));
  filterFactory=new FilterFactory(providerServices);
  dispatcherFactory=ResourceMethodDispatcherFactory.create(providerServices);
  this.wadlFactory=new WadlFactory(resourceConfig);
  filterFactory.init(resourceConfig);
  if (!resourceConfig.getMediaTypeMappings().isEmpty() || !resourceConfig.getLanguageMappings().isEmpty()) {
    boolean present=false;
    for (    ContainerRequestFilter f : filterFactory.getRequestFilters()) {
      present|=f instanceof UriConnegFilter;
    }
    if (!present) {
      filterFactory.getRequestFilters().add(new UriConnegFilter(resourceConfig.getMediaTypeMappings(),resourceConfig.getLanguageMappings()));
    }
 else {
      LOGGER.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + UriConnegFilter.class.getName() + ""String_Node_Str"");
    }
  }
  crf.init(providerServices,injectableFactory);
  exceptionFactory.init(providerServices);
  bodyFactory.init();
  stringReaderFactory.init(providerServices);
  Errors.setReportMissingDependentFieldOrMethod(true);
  cpFactory.injectOnAllComponents();
  cpFactory.injectOnProviderInstances(resourceConfig.getProviderSingletons());
  for (  IoCComponentProviderFactory providerFactory : providerFactories) {
    if (providerFactory instanceof WebApplicationListener) {
      WebApplicationListener listener=(WebApplicationListener)providerFactory;
      listener.onWebApplicationReady();
    }
  }
  RulesMap<UriRule> rootRules=new RootResourceUriRules(this,resourceConfig,wadlFactory,injectableFactory).getRules();
  this.rootsRule=new RootResourceClassesRule(rootRules);
  this.isTraceEnabled=resourceConfig.getFeature(ResourceConfig.FEATURE_TRACE) | resourceConfig.getFeature(ResourceConfig.FEATURE_TRACE_PER_REQUEST);
}","private void _initiate(final ResourceConfig rc,final IoCComponentProviderFactory _provider){
  if (rc == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (initiated) {
    throw new ContainerException(ImplMessages.WEB_APP_ALREADY_INITIATED());
  }
  this.initiated=true;
  LOGGER.info(""String_Node_Str"" + BuildId.getBuildId() + ""String_Node_Str"");
  Class<?>[] components=ServiceFinder.find(""String_Node_Str"").toClassArray();
  if (components.length > 0) {
    if (LOGGER.isLoggable(Level.INFO)) {
      StringBuilder b=new StringBuilder();
      b.append(""String_Node_Str"");
      for (      Class c : components)       b.append('\n').append(""String_Node_Str"").append(c);
      LOGGER.log(Level.INFO,b.toString());
    }
    this.resourceConfig=rc.clone();
    this.resourceConfig.getClasses().addAll(Arrays.asList(components));
  }
 else {
    this.resourceConfig=rc;
  }
  this.provider=_provider;
  this.providerFactories=new ArrayList<IoCComponentProviderFactory>(2);
  for (  Object o : resourceConfig.getProviderSingletons()) {
    if (o instanceof IoCComponentProviderFactory) {
      providerFactories.add((IoCComponentProviderFactory)o);
    }
  }
  if (_provider != null)   providerFactories.add(_provider);
  this.cpFactory=(providerFactories.isEmpty()) ? new ProviderFactory(injectableFactory) : new IoCProviderFactory(injectableFactory,providerFactories);
  this.rcpFactory=(providerFactories.isEmpty()) ? new ResourceFactory(this.resourceConfig,this.injectableFactory) : new IoCResourceFactory(this.resourceConfig,this.injectableFactory,providerFactories);
  for (  IoCComponentProviderFactory f : providerFactories) {
    IoCComponentProcessorFactory cpf=null;
    if (f instanceof IoCComponentProcessorFactoryInitializer) {
      if (cpf == null) {
        cpf=new ComponentProcessorFactoryImpl();
      }
      IoCComponentProcessorFactoryInitializer i=(IoCComponentProcessorFactoryInitializer)f;
      i.init(cpf);
    }
  }
  this.resourceContext=new ResourceContext(){
    public ExtendedUriInfo matchUriInfo(    URI u) throws ContainerException {
      try {
        return handleMatchResourceRequest(u);
      }
 catch (      ContainerException ex) {
        throw ex;
      }
catch (      WebApplicationException ex) {
        if (ex.getResponse().getStatus() == 404) {
          return null;
        }
 else {
          throw new ContainerException(ex);
        }
      }
catch (      RuntimeException ex) {
        throw new ContainerException(ex);
      }
    }
    public Object matchResource(    URI u) throws ContainerException {
      ExtendedUriInfo ui=matchUriInfo(u);
      return (ui != null) ? ui.getMatchedResources().get(0) : null;
    }
    public <T>T matchResource(    URI u,    Class<T> c) throws ContainerException, ClassCastException {
      return c.cast(matchResource(u));
    }
    public <T>T getResource(    Class<T> c){
      return c.cast(getResourceComponentProvider(c).getInstance(context));
    }
  }
;
  ProviderServices providerServices=new ProviderServices(ServerSide.class,this.cpFactory,resourceConfig.getProviderClasses(),resourceConfig.getProviderSingletons());
  injectableFactory.add(new ContextInjectableProvider<ProviderServices>(ProviderServices.class,providerServices));
  injectableFactory.add(new InjectableProvider<ParentRef,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.PerRequest;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    ParentRef a,    Type t){
      if (!(t instanceof Class))       return null;
      final Class target=ReflectionHelper.getDeclaringClass(cc.getAccesibleObject());
      final Class inject=(Class)t;
      return new Injectable<Object>(){
        public Object getValue(){
          final UriInfo ui=context.getUriInfo();
          final List l=ui.getMatchedResources();
          final Object parent=getParent(l,target);
          if (parent == null)           return null;
          try {
            return inject.cast(parent);
          }
 catch (          ClassCastException ex) {
            throw new ContainerException(""String_Node_Str"" + inject.getName() + ""String_Node_Str""+ l.get(1).getClass().getName(),ex);
          }
        }
        private Object getParent(        List l,        Class target){
          if (l.isEmpty()) {
            return null;
          }
 else           if (l.size() == 1) {
            return (l.get(0).getClass() == target) ? null : l.get(0);
          }
 else {
            return (l.get(0).getClass() == target) ? l.get(1) : l.get(0);
          }
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<Inject,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.PerRequest;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    Inject a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<Inject,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Undefined;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    Inject a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() == ComponentScope.PerRequest)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<Inject,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    Inject a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() != ComponentScope.Singleton)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<InjectParam,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.PerRequest;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    InjectParam a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<InjectParam,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Undefined;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    InjectParam a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() == ComponentScope.PerRequest)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new InjectableProvider<InjectParam,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<Object> getInjectable(    ComponentContext cc,    InjectParam a,    Type t){
      if (!(t instanceof Class))       return null;
      final ResourceComponentProvider rcp=getResourceComponentProvider(cc,(Class)t);
      if (rcp.getScope() != ComponentScope.Singleton)       return null;
      return new Injectable<Object>(){
        public Object getValue(){
          return rcp.getInstance(context);
        }
      }
;
    }
  }
);
  injectableFactory.add(new ContextInjectableProvider<FeaturesAndProperties>(FeaturesAndProperties.class,resourceConfig));
  injectableFactory.add(new InjectableProvider<Context,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<ResourceConfig> getInjectable(    ComponentContext cc,    Context a,    Type t){
      if (t != ResourceConfig.class)       return null;
      return new Injectable<ResourceConfig>(){
        public ResourceConfig getValue(){
          return resourceConfig;
        }
      }
;
    }
  }
);
  injectableFactory.add(new ContextInjectableProvider<ResourceContext>(ResourceContext.class,resourceContext));
  injectableFactory.configure(providerServices);
  boolean updateRequired=false;
  if (rc instanceof DeferredResourceConfig) {
    final DeferredResourceConfig drc=(DeferredResourceConfig)rc;
    if (resourceConfig == drc)     resourceConfig=drc.clone();
    final DeferredResourceConfig.ApplicationHolder da=drc.getApplication(cpFactory);
    resourceConfig.add(da.getApplication());
    updateRequired=true;
    injectableFactory.add(new ContextInjectableProvider<Application>(Application.class,da.getOriginalApplication()));
  }
 else {
    injectableFactory.add(new ContextInjectableProvider<FeaturesAndProperties>(Application.class,resourceConfig));
  }
  for (  ResourceConfigurator configurator : providerServices.getProviders(ResourceConfigurator.class)) {
    configurator.configure(this.resourceConfig);
    updateRequired=true;
  }
  this.resourceConfig.validate();
  if (updateRequired) {
    providerServices.update(resourceConfig.getProviderClasses(),resourceConfig.getProviderSingletons(),injectableFactory);
  }
  this.templateContext=new TemplateFactory(providerServices);
  injectableFactory.add(new ContextInjectableProvider<TemplateContext>(TemplateContext.class,templateContext));
  final ContextResolverFactory crf=new ContextResolverFactory();
  this.exceptionFactory=new ExceptionMapperFactory();
  this.bodyFactory=new MessageBodyFactory(providerServices,getFeaturesAndProperties().getFeature(FeaturesAndProperties.FEATURE_PRE_1_4_PROVIDER_PRECEDENCE));
  injectableFactory.add(new ContextInjectableProvider<MessageBodyWorkers>(MessageBodyWorkers.class,bodyFactory));
  this.providers=new Providers(){
    public <T>MessageBodyReader<T> getMessageBodyReader(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyFactory.getMessageBodyReader(c,t,as,m);
    }
    public <T>MessageBodyWriter<T> getMessageBodyWriter(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyFactory.getMessageBodyWriter(c,t,as,m);
    }
    public <T extends Throwable>ExceptionMapper<T> getExceptionMapper(    Class<T> c){
      if (Throwable.class.isAssignableFrom(c))       return exceptionFactory.find((Class<Throwable>)c);
 else       return null;
    }
    public <T>ContextResolver<T> getContextResolver(    Class<T> ct,    MediaType m){
      return crf.resolve(ct,m);
    }
  }
;
  injectableFactory.add(new ContextInjectableProvider<Providers>(Providers.class,providers));
  this.stringReaderFactory=new StringReaderFactory();
  injectableFactory.add(new ContextInjectableProvider<StringReaderWorkers>(StringReaderWorkers.class,stringReaderFactory));
  MultivaluedParameterExtractorProvider mpep=new MultivaluedParameterExtractorFactory(stringReaderFactory);
  injectableFactory.add(new ContextInjectableProvider<MultivaluedParameterExtractorProvider>(MultivaluedParameterExtractorProvider.class,mpep));
  injectableFactory.add(new CookieParamInjectableProvider(mpep));
  injectableFactory.add(new HeaderParamInjectableProvider(mpep));
  injectableFactory.add(new HttpContextInjectableProvider());
  injectableFactory.add(new MatrixParamInjectableProvider(mpep));
  injectableFactory.add(new PathParamInjectableProvider(mpep));
  injectableFactory.add(new QueryParamInjectableProvider(mpep));
  injectableFactory.add(new FormParamInjectableProvider(mpep));
  filterFactory=new FilterFactory(providerServices);
  dispatcherFactory=ResourceMethodDispatcherFactory.create(providerServices);
  this.wadlFactory=new WadlFactory(resourceConfig);
  filterFactory.init(resourceConfig);
  if (!resourceConfig.getMediaTypeMappings().isEmpty() || !resourceConfig.getLanguageMappings().isEmpty()) {
    boolean present=false;
    for (    ContainerRequestFilter f : filterFactory.getRequestFilters()) {
      present|=f instanceof UriConnegFilter;
    }
    if (!present) {
      filterFactory.getRequestFilters().add(new UriConnegFilter(resourceConfig.getMediaTypeMappings(),resourceConfig.getLanguageMappings()));
    }
 else {
      LOGGER.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + UriConnegFilter.class.getName() + ""String_Node_Str"");
    }
  }
  crf.init(providerServices,injectableFactory);
  exceptionFactory.init(providerServices);
  bodyFactory.init();
  stringReaderFactory.init(providerServices);
  Errors.setReportMissingDependentFieldOrMethod(true);
  cpFactory.injectOnAllComponents();
  cpFactory.injectOnProviderInstances(resourceConfig.getProviderSingletons());
  for (  IoCComponentProviderFactory providerFactory : providerFactories) {
    if (providerFactory instanceof WebApplicationListener) {
      WebApplicationListener listener=(WebApplicationListener)providerFactory;
      listener.onWebApplicationReady();
    }
  }
  RulesMap<UriRule> rootRules=new RootResourceUriRules(this,resourceConfig,wadlFactory,injectableFactory).getRules();
  this.rootsRule=new RootResourceClassesRule(rootRules);
  this.isTraceEnabled=resourceConfig.getFeature(ResourceConfig.FEATURE_TRACE) | resourceConfig.getFeature(ResourceConfig.FEATURE_TRACE_PER_REQUEST);
}"
51140,"/** 
 * Get the mutable property bag.
 * @return the property bag.
 */
public Map<String,Object> getProperties(){
  if (properties == null)   properties=new CopyOnCloneRefCountHashMap<String,Object>();
  return properties;
}","/** 
 * Get the mutable property bag.
 * @return the property bag.
 */
public Map<String,Object> getProperties(){
  if (properties == null)   properties=new CopyOnWriteHashMap<String,Object>();
  return properties;
}"
51141,"/** 
 * Gets WebResource related properties. <p>Properties are inherited, so setting propeties on ""parent"" WebResource instance, creating child (for example via WebResource.path(""subpath"")) will set parents properties on it. However changing child properties won't cause change in parent's properties. <p>Methods entrySet(), keySet() and values() are returning read-only results (via Collection.unmodifiableMap).
 * @return map containg all properties.
 */
public Map<String,Object> getProperties(){
  if (properties == null) {
    properties=new CopyOnCloneRefCountHashMap<String,Object>();
  }
  return properties;
}","/** 
 * Gets WebResource related properties. <p>Properties are inherited, so setting propeties on ""parent"" WebResource instance, creating child (for example via WebResource.path(""subpath"")) will set parents properties on it. However changing child properties won't cause change in parent's properties. <p>Methods entrySet(), keySet() and values() are returning read-only results (via Collection.unmodifiableMap).
 * @return map containg all properties.
 */
public Map<String,Object> getProperties(){
  if (properties == null) {
    properties=new CopyOnWriteHashMap<String,Object>();
  }
  return properties;
}"
51142,"public void testClone(){
  CopyOnCloneRefCountHashMap<String,String> map1=new CopyOnCloneRefCountHashMap<String,String>();
  map1.put(""String_Node_Str"",""String_Node_Str"");
  CopyOnCloneRefCountHashMap<String,String> map2=map1.clone();
  map2.put(""String_Node_Str"",""String_Node_Str"");
  assertTrue(map1.containsKey(""String_Node_Str""));
  assertFalse(map1.containsKey(""String_Node_Str""));
  assertTrue(map2.containsKey(""String_Node_Str""));
  assertTrue(map2.containsKey(""String_Node_Str""));
}","public void testClone(){
  CopyOnWriteHashMap<String,String> map1=new CopyOnWriteHashMap<String,String>();
  map1.put(""String_Node_Str"",""String_Node_Str"");
  CopyOnWriteHashMap<String,String> map2=map1.clone();
  map2.put(""String_Node_Str"",""String_Node_Str"");
  assertTrue(map1.containsKey(""String_Node_Str""));
  assertFalse(map1.containsKey(""String_Node_Str""));
  assertTrue(map2.containsKey(""String_Node_Str""));
  assertTrue(map2.containsKey(""String_Node_Str""));
}"
51143,"public String name(){
  return NAME;
}","@Override public String name(){
  return NAME;
}"
51144,"/** 
 * Generates the RSA-SHA1 signature of OAuth request elements.
 * @param elements the combined OAuth elements to sign.
 * @param secrets the secrets object containing the private key for generating the signature.
 * @return the OAuth signature, in base64-encoded form.
 * @throws InvalidSecretException if the supplied secret is not valid.
 */
public String sign(String elements,OAuthSecrets secrets) throws InvalidSecretException {
  Signature sig;
  try {
    sig=Signature.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  byte[] decodedPrivKey;
  try {
    decodedPrivKey=Base64.decode(secrets.getConsumerSecret());
  }
 catch (  IOException ioe) {
    throw new InvalidSecretException(""String_Node_Str"");
  }
  KeyFactory keyf;
  try {
    keyf=KeyFactory.getInstance(KEY_TYPE);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(decodedPrivKey);
  RSAPrivateKey rsaPrivKey;
  try {
    rsaPrivKey=(RSAPrivateKey)keyf.generatePrivate(keySpec);
  }
 catch (  InvalidKeySpecException ikse) {
    throw new IllegalStateException(ikse);
  }
  try {
    sig.initSign(rsaPrivKey);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  try {
    sig.update(elements.getBytes());
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
  byte[] rsasha1;
  try {
    rsasha1=sig.sign();
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
  return UriComponent.encode(new String(Base64.encode(rsasha1)),UriComponent.Type.UNRESERVED);
}","/** 
 * Generates the RSA-SHA1 signature of OAuth request elements.
 * @param elements the combined OAuth elements to sign.
 * @param secrets the secrets object containing the private key for generating the signature.
 * @return the OAuth signature, in base64-encoded form.
 * @throws InvalidSecretException if the supplied secret is not valid.
 */
@Override public String sign(String elements,OAuthSecrets secrets) throws InvalidSecretException {
  Signature sig;
  try {
    sig=Signature.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  byte[] decodedPrivKey;
  try {
    decodedPrivKey=Base64.decode(secrets.getConsumerSecret());
  }
 catch (  IOException ioe) {
    throw new InvalidSecretException(""String_Node_Str"");
  }
  KeyFactory keyf;
  try {
    keyf=KeyFactory.getInstance(KEY_TYPE);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(decodedPrivKey);
  RSAPrivateKey rsaPrivKey;
  try {
    rsaPrivKey=(RSAPrivateKey)keyf.generatePrivate(keySpec);
  }
 catch (  InvalidKeySpecException ikse) {
    throw new IllegalStateException(ikse);
  }
  try {
    sig.initSign(rsaPrivKey);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  try {
    sig.update(elements.getBytes());
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
  byte[] rsasha1;
  try {
    rsasha1=sig.sign();
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
  return Base64.encode(rsasha1);
}"
51145,"/** 
 * Verifies the RSA-SHA1 signature of OAuth request elements.
 * @param elements OAuth elements signature is to be verified against.
 * @param secrets the secrets object containing the public key for verifying the signature.
 * @param signature base64-encoded OAuth signature to be verified.
 * @throws InvalidSecretException if the supplied secret is not valid.
 */
public boolean verify(String elements,OAuthSecrets secrets,String signature) throws InvalidSecretException {
  Signature sig;
  try {
    sig=Signature.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  RSAPublicKey rsaPubKey=null;
  String tmpkey=secrets.getConsumerSecret();
  if (tmpkey.startsWith(BEGIN_CERT)) {
    try {
      Certificate cert=null;
      ByteArrayInputStream bais=new ByteArrayInputStream(tmpkey.getBytes());
      BufferedInputStream bis=new BufferedInputStream(bais);
      CertificateFactory certfac=CertificateFactory.getInstance(""String_Node_Str"");
      while (bis.available() > 0) {
        cert=certfac.generateCertificate(bis);
      }
      rsaPubKey=(RSAPublicKey)cert.getPublicKey();
    }
 catch (    IOException ex) {
      Logger.getLogger(RSA_SHA1.class.getName()).log(Level.SEVERE,null,ex);
    }
catch (    CertificateException ex) {
      Logger.getLogger(RSA_SHA1.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  byte[] decodedSignature;
  try {
    decodedSignature=Base64.decode(UriComponent.decode(signature,UriComponent.Type.UNRESERVED));
  }
 catch (  IOException ioe) {
    return false;
  }
  try {
    sig.initVerify(rsaPubKey);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  try {
    sig.update(elements.getBytes());
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
  try {
    return sig.verify(decodedSignature);
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
}","/** 
 * Verifies the RSA-SHA1 signature of OAuth request elements.
 * @param elements OAuth elements signature is to be verified against.
 * @param secrets the secrets object containing the public key for verifying the signature.
 * @param signature base64-encoded OAuth signature to be verified.
 * @throws InvalidSecretException if the supplied secret is not valid.
 */
@Override public boolean verify(String elements,OAuthSecrets secrets,String signature) throws InvalidSecretException {
  Signature sig;
  try {
    sig=Signature.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  RSAPublicKey rsaPubKey=null;
  String tmpkey=secrets.getConsumerSecret();
  if (tmpkey.startsWith(BEGIN_CERT)) {
    try {
      Certificate cert=null;
      ByteArrayInputStream bais=new ByteArrayInputStream(tmpkey.getBytes());
      BufferedInputStream bis=new BufferedInputStream(bais);
      CertificateFactory certfac=CertificateFactory.getInstance(""String_Node_Str"");
      while (bis.available() > 0) {
        cert=certfac.generateCertificate(bis);
      }
      rsaPubKey=(RSAPublicKey)cert.getPublicKey();
    }
 catch (    IOException ex) {
      Logger.getLogger(RSA_SHA1.class.getName()).log(Level.SEVERE,null,ex);
    }
catch (    CertificateException ex) {
      Logger.getLogger(RSA_SHA1.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
  byte[] decodedSignature;
  try {
    decodedSignature=Base64.decode(signature);
  }
 catch (  IOException ioe) {
    return false;
  }
  try {
    sig.initVerify(rsaPubKey);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  try {
    sig.update(elements.getBytes());
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
  try {
    return sig.verify(decodedSignature);
  }
 catch (  SignatureException se) {
    throw new IllegalStateException(se);
  }
}"
51146,"public <T>MessageBodyWriter<T> getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyWriter p=null;
  if (!customWriterProviders.isEmpty())   p=_getMessageBodyWriter(c,t,as,mediaType,customWriterProviders);
  if (p != null)   return p;
  p=_getMessageBodyWriter(c,t,as,mediaType,writerProviders);
  return p;
}","public <T>MessageBodyWriter<T> getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyWriter p;
  if (!customWriterProviders.isEmpty()) {
    p=_getMessageBodyWriter(c,t,as,mediaType,customWriterProviders);
    if (p != null)     return p;
  }
  p=_getMessageBodyWriter(c,t,as,mediaType,writerProviders);
  return p;
}"
51147,"public <T>MessageBodyReader<T> getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyReader reader=null;
  if (!customReaderProviders.isEmpty())   reader=_getMessageBodyReader(c,t,as,mediaType,customReaderProviders);
  if (reader != null)   return reader;
  reader=_getMessageBodyReader(c,t,as,mediaType,readerProviders);
  return reader;
}","public <T>MessageBodyReader<T> getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyReader reader;
  if (!customReaderProviders.isEmpty()) {
    reader=_getMessageBodyReader(c,t,as,mediaType,customReaderProviders);
    if (reader != null)     return reader;
  }
  reader=_getMessageBodyReader(c,t,as,mediaType,readerProviders);
  return reader;
}"
51148,"private void init(ClientHandler root,ClientConfig config,IoCComponentProviderFactory provider){
  this.es=new LazyVal<ExecutorService>(){
    @Override protected ExecutorService instance(){
      return Executors.newCachedThreadPool();
    }
  }
;
  Class<?>[] components=ServiceFinder.find(""String_Node_Str"").toClassArray();
  if (components.length > 0) {
    if (LOGGER.isLoggable(Level.INFO)) {
      StringBuilder b=new StringBuilder();
      b.append(""String_Node_Str"");
      for (      Class c : components)       b.append('\n').append(""String_Node_Str"").append(c);
      LOGGER.log(Level.INFO,b.toString());
    }
    config=new ComponentsClientConfig(config,components);
  }
  final InjectableProviderFactory injectableFactory=new InjectableProviderFactory();
  getProperties().putAll(config.getProperties());
  if (provider != null) {
    if (provider instanceof IoCComponentProcessorFactoryInitializer) {
      IoCComponentProcessorFactoryInitializer i=(IoCComponentProcessorFactoryInitializer)provider;
      i.init(new ComponentProcessorFactoryImpl(injectableFactory));
    }
  }
  this.componentProviderFactory=(provider == null) ? new ProviderFactory(injectableFactory) : new IoCProviderFactory(injectableFactory,provider);
  ProviderServices providerServices=new ProviderServices(ClientSide.class,this.componentProviderFactory,config.getClasses(),config.getSingletons());
  vpps=providerServices.getServices(ViewProxyProvider.class);
  injectableFactory.add(new ContextInjectableProvider<FeaturesAndProperties>(FeaturesAndProperties.class,config));
  injectableFactory.add(new ContextInjectableProvider<ClientConfig>(ClientConfig.class,config));
  injectableFactory.add(new ContextInjectableProvider<Client>(Client.class,this));
  injectableFactory.configure(providerServices);
  final ContextResolverFactory crf=new ContextResolverFactory();
  final MessageBodyFactory bodyContext=new MessageBodyFactory(providerServices);
  injectableFactory.add(new ContextInjectableProvider<MessageBodyWorkers>(MessageBodyWorkers.class,bodyContext));
  this.providers=new Providers(){
    public <T>MessageBodyReader<T> getMessageBodyReader(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyContext.getMessageBodyReader(c,t,as,m);
    }
    public <T>MessageBodyWriter<T> getMessageBodyWriter(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyContext.getMessageBodyWriter(c,t,as,m);
    }
    public <T extends Throwable>ExceptionMapper<T> getExceptionMapper(    Class<T> c){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    public <T>ContextResolver<T> getContextResolver(    Class<T> ct,    MediaType m){
      return crf.resolve(ct,m);
    }
  }
;
  injectableFactory.add(new ContextInjectableProvider<Providers>(Providers.class,this.providers));
  injectableFactory.add(new InjectableProvider<Context,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<Injectable> getInjectable(    ComponentContext ic,    Context a,    Type c){
      if (c instanceof ParameterizedType) {
        ParameterizedType pt=(ParameterizedType)c;
        if (pt.getRawType() == Injectable.class) {
          if (pt.getActualTypeArguments().length == 1) {
            final Injectable<?> i=injectableFactory.getInjectable(a.annotationType(),ic,a,pt.getActualTypeArguments()[0],ComponentScope.PERREQUEST_UNDEFINED_SINGLETON);
            if (i == null)             return null;
            return new Injectable<Injectable>(){
              public Injectable getValue(){
                return i;
              }
            }
;
          }
        }
      }
      return null;
    }
  }
);
  crf.init(providerServices,injectableFactory);
  bodyContext.init();
  Errors.setReportMissingDependentFieldOrMethod(true);
  componentProviderFactory.injectOnAllComponents();
  componentProviderFactory.injectOnProviderInstances(config.getSingletons());
  componentProviderFactory.injectOnProviderInstance(root);
}","private void init(ClientHandler root,ClientConfig config,IoCComponentProviderFactory provider){
  this.es=new LazyVal<ExecutorService>(){
    @Override protected ExecutorService instance(){
      return Executors.newCachedThreadPool();
    }
  }
;
  Class<?>[] components=ServiceFinder.find(""String_Node_Str"").toClassArray();
  if (components.length > 0) {
    if (LOGGER.isLoggable(Level.INFO)) {
      StringBuilder b=new StringBuilder();
      b.append(""String_Node_Str"");
      for (      Class c : components)       b.append('\n').append(""String_Node_Str"").append(c);
      LOGGER.log(Level.INFO,b.toString());
    }
    config=new ComponentsClientConfig(config,components);
  }
  final InjectableProviderFactory injectableFactory=new InjectableProviderFactory();
  getProperties().putAll(config.getProperties());
  if (provider != null) {
    if (provider instanceof IoCComponentProcessorFactoryInitializer) {
      IoCComponentProcessorFactoryInitializer i=(IoCComponentProcessorFactoryInitializer)provider;
      i.init(new ComponentProcessorFactoryImpl(injectableFactory));
    }
  }
  this.componentProviderFactory=(provider == null) ? new ProviderFactory(injectableFactory) : new IoCProviderFactory(injectableFactory,provider);
  ProviderServices providerServices=new ProviderServices(ClientSide.class,this.componentProviderFactory,config.getClasses(),config.getSingletons());
  vpps=providerServices.getServices(ViewProxyProvider.class);
  injectableFactory.add(new ContextInjectableProvider<FeaturesAndProperties>(FeaturesAndProperties.class,config));
  injectableFactory.add(new ContextInjectableProvider<ClientConfig>(ClientConfig.class,config));
  injectableFactory.add(new ContextInjectableProvider<Client>(Client.class,this));
  injectableFactory.configure(providerServices);
  final ContextResolverFactory crf=new ContextResolverFactory();
  final MessageBodyFactory bodyContext=new MessageBodyFactory(providerServices,config.getFeature(FeaturesAndProperties.FEATURE_PRE_1_4_PROVIDER_PRECEDENCE));
  injectableFactory.add(new ContextInjectableProvider<MessageBodyWorkers>(MessageBodyWorkers.class,bodyContext));
  this.providers=new Providers(){
    public <T>MessageBodyReader<T> getMessageBodyReader(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyContext.getMessageBodyReader(c,t,as,m);
    }
    public <T>MessageBodyWriter<T> getMessageBodyWriter(    Class<T> c,    Type t,    Annotation[] as,    MediaType m){
      return bodyContext.getMessageBodyWriter(c,t,as,m);
    }
    public <T extends Throwable>ExceptionMapper<T> getExceptionMapper(    Class<T> c){
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    public <T>ContextResolver<T> getContextResolver(    Class<T> ct,    MediaType m){
      return crf.resolve(ct,m);
    }
  }
;
  injectableFactory.add(new ContextInjectableProvider<Providers>(Providers.class,this.providers));
  injectableFactory.add(new InjectableProvider<Context,Type>(){
    public ComponentScope getScope(){
      return ComponentScope.Singleton;
    }
    public Injectable<Injectable> getInjectable(    ComponentContext ic,    Context a,    Type c){
      if (c instanceof ParameterizedType) {
        ParameterizedType pt=(ParameterizedType)c;
        if (pt.getRawType() == Injectable.class) {
          if (pt.getActualTypeArguments().length == 1) {
            final Injectable<?> i=injectableFactory.getInjectable(a.annotationType(),ic,a,pt.getActualTypeArguments()[0],ComponentScope.PERREQUEST_UNDEFINED_SINGLETON);
            if (i == null)             return null;
            return new Injectable<Injectable>(){
              public Injectable getValue(){
                return i;
              }
            }
;
          }
        }
      }
      return null;
    }
  }
);
  crf.init(providerServices,injectableFactory);
  bodyContext.init();
  Errors.setReportMissingDependentFieldOrMethod(true);
  componentProviderFactory.injectOnAllComponents();
  componentProviderFactory.injectOnProviderInstances(config.getSingletons());
  componentProviderFactory.injectOnProviderInstance(root);
}"
51149,"private <T>MessageBodyReader<T> _getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType,MediaType lookup){
  List<MessageBodyReader> readers=readerProviders.get(lookup);
  if (readers == null)   return null;
  for (  MessageBodyReader p : readers) {
    if (p.isReadable(c,t,as,mediaType))     return p;
  }
  return null;
}","private <T>MessageBodyReader<T> _getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType,MediaType lookup,Map<MediaType,List<MessageBodyReader>> providers){
  List<MessageBodyReader> readers=providers.get(lookup);
  if (readers == null)   return null;
  for (  MessageBodyReader p : readers) {
    if (p.isReadable(c,t,as,mediaType)) {
      return p;
    }
  }
  return null;
}"
51150,"public <T>List<MediaType> getMessageBodyWriterMediaTypes(Class<T> c,Type t,Annotation[] as){
  List<MediaType> mtl=new ArrayList<MediaType>();
  for (  MessageBodyWriterPair mbwp : writerListProviders) {
    if (mbwp.mbw.isWriteable(c,t,as,MediaType.APPLICATION_OCTET_STREAM_TYPE)) {
      mtl.addAll(mbwp.types);
    }
  }
  Collections.sort(mtl,MediaTypes.MEDIA_TYPE_COMPARATOR);
  return mtl;
}","public <T>List<MediaType> getMessageBodyWriterMediaTypes(Class<T> c,Type t,Annotation[] as){
  List<MediaType> mtl=new ArrayList<MediaType>();
  for (  MessageBodyWriterPair mbwp : customWriterListProviders) {
    if (mbwp.mbw.isWriteable(c,t,as,MediaType.APPLICATION_OCTET_STREAM_TYPE)) {
      mtl.addAll(mbwp.types);
    }
  }
  for (  MessageBodyWriterPair mbwp : writerListProviders) {
    if (mbwp.mbw.isWriteable(c,t,as,MediaType.APPLICATION_OCTET_STREAM_TYPE)) {
      mtl.addAll(mbwp.types);
    }
  }
  Collections.sort(mtl,MediaTypes.MEDIA_TYPE_COMPARATOR);
  return mtl;
}"
51151,"private void initWriters(){
  this.writerProviders=new KeyComparatorHashMap<MediaType,List<MessageBodyWriter>>(MEDIA_TYPE_COMPARATOR);
  this.writerListProviders=new ArrayList<MessageBodyWriterPair>();
  for (  MessageBodyWriter provider : providerServices.getProvidersAndServices(MessageBodyWriter.class)) {
    List<MediaType> values=MediaTypes.createMediaTypes(provider.getClass().getAnnotation(Produces.class));
    for (    MediaType type : values)     getClassCapability(writerProviders,provider,type);
    writerListProviders.add(new MessageBodyWriterPair(provider,values));
  }
  final DistanceComparator<MessageBodyWriter> dc=new DistanceComparator<MessageBodyWriter>(MessageBodyWriter.class);
  for (  Map.Entry<MediaType,List<MessageBodyWriter>> e : writerProviders.entrySet()) {
    Collections.sort(e.getValue(),dc);
  }
  Collections.sort(writerListProviders,new Comparator<MessageBodyWriterPair>(){
    public int compare(    MessageBodyWriterPair p1,    MessageBodyWriterPair p2){
      return dc.compare(p1.mbw,p2.mbw);
    }
  }
);
}","private void initWriters(Map<MediaType,List<MessageBodyWriter>> providersMap,List<MessageBodyWriterPair> listProviders,Set<MessageBodyWriter> providersSet){
  for (  MessageBodyWriter provider : providersSet) {
    List<MediaType> values=MediaTypes.createMediaTypes(provider.getClass().getAnnotation(Produces.class));
    for (    MediaType type : values)     getClassCapability(providersMap,provider,type);
    listProviders.add(new MessageBodyWriterPair(provider,values));
  }
  final DistanceComparator<MessageBodyWriter> dc=new DistanceComparator<MessageBodyWriter>(MessageBodyWriter.class);
  for (  Map.Entry<MediaType,List<MessageBodyWriter>> e : providersMap.entrySet()) {
    Collections.sort(e.getValue(),dc);
  }
  Collections.sort(listProviders,new Comparator<MessageBodyWriterPair>(){
    public int compare(    MessageBodyWriterPair p1,    MessageBodyWriterPair p2){
      return dc.compare(p1.mbw,p2.mbw);
    }
  }
);
}"
51152,"public <T>MediaType getMessageBodyWriterMediaType(Class<T> c,Type t,Annotation[] as,List<MediaType> acceptableMediaTypes){
  for (  MediaType acceptable : acceptableMediaTypes) {
    for (    MessageBodyWriterPair mbwp : writerListProviders) {
      for (      MediaType mt : mbwp.types) {
        if (mt.isCompatible(acceptable) && mbwp.mbw.isWriteable(c,t,as,acceptable)) {
          return MediaTypes.mostSpecific(mt,acceptable);
        }
      }
    }
  }
  return null;
}","public <T>MediaType getMessageBodyWriterMediaType(Class<T> c,Type t,Annotation[] as,List<MediaType> acceptableMediaTypes){
  for (  MediaType acceptable : acceptableMediaTypes) {
    for (    MessageBodyWriterPair mbwp : customWriterListProviders) {
      for (      MediaType mt : mbwp.types) {
        if (mt.isCompatible(acceptable) && mbwp.mbw.isWriteable(c,t,as,acceptable)) {
          return MediaTypes.mostSpecific(mt,acceptable);
        }
      }
    }
    for (    MessageBodyWriterPair mbwp : writerListProviders) {
      for (      MediaType mt : mbwp.types) {
        if (mt.isCompatible(acceptable) && mbwp.mbw.isWriteable(c,t,as,acceptable)) {
          return MediaTypes.mostSpecific(mt,acceptable);
        }
      }
    }
  }
  return null;
}"
51153,"public MessageBodyFactory(ProviderServices providerServices){
  this.providerServices=providerServices;
}","public MessageBodyFactory(ProviderServices providerServices,boolean deprecatedProviderPrecedence){
  this.providerServices=providerServices;
  this.deprecatedProviderPrecedence=deprecatedProviderPrecedence;
}"
51154,"private void initReaders(){
  this.readerProviders=new KeyComparatorHashMap<MediaType,List<MessageBodyReader>>(MEDIA_TYPE_COMPARATOR);
  for (  MessageBodyReader provider : providerServices.getProvidersAndServices(MessageBodyReader.class)) {
    List<MediaType> values=MediaTypes.createMediaTypes(provider.getClass().getAnnotation(Consumes.class));
    for (    MediaType type : values)     getClassCapability(readerProviders,provider,type);
  }
  DistanceComparator<MessageBodyReader> dc=new DistanceComparator<MessageBodyReader>(MessageBodyReader.class);
  for (  Map.Entry<MediaType,List<MessageBodyReader>> e : readerProviders.entrySet()) {
    Collections.sort(e.getValue(),dc);
  }
}","private void initReaders(Map<MediaType,List<MessageBodyReader>> providersMap,Set<MessageBodyReader> providersSet){
  for (  MessageBodyReader provider : providersSet) {
    List<MediaType> values=MediaTypes.createMediaTypes(provider.getClass().getAnnotation(Consumes.class));
    for (    MediaType type : values)     getClassCapability(providersMap,provider,type);
  }
  DistanceComparator<MessageBodyReader> dc=new DistanceComparator<MessageBodyReader>(MessageBodyReader.class);
  for (  Map.Entry<MediaType,List<MessageBodyReader>> e : providersMap.entrySet()) {
    Collections.sort(e.getValue(),dc);
  }
}"
51155,"public <T>MessageBodyWriter<T> getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyWriter p=null;
  if (mediaType != null) {
    p=_getMessageBodyWriter(c,t,as,mediaType,mediaType);
    if (p == null)     p=_getMessageBodyWriter(c,t,as,mediaType,new MediaType(mediaType.getType(),MediaType.MEDIA_TYPE_WILDCARD));
  }
  if (p == null)   p=_getMessageBodyWriter(c,t,as,mediaType,MediaTypes.GENERAL_MEDIA_TYPE);
  return p;
}","public <T>MessageBodyWriter<T> getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyWriter p;
  p=_getMessageBodyWriter(c,t,as,mediaType,customWriterProviders);
  if (p != null)   return p;
  p=_getMessageBodyWriter(c,t,as,mediaType,writerProviders);
  return p;
}"
51156,"private <T>MessageBodyWriter<T> _getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType,MediaType lookup){
  List<MessageBodyWriter> writers=writerProviders.get(lookup);
  if (writers == null)   return null;
  for (  MessageBodyWriter p : writers) {
    if (p.isWriteable(c,t,as,mediaType))     return p;
  }
  return null;
}","private <T>MessageBodyWriter<T> _getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType,MediaType lookup,Map<MediaType,List<MessageBodyWriter>> providers){
  List<MessageBodyWriter> writers=providers.get(lookup);
  if (writers == null)   return null;
  for (  MessageBodyWriter p : writers) {
    if (p.isWriteable(c,t,as,mediaType)) {
      return p;
    }
  }
  return null;
}"
51157,"public <T>MessageBodyReader<T> getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyReader p=null;
  if (mediaType != null) {
    p=_getMessageBodyReader(c,t,as,mediaType,mediaType);
    if (p == null)     p=_getMessageBodyReader(c,t,as,mediaType,new MediaType(mediaType.getType(),MediaType.MEDIA_TYPE_WILDCARD));
  }
  if (p == null)   p=_getMessageBodyReader(c,t,as,mediaType,MediaTypes.GENERAL_MEDIA_TYPE);
  return p;
}","public <T>MessageBodyReader<T> getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyReader reader;
  reader=_getMessageBodyReader(c,t,as,mediaType,customReaderProviders);
  if (reader != null)   return reader;
  reader=_getMessageBodyReader(c,t,as,mediaType,readerProviders);
  return reader;
}"
51158,"public Map<MediaType,List<MessageBodyReader>> getReaders(MediaType mediaType){
  Map<MediaType,List<MessageBodyReader>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyReader>>(MEDIA_TYPE_COMPARATOR);
  getCompatibleReadersWritersMap(mediaType,readerProviders,subSet);
  return subSet;
}","public Map<MediaType,List<MessageBodyReader>> getReaders(MediaType mediaType){
  Map<MediaType,List<MessageBodyReader>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyReader>>(MEDIA_TYPE_COMPARATOR);
  getCompatibleReadersWritersMap(mediaType,customReaderProviders,subSet);
  getCompatibleReadersWritersMap(mediaType,readerProviders,subSet);
  return subSet;
}"
51159,"public Map<MediaType,List<MessageBodyWriter>> getWriters(MediaType mediaType){
  Map<MediaType,List<MessageBodyWriter>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyWriter>>(MEDIA_TYPE_COMPARATOR);
  getCompatibleReadersWritersMap(mediaType,writerProviders,subSet);
  return subSet;
}","public Map<MediaType,List<MessageBodyWriter>> getWriters(MediaType mediaType){
  Map<MediaType,List<MessageBodyWriter>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyWriter>>(MEDIA_TYPE_COMPARATOR);
  getCompatibleReadersWritersMap(mediaType,customWriterProviders,subSet);
  getCompatibleReadersWritersMap(mediaType,writerProviders,subSet);
  return subSet;
}"
51160,"public Map<MediaType,List<MessageBodyReader>> getReaders(MediaType mediaType){
  Map<MediaType,List<MessageBodyReader>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyReader>>(MEDIA_TYPE_COMPARATOR);
  getCompatibleReadersWritersMap(mediaType,customReaderProviders,subSet);
  getCompatibleReadersWritersMap(mediaType,readerProviders,subSet);
  return subSet;
}","public Map<MediaType,List<MessageBodyReader>> getReaders(MediaType mediaType){
  Map<MediaType,List<MessageBodyReader>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyReader>>(MEDIA_TYPE_COMPARATOR);
  if (!customReaderProviders.isEmpty())   getCompatibleReadersWritersMap(mediaType,customReaderProviders,subSet);
  getCompatibleReadersWritersMap(mediaType,readerProviders,subSet);
  return subSet;
}"
51161,"public Map<MediaType,List<MessageBodyWriter>> getWriters(MediaType mediaType){
  Map<MediaType,List<MessageBodyWriter>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyWriter>>(MEDIA_TYPE_COMPARATOR);
  getCompatibleReadersWritersMap(mediaType,customWriterProviders,subSet);
  getCompatibleReadersWritersMap(mediaType,writerProviders,subSet);
  return subSet;
}","public Map<MediaType,List<MessageBodyWriter>> getWriters(MediaType mediaType){
  Map<MediaType,List<MessageBodyWriter>> subSet=new KeyComparatorLinkedHashMap<MediaType,List<MessageBodyWriter>>(MEDIA_TYPE_COMPARATOR);
  if (!customWriterProviders.isEmpty())   getCompatibleReadersWritersMap(mediaType,customWriterProviders,subSet);
  getCompatibleReadersWritersMap(mediaType,writerProviders,subSet);
  return subSet;
}"
51162,"public <T>MessageBodyWriter<T> getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyWriter p;
  p=_getMessageBodyWriter(c,t,as,mediaType,customWriterProviders);
  if (p != null)   return p;
  p=_getMessageBodyWriter(c,t,as,mediaType,writerProviders);
  return p;
}","public <T>MessageBodyWriter<T> getMessageBodyWriter(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyWriter p=null;
  if (!customWriterProviders.isEmpty())   p=_getMessageBodyWriter(c,t,as,mediaType,customWriterProviders);
  if (p != null)   return p;
  p=_getMessageBodyWriter(c,t,as,mediaType,writerProviders);
  return p;
}"
51163,"public <T>MessageBodyReader<T> getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyReader reader;
  reader=_getMessageBodyReader(c,t,as,mediaType,customReaderProviders);
  if (reader != null)   return reader;
  reader=_getMessageBodyReader(c,t,as,mediaType,readerProviders);
  return reader;
}","public <T>MessageBodyReader<T> getMessageBodyReader(Class<T> c,Type t,Annotation[] as,MediaType mediaType){
  MessageBodyReader reader=null;
  if (!customReaderProviders.isEmpty())   reader=_getMessageBodyReader(c,t,as,mediaType,customReaderProviders);
  if (reader != null)   return reader;
  reader=_getMessageBodyReader(c,t,as,mediaType,readerProviders);
  return reader;
}"
51164,"private <T>void getCompatibleReadersWritersMap(MediaType mediaType,Map<MediaType,List<T>> set,Map<MediaType,List<T>> subSet){
  if (mediaType.isWildcardType()) {
    getCompatibleReadersWritersList(mediaType,set,subSet);
  }
 else   if (mediaType.isWildcardSubtype()) {
    getCompatibleReadersWritersList(mediaType,set,subSet);
    getCompatibleReadersWritersList(MediaTypes.GENERAL_MEDIA_TYPE,set,subSet);
  }
 else {
    getCompatibleReadersWritersList(mediaType,set,subSet);
    getCompatibleReadersWritersList(new MediaType(mediaType.getType(),MediaType.MEDIA_TYPE_WILDCARD),set,subSet);
    getCompatibleReadersWritersList(MediaTypes.GENERAL_MEDIA_TYPE,set,subSet);
  }
}","private <T>void getCompatibleReadersWritersMap(MediaType mediaType,Map<MediaType,List<T>> set,Map<MediaType,List<T>> subSet){
  if (mediaType.isWildcardType()) {
    getCompatibleReadersWritersList(mediaType,set,subSet);
  }
 else   if (mediaType.isWildcardSubtype()) {
    getCompatibleReadersWritersList(mediaType,set,subSet);
    getCompatibleReadersWritersList(MediaTypes.GENERAL_MEDIA_TYPE,set,subSet);
  }
 else {
    getCompatibleReadersWritersList(mediaType,set,subSet);
    getCompatibleReadersWritersList(MediaTypes.getTypeWildCart(mediaType),set,subSet);
    getCompatibleReadersWritersList(MediaTypes.GENERAL_MEDIA_TYPE,set,subSet);
  }
}"
51165,"public void testObjectResource2(){
  ResourceConfig rc=new DefaultResourceConfig(ObjectResource.class,ObjectWriter.class);
  initiateWebApplication(rc);
  WebResource r=resource(""String_Node_Str"");
  assertEquals(""String_Node_Str"",r.path(""String_Node_Str"").get(String.class));
  assertNotSame(""String_Node_Str"",r.path(""String_Node_Str"").get(String.class));
}","public void testObjectResource2(){
  ResourceConfig rc=new DefaultResourceConfig(ObjectResource.class,ObjectWriter.class);
  rc.getFeatures().put(FeaturesAndProperties.FEATURE_PRE_1_4_PROVIDER_PRECEDENCE,false);
  initiateWebApplication(rc);
  WebResource r=resource(""String_Node_Str"");
  assertEquals(""String_Node_Str"",r.path(""String_Node_Str"").get(String.class));
  assertNotSame(""String_Node_Str"",r.path(""String_Node_Str"").get(String.class));
}"
51166,"public WebApplicationContext createMatchResourceContext(URI u){
  final URI base=request.getBaseUri();
  if (u.isAbsolute()) {
    URI r=base.relativize(u);
    if (r == u) {
      throw new ContainerException(""String_Node_Str"" + u + ""String_Node_Str""+ base);
    }
  }
 else {
    u=UriBuilder.fromUri(base).path(u.getRawPath()).replaceQuery(u.getRawQuery()).fragment(u.getRawFragment()).build();
  }
  final ContainerRequest _request=new ContainerRequest(app,HTTP_METHOD_MATCH_RESOURCE,base,u,new InBoundHeaders(),null);
  final ContainerResponse _response=new ContainerResponse(app,_request,null);
  return new WebApplicationContext(app,_request,_response);
}","public WebApplicationContext createMatchResourceContext(URI u){
  final URI base=request.getBaseUri();
  if (u.isAbsolute()) {
    URI r=base.relativize(u);
    if (r == u) {
      throw new ContainerException(""String_Node_Str"" + u + ""String_Node_Str""+ base);
    }
  }
 else {
    u=UriBuilder.fromUri(base).path(u.getRawPath()).replaceQuery(u.getRawQuery()).fragment(u.getRawFragment()).build();
  }
  final ContainerRequest _request=new ContainerRequest(app,HTTP_METHOD_MATCH_RESOURCE,base,u,new InBoundHeaders(),null);
  _request.setSecurityContext(request);
  final ContainerResponse _response=new ContainerResponse(app,_request,null);
  return new WebApplicationContext(app,_request,_response);
}"
51167,"public ContainerRequest filter(ContainerRequest request){
  String user=request.getHeaderValue(""String_Node_Str"");
  request.setSecurityContext(new Authenticator(user));
  return request;
}","public ContainerRequest filter(ContainerRequest request){
  if (!request.getMethod().equals(WebApplicationContext.HTTP_METHOD_MATCH_RESOURCE)) {
    String user=request.getHeaderValue(""String_Node_Str"");
    request.setSecurityContext(new Authenticator(user));
  }
  return request;
}"
51168,"@RolesAllowed(""String_Node_Str"") @GET public String get(){
  return ""String_Node_Str"";
}","@GET public String get(){
  return ""String_Node_Str"";
}"
51169,"private Bundle getJerseyServerBundle(BundleContext bc){
  for (  Bundle b : bc.getBundles()) {
    if (b.getSymbolicName().endsWith(""String_Node_Str"")) {
      return b;
    }
  }
  return null;
}","private Bundle getJerseyServerBundle(BundleContext bc){
  for (  Bundle b : bc.getBundles()) {
    final String symbolicName=b.getSymbolicName();
    if ((symbolicName != null) && symbolicName.endsWith(""String_Node_Str"")) {
      return b;
    }
  }
  return null;
}"
51170,"private Request generateRequest(AbstractResource r,final AbstractResourceMethod m,Map<String,Param> wadlResourceParams){
  if (m.getParameters().size() == 0) {
    return null;
  }
  Request wadlRequest=_wadlGenerator.createRequest(r,m);
  for (  Parameter p : m.getParameters()) {
    if (p.getSource() == Parameter.Source.ENTITY) {
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        setRepresentationForMediaType(r,m,mediaType,wadlRequest);
      }
    }
 else     if (p.getAnnotation().annotationType() == FormParam.class) {
      List<MediaType> supportedInputTypes=m.getSupportedInputTypes();
      if (supportedInputTypes.size() == 0 || (supportedInputTypes.size() == 1 && supportedInputTypes.get(0).isWildcardType())) {
        supportedInputTypes=Collections.singletonList(MediaType.APPLICATION_FORM_URLENCODED_TYPE);
      }
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        final RepresentationType wadlRepresentation=setRepresentationForMediaType(r,m,mediaType,wadlRequest);
        if (getParamByName(wadlRepresentation.getParam(),p.getSourceName()) == null) {
          final Param wadlParam=generateParam(r,m,p);
          if (wadlParam != null) {
            wadlRepresentation.getParam().add(wadlParam);
          }
        }
      }
    }
 else {
      Param wadlParam=generateParam(r,m,p);
      if (wadlParam == null) {
        continue;
      }
      if (wadlParam.getStyle() == ParamStyle.TEMPLATE) {
        wadlResourceParams.put(wadlParam.getName(),wadlParam);
      }
 else {
        wadlRequest.getParam().add(wadlParam);
      }
    }
  }
  if (wadlRequest.getRepresentation().size() + wadlRequest.getParam().size() == 0) {
    return null;
  }
 else {
    return wadlRequest;
  }
}","private Request generateRequest(AbstractResource r,final AbstractResourceMethod m,Map<String,Param> wadlResourceParams){
  if (m.getParameters().size() == 0) {
    return null;
  }
  Request wadlRequest=_wadlGenerator.createRequest(r,m);
  for (  Parameter p : m.getParameters()) {
    if (p.getSource() == Parameter.Source.ENTITY) {
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        setRepresentationForMediaType(r,m,mediaType,wadlRequest);
      }
    }
 else     if (p.getAnnotation().annotationType() == FormParam.class) {
      List<MediaType> supportedInputTypes=m.getSupportedInputTypes();
      if (supportedInputTypes.size() == 0 || (supportedInputTypes.size() == 1 && supportedInputTypes.get(0).isWildcardType())) {
        supportedInputTypes=Collections.singletonList(MediaType.APPLICATION_FORM_URLENCODED_TYPE);
      }
      for (      MediaType mediaType : supportedInputTypes) {
        final RepresentationType wadlRepresentation=setRepresentationForMediaType(r,m,mediaType,wadlRequest);
        if (getParamByName(wadlRepresentation.getParam(),p.getSourceName()) == null) {
          final Param wadlParam=generateParam(r,m,p);
          if (wadlParam != null) {
            wadlRepresentation.getParam().add(wadlParam);
          }
        }
      }
    }
 else {
      Param wadlParam=generateParam(r,m,p);
      if (wadlParam == null) {
        continue;
      }
      if (wadlParam.getStyle() == ParamStyle.TEMPLATE) {
        wadlResourceParams.put(wadlParam.getName(),wadlParam);
      }
 else {
        wadlRequest.getParam().add(wadlParam);
      }
    }
  }
  if (wadlRequest.getRepresentation().size() + wadlRequest.getParam().size() == 0) {
    return null;
  }
 else {
    return wadlRequest;
  }
}"
51171,"private JSONConfiguration(JSONConfiguration jsonConf,boolean formatted){
  notation=jsonConf.notation;
  arrays=jsonConf.arrays;
  attrsAsElems=jsonConf.attrsAsElems;
  nonStrings=jsonConf.nonStrings;
  rootUnwrapping=jsonConf.rootUnwrapping;
  humanReadableFormatting=formatted;
  jsonXml2JsonNs=jsonConf.jsonXml2JsonNs;
  usePrefixAtNaturalAttributes=jsonConf.usePrefixAtNaturalAttributes;
}","private JSONConfiguration(JSONConfiguration jsonConf,boolean formatted){
  notation=jsonConf.notation;
  arrays=jsonConf.arrays;
  attrsAsElems=jsonConf.attrsAsElems;
  nonStrings=jsonConf.nonStrings;
  rootUnwrapping=jsonConf.rootUnwrapping;
  humanReadableFormatting=formatted;
  jsonXml2JsonNs=jsonConf.jsonXml2JsonNs;
  usePrefixAtNaturalAttributes=jsonConf.usePrefixAtNaturalAttributes;
  namespaceSeparator=jsonConf.namespaceSeparator;
}"
51172,"private QName createQName(String name){
  if (revertedXml2JsonNs.isEmpty() || !name.contains(""String_Node_Str"")) {
    return new QName(name);
  }
 else {
    int dotIndex=name.indexOf(""String_Node_Str"");
    String prefix=name.substring(0,dotIndex);
    String suffix=name.substring(dotIndex + 1);
    return revertedXml2JsonNs.containsKey(prefix) ? new QName(revertedXml2JsonNs.get(prefix),suffix) : new QName(name);
  }
}","private QName createQName(String name){
  if (revertedXml2JsonNs.isEmpty() || !name.contains(nsSeparatorAsSequence)) {
    return new QName(name);
  }
 else {
    int dotIndex=name.indexOf(nsSeparator);
    String prefix=name.substring(0,dotIndex);
    String suffix=name.substring(dotIndex + 1);
    return revertedXml2JsonNs.containsKey(prefix) ? new QName(revertedXml2JsonNs.get(prefix),suffix) : new QName(name);
  }
}"
51173,"public JsonXmlStreamReader(Reader reader,String rootElementName,JSONConfiguration config) throws IOException {
  this.jsonRootUnwrapping=(rootElementName != null);
  this.rootElementName=rootElementName;
  if (config.getAttributeAsElements() != null) {
    this.attrAsElemNames.addAll(config.getAttributeAsElements());
  }
  if (config.getXml2JsonNs() != null) {
    for (    String uri : config.getXml2JsonNs().keySet())     revertedXml2JsonNs.put(config.getXml2JsonNs().get(uri),uri);
  }
  lexer=new JsonLexer(reader);
  depth=0;
  processingStack=new ArrayList<ProcessingState>();
  processingStack.add(new ProcessingState());
  readNext();
}","public JsonXmlStreamReader(Reader reader,String rootElementName,JSONConfiguration config) throws IOException {
  this.jsonRootUnwrapping=(rootElementName != null);
  this.rootElementName=rootElementName;
  if (config.getAttributeAsElements() != null) {
    this.attrAsElemNames.addAll(config.getAttributeAsElements());
  }
  if (config.getXml2JsonNs() != null) {
    for (    String uri : config.getXml2JsonNs().keySet())     revertedXml2JsonNs.put(config.getXml2JsonNs().get(uri),uri);
  }
  nsSeparator=config.getNsSeparator();
  nsSeparatorAsSequence=new StringBuffer(1).append(nsSeparator);
  lexer=new JsonLexer(reader);
  depth=0;
  processingStack=new ArrayList<ProcessingState>();
  processingStack.add(new ProcessingState());
  readNext();
}"
51174,"private JsonXmlStreamWriter(Writer writer,JSONConfiguration config){
  this.mainWriter=writer;
  this.stripRoot=config.isRootUnwrapping();
  if (null != config.getArrays()) {
    this.arrayElementNames.addAll(config.getArrays());
  }
  if (null != config.getNonStrings()) {
    this.nonStringElementNames.addAll(config.getNonStrings());
  }
  if (null != config.getXml2JsonNs()) {
    this.xml2JsonNs.putAll(config.getXml2JsonNs());
  }
  processingStack.add(createProcessingState());
  depth=0;
}","private JsonXmlStreamWriter(Writer writer,JSONConfiguration config){
  this.mainWriter=writer;
  this.stripRoot=config.isRootUnwrapping();
  this.nsSeparator=config.getNsSeparator();
  if (null != config.getArrays()) {
    this.arrayElementNames.addAll(config.getArrays());
  }
  if (null != config.getNonStrings()) {
    this.nonStringElementNames.addAll(config.getNonStrings());
  }
  if (null != config.getXml2JsonNs()) {
    this.xml2JsonNs.putAll(config.getXml2JsonNs());
  }
  processingStack.add(createProcessingState());
  depth=0;
}"
51175,"private String getEffectiveName(String namespaceURI,String localName){
  if ((namespaceURI != null) && xml2JsonNs.containsKey(namespaceURI)) {
    return String.format(""String_Node_Str"",xml2JsonNs.get(namespaceURI),localName);
  }
 else {
    return localName;
  }
}","private String getEffectiveName(String namespaceURI,String localName){
  if ((namespaceURI != null) && xml2JsonNs.containsKey(namespaceURI)) {
    return String.format(""String_Node_Str"",xml2JsonNs.get(namespaceURI),nsSeparator,localName);
  }
 else {
    return localName;
  }
}"
51176,"public synchronized void start(BundleContext bundleContext) throws Exception {
  this.bundleContext=bundleContext;
  debugPrintln(""String_Node_Str"");
  debugPrintln(""String_Node_Str"");
  ServiceFinder.setIteratorProvider(new OsgiServiceFinder());
  debugPrintln(""String_Node_Str"");
  bundleContext.addBundleListener(this);
  debugPrintln(""String_Node_Str"");
  for (  Bundle bundle : bundleContext.getBundles()) {
    if (bundle.getState() == Bundle.RESOLVED || bundle.getState() == Bundle.STARTING || bundle.getState() == Bundle.ACTIVE || bundle.getState() == Bundle.STOPPING) {
      register(bundle);
    }
  }
  debugPrintln(""String_Node_Str"");
}","@Override public synchronized void start(final BundleContext bundleContext) throws Exception {
  this.bundleContext=bundleContext;
  debugPrintln(""String_Node_Str"");
  debugPrintln(""String_Node_Str"");
  PackageNamesScanner.setPackageURLProvider(new PackageNamesScanner.PackageURLProvider(){
    @Override public Enumeration<URL> getPackageURLs(    ClassLoader cl,    String pkgName) throws IOException {
      List<URL> result=new LinkedList<URL>();
      for (      Bundle b : bundleContext.getBundles()) {
        Enumeration<URL> e=(Enumeration<URL>)b.findEntries(pkgName,""String_Node_Str"",false);
        if (e != null) {
          result.addAll(Collections.list(e));
        }
      }
      return Collections.enumeration(result);
    }
  }
);
  OsgiLocator.register(UriSchemeScanner.class.getName(),new Callable<List<Class>>(){
    @Override public List<Class> call() throws Exception {
      List<Class> result=new LinkedList<Class>();
      result.add(BundleSchemeScanner.class);
      return result;
    }
  }
);
  debugPrintln(""String_Node_Str"");
  ServiceFinder.setIteratorProvider(new OsgiServiceFinder());
  debugPrintln(""String_Node_Str"");
  bundleContext.addBundleListener(this);
  debugPrintln(""String_Node_Str"");
  for (  Bundle bundle : bundleContext.getBundles()) {
    if (bundle.getState() == Bundle.RESOLVED || bundle.getState() == Bundle.STARTING || bundle.getState() == Bundle.ACTIVE || bundle.getState() == Bundle.STOPPING) {
      register(bundle);
    }
  }
  debugPrintln(""String_Node_Str"");
}"
51177,"/** 
 * Scan from a set of packages using declared class loader.
 * @param classloader the class loader to load classes from.
 * @param packages an array of package names.
 */
public PackageNamesScanner(final ClassLoader classloader,final String[] packages){
  this.packages=packages;
  this.classloader=classloader;
  this.scanners=new HashMap<String,UriSchemeScanner>();
  add(new JarZipSchemeScanner());
  add(new FileSchemeScanner());
  add(new VfsSchemeScanner());
}","/** 
 * Scan from a set of packages using declared class loader.
 * @param classloader the class loader to load classes from.
 * @param packages an array of package names.
 */
public PackageNamesScanner(final ClassLoader classloader,final String[] packages){
  this.packages=packages;
  this.classloader=classloader;
  this.scanners=new HashMap<String,UriSchemeScanner>();
  add(new JarZipSchemeScanner());
  add(new FileSchemeScanner());
  add(new VfsSchemeScanner());
  for (  UriSchemeScanner s : ServiceFinder.find(UriSchemeScanner.class)) {
    add(s);
  }
}"
51178,"public Object getInjectableInstance(Object o){
  return o;
}","public Object getInjectableInstance(Object o){
  getInjector().injectMembers(o);
  return o;
}"
51179,"public IoCComponentProvider getComponentProvider(ComponentContext cc,Class clazz){
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
  Key<?> key=Key.get(clazz);
  Injector i=findInjector(key);
  if (i == null) {
    if (!isImplicitGuiceComponent(clazz)) {
      return null;
    }
    try {
      if (injector.getBinding(key) != null) {
        LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
        return new GuiceInstantiatedComponentProvider(injector,clazz);
      }
    }
 catch (    ConfigurationException e) {
      LOGGER.log(Level.INFO,""String_Node_Str"" + clazz.getName(),e);
      throw e;
    }
  }
  final Scope[] scope=new Scope[1];
  i.getBinding(key).acceptScopingVisitor(new BindingScopingVisitor<Void>(){
    public Void visitEagerSingleton(){
      scope[0]=Scopes.SINGLETON;
      return null;
    }
    public Void visitScope(    Scope theScope){
      scope[0]=theScope;
      return null;
    }
    public Void visitScopeAnnotation(    Class scopeAnnotation){
      throw new UnsupportedOperationException();
    }
    public Void visitNoScoping(){
      scope[0]=Scopes.NO_SCOPE;
      return null;
    }
  }
);
  assert(scope[0] != null);
  ComponentScope componentScope=getComponentScope(scope[0]);
  LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ componentScope+ ""String_Node_Str"");
  return new GuiceManagedComponentProvider(i,componentScope,clazz);
}","public IoCComponentProvider getComponentProvider(ComponentContext cc,Class clazz){
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
  Key<?> key=Key.get(clazz);
  Injector i=findInjector(key);
  if (i == null) {
    if (!isImplicitGuiceComponent(clazz)) {
      if (isGuiceFieldOrMethodInjected(clazz)) {
        ComponentScope componentScope=getComponentScope(key,injector);
        return new GuiceManagedComponentProvider(injector,componentScope,clazz);
      }
 else {
        return null;
      }
    }
    try {
      if (injector.getBinding(key) != null) {
        LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
        return new GuiceInstantiatedComponentProvider(injector,clazz);
      }
    }
 catch (    ConfigurationException e) {
      LOGGER.log(Level.INFO,""String_Node_Str"" + clazz.getName(),e);
      throw e;
    }
  }
  ComponentScope componentScope=getComponentScope(key,i);
  LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ componentScope+ ""String_Node_Str"");
  return new GuiceManagedComponentProvider(i,componentScope,clazz);
}"
51180,"@Override protected ServletModule configure(){
  return new JerseyServletModule().path(""String_Node_Str"").initParam(ServletContainer.APPLICATION_CONFIG_CLASS,ClassNamesResourceConfig.class.getName()).initParam(ClassNamesResourceConfig.PROPERTY_CLASSNAMES,UnBoundPerRequestResource.class.getName()).bindClass(GuiceManagedClass.class);
}","@Override protected ServletModule configure(){
  return new JerseyServletModule().path(""String_Node_Str"").initParam(ServletContainer.APPLICATION_CONFIG_CLASS,ClassNamesResourceConfig.class.getName()).initParam(ClassNamesResourceConfig.PROPERTY_CLASSNAMES,UnBoundPerRequestResource.class.getName() + ""String_Node_Str"" + FieldInjectResource.class.getName()).bindClass(GuiceManagedClass.class);
}"
51181,"public IoCComponentProvider getComponentProvider(ComponentContext cc,Class clazz){
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
  Key<?> key=Key.get(clazz);
  Injector i=findInjector(key);
  if (i == null) {
    if (isGuiceConstructorInjected(clazz)) {
      try {
        if (injector.getBinding(key) != null) {
          LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
          return new GuiceInstantiatedComponentProvider(injector,clazz);
        }
      }
 catch (      ConfigurationException e) {
        LOGGER.log(Level.INFO,""String_Node_Str"" + clazz.getName(),e);
        throw e;
      }
    }
 else     if (isGuiceFieldOrMethodInjected(clazz)) {
      if (hasConstructorWithArguments(clazz)) {
        LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
        return new GuiceInjectedComponentProvider(injector);
      }
 else {
        ComponentScope componentScope=getComponentScope(key,injector);
        LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ componentScope+ ""String_Node_Str"");
        return new GuiceManagedComponentProvider(injector,componentScope,clazz);
      }
    }
 else {
      return null;
    }
  }
  ComponentScope componentScope=getComponentScope(key,i);
  LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ componentScope+ ""String_Node_Str"");
  return new GuiceManagedComponentProvider(i,componentScope,clazz);
}","public IoCComponentProvider getComponentProvider(ComponentContext cc,Class clazz){
  if (LOGGER.isLoggable(Level.FINE)) {
    LOGGER.fine(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
  }
  Key<?> key=Key.get(clazz);
  Injector i=findInjector(key);
  if (i == null) {
    if (isGuiceConstructorInjected(clazz)) {
      try {
        if (injector.getBinding(key) != null) {
          LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
          return new GuiceInstantiatedComponentProvider(injector,clazz);
        }
      }
 catch (      ConfigurationException e) {
        LOGGER.log(Level.SEVERE,""String_Node_Str"" + clazz.getName(),e);
        throw e;
      }
    }
 else     if (isGuiceFieldOrMethodInjected(clazz)) {
      LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
      return new GuiceInjectedComponentProvider(injector);
    }
 else {
      return null;
    }
  }
  ComponentScope componentScope=getComponentScope(key,i);
  LOGGER.info(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ componentScope+ ""String_Node_Str"");
  return new GuiceManagedComponentProvider(i,componentScope,clazz);
}"
51182,"public void test1(){
  DefaultResourceConfig drc=new DefaultResourceConfig(StringResource.class);
  initParams.put(ResourceConfig.PROPERTY_RESOURCE_FILTER_FACTORIES,""String_Node_Str"");
  drc.setPropertiesAndFeatures(initParams);
  startServer(drc);
  Client c=Client.create();
  ViewResource r=c.viewResource(getUri().path(""String_Node_Str"").path(""String_Node_Str"").build());
  StringController sc=r.get(StringController.class);
  Form f=new Form();
  f.add(""String_Node_Str"",""String_Node_Str"");
  assert(sc.action1(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str""));
  assert(sc.action2(""String_Node_Str"",""String_Node_Str"",f).equals(""String_Node_Str""));
}","public void test1(){
  DefaultResourceConfig drc=new DefaultResourceConfig(StringResource.class);
  initParams.put(ResourceConfig.PROPERTY_RESOURCE_FILTER_FACTORIES,""String_Node_Str"");
  drc.setPropertiesAndFeatures(initParams);
  startServer(drc);
  Client c=Client.create();
  ViewResource r=c.viewResource(getUri().path(""String_Node_Str"").path(""String_Node_Str"").build());
  StringController sc=r.get(StringController.class);
  Form f=new Form();
  f.add(""String_Node_Str"",""String_Node_Str"");
  assert(sc.action1(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str""));
  assert(sc.action2(""String_Node_Str"",""String_Node_Str"",f).equals(""String_Node_Str""));
  f=new Form();
  f.add(""String_Node_Str"",""String_Node_Str"");
  assert(sc.action11(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str""));
  assert(sc.action21(""String_Node_Str"",""String_Node_Str"",f).equals(""String_Node_Str""));
}"
51183,"private Request generateRequest(AbstractResource r,final AbstractResourceMethod m,Map<String,Param> wadlResourceParams){
  if (m.getParameters().size() == 0)   return null;
  Request wadlRequest=_wadlGenerator.createRequest(r,m);
  for (  Parameter p : m.getParameters()) {
    if (p.getSource() == Parameter.Source.ENTITY) {
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        setRepresentationForMediaType(r,m,mediaType,wadlRequest);
      }
    }
 else     if (p.getAnnotation().annotationType() == FormParam.class) {
      if (m.getSupportedInputTypes().size() == 0) {
        m.getSupportedInputTypes().add(MediaType.APPLICATION_FORM_URLENCODED_TYPE);
      }
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        final RepresentationType wadlRepresentation=setRepresentationForMediaType(r,m,mediaType,wadlRequest);
        if (getParamByName(wadlRepresentation.getParam(),p.getSourceName()) == null) {
          final Param wadlParam=generateParam(r,m,p);
          if (wadlParam != null) {
            wadlRepresentation.getParam().add(wadlParam);
          }
        }
      }
    }
 else {
      Param wadlParam=generateParam(r,m,p);
      if (wadlParam == null)       continue;
      if (wadlParam.getStyle() == ParamStyle.TEMPLATE)       wadlResourceParams.put(wadlParam.getName(),wadlParam);
 else       wadlRequest.getParam().add(wadlParam);
    }
  }
  if (wadlRequest.getRepresentation().size() + wadlRequest.getParam().size() == 0)   return null;
 else   return wadlRequest;
}","private Request generateRequest(AbstractResource r,final AbstractResourceMethod m,Map<String,Param> wadlResourceParams){
  if (m.getParameters().size() == 0)   return null;
  Request wadlRequest=_wadlGenerator.createRequest(r,m);
  for (  Parameter p : m.getParameters()) {
    if (p.getSource() == Parameter.Source.ENTITY) {
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        setRepresentationForMediaType(r,m,mediaType,wadlRequest);
      }
    }
 else     if (p.getAnnotation().annotationType() == FormParam.class) {
      List<MediaType> supportedInputTypes=m.getSupportedInputTypes();
      if (supportedInputTypes.size() == 0 || ((supportedInputTypes.size() == 1) && (supportedInputTypes.get(0).equals(MediaType.WILDCARD_TYPE)))) {
        supportedInputTypes.clear();
        supportedInputTypes.add(MediaType.APPLICATION_FORM_URLENCODED_TYPE);
      }
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        final RepresentationType wadlRepresentation=setRepresentationForMediaType(r,m,mediaType,wadlRequest);
        if (getParamByName(wadlRepresentation.getParam(),p.getSourceName()) == null) {
          final Param wadlParam=generateParam(r,m,p);
          if (wadlParam != null) {
            wadlRepresentation.getParam().add(wadlParam);
          }
        }
      }
    }
 else {
      Param wadlParam=generateParam(r,m,p);
      if (wadlParam == null)       continue;
      if (wadlParam.getStyle() == ParamStyle.TEMPLATE)       wadlResourceParams.put(wadlParam.getName(),wadlParam);
 else       wadlRequest.getParam().add(wadlParam);
    }
  }
  if (wadlRequest.getRepresentation().size() + wadlRequest.getParam().size() == 0)   return null;
 else   return wadlRequest;
}"
51184,"public String getRequestURL(){
  return context.getAbsolutePath().toString();
}","public URL getRequestURL(){
  try {
    return context.getRequestUri().toURL();
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(OAuthServerRequest.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
}"
51185,"/** 
 * Generates the HMAC-SHA1 signature of OAuth request elements.
 * @param elements the combined OAuth elements to sign.
 * @param secrets the shared secrets used to sign the request.
 * @return the OAuth signature, in base64-encoded form.
 */
public String sign(String elements,OAuthSecrets secrets){
  Mac mac;
  try {
    mac=Mac.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  StringBuffer buf=new StringBuffer();
  String secret=secrets.getConsumerSecret();
  if (secret != null) {
    buf.append(URLCodec.encode(secret));
  }
  buf.append('&');
  secret=secrets.getTokenSecret();
  if (secret != null) {
    buf.append(URLCodec.encode(secret));
  }
  byte[] key;
  try {
    key=buf.toString().getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    throw new IllegalStateException(uee);
  }
  SecretKeySpec spec=new SecretKeySpec(key,SIGNATURE_ALGORITHM);
  try {
    mac.init(spec);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  return Base64.encode(mac.doFinal(elements.getBytes()));
}","/** 
 * Generates the HMAC-SHA1 signature of OAuth request elements.
 * @param elements the combined OAuth elements to sign.
 * @param secrets the shared secrets used to sign the request.
 * @return the OAuth signature, in base64-encoded form.
 */
public String sign(String elements,OAuthSecrets secrets){
  Mac mac;
  try {
    mac=Mac.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  StringBuffer buf=new StringBuffer();
  String secret=secrets.getConsumerSecret();
  if (secret != null) {
    buf.append(UriComponent.encode(secret,UriComponent.Type.QUERY));
  }
  buf.append('&');
  secret=secrets.getTokenSecret();
  if (secret != null) {
    buf.append(UriComponent.encode(secret,UriComponent.Type.QUERY));
  }
  byte[] key;
  try {
    key=buf.toString().getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    throw new IllegalStateException(uee);
  }
  SecretKeySpec spec=new SecretKeySpec(key,SIGNATURE_ALGORITHM);
  try {
    mac.init(spec);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  return Base64.encode(mac.doFinal(elements.getBytes()));
}"
51186,"/** 
 * Writes the OAuth parameters to a request, as an Authorization header.
 * @param request the request to write OAuth parameters to.
 * @return this parameters object.
 */
public OAuthParameters writeRequest(OAuthRequest request){
  StringBuffer buf=new StringBuffer(SCHEME);
  boolean comma=false;
  for (  String key : keySet()) {
    String value=get(key);
    if (value == null) {
      continue;
    }
    buf.append(comma ? ""String_Node_Str"" : ""String_Node_Str"").append(URLCodec.encode(key));
    buf.append(""String_Node_Str"").append(URLCodec.encode(value)).append('""');
    comma=true;
  }
  request.addHeaderValue(AUTHORIZATION_HEADER,buf.toString());
  return this;
}","/** 
 * Writes the OAuth parameters to a request, as an Authorization header.
 * @param request the request to write OAuth parameters to.
 * @return this parameters object.
 */
public OAuthParameters writeRequest(OAuthRequest request){
  StringBuffer buf=new StringBuffer(SCHEME);
  boolean comma=false;
  for (  String key : keySet()) {
    String value=get(key);
    if (value == null) {
      continue;
    }
    buf.append(comma ? ""String_Node_Str"" : ""String_Node_Str"").append(UriComponent.encode(key,UriComponent.Type.QUERY));
    buf.append(""String_Node_Str"").append(UriComponent.encode(value,UriComponent.Type.QUERY)).append('""');
    comma=true;
  }
  request.addHeaderValue(AUTHORIZATION_HEADER,buf.toString());
  return this;
}"
51187,"/** 
 * Reads a request for OAuth parameters, and populates this object.
 * @param request the request to read OAuth parameters from.
 * @return this parameters object.
 */
public OAuthParameters readRequest(OAuthRequest request){
  for (  String param : request.getParameterNames()) {
    if (!param.startsWith(""String_Node_Str"")) {
      continue;
    }
    List values=request.getParameterValues(param);
    if (values == null) {
      continue;
    }
    Iterator<String> i=values.iterator();
    if (!i.hasNext()) {
      continue;
    }
    put(param,i.next());
  }
  List<String> headers=request.getHeaderValues(AUTHORIZATION_HEADER);
  if (headers == null) {
    return this;
  }
  for (  String header : headers) {
    if (!header.regionMatches(true,0,SCHEME_SPACE,0,SCHEME_SPACE.length())) {
      continue;
    }
    for (    String param : header.substring(SCHEME_SPACE.length()).trim().split(""String_Node_Str"")) {
      String[] nv=param.split(""String_Node_Str"",2);
      if (nv.length != 2) {
        continue;
      }
      put(URLCodec.decode(nv[0].trim()),URLCodec.decode(dequote(nv[1].trim())));
    }
  }
  return this;
}","/** 
 * Reads a request for OAuth parameters, and populates this object.
 * @param request the request to read OAuth parameters from.
 * @return this parameters object.
 */
public OAuthParameters readRequest(OAuthRequest request){
  for (  String param : request.getParameterNames()) {
    if (!param.startsWith(""String_Node_Str"")) {
      continue;
    }
    List values=request.getParameterValues(param);
    if (values == null) {
      continue;
    }
    Iterator<String> i=values.iterator();
    if (!i.hasNext()) {
      continue;
    }
    put(param,i.next());
  }
  List<String> headers=request.getHeaderValues(AUTHORIZATION_HEADER);
  if (headers == null) {
    return this;
  }
  for (  String header : headers) {
    if (!header.regionMatches(true,0,SCHEME_SPACE,0,SCHEME_SPACE.length())) {
      continue;
    }
    for (    String param : header.substring(SCHEME_SPACE.length()).trim().split(""String_Node_Str"")) {
      String[] nv=param.split(""String_Node_Str"",2);
      if (nv.length != 2) {
        continue;
      }
      put(UriComponent.decode(nv[0].trim(),UriComponent.Type.QUERY),UriComponent.decode(dequote(nv[1].trim()),UriComponent.Type.QUERY));
    }
  }
  return this;
}"
51188,"/** 
 * Returns the URL of the request, including protocol, server name, optional port number, and server path.
 * @return the request URL.
 */
public String getRequestURL();","/** 
 * Returns the URL of the request, including protocol, server name, optional port number, and server path.
 * @return the request URL.
 */
public URL getRequestURL();"
51189,"/** 
 * Collects, sorts and concetenates the request parameters into a normalized string, per section 9.1.1. of the OAuth 1.0 specification.
 * @param request the request to retreive parameters from.
 * @param params the OAuth authorization parameters to retrieve parameters from.
 * @return the normalized parameters string.
 */
private static String normalizeParameters(OAuthRequest request,OAuthParameters params){
  ArrayList<String> list=new ArrayList<String>();
  for (  String key : params.keySet()) {
    if (key.equals(OAuthParameters.REALM) || key.equals(OAuthParameters.SIGNATURE)) {
      continue;
    }
    String value=params.get(key);
    if (value != null) {
      list.add(URLCodec.encode(key) + '=' + URLCodec.encode(value));
    }
  }
  for (  String key : request.getParameterNames()) {
    if (key.startsWith(""String_Node_Str"") && params.containsKey(key)) {
      continue;
    }
    List<String> values=request.getParameterValues(key);
    if (values != null) {
      for (      String value : values) {
        list.add(URLCodec.encode(key) + '=' + URLCodec.encode(value));
      }
    }
  }
  Collections.sort(list);
  StringBuffer buf=new StringBuffer();
  for (Iterator<String> i=list.iterator(); i.hasNext(); ) {
    buf.append(i.next());
    if (i.hasNext()) {
      buf.append('&');
    }
  }
  return buf.toString();
}","/** 
 * Collects, sorts and concetenates the request parameters into a normalized string, per section 9.1.1. of the OAuth 1.0 specification.
 * @param request the request to retreive parameters from.
 * @param params the OAuth authorization parameters to retrieve parameters from.
 * @return the normalized parameters string.
 */
private static String normalizeParameters(OAuthRequest request,OAuthParameters params){
  ArrayList<String> list=new ArrayList<String>();
  for (  String key : params.keySet()) {
    if (key.equals(OAuthParameters.REALM) || key.equals(OAuthParameters.SIGNATURE)) {
      continue;
    }
    String value=params.get(key);
    if (value != null) {
      list.add(UriComponent.encode(key,UriComponent.Type.QUERY) + '=' + UriComponent.encode(value,UriComponent.Type.QUERY));
    }
  }
  for (  String key : request.getParameterNames()) {
    if (key.startsWith(""String_Node_Str"") && params.containsKey(key)) {
      continue;
    }
    List<String> values=request.getParameterValues(key);
    if (values != null) {
      for (      String value : values) {
        list.add(UriComponent.encode(key,UriComponent.Type.QUERY) + '=' + UriComponent.encode(value,UriComponent.Type.QUERY));
      }
    }
  }
  Collections.sort(list);
  StringBuffer buf=new StringBuffer();
  for (Iterator<String> i=list.iterator(); i.hasNext(); ) {
    buf.append(i.next());
    if (i.hasNext()) {
      buf.append('&');
    }
  }
  return buf.toString();
}"
51190,"/** 
 * Constructs the request URL, per section 9.1.2 of the OAuth 1.0 specification.
 * @param request the incoming request construct URL from.
 * @return the constructed URL.
 */
private static String constructRequestURL(OAuthRequest request) throws OAuthSignatureException {
  URL url;
  try {
    url=new URL(request.getRequestURL());
  }
 catch (  MalformedURLException mue) {
    throw new OAuthSignatureException(mue);
  }
  StringBuffer buf=new StringBuffer(url.getProtocol()).append(""String_Node_Str"").append(url.getHost().toLowerCase());
  int port=url.getPort();
  if (port > 0 && port != url.getDefaultPort()) {
    buf.append(':').append(port);
  }
  buf.append(url.getPath());
  return buf.toString();
}","/** 
 * Constructs the request URI, per section 9.1.2 of the OAuth 1.0 specification.
 * @param request the incoming request to construct the URI from.
 * @return the constructed URI.
 */
private static URI constructRequestURL(OAuthRequest request) throws OAuthSignatureException {
  try {
    URL url=request.getRequestURL();
    if (url == null)     throw new OAuthSignatureException();
    StringBuffer buf=new StringBuffer(url.getProtocol()).append(""String_Node_Str"").append(url.getHost().toLowerCase());
    int port=url.getPort();
    if (port > 0 && port != url.getDefaultPort()) {
      buf.append(':').append(port);
    }
    buf.append(url.getPath());
    return new URI(buf.toString());
  }
 catch (  URISyntaxException mue) {
    throw new OAuthSignatureException(mue);
  }
}"
51191,"/** 
 * Assembles request elements for which a digital signature is to be generated/verified, per section 9.1.3 of the OAuth 1.0 specification.
 * @param request the request from which to assemble elements.
 * @param params the OAuth authorization parameters from which to assemble elements.
 * @return the concetenated elements, ready to sign/verify
 */
private static String elements(OAuthRequest request,OAuthParameters params) throws OAuthSignatureException {
  StringBuffer buf=new StringBuffer(URLCodec.encode(request.getRequestMethod().toUpperCase()));
  buf.append('&').append(URLCodec.encode(constructRequestURL(request)));
  buf.append('&').append(URLCodec.encode(normalizeParameters(request,params)));
  return buf.toString();
}","/** 
 * Assembles request elements for which a digital signature is to be generated/verified, per section 9.1.3 of the OAuth 1.0 specification.
 * @param request the request from which to assemble elements.
 * @param params the OAuth authorization parameters from which to assemble elements.
 * @return the concetenated elements, ready to sign/verify
 */
private static String elements(OAuthRequest request,OAuthParameters params) throws OAuthSignatureException {
  StringBuffer buf=new StringBuffer(request.getRequestMethod().toUpperCase());
  URI uri=constructRequestURL(request);
  String tp=uri.getScheme();
  buf.append('&').append(UriComponent.encode(tp,UriComponent.Type.SCHEME));
  tp=uri.getAuthority();
  buf.append(""String_Node_Str"").append(UriComponent.encode(tp,UriComponent.Type.AUTHORITY));
  tp=uri.getPath();
  buf.append(UriComponent.encode(tp,UriComponent.Type.PATH_SEGMENT));
  buf.append('&').append(UriComponent.encode(normalizeParameters(request,params),UriComponent.Type.QUERY_PARAM));
  System.err.println(""String_Node_Str"" + buf);
  return buf.toString();
}"
51192,"public String getRequestURL(){
  return requestURL;
}","public URL getRequestURL(){
  try {
    return new URL(requestURL);
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(DummyRequest.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
}"
51193,"public String getRequestURL(){
  final URI uri=clientRequest.getURI();
  return uri.getScheme() + ""String_Node_Str"" + uri.getAuthority()+ uri.getPath();
}","public URL getRequestURL(){
  try {
    final URI uri=clientRequest.getURI();
    return uri.toURL();
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(RequestWrapper.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
}"
51194,"public ContainerRequest filter(ContainerRequest request){
  if (resourceConfig.getFeature(ResourceConfig.FEATURE_NORMALIZE_URI)) {
    final URI uri=request.getRequestUri();
    final URI normalizedUri=UriHelper.normalize(uri,!resourceConfig.getFeature(ResourceConfig.FEATURE_CANONICALIZE_URI_PATH));
    if (uri != normalizedUri && resourceConfig.getFeature(ResourceConfig.FEATURE_REDIRECT)) {
      throw new WebApplicationException(Response.temporaryRedirect(normalizedUri).build());
    }
  }
  return request;
}","public ContainerRequest filter(ContainerRequest request){
  if (resourceConfig.getFeature(ResourceConfig.FEATURE_NORMALIZE_URI)) {
    final URI uri=request.getRequestUri();
    final URI normalizedUri=UriHelper.normalize(uri,!resourceConfig.getFeature(ResourceConfig.FEATURE_CANONICALIZE_URI_PATH));
    if (uri != normalizedUri) {
      if (resourceConfig.getFeature(ResourceConfig.FEATURE_REDIRECT)) {
        throw new WebApplicationException(Response.temporaryRedirect(normalizedUri).build());
      }
 else {
        final URI baseUri=UriHelper.normalize(request.getBaseUri(),!resourceConfig.getFeature(ResourceConfig.FEATURE_CANONICALIZE_URI_PATH));
        request.setUris(baseUri,normalizedUri);
      }
    }
  }
  return request;
}"
51195,"/** 
 * Creates an instance of   {@link WebAppDescriptor} from the passed {@link Builder}instance.
 * @param {@link Builder} instance
 */
private WebAppDescriptor(Builder b){
  super(b);
  this.initParams=(b.initParams == null) ? new HashMap<String,String>() : b.initParams;
  this.contextParams=(b.contextParams == null) ? new HashMap<String,String>() : b.contextParams;
  this.servletClass=b.servletClass;
  this.filterClass=b.filterClass;
  this.contextPath=b.contextPath;
  this.servletPath=b.servletPath;
  this.contextListenerClass=b.contextListenerClass;
}","/** 
 * Creates an instance of   {@link WebAppDescriptor} from the passed {@link Builder}instance.
 * @param {@link Builder} instance
 */
private WebAppDescriptor(Builder b){
  super(b);
  this.initParams=(b.initParams == null) ? new HashMap<String,String>() : b.initParams;
  this.contextParams=(b.contextParams == null) ? new HashMap<String,String>() : b.contextParams;
  this.servletClass=b.servletClass;
  this.filterClass=b.filterClass;
  this.contextPath=b.contextPath;
  this.servletPath=b.servletPath;
  this.contextListenerClass=b.contextListenerClass;
  this.contextAttributeListenerClass=b.contextAttributeListenerClass;
  this.requestListenerClass=b.requestListenerClass;
  this.requestAttributeListenerClass=b.requestAttributeListenerClass;
}"
51196,"@Override protected void reset(){
  super.reset();
  this.initParams=null;
  this.contextParams=null;
  this.servletClass=ServletContainer.class;
  this.filterClass=null;
  this.contextListenerClass=null;
  this.contextPath=""String_Node_Str"";
  this.servletPath=""String_Node_Str"";
}","@Override protected void reset(){
  super.reset();
  this.initParams=null;
  this.contextParams=null;
  this.servletClass=ServletContainer.class;
  this.filterClass=null;
  this.contextListenerClass=null;
  this.contextAttributeListenerClass=null;
  this.requestListenerClass=null;
  this.requestAttributeListenerClass=null;
  this.contextPath=""String_Node_Str"";
  this.servletPath=""String_Node_Str"";
}"
51197,"public WebXmlGenerator(WebAppDescriptor applicationDescriptor){
  webAppType=new WebAppType();
  Map<String,String> contextParams=applicationDescriptor.getContextParams();
  if (contextParams != null && contextParams.size() > 0) {
    List<ContextParamType> contextParameters=new ArrayList<ContextParamType>();
    Iterator<String> contextParamIterator=contextParams.keySet().iterator();
    String paramName=""String_Node_Str"";
    String paramValue;
    ContextParamType contextParam;
    while (contextParamIterator.hasNext()) {
      paramName=contextParamIterator.next();
      paramValue=contextParams.get(paramName);
      contextParam=new ContextParamType();
      contextParam.setParamName(paramName);
      contextParam.setParamValue(paramValue);
      contextParameters.add(contextParam);
    }
    webAppType.setContextParam(contextParameters);
  }
  if (applicationDescriptor.getContextListenerClass() != null && !applicationDescriptor.getContextListenerClass().getName().equals(""String_Node_Str"")) {
    ListenerType listener=new ListenerType();
    listener.setListenerClass(applicationDescriptor.getContextListenerClass().getName());
    webAppType.setListener(listener);
  }
  ServletType servlet=new ServletType();
  servlet.setServletName(""String_Node_Str"");
  servlet.setServletClass(applicationDescriptor.getServletClass().getName());
  Map<String,String> initParams=applicationDescriptor.getInitParams();
  if (initParams != null) {
    List<ServletInitParamType> servletInitParams=new ArrayList<ServletInitParamType>();
    Iterator<String> initParamIterator=initParams.keySet().iterator();
    ServletInitParamType servletInitParam;
    String paramName;
    while (initParamIterator.hasNext()) {
      paramName=initParamIterator.next();
      servletInitParam=new ServletInitParamType(paramName,initParams.get(paramName));
      servletInitParams.add(servletInitParam);
    }
    servlet.setInitParam(servletInitParams);
  }
  servlet.setLoadOnStartup(""String_Node_Str"");
  webAppType.setServletType(servlet);
  ServletMappingType servletMapping=new ServletMappingType();
  servletMapping.setServletName(""String_Node_Str"");
  String urlPattern=normalizedUrlPattern(applicationDescriptor.getServletPath());
  servletMapping.setUrlPattern(urlPattern);
  webAppType.setServletMapping(servletMapping);
}","public WebXmlGenerator(WebAppDescriptor applicationDescriptor){
  webAppType=new WebAppType();
  Map<String,String> contextParams=applicationDescriptor.getContextParams();
  if (contextParams != null && contextParams.size() > 0) {
    List<ContextParamType> contextParameters=new ArrayList<ContextParamType>();
    Iterator<String> contextParamIterator=contextParams.keySet().iterator();
    String paramName=""String_Node_Str"";
    String paramValue;
    ContextParamType contextParam;
    while (contextParamIterator.hasNext()) {
      paramName=contextParamIterator.next();
      paramValue=contextParams.get(paramName);
      contextParam=new ContextParamType();
      contextParam.setParamName(paramName);
      contextParam.setParamValue(paramValue);
      contextParameters.add(contextParam);
    }
    webAppType.setContextParam(contextParameters);
  }
  List<ListenerType> listeners=new ArrayList<ListenerType>();
  if (applicationDescriptor.getContextListenerClass() != null && !applicationDescriptor.getContextListenerClass().getName().equals(""String_Node_Str"")) {
    ListenerType listener=new ListenerType();
    listener.setListenerClass(applicationDescriptor.getContextListenerClass().getName());
    listeners.add(listener);
  }
  if (applicationDescriptor.getContextAttributeListenerClass() != null && !applicationDescriptor.getContextAttributeListenerClass().getName().equals(""String_Node_Str"")) {
    ListenerType listener=new ListenerType();
    listener.setListenerClass(applicationDescriptor.getContextAttributeListenerClass().getName());
    listeners.add(listener);
  }
  if (applicationDescriptor.getRequestListenerClass() != null && !applicationDescriptor.getRequestListenerClass().getName().equals(""String_Node_Str"")) {
    ListenerType listener=new ListenerType();
    listener.setListenerClass(applicationDescriptor.getRequestListenerClass().getName());
    listeners.add(listener);
  }
  if (applicationDescriptor.getRequestAttributeListenerClass() != null && !applicationDescriptor.getRequestAttributeListenerClass().getName().equals(""String_Node_Str"")) {
    ListenerType listener=new ListenerType();
    listener.setListenerClass(applicationDescriptor.getRequestAttributeListenerClass().getName());
    listeners.add(listener);
  }
  if (listeners.size() > 0) {
    webAppType.setListeners(listeners);
  }
  ServletType servlet=new ServletType();
  servlet.setServletName(""String_Node_Str"");
  servlet.setServletClass(applicationDescriptor.getServletClass().getName());
  Map<String,String> initParams=applicationDescriptor.getInitParams();
  if (initParams != null) {
    List<ServletInitParamType> servletInitParams=new ArrayList<ServletInitParamType>();
    Iterator<String> initParamIterator=initParams.keySet().iterator();
    ServletInitParamType servletInitParam;
    String paramName;
    while (initParamIterator.hasNext()) {
      paramName=initParamIterator.next();
      servletInitParam=new ServletInitParamType(paramName,initParams.get(paramName));
      servletInitParams.add(servletInitParam);
    }
    servlet.setInitParam(servletInitParams);
  }
  servlet.setLoadOnStartup(""String_Node_Str"");
  webAppType.setServletType(servlet);
  ServletMappingType servletMapping=new ServletMappingType();
  servletMapping.setServletName(""String_Node_Str"");
  String urlPattern=normalizedUrlPattern(applicationDescriptor.getServletPath());
  servletMapping.setUrlPattern(urlPattern);
  webAppType.setServletMapping(servletMapping);
}"
51198,"/** 
 * Instantiates the Grizzly Web Server
 */
private void instantiateGrizzlyWebServer(){
  webServer=new GrizzlyWebServer(baseUri.getPort());
  ServletAdapter sa=new ServletAdapter();
  Servlet servletInstance;
  if (servletClass != null) {
    try {
      servletInstance=(Servlet)servletClass.newInstance();
    }
 catch (    InstantiationException ex) {
      throw new TestContainerException(ex);
    }
catch (    IllegalAccessException ex) {
      throw new TestContainerException(ex);
    }
    sa.setServletInstance(servletInstance);
  }
  if (!contextListenerClassName.equals(""String_Node_Str"")) {
    sa.addServletListener(contextListenerClassName);
  }
  if (filterClass != null) {
    try {
      sa.addFilter((Filter)filterClass.newInstance(),""String_Node_Str"",initParams);
    }
 catch (    InstantiationException ex) {
      throw new TestContainerException(ex);
    }
catch (    IllegalAccessException ex) {
      throw new TestContainerException(ex);
    }
  }
  for (  String contextParamName : contextParams.keySet()) {
    sa.addContextParameter(contextParamName,contextParams.get(contextParamName));
  }
  for (  String initParamName : initParams.keySet()) {
    sa.addInitParameter(initParamName,initParams.get(initParamName));
  }
  if (contextPath != null && contextPath.length() > 0) {
    if (!contextPath.startsWith(""String_Node_Str"")) {
      sa.setContextPath(""String_Node_Str"" + contextPath);
    }
 else {
      sa.setContextPath(contextPath);
    }
  }
  if (servletPath != null && servletPath.length() > 0) {
    if (!servletPath.startsWith(""String_Node_Str"")) {
      sa.setServletPath(""String_Node_Str"" + servletPath);
    }
 else {
      sa.setServletPath(servletPath);
    }
  }
  String[] mapping=null;
  webServer.addGrizzlyAdapter(sa,mapping);
}","/** 
 * Instantiates the Grizzly Web Server
 */
private void instantiateGrizzlyWebServer(){
  webServer=new GrizzlyWebServer(baseUri.getPort());
  ServletAdapter sa=new ServletAdapter();
  Servlet servletInstance;
  if (servletClass != null) {
    try {
      servletInstance=(Servlet)servletClass.newInstance();
    }
 catch (    InstantiationException ex) {
      throw new TestContainerException(ex);
    }
catch (    IllegalAccessException ex) {
      throw new TestContainerException(ex);
    }
    sa.setServletInstance(servletInstance);
  }
  if (!contextListenerClassName.equals(""String_Node_Str"")) {
    sa.addServletListener(contextListenerClassName);
  }
  if (!contextAttributeListenerClassName.equals(""String_Node_Str"")) {
    sa.addServletListener(contextAttributeListenerClassName);
  }
  if (!requestListenerClassName.equals(""String_Node_Str"")) {
    sa.addServletListener(requestListenerClassName);
  }
  if (!requestAttributeListenerClassName.equals(""String_Node_Str"")) {
    sa.addServletListener(requestAttributeListenerClassName);
  }
  if (filterClass != null) {
    try {
      sa.addFilter((Filter)filterClass.newInstance(),""String_Node_Str"",initParams);
    }
 catch (    InstantiationException ex) {
      throw new TestContainerException(ex);
    }
catch (    IllegalAccessException ex) {
      throw new TestContainerException(ex);
    }
  }
  for (  String contextParamName : contextParams.keySet()) {
    sa.addContextParameter(contextParamName,contextParams.get(contextParamName));
  }
  for (  String initParamName : initParams.keySet()) {
    sa.addInitParameter(initParamName,initParams.get(initParamName));
  }
  if (contextPath != null && contextPath.length() > 0) {
    if (!contextPath.startsWith(""String_Node_Str"")) {
      sa.setContextPath(""String_Node_Str"" + contextPath);
    }
 else {
      sa.setContextPath(contextPath);
    }
  }
  if (servletPath != null && servletPath.length() > 0) {
    if (!servletPath.startsWith(""String_Node_Str"")) {
      sa.setServletPath(""String_Node_Str"" + servletPath);
    }
 else {
      sa.setServletPath(servletPath);
    }
  }
  String[] mapping=null;
  webServer.addGrizzlyAdapter(sa,mapping);
}"
51199,"/** 
 * Creates an instance of   {@link GrizzlyWebTestContainer}
 * @param Base URI of the application
 * @param An instance of {@link WebAppDescriptor}
 */
private GrizzlyWebTestContainer(URI baseUri,WebAppDescriptor ad){
  this.baseUri=UriBuilder.fromUri(baseUri).path(ad.getContextPath()).path(ad.getServletPath()).build();
  LOGGER.info(""String_Node_Str"" + this.baseUri);
  this.contextPath=ad.getContextPath();
  this.servletPath=ad.getServletPath();
  this.servletClass=ad.getServletClass();
  this.filterClass=ad.getFilterClass();
  this.initParams=ad.getInitParams();
  this.contextParams=ad.getContextParams();
  this.contextListenerClassName=(ad.getContextListenerClass() != null) ? ad.getContextListenerClass().getName() : ""String_Node_Str"";
  instantiateGrizzlyWebServer();
}","/** 
 * Creates an instance of   {@link GrizzlyWebTestContainer}
 * @param Base URI of the application
 * @param An instance of {@link WebAppDescriptor}
 */
private GrizzlyWebTestContainer(URI baseUri,WebAppDescriptor ad){
  this.baseUri=UriBuilder.fromUri(baseUri).path(ad.getContextPath()).path(ad.getServletPath()).build();
  LOGGER.info(""String_Node_Str"" + this.baseUri);
  this.contextPath=ad.getContextPath();
  this.servletPath=ad.getServletPath();
  this.servletClass=ad.getServletClass();
  this.filterClass=ad.getFilterClass();
  this.initParams=ad.getInitParams();
  this.contextParams=ad.getContextParams();
  this.contextListenerClassName=(ad.getContextListenerClass() != null) ? ad.getContextListenerClass().getName() : ""String_Node_Str"";
  this.contextAttributeListenerClassName=(ad.getContextAttributeListenerClass() != null) ? ad.getContextAttributeListenerClass().getName() : ""String_Node_Str"";
  this.requestListenerClassName=(ad.getRequestListenerClass() != null) ? ad.getRequestListenerClass().getName() : ""String_Node_Str"";
  this.requestAttributeListenerClassName=(ad.getRequestAttributeListenerClass() != null) ? ad.getRequestAttributeListenerClass().getName() : ""String_Node_Str"";
  instantiateGrizzlyWebServer();
}"
51200,"public Stax2JacksonWriter(JsonGenerator generator,JSONConfiguration config){
  this.attrsWithPrefix=config.isUsingPrefixesAtNaturalAttributes();
  this.generator=generator;
}","public Stax2JacksonWriter(JsonGenerator generator,JSONConfiguration config){
  this.attrsWithPrefix=config.isUsingPrefixesAtNaturalAttributes();
  this.generator=JacksonStringMergingGenerator.createGenerator(generator);
}"
51201,"/** 
 * Generates the HMAC-SHA1 signature of OAuth request elements.
 * @param elements the combined OAuth elements to sign.
 * @param secrets the shared secrets used to sign the request.
 * @return the OAuth signature, in base64-encoded form.
 */
public String sign(String elements,OAuthSecrets secrets){
  Mac mac;
  try {
    mac=Mac.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  StringBuffer buf=new StringBuffer();
  String secret=secrets.getConsumerSecret();
  if (secret != null) {
    buf.append(secret);
  }
  buf.append('&');
  secret=secrets.getTokenSecret();
  if (secret != null) {
    buf.append(secret);
  }
  byte[] key;
  try {
    key=buf.toString().getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    throw new IllegalStateException(uee);
  }
  SecretKeySpec spec=new SecretKeySpec(key,SIGNATURE_ALGORITHM);
  try {
    mac.init(spec);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  return Base64.encode(mac.doFinal(elements.getBytes()));
}","/** 
 * Generates the HMAC-SHA1 signature of OAuth request elements.
 * @param elements the combined OAuth elements to sign.
 * @param secrets the shared secrets used to sign the request.
 * @return the OAuth signature, in base64-encoded form.
 */
public String sign(String elements,OAuthSecrets secrets){
  Mac mac;
  try {
    mac=Mac.getInstance(SIGNATURE_ALGORITHM);
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new IllegalStateException(nsae);
  }
  StringBuffer buf=new StringBuffer();
  String secret=secrets.getConsumerSecret();
  if (secret != null) {
    buf.append(URLCodec.encode(secret));
  }
  buf.append('&');
  secret=secrets.getTokenSecret();
  if (secret != null) {
    buf.append(URLCodec.encode(secret));
  }
  byte[] key;
  try {
    key=buf.toString().getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException uee) {
    throw new IllegalStateException(uee);
  }
  SecretKeySpec spec=new SecretKeySpec(key,SIGNATURE_ALGORITHM);
  try {
    mac.init(spec);
  }
 catch (  InvalidKeyException ike) {
    throw new IllegalStateException(ike);
  }
  return Base64.encode(mac.doFinal(elements.getBytes()));
}"
51202,"@ProbeListener(""String_Node_Str"") public void requestEnd(){
  for (  AbstractRuleEvent ruleEvent : ruleEvents.get()) {
    ruleEvent.process(currentApplicationStatProvider.get());
  }
}","@ProbeListener(""String_Node_Str"") public void requestEnd(){
  for (  AbstractRuleEvent ruleEvent : ruleEvents.get()) {
    ruleEvent.process(currentApplicationStatProvider.get());
  }
  ruleEvents.get().clear();
}"
51203,"public void writeEndElement() throws XMLStreamException {
  try {
    if (null != processingStack.get(depth).lastElementWriter) {
      if (processingStack.get(depth).lastIsArray) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
 else {
        if (isArrayElement(processingStack.get(depth).lastName)) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=true;
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
 else {
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        }
      }
    }
    if (processingStack.get(depth).writer.isEmpty) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
 else     if ((null == processingStack.get(depth).lastWasPrimitive) || !processingStack.get(depth).lastWasPrimitive) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
    processingStack.get(depth - 1).lastName=processingStack.get(depth - 1).currentName;
    processingStack.get(depth - 1).lastWasPrimitive=false;
    processingStack.get(depth - 1).lastElementWriter=processingStack.get(depth).writer;
    pollStack();
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public void writeEndElement() throws XMLStreamException {
  try {
    if (null != processingStack.get(depth).lastElementWriter) {
      if (processingStack.get(depth).lastIsArray) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
 else {
        if (isArrayElement(processingStack.get(depth).lastName)) {
          processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
          processingStack.get(depth).lastIsArray=true;
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
 else {
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        }
      }
    }
    if (processingStack.get(depth).writer.isEmpty) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
 else     if ((null == processingStack.get(depth).lastWasPrimitive) || !processingStack.get(depth).lastWasPrimitive) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
    processingStack.get(depth - 1).lastName=processingStack.get(depth - 1).currentName;
    processingStack.get(depth - 1).lastWasPrimitive=false;
    processingStack.get(depth - 1).lastElementWriter=processingStack.get(depth).writer;
    pollStack();
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
51204,"public void writeStartElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {
  String effectiveName=getEffectiveName(namespaceURI,localName);
  processingStack.get(depth).isNotEmpty=true;
  processingStack.get(depth).currentName=effectiveName;
  try {
    boolean isNextArrayElement=processingStack.get(depth).currentName.equals(processingStack.get(depth).lastName);
    if (!isNextArrayElement) {
      if (isArrayElement(processingStack.get(depth).lastName)) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).lastIsArray=true;
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
      }
 else {
        if (null != processingStack.get(depth).lastElementWriter) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
            processingStack.get(depth).writer.write(""String_Node_Str"");
          }
 else {
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          }
        }
        processingStack.get(depth).lastIsArray=false;
      }
      if (null != processingStack.get(depth).lastName) {
        if (processingStack.get(depth).lastIsArray) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=false;
        }
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      if (null == processingStack.get(depth).lastWasPrimitive) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      processingStack.get(depth).writer.write(""String_Node_Str"" + effectiveName + ""String_Node_Str"");
    }
 else {
      processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
      processingStack.get(depth).lastIsArray=true;
      processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
    }
    depth++;
    processingStack.add(depth,createProcessingState());
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public void writeStartElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {
  String effectiveName=getEffectiveName(namespaceURI,localName);
  processingStack.get(depth).isNotEmpty=true;
  processingStack.get(depth).currentName=effectiveName;
  try {
    boolean isNextArrayElement=processingStack.get(depth).currentName.equals(processingStack.get(depth).lastName);
    if (!isNextArrayElement) {
      if (isArrayElement(processingStack.get(depth).lastName)) {
        processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
        processingStack.get(depth).lastIsArray=true;
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
      }
 else {
        if (null != processingStack.get(depth).lastElementWriter) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
            processingStack.get(depth).writer.write(""String_Node_Str"");
          }
 else {
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          }
        }
        processingStack.get(depth).lastIsArray=false;
      }
      if (null != processingStack.get(depth).lastName) {
        if (processingStack.get(depth).lastIsArray) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=false;
        }
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      if (null == processingStack.get(depth).lastWasPrimitive) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      processingStack.get(depth).writer.write(""String_Node_Str"" + effectiveName + ""String_Node_Str"");
    }
 else {
      processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
      processingStack.get(depth).lastIsArray=true;
      processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
    }
    depth++;
    processingStack.add(depth,createProcessingState());
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
51205,"public Cat(String name){
  super(name);
}","public Cat(String name,String nickName){
  super(name);
  this.nickName=nickName;
}"
51206,"@Override public String toString(){
  return String.format(""String_Node_Str"",super.toString());
}","@Override public String toString(){
  return String.format(""String_Node_Str"",super.toString(),this.nickName);
}"
51207,"private JSONConfiguration(Builder b){
  notation=b.notation;
  arrays=b.arrays;
  attrsAsElems=b.attrsAsElems;
  nonStrings=b.nonStrings;
  rootUnwrapping=b.rootUnwrapping;
  humanReadableFormating=b.humanReadableFormatting;
  jsonXml2JsonNs=b.jsonXml2JsonNs;
}","private JSONConfiguration(Builder b){
  notation=b.notation;
  arrays=b.arrays;
  attrsAsElems=b.attrsAsElems;
  nonStrings=b.nonStrings;
  rootUnwrapping=b.rootUnwrapping;
  humanReadableFormating=b.humanReadableFormatting;
  jsonXml2JsonNs=b.jsonXml2JsonNs;
  usePrefixAtNaturalAttributes=b.usePrefixAtNaturalAttributes;
}"
51208,"public static XMLStreamWriter createWriter(Writer writer,JSONConfiguration config,boolean writingList) throws IOException {
switch (config.getNotation()) {
case NATURAL:
    final JsonGenerator rawGenerator=new JsonFactory().createJsonGenerator(writer);
  if (config.isHumanReadableFormatting()) {
    rawGenerator.useDefaultPrettyPrinter();
  }
final JsonGenerator bodyGenerator=writingList ? JacksonArrayWrapperGenerator.createArrayWrapperGenerator(rawGenerator) : rawGenerator;
if (config.isRootUnwrapping()) {
return new Stax2JacksonWriter(JacksonRootStrippingGenerator.createRootStrippingGenerator(bodyGenerator));
}
 else {
return new Stax2JacksonWriter(bodyGenerator);
}
case MAPPED:
return JsonXmlStreamWriter.createWriter(writer,config);
case BADGERFISH:
return new BadgerFishXMLStreamWriter(writer);
case MAPPED_JETTISON:
Configuration jmConfig;
if (null == config.getXml2JsonNs()) {
jmConfig=new Configuration();
}
 else {
jmConfig=new Configuration(config.getXml2JsonNs());
}
return new MappedXMLStreamWriter(new MappedNamespaceConvention(jmConfig),writer);
default :
return null;
}
}","public static XMLStreamWriter createWriter(Writer writer,JSONConfiguration config,boolean writingList) throws IOException {
switch (config.getNotation()) {
case NATURAL:
    final JsonGenerator rawGenerator=new JsonFactory().createJsonGenerator(writer);
  if (config.isHumanReadableFormatting()) {
    rawGenerator.useDefaultPrettyPrinter();
  }
final JsonGenerator bodyGenerator=writingList ? JacksonArrayWrapperGenerator.createArrayWrapperGenerator(rawGenerator) : rawGenerator;
if (config.isRootUnwrapping()) {
return new Stax2JacksonWriter(JacksonRootStrippingGenerator.createRootStrippingGenerator(bodyGenerator),config);
}
 else {
return new Stax2JacksonWriter(bodyGenerator,config);
}
case MAPPED:
return JsonXmlStreamWriter.createWriter(writer,config);
case BADGERFISH:
return new BadgerFishXMLStreamWriter(writer);
case MAPPED_JETTISON:
Configuration jmConfig;
if (null == config.getXml2JsonNs()) {
jmConfig=new Configuration();
}
 else {
jmConfig=new Configuration(config.getXml2JsonNs());
}
return new MappedXMLStreamWriter(new MappedNamespaceConvention(jmConfig),writer);
default :
return null;
}
}"
51209,"public static XMLStreamReader createReader(Reader reader,JSONConfiguration config,String rootName,boolean readingList){
switch (config.getNotation()) {
case NATURAL:
    try {
      final JsonParser rawParser=new JsonFactory().createJsonParser(reader);
      final JsonParser nonListParser=config.isRootUnwrapping() ? JacksonRootAddingParser.createRootAddingParser(rawParser,rootName) : rawParser;
      if (!readingList) {
        return new Jackson2StaxReader(nonListParser);
      }
 else {
        return new Jackson2StaxReader(JacksonRootAddingParser.createRootAddingParser(nonListParser,""String_Node_Str""));
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
    }
  break;
case MAPPED:
try {
  return new JsonXmlStreamReader(reader,rootName,config);
}
 catch (IOException ex) {
  Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
}
break;
case MAPPED_JETTISON:
try {
Configuration jmConfig;
if (null == config.getXml2JsonNs()) {
jmConfig=new Configuration();
}
 else {
jmConfig=new Configuration(config.getXml2JsonNs());
}
return new MappedXMLStreamReader(new JSONObject(new JSONTokener(readFromAsString(reader))),new MappedNamespaceConvention(jmConfig));
}
 catch (Exception ex) {
Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
}
break;
case BADGERFISH:
try {
return new BadgerFishXMLStreamReader(new JSONObject(new JSONTokener(readFromAsString(reader))));
}
 catch (Exception ex) {
Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
}
break;
}
return null;
}","public static XMLStreamReader createReader(Reader reader,JSONConfiguration config,String rootName,boolean readingList){
switch (config.getNotation()) {
case NATURAL:
    try {
      final JsonParser rawParser=new JsonFactory().createJsonParser(reader);
      final JsonParser nonListParser=config.isRootUnwrapping() ? JacksonRootAddingParser.createRootAddingParser(rawParser,rootName) : rawParser;
      if (!readingList) {
        return new Jackson2StaxReader(nonListParser,config);
      }
 else {
        return new Jackson2StaxReader(JacksonRootAddingParser.createRootAddingParser(nonListParser,""String_Node_Str""),config);
      }
    }
 catch (    Exception ex) {
      Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
    }
  break;
case MAPPED:
try {
  return new JsonXmlStreamReader(reader,rootName,config);
}
 catch (IOException ex) {
  Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
}
break;
case MAPPED_JETTISON:
try {
Configuration jmConfig;
if (null == config.getXml2JsonNs()) {
jmConfig=new Configuration();
}
 else {
jmConfig=new Configuration(config.getXml2JsonNs());
}
return new MappedXMLStreamReader(new JSONObject(new JSONTokener(readFromAsString(reader))),new MappedNamespaceConvention(jmConfig));
}
 catch (Exception ex) {
Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
}
break;
case BADGERFISH:
try {
return new BadgerFishXMLStreamReader(new JSONObject(new JSONTokener(readFromAsString(reader))));
}
 catch (Exception ex) {
Logger.getLogger(JSONUnmarshallerImpl.class.getName()).log(Level.SEVERE,null,ex);
}
break;
}
return null;
}"
51210,"public Jackson2StaxReader(JsonParser parser) throws XMLStreamException {
  this.parser=parser;
  try {
    readNext();
  }
 catch (  IOException ex) {
    Logger.getLogger(Jackson2StaxReader.class.getName()).log(Level.SEVERE,null,ex);
    throw new XMLStreamException(ex);
  }
}","public Jackson2StaxReader(JsonParser parser,JSONConfiguration config) throws XMLStreamException {
  this.attrsWithPrefix=config.isUsingPrefixesAtNaturalAttributes();
  this.parser=parser;
  try {
    readNext();
  }
 catch (  IOException ex) {
    Logger.getLogger(Jackson2StaxReader.class.getName()).log(Level.SEVERE,null,ex);
    throw new XMLStreamException(ex);
  }
}"
51211,"private void readNext(boolean lookingForAttributes) throws IOException {
  if (!lookingForAttributes) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || lookingForAttributes) {
    org.codehaus.jackson.JsonToken jtok;
    while (true) {
      parser.nextToken();
      jtok=parser.getCurrentToken();
      final ProcessingInfo pi=peek(processingStack);
switch (jtok) {
case FIELD_NAME:
        String currentName=parser.getCurrentName();
      boolean currentIsAttribute=!(""String_Node_Str"".equals(currentName)) && properJAXBVersion ? attrsExpected.contains(currentName) : !elemsExpected.contains(currentName);
    if (lookingForAttributes && currentIsAttribute) {
      parser.nextToken();
      if (valueTokens.contains(parser.getCurrentToken())) {
        eventQueue.peek().addAttribute(getQNameForLocName(currentName,qNamesOfExpAttrs),parser.getText());
      }
 else {
        System.out.println(String.format(""String_Node_Str"",currentName));
        throw new IOException(""String_Node_Str"");
      }
    }
 else {
      lookingForAttributes=false;
      if (!(""String_Node_Str"".equals(currentName))) {
        final QName currentQName=getQNameForTagLocName(currentName);
        eventQueue.add(new StartElementEvent(currentQName,new StaxLocation(parser.getCurrentLocation())));
        processingStack.add(new ProcessingInfo(currentQName,false,true));
        return;
      }
 else {
        parser.nextToken();
        if (valueTokens.contains(parser.getCurrentToken())) {
          eventQueue.add(new CharactersEvent(parser.getText(),new StaxLocation(parser.getCurrentLocation())));
          return;
        }
 else {
          throw new IOException(""String_Node_Str"");
        }
      }
    }
  break;
case START_OBJECT:
if (pi == null) {
  eventQueue.add(new StartDocumentEvent(new StaxLocation(0,0,0)));
  return;
}
if (pi.isArray && !pi.isFirstElement) {
eventQueue.add(new StartElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
return;
}
 else {
pi.isFirstElement=false;
}
break;
case END_OBJECT:
lookingForAttributes=false;
eventQueue.add(new EndElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
if (!pi.isArray) {
pop(processingStack);
}
if (processingStack.isEmpty()) {
eventQueue.add(new EndDocumentEvent(new StaxLocation(parser.getCurrentLocation())));
}
return;
case VALUE_FALSE:
case VALUE_NULL:
case VALUE_NUMBER_FLOAT:
case VALUE_NUMBER_INT:
case VALUE_TRUE:
case VALUE_STRING:
if (!pi.isFirstElement) {
eventQueue.add(new StartElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
}
 else {
pi.isFirstElement=false;
}
if (jtok != jtok.VALUE_NULL) {
eventQueue.add(new CharactersEvent(parser.getText(),new StaxLocation(parser.getCurrentLocation())));
}
eventQueue.add(new EndElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
if (!pi.isArray) {
pop(processingStack);
}
if (processingStack.isEmpty()) {
eventQueue.add(new EndDocumentEvent(new StaxLocation(parser.getCurrentLocation())));
}
lookingForAttributes=false;
return;
case START_ARRAY:
peek(processingStack).isArray=true;
break;
case END_ARRAY:
pop(processingStack);
lookingForAttributes=false;
}
}
}
}","private void readNext(boolean lookingForAttributes) throws IOException {
  if (!lookingForAttributes) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || lookingForAttributes) {
    org.codehaus.jackson.JsonToken jtok;
    while (true) {
      parser.nextToken();
      jtok=parser.getCurrentToken();
      final ProcessingInfo pi=peek(processingStack);
switch (jtok) {
case FIELD_NAME:
        String currentName=parser.getCurrentName();
      if (attrsWithPrefix && currentName.startsWith(""String_Node_Str"")) {
        currentName=currentName.substring(1);
      }
    boolean currentIsAttribute=!(""String_Node_Str"".equals(currentName)) && properJAXBVersion ? attrsExpected.contains(currentName) : !elemsExpected.contains(currentName);
  if (lookingForAttributes && currentIsAttribute) {
    parser.nextToken();
    if (valueTokens.contains(parser.getCurrentToken())) {
      eventQueue.peek().addAttribute(getQNameForLocName(currentName,qNamesOfExpAttrs),parser.getText());
    }
 else {
      System.out.println(String.format(""String_Node_Str"",currentName));
      throw new IOException(""String_Node_Str"");
    }
  }
 else {
    lookingForAttributes=false;
    if (!(""String_Node_Str"".equals(currentName))) {
      final QName currentQName=getQNameForTagLocName(currentName);
      eventQueue.add(new StartElementEvent(currentQName,new StaxLocation(parser.getCurrentLocation())));
      processingStack.add(new ProcessingInfo(currentQName,false,true));
      return;
    }
 else {
      parser.nextToken();
      if (valueTokens.contains(parser.getCurrentToken())) {
        eventQueue.add(new CharactersEvent(parser.getText(),new StaxLocation(parser.getCurrentLocation())));
        return;
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
  }
break;
case START_OBJECT:
if (pi == null) {
eventQueue.add(new StartDocumentEvent(new StaxLocation(0,0,0)));
return;
}
if (pi.isArray && !pi.isFirstElement) {
eventQueue.add(new StartElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
return;
}
 else {
pi.isFirstElement=false;
}
break;
case END_OBJECT:
lookingForAttributes=false;
eventQueue.add(new EndElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
if (!pi.isArray) {
pop(processingStack);
}
if (processingStack.isEmpty()) {
eventQueue.add(new EndDocumentEvent(new StaxLocation(parser.getCurrentLocation())));
}
return;
case VALUE_FALSE:
case VALUE_NULL:
case VALUE_NUMBER_FLOAT:
case VALUE_NUMBER_INT:
case VALUE_TRUE:
case VALUE_STRING:
if (!pi.isFirstElement) {
eventQueue.add(new StartElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
}
 else {
pi.isFirstElement=false;
}
if (jtok != jtok.VALUE_NULL) {
eventQueue.add(new CharactersEvent(parser.getText(),new StaxLocation(parser.getCurrentLocation())));
}
eventQueue.add(new EndElementEvent(pi.name,new StaxLocation(parser.getCurrentLocation())));
if (!pi.isArray) {
pop(processingStack);
}
if (processingStack.isEmpty()) {
eventQueue.add(new EndDocumentEvent(new StaxLocation(parser.getCurrentLocation())));
}
lookingForAttributes=false;
return;
case START_ARRAY:
peek(processingStack).isArray=true;
break;
case END_ARRAY:
pop(processingStack);
lookingForAttributes=false;
}
}
}
}"
51212,"public Stax2JacksonWriter(JsonGenerator generator){
  this.generator=generator;
}","public Stax2JacksonWriter(JsonGenerator generator,JSONConfiguration config){
  this.attrsWithPrefix=config.isUsingPrefixesAtNaturalAttributes();
  this.generator=generator;
}"
51213,"public void testSimpleXmlTypeBean() throws Exception {
  final JSONJAXBContext ctx=new JSONJAXBContext(JSONConfiguration.mapped().arrays(""String_Node_Str"").build(),FakeArrayBean.class);
  final JSONMarshaller jm=ctx.createJSONMarshaller();
  final JSONUnmarshaller ju=ctx.createJSONUnmarshaller();
  final StringWriter sw=new StringWriter();
  final FakeArrayBean one=(FakeArrayBean)FakeArrayBean.createTestInstance();
  jm.marshallToJSON(one,sw);
  String jsonResult=sw.toString();
  assertEquals(""String_Node_Str"",jsonResult);
}","public void testSimpleXmlTypeBean() throws Exception {
  final JSONJAXBContext ctx=new JSONJAXBContext(JSONConfiguration.mapped().arrays(""String_Node_Str"").build(),FakeArrayBean.class);
  final JSONMarshaller jm=ctx.createJSONMarshaller();
  final StringWriter sw=new StringWriter();
  final FakeArrayBean one=(FakeArrayBean)FakeArrayBean.createTestInstance();
  jm.marshallToJSON(one,sw);
  String jsonResult=sw.toString();
  assertEquals(""String_Node_Str"",jsonResult);
}"
51214,"@Override @SuppressWarnings(""String_Node_Str"") public void setUp() throws Exception {
  String beanClasses=ResourceHelper.getResourceAsString(PKG_NAME,""String_Node_Str"");
  Collection classCollection=new LinkedList<Class>();
  StringTokenizer tokenizer=new StringTokenizer(beanClasses);
  beans=new LinkedList<Object>();
  while (tokenizer.hasMoreTokens()) {
    String className=tokenizer.nextToken();
    if (!""String_Node_Str"".equals(className)) {
      Class beanClass=Class.forName(PKG_NAME.replace('/','.') + className);
      classCollection.add(beanClass);
      Method testBeanCreator=beanClass.getDeclaredMethod(""String_Node_Str"");
      Object testBean=testBeanCreator.invoke(null);
      beans.add(testBean);
    }
  }
  classes=(Class[])classCollection.toArray(new Class[0]);
}","@Override @SuppressWarnings(""String_Node_Str"") public void setUp() throws Exception {
  String beanClasses=TestHelper.getResourceAsString(PKG_NAME,""String_Node_Str"");
  Collection classCollection=new LinkedList<Class>();
  StringTokenizer tokenizer=new StringTokenizer(beanClasses);
  beans=new LinkedList<Object>();
  while (tokenizer.hasMoreTokens()) {
    String className=tokenizer.nextToken();
    if (!""String_Node_Str"".equals(className)) {
      Class beanClass=Class.forName(PKG_NAME.replace('/','.') + className);
      classCollection.add(beanClass);
      Method testBeanCreator=beanClass.getDeclaredMethod(""String_Node_Str"");
      Object testBean=testBeanCreator.invoke(null);
      beans.add(testBean);
    }
  }
  classes=(Class[])classCollection.toArray(new Class[0]);
}"
51215,"public void tryWritingBean(Object jaxbBean,String expectedJsonExprFilename,JSONConfiguration config) throws JAXBException, IOException {
  String expectedJsonExpr=ResourceHelper.getResourceAsString(PKG_NAME,expectedJsonExprFilename);
  Marshaller marshaller=jaxbContext.createMarshaller();
  StringWriter resultWriter=new StringWriter();
  marshaller.marshal(jaxbBean,JsonXmlStreamWriter.createWriter(resultWriter,config));
  assertEquals(""String_Node_Str"" + expectedJsonExpr + ""String_Node_Str""+ resultWriter.toString()+ ""String_Node_Str"",expectedJsonExpr,resultWriter.toString());
}","public void tryWritingBean(Object jaxbBean,String expectedJsonExprFilename,JSONConfiguration config) throws JAXBException, IOException {
  String expectedJsonExpr=TestHelper.getResourceAsString(PKG_NAME,expectedJsonExprFilename);
  Marshaller marshaller=jaxbContext.createMarshaller();
  StringWriter resultWriter=new StringWriter();
  marshaller.marshal(jaxbBean,JsonXmlStreamWriter.createWriter(resultWriter,config));
  assertEquals(""String_Node_Str"" + expectedJsonExpr + ""String_Node_Str""+ resultWriter.toString()+ ""String_Node_Str"",expectedJsonExpr,resultWriter.toString());
}"
51216,"public void tryReadingBean(String jsonExprFilename,Object expectedJaxbBean,JSONConfiguration config) throws JAXBException, IOException {
  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
  JAXBElement jaxbElement=unmarshaller.unmarshal(new JsonXmlStreamReader(new StringReader(ResourceHelper.getResourceAsString(PKG_NAME,jsonExprFilename)),config),expectedJaxbBean.getClass());
  System.out.println(""String_Node_Str"" + jaxbElement.getValue().toString());
  assertEquals(""String_Node_Str"" + expectedJaxbBean + ""String_Node_Str""+ jaxbElement.getValue()+ ""String_Node_Str"",expectedJaxbBean,jaxbElement.getValue());
}","public void tryReadingBean(String jsonExprFilename,Object expectedJaxbBean,JSONConfiguration config) throws JAXBException, IOException {
  Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
  JAXBElement jaxbElement=unmarshaller.unmarshal(new JsonXmlStreamReader(new StringReader(TestHelper.getResourceAsString(PKG_NAME,jsonExprFilename)),config),expectedJaxbBean.getClass());
  System.out.println(""String_Node_Str"" + jaxbElement.getValue().toString());
  assertEquals(""String_Node_Str"" + expectedJaxbBean + ""String_Node_Str""+ jaxbElement.getValue()+ ""String_Node_Str"",expectedJaxbBean,jaxbElement.getValue());
}"
51217,"public void testExtensibility() throws Exception {
  String baseXml=ResourceHelper.getResourceAsString(""String_Node_Str"",""String_Node_Str"");
  JSONJAXBContext jsonContext=new JSONJAXBContext(JSONConfiguration.natural().build(),""String_Node_Str"");
  Unmarshaller jaxbUnmarshaller=jsonContext.createUnmarshaller();
  Object fromXml=jaxbUnmarshaller.unmarshal(new StringReader(baseXml));
  StringWriter sw=new StringWriter();
  jsonContext.createJSONMarshaller().marshallToJSON(fromXml,sw);
  String jsonRepresentation=sw.toString();
  System.out.println(jsonRepresentation);
}","public void testExtensibility() throws Exception {
  String baseXml=TestHelper.getResourceAsString(""String_Node_Str"",""String_Node_Str"");
  JSONJAXBContext jsonContext=new JSONJAXBContext(JSONConfiguration.natural().build(),""String_Node_Str"");
  Unmarshaller jaxbUnmarshaller=jsonContext.createUnmarshaller();
  Object fromXml=jaxbUnmarshaller.unmarshal(new StringReader(baseXml));
  StringWriter sw=new StringWriter();
  jsonContext.createJSONMarshaller().marshallToJSON(fromXml,sw);
  String jsonRepresentation=sw.toString();
  System.out.println(jsonRepresentation);
}"
51218,"private JSONConfiguration(Builder b){
  notation=b.notation;
  arrays=b.arrays;
  attrsAsElems=b.attrsAsElems;
  nonStrings=b.nonStrings;
  rootUnwrapping=b.rootUnwrapping;
  jsonXml2JsonNs=b.jsonXml2JsonNs;
}","private JSONConfiguration(Builder b){
  notation=b.notation;
  arrays=b.arrays;
  attrsAsElems=b.attrsAsElems;
  nonStrings=b.nonStrings;
  rootUnwrapping=b.rootUnwrapping;
  humanReadableFormating=b.humanReadableFormatting;
  jsonXml2JsonNs=b.jsonXml2JsonNs;
}"
51219,"public static XMLStreamWriter createWriter(Writer writer,JSONConfiguration config,boolean writingList) throws IOException {
switch (config.getNotation()) {
case NATURAL:
    final JsonGenerator rawGenerator=new JsonFactory().createJsonGenerator(writer);
  final JsonGenerator bodyGenerator=writingList ? JacksonArrayWrapperGenerator.createArrayWrapperGenerator(rawGenerator) : rawGenerator;
if (config.isRootUnwrapping()) {
  return new Stax2JacksonWriter(JacksonRootStrippingGenerator.createRootStrippingGenerator(bodyGenerator));
}
 else {
  return new Stax2JacksonWriter(bodyGenerator);
}
case MAPPED:
return JsonXmlStreamWriter.createWriter(writer,config);
case BADGERFISH:
return new BadgerFishXMLStreamWriter(writer);
case MAPPED_JETTISON:
Configuration jmConfig;
if (null == config.getXml2JsonNs()) {
jmConfig=new Configuration();
}
 else {
jmConfig=new Configuration(config.getXml2JsonNs());
}
return new MappedXMLStreamWriter(new MappedNamespaceConvention(jmConfig),writer);
default :
return null;
}
}","public static XMLStreamWriter createWriter(Writer writer,JSONConfiguration config,boolean writingList) throws IOException {
switch (config.getNotation()) {
case NATURAL:
    final JsonGenerator rawGenerator=new JsonFactory().createJsonGenerator(writer);
  if (config.isHumanReadableFormatting()) {
    rawGenerator.useDefaultPrettyPrinter();
  }
final JsonGenerator bodyGenerator=writingList ? JacksonArrayWrapperGenerator.createArrayWrapperGenerator(rawGenerator) : rawGenerator;
if (config.isRootUnwrapping()) {
return new Stax2JacksonWriter(JacksonRootStrippingGenerator.createRootStrippingGenerator(bodyGenerator));
}
 else {
return new Stax2JacksonWriter(bodyGenerator);
}
case MAPPED:
return JsonXmlStreamWriter.createWriter(writer,config);
case BADGERFISH:
return new BadgerFishXMLStreamWriter(writer);
case MAPPED_JETTISON:
Configuration jmConfig;
if (null == config.getXml2JsonNs()) {
jmConfig=new Configuration();
}
 else {
jmConfig=new Configuration(config.getXml2JsonNs());
}
return new MappedXMLStreamWriter(new MappedNamespaceConvention(jmConfig),writer);
default :
return null;
}
}"
51220,"/** 
 * Creates a new HTTP Basic Authentication filter using provided username and password credentials
 * @param username
 * @param password
 */
public HTTPBasicAuthFilter(final String username,final String password){
  authentication=""String_Node_Str"" + Base64.encode(username + ""String_Node_Str"" + password);
}","/** 
 * Creates a new HTTP Basic Authentication filter using provided username and password credentials
 * @param username
 * @param password
 */
public HTTPBasicAuthFilter(final String username,final String password){
  try {
    authentication=""String_Node_Str"" + new String(Base64.encode(username + ""String_Node_Str"" + password),""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    throw new RuntimeException(ex);
  }
}"
51221,"private void generateEEEvent(String name){
  if (!""String_Node_Str"".equals(name)) {
    eventQueue.add(new EndElementEvent(createQName(name),new StaxLocation(lexer)));
  }
}","private void generateEEEvent(String name){
  if ((null != name) && !""String_Node_Str"".equals(name)) {
    eventQueue.add(new EndElementEvent(createQName(name),new StaxLocation(lexer)));
  }
}"
51222,"private void readNext(boolean checkAttributesOnly) throws IOException {
  if (!checkAttributesOnly) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || checkAttributesOnly) {
    lastToken=nextToken();
    if ((null == lastToken) || (LaState.END == processingStack.get(depth).state)) {
      if (jsonRootUnwrapping) {
        generateEEEvent(processingStack.get(depth).lastName);
      }
      eventQueue.add(new EndDocumentEvent(new StaxLocation(lexer)));
      break;
    }
switch (processingStack.get(depth).state) {
case START:
      if (0 == depth) {
        eventQueue.add(new StartDocumentEvent(new StaxLocation(lexer)));
        processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
        if (jsonRootUnwrapping) {
          processingStack.get(depth).lastName=this.rootElementName;
          StartElementEvent event=generateSEEvent(processingStack.get(depth).lastName);
          processingStack.get(depth).eventToReadAttributesFor=event;
        }
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
          processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
        depth++;
      break;
case JsonToken.START_ARRAY:
    processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
  depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.END;
break;
default :
}
}
processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
break;
case AFTER_OBJ_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.STRING:
if (lastToken.tokenText.startsWith(""String_Node_Str"") || attrAsElemNames.contains(lastToken.tokenText)) {
String attrName=lastToken.tokenText.startsWith(""String_Node_Str"") ? lastToken.tokenText : (""String_Node_Str"" + lastToken.tokenText);
colon();
lastToken=nextToken();
if (!valueTokenTypes.contains(lastToken.tokenType)) {
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
if (null != processingStack.get(depth - 1).eventToReadAttributesFor) {
processingStack.get(depth - 1).eventToReadAttributesFor.addAttribute(createQName(attrName.substring(1)),lastToken.tokenText);
}
lastToken=nextToken();
switch (lastToken.tokenType) {
case JsonToken.END_OBJECT:
processingStack.remove(depth);
depth--;
valueRead();
checkAttributesOnly=false;
break;
case JsonToken.COMMA:
break;
default :
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
}
 else {
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
checkAttributesOnly=false;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
}
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
checkAttributesOnly=false;
processingStack.remove(depth);
depth--;
break;
default :
}
break;
case BEFORE_OBJ_NEXT_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.STRING:
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
break;
default :
}
break;
case BEFORE_VALUE_IN_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_OBJ_KV_PAIR;
break;
default :
}
break;
case AFTER_OBJ_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_OBJ_NEXT_KV_PAIR;
generateEEEvent(processingStack.get(depth).lastName);
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
processingStack.remove(depth);
depth--;
valueRead();
break;
default :
}
break;
case AFTER_ARRAY_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=processingStack.get(depth - 1).eventToReadAttributesFor;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case BEFORE_NEXT_ARRAY_ELEM:
StartElementEvent event=generateSEEvent(processingStack.get(depth - 1).lastName);
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=event;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case AFTER_ARRAY_ELEM:
switch (lastToken.tokenType) {
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_NEXT_ARRAY_ELEM;
generateEEEvent(processingStack.get(depth - 1).lastName);
break;
default :
}
break;
}
}
}","private void readNext(boolean checkAttributesOnly) throws IOException {
  if (!checkAttributesOnly) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || checkAttributesOnly) {
    lastToken=nextToken();
    if ((null == lastToken) || (LaState.END == processingStack.get(depth).state)) {
      if (jsonRootUnwrapping) {
        generateEEEvent(processingStack.get(depth).lastName);
      }
      eventQueue.add(new EndDocumentEvent(new StaxLocation(lexer)));
      break;
    }
switch (processingStack.get(depth).state) {
case START:
      if (0 == depth) {
        eventQueue.add(new StartDocumentEvent(new StaxLocation(lexer)));
        processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
        if (jsonRootUnwrapping) {
          processingStack.get(depth).lastName=this.rootElementName;
          StartElementEvent event=generateSEEvent(processingStack.get(depth).lastName);
          processingStack.get(depth).eventToReadAttributesFor=event;
        }
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
          processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
        depth++;
      break;
case JsonToken.START_ARRAY:
    processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
  depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.END;
break;
default :
}
}
processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
break;
case AFTER_OBJ_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.STRING:
if (lastToken.tokenText.startsWith(""String_Node_Str"") || attrAsElemNames.contains(lastToken.tokenText)) {
String attrName=lastToken.tokenText.startsWith(""String_Node_Str"") ? lastToken.tokenText : (""String_Node_Str"" + lastToken.tokenText);
colon();
lastToken=nextToken();
if (!valueTokenTypes.contains(lastToken.tokenType)) {
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
if (null != processingStack.get(depth - 1).eventToReadAttributesFor) {
processingStack.get(depth - 1).eventToReadAttributesFor.addAttribute(createQName(attrName.substring(1)),lastToken.tokenText);
}
lastToken=nextToken();
switch (lastToken.tokenType) {
case JsonToken.END_OBJECT:
processingStack.remove(depth);
depth--;
valueRead();
checkAttributesOnly=false;
break;
case JsonToken.COMMA:
break;
default :
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
}
 else {
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
checkAttributesOnly=false;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
}
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
checkAttributesOnly=false;
processingStack.remove(depth);
depth--;
valueRead();
break;
default :
}
break;
case BEFORE_OBJ_NEXT_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.STRING:
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
break;
default :
}
break;
case BEFORE_VALUE_IN_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_OBJ_KV_PAIR;
break;
default :
}
break;
case AFTER_OBJ_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_OBJ_NEXT_KV_PAIR;
generateEEEvent(processingStack.get(depth).lastName);
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
processingStack.remove(depth);
depth--;
valueRead();
break;
default :
}
break;
case AFTER_ARRAY_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=processingStack.get(depth - 1).eventToReadAttributesFor;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case BEFORE_NEXT_ARRAY_ELEM:
StartElementEvent event=generateSEEvent(processingStack.get(depth - 1).lastName);
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=event;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case AFTER_ARRAY_ELEM:
switch (lastToken.tokenType) {
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_NEXT_ARRAY_ELEM;
generateEEEvent(processingStack.get(depth - 1).lastName);
break;
default :
}
break;
}
}
}"
51223,"private void pushPropInfo(String elementName){
  ProcessingInfo parentPI=peek(processingStack);
  if ((elementName != null) && (parentPI != null) && (parentPI.lastUnderlyingPI != null)&& (elementName.equals(parentPI.lastUnderlyingPI.elementName))) {
    processingStack.add(new ProcessingInfo(parentPI.lastUnderlyingPI));
    return;
  }
  final XMLSerializer xs=XMLSerializer.getInstance();
  final Property cp=(xs == null) ? null : xs.getCurrentProperty();
  final RuntimePropertyInfo ri=(cp == null) ? null : cp.getInfo();
  final Type rt=(ri == null) ? null : ri.getRawType();
  final String dn=(ri == null) ? null : ri.getName();
  if (null == rt) {
    if (writingAttr) {
      processingStack.add(new ProcessingInfo(elementName,ri,false,null));
      return;
    }
 else {
      processingStack.add(new ProcessingInfo(elementName,ri,false,null));
      return;
    }
  }
  if (primitiveTypes.contains(rt)) {
    processingStack.add(new ProcessingInfo(elementName,ri,false,rt));
    return;
  }
  if (ri.isCollection()) {
    if (!((parentPI != null) && (parentPI.isArray) && (parentPI.rpi == ri))) {
      processingStack.add(new ProcessingInfo(elementName,ri,true,rt));
      return;
    }
  }
  processingStack.add(new ProcessingInfo(elementName,ri,false,rt));
  return;
}","private void pushPropInfo(String elementName){
  ProcessingInfo parentPI=peek(processingStack);
  if ((elementName != null) && (parentPI != null) && (parentPI.lastUnderlyingPI != null)&& (elementName.equals(parentPI.lastUnderlyingPI.elementName))) {
    processingStack.add(new ProcessingInfo(parentPI.lastUnderlyingPI));
    return;
  }
  final XMLSerializer xs=XMLSerializer.getInstance();
  final Property cp=(xs == null) ? null : xs.getCurrentProperty();
  final RuntimePropertyInfo ri=(cp == null) ? null : cp.getInfo();
  final Type rt=(ri == null) ? null : ri.getRawType();
  final String dn=(ri == null) ? null : ri.getName();
  if (null == rt) {
    if (writingAttr) {
      processingStack.add(new ProcessingInfo(elementName,ri,false,null));
      return;
    }
 else {
      processingStack.add(new ProcessingInfo(elementName,ri,false,null));
      return;
    }
  }
  if (primitiveTypes.contains(rt)) {
    processingStack.add(new ProcessingInfo(elementName,ri,false,rt));
    return;
  }
  if (ri.isCollection() && !isWildcardElement(ri)) {
    if (!((parentPI != null) && (parentPI.isArray) && (parentPI.rpi == ri))) {
      processingStack.add(new ProcessingInfo(elementName,ri,true,rt));
      return;
    }
  }
  processingStack.add(new ProcessingInfo(elementName,ri,false,rt));
  return;
}"
51224,"@Override public String toString(){
  return ""String_Node_Str"" + currentName + ""String_Node_Str""+ ((writer != null) ? writer.getContent() : null)+ ""String_Node_Str""+ lastName+ ""String_Node_Str""+ ((lastElementWriter != null) ? lastElementWriter.getContent() : null)+ ""String_Node_Str"";
}","@Override public String toString(){
  return String.format(""String_Node_Str"",currentName,((writer != null) ? writer.getContent() : null),lastName,((lastElementWriter != null) ? lastElementWriter.getContent() : null));
}"
51225,"public void writeStartElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {
  String effectiveName=getEffectiveName(namespaceURI,localName);
  processingStack.get(depth).isNotEmpty=true;
  processingStack.get(depth).currentName=effectiveName;
  try {
    boolean isNextArrayElement=processingStack.get(depth).currentName.equals(processingStack.get(depth).lastName);
    if (!isNextArrayElement) {
      if (isArrayElement(processingStack.get(depth).lastName) && processingStack.get(depth).hasNoElements) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).lastIsArray=true;
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
      }
 else {
        if (null != processingStack.get(depth).lastElementWriter) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).hasNoElements=false;
          }
 else {
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          }
        }
        processingStack.get(depth).lastIsArray=false;
      }
      if (null != processingStack.get(depth).lastName) {
        if (processingStack.get(depth).lastIsArray) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=false;
        }
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      if (null == processingStack.get(depth).lastWasPrimitive) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      processingStack.get(depth).writer.write(""String_Node_Str"" + effectiveName + ""String_Node_Str"");
    }
 else {
      processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
      processingStack.get(depth).lastIsArray=true;
      processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
      processingStack.get(depth).hasNoElements=false;
    }
    depth++;
    processingStack.add(depth,createProcessingState());
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public void writeStartElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {
  String effectiveName=getEffectiveName(namespaceURI,localName);
  processingStack.get(depth).isNotEmpty=true;
  processingStack.get(depth).currentName=effectiveName;
  try {
    boolean isNextArrayElement=processingStack.get(depth).currentName.equals(processingStack.get(depth).lastName);
    if (!isNextArrayElement) {
      if (isArrayElement(processingStack.get(depth).lastName)) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).lastIsArray=true;
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
      }
 else {
        if (null != processingStack.get(depth).lastElementWriter) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
            processingStack.get(depth).writer.write(""String_Node_Str"");
          }
 else {
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          }
        }
        processingStack.get(depth).lastIsArray=false;
      }
      if (null != processingStack.get(depth).lastName) {
        if (processingStack.get(depth).lastIsArray) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=false;
        }
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      if (null == processingStack.get(depth).lastWasPrimitive) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
      processingStack.get(depth).writer.write(""String_Node_Str"" + effectiveName + ""String_Node_Str"");
    }
 else {
      processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
      processingStack.get(depth).lastIsArray=true;
      processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
    }
    depth++;
    processingStack.add(depth,createProcessingState());
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
51226,"/** 
 * This is only a sample main method, you can experiment on your own by using above implemented methods.
 */
public static void main(String[] args){
  String uri, username, password;
  if (args.length < 3) {
    uri=BASE_URI.toString();
    username=""String_Node_Str"";
    password=""String_Node_Str"";
  }
 else {
    uri=args[0];
    username=args[1];
    password=args[2];
  }
  ContactsClient client=new ContactsClient(uri,username,password);
  User bob=new User();
  bob.setUsername(""String_Node_Str"");
  bob.setPassword(""String_Node_Str"");
  client.createUser(bob);
  Contact c=new Contact();
  c.setName(""String_Node_Str"");
  c.setContent(""String_Node_Str"");
  EmailAddress email=new EmailAddress(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  c.getEmailAddresses().add(email);
  client.createContact(bob.getUsername(),c);
}","/** 
 * This is only a sample main method, you can experiment on your own by using above implemented methods.
 */
public static void main(String[] args){
  String uri, username, password;
  if (args.length < 3) {
    uri=BASE_URI.toString();
    username=""String_Node_Str"";
    password=""String_Node_Str"";
  }
 else {
    uri=args[0];
    username=args[1];
    password=args[2];
  }
  ContactsClient client=new ContactsClient(uri,username,password);
  User bob=new User();
  bob.setUsername(""String_Node_Str"");
  bob.setPassword(""String_Node_Str"");
  if (client.doesUserExist(bob.getUsername())) {
    System.out.println(""String_Node_Str"");
    return;
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  client.createUser(bob);
  Contact c=new Contact();
  c.setName(""String_Node_Str"");
  c.setContent(""String_Node_Str"");
  EmailAddress email=new EmailAddress(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  c.getEmailAddresses().add(email);
  client.createContact(bob.getUsername(),c);
}"
51227,"private void readNext(boolean checkAttributesOnly) throws IOException {
  if (!checkAttributesOnly) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || checkAttributesOnly) {
    lastToken=nextToken();
    if ((null == lastToken) || (LaState.END == processingStack.get(depth).state)) {
      if (jsonRootUnwrapping) {
        generateEEEvent(processingStack.get(depth).lastName);
      }
      eventQueue.add(new EndDocumentEvent(new StaxLocation(lexer)));
      break;
    }
switch (processingStack.get(depth).state) {
case START:
      if (0 == depth) {
        eventQueue.add(new StartDocumentEvent(new StaxLocation(lexer)));
        processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
        if (jsonRootUnwrapping) {
          processingStack.get(depth).lastName=this.rootElementName;
          StartElementEvent event=generateSEEvent(processingStack.get(depth).lastName);
          processingStack.get(depth).eventToReadAttributesFor=event;
        }
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
          processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
        depth++;
      break;
case JsonToken.START_ARRAY:
    processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
  depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.END;
break;
default :
}
}
processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
break;
case AFTER_OBJ_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.STRING:
if (lastToken.tokenText.startsWith(""String_Node_Str"") || attrAsElemNames.contains(lastToken.tokenText)) {
String attrName=lastToken.tokenText.startsWith(""String_Node_Str"") ? lastToken.tokenText : (""String_Node_Str"" + lastToken.tokenText);
colon();
lastToken=nextToken();
if (JsonToken.STRING != lastToken.tokenType) {
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
if (null != processingStack.get(depth - 1).eventToReadAttributesFor) {
processingStack.get(depth - 1).eventToReadAttributesFor.addAttribute(new QName(attrName.substring(1)),lastToken.tokenText);
}
lastToken=nextToken();
switch (lastToken.tokenType) {
case JsonToken.END_OBJECT:
processingStack.remove(depth);
depth--;
valueRead();
checkAttributesOnly=false;
break;
case JsonToken.COMMA:
break;
default :
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
}
 else {
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
checkAttributesOnly=false;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
}
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
checkAttributesOnly=false;
processingStack.remove(depth);
depth--;
break;
default :
}
break;
case BEFORE_OBJ_NEXT_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.STRING:
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
break;
default :
}
break;
case BEFORE_VALUE_IN_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_OBJ_KV_PAIR;
break;
default :
}
break;
case AFTER_OBJ_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_OBJ_NEXT_KV_PAIR;
generateEEEvent(processingStack.get(depth).lastName);
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
processingStack.remove(depth);
depth--;
valueRead();
break;
default :
}
break;
case AFTER_ARRAY_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=processingStack.get(depth - 1).eventToReadAttributesFor;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case BEFORE_NEXT_ARRAY_ELEM:
StartElementEvent event=generateSEEvent(processingStack.get(depth - 1).lastName);
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=event;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case AFTER_ARRAY_ELEM:
switch (lastToken.tokenType) {
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_NEXT_ARRAY_ELEM;
generateEEEvent(processingStack.get(depth - 1).lastName);
break;
default :
}
break;
}
}
}","private void readNext(boolean checkAttributesOnly) throws IOException {
  if (!checkAttributesOnly) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || checkAttributesOnly) {
    lastToken=nextToken();
    if ((null == lastToken) || (LaState.END == processingStack.get(depth).state)) {
      if (jsonRootUnwrapping) {
        generateEEEvent(processingStack.get(depth).lastName);
      }
      eventQueue.add(new EndDocumentEvent(new StaxLocation(lexer)));
      break;
    }
switch (processingStack.get(depth).state) {
case START:
      if (0 == depth) {
        eventQueue.add(new StartDocumentEvent(new StaxLocation(lexer)));
        processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
        if (jsonRootUnwrapping) {
          processingStack.get(depth).lastName=this.rootElementName;
          StartElementEvent event=generateSEEvent(processingStack.get(depth).lastName);
          processingStack.get(depth).eventToReadAttributesFor=event;
        }
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
          processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
        depth++;
      break;
case JsonToken.START_ARRAY:
    processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
  depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.END;
break;
default :
}
}
processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
break;
case AFTER_OBJ_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.STRING:
if (lastToken.tokenText.startsWith(""String_Node_Str"") || attrAsElemNames.contains(lastToken.tokenText)) {
String attrName=lastToken.tokenText.startsWith(""String_Node_Str"") ? lastToken.tokenText : (""String_Node_Str"" + lastToken.tokenText);
colon();
lastToken=nextToken();
if (!valueTokenTypes.contains(lastToken.tokenType)) {
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
if (null != processingStack.get(depth - 1).eventToReadAttributesFor) {
processingStack.get(depth - 1).eventToReadAttributesFor.addAttribute(new QName(attrName.substring(1)),lastToken.tokenText);
}
lastToken=nextToken();
switch (lastToken.tokenType) {
case JsonToken.END_OBJECT:
processingStack.remove(depth);
depth--;
valueRead();
checkAttributesOnly=false;
break;
case JsonToken.COMMA:
break;
default :
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
}
 else {
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
checkAttributesOnly=false;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
}
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
checkAttributesOnly=false;
processingStack.remove(depth);
depth--;
break;
default :
}
break;
case BEFORE_OBJ_NEXT_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.STRING:
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
break;
default :
}
break;
case BEFORE_VALUE_IN_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_OBJ_KV_PAIR;
break;
default :
}
break;
case AFTER_OBJ_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_OBJ_NEXT_KV_PAIR;
generateEEEvent(processingStack.get(depth).lastName);
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
processingStack.remove(depth);
depth--;
valueRead();
break;
default :
}
break;
case AFTER_ARRAY_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=processingStack.get(depth - 1).eventToReadAttributesFor;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case BEFORE_NEXT_ARRAY_ELEM:
StartElementEvent event=generateSEEvent(processingStack.get(depth - 1).lastName);
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=event;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new StaxLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case AFTER_ARRAY_ELEM:
switch (lastToken.tokenType) {
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_NEXT_ARRAY_ELEM;
generateEEEvent(processingStack.get(depth - 1).lastName);
break;
default :
}
break;
}
}
}"
51228,"private User authenticate(ContainerRequest request){
  String authentication=request.getHeaderValue(ContainerRequest.AUTHORIZATION);
  if (authentication == null) {
    throw new MappableContainerException(new AuthenticationException(""String_Node_Str"",REALM));
  }
  if (!authentication.startsWith(""String_Node_Str"")) {
    return null;
  }
  authentication=authentication.substring(""String_Node_Str"".length());
  String[] values=new String(Base64.base64Decode(authentication)).split(""String_Node_Str"");
  if (values.length < 2) {
    return null;
  }
  String username=values[0];
  String password=values[1];
  if ((username == null) || (password == null)) {
    return null;
  }
  User user=null;
  if (username.equals(""String_Node_Str"") && password.trim().equals(""String_Node_Str"")) {
    user=new User(""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
    throw new MappableContainerException(new AuthenticationException(""String_Node_Str"",REALM));
  }
  return user;
}","private User authenticate(ContainerRequest request){
  String authentication=request.getHeaderValue(ContainerRequest.AUTHORIZATION);
  if (authentication == null) {
    throw new MappableContainerException(new AuthenticationException(""String_Node_Str"",REALM));
  }
  if (!authentication.startsWith(""String_Node_Str"")) {
    return null;
  }
  authentication=authentication.substring(""String_Node_Str"".length());
  String[] values=new String(Base64.base64Decode(authentication)).split(""String_Node_Str"");
  if (values.length < 2) {
    return null;
  }
  String username=values[0];
  String password=values[1];
  if ((username == null) || (password == null)) {
    return null;
  }
  User user=null;
  if (username.equals(""String_Node_Str"") && password.equals(""String_Node_Str"")) {
    user=new User(""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
    throw new MappableContainerException(new AuthenticationException(""String_Node_Str"",REALM));
  }
  return user;
}"
51229,"/** 
 * Creates a new HTTP Basic Authentication filter using provided username and password credentials
 * @param username
 * @param password
 */
public HTTPBasicAuthFilter(final String username,final String password){
  authentication=""String_Node_Str"" + encodeCredentialsBasic(username,password);
}","/** 
 * Creates a new HTTP Basic Authentication filter using provided username and password credentials
 * @param username
 * @param password
 */
public HTTPBasicAuthFilter(final String username,final String password){
  authentication=""String_Node_Str"" + Base64.encode(username + ""String_Node_Str"" + password);
}"
51230,"/** 
 * Set the status code.
 * @param status the status code.
 */
public void setStatus(int status){
  this.status=status;
}","/** 
 * Set the status code.
 * @param status the status code.
 */
public void setStatus(Response.StatusType status){
  setStatus(status.getStatusCode());
}"
51231,"/** 
 * Set the status code.
 * @param status the status code.
 */
public void setResponseStatus(Response.Status status){
  setStatus(status.getStatusCode());
}","/** 
 * Set the status code.
 * @param status the status code.
 * @deprecated see {@link #setStatus(javax.ws.rs.core.Response.StatusType) }
 */
@Deprecated public void setResponseStatus(Response.StatusType status){
  setStatus(status);
}"
51232,"/** 
 * Get the status code.
 * @return the status code, or null if the underlying status code was setusing the method  {@link #setStatus(int)} and there is nomapping between the the integer value and the Response.Status enumeration value.
 */
public Response.Status getResponseStatus(){
  return Response.Status.fromStatusCode(status);
}","/** 
 * Get the status code.
 * @return the status code, or null if the underlying status code was setusing the method  {@link #setStatus(int)} and there is nomapping between the the integer value and the Response.Status enumeration value.
 * @deprecated use {@link #getClientResponseStatus()}
 */
@Deprecated public Response.Status getResponseStatus(){
  return Response.Status.fromStatusCode(status);
}"
51233,"@Override public UriBuilder replaceQueryParam(String name,Object... values){
  checkSsp();
  if (queryParams == null) {
    queryParams=UriComponent.decodeQuery(query.toString(),false);
    query.setLength(0);
  }
  queryParams.remove(name);
  for (  Object value : values) {
    queryParams.add(name,value.toString());
  }
  return this;
}","@Override public UriBuilder replaceQueryParam(String name,Object... values){
  checkSsp();
  if (queryParams == null) {
    queryParams=UriComponent.decodeQuery(query.toString(),false);
    query.setLength(0);
  }
  queryParams.remove(name);
  if (values == null)   return this;
  for (  Object value : values) {
    if (value != null && !value.equals(""String_Node_Str""))     queryParams.add(name,value.toString());
  }
  return this;
}"
51234,"public void testReplaceQueryParams(){
  UriBuilder ubu=UriBuilder.fromUri(""String_Node_Str"").replaceQueryParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
{
    URI bu=ubu.build();
    MultivaluedMap<String,String> qps=UriComponent.decodeQuery(bu,true);
    List<String> a=qps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=qps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
    List<String> c=qps.get(""String_Node_Str"");
    assertEquals(1,c.size());
    assertEquals(""String_Node_Str"",c.get(0));
  }
{
    URI bu=ubu.replaceQueryParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
    MultivaluedMap<String,String> qps=UriComponent.decodeQuery(bu,true);
    List<String> a=qps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=qps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
    List<String> c=qps.get(""String_Node_Str"");
    assertEquals(1,c.size());
    assertEquals(""String_Node_Str"",c.get(0));
  }
}","public void testReplaceQueryParams(){
  UriBuilder ubu=UriBuilder.fromUri(""String_Node_Str"").replaceQueryParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
{
    URI bu=ubu.build();
    MultivaluedMap<String,String> qps=UriComponent.decodeQuery(bu,true);
    List<String> a=qps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=qps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
    List<String> c=qps.get(""String_Node_Str"");
    assertEquals(1,c.size());
    assertEquals(""String_Node_Str"",c.get(0));
  }
{
    URI bu=ubu.replaceQueryParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
    MultivaluedMap<String,String> qps=UriComponent.decodeQuery(bu,true);
    List<String> a=qps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=qps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
    List<String> c=qps.get(""String_Node_Str"");
    assertEquals(1,c.size());
    assertEquals(""String_Node_Str"",c.get(0));
  }
{
    URI u=UriBuilder.fromPath(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").replaceQueryParam(""String_Node_Str"",null).build();
    assertTrue(u.toString().equals(""String_Node_Str""));
  }
{
    URI u=UriBuilder.fromPath(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").replaceQueryParam(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"").build();
    assertTrue(u.toString().equals(""String_Node_Str""));
  }
}"
51235,"/** 
 * <p>Read the entire list of body parts from the Input stream, using the appropriate provider implementation to deserialize each body part's entity.</p>
 * @param type The class of the object to be read (i.e. {@link MultiPart}.class)
 * @param genericType The type of object to be written
 * @param annotations Annotations on the resource method that returned this object
 * @param mediaType Media type (<code>multipart/*</code>) of this entity
 * @param headers Mutable map of HTTP headers for the entire response
 * @param stream Output stream to which the entity should be written
 * @throws java.io.IOException if an I/O error occurs
 * @throws javax.ws.rs.WebApplicationException if an HTTP error responseneeds to be produced (only effective if the response is not committed yet)
 * @throws javax.ws.rs.WebApplicationException if the Content-Dispositionheader of a <code>multipart/form-data</code> body part cannot be parsed
 */
public MultiPart readFrom(Class<MultiPart> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream stream) throws IOException, WebApplicationException {
  try {
    MIMEMessage mm=new MIMEMessage(stream,mediaType.getParameters().get(""String_Node_Str""),mimeConfig);
    boolean formData=false;
    MultiPart multiPart=null;
    if (MediaTypes.typeEquals(mediaType,MediaType.MULTIPART_FORM_DATA_TYPE)) {
      multiPart=new FormDataMultiPart();
      formData=true;
    }
 else {
      multiPart=new MultiPart();
    }
    multiPart.setProviders(providers);
    MultivaluedMap<String,String> mpHeaders=multiPart.getHeaders();
    for (    Map.Entry<String,List<String>> entry : headers.entrySet()) {
      List<String> values=entry.getValue();
      for (      String value : values) {
        mpHeaders.add(entry.getKey(),value);
      }
    }
    if (!formData) {
      multiPart.setMediaType(mediaType);
    }
    for (    MIMEPart mp : mm.getAttachments()) {
      BodyPart bodyPart=null;
      if (formData) {
        bodyPart=new FormDataBodyPart();
      }
 else {
        bodyPart=new BodyPart();
      }
      bodyPart.setProviders(providers);
      for (      Header h : mp.getAllHeaders()) {
        bodyPart.getHeaders().add(h.getName(),h.getValue());
      }
      try {
        bodyPart.setMediaType(MediaType.valueOf(mp.getContentType()));
        bodyPart.getContentDisposition();
      }
 catch (      IllegalArgumentException ex) {
        throw new WebApplicationException(ex);
      }
      bodyPart.setEntity(new BodyPartEntity(mp));
      multiPart.getBodyParts().add(bodyPart);
    }
    if (closeableService != null)     closeableService.add(multiPart);
    return multiPart;
  }
 catch (  MIMEParsingException ex) {
    throw new WebApplicationException(ex);
  }
}","/** 
 * <p>Read the entire list of body parts from the Input stream, using the appropriate provider implementation to deserialize each body part's entity.</p>
 * @param type The class of the object to be read (i.e. {@link MultiPart}.class)
 * @param genericType The type of object to be written
 * @param annotations Annotations on the resource method that returned this object
 * @param mediaType Media type (<code>multipart/*</code>) of this entity
 * @param headers Mutable map of HTTP headers for the entire response
 * @param stream Output stream to which the entity should be written
 * @throws java.io.IOException if an I/O error occurs
 * @throws javax.ws.rs.WebApplicationException if an HTTP error responseneeds to be produced (only effective if the response is not committed yet)
 * @throws javax.ws.rs.WebApplicationException if the Content-Dispositionheader of a <code>multipart/form-data</code> body part cannot be parsed
 */
public MultiPart readFrom(Class<MultiPart> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream stream) throws IOException, WebApplicationException {
  try {
    MIMEMessage mm=new MIMEMessage(stream,mediaType.getParameters().get(""String_Node_Str""),mimeConfig);
    boolean formData=false;
    MultiPart multiPart=null;
    if (MediaTypes.typeEquals(mediaType,MediaType.MULTIPART_FORM_DATA_TYPE)) {
      multiPart=new FormDataMultiPart();
      formData=true;
    }
 else {
      multiPart=new MultiPart();
    }
    multiPart.setProviders(providers);
    MultivaluedMap<String,String> mpHeaders=multiPart.getHeaders();
    for (    Map.Entry<String,List<String>> entry : headers.entrySet()) {
      List<String> values=entry.getValue();
      for (      String value : values) {
        mpHeaders.add(entry.getKey(),value);
      }
    }
    if (!formData) {
      multiPart.setMediaType(mediaType);
    }
    for (    MIMEPart mp : mm.getAttachments()) {
      BodyPart bodyPart=null;
      if (formData) {
        bodyPart=new FormDataBodyPart();
      }
 else {
        bodyPart=new BodyPart();
      }
      bodyPart.setProviders(providers);
      for (      Header h : mp.getAllHeaders()) {
        bodyPart.getHeaders().add(h.getName(),h.getValue());
      }
      try {
        String contentType=bodyPart.getHeaders().getFirst(""String_Node_Str"");
        if (contentType != null)         bodyPart.setMediaType(MediaType.valueOf(contentType));
        bodyPart.getContentDisposition();
      }
 catch (      IllegalArgumentException ex) {
        throw new WebApplicationException(ex);
      }
      bodyPart.setEntity(new BodyPartEntity(mp));
      multiPart.getBodyParts().add(bodyPart);
    }
    if (closeableService != null)     closeableService.add(multiPart);
    return multiPart;
  }
 catch (  MIMEParsingException ex) {
    throw new WebApplicationException(ex);
  }
}"
51236,"public static final AbstractResource createResource(Class<?> resourceClass){
  final Class<?> annotatedResourceClass=getAnnotatedResourceClass(resourceClass);
  final Path rPathAnnotation=annotatedResourceClass.getAnnotation(Path.class);
  final boolean isRootResourceClass=(null != rPathAnnotation);
  final boolean isEncodedAnotOnClass=(null != annotatedResourceClass.getAnnotation(Encoded.class));
  AbstractResource resource;
  if (isRootResourceClass) {
    resource=new AbstractResource(resourceClass,new PathValue(rPathAnnotation.value()));
  }
 else {
    resource=new AbstractResource(resourceClass);
  }
  workOutConstructorsList(resource,resourceClass.getConstructors(),isEncodedAnotOnClass);
  workOutFieldsList(resource,isEncodedAnotOnClass);
  final MethodList methodList=new MethodList(resourceClass);
  workOutSetterMethodsList(resource,methodList,isEncodedAnotOnClass);
  final Consumes classScopeConsumesAnnotation=annotatedResourceClass.getAnnotation(Consumes.class);
  final Produces classScopeProducesAnnotation=annotatedResourceClass.getAnnotation(Produces.class);
  workOutResourceMethodsList(resource,methodList,isEncodedAnotOnClass,classScopeConsumesAnnotation,classScopeProducesAnnotation);
  workOutSubResourceMethodsList(resource,methodList,isEncodedAnotOnClass,classScopeConsumesAnnotation,classScopeProducesAnnotation);
  workOutSubResourceLocatorsList(resource,methodList,isEncodedAnotOnClass);
  workOutPostConstructPreDestroy(resource,methodList);
  logNonPublicMethods(resourceClass);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(ImplMessages.NEW_AR_CREATED_BY_INTROSPECTION_MODELER(resource.toString()));
  }
  return resource;
}","public static final AbstractResource createResource(Class<?> resourceClass){
  final Class<?> annotatedResourceClass=getAnnotatedResourceClass(resourceClass);
  final Path rPathAnnotation=annotatedResourceClass.getAnnotation(Path.class);
  final boolean isRootResourceClass=(null != rPathAnnotation);
  final boolean isEncodedAnotOnClass=(null != annotatedResourceClass.getAnnotation(Encoded.class));
  AbstractResource resource;
  if (isRootResourceClass) {
    resource=new AbstractResource(resourceClass,new PathValue(rPathAnnotation.value()));
  }
 else {
    resource=new AbstractResource(resourceClass);
  }
  workOutConstructorsList(resource,resourceClass.getConstructors(),isEncodedAnotOnClass);
  workOutFieldsList(resource,isEncodedAnotOnClass);
  final MethodList methodList=new MethodList(resourceClass);
  workOutSetterMethodsList(resource,methodList,isEncodedAnotOnClass);
  final Consumes classScopeConsumesAnnotation=annotatedResourceClass.getAnnotation(Consumes.class);
  final Produces classScopeProducesAnnotation=annotatedResourceClass.getAnnotation(Produces.class);
  workOutResourceMethodsList(resource,methodList,isEncodedAnotOnClass,classScopeConsumesAnnotation,classScopeProducesAnnotation);
  workOutSubResourceMethodsList(resource,methodList,isEncodedAnotOnClass,classScopeConsumesAnnotation,classScopeProducesAnnotation);
  workOutSubResourceLocatorsList(resource,methodList,isEncodedAnotOnClass);
  workOutPostConstructPreDestroy(resource,methodList);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(ImplMessages.NEW_AR_CREATED_BY_INTROSPECTION_MODELER(resource.toString()));
  }
  return resource;
}"
51237,"private void checkParameters(Method m){
  Annotation[][] pas=m.getParameterAnnotations();
  int paramCount=0;
  for (  Annotation[] pa : pas) {
    paramCount++;
    int annotCount=0;
    for (    Annotation a : pa) {
      if (ParamAnnotationSET.contains(a.annotationType())) {
        annotCount++;
        if (annotCount > 1) {
          issueList.add(new ResourceModelIssue(m,ImplMessages.AMBIGUOUS_PARAMETER(m.toString(),Integer.toString(paramCount)),false));
          break;
        }
      }
    }
  }
}","private void checkParameters(Method m){
  Annotation[][] pas=m.getParameterAnnotations();
  int paramCount=0;
  for (  Annotation[] pa : pas) {
    paramCount++;
    checkParameter(m,m.toString(),Integer.toString(paramCount),pa);
  }
}"
51238,"public void visitAbstractResource(AbstractResource resource){
  if ((resource.getResourceMethods().size() + resource.getSubResourceMethods().size() + resource.getSubResourceLocators().size()) == 0) {
    issueList.add(new ResourceModelIssue(resource,ImplMessages.ERROR_NO_SUB_RES_METHOD_LOCATOR_FOUND(resource.getResourceClass()),false));
  }
  if (resource.isRootResource() && ((null == resource.getPath()) || (null == resource.getPath().getValue()))) {
    issueList.add(new ResourceModelIssue(resource,ImplMessages.ERROR_RES_URI_PATH_INVALID(resource.getResourceClass(),resource.getPath()),true));
  }
  if (resource.isRootResource() && resource.getConstructors().isEmpty()) {
    issueList.add(new ResourceModelIssue(resource,ImplMessages.ROOT_RES_NO_PUBLIC_CTOR(resource.getResourceClass()),true));
  }
  Map<UriTemplate,String> srlUriTemplates=new HashMap<UriTemplate,String>();
  Map<UriTemplate,String> srlUriTemplatesWithSlash=new HashMap<UriTemplate,String>();
  for (  AbstractSubResourceLocator srl : resource.getSubResourceLocators()) {
    UriTemplate srlUriTemplate=new UriTemplate(srl.getPath().getValue());
    UriTemplate srlUriTemplateWithSlash=srlUriTemplate.endsWithSlash() ? srlUriTemplate : new UriTemplate(srl.getPath().getValue() + '/');
    if (srlUriTemplates.containsKey(srlUriTemplate)) {
      issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRLS(resource.getResourceClass(),srlUriTemplate.getTemplate(),srlUriTemplates.get(srlUriTemplate)),true));
    }
 else {
      if (srlUriTemplatesWithSlash.containsKey(srlUriTemplateWithSlash)) {
        issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRLS(resource.getResourceClass(),srlUriTemplate.getTemplate(),srlUriTemplatesWithSlash.get(srlUriTemplate)),true));
      }
 else {
        srlUriTemplatesWithSlash.put(srlUriTemplateWithSlash,srlUriTemplate.getTemplate());
      }
      srlUriTemplates.put(srlUriTemplate,srlUriTemplate.getTemplate());
    }
  }
  findOutMTAmbiguities(resource,resource.getResourceMethods(),new ResourceMethodAmbiguityErrMsgGenerator<AbstractResourceMethod>(){
    void generateInErrMsg(    AbstractResource resource,    AbstractResourceMethod arm1,    AbstractResourceMethod arm2,    MediaType mt){
      issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_RMS_IN(resource.getResourceClass(),arm1.getHttpMethod(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedInputTypes(),arm2.getSupportedInputTypes()),false));
    }
    void generateOutErrMsg(    AbstractResource resource,    AbstractResourceMethod arm1,    AbstractResourceMethod arm2,    MediaType mt){
      issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_RMS_OUT(resource.getResourceClass(),arm1.getHttpMethod(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedOutputTypes(),arm2.getSupportedOutputTypes()),true));
    }
  }
);
  findOutMTAmbiguities(resource,resource.getSubResourceMethods(),new ResourceMethodAmbiguityErrMsgGenerator<AbstractSubResourceMethod>(){
    boolean isConflictingPaths(    String path1,    String path2){
      UriTemplate t1=new UriTemplate(path1);
      UriTemplate t2=new UriTemplate(path2);
      if (t1.equals(t2)) {
        return true;
      }
 else {
        if (t1.endsWithSlash()) {
          return (!t2.endsWithSlash()) && t1.equals(new UriTemplate(path2 + ""String_Node_Str""));
        }
 else {
          return t2.endsWithSlash() && t2.equals(new UriTemplate(path1 + ""String_Node_Str""));
        }
      }
    }
    void generateInErrMsg(    AbstractResource resource,    AbstractSubResourceMethod arm1,    AbstractSubResourceMethod arm2,    MediaType mt){
      if (isConflictingPaths(arm1.getPath().getValue(),arm2.getPath().getValue())) {
        issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRMS_IN(resource.getResourceClass(),arm1.getHttpMethod(),arm1.getPath().getValue(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedInputTypes(),arm2.getSupportedInputTypes()),false));
      }
    }
    void generateOutErrMsg(    AbstractResource resource,    AbstractSubResourceMethod arm1,    AbstractSubResourceMethod arm2,    MediaType mt){
      if (isConflictingPaths(arm1.getPath().getValue(),arm2.getPath().getValue())) {
        issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRMS_OUT(resource.getResourceClass(),arm1.getHttpMethod(),arm1.getPath().getValue(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedOutputTypes(),arm2.getSupportedOutputTypes()),true));
      }
    }
  }
);
}","public void visitAbstractResource(AbstractResource resource){
  if ((resource.getResourceMethods().size() + resource.getSubResourceMethods().size() + resource.getSubResourceLocators().size()) == 0) {
    issueList.add(new ResourceModelIssue(resource,ImplMessages.ERROR_NO_SUB_RES_METHOD_LOCATOR_FOUND(resource.getResourceClass()),false));
  }
  if (resource.isRootResource() && ((null == resource.getPath()) || (null == resource.getPath().getValue()))) {
    issueList.add(new ResourceModelIssue(resource,ImplMessages.ERROR_RES_URI_PATH_INVALID(resource.getResourceClass(),resource.getPath()),true));
  }
  if (resource.isRootResource() && resource.getConstructors().isEmpty()) {
    issueList.add(new ResourceModelIssue(resource,ImplMessages.ROOT_RES_NO_PUBLIC_CTOR(resource.getResourceClass()),true));
  }
  Map<UriTemplate,String> srlUriTemplates=new HashMap<UriTemplate,String>();
  Map<UriTemplate,String> srlUriTemplatesWithSlash=new HashMap<UriTemplate,String>();
  for (  AbstractSubResourceLocator srl : resource.getSubResourceLocators()) {
    UriTemplate srlUriTemplate=new UriTemplate(srl.getPath().getValue());
    UriTemplate srlUriTemplateWithSlash=srlUriTemplate.endsWithSlash() ? srlUriTemplate : new UriTemplate(srl.getPath().getValue() + '/');
    if (srlUriTemplates.containsKey(srlUriTemplate)) {
      issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRLS(resource.getResourceClass(),srlUriTemplate.getTemplate(),srlUriTemplates.get(srlUriTemplate)),true));
    }
 else {
      if (srlUriTemplatesWithSlash.containsKey(srlUriTemplateWithSlash)) {
        issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRLS(resource.getResourceClass(),srlUriTemplate.getTemplate(),srlUriTemplatesWithSlash.get(srlUriTemplate)),true));
      }
 else {
        srlUriTemplatesWithSlash.put(srlUriTemplateWithSlash,srlUriTemplate.getTemplate());
      }
      srlUriTemplates.put(srlUriTemplate,srlUriTemplate.getTemplate());
    }
  }
  findOutMTAmbiguities(resource,resource.getResourceMethods(),new ResourceMethodAmbiguityErrMsgGenerator<AbstractResourceMethod>(){
    void generateInErrMsg(    AbstractResource resource,    AbstractResourceMethod arm1,    AbstractResourceMethod arm2,    MediaType mt){
      issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_RMS_IN(resource.getResourceClass(),arm1.getHttpMethod(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedInputTypes(),arm2.getSupportedInputTypes()),false));
    }
    void generateOutErrMsg(    AbstractResource resource,    AbstractResourceMethod arm1,    AbstractResourceMethod arm2,    MediaType mt){
      issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_RMS_OUT(resource.getResourceClass(),arm1.getHttpMethod(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedOutputTypes(),arm2.getSupportedOutputTypes()),true));
    }
  }
);
  findOutMTAmbiguities(resource,resource.getSubResourceMethods(),new ResourceMethodAmbiguityErrMsgGenerator<AbstractSubResourceMethod>(){
    boolean isConflictingPaths(    String path1,    String path2){
      UriTemplate t1=new UriTemplate(path1);
      UriTemplate t2=new UriTemplate(path2);
      if (t1.equals(t2)) {
        return true;
      }
 else {
        if (t1.endsWithSlash()) {
          return (!t2.endsWithSlash()) && t1.equals(new UriTemplate(path2 + ""String_Node_Str""));
        }
 else {
          return t2.endsWithSlash() && t2.equals(new UriTemplate(path1 + ""String_Node_Str""));
        }
      }
    }
    void generateInErrMsg(    AbstractResource resource,    AbstractSubResourceMethod arm1,    AbstractSubResourceMethod arm2,    MediaType mt){
      if (isConflictingPaths(arm1.getPath().getValue(),arm2.getPath().getValue())) {
        issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRMS_IN(resource.getResourceClass(),arm1.getHttpMethod(),arm1.getPath().getValue(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedInputTypes(),arm2.getSupportedInputTypes()),false));
      }
    }
    void generateOutErrMsg(    AbstractResource resource,    AbstractSubResourceMethod arm1,    AbstractSubResourceMethod arm2,    MediaType mt){
      if (isConflictingPaths(arm1.getPath().getValue(),arm2.getPath().getValue())) {
        issueList.add(new ResourceModelIssue(resource,ImplMessages.AMBIGUOUS_SRMS_OUT(resource.getResourceClass(),arm1.getHttpMethod(),arm1.getPath().getValue(),mt,arm1.getMethod().getName(),arm2.getMethod().getName(),arm1.getSupportedOutputTypes(),arm2.getSupportedOutputTypes()),true));
      }
    }
  }
);
  for (  AbstractSetterMethod asm : resource.getSetterMethods()) {
    checkParameter(asm,asm.getMethod().toString(),""String_Node_Str"",asm.getMethod().getDeclaredAnnotations());
  }
  for (  AbstractField af : resource.getFields()) {
    checkParameter(af,af.getField().toString(),af.getField().getName(),af.getField().getDeclaredAnnotations());
  }
  checkNonPublicMethods(resource);
}"
51239,"public void testAmbiguousParams() throws Exception {
  System.out.println(""String_Node_Str"");
  AbstractResource ar=IntrospectionModeller.createResource(TestAmbiguousParams.class);
  BasicValidator validator=new BasicValidator();
  validator.validate(ar);
  printIssueList(validator);
  assertTrue(!validator.fatalIssuesFound());
  assertEquals(4,validator.getIssueList().size());
}","public void testAmbiguousParams() throws Exception {
  System.out.println(""String_Node_Str"");
  AbstractResource ar=IntrospectionModeller.createResource(TestAmbiguousParams.class);
  BasicValidator validator=new BasicValidator();
  validator.validate(ar);
  printIssueList(validator);
  assertTrue(!validator.fatalIssuesFound());
  assertEquals(6,validator.getIssueList().size());
}"
51240,"/** 
 * Create ConnectionListener filter.
 * @param listenerFactory {@link BytesTransferredListenerFactory} instance
 */
public ConnectionListenerFilter(OnStartConnectionListener listenerFactory){
  if (listenerFactory == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.listenerFactory=listenerFactory;
}","/** 
 * Creates ConnectionListenerFilter.
 * @param listenerFactory {@link OnStartConnectionListener} instance
 */
public ConnectionListenerFilter(OnStartConnectionListener listenerFactory){
  if (listenerFactory == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.listenerFactory=listenerFactory;
}"
51241,"public boolean accept(CharSequence path,Object resource,UriRuleContext context){
  pushMatch(context);
  resource=invokeSubLocator(resource,context);
  if (resource instanceof Class) {
    resource=context.getResource((Class)resource);
  }
  context.pushResource(resource);
  final Iterator<UriRule> matches=context.getRules(resource.getClass()).match(path,context);
  while (matches.hasNext())   if (matches.next().accept(path,resource,context))   return true;
  return false;
}","public boolean accept(CharSequence path,Object resource,UriRuleContext context){
  pushMatch(context);
  resource=invokeSubLocator(resource,context);
  if (resource == null)   return false;
  if (resource instanceof Class) {
    resource=context.getResource((Class)resource);
  }
  context.pushResource(resource);
  final Iterator<UriRule> matches=context.getRules(resource.getClass()).match(path,context);
  while (matches.hasNext())   if (matches.next().accept(path,resource,context))   return true;
  return false;
}"
51242,"private static int createURIComponent(final UriComponent.Type t,String template,final String[] values,final int offset,final boolean encode,final Map<String,String> mapValues,final StringBuilder b){
  if (template.indexOf('{') == -1) {
    b.append(template);
    return offset;
  }
  template=new UriTemplateParser(template).getNormalizedTemplate();
  final Matcher m=TEMPLATE_NAMES_PATTERN.matcher(template);
  int v=offset;
  int i=0;
  while (m.find()) {
    b.append(template,i,m.start());
    final String tVariable=m.group(1);
    String tValue=mapValues.get(tVariable);
    if (tValue != null) {
      b.append(tValue);
    }
 else {
      if (v < values.length) {
        tValue=values[v++];
        if (tValue != null) {
          mapValues.put(tVariable,tValue);
          if (encode)           tValue=UriComponent.encode(tValue,t);
 else           tValue=UriComponent.contextualEncode(tValue,t);
          b.append(tValue);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + tVariable + ""String_Node_Str"");
        }
      }
    }
    i=m.end();
  }
  b.append(template,i,template.length());
  return v;
}","private static int createURIComponent(final UriComponent.Type t,String template,final String[] values,final int offset,final boolean encode,final Map<String,String> mapValues,final StringBuilder b){
  if (template.indexOf('{') == -1) {
    b.append(template);
    return offset;
  }
  template=new UriTemplateParser(template).getNormalizedTemplate();
  final Matcher m=TEMPLATE_NAMES_PATTERN.matcher(template);
  int v=offset;
  int i=0;
  while (m.find()) {
    b.append(template,i,m.start());
    final String tVariable=m.group(1);
    String tValue=mapValues.get(tVariable);
    if (tValue != null) {
      b.append(tValue);
    }
 else     if (v < values.length) {
      tValue=values[v++];
      if (tValue != null) {
        if (encode)         tValue=UriComponent.encode(tValue,t);
 else         tValue=UriComponent.contextualEncode(tValue,t);
        mapValues.put(tVariable,tValue);
        b.append(tValue);
      }
 else {
        throw templateVariableHasNoValue(tVariable);
      }
    }
 else {
      throw templateVariableHasNoValue(tVariable);
    }
    i=m.end();
  }
  b.append(template,i,template.length());
  return v;
}"
51243,"public void testBuildEncodedQuery(){
  URI u=UriBuilder.fromPath(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),u);
}","public void testBuildEncodedQuery(){
  URI u=UriBuilder.fromPath(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),u);
  u=UriBuilder.fromPath(""String_Node_Str"").path(""String_Node_Str"").buildFromEncoded(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(URI.create(""String_Node_Str""),u);
}"
51244,"public EntityTag fromString(String header){
  if (header == null)   throw new IllegalArgumentException(""String_Node_Str"");
  boolean weak=false;
  if (header.startsWith(""String_Node_Str"")) {
    header=header.substring(2);
    weak=true;
  }
  HttpHeaderReader reader=HttpHeaderReader.newInstance(header);
  try {
    EntityTag eTag=new EntityTag(reader.nextQuotedString(),weak);
    return eTag;
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + header + ""String_Node_Str"",ex);
  }
}","public EntityTag fromString(String header){
  if (header == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    HttpHeaderReader reader=HttpHeaderReader.newInstance(header);
    Event e=reader.next(false);
    if (e == Event.QuotedString) {
      return new EntityTag(reader.getEventValue());
    }
 else     if (e == Event.Token) {
      if (reader.getEventValue().equals(""String_Node_Str"")) {
        reader.nextSeparator('/');
        return new EntityTag(reader.nextQuotedString(),true);
      }
    }
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + header + ""String_Node_Str"",ex);
  }
  throw new IllegalArgumentException(""String_Node_Str"" + header + ""String_Node_Str"");
}"
51245,"/** 
 * Specify the property value for the current   {@link WadlGenerator}.<br/> The   {@link WadlGenerator} property can be of type {@link String},   {@link File} or any other type that providesa  {@link String} constructor.If the  {@link WadlGenerator} property is of type {@link File}, then the specified property value can start with the prefix <em>classpath:</em> to denote, that the File shall be loaded from the classpath like this: <pre><code>new File( generator.getClass().getResource( strippedFilename ).toURI() )</code></pre> Notice that the file is loaded as a resource from the classpath in this case, therefore <em>classpath:test.xml</em> refers to a file in the package of the specified <code>&lt;classname&gt;</code>. The file reference <em>classpath:/test.xml</em> refers to a file that is in the root of the classpath.
 * @param propName the property name
 * @param propValue the stringified property value
 * @return this builder instance
 */
public WadlGeneratorConfigDescriptionBuilder prop(String propName,String propValue){
  if (_description.getProperties() == null) {
    _description.setProperties(new Properties());
  }
  _description.getProperties().put(propName,propValue);
  return this;
}","/** 
 * Specify the property value for the current   {@link WadlGenerator}. <p> The   {@link WadlGenerator} property can be of type {@link String},   {@link File},   {@link InputStream}or any type that provides a   {@link String} constructor.</p> <p> If the  {@link WadlGenerator} property is of type {@link File}, then the specified property value can start with the prefix <em>classpath:</em> to denote, that the File shall be loaded from the classpath like this: <pre><code>new File( generator.getClass().getResource( strippedFilename ).toURI() )</code></pre> Notice that the file is loaded as a resource from the classpath in this case, therefore <em>classpath:test.xml</em> refers to a file in the package of the specified <code>&lt;classname&gt;</code>. The file reference <em>classpath:/test.xml</em> refers to a file that is in the root of the classpath. </p> <p> If the   {@link WadlGenerator} property is of type {@link InputStream}, then the specified property value is loaded with   {@link ClassLoader#getResourceAsStream(String)} using the current threads context classloader.The  {@link InputStream} will be closed after {@link WadlGenerator#init()} was called and therefore must not be closedby the  {@link WadlGenerator} using this stream.</p>
 * @param propName the property name
 * @param propValue the stringified property value
 * @return this builder instance
 */
public WadlGeneratorConfigDescriptionBuilder prop(String propName,String propValue){
  if (_description.getProperties() == null) {
    _description.setProperties(new Properties());
  }
  _description.getProperties().put(propName,propValue);
  return this;
}"
51246,"static WadlGenerator loadWadlGeneratorDescriptions(List<WadlGeneratorDescription> wadlGeneratorDescriptions) throws Exception {
  WadlGenerator wadlGenerator=new WadlGeneratorImpl();
  if (wadlGeneratorDescriptions != null && !wadlGeneratorDescriptions.isEmpty()) {
    for (    WadlGeneratorDescription wadlGeneratorDescription : wadlGeneratorDescriptions) {
      wadlGenerator=loadWadlGenerator(wadlGeneratorDescription,wadlGenerator);
    }
  }
  wadlGenerator.init();
  return wadlGenerator;
}","static WadlGenerator loadWadlGeneratorDescriptions(List<WadlGeneratorDescription> wadlGeneratorDescriptions) throws Exception {
  WadlGenerator wadlGenerator=new WadlGeneratorImpl();
  final CallbackList callbacks=new CallbackList();
  try {
    if (wadlGeneratorDescriptions != null && !wadlGeneratorDescriptions.isEmpty()) {
      for (      WadlGeneratorDescription wadlGeneratorDescription : wadlGeneratorDescriptions) {
        final WadlGeneratorControl control=loadWadlGenerator(wadlGeneratorDescription,wadlGenerator);
        wadlGenerator=control.wadlGenerator;
        callbacks.add(control.callback);
      }
    }
    wadlGenerator.init();
  }
  finally {
    callbacks.callback();
  }
  return wadlGenerator;
}"
51247,"private static void setProperty(final Object generator,final String propertyName,final Object propertyValue) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException, URISyntaxException {
  final String methodName=""String_Node_Str"" + propertyName.substring(0,1).toUpperCase() + propertyName.substring(1);
  final Method method=getMethodByName(methodName,generator.getClass());
  if (method.getParameterTypes().length != 1) {
    throw new RuntimeException(""String_Node_Str"" + methodName + ""String_Node_Str""+ method.getParameterTypes().length);
  }
  final Class<?> paramClazz=method.getParameterTypes()[0];
  if (paramClazz == propertyValue.getClass()) {
    method.invoke(generator,propertyValue);
  }
 else   if (File.class.equals(paramClazz) && propertyValue instanceof String) {
    final String filename=propertyValue.toString();
    if (filename.startsWith(""String_Node_Str"")) {
      final String strippedFilename=filename.substring(""String_Node_Str"".length());
      final URL resource=generator.getClass().getResource(strippedFilename);
      if (resource == null) {
        throw new RuntimeException(""String_Node_Str"" + strippedFilename + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      final File file=new File(resource.toURI());
      method.invoke(generator,file);
    }
 else {
      method.invoke(generator,new File(filename));
    }
  }
 else {
    final Constructor<?> paramTypeConstructor=paramClazz.getConstructor(propertyValue.getClass());
    if (paramTypeConstructor != null) {
      final Object typedPropertyValue=paramTypeConstructor.newInstance(propertyValue);
      method.invoke(generator,typedPropertyValue);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ ""String_Node_Str""+ propertyValue.getClass()+ ""String_Node_Str""+ propertyValue.getClass()+ ""String_Node_Str""+ ""String_Node_Str""+ paramClazz.getName());
    }
  }
}","/** 
 * Set the object (generator) property with the given name to the specified value.
 * @param generator the object, on which the property shall be set
 * @param propertyName the name of the property, that shall be set
 * @param propertyValue the value to populate the property with
 * @return a {@link Callback} object that must be called later, or null if no callback is required.
 * @throws Exception if s.th. goes wrong
 */
private static Callback setProperty(final Object generator,final String propertyName,final Object propertyValue) throws Exception {
  Callback result=null;
  final String methodName=""String_Node_Str"" + propertyName.substring(0,1).toUpperCase() + propertyName.substring(1);
  final Method method=getMethodByName(methodName,generator.getClass());
  if (method.getParameterTypes().length != 1) {
    throw new RuntimeException(""String_Node_Str"" + methodName + ""String_Node_Str""+ method.getParameterTypes().length);
  }
  final Class<?> paramClazz=method.getParameterTypes()[0];
  if (paramClazz == propertyValue.getClass()) {
    method.invoke(generator,propertyValue);
  }
 else   if (File.class.equals(paramClazz) && propertyValue instanceof String) {
    final String filename=propertyValue.toString();
    if (filename.startsWith(""String_Node_Str"")) {
      final String strippedFilename=filename.substring(""String_Node_Str"".length());
      final URL resource=generator.getClass().getResource(strippedFilename);
      if (resource == null) {
        throw new RuntimeException(""String_Node_Str"" + strippedFilename + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      final File file=new File(resource.toURI());
      method.invoke(generator,file);
    }
 else {
      method.invoke(generator,new File(filename));
    }
  }
 else   if (InputStream.class.equals(paramClazz) && propertyValue instanceof String) {
    final String resource=propertyValue.toString();
    ClassLoader loader=Thread.currentThread().getContextClassLoader();
    if (loader == null) {
      loader=WadlGeneratorLoader.class.getClassLoader();
    }
    final InputStream is=loader.getResourceAsStream(resource);
    if (is == null) {
      String message=""String_Node_Str"" + resource + ""String_Node_Str"";
      throw new RuntimeException(message);
    }
    result=new Callback(){
      public void callback(){
        try {
          is.close();
        }
 catch (        IOException e) {
          LOGGER.log(Level.WARNING,""String_Node_Str"" + resource,e);
        }
      }
    }
;
    try {
      method.invoke(generator,is);
    }
 catch (    Exception e) {
      is.close();
      throw e;
    }
  }
 else {
    final Constructor<?> paramTypeConstructor=paramClazz.getConstructor(propertyValue.getClass());
    if (paramTypeConstructor != null) {
      final Object typedPropertyValue=paramTypeConstructor.newInstance(propertyValue);
      method.invoke(generator,typedPropertyValue);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ ""String_Node_Str""+ propertyValue.getClass()+ ""String_Node_Str""+ propertyValue.getClass()+ ""String_Node_Str""+ ""String_Node_Str""+ paramClazz.getName());
    }
  }
  return result;
}"
51248,"private static WadlGenerator loadWadlGenerator(WadlGeneratorDescription wadlGeneratorDescription,com.sun.jersey.server.wadl.WadlGenerator wadlGeneratorDelegate) throws Exception {
  LOGGER.info(""String_Node_Str"" + wadlGeneratorDescription.getGeneratorClass().getName());
  final WadlGenerator generator=wadlGeneratorDescription.getGeneratorClass().newInstance();
  generator.setWadlGeneratorDelegate(wadlGeneratorDelegate);
  if (wadlGeneratorDescription.getProperties() != null && !wadlGeneratorDescription.getProperties().isEmpty()) {
    for (    Entry<Object,Object> entry : wadlGeneratorDescription.getProperties().entrySet()) {
      setProperty(generator,entry.getKey().toString(),entry.getValue());
    }
  }
  return generator;
}","private static WadlGeneratorControl loadWadlGenerator(WadlGeneratorDescription wadlGeneratorDescription,com.sun.jersey.server.wadl.WadlGenerator wadlGeneratorDelegate) throws Exception {
  LOGGER.info(""String_Node_Str"" + wadlGeneratorDescription.getGeneratorClass().getName());
  final WadlGenerator generator=wadlGeneratorDescription.getGeneratorClass().newInstance();
  generator.setWadlGeneratorDelegate(wadlGeneratorDelegate);
  CallbackList callbacks=null;
  if (wadlGeneratorDescription.getProperties() != null && !wadlGeneratorDescription.getProperties().isEmpty()) {
    callbacks=new CallbackList();
    for (    Entry<Object,Object> entry : wadlGeneratorDescription.getProperties().entrySet()) {
      final Callback callback=setProperty(generator,entry.getKey().toString(),entry.getValue());
      callbacks.add(callback);
    }
  }
  return new WadlGeneratorControl(generator,callbacks);
}"
51249,"public Collection<String> getNonStrings(){
  return (nonStrings != null) ? Collections.unmodifiableCollection(nonStrings) : null;
}","/** 
 * Returns names of JSON objects, which will be serialized out as non-strings, i.e. without delimiting their values with double quotes
 * @return name of non-string JSON objects
 * @see Builder#nonStrings(java.lang.String[])
 */
public Collection<String> getNonStrings(){
  return (nonStrings != null) ? Collections.unmodifiableCollection(nonStrings) : null;
}"
51250,"public Collection<String> getArrays(){
  return (arrays != null) ? Collections.unmodifiableCollection(arrays) : null;
}","/** 
 * Returns JSON array names property
 * @return collection of array names
 * @see Builder#arrays(java.lang.String[]) 
 */
public Collection<String> getArrays(){
  return (arrays != null) ? Collections.unmodifiableCollection(arrays) : null;
}"
51251,"public boolean isRootUnwrapping(){
  return rootUnwrapping;
}","/** 
 * Says if the root element will be stripped off
 * @return true, if root element has to be stripped off
 * @see Builder#rootUnwrapping(boolean) 
 */
public boolean isRootUnwrapping(){
  return rootUnwrapping;
}"
51252,"public Notation getNotation(){
  return notation;
}","/** 
 * Returns JSON notation selected for this configuration
 * @return JSON notation
 */
public Notation getNotation(){
  return notation;
}"
51253,"private final void processProperties(Map<String,Object> properties){
  final Collection<String> jsonKeys=new HashSet<String>();
  for (  String k : Collections.unmodifiableSet(properties.keySet())) {
    if (k.startsWith(NAMESPACE)) {
      jsonKeys.add(k);
    }
  }
  if (!jsonKeys.isEmpty()) {
    if (jsonConfiguration != null) {
      JSONConfiguration.Notation pNotation=JSONConfiguration.Notation.MAPPED;
      if (properties.containsKey(JSONJAXBContext.JSON_NOTATION)) {
        Object nO=properties.get(JSONJAXBContext.JSON_NOTATION);
        if ((nO instanceof JSONJAXBContext.JSONNotation) || (nO instanceof String)) {
          pNotation=_notationMap.get(nO.toString());
        }
      }
      JSONConfiguration.Builder builder=JSONConfiguration.getBuilder(pNotation);
      builder.setArrays((Collection<String>)properties.get(JSONJAXBContext.JSON_ARRAYS));
      builder.setAttrsAsElems((Collection<String>)properties.get(JSONJAXBContext.JSON_ATTRS_AS_ELEMS));
      builder.setNonStrings((Collection<String>)properties.get(JSONJAXBContext.JSON_NON_STRINGS));
      builder.setJsonXml2JsonNs((Map<String,String>)properties.get(JSONJAXBContext.JSON_XML2JSON_NS));
      builder.setRootUnwrapping((Boolean)properties.get(JSONJAXBContext.JSON_ROOT_UNWRAPPING));
      jsonConfiguration=builder.build();
    }
  }
  for (  String k : jsonKeys) {
    properties.remove(k);
  }
}","private final void processProperties(Map<String,Object> properties){
  final Collection<String> jsonKeys=new HashSet<String>();
  for (  String k : Collections.unmodifiableSet(properties.keySet())) {
    if (k.startsWith(NAMESPACE)) {
      jsonKeys.add(k);
    }
  }
  if (!jsonKeys.isEmpty()) {
    if (jsonConfiguration == null) {
      JSONConfiguration.Notation pNotation=JSONConfiguration.Notation.MAPPED;
      if (properties.containsKey(JSONJAXBContext.JSON_NOTATION)) {
        Object nO=properties.get(JSONJAXBContext.JSON_NOTATION);
        if ((nO instanceof JSONJAXBContext.JSONNotation) || (nO instanceof String)) {
          pNotation=_notationMap.get(nO.toString());
        }
      }
      JSONConfiguration.Builder builder=null;
switch (pNotation) {
case BADGERFISH:
        builder=JSONConfiguration.badgerFish();
      break;
case MAPPED_JETTISON:
    builder=JSONConfiguration.mappedJettison();
  break;
case NATURAL:
builder=JSONConfiguration.natural();
break;
case MAPPED:
default :
builder=JSONConfiguration.mapped();
break;
}
String[] a=new String[0];
if (properties.containsKey(JSONJAXBContext.JSON_ARRAYS)) {
builder.arrays(((Collection<String>)properties.get(JSONJAXBContext.JSON_ARRAYS)).toArray(a));
}
if (properties.containsKey(JSONJAXBContext.JSON_ATTRS_AS_ELEMS)) {
builder.attributeAsElement(((Collection<String>)properties.get(JSONJAXBContext.JSON_ATTRS_AS_ELEMS)).toArray(a));
}
if (properties.containsKey(JSONJAXBContext.JSON_NON_STRINGS)) {
builder.nonStrings(((Collection<String>)properties.get(JSONJAXBContext.JSON_NON_STRINGS)).toArray(a));
}
if (properties.containsKey(JSONJAXBContext.JSON_XML2JSON_NS)) {
builder.xml2JsonNs((Map<String,String>)properties.get(JSONJAXBContext.JSON_XML2JSON_NS));
}
if (properties.containsKey(JSONJAXBContext.JSON_ROOT_UNWRAPPING)) {
builder.rootUnwrapping((Boolean)properties.get(JSONJAXBContext.JSON_ROOT_UNWRAPPING));
}
jsonConfiguration=builder.build();
}
}
for (String k : jsonKeys) {
properties.remove(k);
}
}"
51254,"/** 
 * Scans packages for matching Java classes.
 * @param packages An array of packages to search.
 * @return The set of matching classes that are annotated with one or more ofthe specified annotations.
 */
public Set<Class<?>> scan(String[] packages){
  this.classes=new HashSet<Class<?>>();
  for (  String p : packages) {
    try {
      String fileP=p.replace('.','/');
      Enumeration<URL> urls=classloader.getResources(fileP);
      while (urls.hasMoreElements()) {
        URL url=urls.nextElement();
        try {
          URI uri=url.toURI();
          index(uri,fileP);
        }
 catch (        URISyntaxException e) {
          LOGGER.warning(""String_Node_Str"" + url + ""String_Node_Str"");
        }
      }
    }
 catch (    IOException ex) {
      String s=""String_Node_Str"" + p + ""String_Node_Str"";
      LOGGER.severe(s);
      throw new RuntimeException(s,ex);
    }
  }
  return classes;
}","/** 
 * Scans packages for matching Java classes.
 * @param packages An array of packages to search.
 * @return The set of matching classes that are annotated with one or more ofthe specified annotations.
 */
public Set<Class<?>> scan(String[] packages){
  this.classes=new HashSet<Class<?>>();
  for (  String p : packages) {
    try {
      String fileP=p.replace('.','/');
      Enumeration<URL> urls=classloader.getResources(fileP);
      while (urls.hasMoreElements()) {
        URL url=urls.nextElement();
        try {
          URI uri=getURI(url);
          index(uri,fileP);
        }
 catch (        URISyntaxException e) {
          LOGGER.warning(""String_Node_Str"" + url + ""String_Node_Str"");
        }
      }
    }
 catch (    IOException ex) {
      String s=""String_Node_Str"" + p + ""String_Node_Str"";
      LOGGER.severe(s);
      throw new RuntimeException(s,ex);
    }
  }
  return classes;
}"
51255,"@Override public int hashCode(){
  return u.hashCode();
}","/** 
 * Returns a hash code for this <code>WebResource</code>. <p> The hash code is the hash code of URI of this <code>WebResource</code>.
 * @return a hash code for this <code>WebResource</code>.
 */
@Override public int hashCode(){
  return u.hashCode();
}"
51256,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof WebResource) {
    final AsyncWebResource that=(AsyncWebResource)obj;
    return that.u.equals(this.u);
  }
  return false;
}","/** 
 * Compares this resource to the specified object. <p> The result is true if and only if the argument is not null and is a <code>WebResource</code> object whose URI is equal to the URI of this <code>WebResource</code>.
 * @param obj the object to compare this <code>WebResource</code> against.
 * @return true if the <code>WebResource</code> are equal; false otherwise.
 */
@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof WebResource) {
    final AsyncWebResource that=(AsyncWebResource)obj;
    return that.u.equals(this.u);
  }
  return false;
}"
51257,"@Override public int hashCode(){
  return u.hashCode();
}","/** 
 * Returns a hash code for this <code>WebResource</code>. <p> The hash code is the hash code of URI of this <code>WebResource</code>.
 * @return a hash code for this <code>WebResource</code>.
 */
@Override public int hashCode(){
  return u.hashCode();
}"
51258,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof WebResource) {
    final WebResource that=(WebResource)obj;
    return that.u.equals(this.u);
  }
  return false;
}","/** 
 * Compares this resource to the specified object. <p> The result is true if and only if the argument is not null and is a <code>WebResource</code> object whose URI is equal to the URI of this <code>WebResource</code>.
 * @param obj the object to compare this <code>WebResource</code> against.
 * @return true if the <code>WebResource</code> are equal; false otherwise.
 */
@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof WebResource) {
    final WebResource that=(WebResource)obj;
    return that.u.equals(this.u);
  }
  return false;
}"
51259,"public void onReload(){
  application=application.clone();
}","public void onReload(){
  WebApplication oldApplication=application;
  application=application.clone();
  oldApplication.destroy();
}"
51260,"public void onReload(){
  application=application.clone();
}","public void onReload(){
  WebApplication oldApplication=application;
  application=application.clone();
  oldApplication.destroy();
}"
51261,"/** 
 * Reload the Web application. This will create and initiate the web application using the same   {@link ResourceConfig} implementationthat was used to load the Web application. <p> This method may be called at runtime, more than once, to reload the Web application. For example, if a  {@link ResourceConfig} implementationis capable of detecting changes to resource classes (addition or removal) or providers then this method may be invoked to reload the web application for such changes to take effect. <p> If this method is called when there are pending requests then such requests will be processed using the previously loaded web application.
 */
public final void reload(){
  WebApplication _application=create();
  initiate(resourceConfig,_application);
  application=_application;
}","/** 
 * Reload the Web application. This will create and initiate the web application using the same   {@link ResourceConfig} implementationthat was used to load the Web application. <p> This method may be called at runtime, more than once, to reload the Web application. For example, if a  {@link ResourceConfig} implementationis capable of detecting changes to resource classes (addition or removal) or providers then this method may be invoked to reload the web application for such changes to take effect. <p> If this method is called when there are pending requests then such requests will be processed using the previously loaded web application.
 */
public final void reload(){
  WebApplication oldApplication=application;
  WebApplication newApplication=create();
  initiate(resourceConfig,newApplication);
  application=newApplication;
  oldApplication.destroy();
}"
51262,"public Locale getLanguage(){
  final String localeString=this.getRequestHeaders().getFirst(HttpHeaders.CONTENT_LANGUAGE);
  if (localeString == null)   return null;
  return new Locale(localeString);
}","public Locale getLanguage(){
  return HttpHelper.getContentLanguageAsLocale(this);
}"
51263,"private Request generateRequest(AbstractResource r,final AbstractResourceMethod m,Map<String,Param> wadlResourceParams){
  if (m.getParameters().size() == 0)   return null;
  Request wadlRequest=_wadlGenerator.createRequest(r,m);
  for (  Parameter p : m.getParameters()) {
    if (p.getSource() == Parameter.Source.ENTITY) {
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        RepresentationType wadlRepresentation=_wadlGenerator.createRequestRepresentation(r,m,mediaType);
        wadlRequest.getRepresentation().add(wadlRepresentation);
      }
    }
 else {
      Param wadlParam=generateParam(r,m,p);
      if (wadlParam == null)       continue;
      if (wadlParam.getStyle() == ParamStyle.TEMPLATE)       wadlResourceParams.put(wadlParam.getName(),wadlParam);
 else       wadlRequest.getParam().add(wadlParam);
    }
  }
  if (wadlRequest.getRepresentation().size() + wadlRequest.getParam().size() == 0)   return null;
 else   return wadlRequest;
}","private Request generateRequest(AbstractResource r,final AbstractResourceMethod m,Map<String,Param> wadlResourceParams){
  if (m.getParameters().size() == 0)   return null;
  Request wadlRequest=_wadlGenerator.createRequest(r,m);
  for (  Parameter p : m.getParameters()) {
    if (p.getSource() == Parameter.Source.ENTITY) {
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        setRepresentationForMediaType(r,m,mediaType,wadlRequest);
      }
    }
 else     if (p.getAnnotation().annotationType() == FormParam.class) {
      for (      MediaType mediaType : m.getSupportedInputTypes()) {
        final RepresentationType wadlRepresentation=setRepresentationForMediaType(r,m,mediaType,wadlRequest);
        if (getParamByName(wadlRepresentation.getParam(),p.getSourceName()) == null) {
          final Param wadlParam=generateParam(r,m,p);
          if (wadlParam != null) {
            wadlRepresentation.getParam().add(wadlParam);
          }
        }
      }
    }
 else {
      Param wadlParam=generateParam(r,m,p);
      if (wadlParam == null)       continue;
      if (wadlParam.getStyle() == ParamStyle.TEMPLATE)       wadlResourceParams.put(wadlParam.getName(),wadlParam);
 else       wadlRequest.getParam().add(wadlParam);
    }
  }
  if (wadlRequest.getRepresentation().size() + wadlRequest.getParam().size() == 0)   return null;
 else   return wadlRequest;
}"
51264,"public Param createParam(AbstractResource r,AbstractMethod m,final Parameter p){
  Param wadlParam=new Param();
  wadlParam.setName(p.getSourceName());
switch (p.getSource()) {
case QUERY:
    wadlParam.setStyle(ParamStyle.QUERY);
  break;
case MATRIX:
wadlParam.setStyle(ParamStyle.MATRIX);
break;
case PATH:
wadlParam.setStyle(ParamStyle.TEMPLATE);
break;
case HEADER:
wadlParam.setStyle(ParamStyle.HEADER);
break;
default :
break;
}
if (p.hasDefaultValue()) wadlParam.setDefault(p.getDefaultValue());
Class<?> pClass=p.getParameterClass();
if (pClass.isArray()) {
wadlParam.setRepeating(true);
pClass=pClass.getComponentType();
}
if (pClass.equals(int.class) || pClass.equals(Integer.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(boolean.class) || pClass.equals(Boolean.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(long.class) || pClass.equals(Long.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(short.class) || pClass.equals(Short.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(byte.class) || pClass.equals(Byte.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(float.class) || pClass.equals(Float.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(double.class) || pClass.equals(Double.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
return wadlParam;
}","public Param createParam(AbstractResource r,AbstractMethod m,final Parameter p){
  Param wadlParam=new Param();
  wadlParam.setName(p.getSourceName());
  if (p.getAnnotation().annotationType() == FormParam.class) {
    wadlParam.setStyle(ParamStyle.QUERY);
  }
 else {
switch (p.getSource()) {
case QUERY:
      wadlParam.setStyle(ParamStyle.QUERY);
    break;
case MATRIX:
  wadlParam.setStyle(ParamStyle.MATRIX);
break;
case PATH:
wadlParam.setStyle(ParamStyle.TEMPLATE);
break;
case HEADER:
wadlParam.setStyle(ParamStyle.HEADER);
break;
default :
break;
}
}
if (p.hasDefaultValue()) wadlParam.setDefault(p.getDefaultValue());
Class<?> pClass=p.getParameterClass();
if (pClass.isArray()) {
wadlParam.setRepeating(true);
pClass=pClass.getComponentType();
}
if (pClass.equals(int.class) || pClass.equals(Integer.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(boolean.class) || pClass.equals(Boolean.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(long.class) || pClass.equals(Long.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(short.class) || pClass.equals(Short.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(byte.class) || pClass.equals(Byte.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(float.class) || pClass.equals(Float.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (pClass.equals(double.class) || pClass.equals(Double.class)) wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else wadlParam.setType(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
return wadlParam;
}"
51265,"private <T extends AbstractResourceMethod>void findOutMTAmbiguities(AbstractResource resource,List<T> methods,ResourceMethodAmbiguityErrMsgGenerator generator){
  for (int i=0; i < methods.size(); i++) {
    T arm1=methods.get(i);
    for (int j=i + 1; j < methods.size(); j++) {
      T arm2=methods.get(j);
      if (arm1.getHttpMethod().equalsIgnoreCase(arm2.getHttpMethod())) {
        if (!""String_Node_Str"".equalsIgnoreCase(arm1.getHttpMethod())) {
          for (          MediaType mt1 : arm1.getSupportedInputTypes()) {
            for (            MediaType mt2 : arm2.getSupportedInputTypes()) {
              if (mt1.isCompatible(mt2) && (!(mt1.isWildcardType() || mt1.isWildcardSubtype() || mt2.isWildcardType()|| mt2.isWildcardSubtype()))) {
                generator.generateInErrMsg(resource,arm1,arm2,mt1);
              }
            }
          }
        }
        for (        MediaType mt1 : arm1.getSupportedOutputTypes()) {
          for (          MediaType mt2 : arm2.getSupportedOutputTypes()) {
            if (mt1.isCompatible(mt2) && (!(mt1.isWildcardType() || mt1.isWildcardSubtype() || mt2.isWildcardType()|| mt2.isWildcardSubtype()))) {
              generator.generateOutErrMsg(resource,arm1,arm2,mt1);
            }
          }
        }
      }
    }
  }
}","private <T extends AbstractResourceMethod>void findOutMTAmbiguities(AbstractResource resource,List<T> methods,ResourceMethodAmbiguityErrMsgGenerator generator){
  for (int i=0; i < methods.size(); i++) {
    T arm1=methods.get(i);
    for (int j=i + 1; j < methods.size(); j++) {
      T arm2=methods.get(j);
      if (arm1.getHttpMethod().equalsIgnoreCase(arm2.getHttpMethod())) {
        if (!""String_Node_Str"".equalsIgnoreCase(arm1.getHttpMethod())) {
          for (          MediaType mt1 : arm1.getSupportedInputTypes()) {
            for (            MediaType mt2 : arm2.getSupportedInputTypes()) {
              if (mt1.isCompatible(mt2) && (!(mt1.isWildcardType() || mt1.isWildcardSubtype() || mt2.isWildcardType()|| mt2.isWildcardSubtype()))) {
                generator.generateInErrMsg(resource,arm1,arm2,mt1);
              }
            }
          }
        }
        for (        MediaType outmt1 : arm1.getSupportedOutputTypes()) {
          for (          MediaType outmt2 : arm2.getSupportedOutputTypes()) {
            if (outmt1.isCompatible(outmt2) && (!(outmt1.isWildcardType() || outmt1.isWildcardSubtype() || outmt2.isWildcardType()|| outmt2.isWildcardSubtype()))) {
              for (              MediaType inmt1 : arm1.getSupportedInputTypes()) {
                for (                MediaType inmt2 : arm2.getSupportedInputTypes()) {
                  if (outmt1.isCompatible(inmt2) && (!(inmt1.isWildcardType() || inmt1.isWildcardSubtype() || inmt2.isWildcardType()|| inmt2.isWildcardSubtype()))) {
                    generator.generateOutErrMsg(resource,arm1,arm2,outmt1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}"
51266,"public void testWithApplicationPropertyName(){
  Map<String,String> initParams=new HashMap<String,String>();
  initParams.put(ServletContainer.APPLICATION_CONFIG_CLASS,App.class.getName());
  startServer(initParams);
  WebResource r=Client.create().resource(getUri().path(""String_Node_Str"").build());
  assertEquals(""String_Node_Str"",r.get(String.class));
}","public void testWithApplicationPropertyName(){
  Map<String,String> initParams=new HashMap<String,String>();
  initParams.put(""String_Node_Str"",App.class.getName());
  startServer(initParams);
  WebResource r=Client.create().resource(getUri().path(""String_Node_Str"").build());
  assertEquals(""String_Node_Str"",r.get(String.class));
}"
51267,"@Override public UriBuilder replaceMatrixParam(String name,Object... values){
  checkSsp();
  if (matrixParams == null) {
    int i=path.lastIndexOf(""String_Node_Str"");
    if (i != -1)     i=0;
    i=path.indexOf(""String_Node_Str"",i);
    matrixParams=UriComponent.decodeMatrix((i != -1) ? path.substring(i + 1) : ""String_Node_Str"",false);
    if (i != -1)     path.setLength(i);
  }
  matrixParams.remove(name);
  for (  Object value : values) {
    matrixParams.add(name,value.toString());
  }
  return this;
}","@Override public UriBuilder replaceMatrixParam(String name,Object... values){
  checkSsp();
  if (matrixParams == null) {
    int i=path.lastIndexOf(""String_Node_Str"");
    if (i != -1)     i=0;
    matrixParams=UriComponent.decodeMatrix((i != -1) ? path.substring(i) : ""String_Node_Str"",false);
    i=path.indexOf(""String_Node_Str"",i);
    if (i != -1)     path.setLength(i);
  }
  matrixParams.remove(name);
  for (  Object value : values) {
    matrixParams.add(name,value.toString());
  }
  return this;
}"
51268,"private boolean match(byte[] search,String container,String item){
  byte[] b=MemoryStore.MS.getItemData(container,item);
  OUTER:   for (int i=0; i < b.length - search.length; i++) {
    int j=0;
    for (; j < search.length; j++) {
      if (b[i + j] != search[j])       continue OUTER;
    }
    return true;
  }
  return false;
}","private boolean match(byte[] search,String container,String item){
  byte[] b=MemoryStore.MS.getItemData(container,item);
  OUTER:   for (int i=0; i < b.length - search.length + 1; i++) {
    for (int j=0; j < search.length; j++) {
      if (b[i + j] != search[j])       continue OUTER;
    }
    return true;
  }
  return false;
}"
51269,"private void encodeQuery(){
  if (queryParams == null || queryParams.isEmpty())   return;
  for (  Map.Entry<String,List<String>> e : queryParams.entrySet()) {
    String name=encode(e.getKey(),UriComponent.Type.QUERY_PARAM);
    for (    String value : e.getValue()) {
      if (query.length() > 0)       query.append('&');
      query.append(name);
      if (value.length() > 0)       query.append('=').append(encode(value,UriComponent.Type.QUERY_PARAM));
    }
  }
  queryParams.clear();
}","private void encodeQuery(){
  if (queryParams == null || queryParams.isEmpty())   return;
  for (  Map.Entry<String,List<String>> e : queryParams.entrySet()) {
    String name=encode(e.getKey(),UriComponent.Type.QUERY_PARAM);
    for (    String value : e.getValue()) {
      if (query.length() > 0)       query.append('&');
      query.append(name);
      if (value.length() > 0)       query.append('=').append(encode(value,UriComponent.Type.QUERY_PARAM));
    }
  }
  queryParams=null;
}"
51270,"private void encodeMatrix(){
  if (matrixParams == null || matrixParams.isEmpty())   return;
  for (  Map.Entry<String,List<String>> e : matrixParams.entrySet()) {
    String name=encode(e.getKey(),UriComponent.Type.MATRIX_PARAM);
    for (    String value : e.getValue()) {
      path.append(';').append(name);
      if (value.length() > 0)       path.append('=').append(encode(value,UriComponent.Type.MATRIX_PARAM));
    }
  }
  matrixParams.clear();
}","private void encodeMatrix(){
  if (matrixParams == null || matrixParams.isEmpty())   return;
  for (  Map.Entry<String,List<String>> e : matrixParams.entrySet()) {
    String name=encode(e.getKey(),UriComponent.Type.MATRIX_PARAM);
    for (    String value : e.getValue()) {
      path.append(';').append(name);
      if (value.length() > 0)       path.append('=').append(encode(value,UriComponent.Type.MATRIX_PARAM));
    }
  }
  matrixParams=null;
}"
51271,"public void testReplaceMatrixParams(){
  URI bu=UriBuilder.fromUri(""String_Node_Str"").replaceMatrixParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
  List<PathSegment> ps=UriComponent.decodePath(bu,true);
  MultivaluedMap<String,String> mps=ps.get(2).getMatrixParameters();
  List<String> a=mps.get(""String_Node_Str"");
  assertEquals(2,a.size());
  assertEquals(""String_Node_Str"",a.get(0));
  assertEquals(""String_Node_Str"",a.get(1));
  List<String> b=mps.get(""String_Node_Str"");
  assertEquals(1,b.size());
  assertEquals(""String_Node_Str"",b.get(0));
  bu=UriBuilder.fromUri(""String_Node_Str"").replaceMatrixParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").matrixParam(""String_Node_Str"",""String_Node_Str"").path(""String_Node_Str"").build();
  ps=UriComponent.decodePath(bu,true);
  mps=ps.get(2).getMatrixParameters();
  a=mps.get(""String_Node_Str"");
  assertEquals(2,a.size());
  assertEquals(""String_Node_Str"",a.get(0));
  assertEquals(""String_Node_Str"",a.get(1));
  b=mps.get(""String_Node_Str"");
  assertEquals(1,b.size());
  assertEquals(""String_Node_Str"",b.get(0));
  List<String> c=mps.get(""String_Node_Str"");
  assertEquals(1,c.size());
  assertEquals(""String_Node_Str"",c.get(0));
}","public void testReplaceMatrixParams(){
  UriBuilder ubu=UriBuilder.fromUri(""String_Node_Str"").replaceMatrixParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
{
    URI bu=ubu.build();
    List<PathSegment> ps=UriComponent.decodePath(bu,true);
    MultivaluedMap<String,String> mps=ps.get(2).getMatrixParameters();
    List<String> a=mps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=mps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
  }
{
    URI bu=ubu.replaceMatrixParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
    List<PathSegment> ps=UriComponent.decodePath(bu,true);
    MultivaluedMap<String,String> mps=ps.get(2).getMatrixParameters();
    List<String> a=mps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=mps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
  }
{
    URI bu=UriBuilder.fromUri(""String_Node_Str"").replaceMatrixParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").matrixParam(""String_Node_Str"",""String_Node_Str"").path(""String_Node_Str"").build();
    List<PathSegment> ps=UriComponent.decodePath(bu,true);
    MultivaluedMap<String,String> mps=ps.get(2).getMatrixParameters();
    List<String> a=mps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=mps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
    List<String> c=mps.get(""String_Node_Str"");
    assertEquals(1,c.size());
    assertEquals(""String_Node_Str"",c.get(0));
  }
}"
51272,"public void testReplaceQueryParams(){
  URI bu=UriBuilder.fromUri(""String_Node_Str"").replaceQueryParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").build();
  MultivaluedMap<String,String> qps=UriComponent.decodeQuery(bu,true);
  List<String> a=qps.get(""String_Node_Str"");
  assertEquals(2,a.size());
  assertEquals(""String_Node_Str"",a.get(0));
  assertEquals(""String_Node_Str"",a.get(1));
  List<String> b=qps.get(""String_Node_Str"");
  assertEquals(1,b.size());
  assertEquals(""String_Node_Str"",b.get(0));
  List<String> c=qps.get(""String_Node_Str"");
  assertEquals(1,c.size());
  assertEquals(""String_Node_Str"",c.get(0));
}","public void testReplaceQueryParams(){
  UriBuilder ubu=UriBuilder.fromUri(""String_Node_Str"").replaceQueryParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
{
    URI bu=ubu.build();
    MultivaluedMap<String,String> qps=UriComponent.decodeQuery(bu,true);
    List<String> a=qps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=qps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
    List<String> c=qps.get(""String_Node_Str"");
    assertEquals(1,c.size());
    assertEquals(""String_Node_Str"",c.get(0));
  }
{
    URI bu=ubu.replaceQueryParam(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
    MultivaluedMap<String,String> qps=UriComponent.decodeQuery(bu,true);
    List<String> a=qps.get(""String_Node_Str"");
    assertEquals(2,a.size());
    assertEquals(""String_Node_Str"",a.get(0));
    assertEquals(""String_Node_Str"",a.get(1));
    List<String> b=qps.get(""String_Node_Str"");
    assertEquals(1,b.size());
    assertEquals(""String_Node_Str"",b.get(0));
    List<String> c=qps.get(""String_Node_Str"");
    assertEquals(1,c.size());
    assertEquals(""String_Node_Str"",c.get(0));
  }
}"
51273,"/** 
 * Need to create an element name for given base, the same name what jaxb would use for appropriate element
 */
public static final String getRootElementName(String baseName){
  StringBuffer result=new StringBuffer();
  Character lastChar=baseName.charAt(0);
  if (Character.isLowerCase(lastChar)) {
    return baseName;
  }
  boolean firstPart=true;
  for (int i=1; i < baseName.length(); i++) {
    if (firstPart) {
      if (Character.isUpperCase(baseName.charAt(i))) {
        result.append(Character.toLowerCase(lastChar));
        lastChar=baseName.charAt(i);
      }
 else {
        if (result.length() < 2) {
          result.append(Character.toLowerCase(lastChar));
        }
 else {
          result.append(lastChar);
        }
        result.append(baseName.charAt(i));
        firstPart=false;
      }
    }
 else {
      result.append(baseName.charAt(i));
    }
  }
  return result.toString();
}","/** 
 * calculating local name of an appropriate XML element, pretty much the same way as it is done by JAXB 2.1 impl (for situations when we want to pretend the element was present in an incoming stream amd all we have is the type information) TODO: work out with JAXB guys a better way of doing it, probably we could take it from an existing JAXBContext?
 */
public static final String getRootElementName(Class<Object> clazz){
  XmlRootElement e=clazz.getAnnotation(XmlRootElement.class);
  if (e == null) {
    return getVariableName(clazz.getSimpleName());
  }
  if (""String_Node_Str"".equals(e.name())) {
    return getVariableName(clazz.getSimpleName());
  }
 else {
    return e.name();
  }
}"
51274,"/** 
 * Constructs a new JSONJAXBContext with a custom set of properties.
 * @param classesToBeBound
 * @throws javax.xml.bind.JAXBException
 */
public JSONJAXBContext(Class[] classesToBeBound,Map<String,Object> properties) throws JAXBException {
  Map<String,Object> workProperties=new HashMap<String,Object>();
  for (  Entry<String,Object> entry : properties.entrySet()) {
    workProperties.put(entry.getKey(),entry.getValue());
  }
  processProperties(workProperties);
  jaxbContext=JAXBContext.newInstance(classesToBeBound,workProperties);
}","/** 
 * Construct a new instance using a specified class loader and  a custom set of properties.
 * @param contextPath list of java package names that contain schemaderived class and/or java to schema (JAXB-annotated) mapped classes
 * @param classLoader 
 * @param properties the custom set of properties.
 * @throws JAXBException if an error was encountered while creating theunderlying JAXBContext.
 */
public JSONJAXBContext(String contextPath,ClassLoader classLoader,Map<String,Object> properties) throws JAXBException {
  jaxbContext=JAXBContext.newInstance(contextPath,classLoader,createProperties(properties));
}"
51275,"public ResponseBuilder evaluatePreconditions(Date lastModified,EntityTag eTag){
  ResponseBuilder r=evaluateIfMatch(eTag);
  if (r == null) {
    long lastModifiedTime=lastModified.getTime();
    r=evaluateIfUnmodifiedSince(lastModifiedTime);
    if (r == null)     r=evaluateIfNoneMatch(eTag);
    if (r == null)     r=evaluateIfModifiedSince(lastModifiedTime);
  }
  return r;
}","public ResponseBuilder evaluatePreconditions(Date lastModified,EntityTag eTag){
  ResponseBuilder r=evaluateIfMatch(eTag);
  if (r == null) {
    long lastModifiedTime=lastModified.getTime();
    r=evaluateIfUnmodifiedSince(lastModifiedTime);
    if (r == null)     r=evaluateIfNoneMatch(eTag);
    if (r == null)     return null;
    r=evaluateIfModifiedSince(lastModifiedTime);
    if (r != null)     r.tag(eTag);
  }
  return r;
}"
51276,"public void testIfMatchWithMatchingETag(){
  initiateWebApplication(EtagResource.class);
  resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
}","public void testIfMatchWithMatchingETag(){
  initiateWebApplication(EtagResource.class);
  ClientResponse response=resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
  assertEquals(200,response.getStatus());
}"
51277,"public void testIfNonMatchWithoutMatchingETag(){
  initiateWebApplication(EtagResource.class);
  resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
}","public void testIfNonMatchWithoutMatchingETag(){
  initiateWebApplication(EtagResource.class);
  ClientResponse response=resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
  assertEquals(200,response.getStatus());
}"
51278,"public void testIfModifiedSinceBeforeLastModified(){
  initiateWebApplication(LastModifiedResource.class);
  resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
}","public void testIfModifiedSinceBeforeLastModified(){
  initiateWebApplication(LastModifiedResource.class);
  ClientResponse response=resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
  assertEquals(200,response.getStatus());
}"
51279,"public void testIfUnmodifiedSinceAfterLastModified_IfModifiedSinceBeforeLastModified(){
  initiateWebApplication(LastModifiedResource.class);
  resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
}","public void testIfUnmodifiedSinceAfterLastModified_IfModifiedSinceBeforeLastModified(){
  initiateWebApplication(LastModifiedResource.class);
  ClientResponse response=resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
  assertEquals(200,response.getStatus());
}"
51280,"public void testIfMatchWildCard(){
  initiateWebApplication(EtagResource.class);
  resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
}","public void testIfMatchWildCard(){
  initiateWebApplication(EtagResource.class);
  ClientResponse response=resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
  assertEquals(200,response.getStatus());
}"
51281,"public void testIfMatchWithMatchingETag_IfNonMatchWithoutMatchingETag(){
  initiateWebApplication(EtagResource.class);
  resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
}","public void testIfMatchWithMatchingETag_IfNonMatchWithoutMatchingETag(){
  initiateWebApplication(EtagResource.class);
  ClientResponse response=resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
  assertEquals(200,response.getStatus());
}"
51282,"public void testIfUnmodifiedSinceAfterLastModified(){
  initiateWebApplication(LastModifiedResource.class);
  resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
}","public void testIfUnmodifiedSinceAfterLastModified(){
  initiateWebApplication(LastModifiedResource.class);
  ClientResponse response=resource(""String_Node_Str"").header(""String_Node_Str"",""String_Node_Str"").get(ClientResponse.class);
  assertEquals(200,response.getStatus());
}"
51283,"@GET public Response doGet(){
  ResponseBuilder rb=request.evaluatePreconditions(new EntityTag(""String_Node_Str""));
  if (rb != null)   return rb.build();
  return Response.ok(""String_Node_Str"",""String_Node_Str"").build();
}","@GET public Response doGet(){
  GregorianCalendar lastModified=new GregorianCalendar(2007,0,0,0,0,0);
  ResponseBuilder rb=request.evaluatePreconditions(lastModified.getTime(),new EntityTag(""String_Node_Str""));
  if (rb != null)   return rb.build();
  return Response.ok(""String_Node_Str"",""String_Node_Str"").build();
}"
51284,"public T type(String type){
  getMetadata().putSingle(""String_Node_Str"",type);
  return (T)this;
}","public T type(String type){
  getMetadata().putSingle(""String_Node_Str"",MediaType.valueOf(type));
  return (T)this;
}"
51285,"public Date fromString(String header){
  try {
    return HttpHeaderFactory.createDate(header);
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(ex);
  }
}","public Date fromString(String header){
  try {
    return HttpHeaderFactory.createDate(header);
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + header + ""String_Node_Str"",ex);
  }
}"
51286,"public EntityTag fromString(String header){
  if (header == null)   throw new IllegalArgumentException();
  boolean weak=false;
  if (header.startsWith(""String_Node_Str"")) {
    header=header.substring(2);
    weak=true;
  }
  HttpHeaderReader reader=new HttpHeaderReaderImpl(header);
  try {
    EntityTag eTag=new EntityTag(reader.nextQuotedString(),weak);
    return eTag;
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(ex);
  }
}","public EntityTag fromString(String header){
  if (header == null)   throw new IllegalArgumentException(""String_Node_Str"");
  boolean weak=false;
  if (header.startsWith(""String_Node_Str"")) {
    header=header.substring(2);
    weak=true;
  }
  HttpHeaderReader reader=new HttpHeaderReaderImpl(header);
  try {
    EntityTag eTag=new EntityTag(reader.nextQuotedString(),weak);
    return eTag;
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + header + ""String_Node_Str"",ex);
  }
}"
51287,"public MediaType fromString(String header){
  if (header == null)   throw new IllegalArgumentException();
  try {
    HttpHeaderReader reader=new HttpHeaderReaderImpl(header);
    reader.hasNext();
    String type=reader.nextToken();
    reader.nextSeparator('/');
    String subType=reader.nextToken();
    Map<String,String> params=null;
    if (reader.hasNext())     params=HttpHeaderReader.readParameters(reader);
    return new MediaType(type,subType,params);
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(ex);
  }
}","public MediaType fromString(String header){
  if (header == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    HttpHeaderReader reader=new HttpHeaderReaderImpl(header);
    reader.hasNext();
    String type=reader.nextToken();
    reader.nextSeparator('/');
    String subType=reader.nextToken();
    Map<String,String> params=null;
    if (reader.hasNext())     params=HttpHeaderReader.readParameters(reader);
    return new MediaType(type,subType,params);
  }
 catch (  ParseException ex) {
    throw new IllegalArgumentException(""String_Node_Str"" + header + ""String_Node_Str"",ex);
  }
}"
51288,"public NewCookie fromString(String header){
  if (header == null)   throw new IllegalArgumentException();
  return HttpHeaderFactory.createNewCookie(header);
}","public NewCookie fromString(String header){
  if (header == null)   throw new IllegalArgumentException(""String_Node_Str"");
  return HttpHeaderFactory.createNewCookie(header);
}"
51289,"public URI fromString(String header){
  try {
    return new URI(header);
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(e);
  }
}","public URI fromString(String header){
  try {
    return new URI(header);
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + header + ""String_Node_Str"",e);
  }
}"
51290,"@SuppressWarnings(""String_Node_Str"") private void writeEntity(MultivaluedMap<String,Object> metadata,Object entity,OutputStream out){
  if (entity == null)   return;
  try {
    MediaType mediaType=null;
    final Object mediaTypeHeader=metadata.getFirst(""String_Node_Str"");
    if (mediaTypeHeader instanceof MediaType) {
      mediaType=(MediaType)mediaType;
    }
 else {
      if (mediaTypeHeader != null) {
        mediaType=MediaType.valueOf(mediaTypeHeader.toString());
      }
 else {
        mediaType=MediaType.APPLICATION_OCTET_STREAM_TYPE;
      }
    }
    final MessageBodyWriter bw=bodyContext.getMessageBodyWriter(entity.getClass(),entity.getClass(),null,mediaType);
    if (bw == null) {
      throw new ClientHandlerException(""String_Node_Str"" + entity.getClass() + ""String_Node_Str""+ mediaType+ ""String_Node_Str"");
    }
    bw.writeTo(entity,entity.getClass(),entity.getClass(),EMPTY_ANNOTATIONS,(MediaType)mediaType,metadata,out);
    out.flush();
    out.close();
  }
 catch (  IOException ex) {
    throw new ClientHandlerException(ex);
  }
}","@SuppressWarnings(""String_Node_Str"") private void writeEntity(MultivaluedMap<String,Object> metadata,Object entity,OutputStream out){
  if (entity == null)   return;
  try {
    MediaType mediaType=null;
    final Object mediaTypeHeader=metadata.getFirst(""String_Node_Str"");
    if (mediaTypeHeader instanceof MediaType) {
      mediaType=(MediaType)mediaTypeHeader;
    }
 else {
      if (mediaTypeHeader != null) {
        mediaType=MediaType.valueOf(mediaTypeHeader.toString());
      }
 else {
        mediaType=MediaType.APPLICATION_OCTET_STREAM_TYPE;
      }
    }
    final MessageBodyWriter bw=bodyContext.getMessageBodyWriter(entity.getClass(),entity.getClass(),null,mediaType);
    if (bw == null) {
      throw new ClientHandlerException(""String_Node_Str"" + entity.getClass() + ""String_Node_Str""+ mediaType+ ""String_Node_Str"");
    }
    bw.writeTo(entity,entity.getClass(),entity.getClass(),EMPTY_ANNOTATIONS,(MediaType)mediaType,metadata,out);
    out.flush();
    out.close();
  }
 catch (  IOException ex) {
    throw new ClientHandlerException(ex);
  }
}"
51291,"public void doTag() throws JspException, IOException {
  Object it=getJspContext().getAttribute(""String_Node_Str"",PageContext.REQUEST_SCOPE);
  final Object oldIt=it;
  if (this.it != null)   it=this.it;
  ServletConfig cfg=(ServletConfig)getPageObject(PageContext.CONFIG);
  ServletContext sc=cfg.getServletContext();
  for (Class c=it.getClass(); c != Object.class; c=c.getSuperclass()) {
    String name=""String_Node_Str"" + c.getName().replace('.','/') + '/'+ page;
    if (sc.getResource(name) != null) {
      RequestDispatcher disp=sc.getRequestDispatcher(name);
      if (disp != null) {
        getJspContext().setAttribute(""String_Node_Str"",it,PageContext.REQUEST_SCOPE);
        try {
          HttpServletRequest request=(HttpServletRequest)getPageObject(PageContext.REQUEST);
          disp.include(request,new Wrapper((HttpServletResponse)getPageObject(PageContext.RESPONSE),new PrintWriter(getJspContext().getOut())));
        }
 catch (        ServletException e) {
          throw new JspException(e);
        }
 finally {
          getJspContext().setAttribute(""String_Node_Str"",oldIt,PageContext.REQUEST_SCOPE);
        }
        return;
      }
    }
  }
  throw new JspException(""String_Node_Str"" + page + ""String_Node_Str""+ it.getClass());
}","public void doTag() throws JspException, IOException {
  Object resource=getJspContext().getAttribute(""String_Node_Str"",PageContext.REQUEST_SCOPE);
  final Object oldResource=resource;
  if (this.resource != null) {
    resource=this.resource;
  }
  ServletConfig cfg=(ServletConfig)getPageObject(PageContext.CONFIG);
  ServletContext sc=cfg.getServletContext();
  for (Class c=resource.getClass(); c != Object.class; c=c.getSuperclass()) {
    String name=""String_Node_Str"" + c.getName().replace('.','/') + '/'+ page;
    if (sc.getResource(name) != null) {
      RequestDispatcher disp=sc.getRequestDispatcher(name);
      if (disp != null) {
        getJspContext().setAttribute(""String_Node_Str"",resource,PageContext.REQUEST_SCOPE);
        try {
          HttpServletRequest request=(HttpServletRequest)getPageObject(PageContext.REQUEST);
          disp.include(request,new Wrapper((HttpServletResponse)getPageObject(PageContext.RESPONSE),new PrintWriter(getJspContext().getOut())));
        }
 catch (        ServletException e) {
          throw new JspException(e);
        }
 finally {
          getJspContext().setAttribute(""String_Node_Str"",oldResource,PageContext.REQUEST_SCOPE);
        }
        return;
      }
    }
  }
  throw new JspException(""String_Node_Str"" + page + ""String_Node_Str""+ resource.getClass());
}"
51292,"public void writeTo(String resolvedPath,Object model,OutputStream out) throws IOException {
  RequestDispatcher d=servletContext.getRequestDispatcher(resolvedPath);
  if (d == null) {
    throw new ContainerException(""String_Node_Str"" + resolvedPath);
  }
  d=new RequestDispatcherWrapper(d,model);
  try {
    d.forward(requestInvoker.get(),responseInvoker.get());
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new ContainerException(e);
  }
}","public void writeTo(String resolvedPath,Object model,OutputStream out) throws IOException {
  RequestDispatcher d=servletContext.getRequestDispatcher(resolvedPath);
  if (d == null) {
    throw new ContainerException(""String_Node_Str"" + resolvedPath);
  }
  d=new RequestDispatcherWrapper(d,ui.getMatchedResources().get(0),model);
  try {
    d.forward(requestInvoker.get(),responseInvoker.get());
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new ContainerException(e);
  }
}"
51293,"public RequestDispatcherWrapper(RequestDispatcher d,Object it){
  this.d=d;
  this.it=it;
}","public RequestDispatcherWrapper(RequestDispatcher d,Object resource,Object it){
  this.d=d;
  this.resource=resource;
  this.it=it;
}"
51294,"public void forward(ServletRequest req,ServletResponse rsp) throws ServletException, IOException {
  req.setAttribute(""String_Node_Str"",it);
  req.setAttribute(""String_Node_Str"",req);
  req.setAttribute(""String_Node_Str"",rsp);
  d.forward(req,rsp);
}","public void forward(ServletRequest req,ServletResponse rsp) throws ServletException, IOException {
  req.setAttribute(""String_Node_Str"",resource);
  req.setAttribute(""String_Node_Str"",it);
  req.setAttribute(""String_Node_Str"",req);
  req.setAttribute(""String_Node_Str"",rsp);
  d.forward(req,rsp);
}"
51295,"protected <T>void _test(T in,Class resource,boolean verify){
  initiateWebApplication(resource);
  WebResource r=resource(""String_Node_Str"");
  ClientResponse rib=r.post(ClientResponse.class,in);
  byte[] inBytes=(byte[])rib.getProperties().get(""String_Node_Str"");
  byte[] outBytes=(byte[])rib.getProperties().get(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + new String(inBytes) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + new String(outBytes) + ""String_Node_Str"");
  if (verify)   _verify(inBytes,outBytes);
}","protected <T>void _test(T in,Class resource,boolean verify){
  initiateWebApplication(resource);
  WebResource r=resource(""String_Node_Str"");
  ClientResponse rib=r.post(ClientResponse.class,in);
  byte[] inBytes=(byte[])rib.getProperties().get(""String_Node_Str"");
  byte[] outBytes=(byte[])rib.getProperties().get(""String_Node_Str"");
  if (verify)   _verify(inBytes,outBytes);
}"
51296,"public MultivaluedMap<String,Object> getMetadataOptimal(HttpRequestContext request,MediaType contentType){
  if (headers != null)   return headers;
  headers=new OutBoundHeaders();
  if (values.length == 0 && contentType != null) {
    headers.putSingle(ResponseBuilderImpl.getHeader(ResponseBuilderImpl.CONTENT_TYPE),contentType);
  }
  for (int i=0; i < values.length; i++) {
switch (i) {
case ResponseBuilderImpl.CONTENT_TYPE:
      if (values[i] != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
 else       if (contentType != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),contentType);
    break;
case ResponseBuilderImpl.LOCATION:
  Object location=values[i];
if (location != null) {
  if (location instanceof URI) {
    if (!((URI)location).isAbsolute()) {
      String path=((URI)location).getRawPath();
      if (status == 201)       location=UriBuilder.fromUri(request.getAbsolutePath()).encode(false).path(path).build();
 else       location=UriBuilder.fromUri(request.getBaseUri()).encode(false).path(path).build();
    }
  }
  headers.putSingle(ResponseBuilderImpl.getHeader(i),location);
}
break;
default :
if (values[i] != null) headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
}
}
Iterator i=nameValuePairs.iterator();
while (i.hasNext()) {
headers.add((String)i.next(),i.next());
}
return headers;
}","public MultivaluedMap<String,Object> getMetadataOptimal(HttpRequestContext request,MediaType contentType){
  if (headers != null)   return headers;
  headers=new OutBoundHeaders();
  if (values.length == 0 && contentType != null) {
    headers.putSingle(ResponseBuilderImpl.getHeader(ResponseBuilderImpl.CONTENT_TYPE),contentType);
  }
  for (int i=0; i < values.length; i++) {
switch (i) {
case ResponseBuilderImpl.CONTENT_TYPE:
      if (values[i] != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
 else       if (contentType != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),contentType);
    break;
case ResponseBuilderImpl.LOCATION:
  Object location=values[i];
if (location != null) {
  if (location instanceof URI) {
    final URI locationUri=(URI)location;
    if (!locationUri.isAbsolute()) {
      final URI base=(status == 201) ? request.getAbsolutePath() : request.getBaseUri();
      location=UriBuilder.fromUri(base).encode(false).path(locationUri.getRawPath()).replaceQueryParams(locationUri.getRawQuery()).fragment(locationUri.getRawFragment()).build();
    }
  }
  headers.putSingle(ResponseBuilderImpl.getHeader(i),location);
}
break;
default :
if (values[i] != null) headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
}
}
Iterator i=nameValuePairs.iterator();
while (i.hasNext()) {
headers.add((String)i.next(),i.next());
}
return headers;
}"
51297,"public ContainerRequest filter(ContainerRequest request){
  if (!request.getHttpMethod().equalsIgnoreCase(""String_Node_Str""))   return request;
  String override=request.getRequestHeaders().getFirst(""String_Node_Str"");
  if (override == null)   return request;
  override.trim();
  if (override.length() == 0)   return request;
  request.setMethod(override);
  return request;
}","public ContainerRequest filter(ContainerRequest request){
  if (!request.getHttpMethod().equalsIgnoreCase(""String_Node_Str""))   return request;
  String override=request.getRequestHeaders().getFirst(""String_Node_Str"");
  if (override == null)   return request;
  override=override.trim();
  if (override.length() == 0)   return request;
  request.setMethod(override);
  return request;
}"
51298,"protected final MediaType getAcceptableMediaType(HttpRequestContext requestContext){
  if (produceMime.size() == 1) {
    return mediaType;
  }
 else {
    MediaType m=requestContext.getAcceptableMediaType(produceMime);
    if (m != null) {
      if (m.getType().equals(MediaType.MEDIA_TYPE_WILDCARD) || m.getSubtype().equals(MediaType.MEDIA_TYPE_WILDCARD))       return null;
    }
    return m;
  }
}","protected final MediaType getAcceptableMediaType(HttpRequestContext requestContext){
  if (produceMime.size() == 1) {
    return mediaType;
  }
 else {
    MediaType m=requestContext.getAcceptableMediaType(produceMime);
    if (m != null) {
      if (m.isWildcardType() || m.isWildcardSubtype())       return null;
    }
    return m;
  }
}"
51299,"public MediaType getAcceptableMediaType(List<MediaType> mediaTypes){
  if (mediaTypes.isEmpty())   return getAcceptableMediaTypes().get(0);
  for (  MediaType a : getAcceptableMediaTypes()) {
    if (a.getType().equals(MediaType.MEDIA_TYPE_WILDCARD))     return mediaTypes.get(0);
    for (    MediaType m : mediaTypes)     if (m.isCompatible(a))     return m;
  }
  return null;
}","public MediaType getAcceptableMediaType(List<MediaType> mediaTypes){
  if (mediaTypes.isEmpty())   return getAcceptableMediaTypes().get(0);
  for (  MediaType a : getAcceptableMediaTypes()) {
    if (a.getType().equals(MediaType.MEDIA_TYPE_WILDCARD))     return mediaTypes.get(0);
    for (    MediaType m : mediaTypes)     if (m.isCompatible(a) && !m.isWildcardType() && !m.isWildcardSubtype())     return m;
  }
  return null;
}"
51300,"/** 
 * Write the response. <p> The status and headers will be written by calling the method  {@link ContainerResponseWriter#writeStatusAndHeaders} on the provided{@link ContainerResponseWriter} instance. The {@link OutputStream}returned from that method call is used to write the entity (if any) to that   {@link OutputStream}. An appropriate   {@link MessageBodyWriter}will be found to write the entity.
 * @throws WebApplicationException if {@link MessageBodyWriter} cannot be found for the entity with a 406 (Not Acceptable) response.
 * @throws java.io.IOException if there is an error writing the entity
 */
@SuppressWarnings(""String_Node_Str"") public void write() throws IOException {
  if (isCommitted)   return;
  if (entity == null) {
    responseWriter.writeStatusAndHeaders(-1,this);
    return;
  }
  MediaType contentType=getContentType();
  if (contentType == null) {
    List<MediaType> mts=bodyContext.getMessageBodyWriterMediaTypes(entity.getClass(),null,null);
    contentType=request.getAcceptableMediaType(mts);
    if (contentType.isWildcardType() || contentType.isWildcardSubtype())     contentType=MediaType.APPLICATION_OCTET_STREAM_TYPE;
    getHttpHeaders().putSingle(""String_Node_Str"",contentType);
  }
  final MessageBodyWriter p=bodyContext.getMessageBodyWriter(entity.getClass(),null,null,contentType);
  if (p == null) {
    LOGGER.severe(""String_Node_Str"" + entity.getClass() + ""String_Node_Str""+ contentType+ ""String_Node_Str"");
    throw new WebApplicationException(Responses.notAcceptable().build());
  }
  isCommitted=true;
  OutputStream os=responseWriter.writeStatusAndHeaders(-1,this);
  p.writeTo(entity,entity.getClass(),null,null,contentType,getHttpHeaders(),os);
}","/** 
 * Write the response. <p> The status and headers will be written by calling the method  {@link ContainerResponseWriter#writeStatusAndHeaders} on the provided{@link ContainerResponseWriter} instance. The {@link OutputStream}returned from that method call is used to write the entity (if any) to that   {@link OutputStream}. An appropriate   {@link MessageBodyWriter}will be found to write the entity.
 * @throws WebApplicationException if {@link MessageBodyWriter} cannot be found for the entity with a 406 (Not Acceptable) response.
 * @throws java.io.IOException if there is an error writing the entity
 */
@SuppressWarnings(""String_Node_Str"") public void write() throws IOException {
  if (isCommitted)   return;
  if (entity == null) {
    responseWriter.writeStatusAndHeaders(-1,this);
    return;
  }
  MediaType contentType=getContentType();
  if (contentType == null) {
    List<MediaType> mts=bodyContext.getMessageBodyWriterMediaTypes(entity.getClass(),null,null);
    contentType=request.getAcceptableMediaType(mts);
    if (contentType == null || contentType.isWildcardType() || contentType.isWildcardSubtype())     contentType=MediaType.APPLICATION_OCTET_STREAM_TYPE;
    getHttpHeaders().putSingle(""String_Node_Str"",contentType);
  }
  final MessageBodyWriter p=bodyContext.getMessageBodyWriter(entity.getClass(),null,null,contentType);
  if (p == null) {
    LOGGER.severe(""String_Node_Str"" + entity.getClass() + ""String_Node_Str""+ contentType+ ""String_Node_Str"");
    throw new WebApplicationException(Responses.notAcceptable().build());
  }
  isCommitted=true;
  OutputStream os=responseWriter.writeStatusAndHeaders(-1,this);
  p.writeTo(entity,entity.getClass(),null,null,contentType,getHttpHeaders(),os);
}"
51301,"public void testAcceptMultiple(){
  initiateWebApplication(MultipleResource.class);
  WebResource r=resource(""String_Node_Str"");
  MediaType foo=MediaType.valueOf(""String_Node_Str"");
  MediaType bar=MediaType.valueOf(""String_Node_Str"");
  ClientResponse response=r.accept(foo).get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(foo,response.getType());
  response=r.accept(bar).get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(bar,response.getType());
  response=r.accept(""String_Node_Str"").get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(foo,response.getType());
  response=r.accept(""String_Node_Str"").get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(foo,response.getType());
}","public void testAcceptMultiple(){
  initiateWebApplication(MultipleResource.class);
  WebResource r=resource(""String_Node_Str"");
  MediaType foo=MediaType.valueOf(""String_Node_Str"");
  MediaType bar=MediaType.valueOf(""String_Node_Str"");
  ClientResponse response=r.accept(foo).get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(foo,response.getType());
  response=r.accept(bar).get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(bar,response.getType());
  response=r.accept(""String_Node_Str"").get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(foo,response.getType());
  response=r.accept(""String_Node_Str"").get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(foo,response.getType());
  response=r.accept(""String_Node_Str"").accept(""String_Node_Str"").get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(bar,response.getType());
  response=r.accept(""String_Node_Str"").accept(""String_Node_Str"").get(ClientResponse.class);
  assertEquals(""String_Node_Str"",response.getEntity(String.class));
  assertEquals(foo,response.getType());
}"
51302,"private static void onException(Throwable e,Response r,HttpResponseContext response){
  response.setResponse(r);
  if (r.getStatus() >= 500) {
    e.printStackTrace();
  }
  if (r.getStatus() >= 500 && r.getEntity() == null) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    e.printStackTrace(pw);
    pw.flush();
    r=Response.status(r.getStatus()).entity(sw.toString()).type(""String_Node_Str"").build();
  }
}","private static void onException(Throwable e,Response r,HttpResponseContext response){
  if (r.getStatus() >= 500) {
    e.printStackTrace();
  }
  if (r.getStatus() >= 500 && r.getEntity() == null) {
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    e.printStackTrace(pw);
    pw.flush();
    r=Response.status(r.getStatus()).entity(sw.toString()).type(""String_Node_Str"").build();
  }
  response.setResponse(r);
}"
51303,"/** 
 * Create a new instance with a client configuration and a  compoenent provider.
 * @param root the root client handler for dispatching a request andreturning a response.
 * @param config the client configuration.
 * @param provider the component provider.
 */
public Client(ClientHandler root,ClientConfig config,ComponentProvider provider){
  super(root);
  this.injectableFactory=new InjectableProviderFactory();
  this.config=config;
  injectableFactory.add(new ContextInjectableProvider<ClientConfig>(ClientConfig.class,config));
  this.provider=(provider == null) ? new DefaultComponentProvider() : new AdaptingComponentProvider(provider);
  ComponentProviderCache cpc=new ComponentProviderCache(this.provider,config.getProviderClasses());
  ContextResolverFactory crf=new ContextResolverFactory(cpc,injectableFactory);
  this.bodyContext=new MessageBodyFactory(cpc);
  injectableFactory.add(new ContextInjectableProvider<MessageBodyContext>(MessageBodyContext.class,bodyContext));
  injectResources(root);
}","/** 
 * Create a new instance with a client configuration and a  compoenent provider.
 * @param root the root client handler for dispatching a request andreturning a response.
 * @param config the client configuration.
 * @param provider the component provider.
 */
public Client(ClientHandler root,ClientConfig config,ComponentProvider provider){
  super(root);
  this.injectableFactory=new InjectableProviderFactory();
  this.config=config;
  injectableFactory.add(new ContextInjectableProvider<ClientConfig>(ClientConfig.class,config));
  this.provider=(provider == null) ? new DefaultComponentProvider() : new AdaptingComponentProvider(provider);
  ComponentProviderCache cpc=new ComponentProviderCache(this.provider,config.getProviderClasses());
  new ContextResolverFactory(cpc,injectableFactory);
  this.bodyContext=new MessageBodyFactory(cpc);
  injectableFactory.add(new ContextInjectableProvider<MessageBodyContext>(MessageBodyContext.class,bodyContext));
  injectResources(root);
}"
51304,"public void add(InjectableProvider ip){
  Class<?> c=ip.getClass();
  Type[] args=getMetaArguments(ip.getClass());
  if (args != null) {
    MetaInjectableProvider mip=new MetaInjectableProvider(ip,(Class)args[0],(Class)args[1],(Class)args[2]);
    getList(mip.ac).add(mip);
  }
 else {
  }
}","public void add(InjectableProvider ip){
  Type[] args=getMetaArguments(ip.getClass());
  if (args != null) {
    MetaInjectableProvider mip=new MetaInjectableProvider(ip,(Class)args[0],(Class)args[1],(Class)args[2]);
    getList(mip.ac).add(mip);
  }
 else {
  }
}"
51305,"public void injectResources(final Object o){
  Class oClass=o.getClass();
  while (oClass != null) {
    for (    final Field f : oClass.getDeclaredFields()) {
      if (getFieldValue(o,f) != null)       continue;
      final Annotation[] as=f.getAnnotations();
      for (      Annotation a : as) {
        final Injectable i=getInjectable(a.annotationType(),null,a,f.getGenericType());
        if (i != null && i instanceof SingletonInjectable) {
          SingletonInjectable si=(SingletonInjectable)i;
          Object v=si.getValue(null);
          setFieldValue(o,f,v);
        }
      }
    }
    oClass=oClass.getSuperclass();
  }
}","public void injectResources(final Object o){
  Class oClass=o.getClass();
  while (oClass != Object.class) {
    for (    final Field f : oClass.getDeclaredFields()) {
      if (getFieldValue(o,f) != null)       continue;
      final Annotation[] as=f.getAnnotations();
      for (      Annotation a : as) {
        final Injectable i=getInjectable(a.annotationType(),null,a,f.getGenericType());
        if (i != null && i instanceof SingletonInjectable) {
          SingletonInjectable si=(SingletonInjectable)i;
          Object v=si.getValue(null);
          setFieldValue(o,f,v);
        }
      }
    }
    oClass=oClass.getSuperclass();
  }
}"
51306,"private MetaInjectableProvider getMeta(InjectableProvider ip){
  Class<?> c=ip.getClass();
  Type[] args=getMetaArguments(ip.getClass());
  if (args != null)   return new MetaInjectableProvider(ip,(Class)args[0],(Class)args[1],(Class)args[2]);
  return null;
}","private MetaInjectableProvider getMeta(InjectableProvider ip){
  Type[] args=getMetaArguments(ip.getClass());
  if (args != null)   return new MetaInjectableProvider(ip,(Class)args[0],(Class)args[1],(Class)args[2]);
  return null;
}"
51307,"public void initiate(ResourceConfig resourceConfig,ComponentProvider _provider){
  if (resourceConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (initiated) {
    throw new ContainerException(ImplMessages.WEB_APP_ALREADY_INITIATED());
  }
  this.initiated=true;
  this.provider=(_provider == null) ? new DefaultComponentProvider() : new AdaptingComponentProvider(_provider);
  this.resourceConfig=resourceConfig;
  verifyResourceConfig();
  this.resourceContext=new ResourceContext(){
    public <T>T getResource(    Class<T> c){
      final ResourceClass rc=getResourceClass(c);
      if (rc == null) {
        LOGGER.severe(""String_Node_Str"" + c.getName());
        throw new ContainerException(""String_Node_Str"" + c.getName());
      }
      final Object instance=rc.resolver.getInstance(provider,context);
      return instance != null ? c.cast(instance) : null;
    }
  }
;
  ComponentProviderCache cpc=new ComponentProviderCache(this.provider,resourceConfig.getProviderClasses());
  injectableFactory.add(new InjectableProvider<Inject,Type,SingletonInjectable>(){
    @SuppressWarnings(""String_Node_Str"") public SingletonInjectable<Object> getInjectable(    InjectableContext ic,    Inject a,    final Type c){
      if (!(c instanceof Class))       return null;
      return new SingletonInjectable<Object>(){
        public Object getValue(        HttpContext context){
          try {
            return provider.getInstance(Scope.Undefined,(Class)c);
          }
 catch (          Exception e) {
            LOGGER.log(Level.SEVERE,""String_Node_Str"" + c,e);
            throw new ContainerException(""String_Node_Str"" + c,e);
          }
        }
      }
;
    }
  }
);
  injectableFactory.add(new ContextInjectableProvider<ResourceConfig>(ResourceConfig.class,resourceConfig));
  injectableFactory.add(new ContextInjectableProvider<ResourceContext>(ResourceContext.class,resourceContext));
  injectableFactory.configure(cpc);
  injectableFactory.add(new CookieParamInjectableProvider());
  injectableFactory.add(new HeaderParamInjectableProvider());
  injectableFactory.add(new HttpContextInjectableProvider());
  injectableFactory.add(new MatrixParamInjectableProvider());
  injectableFactory.add(new PathParamInjectableProvider());
  injectableFactory.add(new QueryParamInjectableProvider());
  ContextResolverFactory crf=new ContextResolverFactory(cpc,injectableFactory);
  this.templateContext=new TemplateFactory(cpc);
  injectableFactory.add(new ContextInjectableProvider<TemplateContext>(TemplateContext.class,templateContext));
  this.dispatcherFactory=new ResourceMethodDispatcherFactory(cpc);
  this.bodyFactory=new MessageBodyFactory(cpc);
  injectableFactory.add(new ContextInjectableProvider<MessageBodyContext>(MessageBodyContext.class,bodyFactory));
  injectableFactory.add(new ContextInjectableProvider<MessageBodyWorkers>(MessageBodyWorkers.class,bodyFactory));
  injectableFactory.add(new CookieParamInjectableProvider());
  injectableFactory.add(new HeaderParamInjectableProvider());
  injectableFactory.add(new HttpContextInjectableProvider());
  injectableFactory.add(new MatrixParamInjectableProvider());
  injectableFactory.add(new PathParamInjectableProvider());
  injectableFactory.add(new QueryParamInjectableProvider());
  this.rootsRule=new RootResourceClassesRule(processRootResources(resourceConfig.getResourceClasses()));
}","public void initiate(ResourceConfig resourceConfig,ComponentProvider _provider){
  if (resourceConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (initiated) {
    throw new ContainerException(ImplMessages.WEB_APP_ALREADY_INITIATED());
  }
  this.initiated=true;
  this.provider=(_provider == null) ? new DefaultComponentProvider() : new AdaptingComponentProvider(_provider);
  this.resourceConfig=resourceConfig;
  verifyResourceConfig();
  this.resourceContext=new ResourceContext(){
    public <T>T getResource(    Class<T> c){
      final ResourceClass rc=getResourceClass(c);
      if (rc == null) {
        LOGGER.severe(""String_Node_Str"" + c.getName());
        throw new ContainerException(""String_Node_Str"" + c.getName());
      }
      final Object instance=rc.resolver.getInstance(provider,context);
      return instance != null ? c.cast(instance) : null;
    }
  }
;
  ComponentProviderCache cpc=new ComponentProviderCache(this.provider,resourceConfig.getProviderClasses());
  injectableFactory.add(new InjectableProvider<Inject,Type,SingletonInjectable>(){
    @SuppressWarnings(""String_Node_Str"") public SingletonInjectable<Object> getInjectable(    InjectableContext ic,    Inject a,    final Type c){
      if (!(c instanceof Class))       return null;
      return new SingletonInjectable<Object>(){
        public Object getValue(        HttpContext context){
          try {
            return provider.getInstance(Scope.Undefined,(Class)c);
          }
 catch (          Exception e) {
            LOGGER.log(Level.SEVERE,""String_Node_Str"" + c,e);
            throw new ContainerException(""String_Node_Str"" + c,e);
          }
        }
      }
;
    }
  }
);
  injectableFactory.add(new ContextInjectableProvider<ResourceConfig>(ResourceConfig.class,resourceConfig));
  injectableFactory.add(new ContextInjectableProvider<ResourceContext>(ResourceContext.class,resourceContext));
  injectableFactory.configure(cpc);
  injectableFactory.add(new CookieParamInjectableProvider());
  injectableFactory.add(new HeaderParamInjectableProvider());
  injectableFactory.add(new HttpContextInjectableProvider());
  injectableFactory.add(new MatrixParamInjectableProvider());
  injectableFactory.add(new PathParamInjectableProvider());
  injectableFactory.add(new QueryParamInjectableProvider());
  new ContextResolverFactory(cpc,injectableFactory);
  this.templateContext=new TemplateFactory(cpc);
  injectableFactory.add(new ContextInjectableProvider<TemplateContext>(TemplateContext.class,templateContext));
  this.dispatcherFactory=new ResourceMethodDispatcherFactory(cpc);
  this.bodyFactory=new MessageBodyFactory(cpc);
  injectableFactory.add(new ContextInjectableProvider<MessageBodyContext>(MessageBodyContext.class,bodyFactory));
  injectableFactory.add(new ContextInjectableProvider<MessageBodyWorkers>(MessageBodyWorkers.class,bodyFactory));
  injectableFactory.add(new CookieParamInjectableProvider());
  injectableFactory.add(new HeaderParamInjectableProvider());
  injectableFactory.add(new HttpContextInjectableProvider());
  injectableFactory.add(new MatrixParamInjectableProvider());
  injectableFactory.add(new PathParamInjectableProvider());
  injectableFactory.add(new QueryParamInjectableProvider());
  this.rootsRule=new RootResourceClassesRule(processRootResources(resourceConfig.getResourceClasses()));
}"
51308,"public MultivaluedMap<String,Object> getMetadata(){
  if (headers == null)   headers=new ResponseHttpHeadersImpl();
  for (int i=0; i < values.length; i++)   if (values[i] != null)   headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
  Iterator i=nameValuePairs.iterator();
  while (i.hasNext()) {
    headers.add((String)i.next(),i.next());
  }
  return headers;
}","public MultivaluedMap<String,Object> getMetadata(){
  if (headers != null)   return headers;
  headers=new ResponseHttpHeadersImpl();
  for (int i=0; i < values.length; i++)   if (values[i] != null)   headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
  Iterator i=nameValuePairs.iterator();
  while (i.hasNext()) {
    headers.add((String)i.next(),i.next());
  }
  return headers;
}"
51309,"public MultivaluedMap<String,Object> getMetadataOptimal(HttpRequestContext request,MediaType contentType){
  if (headers == null)   headers=new ResponseHttpHeadersImpl();
  if (values.length == 0 && contentType != null) {
    headers.putSingle(ResponseBuilderImpl.getHeader(ResponseBuilderImpl.CONTENT_TYPE),contentType);
  }
  for (int i=0; i < values.length; i++) {
switch (i) {
case ResponseBuilderImpl.CONTENT_TYPE:
      if (values[i] != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
 else       if (contentType != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),contentType);
    break;
case ResponseBuilderImpl.LOCATION:
  Object location=values[i];
if (location != null) {
  if (location instanceof URI) {
    if (!((URI)location).isAbsolute()) {
      String path=((URI)location).getRawPath();
      if (status == 201)       location=UriBuilder.fromUri(request.getAbsolutePath()).encode(false).path(path).build();
 else       location=UriBuilder.fromUri(request.getBaseUri()).encode(false).path(path).build();
    }
  }
  headers.putSingle(ResponseBuilderImpl.getHeader(i),location);
}
break;
default :
if (values[i] != null) headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
}
}
Iterator i=nameValuePairs.iterator();
while (i.hasNext()) {
headers.add((String)i.next(),i.next());
}
return headers;
}","public MultivaluedMap<String,Object> getMetadataOptimal(HttpRequestContext request,MediaType contentType){
  if (headers != null)   return headers;
  headers=new ResponseHttpHeadersImpl();
  if (values.length == 0 && contentType != null) {
    headers.putSingle(ResponseBuilderImpl.getHeader(ResponseBuilderImpl.CONTENT_TYPE),contentType);
  }
  for (int i=0; i < values.length; i++) {
switch (i) {
case ResponseBuilderImpl.CONTENT_TYPE:
      if (values[i] != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
 else       if (contentType != null)       headers.putSingle(ResponseBuilderImpl.getHeader(i),contentType);
    break;
case ResponseBuilderImpl.LOCATION:
  Object location=values[i];
if (location != null) {
  if (location instanceof URI) {
    if (!((URI)location).isAbsolute()) {
      String path=((URI)location).getRawPath();
      if (status == 201)       location=UriBuilder.fromUri(request.getAbsolutePath()).encode(false).path(path).build();
 else       location=UriBuilder.fromUri(request.getBaseUri()).encode(false).path(path).build();
    }
  }
  headers.putSingle(ResponseBuilderImpl.getHeader(i),location);
}
break;
default :
if (values[i] != null) headers.putSingle(ResponseBuilderImpl.getHeader(i),values[i]);
}
}
Iterator i=nameValuePairs.iterator();
while (i.hasNext()) {
headers.add((String)i.next(),i.next());
}
return headers;
}"
51310,"public final void setResponse(Response response,MediaType contentType){
  responseSet=true;
  if (contentType == null)   contentType=APPLICATION_OCTET_STREAM;
  response=(response != null) ? response : Responses.noContent().build();
  this.status=response.getStatus();
  this.entity=response.getEntity();
  if (request.getHttpMethod().equals(""String_Node_Str""))   this.entity=null;
 else   if (this.entity == null) {
    contentType=null;
    if (status == 200)     status=204;
  }
 else   if (status == 204)   status=200;
  if (response instanceof ResponseImpl) {
    this.headers=setResponseOptimal((ResponseImpl)response,contentType);
  }
 else {
    this.headers=setResponseNonOptimal(response,contentType);
  }
}","public final void setResponse(Response response,MediaType contentType){
  responseSet=true;
  if (contentType == null)   contentType=APPLICATION_OCTET_STREAM;
  response=(response != null) ? response : Responses.noContent().build();
  this.status=response.getStatus();
  this.entity=response.getEntity();
  if (request.getHttpMethod().equals(""String_Node_Str""))   this.entity=null;
 else   if (this.entity == null) {
    contentType=null;
  }
  if (response instanceof ResponseImpl) {
    this.headers=setResponseOptimal((ResponseImpl)response,contentType);
  }
 else {
    this.headers=setResponseNonOptimal(response,contentType);
  }
}"
51311,"protected WebResource resource(String relativeUri,boolean checkStatus,ClientConfig clientConfig){
  Client c=(clientConfig == null) ? new Client(new TestResourceClientHandler(BASE_URI,w)) : new Client(new TestResourceClientHandler(BASE_URI,w),clientConfig);
  if (checkStatus) {
    c.addFilter(new ClientFilter(){
      public ClientResponse handle(      ClientRequest ro){
        ClientResponse r=getNext().handle(ro);
        if (r.hasEntity()) {
          assertEquals(200,r.getStatus());
        }
 else {
          assertEquals(204,r.getStatus());
        }
        return r;
      }
    }
);
  }
  WebResource r=c.resource(createCompleteUri(BASE_URI,relativeUri));
  return r;
}","protected WebResource resource(String relativeUri,boolean checkStatus,ClientConfig clientConfig){
  Client c=(clientConfig == null) ? new Client(new TestResourceClientHandler(BASE_URI,w)) : new Client(new TestResourceClientHandler(BASE_URI,w),clientConfig);
  if (checkStatus) {
    c.addFilter(new ClientFilter(){
      public ClientResponse handle(      ClientRequest ro){
        ClientResponse r=getNext().handle(ro);
        assertTrue(r.getStatus() < 300);
        return r;
      }
    }
);
  }
  WebResource r=c.resource(createCompleteUri(BASE_URI,relativeUri));
  return r;
}"
51312,"public ClientResponse handle(ClientRequest ro){
  ClientResponse r=getNext().handle(ro);
  if (r.hasEntity()) {
    assertEquals(200,r.getStatus());
  }
 else {
    assertEquals(204,r.getStatus());
  }
  return r;
}","public ClientResponse handle(ClientRequest ro){
  ClientResponse r=getNext().handle(ro);
  assertTrue(r.getStatus() < 300);
  return r;
}"
51313,"/** 
 * @param paths the array paths consisting of either jar files ordirectories containing jar files for class files.
 */
public ClasspathResourceConfig(String[] paths){
  super();
  if (paths == null || paths.length == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  this.paths=paths;
  init(paths);
}","/** 
 * @param paths the array paths consisting of either jar files ordirectories containing jar files for class files.
 */
public ClasspathResourceConfig(String[] paths){
  super();
  if (paths == null || paths.length == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  this.paths=paths.clone();
  init(paths);
}"
51314,"public void setClasspath(Path classpath){
  if (classpath != null) {
    this.classpath=classpath;
  }
 else {
    this.classpath.append(classpath);
  }
}","public void setClasspath(Path classpath){
  if (this.classpath == null) {
    this.classpath=classpath;
  }
 else {
    this.classpath.append(classpath);
  }
}"
51315,"private void createWadlResource(Set<AbstractResource> rootResources,RulesMap<UriRule> rulesMap){
  Object wr=WadlFactory.createWadlResource(rootResources);
  if (wr == null)   return;
  ResourceClass r=getResourceClass(WadlResource.class);
  UriTemplate t=new PathTemplate(""String_Node_Str"",false);
  PathPattern p=new PathPattern(t,false);
  rulesMap.put(p,new RightHandPathRule(resourceConfig.getFeature(ResourceConfig.FEATURE_REDIRECT),false,new ResourceObjectRule(t,wr)));
}","private void createWadlResource(Set<AbstractResource> rootResources,RulesMap<UriRule> rulesMap){
  Object wr=WadlFactory.createWadlResource(rootResources);
  if (wr == null)   return;
  getResourceClass(WadlResource.class);
  UriTemplate t=new PathTemplate(""String_Node_Str"",false);
  PathPattern p=new PathPattern(t,false);
  rulesMap.put(p,new RightHandPathRule(resourceConfig.getFeature(ResourceConfig.FEATURE_REDIRECT),false,new ResourceObjectRule(t,wr)));
}"
51316,"private final void processProperties(Map<String,Object> properties){
  for (  String k : properties.keySet()) {
    if (k.startsWith(NAMESPACE)) {
      getJsonProperties().put(k,properties.get(k));
    }
  }
  for (  String k : getJsonProperties().keySet()) {
    properties.remove(k);
  }
}","private final void processProperties(Map<String,Object> properties){
  for (  Map.Entry<String,Object> e : properties.entrySet()) {
    if (e.getKey().startsWith(NAMESPACE)) {
      getJsonProperties().put(e.getKey(),e.getValue());
    }
  }
  for (  String k : getJsonProperties().keySet()) {
    properties.remove(k);
  }
}"
51317,"public JSONUnmarshaller(JAXBContext jaxbContext,Map<String,Object> properties) throws JAXBException {
  try {
    this.jaxbContext=jaxbContext;
    this.jaxbUnmarshaller=jaxbContext.createUnmarshaller();
    setProperties(properties);
  }
 catch (  PropertyException ex) {
    Logger.getLogger(JSONUnmarshaller.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public JSONUnmarshaller(JAXBContext jaxbContext,Map<String,Object> properties) throws JAXBException {
  try {
    this.jaxbUnmarshaller=jaxbContext.createUnmarshaller();
    setProperties(properties);
  }
 catch (  PropertyException ex) {
    Logger.getLogger(JSONUnmarshaller.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
51318,"public JsonXmlStreamReader(Reader reader,boolean jsonRootUnwrapping) throws IOException {
  this.reader=reader;
  this.jsonRootUnwrapping=jsonRootUnwrapping;
  lexer=new JsonLexer(reader);
  depth=0;
  processingStack=new ArrayList<ProcessingState>();
  processingStack.add(new ProcessingState());
  readNext();
}","public JsonXmlStreamReader(Reader reader,boolean jsonRootUnwrapping) throws IOException {
  this.jsonRootUnwrapping=jsonRootUnwrapping;
  lexer=new JsonLexer(reader);
  depth=0;
  processingStack=new ArrayList<ProcessingState>();
  processingStack.add(new ProcessingState());
  readNext();
}"
51319,"/** 
 * Redirect to a URI that ends in a slash. TODO use the complete URI.
 */
private boolean redirect(UriRuleContext context){
  final HttpRequestContext request=context.getRequest();
  final HttpResponseContext response=context.getResponse();
  response.setResponse(Response.temporaryRedirect(UriBuilder.fromUri(context.getUriInfo().getAbsolutePath()).path(""String_Node_Str"").build()).build());
  return true;
}","/** 
 * Redirect to a URI that ends in a slash. TODO use the complete URI.
 */
private boolean redirect(UriRuleContext context){
  final HttpResponseContext response=context.getResponse();
  response.setResponse(Response.temporaryRedirect(UriBuilder.fromUri(context.getUriInfo().getAbsolutePath()).path(""String_Node_Str"").build()).build());
  return true;
}"
51320,"/** 
 * Redirect to a URI that ends in a slash. TODO use the complete URI.
 */
private boolean redirect(UriRuleContext context){
  final HttpRequestContext request=context.getRequest();
  final HttpResponseContext response=context.getResponse();
  response.setResponse(Response.temporaryRedirect(UriBuilder.fromUri(context.getUriInfo().getAbsolutePath()).path(""String_Node_Str"").build()).build());
  return true;
}","/** 
 * Redirect to a URI that ends in a slash. TODO use the complete URI.
 */
private boolean redirect(UriRuleContext context){
  final HttpResponseContext response=context.getResponse();
  response.setResponse(Response.temporaryRedirect(UriBuilder.fromUri(context.getUriInfo().getAbsolutePath()).path(""String_Node_Str"").build()).build());
  return true;
}"
51321,"/** 
 * Check if JAXB is present in the class path
 * @throws java.lang.ClassNotFoundException
 */
private static void checkForJAXB() throws ClassNotFoundException {
  Class<?> c=Class.forName(""String_Node_Str"");
}","/** 
 * Check if JAXB is present in the class path
 * @throws java.lang.ClassNotFoundException
 */
private static void checkForJAXB() throws ClassNotFoundException {
  Class.forName(""String_Node_Str"");
}"
51322,"private static Resource generateResource(AbstractResource r){
  Resource wadlResource=new Resource();
  if (r.isRootResource())   wadlResource.setPath(r.getUriPath().getValue());
  Map<String,Param> wadlResourceParams=new HashMap<String,Param>();
  for (  AbstractResourceMethod m : r.getResourceMethods()) {
    com.sun.research.ws.wadl.Method wadlMethod=generateMethod(wadlResourceParams,m);
    wadlResource.getMethodOrResource().add(wadlMethod);
  }
  for (  Param wadlParam : wadlResourceParams.values()) {
    wadlResource.getParam().add(wadlParam);
  }
  Map<String,Resource> wadlSubResources=new HashMap<String,Resource>();
  Map<String,Map<String,Param>> wadlSubResourcesParams=new HashMap<String,Map<String,Param>>();
  for (  AbstractSubResourceMethod m : r.getSubResourceMethods()) {
    String template=m.getUriPath().getValue();
    Resource wadlSubResource=wadlSubResources.get(template);
    Map<String,Param> wadlSubResourceParams=wadlSubResourcesParams.get(template);
    if (wadlSubResource == null) {
      wadlSubResource=new Resource();
      wadlSubResource.setPath(template);
      wadlSubResources.put(template,wadlSubResource);
      wadlSubResourceParams=new HashMap<String,Param>();
      wadlSubResourcesParams.put(template,wadlSubResourceParams);
      wadlResource.getMethodOrResource().add(wadlSubResource);
    }
    com.sun.research.ws.wadl.Method wadlMethod=generateMethod(wadlSubResourceParams,m);
    wadlSubResource.getMethodOrResource().add(wadlMethod);
  }
  for (  String template : wadlSubResources.keySet()) {
    Resource wadlSubResource=wadlSubResources.get(template);
    Map<String,Param> wadlSubResourceParams=wadlSubResourcesParams.get(template);
    for (    Param wadlParam : wadlSubResourceParams.values()) {
      wadlSubResource.getParam().add(wadlParam);
    }
  }
  for (  AbstractSubResourceLocator l : r.getSubResourceLocators()) {
    Resource wadlSubResource=new Resource();
    wadlSubResource.setPath(l.getUriPath().getValue());
    for (    Parameter p : l.getParameters()) {
      Param wadlParam=generateParam(p);
      wadlSubResource.getParam().add(wadlParam);
    }
    wadlResource.getMethodOrResource().add(wadlSubResource);
  }
  return wadlResource;
}","private static Resource generateResource(AbstractResource r){
  Resource wadlResource=new Resource();
  if (r.isRootResource())   wadlResource.setPath(r.getUriPath().getValue());
  Map<String,Param> wadlResourceParams=new HashMap<String,Param>();
  for (  AbstractResourceMethod m : r.getResourceMethods()) {
    com.sun.research.ws.wadl.Method wadlMethod=generateMethod(wadlResourceParams,m);
    wadlResource.getMethodOrResource().add(wadlMethod);
  }
  for (  Param wadlParam : wadlResourceParams.values()) {
    wadlResource.getParam().add(wadlParam);
  }
  Map<String,Resource> wadlSubResources=new HashMap<String,Resource>();
  Map<String,Map<String,Param>> wadlSubResourcesParams=new HashMap<String,Map<String,Param>>();
  for (  AbstractSubResourceMethod m : r.getSubResourceMethods()) {
    String template=m.getUriPath().getValue();
    Resource wadlSubResource=wadlSubResources.get(template);
    Map<String,Param> wadlSubResourceParams=wadlSubResourcesParams.get(template);
    if (wadlSubResource == null) {
      wadlSubResource=new Resource();
      wadlSubResource.setPath(template);
      wadlSubResources.put(template,wadlSubResource);
      wadlSubResourceParams=new HashMap<String,Param>();
      wadlSubResourcesParams.put(template,wadlSubResourceParams);
      wadlResource.getMethodOrResource().add(wadlSubResource);
    }
    com.sun.research.ws.wadl.Method wadlMethod=generateMethod(wadlSubResourceParams,m);
    wadlSubResource.getMethodOrResource().add(wadlMethod);
  }
  for (  Map.Entry<String,Resource> e : wadlSubResources.entrySet()) {
    String template=e.getKey();
    Resource wadlSubResource=e.getValue();
    Map<String,Param> wadlSubResourceParams=wadlSubResourcesParams.get(template);
    for (    Param wadlParam : wadlSubResourceParams.values()) {
      wadlSubResource.getParam().add(wadlParam);
    }
  }
  for (  AbstractSubResourceLocator l : r.getSubResourceLocators()) {
    Resource wadlSubResource=new Resource();
    wadlSubResource.setPath(l.getUriPath().getValue());
    for (    Parameter p : l.getParameters()) {
      Param wadlParam=generateParam(p);
      wadlSubResource.getParam().add(wadlParam);
    }
    wadlResource.getMethodOrResource().add(wadlSubResource);
  }
  return wadlResource;
}"
51323,"private static Class resolveTypeVariable(Class c,Class dc,TypeVariable tv,Map<TypeVariable,Type> map){
  ParameterizedType pt=(ParameterizedType)c.getGenericSuperclass();
  Type[] typeArguments=pt.getActualTypeArguments();
  Class sc=c.getSuperclass();
  TypeVariable[] typeParameters=sc.getTypeParameters();
  Map<TypeVariable,Type> submap=new HashMap<TypeVariable,Type>();
  for (int i=0; i < typeArguments.length; i++) {
    if (typeArguments[i] instanceof TypeVariable) {
      Type t=map.get(typeArguments[i]);
      submap.put(typeParameters[i],t);
    }
 else {
      submap.put(typeParameters[i],typeArguments[i]);
    }
  }
  if (sc == dc) {
    Type t=submap.get(tv);
    if (t instanceof Class) {
      return (Class)t;
    }
 else     if (t instanceof GenericArrayType) {
      t=((GenericArrayType)t).getGenericComponentType();
      if (t instanceof Class) {
        c=(Class)t;
        try {
          Object o=Array.newInstance(c,0);
          return o.getClass();
        }
 catch (        Exception e) {
        }
        return null;
      }
 else {
        return null;
      }
    }
 else     if (t instanceof ParameterizedType) {
      pt=(ParameterizedType)t;
      return null;
    }
 else {
      return null;
    }
  }
 else {
    return resolveTypeVariable(sc,dc,tv,submap);
  }
}","private static ClassTypePair resolveTypeVariable(Class c,Class dc,TypeVariable tv,Map<TypeVariable,Type> map){
  ParameterizedType pt=(ParameterizedType)c.getGenericSuperclass();
  Type[] typeArguments=pt.getActualTypeArguments();
  Class sc=c.getSuperclass();
  TypeVariable[] typeParameters=sc.getTypeParameters();
  Map<TypeVariable,Type> submap=new HashMap<TypeVariable,Type>();
  for (int i=0; i < typeArguments.length; i++) {
    if (typeArguments[i] instanceof TypeVariable) {
      Type t=map.get(typeArguments[i]);
      submap.put(typeParameters[i],t);
    }
 else {
      submap.put(typeParameters[i],typeArguments[i]);
    }
  }
  if (sc == dc) {
    Type t=submap.get(tv);
    if (t instanceof Class) {
      return new ClassTypePair((Class)t);
    }
 else     if (t instanceof GenericArrayType) {
      t=((GenericArrayType)t).getGenericComponentType();
      if (t instanceof Class) {
        c=(Class)t;
        try {
          Object o=Array.newInstance(c,0);
          return new ClassTypePair(o.getClass());
        }
 catch (        Exception e) {
        }
        return null;
      }
 else {
        return null;
      }
    }
 else     if (t instanceof ParameterizedType) {
      pt=(ParameterizedType)t;
      if (pt.getRawType() instanceof Class) {
        return new ClassTypePair((Class)pt.getRawType(),pt);
      }
 else       return null;
    }
 else {
      return null;
    }
  }
 else {
    return resolveTypeVariable(sc,dc,tv,submap);
  }
}"
51324,"private ParameterExtractor processParameter(AbstractResourceMethod method,Parameter parameter,Annotation[] annotations,boolean requireNoEntityParameter){
  if (Parameter.Source.ENTITY == parameter.getSource()) {
    if (requireNoEntityParameter) {
      return null;
    }
    if (parameter.getParameterType() instanceof TypeVariable) {
      Class c=ReflectionHelper.resolveTypeVariable(method.getDeclaringResource().getResourceClass(),method.getMethod().getDeclaringClass(),(TypeVariable)parameter.getParameterType());
      return (c != null) ? new EntityExtractor(c,c,annotations) : null;
    }
 else {
      return new EntityExtractor(parameter.getParameterClass(),parameter.getParameterType(),annotations);
    }
  }
  ParameterProcessor p=ParameterProcessorFactory.createParameterProcessor(parameter.getSource());
  if (null == p) {
    return null;
  }
  return p.process(parameter);
}","private ParameterExtractor processParameter(AbstractResourceMethod method,Parameter parameter,Annotation[] annotations,boolean requireNoEntityParameter){
  if (Parameter.Source.ENTITY == parameter.getSource()) {
    if (requireNoEntityParameter) {
      return null;
    }
    if (parameter.getParameterType() instanceof TypeVariable) {
      ReflectionHelper.ClassTypePair ct=ReflectionHelper.resolveTypeVariable(method.getDeclaringResource().getResourceClass(),method.getMethod().getDeclaringClass(),(TypeVariable)parameter.getParameterType());
      return (ct != null) ? new EntityExtractor(ct.c,ct.t,annotations) : null;
    }
 else {
      return new EntityExtractor(parameter.getParameterClass(),parameter.getParameterType(),annotations);
    }
  }
  ParameterProcessor p=ParameterProcessorFactory.createParameterProcessor(parameter.getSource());
  if (null == p) {
    return null;
  }
  return p.process(parameter);
}"
51325,"private void analyzeClassFile(URI classFileUri){
  getClassReader(classFileUri).accept(classVisitor,0);
}","private void analyzeClassFile(JarFile jarFile,JarEntry entry){
  getClassReader(jarFile,entry).accept(classVisitor,0);
}"
51326,"private ClassReader getClassReader(URI classFileUri){
  try {
    InputStream is=classFileUri.toURL().openStream();
    ClassReader cr=new ClassReader(is);
    is.close();
    return cr;
  }
 catch (  IOException ex) {
    String s=""String_Node_Str"" + classFileUri;
    LOGGER.severe(s);
    throw new RuntimeException(s,ex);
  }
}","private ClassReader getClassReader(URI classFileUri){
  InputStream is=null;
  try {
    is=classFileUri.toURL().openStream();
    ClassReader cr=new ClassReader(is);
    return cr;
  }
 catch (  IOException ex) {
    String s=""String_Node_Str"" + classFileUri;
    LOGGER.severe(s);
    throw new RuntimeException(s,ex);
  }
 finally {
    try {
      is.close();
    }
 catch (    IOException ex) {
      String s=""String_Node_Str"" + classFileUri;
      LOGGER.severe(s);
    }
  }
}"
51327,"private void indexJar(File file,String parent){
  final JarFile jar=getJarFile(file);
  final Enumeration<JarEntry> entries=jar.entries();
  final String jarBase=""String_Node_Str"" + file.toURI() + ""String_Node_Str"";
  while (entries.hasMoreElements()) {
    JarEntry e=entries.nextElement();
    if (!e.isDirectory() && e.getName().startsWith(parent) && e.getName().endsWith(""String_Node_Str"")) {
      analyzeClassFile(URI.create(jarBase + e.getName()));
    }
  }
}","private void indexJar(File file,String parent){
  final JarFile jar=getJarFile(file);
  final Enumeration<JarEntry> entries=jar.entries();
  while (entries.hasMoreElements()) {
    JarEntry e=entries.nextElement();
    if (!e.isDirectory() && e.getName().startsWith(parent) && e.getName().endsWith(""String_Node_Str"")) {
      analyzeClassFile(jar,e);
    }
  }
  try {
    jar.close();
  }
 catch (  IOException ex) {
    String s=""String_Node_Str"" + jar.getName();
    LOGGER.severe(s);
  }
}"
51328,"/** 
 * Parse the content of the given URL as a provider-configuration file.
 * @param service  The service class for which providers are being sought;used to construct error detail strings
 * @param u        The URL naming the configuration file to be parsed
 * @param returned A Set containing the names of provider classes that have alreadybeen returned.  This set will be updated to contain the names that will be yielded from the returned <tt>Iterator</tt>.
 * @return A (possibly empty) <tt>Iterator</tt> that will yield theprovider-class names in the given configuration file that are not yet members of the returned set
 * @throws ServiceConfigurationError If an I/O error occurs while reading from the given URL, orif a configuration-file format error is detected
 */
@SuppressWarnings({""String_Node_Str""}) private static Iterator<String> parse(Class service,URL u,Set<String> returned) throws ServiceConfigurationError {
  InputStream in=null;
  BufferedReader r=null;
  ArrayList<String> names=new ArrayList<String>();
  try {
    in=u.openStream();
    r=new BufferedReader(new InputStreamReader(in,""String_Node_Str""));
    int lc=1;
    while ((lc=parseLine(service,u,r,lc,names,returned)) >= 0)     ;
  }
 catch (  IOException x) {
    fail(service,""String_Node_Str"" + x);
  }
 finally {
    try {
      if (r != null)       r.close();
      if (in != null)       in.close();
    }
 catch (    IOException y) {
      fail(service,""String_Node_Str"" + y);
    }
  }
  return names.iterator();
}","/** 
 * Parse the content of the given URL as a provider-configuration file.
 * @param service  The service class for which providers are being sought;used to construct error detail strings
 * @param u        The URL naming the configuration file to be parsed
 * @param returned A Set containing the names of provider classes that have alreadybeen returned.  This set will be updated to contain the names that will be yielded from the returned <tt>Iterator</tt>.
 * @return A (possibly empty) <tt>Iterator</tt> that will yield theprovider-class names in the given configuration file that are not yet members of the returned set
 * @throws ServiceConfigurationError If an I/O error occurs while reading from the given URL, orif a configuration-file format error is detected
 */
@SuppressWarnings({""String_Node_Str""}) private static Iterator<String> parse(Class service,URL u,Set<String> returned) throws ServiceConfigurationError {
  InputStream in=null;
  BufferedReader r=null;
  ArrayList<String> names=new ArrayList<String>();
  try {
    URLConnection uConn=u.openConnection();
    uConn.setDefaultUseCaches(false);
    in=uConn.getInputStream();
    r=new BufferedReader(new InputStreamReader(in,""String_Node_Str""));
    int lc=1;
    while ((lc=parseLine(service,u,r,lc,names,returned)) >= 0)     ;
  }
 catch (  IOException x) {
    fail(service,""String_Node_Str"" + x);
  }
 finally {
    try {
      if (r != null)       r.close();
      if (in != null)       in.close();
    }
 catch (    IOException y) {
      fail(service,""String_Node_Str"" + y);
    }
  }
  return names.iterator();
}"
51329,"private void readNext(boolean checkAttributesOnly) throws IOException {
  if (!checkAttributesOnly) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || checkAttributesOnly) {
    lastToken=nextToken();
    if (null == lastToken) {
      if (jsonRootUnwrapping) {
        eventQueue.add(new EndElementEvent(processingStack.get(depth).lastName,new MyLocation(lexer)));
      }
      eventQueue.add(new EndDocumentEvent(new MyLocation(lexer)));
      break;
    }
switch (processingStack.get(depth).state) {
case START:
      if (0 == depth) {
        eventQueue.add(new StartDocumentEvent(new MyLocation(lexer)));
        processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
        if (jsonRootUnwrapping) {
          processingStack.get(depth).lastName=""String_Node_Str"";
          StartElementEvent event=new StartElementEvent(processingStack.get(depth).lastName,new MyLocation(lexer));
          eventQueue.add(event);
          processingStack.get(depth).eventToReadAttributesFor=event;
        }
        if (JsonToken.NULL != lastToken.tokenType) {
          processingStack.add(new ProcessingState());
          depth++;
        }
      }
    processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
  break;
case AFTER_OBJ_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.STRING:
  if (lastToken.tokenText.startsWith(""String_Node_Str"")) {
    String attrName=lastToken.tokenText;
    colon();
    lastToken=nextToken();
    if (JsonToken.STRING != lastToken.tokenType) {
      throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
    }
    if (null != processingStack.get(depth - 1).eventToReadAttributesFor) {
      processingStack.get(depth - 1).eventToReadAttributesFor.addAttribute(attrName.substring(1),lastToken.tokenText);
    }
    lastToken=nextToken();
switch (lastToken.tokenType) {
case JsonToken.END_OBJECT:
      eventQueue.add(new EndElementEvent(processingStack.get(depth).lastName,new MyLocation(lexer)));
    processingStack.remove(depth);
  depth--;
break;
case JsonToken.COMMA:
break;
default :
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
}
 else {
StartElementEvent event=new StartElementEvent(lastToken.tokenText,new MyLocation(lexer));
eventQueue.add(event);
processingStack.get(depth).eventToReadAttributesFor=event;
checkAttributesOnly=false;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
}
break;
case JsonToken.END_OBJECT:
eventQueue.add(new EndElementEvent(processingStack.get(depth).lastName,new MyLocation(lexer)));
checkAttributesOnly=false;
processingStack.remove(depth);
depth--;
break;
default :
}
break;
case BEFORE_OBJ_NEXT_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.STRING:
StartElementEvent event=new StartElementEvent(lastToken.tokenText,new MyLocation(lexer));
eventQueue.add(event);
processingStack.get(depth).eventToReadAttributesFor=event;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
break;
default :
}
break;
case BEFORE_VALUE_IN_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new MyLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_OBJ_KV_PAIR;
break;
default :
}
break;
case AFTER_OBJ_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_OBJ_NEXT_KV_PAIR;
eventQueue.add(new EndElementEvent(processingStack.get(depth).lastName,new MyLocation(lexer)));
break;
case JsonToken.END_OBJECT:
eventQueue.add(new EndElementEvent(processingStack.get(depth).lastName,new MyLocation(lexer)));
processingStack.remove(depth);
depth--;
valueRead();
break;
default :
}
break;
case AFTER_ARRAY_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=processingStack.get(depth - 1).eventToReadAttributesFor;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new MyLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case BEFORE_NEXT_ARRAY_ELEM:
StartElementEvent event=new StartElementEvent(processingStack.get(depth - 1).lastName,new MyLocation(lexer));
eventQueue.add(event);
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=event;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new MyLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case AFTER_ARRAY_ELEM:
switch (lastToken.tokenType) {
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_NEXT_ARRAY_ELEM;
eventQueue.add(new EndElementEvent(processingStack.get(depth - 1).lastName,new MyLocation(lexer)));
break;
default :
}
break;
}
}
}","private void readNext(boolean checkAttributesOnly) throws IOException {
  if (!checkAttributesOnly) {
    eventQueue.poll();
  }
  while (eventQueue.isEmpty() || checkAttributesOnly) {
    lastToken=nextToken();
    if ((null == lastToken) || (LaState.END == processingStack.get(depth).state)) {
      if (jsonRootUnwrapping) {
        generateEEEvent(processingStack.get(depth).lastName);
      }
      eventQueue.add(new EndDocumentEvent(new MyLocation(lexer)));
      break;
    }
switch (processingStack.get(depth).state) {
case START:
      if (0 == depth) {
        eventQueue.add(new StartDocumentEvent(new MyLocation(lexer)));
        processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
        if (jsonRootUnwrapping) {
          processingStack.get(depth).lastName=""String_Node_Str"";
          StartElementEvent event=generateSEEvent(processingStack.get(depth).lastName);
          processingStack.get(depth).eventToReadAttributesFor=event;
        }
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
          processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
        depth++;
      break;
case JsonToken.START_ARRAY:
    processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
  depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new MyLocation(lexer)));
processingStack.get(depth).state=LaState.END;
break;
default :
}
}
processingStack.get(depth).state=LaState.AFTER_OBJ_START_BRACE;
break;
case AFTER_OBJ_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.STRING:
if (lastToken.tokenText.startsWith(""String_Node_Str"")) {
String attrName=lastToken.tokenText;
colon();
lastToken=nextToken();
if (JsonToken.STRING != lastToken.tokenType) {
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
if (null != processingStack.get(depth - 1).eventToReadAttributesFor) {
processingStack.get(depth - 1).eventToReadAttributesFor.addAttribute(attrName.substring(1),lastToken.tokenText);
}
lastToken=nextToken();
switch (lastToken.tokenType) {
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
processingStack.remove(depth);
depth--;
break;
case JsonToken.COMMA:
break;
default :
throw new IOException(""String_Node_Str"" + lastToken.tokenText + ""String_Node_Str"");
}
}
 else {
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
checkAttributesOnly=false;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
}
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
checkAttributesOnly=false;
processingStack.remove(depth);
depth--;
break;
default :
}
break;
case BEFORE_OBJ_NEXT_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.STRING:
StartElementEvent event=generateSEEvent(lastToken.tokenText);
processingStack.get(depth).eventToReadAttributesFor=event;
processingStack.get(depth).lastName=lastToken.tokenText;
colon();
processingStack.get(depth).state=LaState.BEFORE_VALUE_IN_KV_PAIR;
break;
default :
}
break;
case BEFORE_VALUE_IN_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
case JsonToken.NUMBER:
case JsonToken.TRUE:
case JsonToken.FALSE:
case JsonToken.NULL:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new MyLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_OBJ_KV_PAIR;
break;
default :
}
break;
case AFTER_OBJ_KV_PAIR:
switch (lastToken.tokenType) {
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_OBJ_NEXT_KV_PAIR;
generateEEEvent(processingStack.get(depth).lastName);
break;
case JsonToken.END_OBJECT:
generateEEEvent(processingStack.get(depth).lastName);
processingStack.remove(depth);
depth--;
valueRead();
break;
default :
}
break;
case AFTER_ARRAY_START_BRACE:
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=processingStack.get(depth - 1).eventToReadAttributesFor;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new MyLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case BEFORE_NEXT_ARRAY_ELEM:
StartElementEvent event=generateSEEvent(processingStack.get(depth - 1).lastName);
switch (lastToken.tokenType) {
case JsonToken.START_OBJECT:
processingStack.add(new ProcessingState(LaState.AFTER_OBJ_START_BRACE));
processingStack.get(depth).eventToReadAttributesFor=event;
depth++;
break;
case JsonToken.START_ARRAY:
processingStack.add(new ProcessingState(LaState.AFTER_ARRAY_START_BRACE));
depth++;
break;
case JsonToken.STRING:
eventQueue.add(new CharactersEvent(lastToken.tokenText,new MyLocation(lexer)));
processingStack.get(depth).state=LaState.AFTER_ARRAY_ELEM;
break;
default :
}
break;
case AFTER_ARRAY_ELEM:
switch (lastToken.tokenType) {
case JsonToken.END_ARRAY:
processingStack.remove(depth);
depth--;
valueRead();
break;
case JsonToken.COMMA:
processingStack.get(depth).state=LaState.BEFORE_NEXT_ARRAY_ELEM;
generateEEEvent(processingStack.get(depth - 1).lastName);
break;
default :
}
break;
}
}
}"
51330,"public void writeEndElement() throws XMLStreamException {
  try {
    if (null != processingStack.get(depth).lastElementWriter) {
      if (processingStack.get(depth).lastIsArray) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
 else {
        if (isArrayElement(processingStack.get(depth).lastName)) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=true;
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
 else {
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        }
      }
    }
    if (processingStack.get(depth).writer.isEmpty)     processingStack.get(depth).writer.write(""String_Node_Str"");
 else     if ((null == processingStack.get(depth).lastWasPrimitive) || !processingStack.get(depth).lastWasPrimitive) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
    processingStack.get(depth - 1).lastName=processingStack.get(depth - 1).currentName;
    processingStack.get(depth - 1).lastWasPrimitive=false;
    processingStack.get(depth - 1).lastElementWriter=processingStack.get(depth).writer;
    processingStack.remove(depth);
    depth--;
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public void writeEndElement() throws XMLStreamException {
  try {
    if (null != processingStack.get(depth).lastElementWriter) {
      if (processingStack.get(depth).lastIsArray) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
 else {
        if (isArrayElement(processingStack.get(depth).lastName)) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=true;
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
 else {
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        }
      }
    }
    if (processingStack.get(depth).writer.isEmpty) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
 else     if ((null == processingStack.get(depth).lastWasPrimitive) || !processingStack.get(depth).lastWasPrimitive) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
    processingStack.get(depth - 1).lastName=processingStack.get(depth - 1).currentName;
    processingStack.get(depth - 1).lastWasPrimitive=false;
    processingStack.get(depth - 1).lastElementWriter=processingStack.get(depth).writer;
    processingStack.remove(depth);
    depth--;
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
51331,"public void writeAttribute(String prefix,String namespaceURI,String localName,String value) throws XMLStreamException {
  writeStartElement(prefix,""String_Node_Str"" + localName,namespaceURI);
  writeCharacters(value);
  writeEndElement();
}","public void writeAttribute(String prefix,String namespaceURI,String localName,String value) throws XMLStreamException {
  processingStack.get(depth).hasAttributes=true;
  writeStartElement(prefix,""String_Node_Str"" + localName,namespaceURI);
  writeCharacters(value);
  writeEndElement();
}"
51332,"public void writeCharacters(String text) throws XMLStreamException {
  try {
    if (isNonString(processingStack.get(depth - 1).currentName)) {
      processingStack.get(depth).writer.write(JsonEncoder.encode(text));
    }
 else {
      processingStack.get(depth).writer.write(""String_Node_Str"" + JsonEncoder.encode(text) + ""String_Node_Str"");
    }
    processingStack.get(depth).lastWasPrimitive=true;
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public void writeCharacters(String text) throws XMLStreamException {
  if (processingStack.get(depth).hasAttributes) {
    writeStartElement(null,""String_Node_Str"",null);
    writeCharacters(text);
    writeEndElement();
  }
 else {
    try {
      if (isNonString(processingStack.get(depth - 1).currentName)) {
        processingStack.get(depth).writer.write(JsonEncoder.encode(text));
      }
 else {
        processingStack.get(depth).writer.write(""String_Node_Str"" + JsonEncoder.encode(text) + ""String_Node_Str"");
      }
      processingStack.get(depth).lastWasPrimitive=true;
    }
 catch (    IOException ex) {
      Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}"
51333,"public synchronized void allBeansTest(JSONJAXBContext context,Collection<Object> beans) throws Exception {
  JSONMarshaller marshaller=(JSONMarshaller)context.createMarshaller();
  marshaller.setProperty(JSONJAXBContext.JSON_ENABLED,Boolean.TRUE);
  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
  JSONUnmarshaller unmarshaller=(JSONUnmarshaller)context.createUnmarshaller();
  unmarshaller.setProperty(JSONJAXBContext.JSON_ENABLED,Boolean.TRUE);
  for (  Object originalBean : beans) {
    System.out.println(""String_Node_Str"" + originalBean.toString());
    StringWriter sWriter=new StringWriter();
    marshaller.marshal(originalBean,sWriter);
    System.out.println(sWriter.toString());
    assertEquals(originalBean,unmarshall(unmarshaller,originalBean.getClass(),new StringReader(sWriter.toString())));
    System.out.println(""String_Node_Str"");
  }
}","public synchronized void allBeansTest(JSONJAXBContext context,Collection<Object> beans) throws Exception {
  JSONMarshaller marshaller=(JSONMarshaller)context.createMarshaller();
  marshaller.setProperty(JSONJAXBContext.JSON_ENABLED,Boolean.TRUE);
  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
  JSONUnmarshaller unmarshaller=(JSONUnmarshaller)context.createUnmarshaller();
  unmarshaller.setProperty(JSONJAXBContext.JSON_ENABLED,Boolean.TRUE);
  for (  Object originalBean : beans) {
    System.out.println(""String_Node_Str"" + originalBean.toString());
    JAXBContext ctx=JAXBContext.newInstance(originalBean.getClass());
    Marshaller m=ctx.createMarshaller();
    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
    m.marshal(originalBean,System.out);
    StringWriter sWriter=new StringWriter();
    marshaller.marshal(originalBean,sWriter);
    System.out.println(sWriter.toString());
    assertEquals(originalBean,unmarshall(unmarshaller,originalBean.getClass(),new StringReader(sWriter.toString())));
    System.out.println(""String_Node_Str"");
  }
}"
51334,"public void writeEndElement() throws XMLStreamException {
  try {
    if (null != processingStack.get(depth).lastElementWriter) {
      if (processingStack.get(depth).lastIsArray) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
 else {
        if (isArrayElement(processingStack.get(depth).lastName)) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=true;
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
 else {
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        }
      }
    }
    if ((null == processingStack.get(depth).lastWasPrimitive) || !processingStack.get(depth).lastWasPrimitive) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
    processingStack.get(depth - 1).lastName=processingStack.get(depth - 1).currentName;
    processingStack.get(depth - 1).lastWasPrimitive=false;
    processingStack.get(depth - 1).lastElementWriter=processingStack.get(depth).writer;
    processingStack.remove(depth);
    depth--;
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public void writeEndElement() throws XMLStreamException {
  try {
    if (null != processingStack.get(depth).lastElementWriter) {
      if (processingStack.get(depth).lastIsArray) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        processingStack.get(depth).writer.write(""String_Node_Str"");
      }
 else {
        if (isArrayElement(processingStack.get(depth).lastName)) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
          processingStack.get(depth).lastIsArray=true;
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
 else {
          processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
        }
      }
    }
    if (processingStack.get(depth).writer.isEmpty)     processingStack.get(depth).writer.write(""String_Node_Str"");
 else     if ((null == processingStack.get(depth).lastWasPrimitive) || !processingStack.get(depth).lastWasPrimitive) {
      processingStack.get(depth).writer.write(""String_Node_Str"");
    }
    processingStack.get(depth - 1).lastName=processingStack.get(depth - 1).currentName;
    processingStack.get(depth - 1).lastWasPrimitive=false;
    processingStack.get(depth - 1).lastElementWriter=processingStack.get(depth).writer;
    processingStack.remove(depth);
    depth--;
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
51335,"public void writeStartElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {
  processingStack.get(depth).currentName=localName;
  try {
    boolean isNextArrayElement=processingStack.get(depth).currentName.equals(processingStack.get(depth).lastName);
    if (!isNextArrayElement) {
      if (isArrayElement(processingStack.get(depth).lastName)) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).lastIsArray=true;
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
      }
 else {
        if (null != processingStack.get(depth).lastElementWriter) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
            processingStack.get(depth).writer.write(""String_Node_Str"");
          }
 else {
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          }
        }
        processingStack.get(depth).lastIsArray=false;
        if (null != processingStack.get(depth).lastName) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).lastIsArray=false;
          }
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
        if (null == processingStack.get(depth).lastWasPrimitive) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
        processingStack.get(depth).writer.write(""String_Node_Str"" + localName + ""String_Node_Str"");
      }
    }
 else {
      processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
      processingStack.get(depth).lastIsArray=true;
      processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
    }
    depth++;
    processingStack.add(depth,createProcessingState());
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}","public void writeStartElement(String prefix,String localName,String namespaceURI) throws XMLStreamException {
  processingStack.get(depth).currentName=localName;
  try {
    boolean isNextArrayElement=processingStack.get(depth).currentName.equals(processingStack.get(depth).lastName);
    if (!isNextArrayElement) {
      if (isArrayElement(processingStack.get(depth).lastName) && processingStack.get(depth).hasNoElement) {
        processingStack.get(depth).writer.write(""String_Node_Str"");
        processingStack.get(depth).lastIsArray=true;
        processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
      }
 else {
        if (null != processingStack.get(depth).lastElementWriter) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
            processingStack.get(depth).writer.write(""String_Node_Str"");
          }
 else {
            processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
          }
        }
        processingStack.get(depth).lastIsArray=false;
        if (null != processingStack.get(depth).lastName) {
          if (processingStack.get(depth).lastIsArray) {
            processingStack.get(depth).writer.write(""String_Node_Str"");
            processingStack.get(depth).lastIsArray=false;
          }
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
        if (null == processingStack.get(depth).lastWasPrimitive) {
          processingStack.get(depth).writer.write(""String_Node_Str"");
        }
        processingStack.get(depth).writer.write(""String_Node_Str"" + localName + ""String_Node_Str"");
      }
    }
 else {
      processingStack.get(depth).hasNoElement=false;
      processingStack.get(depth).writer.write(processingStack.get(depth).lastIsArray ? ""String_Node_Str"" : ""String_Node_Str"");
      processingStack.get(depth).lastIsArray=true;
      processingStack.get(depth).writer.write(processingStack.get(depth).lastElementWriter.getContent());
    }
    depth++;
    processingStack.add(depth,createProcessingState());
  }
 catch (  IOException ex) {
    Logger.getLogger(JsonXmlStreamWriter.class.getName()).log(Level.SEVERE,null,ex);
  }
}"
51336,"private void appendPath(String segment){
  if (segment == null || segment.length() == 0)   return;
  segment=encode(segment,UriComponent.Type.PATH);
  final boolean pathEndsInSlash=path.length() > 0 && path.charAt(path.length() - 1) == '/';
  final boolean segmentStartsWithSlash=segment.charAt(0) == '/';
  if (!pathEndsInSlash && !segmentStartsWithSlash) {
    path.append('/');
  }
 else   if (pathEndsInSlash && segmentStartsWithSlash) {
    segment=segment.substring(1);
    if (segment.length() == 0)     return;
  }
  path.append(segment);
}","private void appendPath(String segment){
  if (segment == null || segment.length() == 0)   return;
  segment=encode(segment,UriComponent.Type.PATH);
  final boolean pathEndsInSlash=path.length() > 0 && path.charAt(path.length() - 1) == '/';
  final boolean segmentStartsWithSlash=segment.charAt(0) == '/';
  if (path.length() > 0 && !pathEndsInSlash && !segmentStartsWithSlash) {
    path.append('/');
  }
 else   if (pathEndsInSlash && segmentStartsWithSlash) {
    segment=segment.substring(1);
    if (segment.length() == 0)     return;
  }
  path.append(segment);
}"
51337,"private String create(){
  StringBuilder sb=new StringBuilder();
  if (scheme != null)   sb.append(scheme).append(':');
  if (userInfo != null || host != null || port != -1) {
    sb.append(""String_Node_Str"");
    if (userInfo != null && userInfo.length() > 0)     sb.append(userInfo).append('@');
    if (host != null) {
      sb.append(host);
    }
    if (port != -1)     sb.append(':').append(port);
  }
  if (path.length() > 0)   sb.append(path);
  if (query.length() > 0)   sb.append('?').append(query);
  if (fragment != null && fragment.length() > 0)   sb.append('#').append(fragment);
  return sb.toString();
}","private String create(){
  StringBuilder sb=new StringBuilder();
  if (scheme != null)   sb.append(scheme).append(':');
  if (userInfo != null || host != null || port != -1) {
    sb.append(""String_Node_Str"");
    if (userInfo != null && userInfo.length() > 0)     sb.append(userInfo).append('@');
    if (host != null) {
      sb.append(host);
    }
    if (port != -1)     sb.append(':').append(port);
  }
  if (path.length() > 0) {
    if (sb.length() > 0 && path.charAt(0) != '/')     sb.append(""String_Node_Str"");
    sb.append(path);
  }
  if (query.length() > 0)   sb.append('?').append(query);
  if (fragment != null && fragment.length() > 0)   sb.append('#').append(fragment);
  return sb.toString();
}"
51338,"public void testAppendPath(){
  URI bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
}","public void testAppendPath(){
  URI bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
  bu=UriBuilder.fromUri(""String_Node_Str"").path(""String_Node_Str"").build();
  assertEquals(URI.create(""String_Node_Str""),bu);
}"
51339,"public abstract MultivaluedMap<String,String> getMetadata();","/** 
 * Get the HTTP metadata
 * @return the HTTP metadata.
 */
public abstract MultivaluedMap<String,String> getMetadata();"
51340,public abstract boolean hasEntity();,"/** 
 * @return true if there is an entity present in the response.
 */
public abstract boolean hasEntity();"
51341,"public abstract Map<String,Object> getProperties();","/** 
 * Get a list of response properties.
 * @return the list of response properties.
 */
public abstract Map<String,Object> getProperties();"
51342,public abstract int getStatus();,"/** 
 * Get the status code.
 * @return the status code.
 */
public abstract int getStatus();"
51343,public abstract <T>T getEntity(Class<T> c) throws IllegalArgumentException ;,"/** 
 * Get the entity of the response.
 * @param c the type of the entity.
 * @return an instance of the type <code>c</code>.
 * @throws java.lang.IllegalArgumentException
 */
public abstract <T>T getEntity(Class<T> c) throws IllegalArgumentException ;"
51344,"/** 
 * Create a   {@link HtppServer} that registers a HttpHandler that in turnmanages all root resource classes found by searching the classes referenced in the java classath.
 * @param u the URI to create the http server. The URI scheme must beequal to ""http"" or ""https"". The URI user information and host are ignored If the URI port is not present then port 80 will be  used. The URI path must not be null or an empty string, and must  not absolute (start with a '/' character). The URI path is used  as the context of the HTTP handler (and corresponds to the base  path). The URI query and fragment components are ignored.
 * @param handler the HTTP handler
 * @return the http server
 */
public static HttpServer create(URI u,HttpHandler handler) throws IOException {
  if (u == null)   throw new IllegalArgumentException(""String_Node_Str"");
  final String scheme=u.getScheme();
  if (!scheme.equalsIgnoreCase(""String_Node_Str"") && !scheme.equalsIgnoreCase(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
  final String path=u.getPath();
  if (path == null)   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
 else   if (path.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
 else   if (path.charAt(0) != '/')   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
  final int port=(u.getPort() == -1) ? 80 : u.getPort();
  final HttpServer server=(scheme.equalsIgnoreCase(""String_Node_Str"")) ? HttpServer.create(new InetSocketAddress(port),0) : HttpsServer.create(new InetSocketAddress(port),0);
  server.createContext(path,handler);
  return server;
}","/** 
 * Create a   {@link HttpServer} that registers a HttpHandler that in turnmanages all root resource classes found by searching the classes referenced in the java classath.
 * @param u the URI to create the http server. The URI scheme must beequal to ""http"" or ""https"". The URI user information and host are ignored If the URI port is not present then port 80 will be  used. The URI path must not be null or an empty string, and must  not absolute (start with a '/' character). The URI path is used  as the context of the HTTP handler (and corresponds to the base  path). The URI query and fragment components are ignored.
 * @param handler the HTTP handler
 * @return the http server
 */
public static HttpServer create(URI u,HttpHandler handler) throws IOException {
  if (u == null)   throw new IllegalArgumentException(""String_Node_Str"");
  final String scheme=u.getScheme();
  if (!scheme.equalsIgnoreCase(""String_Node_Str"") && !scheme.equalsIgnoreCase(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
  final String path=u.getPath();
  if (path == null)   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
 else   if (path.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
 else   if (path.charAt(0) != '/')   throw new IllegalArgumentException(""String_Node_Str"" + u + ""String_Node_Str"");
  final int port=(u.getPort() == -1) ? 80 : u.getPort();
  final HttpServer server=(scheme.equalsIgnoreCase(""String_Node_Str"")) ? HttpServer.create(new InetSocketAddress(port),0) : HttpsServer.create(new InetSocketAddress(port),0);
  server.createContext(path,handler);
  return server;
}"
51345,"WadlMethodDispatcher(AbstractResource resource){
  this.a=WadlGenerator.generate(resource);
}","WadlMethodDispatcher(AbstractResource resource,String path){
  this.resource=resource;
  this.path=path;
}"
51346,"public void dispatch(final Object resource,final HttpRequestContext requestContext,final HttpResponseContext responseContext){
  if (a.getResources().getBase() == null) {
    a.getResources().setBase(requestContext.getBaseUri().toString());
    Resource r=a.getResources().getResource().get(0);
    String p=requestContext.getBaseUri().relativize(requestContext.getAbsolutePath()).toString();
    r.setPath(p);
    r.getParam().clear();
  }
  responseContext.setResponse(Response.ok(a,MediaTypes.WADL).build());
}","public void dispatch(final Object o,final HttpRequestContext requestContext,final HttpResponseContext responseContext){
  final Application a=generate();
  a.getResources().setBase(requestContext.getBaseUri().toString());
  final Resource r=a.getResources().getResource().get(0);
  r.setPath(requestContext.getBaseUri().relativize(requestContext.getAbsolutePath()).toString());
  r.getParam().clear();
  responseContext.setResponse(Response.ok(a,MediaTypes.WADL).build());
}"
51347,"public void testGetSubResourceWadl() throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
  initiateWebApplication(WidgetsResource.class,ExtraResource.class);
  ResourceProxy r=resourceProxy(""String_Node_Str"");
  File tmpFile=r.acceptable(MediaTypes.WADL).get(File.class);
  DocumentBuilderFactory bf=DocumentBuilderFactory.newInstance();
  bf.setNamespaceAware(true);
  bf.setValidating(false);
  bf.setXIncludeAware(false);
  DocumentBuilder b=bf.newDocumentBuilder();
  Document d=b.parse(tmpFile);
  printSource(new DOMSource(d));
  XPath xp=XPathFactory.newInstance().newXPath();
  xp.setNamespaceContext(new NSResolver(""String_Node_Str"",""String_Node_Str""));
  String val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
}","public void testGetSubResourceWadl() throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
  initiateWebApplication(WidgetsResource.class,ExtraResource.class);
  ResourceProxy r=resourceProxy(""String_Node_Str"");
  File tmpFile=r.acceptable(MediaTypes.WADL).get(File.class);
  DocumentBuilderFactory bf=DocumentBuilderFactory.newInstance();
  bf.setNamespaceAware(true);
  bf.setValidating(false);
  bf.setXIncludeAware(false);
  DocumentBuilder b=bf.newDocumentBuilder();
  Document d=b.parse(tmpFile);
  printSource(new DOMSource(d));
  XPath xp=XPathFactory.newInstance().newXPath();
  xp.setNamespaceContext(new NSResolver(""String_Node_Str"",""String_Node_Str""));
  String val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
}"
51348,"public void testRecursive() throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
  initiateWebApplication(RootResource.class);
  ResourceProxy r=resourceProxy(""String_Node_Str"");
  File tmpFile=r.acceptable(MediaTypes.WADL).get(File.class);
  DocumentBuilderFactory bf=DocumentBuilderFactory.newInstance();
  bf.setNamespaceAware(true);
  bf.setValidating(false);
  bf.setXIncludeAware(false);
  DocumentBuilder b=bf.newDocumentBuilder();
  Document d=b.parse(tmpFile);
  printSource(new DOMSource(d));
  XPath xp=XPathFactory.newInstance().newXPath();
  xp.setNamespaceContext(new NSResolver(""String_Node_Str"",""String_Node_Str""));
  String val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
}","public void testRecursive() throws ParserConfigurationException, SAXException, IOException, XPathExpressionException {
  initiateWebApplication(RootResource.class);
  ResourceProxy r=resourceProxy(""String_Node_Str"");
  File tmpFile=r.acceptable(MediaTypes.WADL).get(File.class);
  DocumentBuilderFactory bf=DocumentBuilderFactory.newInstance();
  bf.setNamespaceAware(true);
  bf.setValidating(false);
  bf.setXIncludeAware(false);
  DocumentBuilder b=bf.newDocumentBuilder();
  Document d=b.parse(tmpFile);
  printSource(new DOMSource(d));
  XPath xp=XPathFactory.newInstance().newXPath();
  xp.setNamespaceContext(new NSResolver(""String_Node_Str"",""String_Node_Str""));
  String val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  r=resourceProxy(""String_Node_Str"");
  tmpFile=r.acceptable(MediaTypes.WADL).get(File.class);
  bf=DocumentBuilderFactory.newInstance();
  bf.setNamespaceAware(true);
  bf.setValidating(false);
  bf.setXIncludeAware(false);
  b=bf.newDocumentBuilder();
  d=b.parse(tmpFile);
  printSource(new DOMSource(d));
  xp=XPathFactory.newInstance().newXPath();
  xp.setNamespaceContext(new NSResolver(""String_Node_Str"",""String_Node_Str""));
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
  val=(String)xp.evaluate(""String_Node_Str"",d,XPathConstants.STRING);
  assertEquals(val,""String_Node_Str"");
}"
51349,"public UriBuilder schemeSpecificPart(String ssp){
  URI uri=createURI(null,ssp,null);
  userInfo=uri.getRawUserInfo();
  host=uri.getHost();
  port=uri.getPort();
  path=new StringBuilder(replaceNull(uri.getRawPath()));
  query=new StringBuilder(replaceNull(uri.getRawQuery()));
  return this;
}","public UriBuilder schemeSpecificPart(String ssp){
  URI uri=createURI(null,ssp,null);
  userInfo=uri.getRawUserInfo();
  host=uri.getHost();
  port=uri.getPort();
  path.setLength(0);
  path.append(replaceNull(uri.getRawPath()));
  query.setLength(0);
  query.append(replaceNull(uri.getRawQuery()));
  return this;
}"
51350,"public UriBuilder uri(String uri){
  uri(createURI(uri));
  return this;
}","public UriBuilder uri(URI uri){
  if (uri.getScheme() != null)   scheme=uri.getScheme();
  if (uri.getRawUserInfo() != null)   userInfo=uri.getRawUserInfo();
  if (uri.getHost() != null)   host=uri.getHost();
  if (uri.getPort() != -1)   port=uri.getPort();
  if (uri.getRawPath() != null && uri.getRawPath().length() > 0) {
    path.setLength(0);
    path.append(uri.getRawPath());
  }
  if (uri.getRawQuery() != null && uri.getRawQuery().length() > 0) {
    query.setLength(0);
    query.append(uri.getRawQuery());
  }
  if (uri.getRawFragment() != null)   fragment=uri.getRawFragment();
  return this;
}"
51351,"public FormURLEncodedProperties readFrom(Class<FormURLEncodedProperties> type,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream entityStream) throws IOException {
  String decoded=URLDecoder.decode(readFromAsString(entityStream),""String_Node_Str"");
  FormURLEncodedProperties map=new FormURLEncodedProperties();
  StringTokenizer tokenizer=new StringTokenizer(decoded,""String_Node_Str"");
  String token;
  while (tokenizer.hasMoreTokens()) {
    token=tokenizer.nextToken();
    int idx=token.indexOf('=');
    if (idx < 0) {
      map.put(token,null);
    }
 else     if (idx > 0) {
      map.put(token.substring(0,idx),token.substring(idx + 1));
    }
  }
  return map;
}","public FormURLEncodedProperties readFrom(Class<FormURLEncodedProperties> type,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream entityStream) throws IOException {
  String encoded=readFromAsString(entityStream);
  FormURLEncodedProperties map=new FormURLEncodedProperties();
  StringTokenizer tokenizer=new StringTokenizer(encoded,""String_Node_Str"");
  String token;
  while (tokenizer.hasMoreTokens()) {
    token=tokenizer.nextToken();
    int idx=token.indexOf('=');
    if (idx < 0) {
      map.put(URLDecoder.decode(token,""String_Node_Str""),null);
    }
 else     if (idx > 0) {
      map.put(URLDecoder.decode(token.substring(0,idx),""String_Node_Str""),URLDecoder.decode(token.substring(idx + 1),""String_Node_Str""));
    }
  }
  return map;
}"
51352,"public void visitEnd(){
  if (isScoped && isAnnotated) {
    classes.add(getClassForName(className.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
}","public void visitEnd(){
  System.out.println(""String_Node_Str"" + isScoped + ""String_Node_Str""+ isAnnotated);
  if (isScoped && isAnnotated) {
    classes.add(getClassForName(className.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
}"
51353,"public AnnotationVisitor visitAnnotation(String desc,boolean visible){
  isAnnotated=annotations.contains(desc);
  return null;
}","public AnnotationVisitor visitAnnotation(String desc,boolean visible){
  isAnnotated|=annotations.contains(desc);
  return null;
}"
51354,"private void indexDir(File root){
  for (  File child : root.listFiles()) {
    if (child.isDirectory()) {
      indexDir(child);
    }
 else     if (child.getName().endsWith(""String_Node_Str"")) {
      indexJar(child);
    }
 else     if (child.getName().endsWith(""String_Node_Str"")) {
      analyzeClassFile(child.toURI());
    }
  }
}","private void indexDir(File root){
  for (  File child : root.listFiles()) {
    if (child.isDirectory()) {
      indexDir(child);
    }
 else     if (child.getName().endsWith(""String_Node_Str"")) {
      indexJar(child);
    }
 else     if (child.getName().endsWith(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + child);
      analyzeClassFile(child.toURI());
    }
  }
}"
51355,"public void writeTo(InputStream t,MediaType mediaType,MultivaluedMap<String,Object> headers,OutputStream entityStream) throws IOException {
  writeTo(t,entityStream);
}","public void writeTo(InputStream t,MediaType mediaType,MultivaluedMap<String,Object> headers,OutputStream entityStream) throws IOException {
  writeTo(t,entityStream);
  t.close();
}"
51356,"private void initiateUriInfo(){
  UriBuilder absoluteUriBuilder=UriBuilder.fromUri(request.getRequestURL().toString());
  final String decodedBasePath=(request.getPathInfo() != null) ? request.getContextPath() + request.getServletPath() + ""String_Node_Str"" : request.getContextPath() + ""String_Node_Str"";
  String decodedCompletePath;
  try {
    decodedCompletePath=(new URI(request.getRequestURI())).getPath();
  }
 catch (  URISyntaxException ex) {
    decodedCompletePath=decodedBasePath + ((request.getPathInfo() != null) ? request.getPathInfo().substring(1) : request.getServletPath().substring(1));
  }
  final String decodedPath=(decodedCompletePath.startsWith(decodedBasePath)) ? decodedCompletePath.substring(decodedBasePath.length()) : decodedCompletePath;
  String queryParameters=request.getQueryString();
  if (queryParameters == null)   queryParameters=""String_Node_Str"";
  this.baseUri=absoluteUriBuilder.replacePath(decodedBasePath).build();
  this.completeUri=absoluteUriBuilder.encode(true).path(decodedPath).encode(false).replaceQueryParams(queryParameters).build();
}","private void initiateUriInfo(){
  UriBuilder absoluteUriBuilder=UriBuilder.fromUri(request.getRequestURL().toString());
  final String decodedBasePath=(request.getPathInfo() != null) ? request.getContextPath() + request.getServletPath() + ""String_Node_Str"" : request.getContextPath() + ""String_Node_Str"";
  final String encodedBasePath=UriBuilder.fromPath(decodedBasePath,true).build().toString();
  String encodedCompletePath;
  try {
    encodedCompletePath=(new URI(request.getRequestURI())).getRawPath();
  }
 catch (  URISyntaxException ex) {
    encodedCompletePath=encodedBasePath + ((request.getPathInfo() != null) ? request.getPathInfo().substring(1) : request.getServletPath().substring(1));
  }
  final String encodedPath=(encodedCompletePath.startsWith(encodedBasePath)) ? encodedCompletePath.substring(encodedBasePath.length()) : encodedCompletePath;
  String queryParameters=request.getQueryString();
  if (queryParameters == null)   queryParameters=""String_Node_Str"";
  this.baseUri=absoluteUriBuilder.replacePath(decodedBasePath).build();
  this.completeUri=absoluteUriBuilder.encode(false).path(encodedPath).replaceQueryParams(queryParameters).build();
}"
51357,"public void writeTo(File t,MediaType mediaType,MultivaluedMap<String,Object> headers,OutputStream entityStream) throws IOException {
  InputStream in=new FileInputStream(t);
  writeTo(in,entityStream);
  in.close();
}","public void writeTo(File t,MediaType mediaType,MultivaluedMap<String,Object> headers,OutputStream entityStream) throws IOException {
  InputStream in=new BufferedInputStream(new FileInputStream(t));
  writeTo(in,entityStream);
  in.close();
}"
51358,"public File readFrom(Class<File> type,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream entityStream) throws IOException {
  File f=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  OutputStream out=new FileOutputStream(f);
  writeTo(entityStream,out);
  out.close();
  return f;
}","public File readFrom(Class<File> type,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream entityStream) throws IOException {
  File f=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  OutputStream out=new BufferedOutputStream(new FileOutputStream(f));
  writeTo(entityStream,out);
  out.close();
  return f;
}"
51359,"void commitAll() throws IOException {
  if (isCommitted()) {
    exchange.close();
    return;
  }
  commitHeaders();
  Object entity=this.getEntity();
  if (entity != null) {
    exchange.sendResponseHeaders(this.getStatus(),0);
    writeEntity(entity,getUnderlyingOutputStream());
  }
 else {
    exchange.sendResponseHeaders(this.getStatus(),-1);
  }
  exchange.close();
}","void commitAll() throws IOException {
  if (isCommitted()) {
    exchange.close();
    return;
  }
  commitHeaders();
  Object entity=this.getEntity();
  if (entity != null) {
    exchange.sendResponseHeaders(this.getStatus(),0);
    writeEntity(entity,getUnderlyingOutputStream());
  }
 else {
    exchange.sendResponseHeaders(this.getStatus(),-1);
  }
  exchange.getResponseBody().close();
  exchange.close();
}"
51360,"@RequestMapping(method=RequestMethod.POST) public String processSubmit(@ModelAttribute(""String_Node_Str"") Customer customer,BindingResult result,SessionStatus status,HttpSession session){
  loginValidator.validate(customer,result);
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
 else {
    status.setComplete();
    session.setAttribute(""String_Node_Str"",customer.getUserName());
    return ""String_Node_Str"" + customer.getUserName();
  }
}","@RequestMapping(method=RequestMethod.POST) public String processSubmit(@ModelAttribute(""String_Node_Str"") Customer customer,BindingResult result,SessionStatus status,HttpSession session){
  loginValidator.validate(customer,result);
  String returnStr;
  if (result.hasErrors()) {
    returnStr=""String_Node_Str"";
  }
 else {
    status.setComplete();
    Customer dbCustomer=null;
    try {
      dbCustomer=customerDao.getCustomerByUserName(customer.getUserName());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (dbCustomer != null) {
      session.setAttribute(""String_Node_Str"",dbCustomer);
      returnStr=""String_Node_Str"" + customer.getUserName();
    }
 else {
      result.addError(new ObjectError(""String_Node_Str"",""String_Node_Str"" + customer.getUserName() + ""String_Node_Str""));
      returnStr=""String_Node_Str"";
    }
  }
  return returnStr;
}"
51361,"@RequestMapping(method=RequestMethod.POST) public String processSubmit(@ModelAttribute(""String_Node_Str"") Customer customer,BindingResult result,SessionStatus status,HttpSession session){
  profileValidator.validate(customer,result);
  if (result.hasErrors()) {
  }
 else {
    status.setComplete();
    try {
      Customer cust=customerDao.saveOrUpdateCustomer(customer);
      session.setAttribute(""String_Node_Str"",cust);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return ""String_Node_Str"";
}","@RequestMapping(method=RequestMethod.POST) public String processSubmit(@ModelAttribute(""String_Node_Str"") Customer customer,BindingResult result,SessionStatus status,HttpSession session,ModelMap model){
  profileValidator.validate(customer,result);
  if (result.hasErrors()) {
  }
 else {
    try {
      Customer sessionCustomer=(Customer)session.getAttribute(""String_Node_Str"");
      sessionCustomer.setAccountType(customer.getAccountType());
      sessionCustomer.setEmail(customer.getEmail());
      sessionCustomer.setFirstName(customer.getFirstName());
      sessionCustomer.setLastName(customer.getLastName());
      sessionCustomer.setPassword(customer.getPassword());
      customer=customerDao.updateCustomer(new Customer(sessionCustomer));
      customer.setUserName(sessionCustomer.getUserName());
      customer.setTootList(sessionCustomer.getTootList());
      model.addAttribute(""String_Node_Str"",customer);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    status.setComplete();
  }
  return ""String_Node_Str"";
}"
51362,"@RequestMapping(method=RequestMethod.GET) public String initForm(ModelMap model,HttpSession session){
  Customer cust=(Customer)session.getAttribute(""String_Node_Str"");
  ;
  try {
    cust=customerDao.getCustomerByUserName(cust.getUserName());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  model.addAttribute(""String_Node_Str"",cust);
  return ""String_Node_Str"";
}","@RequestMapping(method=RequestMethod.GET) public String initForm(ModelMap model,HttpSession session){
  Customer customer=(Customer)session.getAttribute(""String_Node_Str"");
  model.addAttribute(""String_Node_Str"",customer);
  return customer == null ? ""String_Node_Str"" : ""String_Node_Str"";
}"
51363,"@RequestMapping(method=RequestMethod.POST) public String processSubmit(@ModelAttribute(""String_Node_Str"") Customer customer,BindingResult result,SessionStatus status){
  singUpValidator.validate(customer,result);
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
 else {
    status.setComplete();
    try {
      customer.setUserName(customer.getFirstName().toLowerCase() + customer.getLastName().toLowerCase());
      customerDao.saveOrUpdateCustomer(customer);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return ""String_Node_Str"";
  }
}","@RequestMapping(method=RequestMethod.POST) public String processSubmit(@ModelAttribute(""String_Node_Str"") Customer customer,BindingResult result,SessionStatus status){
  singUpValidator.validate(customer,result);
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
 else {
    status.setComplete();
    try {
      String userName=customer.getFirstName().toLowerCase() + customer.getLastName().toLowerCase();
      DataStore dataStore=stormpathSDKService.getStormpathSDKClient().getDataStore();
      Directory directory=dataStore.load(stormpathSDKService.getRestURL(),Directory.class);
      Account account=dataStore.instantiate(Account.class);
      account.setEmail(customer.getEmail());
      account.setGivenName(customer.getFirstName());
      account.setSurname(customer.getLastName());
      account.setPassword(customer.getPassword());
      account.setUsername(userName);
      directory.createAccount(account);
      customer.setUserName(userName);
      customerDao.saveCustomer(customer);
    }
 catch (    ResourceException re) {
      result.addError(new ObjectError(""String_Node_Str"",re.getMessage()));
      re.printStackTrace();
      return ""String_Node_Str"";
    }
catch (    Exception e) {
      e.printStackTrace();
    }
    return ""String_Node_Str"";
  }
}"
51364,"@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public String processSubmit(@ModelAttribute(""String_Node_Str"") Toot toot,BindingResult result,SessionStatus status,HttpSession session){
  tootValidator.validate(toot,result);
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
 else {
    Customer sessionCustomer=(Customer)session.getAttribute(""String_Node_Str"");
    Customer persistCustomer=new Customer();
    persistCustomer.setId(sessionCustomer.getId());
    List<Toot> tootList=new ArrayList<Toot>();
    Toot persistToot=new Toot();
    persistToot.setTootMessage(toot.getTootMessage());
    persistToot.setCustomer(persistCustomer);
    try {
      tootDao.saveToot(persistToot);
      tootList=tootDao.getTootsByUserId(persistCustomer.getId());
      sessionCustomer.setTootList(tootList);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    toot.setTootMessage(""String_Node_Str"");
    toot.setCustomer(sessionCustomer);
    status.setComplete();
    return ""String_Node_Str"";
  }
}","@RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public String processSubmit(@ModelAttribute(""String_Node_Str"") Toot toot,BindingResult result,SessionStatus status,HttpSession session){
  tootValidator.validate(toot,result);
  if (result.hasErrors()) {
    return ""String_Node_Str"";
  }
 else {
    Customer sessionCustomer=(Customer)session.getAttribute(""String_Node_Str"");
    Customer persistCustomer=new Customer(sessionCustomer);
    List<Toot> tootList;
    Toot persistToot=new Toot();
    persistToot.setTootMessage(toot.getTootMessage());
    persistToot.setCustomer(persistCustomer);
    try {
      tootDao.saveToot(persistToot);
      toot.setTootId(persistToot.getTootId());
      tootList=tootDao.getTootsByUserId(persistCustomer.getId());
      sessionCustomer.setTootList(tootList);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    toot.setTootMessage(""String_Node_Str"");
    toot.setCustomer(sessionCustomer);
    status.setComplete();
    return ""String_Node_Str"";
  }
}"
51365,"@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public String initForm(@RequestParam(""String_Node_Str"") String userName,ModelMap model,@ModelAttribute(""String_Node_Str"") Toot toot,BindingResult result,HttpSession session){
  List<Toot> tootList=new ArrayList<Toot>();
  Toot tooot=new Toot();
  try {
    Object accountIdAtt=session.getAttribute(""String_Node_Str"");
    String accountId=accountIdAtt == null ? userName : (String)accountIdAtt;
    session.removeAttribute(""String_Node_Str"");
    Object sessionCustObj=session.getAttribute(""String_Node_Str"");
    Integer custId=sessionCustObj == null ? 0 : ((Customer)sessionCustObj).getId();
    Customer customer=customerDao.getCustomerByUserName(accountId);
    session.setAttribute(""String_Node_Str"",customer);
    tootList=tootDao.getTootsByUserId(custId > 0 ? custId : customer.getId());
    customer.setTootList(tootList);
    tooot.setCustomer(customer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  model.addAttribute(""String_Node_Str"",tooot);
  return ""String_Node_Str"";
}","@RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public String initForm(@RequestParam(""String_Node_Str"") String userName,ModelMap model,@ModelAttribute(""String_Node_Str"") Toot toot,BindingResult result,HttpSession session){
  List<Toot> tootList;
  Toot tooot=new Toot();
  try {
    Object objCustomer=session.getAttribute(""String_Node_Str"");
    Customer customer=null;
    if (objCustomer == null) {
      customer=customerDao.getCustomerByUserName(userName);
    }
 else {
      customer=(Customer)objCustomer;
    }
    tootList=tootDao.getTootsByUserId(customer.getId());
    customer.setTootList(tootList);
    tooot.setCustomer(customer);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  model.addAttribute(""String_Node_Str"",tooot);
  return ""String_Node_Str"";
}"
51366,"@RequestMapping(""String_Node_Str"") public String removeToot(@RequestParam(""String_Node_Str"") String userName,@RequestParam(""String_Node_Str"") String removeTootId,ModelMap model,@ModelAttribute(""String_Node_Str"") Toot toot,HttpSession session){
  try {
    tootDao.removeTootById(Integer.valueOf(removeTootId));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return ""String_Node_Str"" + userName;
}","@RequestMapping(""String_Node_Str"") public String removeToot(@RequestParam(""String_Node_Str"") String userName,@RequestParam(""String_Node_Str"") String removeTootId,ModelMap model,@ModelAttribute(""String_Node_Str"") Toot toot,HttpSession session){
  try {
    tootDao.removeTootById(Integer.valueOf(removeTootId));
    userName=userName == null || userName.isEmpty() ? ((Customer)session.getAttribute(""String_Node_Str"")).getUserName() : userName;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return ""String_Node_Str"" + userName;
}"
51367,"@Override public void onPageFinished(WebView view,String url){
  if (!mHasFiredReadyEvent) {
    mDisplayController.initializeJavaScriptState();
    fireChangeEventForProperty(MraidPlacementTypeProperty.createWithType(mPlacementType));
    fireReadyEvent();
    if (getOnReadyListener() != null)     getOnReadyListener().onReady(MraidView.this);
    mHasFiredReadyEvent=true;
  }
}","@Override public void onPageFinished(WebView view,String url){
  if (!mHasFiredReadyEvent && mDisplayController != null) {
    mDisplayController.initializeJavaScriptState();
    fireChangeEventForProperty(MraidPlacementTypeProperty.createWithType(mPlacementType));
    fireReadyEvent();
    if (getOnReadyListener() != null)     getOnReadyListener().onReady(MraidView.this);
    mHasFiredReadyEvent=true;
  }
}"
51368,"public AdView(Context context){
  super(context);
  disableScrollingAndZoom();
  getSettings().setJavaScriptEnabled(true);
  getSettings().setPluginsEnabled(true);
  setBackgroundColor(Color.TRANSPARENT);
  setWebViewClient(new AdWebViewClient());
}","public AdView(Context context){
  super(context);
  disableScrollingAndZoom();
  getSettings().setJavaScriptEnabled(true);
  setBackgroundColor(Color.TRANSPARENT);
  setWebViewClient(new AdWebViewClient());
}"
51369,"public void removeAllBanners(){
  stopLoading();
  clearAnimation();
  if (mCurrentView != null) {
    mBaseView.removeView(mCurrentView);
    mCurrentView.destroy();
    mCurrentView=null;
  }
}","public void removeAllBanners(){
  stopLoading();
  clearAnimation();
  if (mCurrentView != null) {
    mBaseView.removeView(mCurrentView);
    mCurrentView.removeAllViews();
    mCurrentView.destroy();
    mCurrentView=null;
  }
}"
51370,"private void removeLocationUpdates(){
  mLocationManager.removeUpdates(mLocationListener);
  mLocationRequestUpdatesEnabled=false;
}","private void removeLocationUpdates(){
  if (mLocationRequestUpdatesEnabled) {
    mLocationManager.removeUpdates(mLocationListener);
    mLocationRequestUpdatesEnabled=false;
  }
}"
51371,"protected HttpURLConnection makeConnection(String url){
  HttpURLConnection connection=null;
  try {
    connection=(HttpURLConnection)new URL(url).openConnection();
    for (    Entry<String,String> entry : mRequestPropertyList.entrySet())     connection.setRequestProperty(entry.getKey(),entry.getValue());
    connection.connect();
  }
 catch (  MalformedURLException e) {
    Log.e(LOGTAG,""String_Node_Str"" + url,e);
  }
catch (  Exception e) {
    Log.e(LOGTAG,""String_Node_Str"",e);
  }
  return connection;
}","protected HttpURLConnection makeConnection(Plus1Request request){
  HttpURLConnection connection=null;
  String url=getRequestUrl(request);
  Log.d(LOGTAG,""String_Node_Str"" + url);
  try {
    connection=(HttpURLConnection)new URL(url).openConnection();
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    for (    Entry<String,String> entry : mRequestPropertyList.entrySet()) {
      connection.setRequestProperty(entry.getKey(),entry.getValue());
      Log.d(LOGTAG,String.format(""String_Node_Str"",entry.getKey(),entry.getValue()));
    }
    UrlEncodedFormEntity postEntity=getUrlEncodedFormEntity(request);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",Integer.toString((int)postEntity.getContentLength()));
    postEntity.writeTo(connection.getOutputStream());
    connection.connect();
  }
 catch (  MalformedURLException e) {
    Log.e(LOGTAG,""String_Node_Str"" + url,e);
  }
catch (  Exception e) {
    Log.e(LOGTAG,""String_Node_Str"",e);
  }
  return connection;
}"
51372,"@Override final protected T doInBackground(Plus1Request... requests){
  Plus1Request request=requests[0];
  String requestUrl=getRequestUrl(request);
  HttpURLConnection connection=makeConnection(requestUrl);
  if (connection == null)   return null;
  T result=null;
  String content=""String_Node_Str"";
  try {
    UrlEncodedFormEntity postEntity=getUrlEncodedFormEntity(request);
    connection.setRequestMethod(""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    connection.setRequestProperty(""String_Node_Str"",Integer.toString((int)postEntity.getContentLength()));
    postEntity.writeTo(connection.getOutputStream());
    InputStream stream=connection.getInputStream();
    byte[] buffer=new byte[BUFFER_SIZE];
    int count=0;
    BufferedInputStream bufStream=new BufferedInputStream(stream,BUFFER_SIZE);
    while ((count=bufStream.read(buffer)) != -1) {
      if (isCancelled())       return null;
      content+=new String(buffer,0,count);
    }
    bufStream.close();
    EnumMap<SdkParameter,String> parameters=getSdkParametersByJson(connection.getHeaderField(SDK_PARAMETERS_HEADER));
    EnumMap<SdkAction,String> actions=getSdkActionsByJson(connection.getHeaderField(SDK_ACTION_HEADER));
    if (!(null == parameters || parameters.isEmpty()))     notifyOnSdkParametersLoaded(parameters);
    if (!(null == actions || actions.isEmpty()))     notifyOnSdkActionsLoaded(actions);
    result=makeResult(content.toString(),connection);
  }
 catch (  IOException e) {
    Log.e(LOGTAG,""String_Node_Str"" + requestUrl + ""String_Node_Str"",e);
  }
catch (  Exception e) {
    Log.e(LOGTAG,""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    connection.disconnect();
  }
  return result;
}","@Override final protected T doInBackground(Plus1Request... requests){
  Plus1Request request=requests[0];
  String requestUrl=getRequestUrl(request);
  HttpURLConnection connection=makeConnection(request);
  if (connection == null)   return null;
  T result=null;
  String content=""String_Node_Str"";
  try {
    InputStream stream=connection.getInputStream();
    byte[] buffer=new byte[BUFFER_SIZE];
    int count=0;
    BufferedInputStream bufStream=new BufferedInputStream(stream,BUFFER_SIZE);
    while ((count=bufStream.read(buffer)) != -1) {
      if (isCancelled())       return null;
      content+=new String(buffer,0,count);
    }
    bufStream.close();
    EnumMap<SdkParameter,String> parameters=getSdkParametersByJson(connection.getHeaderField(SDK_PARAMETERS_HEADER));
    EnumMap<SdkAction,String> actions=getSdkActionsByJson(connection.getHeaderField(SDK_ACTION_HEADER));
    if (!(null == parameters || parameters.isEmpty()))     notifyOnSdkParametersLoaded(parameters);
    if (!(null == actions || actions.isEmpty()))     notifyOnSdkActionsLoaded(actions);
    result=makeResult(content.toString(),connection);
  }
 catch (  IOException e) {
    Log.e(LOGTAG,""String_Node_Str"" + requestUrl + ""String_Node_Str"",e);
  }
catch (  Exception e) {
    Log.e(LOGTAG,""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    connection.disconnect();
  }
  return result;
}"
51373,"private void notifyOnSdkActionsLoaded(EnumMap<SdkAction,String> actions){
  for (  ChangeSdkPropertiesListener listener : mChangeSdkPropertiesListenerList)   listener.onSdkActionsLoaded(actions);
}","private void notifyOnSdkActionsLoaded(EnumMap<SdkAction,String> actions){
  Log.d(LOGTAG,""String_Node_Str"");
  for (  ChangeSdkPropertiesListener listener : mChangeSdkPropertiesListenerList)   listener.onSdkActionsLoaded(actions);
}"
51374,"private void notifyOnSdkParametersLoaded(EnumMap<SdkParameter,String> parameters){
  for (  ChangeSdkPropertiesListener listener : mChangeSdkPropertiesListenerList)   listener.onSdkParametersLoaded(parameters);
}","private void notifyOnSdkParametersLoaded(EnumMap<SdkParameter,String> parameters){
  Log.d(LOGTAG,""String_Node_Str"");
  for (  ChangeSdkPropertiesListener listener : mChangeSdkPropertiesListenerList)   listener.onSdkParametersLoaded(parameters);
}"
51375,"protected HtmlBannerInfo makeResult(String content,HttpURLConnection connection) throws IOException {
  Log.d(LOGTAG,""String_Node_Str"" + content);
  HtmlBannerInfo bannerInfo=new HtmlBannerInfo();
  bannerInfo.mResponseCode=connection.getResponseCode();
  bannerInfo.mBannerContent=content;
  bannerInfo.mBannerAdType=connection.getHeaderField(""String_Node_Str"");
  Log.d(LOGTAG,""String_Node_Str"" + bannerInfo.mResponseCode);
  Log.d(LOGTAG,""String_Node_Str"" + bannerInfo.mBannerAdType);
  Log.d(LOGTAG,""String_Node_Str"" + bannerInfo.mBannerContent);
  return bannerInfo;
}","protected HtmlBannerInfo makeResult(String content,HttpURLConnection connection) throws IOException {
  HtmlBannerInfo bannerInfo=new HtmlBannerInfo();
  bannerInfo.mResponseCode=connection.getResponseCode();
  bannerInfo.mBannerContent=content;
  bannerInfo.mBannerAdType=connection.getHeaderField(""String_Node_Str"");
  Log.d(LOGTAG,""String_Node_Str"" + bannerInfo.mResponseCode);
  Log.d(LOGTAG,""String_Node_Str"" + bannerInfo.mBannerAdType);
  Log.d(LOGTAG,""String_Node_Str"" + bannerInfo.mBannerContent);
  return bannerInfo;
}"
51376,"@Override protected void onPostExecute(HtmlBannerInfo bannerInfo){
  if (bannerInfo == null) {
    notifyOnBannerLoadFailed(LoadError.DownloadFailed);
  }
 else   if (bannerInfo.mResponseCode.equals(HttpStatus.SC_NO_CONTENT)) {
    notifyOnBannerLoadFailed(LoadError.NoHaveBanner);
  }
 else {
    try {
      notifyOnBannerLoaded(bannerInfo.mBannerContent,BannerAdType.valueOf(bannerInfo.mBannerAdType));
    }
 catch (    IllegalArgumentException e) {
      Log.e(LOGTAG,""String_Node_Str"" + bannerInfo.mBannerAdType,e);
      notifyOnBannerLoadFailed(LoadError.UnknownAnswer);
    }
  }
}","@Override protected void onPostExecute(HtmlBannerInfo bannerInfo){
  if (bannerInfo == null) {
    notifyOnBannerLoadFailed(LoadError.DownloadFailed);
  }
 else   if (bannerInfo.mResponseCode.equals(HttpStatus.SC_NO_CONTENT)) {
    notifyOnBannerLoadFailed(LoadError.NoHaveBanner);
  }
 else {
    try {
      notifyOnBannerLoaded(bannerInfo.mBannerContent,null == bannerInfo.mBannerAdType ? BannerAdType.plus1 : BannerAdType.valueOf(bannerInfo.mBannerAdType));
    }
 catch (    IllegalArgumentException e) {
      Log.e(LOGTAG,""String_Node_Str"" + bannerInfo.mBannerAdType,e);
      notifyOnBannerLoadFailed(LoadError.UnknownAnswer);
    }
  }
}"
51377,"public void run(){
  if (!(mView.isClosed() || mView.isExpanded())) {
    modifyRequest(mRequest);
    mDownloaderTask=makeDownloaderTask();
    mDownloaderTask.execute(mRequest);
  }
}","public void run(){
  modifyRequest(mRequest);
  makeInitRequestTask().execute(mRequest);
  mReInitHandler.postDelayed(this,mReInitDelay * 1000);
}"
51378,"public Plus1BannerAsker init(){
  if (mInitialized)   return this;
  mDownloaderTimer=new Timer();
  if (!isDisabledAutoDetectLocation()) {
    mLocationManager=(LocationManager)mView.getContext().getSystemService(Context.LOCATION_SERVICE);
    mLocationListener=new LocationListener(){
      public void onLocationChanged(      Location location){
        mRequest.setLocation(location);
        if (!isLocationAutoRefreshEnabled())         removeLocationUpdates();
      }
      public void onProviderDisabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        requestLocationUpdates();
      }
      public void onProviderEnabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        removeLocationUpdates();
        requestLocationUpdates();
      }
      public void onStatusChanged(      String provider,      int status,      Bundle extras){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
switch (status) {
case LocationProvider.AVAILABLE:
          removeLocationUpdates();
case LocationProvider.OUT_OF_SERVICE:
        requestLocationUpdates();
      break;
case LocationProvider.TEMPORARILY_UNAVAILABLE:
    break;
default :
  Log.w(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
}
}
}
;
}
mView.addListener(new Plus1BannerView.OnCloseButtonListener(){
public void onCloseButton(Plus1BannerView view){
stop();
}
}
).addListener(new Plus1BannerView.OnExpandListener(){
public void onExpand(Plus1BannerView view){
stop();
}
}
).addListener(new Plus1BannerView.OnCollapseListener(){
public void onCollapse(Plus1BannerView view){
start();
}
}
);
new WebView(mView.getContext()).resumeTimers();
mRequest.setUid(Plus1Helper.getClientSessionId(mView.getContext()));
mInitialized=true;
return this;
}","public Plus1BannerAsker init(){
  if (mInitialized)   return this;
  if (!isDisabledAutoDetectLocation()) {
    mLocationManager=(LocationManager)mView.getContext().getSystemService(Context.LOCATION_SERVICE);
    mLocationListener=new LocationListener(){
      public void onLocationChanged(      Location location){
        mRequest.setLocation(location);
        if (!isLocationAutoRefreshEnabled())         removeLocationUpdates();
      }
      public void onProviderDisabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        requestLocationUpdates();
      }
      public void onProviderEnabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        removeLocationUpdates();
        requestLocationUpdates();
      }
      public void onStatusChanged(      String provider,      int status,      Bundle extras){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
switch (status) {
case LocationProvider.AVAILABLE:
          removeLocationUpdates();
case LocationProvider.OUT_OF_SERVICE:
        requestLocationUpdates();
      break;
case LocationProvider.TEMPORARILY_UNAVAILABLE:
    break;
default :
  Log.w(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
}
}
}
;
}
mView.addListener(new Plus1BannerView.OnCloseButtonListener(){
public void onCloseButton(Plus1BannerView view){
stop();
}
}
).addListener(new Plus1BannerView.OnExpandListener(){
public void onExpand(Plus1BannerView view){
stop();
}
}
).addListener(new Plus1BannerView.OnCollapseListener(){
public void onCollapse(Plus1BannerView view){
start();
}
}
);
new WebView(mView.getContext()).resumeTimers();
mRequest.setUid(Plus1Helper.getClientSessionId(mView.getContext()));
mInitialized=true;
return this;
}"
51379,"private void start(){
  Log.d(LOGTAG,""String_Node_Str"");
  if (mRequest == null || mView == null || mDownloaderTask != null)   return;
  TimerTask task=new TimerTask(){
    public void run(){
      if (!(mView.isClosed() || mView.isExpanded())) {
        modifyRequest(mRequest);
        mDownloaderTask=makeDownloaderTask();
        mDownloaderTask.execute(mRequest);
      }
    }
  }
;
  if (isAutoRefreshEnabled()) {
    mDownloaderTimer.schedule(task,0,mRefreshDelay);
  }
 else {
    mDownloaderTimer.schedule(task,0);
  }
}","private void start(){
  Log.d(LOGTAG,""String_Node_Str"");
  if (mRequest == null || mView == null || mDownloaderTask != null)   return;
  mExecuteDownloadHandler.post(mExecuteDownloadTask);
}"
51380,"private void stop(){
  Log.d(LOGTAG,""String_Node_Str"");
  if (mDownloaderTask != null) {
    mDownloaderTask.cancel(true);
    mDownloaderTask=null;
  }
  mDownloaderTimer.cancel();
}","private void stop(){
  Log.d(LOGTAG,""String_Node_Str"");
  if (mDownloaderTask != null) {
    mDownloaderTask.cancel(true);
    mDownloaderTask=null;
  }
  mExecuteDownloadHandler.removeCallbacks(mExecuteDownloadTask);
}"
51381,"public static String getContainerMetrics(Plus1BannerView view){
  float density=((Activity)view.getContext()).getResources().getDisplayMetrics().density;
  return String.format(""String_Node_Str"",view.getLayoutParams().width / density + 0.5f,view.getLayoutParams().height / density + 0.5f);
}","public static String getContainerMetrics(Plus1BannerView view){
  float density=((Activity)view.getContext()).getResources().getDisplayMetrics().density;
  return String.format(""String_Node_Str"",(int)(view.getLayoutParams().width / density + 0.5f),(int)(view.getLayoutParams().height / density + 0.5f));
}"
51382,"public void onCloseButton(Plus1BannerView view){
  onCloseBannerView();
}","public void onCloseButton(Plus1BannerView view){
  stop();
}"
51383,"public Plus1BannerAsker(Plus1Request request,Plus1BannerView view){
  mRequest=request;
  mView=view;
  view.setOnAutorefreshChangeListener(new Plus1BannerView.OnAutorefreshStateListener(){
    public void onAutorefreshStateChanged(    Plus1BannerView view){
      if (view.getAutorefreshEnabled() && !view.isExpanded())       start();
 else       stop();
    }
  }
);
}","public Plus1BannerAsker(Plus1Request request,Plus1BannerView view){
  mRequest=request;
  mView=view;
}"
51384,"/** 
 * @deprecated please use disableAutoDetectLocation() without argument
 */
public Plus1BannerAsker disableAutoDetectLocation(boolean disable){
  mDisabledAutoDetectLocation=disable;
  return this;
}","public Plus1BannerAsker disableAutoDetectLocation(){
  mDisabledAutoDetectLocation=true;
  return this;
}"
51385,"public Plus1BannerAsker init(){
  if (mInitialized)   return this;
  mDownloaderTimer=new Timer();
  if (!isDisabledAutoDetectLocation()) {
    mLocationManager=(LocationManager)mView.getContext().getSystemService(Context.LOCATION_SERVICE);
    mLocationListener=new LocationListener(){
      public void onLocationChanged(      Location location){
        mRequest.setLocation(location);
        if (!isLocationAutoRefreshEnabled())         removeLocationUpdates();
      }
      public void onProviderDisabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        requestLocationUpdates();
      }
      public void onProviderEnabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        removeLocationUpdates();
        requestLocationUpdates();
      }
      public void onStatusChanged(      String provider,      int status,      Bundle extras){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
switch (status) {
case LocationProvider.AVAILABLE:
          removeLocationUpdates();
case LocationProvider.OUT_OF_SERVICE:
        requestLocationUpdates();
      break;
case LocationProvider.TEMPORARILY_UNAVAILABLE:
    break;
default :
  Log.w(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
}
}
}
;
}
mView.addListener(new Plus1BannerView.OnShowListener(){
public void onShow(Plus1BannerView view){
onShowBannerView();
}
}
).addListener(new Plus1BannerView.OnHideListener(){
public void onHide(Plus1BannerView view){
onHideBannerView();
}
}
).addListener(new Plus1BannerView.OnCloseButtonListener(){
public void onCloseButton(Plus1BannerView view){
onCloseBannerView();
}
}
).addListener(new Plus1BannerView.OnExpandListener(){
public void onExpand(Plus1BannerView view){
stop();
}
}
).addListener(new Plus1BannerView.OnCollapseListener(){
public void onCollapse(Plus1BannerView view){
start();
}
}
);
if (viewStateListener != null) mView.setViewStateListener(viewStateListener);
if (mVisibilityTimeout == 0) mVisibilityTimeout=mRefreshDelay * 3;
mHandler=new Handler();
new WebView(mView.getContext()).resumeTimers();
mInitialized=true;
return this;
}","public Plus1BannerAsker init(){
  if (mInitialized)   return this;
  mDownloaderTimer=new Timer();
  if (!isDisabledAutoDetectLocation()) {
    mLocationManager=(LocationManager)mView.getContext().getSystemService(Context.LOCATION_SERVICE);
    mLocationListener=new LocationListener(){
      public void onLocationChanged(      Location location){
        mRequest.setLocation(location);
        if (!isLocationAutoRefreshEnabled())         removeLocationUpdates();
      }
      public void onProviderDisabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        requestLocationUpdates();
      }
      public void onProviderEnabled(      String provider){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str"");
        removeLocationUpdates();
        requestLocationUpdates();
      }
      public void onStatusChanged(      String provider,      int status,      Bundle extras){
        Log.d(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
switch (status) {
case LocationProvider.AVAILABLE:
          removeLocationUpdates();
case LocationProvider.OUT_OF_SERVICE:
        requestLocationUpdates();
      break;
case LocationProvider.TEMPORARILY_UNAVAILABLE:
    break;
default :
  Log.w(LOGTAG,""String_Node_Str"" + provider + ""String_Node_Str""+ status);
}
}
}
;
}
mView.addListener(new Plus1BannerView.OnCloseButtonListener(){
public void onCloseButton(Plus1BannerView view){
stop();
}
}
).addListener(new Plus1BannerView.OnExpandListener(){
public void onExpand(Plus1BannerView view){
stop();
}
}
).addListener(new Plus1BannerView.OnCollapseListener(){
public void onCollapse(Plus1BannerView view){
start();
}
}
);
new WebView(mView.getContext()).resumeTimers();
mInitialized=true;
return this;
}"
51386,"public Plus1BannerAsker init(){
  if (initialized)   return this;
  if (!isDisabledAutoDetectLocation()) {
    this.locationManager=(LocationManager)view.getContext().getSystemService(Context.LOCATION_SERVICE);
    this.locationListener=new Plus1LocationListener(request);
  }
  if (viewStateListener != null)   view.setViewStateListener(viewStateListener);
 else   view.setViewStateListener(this);
  if (visibilityTimeout == 0)   visibilityTimeout=timeout * 3;
  handler=new Handler();
  initialized=true;
  return this;
}","public Plus1BannerAsker init(){
  if (initialized)   return this;
  if (!isDisabledAutoDetectLocation()) {
    this.locationManager=(LocationManager)view.getContext().getSystemService(Context.LOCATION_SERVICE);
    this.locationListener=new Plus1LocationListener(request);
  }
  if (viewStateListener != null)   view.setViewStateListener(viewStateListener);
 else   view.setViewStateListener(this);
  if (visibilityTimeout == 0)   visibilityTimeout=timeout * 3;
  handler=new Handler();
  new WebView(view.getContext()).resumeTimers();
  initialized=true;
  return this;
}"
51387,"protected void updateBanner(){
  final Plus1Banner banner=getBanner();
  view.post(new Runnable(){
    public void run(){
      view.setBanner(banner);
    }
  }
);
  if (banner != null) {
    String imageUrl=null;
    if (!banner.getPictureUrl().equals(""String_Node_Str""))     imageUrl=banner.getPictureUrl();
 else     if (!banner.getPictureUrlPng().equals(""String_Node_Str""))     imageUrl=banner.getPictureUrlPng();
    if (imageUrl != null)     downloadImage(imageUrl);
  }
}","protected void updateBanner(){
  try {
    final Plus1Banner banner=getBanner();
    view.post(new Runnable(){
      public void run(){
        view.setBanner(banner);
      }
    }
);
    if (banner != null) {
      String imageUrl=null;
      if (!banner.getPictureUrl().equals(""String_Node_Str""))       imageUrl=banner.getPictureUrl();
 else       if (!banner.getPictureUrlPng().equals(""String_Node_Str""))       imageUrl=banner.getPictureUrlPng();
      if (imageUrl != null)       downloadImage(imageUrl);
    }
  }
 catch (  Exception e) {
    Log.e(getClass().getName(),""String_Node_Str"" + e.getMessage());
  }
}"
51388,"protected String getBannerData(){
  InputStream stream=getStream(request.getRequestUri());
  String result=new String();
  try {
    byte[] buffer=new byte[BUFFER_SIZE];
    int count=0;
    BufferedInputStream bufStream=new BufferedInputStream(stream,BUFFER_SIZE);
    if (bufStream != null)     while ((count=bufStream.read(buffer)) != -1)     result+=new String(buffer,0,count);
    bufStream.close();
  }
 catch (  IOException e) {
    Log.e(getClass().getName(),""String_Node_Str"" + e.toString());
    if (bannerDownloadListener != null)     bannerDownloadListener.onBannerLoadFailed(LoadError.DownloadFailed);
  }
  return result;
}","protected String getBannerData(){
  InputStream stream=getStream(request.getRequestUri());
  String result=new String();
  try {
    byte[] buffer=new byte[BUFFER_SIZE];
    int count=0;
    BufferedInputStream bufStream=new BufferedInputStream(stream,BUFFER_SIZE);
    while ((count=bufStream.read(buffer)) != -1)     result+=new String(buffer,0,count);
    bufStream.close();
  }
 catch (  Exception e) {
    Log.e(getClass().getName(),""String_Node_Str"" + e);
    if (bannerDownloadListener != null)     bannerDownloadListener.onBannerLoadFailed(LoadError.DownloadFailed);
  }
  return result;
}"
51389,"private void imageDownloaded(){
  if (banner.isImageBanner()) {
    if (!flipper.getCurrentView().equals(image))     flipper.showNext();
  }
 else   flipper.startFlipping();
  show();
}","private void imageDownloaded(){
  if (banner != null && banner.isImageBanner()) {
    if (!flipper.getCurrentView().equals(image))     flipper.showNext();
  }
 else   flipper.startFlipping();
  show();
}"
51390,"private void init(){
  if (initialized)   return;
  setBackgroundResource(R.drawable.wp_banner_background);
  ImageView shild=new ImageView(getContext());
  shild.setImageResource(R.drawable.wp_banner_shild);
  shild.setMaxWidth(9);
  addView(shild,new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,0.03125f));
  this.flipper=new ViewFlipper(getContext());
  flipper.setFlipInterval(3000);
  flipper.setInAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_in));
  flipper.setOutAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_out));
  LinearLayout ll=new LinearLayout(getContext());
  ll.setOrientation(VERTICAL);
  this.title=new TextView(getContext());
  title.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);
  title.setTextSize(14f);
  title.setTextColor(Color.rgb(115,154,208));
  title.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);
  ll.addView(title);
  this.content=new TextView(getContext());
  content.setTypeface(Typeface.SANS_SERIF);
  content.setTextSize(13f);
  content.setTextColor(Color.WHITE);
  content.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);
  ll.addView(content);
  flipper.addView(ll);
  this.image=new Plus1ImageView(getContext());
  flipper.addView(image);
  addView(flipper,new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT,0.90625f + (isHaveCloseButton() ? 0f : 0.0625f)));
  if (isHaveCloseButton()) {
    Button closeButton=new Button(getContext());
    closeButton.setBackgroundResource(R.drawable.wp_banner_close);
    closeButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        closed=true;
        flipper.stopFlipping();
        if (getVisibility() == VISIBLE) {
          if (hideAnimation != null)           startAnimation(hideAnimation);
          setVisibility(INVISIBLE);
          if (viewStateListener != null)           viewStateListener.onCloseBannerView();
        }
      }
    }
);
    addView(closeButton,new LinearLayout.LayoutParams(18,17,0.0625f));
  }
  setOnClickListener(new OnClickListener(){
    public void onClick(    View view){
      if ((banner == null) || (banner.getLink() == null))       return;
      getContext().startActivity(new Intent(Intent.ACTION_VIEW,android.net.Uri.parse(banner.getLink())));
    }
  }
);
  setVisibility(INVISIBLE);
  if (viewStateListener != null)   viewStateListener.onHideBannerView();
  initialized=true;
}","private void init(){
  if (initialized)   return;
  setBackgroundResource(R.drawable.wp_banner_background);
  ImageView shield=new ImageView(getContext());
  shield.setImageResource(R.drawable.wp_banner_shild);
  shield.setMaxWidth(9);
  addView(shield,new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,0.03125f));
  this.flipper=new ViewFlipper(getContext());
  flipper.setFlipInterval(3000);
  flipper.setInAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_in));
  flipper.setOutAnimation(AnimationUtils.loadAnimation(getContext(),android.R.anim.fade_out));
  LinearLayout ll=new LinearLayout(getContext());
  ll.setOrientation(VERTICAL);
  this.title=new TextView(getContext());
  title.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD);
  title.setTextSize(14f);
  title.setTextColor(Color.rgb(115,154,208));
  title.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);
  ll.addView(title);
  this.content=new TextView(getContext());
  content.setTypeface(Typeface.SANS_SERIF);
  content.setTextSize(13f);
  content.setTextColor(Color.WHITE);
  content.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL);
  ll.addView(content);
  flipper.addView(ll);
  this.image=new Plus1ImageView(getContext());
  flipper.addView(image);
  addView(flipper,new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT,0.90625f + (isHaveCloseButton() ? 0f : 0.0625f)));
  if (isHaveCloseButton()) {
    Button closeButton=new Button(getContext());
    closeButton.setBackgroundResource(R.drawable.wp_banner_close);
    closeButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        closed=true;
        flipper.stopFlipping();
        if (getVisibility() == VISIBLE) {
          if (hideAnimation != null)           startAnimation(hideAnimation);
          setVisibility(INVISIBLE);
          if (viewStateListener != null)           viewStateListener.onCloseBannerView();
        }
      }
    }
);
    addView(closeButton,new LinearLayout.LayoutParams(18,17,0.0625f));
  }
  setOnClickListener(new OnClickListener(){
    public void onClick(    View view){
      if ((banner == null) || (banner.getLink() == null))       return;
      getContext().startActivity(new Intent(Intent.ACTION_VIEW,android.net.Uri.parse(banner.getLink())));
    }
  }
);
  setVisibility(INVISIBLE);
  if (viewStateListener != null)   viewStateListener.onHideBannerView();
  initialized=true;
}"
51391,"public void setBanner(Plus1Banner banner){
  if (!initialized)   init();
  this.banner=banner;
  if ((banner != null) && (banner.getId() > 0)) {
    flipper.stopFlipping();
    SpannableStringBuilder text=new SpannableStringBuilder(banner.getTitle());
    text.setSpan(new UnderlineSpan(),0,banner.getTitle().length(),0);
    title.setText(text);
    content.setText(banner.getContent());
    if (!banner.isImageBanner()) {
      if (flipper.getCurrentView().equals(image))       flipper.showNext();
      show();
    }
  }
 else   if (getVisibility() == VISIBLE) {
    if (hideAnimation != null)     startAnimation(hideAnimation);
    setVisibility(INVISIBLE);
    if (viewStateListener != null)     viewStateListener.onHideBannerView();
  }
}","public void setBanner(Plus1Banner banner){
  try {
    if (!initialized)     init();
    this.banner=banner;
    if ((banner != null) && (banner.getId() > 0)) {
      flipper.stopFlipping();
      SpannableStringBuilder text=new SpannableStringBuilder(banner.getTitle());
      text.setSpan(new UnderlineSpan(),0,banner.getTitle().length(),0);
      title.setText(text);
      content.setText(banner.getContent());
      if (!banner.isImageBanner()) {
        if (flipper.getCurrentView().equals(image))         flipper.showNext();
        show();
      }
    }
 else     if (getVisibility() == VISIBLE) {
      if (hideAnimation != null)       startAnimation(hideAnimation);
      setVisibility(INVISIBLE);
      if (viewStateListener != null)       viewStateListener.onHideBannerView();
    }
  }
 catch (  OutOfMemoryError e) {
    Log.e(getClass().getName(),""String_Node_Str"" + e.getMessage());
  }
}"
51392,"protected void modifyConnection(HttpURLConnection connection){
  connection.setDoOutput(true);
  connection.setRequestProperty(""String_Node_Str"",Plus1Helper.getUserAgent());
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Plus1Helper.getClientSessionId(view.getContext()));
  connection.setRequestProperty(""String_Node_Str"",getDisplayMetrics());
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.setRequestProperty(""String_Node_Str"",Locale.getDefault().getDisplayName(Locale.US));
  if ((deviceId != null) && !deviceId.equals(""String_Node_Str""))   connection.setRequestProperty(""String_Node_Str"",deviceId);
}","protected void modifyConnection(HttpURLConnection connection){
  connection.setRequestProperty(""String_Node_Str"",Plus1Helper.getUserAgent());
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + Plus1Helper.getClientSessionId(view.getContext()));
  connection.setRequestProperty(""String_Node_Str"",getDisplayMetrics());
  connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  connection.setRequestProperty(""String_Node_Str"",Locale.getDefault().getDisplayName(Locale.US));
  if ((deviceId != null) && !deviceId.equals(""String_Node_Str""))   connection.setRequestProperty(""String_Node_Str"",deviceId);
}"
51393,"protected String getData(){
  openConnection();
  String result=new String();
  try {
    byte[] buffer=new byte[BUFFER_SIZE];
    int count=0;
    BufferedInputStream bufStream=new BufferedInputStream(stream,BUFFER_SIZE);
    if (bufStream != null)     while ((count=bufStream.read(buffer)) != -1)     result+=new String(buffer,0,count);
    bufStream.close();
  }
 catch (  IOException e) {
    Log.e(getClass().getName(),""String_Node_Str"");
    if (bannerDownloadListener != null)     bannerDownloadListener.onBannerLoadFailed(LoadError.DownloadFailed);
  }
  return result;
}","protected String getData(){
  openConnection();
  String result=new String();
  try {
    byte[] buffer=new byte[BUFFER_SIZE];
    int count=0;
    BufferedInputStream bufStream=new BufferedInputStream(stream,BUFFER_SIZE);
    if (bufStream != null)     while ((count=bufStream.read(buffer)) != -1)     result+=new String(buffer,0,count);
    bufStream.close();
  }
 catch (  IOException e) {
    Log.e(getClass().getName(),""String_Node_Str"" + e.toString());
    if (bannerDownloadListener != null)     bannerDownloadListener.onBannerLoadFailed(LoadError.DownloadFailed);
  }
  return result;
}"
51394,"public static String getUniqueHash() throws NoSuchAlgorithmException {
  MessageDigest sha1=MessageDigest.getInstance(""String_Node_Str"");
  sha1.update(Calendar.getInstance().getTime().toString().getBytes());
  Random rnd=new Random();
  for (int i=0; i < 10; i++)   sha1.update((byte)rnd.nextInt(255));
  return new BigInteger(sha1.digest()).abs().toString(16);
}","public static String getUniqueHash() throws NoSuchAlgorithmException {
  MessageDigest sha1=MessageDigest.getInstance(""String_Node_Str"");
  sha1.update(Calendar.getInstance().getTime().toString().getBytes());
  Random rnd=new Random();
  for (int i=0; i < 10; i++)   sha1.update((byte)rnd.nextInt(255));
  return getHex(sha1.digest());
}"
51395,"@Override protected Void doInBackground(Void... params){
  if (view.isClosed())   return null;
  if (request != null)   this.url=request.getRequestUri();
  final String result=getData();
  Log.d(getClass().getName(),""String_Node_Str"" + result.toString());
  view.post(new Runnable(){
    public void run(){
      Plus1Banner banner=null;
      if (result.equals(""String_Node_Str"")) {
        if (bannerDownloadListener != null)         bannerDownloadListener.onBannerLoadFailed(LoadError.UnknownAnswer);
      }
 else       if (result.equals(NO_BANNER)) {
        if (bannerDownloadListener != null)         bannerDownloadListener.onBannerLoadFailed(LoadError.NoHaveBanner);
      }
 else {
        banner=parse(result);
        if ((banner != null) && (banner.getId() > 0)) {
          if (bannerDownloadListener != null)           bannerDownloadListener.onBannerLoaded();
        }
 else {
          if (bannerDownloadListener != null)           bannerDownloadListener.onBannerLoadFailed(LoadError.UnknownAnswer);
        }
      }
      view.setBanner(banner);
    }
  }
);
  return null;
}","@Override protected Void doInBackground(Void... voids){
  while (running) {
    if (view.isClosed())     return null;
    updateBanner();
    if (runOnce)     return null;
    try {
      Thread.sleep(1000 * timeout);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  return null;
}"
51396,"public Plus1BannerAsker init(){
  if (initialized)   return this;
  if (!isDisabledAutoDetectLocation()) {
    this.locationManager=(LocationManager)view.getContext().getSystemService(Context.LOCATION_SERVICE);
    this.locationListener=new Plus1LocationListener(request);
  }
  if (!isDisabledIMEIDispatch()) {
    TelephonyManager telephonyManager=(TelephonyManager)view.getContext().getSystemService(Context.TELEPHONY_SERVICE);
    this.deviceId=telephonyManager.getDeviceId();
  }
  timer=new Timer();
  if (viewStateListener != null)   view.setViewStateListener(viewStateListener);
 else   view.setViewStateListener(this);
  if (visibilityTimeout == 0)   visibilityTimeout=timeout * 3;
  initialized=true;
  return this;
}","public Plus1BannerAsker init(){
  if (initialized)   return this;
  if (!isDisabledAutoDetectLocation()) {
    this.locationManager=(LocationManager)view.getContext().getSystemService(Context.LOCATION_SERVICE);
    this.locationListener=new Plus1LocationListener(request);
  }
  if (!isDisabledIMEIDispatch()) {
    TelephonyManager telephonyManager=(TelephonyManager)view.getContext().getSystemService(Context.TELEPHONY_SERVICE);
    this.deviceId=telephonyManager.getDeviceId();
  }
  if (viewStateListener != null)   view.setViewStateListener(viewStateListener);
 else   view.setViewStateListener(this);
  if (visibilityTimeout == 0)   visibilityTimeout=timeout * 3;
  initialized=true;
  return this;
}"
51397,"public Plus1BannerAsker start(){
  if ((request == null) || (view == null))   return this;
  init();
  if (!isDisabledAutoDetectLocation()) {
    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,timeout * 10000,500f,locationListener);
  }
  timer.schedule(new TimerTask(){
    @Override public void run(){
      getDownloaderTask().execute();
    }
  }
,2000,1000);
  return this;
}","public Plus1BannerAsker start(){
  if ((request == null) || (view == null))   return this;
  init();
  if (!isDisabledAutoDetectLocation()) {
    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,timeout * 10000,500f,locationListener);
  }
  downloaderTask=getDownloaderTask();
  downloaderTask.execute();
  return this;
}"
51398,"public void onHideBannerView(){
  if (askerStoper != null)   return;
  askerStoper=new Runnable(){
    public void run(){
      stop();
    }
  }
;
}","public void onHideBannerView(){
  if (askerStoper != null)   return;
  askerStoper=new Runnable(){
    public void run(){
      stop();
    }
  }
;
  new Handler().postDelayed(askerStoper,visibilityTimeout * 1000);
}"
51399,"public Plus1BannerAsker startOnce(){
  if ((request == null) || (view == null))   return this;
  init();
  timer.schedule(new TimerTask(){
    @Override public void run(){
      getDownloaderTask().execute();
    }
  }
,100);
  return this;
}","public Plus1BannerAsker startOnce(){
  if ((request == null) || (view == null))   return this;
  init();
  downloaderTask.setRunOnce().execute();
  return this;
}"
51400,"public Plus1BannerAsker stop(){
  if (!isDisabledAutoDetectLocation())   locationManager.removeUpdates(locationListener);
  timer.cancel();
  return this;
}","public Plus1BannerAsker stop(){
  if (!isDisabledAutoDetectLocation())   locationManager.removeUpdates(locationListener);
  downloaderTask.stop();
  return this;
}"
51401,"/** 
 * Makes sure that players cannot put items in disabled slots. Assumes that the inventory has   {@link BetterEnderInventoryHolder} as the holder, thatthe player has indeed shift clicked and that there are actually disabled slots.
 * @param event The inventory click event.
 */
protected void handleTakeOnlySlotsShiftClick(InventoryClickEvent event){
  Inventory inventory=event.getInventory();
  BetterEnderInventoryHolder holder=(BetterEnderInventoryHolder)inventory.getHolder();
  if (event.getSlot() == event.getRawSlot()) {
    return;
  }
  if (event.getCurrentItem() == null || event.getCurrentItem().getType().equals(Material.AIR)) {
    return;
  }
  event.setCancelled(true);
  ItemStack adding=event.getCurrentItem();
  if (!canPlaceStack(adding)) {
    sendInvalidItemMessage(event.getWhoClicked());
    return;
  }
  int useableSlotsCount=inventory.getSize() - holder.getTakeOnlySlots();
  for (int i=0; i < useableSlotsCount; i++) {
    ItemStack inSlot=inventory.getItem(i);
    if (inSlot == null || !inSlot.isSimilar(adding)) {
      continue;
    }
    int itemsToAdd=Math.min(inventory.getMaxStackSize(),inSlot.getMaxStackSize()) - inSlot.getAmount();
    itemsToAdd=Math.min(adding.getAmount(),itemsToAdd);
    if (itemsToAdd > 0) {
      inSlot.setAmount(inSlot.getAmount() + itemsToAdd);
      inventory.setItem(i,inSlot);
    }
    if (itemsToAdd >= adding.getAmount()) {
      event.setCurrentItem(new ItemStack(Material.AIR,0));
      return;
    }
 else {
      adding.setAmount(adding.getAmount() - itemsToAdd);
    }
  }
  for (int i=0; i < useableSlotsCount; i++) {
    ItemStack inSlot=inventory.getItem(i);
    if (inSlot == null || inSlot.getType().equals(Material.AIR)) {
      inventory.setItem(i,adding);
      event.setCurrentItem(new ItemStack(Material.AIR,0));
      return;
    }
  }
  event.setCurrentItem(adding);
}","/** 
 * Makes sure that players cannot put items in disabled slots. Assumes that the inventory has   {@link BetterEnderInventoryHolder} as the holder, thatthe player has indeed shift clicked and that there are actually disabled slots.
 * @param event The inventory click event.
 */
protected void handleTakeOnlySlotsShiftClick(InventoryClickEvent event){
  Inventory inventory=event.getInventory();
  BetterEnderInventoryHolder holder=(BetterEnderInventoryHolder)inventory.getHolder();
  if (event.getSlot() == event.getRawSlot()) {
    return;
  }
  if (event.getCurrentItem() == null || event.getCurrentItem().getType().equals(Material.AIR)) {
    return;
  }
  event.setCancelled(true);
  ItemStack adding=event.getCurrentItem();
  if (!canPlaceStack(adding)) {
    sendInvalidItemMessage(event.getWhoClicked());
    return;
  }
  int useableSlotsCount=inventory.getSize() - holder.getTakeOnlySlots();
  for (int i=0; i < useableSlotsCount; i++) {
    ItemStack inSlot=inventory.getItem(i);
    if (inSlot == null || !inSlot.isSimilar(adding)) {
      continue;
    }
    int itemsToAdd=Math.min(inventory.getMaxStackSize(),inSlot.getMaxStackSize()) - inSlot.getAmount();
    itemsToAdd=Math.max(itemsToAdd,0);
    itemsToAdd=Math.min(adding.getAmount(),itemsToAdd);
    if (itemsToAdd > 0) {
      inSlot.setAmount(inSlot.getAmount() + itemsToAdd);
      inventory.setItem(i,inSlot);
    }
    if (itemsToAdd >= adding.getAmount()) {
      event.setCurrentItem(new ItemStack(Material.AIR,0));
      return;
    }
 else {
      adding.setAmount(adding.getAmount() - itemsToAdd);
    }
  }
  for (int i=0; i < useableSlotsCount; i++) {
    ItemStack inSlot=inventory.getItem(i);
    if (inSlot == null || inSlot.getType().equals(Material.AIR)) {
      inventory.setItem(i,adding);
      event.setCurrentItem(new ItemStack(Material.AIR,0));
      return;
    }
  }
  event.setCurrentItem(adding);
}"
51402,"/** 
 * Returns a resized inventory. Returns null if nothing had to be resized.
 * @param player Player currently opening the inventory.
 * @param inventory Inventory. BetterEnderInventoryHolder must be the holder.
 * @param chestOwner
 * @param plugin
 * @return
 */
private static Inventory getResizedEmptyInventory(Player player,Inventory inventory,BetterEnderChest plugin){
  BetterEnderInventoryHolder inventoryHolder=BetterEnderInventoryHolder.of(inventory);
  ChestOwner chestOwner=inventoryHolder.getChestOwner();
  WorldGroup worldGroup=inventoryHolder.getWorldGroup();
  int rows=inventory.getSize() / 9;
  int disabledSlots=inventoryHolder.getDisabledSlots();
  BetterEnderChestSizes chestSizes=plugin.getChestSizes();
  EmptyInventoryProvider emptyChests=plugin.getEmptyInventoryProvider();
  if (chestOwner.isPublicChest()) {
    if (rows != chestSizes.getPublicChestRows() || disabledSlots != chestSizes.getPublicChestDisabledSlots()) {
      return emptyChests.loadEmptyInventory(chestOwner,worldGroup,chestSizes.getPublicChestRows(),chestSizes.getPublicChestDisabledSlots());
    }
  }
 else   if (chestOwner.isDefaultChest()) {
    if (rows != chestSizes.getChestRows() || disabledSlots != chestSizes.getDisabledSlots()) {
      return emptyChests.loadEmptyInventory(chestOwner,worldGroup,chestSizes.getChestRows(),chestSizes.getDisabledSlots());
    }
  }
 else {
    if (chestOwner.isPlayer(player)) {
      if (rows != chestSizes.getChestRows(player) || disabledSlots != chestSizes.getDisabledSlots(player)) {
        return emptyChests.loadEmptyInventory(chestOwner,worldGroup,chestSizes.getChestRows(player),chestSizes.getDisabledSlots(player));
      }
    }
  }
  return null;
}","/** 
 * Returns a resized inventory. Returns null if nothing had to be resized.
 * @param player Player currently opening the inventory.
 * @param inventory Inventory. BetterEnderInventoryHolder must be the holder.
 * @param plugin The plugin instance.
 * @return The resized inventory.
 */
private static Inventory getResizedEmptyInventory(Player player,Inventory inventory,BetterEnderChest plugin){
  BetterEnderInventoryHolder inventoryHolder=BetterEnderInventoryHolder.of(inventory);
  ChestOwner chestOwner=inventoryHolder.getChestOwner();
  WorldGroup worldGroup=inventoryHolder.getWorldGroup();
  int rows=inventory.getSize() / 9;
  int disabledSlots=inventoryHolder.getDisabledSlots();
  BetterEnderChestSizes chestSizes=plugin.getChestSizes();
  EmptyInventoryProvider emptyChests=plugin.getEmptyInventoryProvider();
  if (chestOwner.isPublicChest()) {
    if (rows != chestSizes.getPublicChestRows() || disabledSlots != chestSizes.getPublicChestDisabledSlots()) {
      return emptyChests.loadEmptyInventory(chestOwner,worldGroup,chestSizes.getPublicChestRows(),chestSizes.getPublicChestDisabledSlots());
    }
  }
 else   if (chestOwner.isDefaultChest()) {
    if (rows != chestSizes.getChestRows() || disabledSlots != chestSizes.getDisabledSlots()) {
      return emptyChests.loadEmptyInventory(chestOwner,worldGroup,chestSizes.getChestRows(),chestSizes.getDisabledSlots());
    }
  }
 else {
    if (chestOwner.isPlayer(player)) {
      if (rows != chestSizes.getChestRows(player) || disabledSlots != chestSizes.getDisabledSlots(player)) {
        return emptyChests.loadEmptyInventory(chestOwner,worldGroup,chestSizes.getChestRows(player),chestSizes.getDisabledSlots(player));
      }
    }
  }
  return null;
}"
51403,"/** 
 * Finds out if the block is protected by a chest protection plugin.
 * @param block
 * @return whether the block is protected by a chest protection plugin.
 */
public abstract boolean isProtected(Block block);","/** 
 * Finds out if the block is protected by a chest protection plugin.
 * @param block The block to check.
 * @return whether the block is protected by a chest protection plugin.
 */
public abstract boolean isProtected(Block block);"
51404,"/** 
 * Parses a command inventoryName and returns the inventoryName. If the inventoryName is world_nether/Notch it will return Notch, if it's Notch it will return Notch.
 * @param inventoryName
 * @return
 */
protected String getInventoryName(String inventoryName){
  String[] parts=inventoryName.split(""String_Node_Str"");
  if (parts.length == 2) {
    return parts[1];
  }
 else {
    return parts[0];
  }
}","/** 
 * Parses a command inventoryName and returns the inventoryName. If the inventoryName is world_nether/Notch it will return Notch, if it's Notch it will return Notch.
 * @param inventoryName Name of the requested inventory.
 * @return The inventory name, without the world group part.
 */
protected String getInventoryName(String inventoryName){
  String[] parts=inventoryName.split(""String_Node_Str"");
  if (parts.length == 2) {
    return parts[1];
  }
 else {
    return parts[0];
  }
}"
51405,"/** 
 * Parses a command inventoryName and returns the world group. If the inventoryName is cavegroup/Notch it will return the group called cavegroup, if it's Notch it will return the world the sender is in.
 * @param inventoryName
 * @param sender
 * @return
 */
protected WorldGroup getGroup(String inventoryName,CommandSender sender){
  String[] parts=inventoryName.split(""String_Node_Str"");
  if (parts.length == 2) {
    return plugin.getWorldGroupManager().getGroupByGroupName(parts[0]);
  }
  return getGroup(sender);
}","/** 
 * Parses a command inventoryName and returns the world group. If the inventoryName is cavegroup/Notch it will return the group called cavegroup, if it's Notch it will return the world the sender is in.
 * @param inventoryName Name of the requested inventory.
 * @param sender The command sender.
 * @return The world group.
 */
protected WorldGroup getGroup(String inventoryName,CommandSender sender){
  String[] parts=inventoryName.split(""String_Node_Str"");
  if (parts.length == 2) {
    return plugin.getWorldGroupManager().getGroupByGroupName(parts[0]);
  }
  return getGroup(sender);
}"
51406,"/** 
 * Wrapper around the unsafe method  {@link org.bukkit.UnsafeValues#modifyItemStack(ItemStack,String)}, that forces you to catch any exceptions, but suppresses deprecation warnings.
 * @param stack Stack to add NBT to. Depending on the implementation, this stack may or may not be modified.
 * @param nbt NBT to add.
 * @return The modified stack.
 * @throws Throwable Method may throw anything, as indicated by {@link org.bukkit.UnsafeValues}.
 */
@SuppressWarnings(""String_Node_Str"") private ItemStack addNBT(ItemStack stack,String nbt) throws Throwable {
  return Bukkit.getUnsafe().modifyItemStack(stack,nbt);
}","/** 
 * Wrapper around the unsafe method  {@code UnsafeValues.modifyItemStack(ItemStack, String)}, that forces you to catch any exceptions, but suppresses deprecation warnings.
 * @param stack Stack to add NBT to. Depending on the implementation, this stack may or may not be modified.
 * @param nbt NBT to add.
 * @return The modified stack.
 * @throws Throwable Method may throw anything, as indicated by {@code UnsafeValues}.
 */
@SuppressWarnings(""String_Node_Str"") private ItemStack addNBT(ItemStack stack,String nbt) throws Throwable {
  return Bukkit.getUnsafe().modifyItemStack(stack,nbt);
}"
51407,"/** 
 * Converts the compound tag to a map. All values in the tag will also have their tags converted to String//primitives/maps/Lists.
 * @param tagCompound
 * @return
 * @throws IOException
 */
static final Map<String,Object> toMap(NBTTagCompound tagCompound) throws IOException {
  Collection<String> tagNames=tagCompound.c();
  Map<String,Object> jsonObject=new HashMap<String,Object>(tagNames.size());
  for (  String subTagName : tagNames) {
    NBTBase subTag=tagCompound.get(subTagName);
    jsonObject.put(subTagName,nbtTagToJavaType(subTag));
  }
  return jsonObject;
}","/** 
 * Converts the compound tag to a map. All values in the tag will also have their tags converted to String//primitives/maps/Lists.
 * @param tagCompound The compound tag.
 * @return The map.
 * @throws IOException In case an unknown tag was encountered in the NBT tag.
 */
static final Map<String,Object> toMap(NBTTagCompound tagCompound) throws IOException {
  Collection<String> tagNames=tagCompound.c();
  Map<String,Object> jsonObject=new HashMap<String,Object>(tagNames.size());
  for (  String subTagName : tagNames) {
    NBTBase subTag=tagCompound.get(subTagName);
    jsonObject.put(subTagName,nbtTagToJavaType(subTag));
  }
  return jsonObject;
}"
51408,"/** 
 * Registers a registration. The registration cannot be null.
 * @param registration
 */
public void register(T registration){
  Validate.notNull(registration,""String_Node_Str"");
  registered.put(filterName(registration.getName()),registration);
}","/** 
 * Registers a registration. The registration cannot be null.
 * @param registration The item to register.
 */
public void register(T registration){
  Validate.notNull(registration,""String_Node_Str"");
  registered.put(filterName(registration.getName()),registration);
}"
51409,"/** 
 * Decodes the JSON and encodes. Useful for testing whether JSON is correctly read and written. <p> Do not rely on the order of elements in the tag, keep in mind that Minecraft uses a HashMap for storage. When a compound tag contains more than one element, do not compare serialized forms of the tag directly.
 * @param json JSON to decode and encode.
 * @return The JSON after it has been decoded and encoded.
 * @throws IOException
 */
private String reserialize(String json) throws IOException {
  NBTTagCompound compoundTag=JSONSimpleTypes.toTag(json);
  return toJSON(compoundTag);
}","/** 
 * Decodes the JSON and encodes. Useful for testing whether JSON is correctly read and written. <p> Do not rely on the order of elements in the tag, keep in mind that Minecraft uses a HashMap for storage. When a compound tag contains more than one element, do not compare serialized forms of the tag directly.
 * @param json JSON to decode and encode.
 * @return The JSON after it has been decoded and encoded.
 * @throws IOException When a decoding error occurs.
 */
private String reserialize(String json) throws IOException {
  NBTTagCompound compoundTag=JSONSimpleTypes.toTag(json);
  return toJSON(compoundTag);
}"
51410,"public LWCBridge(BetterEnderChest plugin){
  this.plugin=plugin;
}","public LWCBridge(BetterEnderChest plugin){
  this.plugin=plugin;
  try {
    protectionGetOwnerMethod=Protection.class.getMethod(""String_Node_Str"");
    Class<?> returnType=protectionGetOwnerMethod.getReturnType();
    if (returnType.getName().equals(""String_Node_Str"")) {
      playerInfoGetNameMethod=returnType.getMethod(""String_Node_Str"");
      playerInfoGetUUIDMethod=returnType.getMethod(""String_Node_Str"");
    }
  }
 catch (  NoClassDefFoundError e) {
  }
catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}"
51411,"@Override public boolean isAvailable(){
  return Bukkit.getPluginManager().getPlugin(""String_Node_Str"") != null;
}","@Override public boolean isAvailable(){
  return protectionGetOwnerMethod != null;
}"
51412,"/** 
 * Gets the owner from the protection. If the UUID of the owner is unknown, null is returned.
 * @param protection The protection.
 * @return The owner, or null if the UUID is unknown.
 */
private ChestOwner getOwnerFromProtection(Protection protection){
  try {
    Object owner=GET_OWNER_METHOD.invoke(protection);
    if (owner instanceof String) {
      return getOwnerFromUUIDString((String)owner);
    }
    String name=(String)GET_NAME_METHOD.invoke(owner);
    UUID uuid=(UUID)GET_UUID_METHOD.invoke(owner);
    if (uuid == null) {
      return null;
    }
    return plugin.getChestOwners().playerChest(name,uuid);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}","/** 
 * Gets the owner from the protection. If the UUID of the owner is unknown, null is returned.
 * @param protection The protection.
 * @return The owner, or null if the UUID is unknown.
 */
private ChestOwner getOwnerFromProtection(Protection protection){
  try {
    Object owner=protectionGetOwnerMethod.invoke(protection);
    if (owner instanceof String) {
      return getOwnerFromUUIDString((String)owner);
    }
    String name=(String)playerInfoGetNameMethod.invoke(owner);
    UUID uuid=(UUID)playerInfoGetUUIDMethod.invoke(owner);
    if (uuid == null) {
      return null;
    }
    return plugin.getChestOwners().playerChest(name,uuid);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}"
51413,"@Override public String getOwnerName(Block block){
  Protection protection=LWC.getInstance().findProtection(block);
  try {
    Object owner=GET_OWNER_METHOD.invoke(protection);
    if (owner instanceof String) {
      return (String)owner;
    }
    return (String)GET_NAME_METHOD.invoke(owner);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}","@Override public String getOwnerName(Block block){
  Protection protection=LWC.getInstance().findProtection(block);
  try {
    Object owner=protectionGetOwnerMethod.invoke(protection);
    if (owner instanceof String) {
      return (String)owner;
    }
    return (String)playerInfoGetNameMethod.invoke(owner);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}"
51414,"/** 
 * Gets whether the string is a valid chest drop
 * @param drop
 * @return
 */
public boolean isValidChestDrop(String drop){
  try {
    ChestDrop.valueOf(drop);
    return true;
  }
 catch (  IllegalArgumentException e) {
    return false;
  }
}","/** 
 * Gets whether the string is a valid chest drop.
 * @param drop The string.
 * @return True if the drop is valid, false otherwise.
 */
public boolean isValidChestDrop(String drop){
  try {
    ChestDrop.valueOf(drop);
    return true;
  }
 catch (  IllegalArgumentException e) {
    return false;
  }
}"
51415,"/** 
 * Returns the group of the world. World name is case insensitive. If the world name is not listed in a group (  {@link #isWorldListed(String)}) it will return the default group.
 * @param world Name of the world. Case insensitive.
 * @return The world group.
 */
public WorldGroup getGroupByWorldName(String worldName){
  for (  WorldGroup worldGroup : groups.values()) {
    if (worldGroup.isWorldInGroup(worldName)) {
      return worldGroup;
    }
  }
  return getOrCreateWorldGroup(BetterEnderChest.STANDARD_GROUP_NAME);
}","/** 
 * Returns the group of the world. World name is case insensitive. If the world name is not listed in a group (  {@link #isWorldListed(String)}) it will return the default group.
 * @param worldName Name of the world. Case insensitive.
 * @return The world group.
 */
public WorldGroup getGroupByWorldName(String worldName){
  for (  WorldGroup worldGroup : groups.values()) {
    if (worldGroup.isWorldInGroup(worldName)) {
      return worldGroup;
    }
  }
  return getOrCreateWorldGroup(BetterEnderChest.STANDARD_GROUP_NAME);
}"
51416,"/** 
 * Guesses the number of chest rows based on both the contents and the inventory name. It will calculate the minimum number of rows to fit all the items. It will also guess the number of rows based on the name, just like   {@link #getInventoryRows(String)}. It will then return the highest number of the two.
 * @param chestOwner The owner of the inventory.
 * @param it Iterating over the contents in the inventory.
 * @return Guessed number of rows.
 */
public int getInventoryRows(ChestOwner chestOwner,ListIterator<ItemStack> it){
  int highestSlot=0;
  while (it.hasNext()) {
    int currentSlot=it.nextIndex();
    ItemStack stack=it.next();
    if (stack != null) {
      highestSlot=Math.max(currentSlot,highestSlot);
    }
  }
  return Math.max((int)Math.ceil(highestSlot / 9.0),getInventoryRows(chestOwner));
}","/** 
 * Guesses the number of chest rows based on both the contents and the inventory name. It will calculate the minimum number of rows to fit all the items. It will also guess the number of rows based on the owner, just like   {@link #getInventoryRows(ChestOwner)}. It will then return the highest number of the two.
 * @param chestOwner The owner of the inventory.
 * @param it Iterating over the contents in the inventory.
 * @return Guessed number of rows.
 */
public int getInventoryRows(ChestOwner chestOwner,ListIterator<ItemStack> it){
  int highestSlot=0;
  while (it.hasNext()) {
    int currentSlot=it.nextIndex();
    ItemStack stack=it.next();
    if (stack != null) {
      highestSlot=Math.max(currentSlot,highestSlot);
    }
  }
  return Math.max((int)Math.ceil(highestSlot / 9.0),getInventoryRows(chestOwner));
}"
51417,"/** 
 * Gets the name of the file this chest will be saved to, without the extension. Currently, this is just the lowercase player name, but this will change when UUIDs are introduced. This method may suddenly dissappear.
 * @see BetterEnderChest#PUBLIC_CHEST_NAME
 * @see BetterEnderChest#DEFAULT_CHEST_NAME
 * @return The name of
 */
String getSaveFileName();","/** 
 * Gets the name of the file this chest will be saved to, without the extension. This is usually the string representation of the UUID, but some chests (like the public chest) can use something else.
 * @return The name of
 */
String getSaveFileName();"
51418,"/** 
 * Retrieves the   {@link ChestOwner} with the given name. In the future, thismethod might need to contact Mojang's auth service to look up the UUID for the given name, so it may take some time to be completed. The callbacks are always called on the main thread. At the moment the callback is called immediately. <p> The name may be the name of a player, or it may be {@link #PUBLIC_CHEST_NAME} or {@link #DEFAULT_CHEST_NAME}.
 * @param name Either a player name,  {@link #PUBLIC_CHEST_NAME} or{@link #DEFAULT_CHEST_NAME}.
 * @param onSuccess Will be called when the  {@link ChestOwner} has been found.
 * @param onFailure Will be called when the  {@link ChestOwner} was not found,which usually happens because no player exists with that name.
 */
public void fromInput(final String name,final Consumer<ChestOwner> onSuccess,final Consumer<InvalidOwnerException> onFailure){
  if (name.equalsIgnoreCase(publicChest().getSaveFileName())) {
    onSuccess.consume(publicChest());
    return;
  }
  if (name.equalsIgnoreCase(defaultChest().getSaveFileName())) {
    onSuccess.consume(defaultChest());
    return;
  }
  if (!plugin.useUuidsForSaving()) {
    onSuccess.consume(new NamedChestOwner(name));
    return;
  }
  Bukkit.getScheduler().runTaskAsynchronously(plugin.getPlugin(),new Runnable(){
    @Override public void run(){
      try {
        final ChestOwner chestOwner=uuidCache.get(name.toLowerCase());
        Bukkit.getScheduler().runTask(plugin.getPlugin(),new Runnable(){
          @Override public void run(){
            onSuccess.consume(chestOwner);
          }
        }
);
      }
 catch (      final ExecutionException e) {
        Bukkit.getScheduler().runTask(plugin.getPlugin(),new Runnable(){
          @Override public void run(){
            if (e.getCause() instanceof InvalidOwnerException) {
              onFailure.consume((InvalidOwnerException)e.getCause());
            }
 else {
              plugin.severe(""String_Node_Str"" + name,e);
              onFailure.consume(new InvalidOwnerException(name));
            }
          }
        }
);
      }
    }
  }
);
}","/** 
 * Retrieves the   {@link ChestOwner} with the given name. In the future, thismethod might need to contact Mojang's auth service to look up the UUID for the given name, so it may take some time to be completed. The callbacks are always called on the main thread. At the moment the callback is called immediately. <p> The name may be the name of a player, or it may be {@code publicChest().getSaveFileName()} or{@code defaultChest().getSaveFileName()}.
 * @param name Either a player name or the name of a special chest.
 * @param onSuccess Will be called when the  {@link ChestOwner} has been found.
 * @param onFailure Will be called when the  {@link ChestOwner} was not found,which usually happens because no player exists with that name.
 */
public void fromInput(final String name,final Consumer<ChestOwner> onSuccess,final Consumer<InvalidOwnerException> onFailure){
  if (name.equalsIgnoreCase(publicChest().getSaveFileName())) {
    onSuccess.consume(publicChest());
    return;
  }
  if (name.equalsIgnoreCase(defaultChest().getSaveFileName())) {
    onSuccess.consume(defaultChest());
    return;
  }
  if (!plugin.useUuidsForSaving()) {
    onSuccess.consume(new NamedChestOwner(name));
    return;
  }
  Bukkit.getScheduler().runTaskAsynchronously(plugin.getPlugin(),new Runnable(){
    @Override public void run(){
      try {
        final ChestOwner chestOwner=uuidCache.get(name.toLowerCase());
        Bukkit.getScheduler().runTask(plugin.getPlugin(),new Runnable(){
          @Override public void run(){
            onSuccess.consume(chestOwner);
          }
        }
);
      }
 catch (      final ExecutionException e) {
        Bukkit.getScheduler().runTask(plugin.getPlugin(),new Runnable(){
          @Override public void run(){
            if (e.getCause() instanceof InvalidOwnerException) {
              onFailure.consume((InvalidOwnerException)e.getCause());
            }
 else {
              plugin.severe(""String_Node_Str"" + name,e);
              onFailure.consume(new InvalidOwnerException(name));
            }
          }
        }
);
      }
    }
  }
);
}"
51419,"/** 
 * Tries to parse the string as an UUID. If the string is an UUID, the name is looked up and a   {@link ChestOwner} is returned. If not, null isreturned.
 * @param ownerName The string that is maybe an UUID.
 * @return The {@link ChestOwner}, or null.
 */
private ChestOwner getOwnerFromUUIDString(String string){
  if (string.length() == 36) {
    try {
      UUID uuid=UUID.fromString(string);
      String ownerName=Bukkit.getOfflinePlayer(uuid).getName();
      if (ownerName == null) {
        ownerName=""String_Node_Str"";
      }
      return plugin.getChestOwners().playerChest(ownerName,uuid);
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return null;
}","/** 
 * Tries to parse the string as an UUID. If the string is an UUID, the name is looked up and a   {@link ChestOwner} is returned. If not, null isreturned.
 * @param string The string that is maybe an UUID.
 * @return The {@link ChestOwner}, or null.
 */
private ChestOwner getOwnerFromUUIDString(String string){
  if (string.length() == 36) {
    try {
      UUID uuid=UUID.fromString(string);
      String ownerName=Bukkit.getOfflinePlayer(uuid).getName();
      if (ownerName == null) {
        ownerName=""String_Node_Str"";
      }
      return plugin.getChestOwners().playerChest(ownerName,uuid);
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return null;
}"
51420,"/** 
 * Finds out if a player can access a block that is protected by a chest protection plugin.
 * @param block
 * @return whether the block is protected by a chest protection plugin.
 */
public abstract boolean canAccess(Player player,Block block);","/** 
 * Finds out if a player can access a block that is protected by a chest protection plugin.
 * @param player The player trying to access something.
 * @param block The block that is being accessed.
 * @return whether the block is protected by a chest protection plugin.
 */
public abstract boolean canAccess(Player player,Block block);"
51421,"/** 
 * Constructs a new PermissionException.
 * @param requiredPermission The permission node that was missing.
 * @throws IllegalArgumentExcepiont If requiredPermission is null.
 */
public NoPermissionException(String requiredPermission){
  super(""String_Node_Str"" + requiredPermission);
  Validate.notNull(requiredPermission,""String_Node_Str"");
  this.permission=requiredPermission;
}","/** 
 * Constructs a new PermissionException.
 * @param requiredPermission The permission node that was missing.
 * @throws IllegalArgumentException If requiredPermission is null.
 */
public NoPermissionException(String requiredPermission){
  super(""String_Node_Str"" + requiredPermission);
  Validate.notNull(requiredPermission,""String_Node_Str"");
  this.permission=requiredPermission;
}"
51422,"/** 
 * Imports an inventory from another plugin. Method must be called on the main thread. Will only be called if isAvailable() returns true. Will return null if there was nothing to import.
 * @param chestOwner The owner of the inventory.
 * @param worldGroup The group the inventory is in.
 * @param plugin The BetterEnderChest plugin.
 * @return The inventory, or null if there was nothing to import.
 * @throws IOException When something went wrong.
 */
public void importInventoryAsync(ChestOwner chestOwner,WorldGroup worldGroup,BetterEnderChest plugin,Consumer<Inventory> callback,Consumer<IOException> onError){
  try {
    Inventory inventory=importInventory(chestOwner,worldGroup,plugin);
    if (inventory != null) {
      callback.consume(inventory);
    }
 else {
      onError.consume(new ChestNotFoundException(chestOwner,worldGroup));
    }
  }
 catch (  IOException e) {
    onError.consume(e);
  }
}","/** 
 * Imports an inventory from another plugin. Method must be called on the main thread. Will only be called if isAvailable() returns true. Will return null if there was nothing to import.
 * @param chestOwner The owner of the inventory.
 * @param worldGroup The group the inventory is in.
 * @param plugin The BetterEnderChest plugin.
 * @param callback Called with the inventory.
 * @param onError Called when there was an error.
 */
public void importInventoryAsync(ChestOwner chestOwner,WorldGroup worldGroup,BetterEnderChest plugin,Consumer<Inventory> callback,Consumer<IOException> onError){
  try {
    Inventory inventory=importInventory(chestOwner,worldGroup,plugin);
    if (inventory != null) {
      callback.consume(inventory);
    }
 else {
      onError.consume(new ChestNotFoundException(chestOwner,worldGroup));
    }
  }
 catch (  IOException e) {
    onError.consume(e);
  }
}"
51423,"/** 
 * Sets the inventory in the cache, replacing the old inventory that may have been in the cache.
 * @param inventory The new inventory
 */
void setInventory(Inventory enderInventory);","/** 
 * Sets the inventory in the cache, replacing the old inventory that may have been in the cache.
 * @param inventory The new inventory
 */
void setInventory(Inventory inventory);"
51424,"/** 
 * Load the inventory. It will automatically try to load it from a file, or import it from another plugin, or use the default chest.
 * @param chestOwner Owner of the inventory.
 * @param worldGroup Name of the world group the inventory is in.
 * @return The Inventory. {@link BetterEnderInventoryHolder} will be theholder of the inventory.
 */
public void loadFromFileOrImport(ChestOwner chestOwner,WorldGroup worldGroup,Consumer<Inventory> callback){
  try {
    callback.consume(loadFromFileOrError0(chestOwner,worldGroup));
  }
 catch (  ChestNotFoundException e) {
    plugin.getEmptyInventoryProvider().getFallbackInventory(chestOwner,worldGroup,callback);
  }
catch (  IOException e) {
    plugin.severe(""String_Node_Str"" + chestOwner.getDisplayName(),e);
    plugin.disableSaveAndLoad(""String_Node_Str"" + chestOwner.getDisplayName(),e);
    callback.consume(plugin.getEmptyInventoryProvider().loadEmptyInventory(chestOwner,worldGroup));
  }
}","/** 
 * Load the inventory. It will automatically try to load it from a file, or import it from another plugin, or use the default chest.
 * @param chestOwner Owner of the inventory.
 * @param worldGroup Name of the world group the inventory is in.
 * @param callback Called with the Inventory as parameter. {@link BetterEnderInventoryHolder} will be the holder of theinventory.
 */
public void loadFromFileOrImport(ChestOwner chestOwner,WorldGroup worldGroup,Consumer<Inventory> callback){
  try {
    callback.consume(loadFromFileOrError0(chestOwner,worldGroup));
  }
 catch (  ChestNotFoundException e) {
    plugin.getEmptyInventoryProvider().getFallbackInventory(chestOwner,worldGroup,callback);
  }
catch (  IOException e) {
    plugin.severe(""String_Node_Str"" + chestOwner.getDisplayName(),e);
    plugin.disableSaveAndLoad(""String_Node_Str"" + chestOwner.getDisplayName(),e);
    callback.consume(plugin.getEmptyInventoryProvider().loadEmptyInventory(chestOwner,worldGroup));
  }
}"
51425,"/** 
 * Saves an inventory to a file. It should cache things like the number of rows, the number of disabled slots and the inventory name. The holder of this inventory name is always a   {@link BetterEnderInventoryHolder}.
 * @param inventory The inventory to save.
 * @param chestOwner The owner of the inventory.
 * @param group The group the inventory is in.
 */
public void saveInventory(Inventory inventory,ChestOwner chestOwner,WorldGroup group) throws IOException {
  File file=getChestFile(chestOwner,group);
  plugin.getNMSHandlers().getSelectedRegistration().saveInventoryToFile(file,inventory);
}","/** 
 * Saves an inventory to a file. It should cache things like the number of rows, the number of disabled slots and the inventory name. The holder of this inventory name is always a   {@link BetterEnderInventoryHolder}.
 * @param inventory The inventory to save.
 * @param chestOwner The owner of the inventory.
 * @param group The group the inventory is in.
 * @throws IOException When saving fails.
 */
public void saveInventory(Inventory inventory,ChestOwner chestOwner,WorldGroup group) throws IOException {
  File file=getChestFile(chestOwner,group);
  plugin.getNMSHandlers().getSelectedRegistration().saveInventoryToFile(file,inventory);
}"
51426,"/** 
 * Calls the callback on the main thread. This method can be called from any thread.
 * @param plugin The plugin, needed for Bukkit's scheduler.
 * @param jsonData The raw bytes of the inventory that was just loaded.
 */
public void callback(final BetterEnderChest plugin,final BetterEnderSQLCache cache,final String jsonData){
  if (Bukkit.isPrimaryThread()) {
    callbackOnMainThread(plugin,cache,jsonData);
  }
 else {
    Bukkit.getScheduler().runTask(plugin.getPlugin(),new Runnable(){
      @Override public void run(){
        callbackOnMainThread(plugin,cache,jsonData);
      }
    }
);
  }
}","/** 
 * Calls the callback on the main thread. This method can be called from any thread.
 * @param plugin The plugin, needed for Bukkit's scheduler.
 * @param cache The cache, to put the inventory in.
 * @param jsonData The raw bytes of the inventory that was just loaded.
 */
public void callback(final BetterEnderChest plugin,final BetterEnderSQLCache cache,final String jsonData){
  if (Bukkit.isPrimaryThread()) {
    callbackOnMainThread(plugin,cache,jsonData);
  }
 else {
    Bukkit.getScheduler().runTask(plugin.getPlugin(),new Runnable(){
      @Override public void run(){
        callbackOnMainThread(plugin,cache,jsonData);
      }
    }
);
  }
}"
51427,"/** 
 * Gets the world group of the inventory that should be loaded.
 * @return
 */
public WorldGroup getWorldGroup(){
  return worldGroup;
}","/** 
 * Gets the world group of the inventory that should be loaded.
 * @return The world group.
 */
public WorldGroup getWorldGroup(){
  return worldGroup;
}"
51428,"/** 
 * Saves a BetterEnderChest inventory to a NBT formatted file.
 * @param file The NBT file to save to. If the file does not exist, it is created.
 * @param inventory The inventory to save to. It must have BetterEnderInventoryHolder as it's holder.
 */
public abstract void saveInventoryToFile(File file,Inventory inventory) throws IOException ;","/** 
 * Saves a BetterEnderChest inventory to a NBT formatted file.
 * @param file The NBT file to save to. If the file does not exist, it is created.
 * @param inventory The inventory to save to. It must have BetterEnderInventoryHolder as it's holder.
 * @throws IOException When an IO error occurs.
 */
public abstract void saveInventoryToFile(File file,Inventory inventory) throws IOException ;"
51429,"/** 
 * Saves a BetterEnderChest inventory to a JSON-formatted String, based on the NBT representation of the inventory.
 * @param file The NBT file to save to. If the file does not exist, it is created.
 * @param inventory The inventory to save to. It must have BetterEnderInventoryHolder as it's holder.
 */
public abstract String saveInventoryToJson(Inventory inventory) throws IOException ;","/** 
 * Saves a BetterEnderChest inventory to a JSON-formatted String, based on the NBT representation of the inventory.
 * @param inventory The inventory to save to. It must have BetterEnderInventoryHolder as it's holder.
 * @throws IOException When the NBT can somehow not be converted to JSON.
 * @return The JSON string.
 */
public abstract String saveInventoryToJson(Inventory inventory) throws IOException ;"
51430,"/** 
 * Loads a BetterEnderChest inventory from the JSON String, which represents the NBT format of the inventory. The inventory will have the specified name and will be loaded from the specified child tag (vanilla uses EnderItems and BeterEnderChest uses Inventory). It will also search for the chest size tag in the root of the file, but it should guess them if they are not provided. <p /> It is not permitted to use another load format than NBT, as for example the vanilla importing process depends on it.
 * @param chestOwner The owner of the inventory.
 * @param worldGroup The world group the inventory is in.
 * @param nbtFile The array to load from.
 * @throws IOException If the byte array is corrupted.
 * @return The inventory. The holder of the inventory must beBetterEnderInventoryHolder.
 */
public abstract Inventory loadNBTInventoryFromJson(String jsonString,ChestOwner chestOwner,WorldGroup worldGroup) throws IOException ;","/** 
 * Loads a BetterEnderChest inventory from the JSON String, which represents the NBT format of the inventory. The inventory will have the specified name and will be loaded from the specified child tag (vanilla uses EnderItems and BeterEnderChest uses Inventory). It will also search for the chest size tag in the root of the file, but it should guess them if they are not provided. <p /> It is not permitted to use another load format than NBT, as for example the vanilla importing process depends on it.
 * @param chestOwner The owner of the inventory.
 * @param worldGroup The world group the inventory is in.
 * @param jsonString The json to load from.
 * @throws IOException If the byte array is corrupted.
 * @return The inventory. The holder of the inventory must beBetterEnderInventoryHolder.
 */
public abstract Inventory loadNBTInventoryFromJson(String jsonString,ChestOwner chestOwner,WorldGroup worldGroup) throws IOException ;"
51431,"private NBTTagCompound saveInventoryToTag(Inventory inventory) throws IOException {
  BetterEnderInventoryHolder holder=BetterEnderInventoryHolder.of(inventory);
  NBTTagCompound baseTag=new NBTTagCompound();
  NBTTagList inventoryTag=new NBTTagList();
  baseTag.setByte(""String_Node_Str"",(byte)(inventory.getSize() / 9));
  baseTag.setByte(""String_Node_Str"",(byte)holder.getDisabledSlots());
  baseTag.setString(""String_Node_Str"",holder.getChestOwner().getDisplayName());
  for (int i=0; i < inventory.getSize(); i++) {
    ItemStack stack=inventory.getItem(i);
    if (stack != null && stack.getType() != Material.AIR) {
      NBTTagCompound item=new NBTTagCompound();
      item.setByte(""String_Node_Str"",(byte)i);
      inventoryTag.add(CraftItemStack.asNMSCopy(stack).save(item));
    }
  }
  baseTag.set(""String_Node_Str"",inventoryTag);
  return baseTag;
}","private NBTTagCompound saveInventoryToTag(Inventory inventory){
  BetterEnderInventoryHolder holder=BetterEnderInventoryHolder.of(inventory);
  NBTTagCompound baseTag=new NBTTagCompound();
  NBTTagList inventoryTag=new NBTTagList();
  baseTag.setByte(""String_Node_Str"",(byte)(inventory.getSize() / 9));
  baseTag.setByte(""String_Node_Str"",(byte)holder.getDisabledSlots());
  baseTag.setString(""String_Node_Str"",holder.getChestOwner().getDisplayName());
  for (int i=0; i < inventory.getSize(); i++) {
    ItemStack stack=inventory.getItem(i);
    if (stack != null && stack.getType() != Material.AIR) {
      NBTTagCompound item=new NBTTagCompound();
      item.setByte(""String_Node_Str"",(byte)i);
      inventoryTag.add(CraftItemStack.asNMSCopy(stack).save(item));
    }
  }
  baseTag.set(""String_Node_Str"",inventoryTag);
  return baseTag;
}"
51432,"/** 
 * Converts from a List<Number>, as found in the JSON, to int[].
 * @param boxed List from the JSON. return The int array.
 */
private static final int[] unboxIntegers(List<Number> boxed){
  int[] ints=new int[boxed.size()];
  for (int i=0; i < ints.length; i++) {
    ints[i]=boxed.get(i).intValue();
  }
  return ints;
}","/** 
 * Converts from a List<Number>, as found in the JSON, to int[].
 * @param boxed List from the JSON. return The int array.
 * @return The unboxed ints.
 */
private static final int[] unboxIntegers(List<Number> boxed){
  int[] ints=new int[boxed.size()];
  for (int i=0; i < ints.length; i++) {
    ints[i]=boxed.get(i).intValue();
  }
  return ints;
}"
51433,"/** 
 * Converts from a List<Number>, as found in the JSON, to byte[].
 * @param boxed List from the JSON. return The byte array.
 */
private static final byte[] unboxBytes(List<Number> boxed){
  byte[] bytes=new byte[boxed.size()];
  for (int i=0; i < bytes.length; i++) {
    bytes[i]=boxed.get(i).byteValue();
  }
  return bytes;
}","/** 
 * Converts from a List<Number>, as found in the JSON, to byte[].
 * @param boxed List from the JSON. return The byte array.
 * @return The unboxed bytes.
 */
private static final byte[] unboxBytes(List<Number> boxed){
  byte[] bytes=new byte[boxed.size()];
  for (int i=0; i < bytes.length; i++) {
    bytes[i]=boxed.get(i).byteValue();
  }
  return bytes;
}"
51434,"@Override public Inventory importInventory(final String inventoryName,WorldGroup worldGroup,BetterEnderChest plugin) throws IOException {
  String groupName=worldGroup.getGroupName();
  if (plugin.isSpecialChest(inventoryName)) {
    return null;
  }
  MultiverseInventories multiverseInventories=(MultiverseInventories)Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  boolean foundMatchingGroup=false;
  List<WorldGroupProfile> multiverseInventoriesGroups=multiverseInventories.getGroupManager().getGroups();
  for (  WorldGroupProfile group : multiverseInventoriesGroups) {
    if (group.getName().equalsIgnoreCase(groupName)) {
      groupName=group.getName();
      foundMatchingGroup=true;
      break;
    }
  }
  if (!foundMatchingGroup) {
    plugin.log(""String_Node_Str"" + groupName + ""String_Node_Str""+ inventoryName+ ""String_Node_Str"",Level.WARNING);
    return null;
  }
  GlobalProfile globalProfile=multiverseInventories.getData().getGlobalProfile(inventoryName);
  if (multiverseInventories.getGroupManager().getGroup(groupName).containsWorld(globalProfile.getWorld())) {
    return plugin.getInventoryImporters().getRegistration(""String_Node_Str"").importInventory(inventoryName,worldGroup,plugin);
  }
 else {
    ProfileType profileType;
    if (multiverseInventories.getMVIConfig().isUsingGameModeProfiles()) {
      profileType=ProfileTypes.forGameMode(Bukkit.getDefaultGameMode());
    }
 else {
      profileType=ProfileTypes.SURVIVAL;
    }
    PlayerProfile playerData=multiverseInventories.getGroupManager().getGroup(groupName).getPlayerData(profileType,Bukkit.getOfflinePlayer(inventoryName));
    if (playerData == null) {
      return null;
    }
    ItemStack[] stacks=playerData.get(Sharables.ENDER_CHEST);
    if (stacks == null || stacks.length == 0) {
      return null;
    }
    Inventory betterInventory=plugin.getSaveAndLoadSystem().loadEmptyInventory(inventoryName);
    betterInventory.setContents(stacks);
    return betterInventory;
  }
}","@Override public Inventory importInventory(final String inventoryName,WorldGroup worldGroup,BetterEnderChest plugin) throws IOException {
  String groupName=worldGroup.getGroupName();
  if (plugin.isSpecialChest(inventoryName)) {
    return null;
  }
  MultiverseInventories multiverseInventories=(MultiverseInventories)Bukkit.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  WorldGroupProfile group=null;
  List<WorldGroupProfile> multiverseInventoriesGroups=multiverseInventories.getGroupManager().getGroups();
  for (  WorldGroupProfile aGroup : multiverseInventoriesGroups) {
    if (aGroup.getName().equalsIgnoreCase(groupName)) {
      group=aGroup;
      break;
    }
  }
  if (group == null) {
    plugin.log(""String_Node_Str"" + groupName + ""String_Node_Str""+ inventoryName+ ""String_Node_Str"",Level.WARNING);
    return null;
  }
  GlobalProfile globalProfile=multiverseInventories.getData().getGlobalProfile(inventoryName);
  if (globalProfile == null) {
    return null;
  }
  if (group.containsWorld(globalProfile.getWorld())) {
    return plugin.getInventoryImporters().getRegistration(""String_Node_Str"").importInventory(inventoryName,worldGroup,plugin);
  }
 else {
    ProfileType profileType;
    if (multiverseInventories.getMVIConfig().isUsingGameModeProfiles()) {
      profileType=ProfileTypes.forGameMode(Bukkit.getDefaultGameMode());
    }
 else {
      profileType=ProfileTypes.SURVIVAL;
    }
    PlayerProfile playerData=multiverseInventories.getGroupManager().getGroup(groupName).getPlayerData(profileType,Bukkit.getOfflinePlayer(inventoryName));
    if (playerData == null) {
      return null;
    }
    ItemStack[] stacks=playerData.get(Sharables.ENDER_CHEST);
    if (stacks == null || stacks.length == 0) {
      return null;
    }
    Inventory betterInventory=plugin.getSaveAndLoadSystem().loadEmptyInventory(inventoryName);
    betterInventory.setContents(stacks);
    return betterInventory;
  }
}"
51435,"@SuppressWarnings(""String_Node_Str"") public void handleDisabledSlots(InventoryClickEvent event){
  Inventory inventory=event.getInventory();
  BetterEnderInventoryHolder holder=(BetterEnderInventoryHolder)inventory.getHolder();
  if (holder.getDisabledSlots() == 0) {
    return;
  }
  if (event.isShiftClick()) {
    if (event.getSlot() == event.getRawSlot()) {
      return;
    }
    if (event.getCurrentItem() == null || event.getCurrentItem().getType().equals(Material.AIR)) {
      return;
    }
    event.setCancelled(true);
    ItemStack adding=event.getCurrentItem();
    for (int i=0; i < inventory.getSize() - holder.getDisabledSlots(); i++) {
      ItemStack inSlot=inventory.getItem(i);
      if (inSlot == null || inSlot.getType().equals(Material.AIR)) {
        inventory.setItem(i,adding);
        event.setCurrentItem(new ItemStack(Material.AIR,0));
        return;
      }
      if (inSlot.isSimilar(adding)) {
        int itemsToAdd=Math.min(inventory.getMaxStackSize(),inSlot.getMaxStackSize()) - inSlot.getAmount();
        itemsToAdd=Math.min(adding.getAmount(),itemsToAdd);
        if (itemsToAdd > 0) {
          inSlot.setAmount(inSlot.getAmount() + itemsToAdd);
          inventory.setItem(i,inSlot);
        }
        if (itemsToAdd >= adding.getAmount()) {
          event.setCurrentItem(new ItemStack(Material.AIR,0));
          return;
        }
 else {
          adding.setAmount(adding.getAmount() - itemsToAdd);
        }
      }
    }
    event.setCurrentItem(adding);
  }
 else {
    if (event.getSlot() != event.getRawSlot()) {
      return;
    }
    if (inventory.getSize() - event.getSlot() <= holder.getDisabledSlots()) {
      if (event.getCursor().getType() != Material.AIR) {
        if (event.getWhoClicked() instanceof Player) {
          ((Player)event.getWhoClicked()).updateInventory();
        }
        event.setCancelled(true);
      }
    }
  }
}","/** 
 * Makes sure that players cannot put items in disabled slots. Assumes that the inventory has   {@link BetterEnderInventoryHolder} as the holder.
 * @param event The inventory click event.
 */
protected void handleDisabledSlots(InventoryClickEvent event){
  Inventory inventory=event.getInventory();
  BetterEnderInventoryHolder holder=(BetterEnderInventoryHolder)inventory.getHolder();
  if (holder.getDisabledSlots() == 0) {
    return;
  }
  if (event.isShiftClick()) {
    handleDisabledSlotsShiftClick(event);
  }
 else {
    handleDisabledSlotsNormalClick(event);
  }
}"
51436,"@Override public void saveInventoryAsNBT(File file,Inventory inventory){
  try {
    BetterEnderInventoryHolder holder=(BetterEnderInventoryHolder)inventory.getHolder();
    NBTTagCompound baseTag=new NBTTagCompound();
    NBTTagList inventoryTag=new NBTTagList();
    baseTag.setByte(""String_Node_Str"",(byte)(inventory.getSize() / 9));
    baseTag.setByte(""String_Node_Str"",(byte)holder.getDisabledSlots());
    baseTag.setString(""String_Node_Str"",holder.getName());
    baseTag.setByte(""String_Node_Str"",(byte)(holder.isOwnerNameCaseCorrect() ? 1 : 0));
    for (int i=0; i < inventory.getSize(); i++) {
      ItemStack stack=inventory.getItem(i);
      if (stack != null && stack.getType() != Material.AIR) {
        NBTTagCompound item=new NBTTagCompound();
        item.setByte(""String_Node_Str"",(byte)i);
        inventoryTag.add(CraftItemStack.asNMSCopy(stack).save(item));
      }
    }
    baseTag.set(""String_Node_Str"",inventoryTag);
    file.getParentFile().mkdirs();
    FileOutputStream stream;
    file.createNewFile();
    stream=new FileOutputStream(file);
    NBTCompressedStreamTools.a(baseTag,stream);
    stream.flush();
    stream.close();
    throw new IOException(""String_Node_Str"");
  }
 catch (  IOException e) {
    plugin.log(""String_Node_Str"",Level.SEVERE);
    e.printStackTrace();
    plugin.getNMSHandlers().selectRegistration(null);
  }
catch (  Throwable t) {
    plugin.log(""String_Node_Str"",Level.SEVERE);
    t.printStackTrace();
  }
}","@Override public void saveInventoryAsNBT(File file,Inventory inventory){
  try {
    BetterEnderInventoryHolder holder=(BetterEnderInventoryHolder)inventory.getHolder();
    NBTTagCompound baseTag=new NBTTagCompound();
    NBTTagList inventoryTag=new NBTTagList();
    baseTag.setByte(""String_Node_Str"",(byte)(inventory.getSize() / 9));
    baseTag.setByte(""String_Node_Str"",(byte)holder.getDisabledSlots());
    baseTag.setString(""String_Node_Str"",holder.getName());
    baseTag.setByte(""String_Node_Str"",(byte)(holder.isOwnerNameCaseCorrect() ? 1 : 0));
    for (int i=0; i < inventory.getSize(); i++) {
      ItemStack stack=inventory.getItem(i);
      if (stack != null && stack.getType() != Material.AIR) {
        NBTTagCompound item=new NBTTagCompound();
        item.setByte(""String_Node_Str"",(byte)i);
        inventoryTag.add(CraftItemStack.asNMSCopy(stack).save(item));
      }
    }
    baseTag.set(""String_Node_Str"",inventoryTag);
    file.getParentFile().mkdirs();
    FileOutputStream stream;
    file.createNewFile();
    stream=new FileOutputStream(file);
    NBTCompressedStreamTools.a(baseTag,stream);
    stream.flush();
    stream.close();
  }
 catch (  IOException e) {
    plugin.log(""String_Node_Str"",Level.SEVERE);
    e.printStackTrace();
    plugin.getNMSHandlers().selectRegistration(null);
  }
catch (  Throwable t) {
    plugin.log(""String_Node_Str"",Level.SEVERE);
    t.printStackTrace();
  }
}"
51437,"/** 
 * Returns the import of the group, none if it has no import
 * @param group
 * @return
 */
public String getImport(String groupName){
  if (!imports.containsKey(groupName)) {
    return plugin.getConverter().none;
  }
  return imports.get(groupName);
}","/** 
 * Returns the import of the group, none if it has no import
 * @param group
 * @return
 */
public String getImport(String groupName){
  groupName=groupName.toLowerCase();
  if (!imports.containsKey(groupName)) {
    return plugin.getConverter().none;
  }
  return imports.get(groupName);
}"
51438,"/** 
 * Get the group this world belongs to, default if it isn't listed
 * @param world
 * @return
 */
public String getGroup(String worldName){
  String groupName=worlds.get(worldName);
  if (groupName == null) {
    groupName=BetterEnderChest.defaultGroupName;
  }
  return groupName;
}","/** 
 * Get the group this world belongs to, default if it isn't listed
 * @param world
 * @return
 */
public String getGroup(String worldName){
  worldName=worldName.toLowerCase();
  String groupName=worlds.get(worldName);
  if (groupName == null) {
    groupName=BetterEnderChest.defaultGroupName;
  }
  return groupName;
}"
51439,"/** 
 * Unloads the inventory from memory. Doesn't save! Also, make sure that no-one is viewing the inventory!
 * @param inventoryName
 */
public void unloadInventory(String inventoryName,String groupName){
  inventoryName=inventoryName.toLowerCase();
  if (inventories.containsKey(groupName)) {
    inventories.get(groupName).remove(inventoryName);
  }
}","/** 
 * Unloads the inventory from memory. Doesn't save! Also, make sure that no-one is viewing the inventory!
 * @param inventoryName
 */
public void unloadInventory(String inventoryName,String groupName){
  inventoryName=inventoryName.toLowerCase();
  groupName=groupName.toLowerCase();
  if (inventories.containsKey(groupName)) {
    inventories.get(groupName).remove(inventoryName);
  }
}"
51440,"public String toString(){
  StringBuilder builder=new StringBuilder();
  for (  String groupName : inventories.keySet()) {
    HashMap<String,Inventory> group=inventories.get(groupName);
    if (group.size() > 0) {
      builder.append(""String_Node_Str"" + groupName + ""String_Node_Str"");
      for (      String inventoryName : group.keySet()) {
        builder.append(((BetterEnderHolder)group.get(inventoryName).getHolder()).getOwnerName() + ""String_Node_Str"" + group.get(inventoryName).getSize() / 9 + ""String_Node_Str"");
        builder.append(',');
      }
    }
  }
  if (builder.length() == 0) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}","public String toString(){
  StringBuilder builder=new StringBuilder();
  for (  String groupName : inventories.keySet()) {
    HashMap<String,Inventory> group=inventories.get(groupName);
    if (group.size() > 0) {
      builder.append(""String_Node_Str"" + groupName + ""String_Node_Str"");
      for (      String inventoryName : group.keySet()) {
        builder.append(((BetterEnderHolder)group.get(inventoryName).getHolder()).getOwnerName());
        builder.append(',');
      }
    }
  }
  if (builder.length() == 0) {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}"
51441,"/** 
 * Get a inventory. If it does not exist, an empty inventory will be returned.
 * @param inventoryName
 * @return
 */
public Inventory getInventory(String inventoryName,String groupName){
  inventoryName=inventoryName.toLowerCase();
  if (inventories.containsKey(groupName) && inventories.get(groupName).containsKey(inventoryName)) {
    return inventories.get(groupName).get(inventoryName);
  }
 else {
    Inventory enderInventory=plugin.getSaveAndLoadSystem().loadInventory(inventoryName,groupName);
    if (!inventories.containsKey(groupName)) {
      inventories.put(groupName,new HashMap<String,Inventory>());
    }
    inventories.get(groupName).put(inventoryName,enderInventory);
    return enderInventory;
  }
}","/** 
 * Get a inventory. If it does not exist, an empty inventory will be returned.
 * @param inventoryName
 * @return
 */
public Inventory getInventory(String inventoryName,String groupName){
  inventoryName=inventoryName.toLowerCase();
  groupName=groupName.toLowerCase();
  if (inventories.containsKey(groupName) && inventories.get(groupName).containsKey(inventoryName)) {
    return inventories.get(groupName).get(inventoryName);
  }
 else {
    Inventory enderInventory=plugin.getSaveAndLoadSystem().loadInventory(inventoryName,groupName);
    if (!inventories.containsKey(groupName)) {
      inventories.put(groupName,new HashMap<String,Inventory>());
    }
    inventories.get(groupName).put(inventoryName,enderInventory);
    return enderInventory;
  }
}"
51442,"/** 
 * Set a inventory. Make sure the name of the inventory (((EnderHolder)inventory.getHolder()).getOwnerName()) matches the inventoryName.
 * @param inventoryName Name to save the inventory in the list AND the filename
 * @param inventory The new inventory
 */
public void setInventory(String inventoryName,String groupName,Inventory enderInventory){
  inventoryName=inventoryName.toLowerCase();
  if (!inventories.containsKey(groupName)) {
    inventories.put(groupName,new HashMap<String,Inventory>());
  }
  inventories.get(groupName).put(inventoryName,enderInventory);
}","/** 
 * Set a inventory. Make sure the name of the inventory (((EnderHolder)inventory.getHolder()).getOwnerName()) matches the inventoryName.
 * @param inventoryName Name to save the inventory in the list AND the filename
 * @param inventory The new inventory
 */
public void setInventory(String inventoryName,String groupName,Inventory enderInventory){
  inventoryName=inventoryName.toLowerCase();
  groupName=groupName.toLowerCase();
  if (!inventories.containsKey(groupName)) {
    inventories.put(groupName,new HashMap<String,Inventory>());
  }
  inventories.get(groupName).put(inventoryName,enderInventory);
}"
51443,"/** 
 * Save an inventory, but keep it in memory
 * @param inventoryName
 */
public void saveInventory(String inventoryName,String groupName){
  inventoryName=inventoryName.toLowerCase();
  if (!inventories.containsKey(groupName) || !inventories.get(groupName).containsKey(inventoryName)) {
    return;
  }
  plugin.getSaveAndLoadSystem().saveInventory(inventories.get(groupName).get(inventoryName),inventoryName,groupName);
}","/** 
 * Save an inventory, but keep it in memory
 * @param inventoryName
 */
public void saveInventory(String inventoryName,String groupName){
  inventoryName=inventoryName.toLowerCase();
  groupName=groupName.toLowerCase();
  if (!inventories.containsKey(groupName) || !inventories.get(groupName).containsKey(inventoryName)) {
    return;
  }
  plugin.getSaveAndLoadSystem().saveInventory(inventories.get(groupName).get(inventoryName),inventoryName,groupName);
}"
51444,"/** 
 * Gets whether the string is a valid chest drop
 * @param drop
 * @return
 */
public boolean isValidChestDrop(String drop){
  if (chestDrop.equals(""String_Node_Str""))   return true;
  if (chestDrop.equals(""String_Node_Str""))   return true;
  if (chestDrop.equals(""String_Node_Str""))   return true;
  if (chestDrop.equals(""String_Node_Str""))   return true;
  if (chestDrop.equals(""String_Node_Str""))   return true;
  if (chestDrop.equals(""String_Node_Str""))   return true;
  if (chestDrop.equals(""String_Node_Str""))   return true;
  return false;
}","/** 
 * Gets whether the string is a valid chest drop
 * @param drop
 * @return
 */
public boolean isValidChestDrop(String drop){
  if (drop.equals(""String_Node_Str""))   return true;
  if (drop.equals(""String_Node_Str""))   return true;
  if (drop.equals(""String_Node_Str""))   return true;
  if (drop.equals(""String_Node_Str""))   return true;
  if (drop.equals(""String_Node_Str""))   return true;
  if (drop.equals(""String_Node_Str""))   return true;
  if (drop.equals(""String_Node_Str""))   return true;
  return false;
}"
51445,"private void convertConfig(){
  getConfig().set(""String_Node_Str"",getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  getConfig().set(""String_Node_Str"",getConfig().getInt(""String_Node_Str"",0));
  getConfig().set(""String_Node_Str"",getConfig().getBoolean(""String_Node_Str"",false));
  getConfig().set(""String_Node_Str"",null);
  getConfig().set(""String_Node_Str"",null);
  getConfig().set(""String_Node_Str"",null);
}","private void convertConfig(){
  getConfig().set(""String_Node_Str"",getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  getConfig().set(""String_Node_Str"",getConfig().getInt(""String_Node_Str"",3));
  getConfig().set(""String_Node_Str"",getConfig().getBoolean(""String_Node_Str"",false));
  getConfig().set(""String_Node_Str"",null);
  getConfig().set(""String_Node_Str"",null);
  getConfig().set(""String_Node_Str"",null);
}"
51446,"@Override public void startElement(Element element){
  if (element instanceof JourneyHeaderElement) {
    JourneyHeaderElement journey=(JourneyHeaderElement)element;
    AgencyAndId journeyId=new AgencyAndId(journey.getOperatorId(),journey.getJourneyIdentifier());
    List<JourneyHeaderElement> journies=_journeysById.get(journeyId);
    if (journies == null) {
      journies=new ArrayList<JourneyHeaderElement>();
      _journeysById.put(journeyId,journies);
    }
    journies.add(journey);
    AgencyAndId routeId=getRouteIdForJourney(journey);
    RouteMetadata metadata=getMetadataForRouteId(routeId);
    metadata.addDirection(journey.getRouteDirection());
  }
 else   if (element instanceof LocationElement) {
    LocationElement location=(LocationElement)element;
    _locationById.put(location.getLocationId(),location);
  }
 else   if (element instanceof AdditionalLocationElement) {
    AdditionalLocationElement location=(AdditionalLocationElement)element;
    _additionalLocationById.put(location.getLocationId(),location);
  }
 else   if (element instanceof VehicleTypeElement) {
    VehicleTypeElement vehicle=(VehicleTypeElement)element;
    _vehicleTypesById.put(vehicle.getId(),vehicle);
  }
 else   if (element instanceof RouteDescriptionElement) {
    RouteDescriptionElement route=(RouteDescriptionElement)element;
    AgencyAndId id=new AgencyAndId(route.getOperatorId(),route.getRouteNumber());
    RouteMetadata metadata=getMetadataForRouteId(id);
    metadata.addRouteDescription(route);
  }
 else   if (element instanceof OperatorElement) {
    OperatorElement operator=(OperatorElement)element;
    OperatorElement existing=_operatorsById.put(operator.getOperatorId(),operator);
    if (existing != null) {
      _log.info(""String_Node_Str"");
    }
  }
 else   if (element instanceof NationalExpressLocationNameElement) {
    NationalExpressLocationNameElement nxNameElement=(NationalExpressLocationNameElement)element;
    _nxLocationNamesById.put(nxNameElement.getLocationId(),nxNameElement);
  }
}","@Override public void startElement(Element element){
  if (element instanceof JourneyHeaderElement) {
    JourneyHeaderElement journey=(JourneyHeaderElement)element;
    AgencyAndId journeyId=new AgencyAndId(journey.getOperatorId(),journey.getJourneyIdentifier());
    List<JourneyHeaderElement> journies=_journeysById.get(journeyId);
    if (journies == null) {
      journies=new ArrayList<JourneyHeaderElement>();
      _journeysById.put(journeyId,journies);
    }
    journies.add(journey);
    AgencyAndId routeId=getRouteIdForJourney(journey);
    RouteMetadata metadata=getMetadataForRouteId(routeId);
    metadata.addDirection(journey.getRouteDirection());
  }
 else   if (element instanceof LocationElement) {
    LocationElement location=(LocationElement)element;
    _locationById.put(location.getLocationId(),location);
  }
 else   if (element instanceof AdditionalLocationElement) {
    AdditionalLocationElement location=(AdditionalLocationElement)element;
    _additionalLocationById.put(location.getLocationId(),location);
  }
 else   if (element instanceof VehicleTypeElement) {
    VehicleTypeElement vehicle=(VehicleTypeElement)element;
    _vehicleTypesById.put(vehicle.getId(),vehicle);
  }
 else   if (element instanceof RouteDescriptionElement) {
    RouteDescriptionElement route=(RouteDescriptionElement)element;
    AgencyAndId id=new AgencyAndId(route.getOperatorId(),route.getOperatorId() + ""String_Node_Str"" + route.getRouteNumber());
    RouteMetadata metadata=getMetadataForRouteId(id);
    metadata.addRouteDescription(route);
  }
 else   if (element instanceof OperatorElement) {
    OperatorElement operator=(OperatorElement)element;
    OperatorElement existing=_operatorsById.put(operator.getOperatorId(),operator);
    if (existing != null) {
      _log.info(""String_Node_Str"");
    }
  }
 else   if (element instanceof NationalExpressLocationNameElement) {
    NationalExpressLocationNameElement nxNameElement=(NationalExpressLocationNameElement)element;
    _nxLocationNamesById.put(nxNameElement.getLocationId(),nxNameElement);
  }
}"
51447,"private Route getRouteForJourney(JourneyHeaderElement journey){
  AgencyAndId routeId=getRouteIdForJourney(journey);
  Route route=_dao.getRouteForId(routeId);
  if (route == null) {
    route=new Route();
    route.setAgency(getAgencyForId(routeId.getAgencyId()));
    route.setId(routeId);
    route.setShortName(routeId.getId());
    route.setType(getRouteTypeForJourney(journey));
    _dao.saveEntity(route);
  }
  return route;
}","private Route getRouteForJourney(JourneyHeaderElement journey){
  AgencyAndId routeId=getRouteIdForJourney(journey);
  Route route=_dao.getRouteForId(routeId);
  if (route == null) {
    route=new Route();
    route.setAgency(getAgencyForId(routeId.getAgencyId()));
    route.setId(routeId);
    route.setShortName(journey.getRouteIdentifier());
    route.setType(getRouteTypeForJourney(journey));
    RouteMetadata metaData=_routeMetadataById.get(routeId);
    if (metaData != null) {
      System.currentTimeMillis();
    }
    _dao.saveEntity(route);
  }
  return route;
}"
51448,"public void addRouteDescription(RouteDescriptionElement route){
  RouteDescriptionElement existing=_routeDescriptionsByDirection.put(route.getRouteDescription(),route);
  if (existing != null) {
    _log.warn(""String_Node_Str"");
  }
}","public void addRouteDescription(RouteDescriptionElement route){
  RouteDescriptionElement existing=_routeDescriptionsByDirection.put(route.getRouteDirection(),route);
  if (existing != null) {
    _log.warn(""String_Node_Str"");
  }
}"
51449,"private ResourceImpl createResource(URL url,String uri) throws BundleException, IOException {
  Map<String,String> headers=getHeaders(url);
  try {
    return ResourceBuilder.build(uri,headers);
  }
 catch (  BundleException e) {
    throw new BundleException(""String_Node_Str"" + uri + ""String_Node_Str""+ e.getMessage(),e);
  }
}","private ResourceImpl createResource(URL url,String uri) throws BundleException, IOException {
  Map<String,String> headers=getHeaders(url);
  try {
    ResourceImpl resource=ResourceBuilder.build(uri,headers);
    useResourceRelativeUri(resource);
    return resource;
  }
 catch (  BundleException e) {
    throw new BundleException(""String_Node_Str"" + uri + ""String_Node_Str""+ e.getMessage(),e);
  }
}"
51450,"/** 
 * Upload an artifact from the given URL.
 * @param url the URL of the artifact.
 * @throws Exception in case of upload failure.
 */
public void upload(URL url) throws Exception {
  LOGGER.debug(""String_Node_Str"",url);
  String artifactName=""String_Node_Str"" + System.currentTimeMillis();
  Path temp=getLocationPath().resolve(artifactName);
  try (InputStream is=url.openStream()){
    Files.copy(is,temp);
  }
   ResourceImpl resource=createResource(temp.toUri().toURL());
  Path destination=getLocationPath().resolve(ResolverUtil.getSymbolicName(resource) + ""String_Node_Str"" + ResolverUtil.getVersion(resource)+ ""String_Node_Str"");
  if (Files.exists(destination)) {
    Files.delete(temp);
    LOGGER.warn(""String_Node_Str"",url);
    throw new IllegalArgumentException(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
  }
  Files.move(temp,destination);
  resource=createResource(destination.toUri().toURL());
  addResource(resource);
  generateRepositoryXml();
}","/** 
 * Upload an artifact from the given URL.
 * @param url the URL of the artifact.
 * @throws Exception in case of upload failure.
 */
public void upload(URL url) throws Exception {
  LOGGER.debug(""String_Node_Str"",url);
  String artifactName=""String_Node_Str"" + System.currentTimeMillis();
  Path temp=getLocationPath().resolve(artifactName);
  try (InputStream is=url.openStream()){
    Files.copy(is,temp);
  }
   ResourceImpl resource=createResource(temp.toUri().toURL());
  Path destination=getLocationPath().resolve(ResolverUtil.getSymbolicName(resource) + ""String_Node_Str"" + ResolverUtil.getVersion(resource)+ ""String_Node_Str"");
  if (Files.exists(destination)) {
    Files.delete(temp);
    LOGGER.warn(""String_Node_Str"",url);
    throw new IllegalArgumentException(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
  }
  Files.move(temp,destination);
  resource=createResource(destination.toUri().toURL());
  addResources(Collections.<Resource>singletonList(resource));
}"
51451,"/** 
 * Recursive method to traverse all files in the repository.
 * @param entry the
 * @throws Exception
 */
private void scan(File entry) throws Exception {
  if (entry.isDirectory()) {
    File[] children=entry.listFiles();
    if (children != null) {
      for (      File child : children) {
        scan(child);
      }
    }
  }
 else {
    try {
      URL bundleUrl=entry.toURI().toURL();
      if (isPotentialBundle(bundleUrl.toString())) {
        ResourceImpl resource=createResource(bundleUrl);
        addResource(resource);
      }
    }
 catch (    BundleException e) {
      LOGGER.warn(e.getMessage());
    }
  }
}","/** 
 * Recursive method to traverse all files in the repository.
 * @param entry the
 * @throws Exception
 */
private void scan(File entry,List<Resource> resources) throws Exception {
  if (entry.isDirectory()) {
    File[] children=entry.listFiles();
    if (children != null) {
      for (      File child : children) {
        scan(child,resources);
      }
    }
  }
 else {
    try {
      URL bundleUrl=entry.toURI().toURL();
      if (isPotentialBundle(bundleUrl.toString())) {
        ResourceImpl resource=createResource(bundleUrl);
        resources.add(resource);
      }
    }
 catch (    BundleException e) {
      LOGGER.warn(e.getMessage());
    }
  }
}"
51452,"/** 
 * Proxy a HTTP URL locally.
 * @param url    the HTTP URL to proxy.
 * @param filter regex filter. Only artifacts URL matching the filter will be considered.
 * @throws Exception in case of proxy failure.
 */
private void proxyHttp(String url,String filter) throws Exception {
  LOGGER.debug(""String_Node_Str"",url);
  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
  try (InputStream is=conn.getInputStream()){
    String type=conn.getContentType();
    if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
      try {
        if ((filter == null) || (url.matches(filter))) {
          Resource resource=createResource(new URL(url));
          repository.addResource(resource);
          repository.setIncrement(System.currentTimeMillis());
        }
      }
 catch (      BundleException e) {
        LOGGER.warn(e.getMessage());
      }
    }
 else {
      try {
        Document document=Jsoup.connect(url).get();
        for (        Element link : document.select(""String_Node_Str"")) {
          String absoluteHref=link.attr(""String_Node_Str"");
          if (absoluteHref.startsWith(url)) {
            proxyHttp(absoluteHref,filter);
          }
        }
      }
 catch (      UnsupportedMimeTypeException e) {
      }
    }
  }
 }","/** 
 * Proxy a HTTP URL locally.
 * @param url    the HTTP URL to proxy.
 * @param filter regex filter. Only artifacts URL matching the filter will be considered.
 * @throws Exception in case of proxy failure.
 */
private void proxyHttp(String url,String filter,List<Resource> resources) throws Exception {
  LOGGER.debug(""String_Node_Str"",url);
  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
  try (InputStream is=conn.getInputStream()){
    String type=conn.getContentType();
    if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
      try {
        if ((filter == null) || (url.matches(filter))) {
          Resource resource=createResource(new URL(url));
          resources.add(resource);
        }
      }
 catch (      BundleException e) {
        LOGGER.warn(e.getMessage());
      }
    }
 else {
      try {
        Document document=Jsoup.connect(url).get();
        for (        Element link : document.select(""String_Node_Str"")) {
          String absoluteHref=link.attr(""String_Node_Str"");
          if (absoluteHref.startsWith(url)) {
            proxyHttp(absoluteHref,filter,resources);
          }
        }
      }
 catch (      UnsupportedMimeTypeException e) {
      }
    }
  }
 }"
51453,"/** 
 * Convert the Resource absolute URI to an URI relative to the repository one.
 * @param resource the Resource to manipulate.
 * @throws Exception in cave of URI conversion failure.
 */
private void useResourceRelativeUri(ResourceImpl resource) throws Exception {
  for (  Capability cap : resource.getCapabilities(null)) {
    if (cap.getNamespace().equals(CONTENT_NAMESPACE)) {
      String resourceURI=cap.getAttributes().get(CAPABILITY_URL_ATTRIBUTE).toString();
      String locationURI=""String_Node_Str"" + getLocation();
      LOGGER.debug(""String_Node_Str"",resourceURI,locationURI);
      if (resourceURI.startsWith(locationURI)) {
        resourceURI=resourceURI.substring(locationURI.length() + 1);
        LOGGER.debug(""String_Node_Str"" + resourceURI);
        cap.getAttributes().put(CAPABILITY_URL_ATTRIBUTE,resourceURI);
      }
      break;
    }
  }
}","/** 
 * Convert the Resource absolute URI to an URI relative to the repository one.
 * @param resource the Resource to manipulate.
 */
private void useResourceRelativeUri(ResourceImpl resource){
  for (  Capability cap : resource.getCapabilities(null)) {
    if (cap.getNamespace().equals(CONTENT_NAMESPACE)) {
      String resourceURI=cap.getAttributes().get(CAPABILITY_URL_ATTRIBUTE).toString();
      String locationURI=""String_Node_Str"" + getLocation();
      LOGGER.debug(""String_Node_Str"",resourceURI,locationURI);
      if (resourceURI.startsWith(locationURI)) {
        resourceURI=resourceURI.substring(locationURI.length() + 1);
        LOGGER.debug(""String_Node_Str"" + resourceURI);
        cap.getAttributes().put(CAPABILITY_URL_ATTRIBUTE,resourceURI);
      }
      break;
    }
  }
}"
51454,"public CaveRepositoryImpl(String name,String location,boolean scan) throws Exception {
  super();
  this.name=name;
  this.location=location;
  createRepositoryDirectory();
  if (scan) {
    scan();
  }
 else   if (!Files.exists(getRepositoryXmlFile())) {
    generateRepositoryXml();
  }
}","public CaveRepositoryImpl(String name,String location,boolean scan) throws Exception {
  super();
  this.name=name;
  this.location=location;
  createRepositoryDirectory();
  if (scan) {
    scan();
  }
 else   if (!Files.exists(getRepositoryXmlFile())) {
    try (Writer writer=Files.newBufferedWriter(getRepositoryXmlFile(),StandardCharsets.UTF_8)){
      repository.writeRepository(writer);
    }
   }
}"
51455,"/** 
 * Populate the Cave repository using a filesystem directory.
 * @param filesystem the ""source"" directory.
 * @param filter     regex filter. Only artifacts URL matching the filter will be considered.
 * @param update     if true, the resources are added into the OBR metadata, false else.
 * @throws Exception in case of populate failure.
 */
private void populateFromFilesystem(File filesystem,String filter,boolean update) throws Exception {
  LOGGER.debug(""String_Node_Str"",filesystem.getAbsolutePath());
  if (filesystem.isDirectory()) {
    File[] children=filesystem.listFiles();
    if (children != null) {
      for (      File child : children) {
        populateFromFilesystem(child,filter,update);
      }
    }
  }
 else {
    try {
      if ((filter == null) || (filesystem.toURI().toURL().toString().matches(filter))) {
        ResourceImpl resource=createResource(filesystem.toURI().toURL());
        Path destination=getLocationPath().resolve(filesystem.getName());
        LOGGER.debug(""String_Node_Str"",filesystem.getAbsolutePath(),destination.toAbsolutePath().toString());
        Files.copy(filesystem.toPath(),destination);
        if (update) {
          resource=createResource(destination.toUri().toURL());
          LOGGER.debug(""String_Node_Str"",ResolverUtil.getSymbolicName(resource),ResolverUtil.getVersion(resource));
          addResource(resource);
        }
      }
    }
 catch (    BundleException e) {
      LOGGER.warn(e.getMessage());
    }
  }
}","/** 
 * Populate the Cave repository using a filesystem directory.
 * @param filesystem the ""source"" directory.
 * @param filter     regex filter. Only artifacts URL matching the filter will be considered.
 * @param update     if true, the resources are added into the OBR metadata, false else.
 * @throws Exception in case of populate failure.
 */
private void populateFromFilesystem(File filesystem,String filter,boolean update,List<Resource> resources) throws Exception {
  LOGGER.debug(""String_Node_Str"",filesystem.getAbsolutePath());
  if (filesystem.isDirectory()) {
    File[] children=filesystem.listFiles();
    if (children != null) {
      for (      File child : children) {
        populateFromFilesystem(child,filter,update,resources);
      }
    }
  }
 else {
    try {
      if ((filter == null) || (filesystem.toURI().toURL().toString().matches(filter))) {
        ResourceImpl resource=createResource(filesystem.toURI().toURL());
        Path destination=getLocationPath().resolve(filesystem.getName());
        LOGGER.debug(""String_Node_Str"",filesystem.getAbsolutePath(),destination.toAbsolutePath().toString());
        Files.copy(filesystem.toPath(),destination);
        if (update) {
          resource=createResource(destination.toUri().toURL());
          LOGGER.debug(""String_Node_Str"",ResolverUtil.getSymbolicName(resource),ResolverUtil.getVersion(resource));
          resources.add(resource);
        }
      }
    }
 catch (    BundleException e) {
      LOGGER.warn(e.getMessage());
    }
  }
}"
51456,"/** 
 * Get the File object of the OBR repository.xml file.
 * @return the File corresponding to the OBR repository.xml.
 * @throws Exception
 */
private Path getRepositoryXmlFile() throws Exception {
  return getLocationPath().resolve(""String_Node_Str"");
}","/** 
 * Get the File object of the OBR repository.xml file.
 * @return the File corresponding to the OBR repository.xml.
 * @throws Exception
 */
private Path getRepositoryXmlFile(){
  return getLocationPath().resolve(""String_Node_Str"");
}"
51457,"/** 
 * Proxy a local filesystem (folder).
 * @param entry  the filesystem to proxyFilesystem.
 * @param filter regex filter. Only the artifacts URL matching the filter will be considered.
 * @throws Exception in case of proxyFilesystem failure
 */
private void proxyFilesystem(File entry,String filter) throws Exception {
  LOGGER.debug(""String_Node_Str"",entry.getAbsolutePath());
  if (entry.isDirectory()) {
    File[] children=entry.listFiles();
    if (children != null) {
      for (      File child : children) {
        proxyFilesystem(child,filter);
      }
    }
  }
 else {
    try {
      if ((filter == null) || (entry.toURI().toURL().toString().matches(filter))) {
        Resource resource=createResource(entry.toURI().toURL());
        repository.addResource(resource);
        repository.setIncrement(System.currentTimeMillis());
      }
    }
 catch (    BundleException e) {
      LOGGER.warn(e.getMessage());
    }
  }
}","/** 
 * Proxy a local filesystem (folder).
 * @param entry  the filesystem to proxyFilesystem.
 * @param filter regex filter. Only the artifacts URL matching the filter will be considered.
 * @throws Exception in case of proxyFilesystem failure
 */
private void proxyFilesystem(File entry,String filter,List<Resource> resources) throws Exception {
  LOGGER.debug(""String_Node_Str"",entry.getAbsolutePath());
  if (entry.isDirectory()) {
    File[] children=entry.listFiles();
    if (children != null) {
      for (      File child : children) {
        proxyFilesystem(child,filter,resources);
      }
    }
  }
 else {
    try {
      if ((filter == null) || (entry.toURI().toURL().toString().matches(filter))) {
        Resource resource=createResource(entry.toURI().toURL());
        resources.add(resource);
      }
    }
 catch (    BundleException e) {
      LOGGER.warn(e.getMessage());
    }
  }
}"
51458,"/** 
 * Populate the Cave repository using the given URL.
 * @param url    the ""source"" HTTP URL.
 * @param filter regex filter. Only artifacts URL matching the filter will be considered.
 * @param update true if the OBR metadata should be updated, false else.
 * @throws Exception in case of populate failure.
 */
private void populateFromHttp(String url,String filter,boolean update) throws Exception {
  LOGGER.debug(""String_Node_Str"",url);
  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
  try (InputStream is=conn.getInputStream()){
    String type=conn.getContentType();
    if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
      try {
        if ((filter == null) || (url.matches(filter))) {
          ResourceImpl resource=createResource(new URL(url));
          LOGGER.debug(""String_Node_Str"",url);
          int index=url.lastIndexOf(""String_Node_Str"");
          if (index > 0) {
            url=url.substring(index + 1);
          }
          Path destination=getLocationPath().resolve(url);
          Files.copy(is,destination);
          if (update) {
            resource=createResource(destination.toUri().toURL());
            LOGGER.debug(""String_Node_Str"",ResolverUtil.getSymbolicName(resource),ResolverUtil.getVersion(resource));
            addResource(resource);
          }
        }
      }
 catch (      BundleException e) {
        LOGGER.warn(e.getMessage());
      }
    }
 else {
      Document document=Jsoup.parse(is,""String_Node_Str"",url);
      for (      Element link : document.select(""String_Node_Str"")) {
        String absoluteHref=link.attr(""String_Node_Str"");
        if (absoluteHref.startsWith(url)) {
          populateFromHttp(absoluteHref,filter,update);
        }
      }
    }
  }
 }","/** 
 * Populate the Cave repository using the given URL.
 * @param url    the ""source"" HTTP URL.
 * @param filter regex filter. Only artifacts URL matching the filter will be considered.
 * @param update true if the OBR metadata should be updated, false else.
 * @throws Exception in case of populate failure.
 */
private void populateFromHttp(String url,String filter,boolean update,List<Resource> resources) throws Exception {
  LOGGER.debug(""String_Node_Str"",url);
  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
  try (InputStream is=conn.getInputStream()){
    String type=conn.getContentType();
    if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
      try {
        if ((filter == null) || (url.matches(filter))) {
          ResourceImpl resource=createResource(new URL(url));
          LOGGER.debug(""String_Node_Str"",url);
          int index=url.lastIndexOf(""String_Node_Str"");
          if (index > 0) {
            url=url.substring(index + 1);
          }
          Path destination=getLocationPath().resolve(url);
          Files.copy(is,destination);
          if (update) {
            resource=createResource(destination.toUri().toURL());
            LOGGER.debug(""String_Node_Str"",ResolverUtil.getSymbolicName(resource),ResolverUtil.getVersion(resource));
            resources.add(resource);
          }
        }
      }
 catch (      BundleException e) {
        LOGGER.warn(e.getMessage());
      }
    }
 else {
      Document document=Jsoup.parse(is,""String_Node_Str"",url);
      for (      Element link : document.select(""String_Node_Str"")) {
        String absoluteHref=link.attr(""String_Node_Str"");
        if (absoluteHref.startsWith(url)) {
          populateFromHttp(absoluteHref,filter,update,resources);
        }
      }
    }
  }
 }"
51459,"public UserDetails loadUserByUsername(final String userName) throws UsernameNotFoundException, DataAccessException {
  return new DummyUserDetails(userName);
}","public UserDetails loadUserByUsername(final String userName) throws UsernameNotFoundException {
  return new DummyUserDetails(userName);
}"
51460,"public synchronized TableModel put(final DataCacheKey key,final TableModel model){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  final IPentahoSession session=PentahoSessionHolder.getSession();
  if (cacheManager != null) {
    if (model.getRowCount() > maximumRows) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + model.getRowCount() + ""String_Node_Str""+ maximumRows+ ""String_Node_Str"");
      }
      return model;
    }
    if (CachableTableModel.isSafeToCache(model) == false) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      return model;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + session.getId() + ""String_Node_Str""+ model.getColumnCount()+ ""String_Node_Str"");
    }
    final TableModel cacheModel=new CachableTableModel(model);
    cacheManager.putInRegionCache(CACHE_NAME,new CompositeKey(session.getId(),key),cacheModel);
  }
  return model;
}","public synchronized TableModel put(final DataCacheKey key,final TableModel model){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
  }
  final IPentahoSession session=PentahoSessionHolder.getSession();
  if (cacheManager != null) {
    if (model.getRowCount() > maximumRows) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + model.getRowCount() + ""String_Node_Str""+ maximumRows+ ""String_Node_Str"");
      }
      return model;
    }
    if (CachableTableModel.isSafeToCache(model) == false) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
      return model;
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + session.getId() + ""String_Node_Str""+ model.getColumnCount()+ ""String_Node_Str"");
    }
    final TableModel cacheModel=new CachableTableModel(model);
    cacheManager.putInRegionCache(CACHE_NAME,new CompositeKey(session.getId(),key),cacheModel);
    return cacheModel;
  }
  return model;
}"
51461,"@Override protected void setUp() throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",SOLUTION_PATH + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  tmp=new File(""String_Node_Str"");
  tmp.mkdirs();
  microPlatform=new MicroPlatform(SOLUTION_PATH);
  final IUnifiedRepository repository=new FileSystemBackedUnifiedRepository(SOLUTION_PATH);
  microPlatform.defineInstance(IUnifiedRepository.class,repository);
  Assert.assertNotNull(new RepositoryUtils(repository).getFolder(""String_Node_Str"",true,true,null));
  Assert.assertNotNull(new RepositoryUtils(repository).getFolder(""String_Node_Str"",true,true,null));
  Assert.assertNotNull(new RepositoryUtils(repository).getFolder(""String_Node_Str"",true,true,null));
  microPlatform.define(ISolutionEngine.class,SolutionEngine.class);
  microPlatform.define(PentahoNameGenerator.class,TempDirectoryNameGenerator.class);
  microPlatform.define(IUserRoleListService.class,MockUserRoleListService.class);
  microPlatform.defineInstance(""String_Node_Str"",new SQLConnection());
  microPlatform.defineInstance(IDBDatasourceService.class,new JndiDatasourceService());
  microPlatform.define(IMondrianCatalogService.class,MondrianCatalogHelper.class,IPentahoDefinableObjectFactory.Scope.GLOBAL);
  microPlatform.define(IServiceManager.class,DefaultServiceManager.class,IPentahoDefinableObjectFactory.Scope.GLOBAL);
  microPlatform.define(IPluginProvider.class,SystemPathXmlPluginProvider.class);
  microPlatform.start();
  IPentahoSession session=new StandaloneSession(""String_Node_Str"");
  PentahoSessionHolder.setSession(session);
}","@Override protected void setUp() throws Exception {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",SOLUTION_PATH + ""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  ClassicEngineBoot.getInstance().start();
  tmp=new File(""String_Node_Str"");
  tmp.mkdirs();
  microPlatform=new MicroPlatform(SOLUTION_PATH);
  final IUnifiedRepository repository=new FileSystemBackedUnifiedRepository(SOLUTION_PATH);
  microPlatform.defineInstance(IUnifiedRepository.class,repository);
  Assert.assertNotNull(new RepositoryUtils(repository).getFolder(""String_Node_Str"",true,true,null));
  Assert.assertNotNull(new RepositoryUtils(repository).getFolder(""String_Node_Str"",true,true,null));
  Assert.assertNotNull(new RepositoryUtils(repository).getFolder(""String_Node_Str"",true,true,null));
  microPlatform.define(ISolutionEngine.class,SolutionEngine.class);
  microPlatform.define(PentahoNameGenerator.class,TempDirectoryNameGenerator.class);
  microPlatform.define(IUserRoleListService.class,MockUserRoleListService.class);
  microPlatform.defineInstance(""String_Node_Str"",new SQLConnection());
  microPlatform.defineInstance(IDBDatasourceService.class,new JndiDatasourceService());
  microPlatform.define(IMondrianCatalogService.class,MondrianCatalogHelper.class,IPentahoDefinableObjectFactory.Scope.GLOBAL);
  microPlatform.define(IServiceManager.class,DefaultServiceManager.class,IPentahoDefinableObjectFactory.Scope.GLOBAL);
  microPlatform.define(IPluginProvider.class,SystemPathXmlPluginProvider.class);
  microPlatform.start();
  IPentahoSession session=new StandaloneSession(""String_Node_Str"");
  PentahoSessionHolder.setSession(session);
}"
51462,"protected FastHtmlContentItems computeContentItems(final OutputStream outputStream) throws ReportProcessingException, ContentIOException {
  IUnifiedRepository repo=PentahoSystem.get(IUnifiedRepository.class);
  final RepositoryFile outputFolder=repo.getFile(jcrOutputPath);
  final ReportContentRepository repository=new ReportContentRepository(outputFolder);
  final ContentLocation dataLocation=repository.getRoot();
  final PentahoNameGenerator dataNameGenerator=createPentahoNameGenerator();
  dataNameGenerator.initialize(dataLocation,isSafeToDelete());
  final StreamRepository targetRepository=new StreamRepository(null,outputStream,""String_Node_Str"");
  final ContentLocation targetRoot=targetRepository.getRoot();
  FastHtmlContentItems contentItems=new FastHtmlContentItems();
  contentItems.setContentWriter(targetRoot,new DefaultNameGenerator(targetRoot,""String_Node_Str"",""String_Node_Str""));
  contentItems.setDataWriter(dataLocation,dataNameGenerator);
  contentItems.setUrlRewriter(new PentahoURLRewriter(getContentHandlerPattern(),true));
  return super.computeContentItems(outputStream);
}","protected FastHtmlContentItems computeContentItems(final OutputStream outputStream) throws ReportProcessingException, ContentIOException {
  IUnifiedRepository repo=PentahoSystem.get(IUnifiedRepository.class);
  final RepositoryFile outputFolder=repo.getFile(jcrOutputPath);
  final ReportContentRepository repository=new ReportContentRepository(outputFolder);
  final ContentLocation dataLocation=repository.getRoot();
  final PentahoNameGenerator dataNameGenerator=createPentahoNameGenerator();
  dataNameGenerator.initialize(dataLocation,isSafeToDelete());
  final StreamRepository targetRepository=new StreamRepository(null,outputStream,""String_Node_Str"");
  final ContentLocation targetRoot=targetRepository.getRoot();
  FastHtmlContentItems contentItems=new FastHtmlContentItems();
  contentItems.setContentWriter(targetRoot,new DefaultNameGenerator(targetRoot,""String_Node_Str"",""String_Node_Str""));
  contentItems.setDataWriter(dataLocation,dataNameGenerator);
  contentItems.setUrlRewriter(new PentahoURLRewriter(getContentHandlerPattern(),true));
  return contentItems;
}"
51463,"public void createReportContent(final OutputStream outputStream,final Serializable fileId,final String path,final boolean forceDefaultOutputTarget) throws Exception {
  final long start=System.currentTimeMillis();
  final Map<String,Object> inputs=contentGenerator.createInputs();
  String objID=getObjectIdFromContent(fileId);
  AuditHelper.audit(userSession.getId(),userSession.getName(),objID,contentGenerator.getObjectName(),getClass().getName(),MessageTypes.INSTANCE_START,contentGenerator.getInstanceId(),""String_Node_Str"",0,contentGenerator);
  String result=MessageTypes.INSTANCE_END;
  StagingHandler reportStagingHandler=null;
  try {
    final Object rawSessionId=inputs.get(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID);
    if ((rawSessionId instanceof String) == false || ""String_Node_Str"".equals(rawSessionId)) {
      inputs.put(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID,UUIDUtil.getUUIDAsString());
    }
    final SimpleReportingComponent reportComponent=new SimpleReportingComponent();
    reportComponent.setReportFileId(fileId);
    reportComponent.setPaginateOutput(true);
    reportComponent.setForceDefaultOutputTarget(forceDefaultOutputTarget);
    reportComponent.setDefaultOutputTarget(HtmlTableModule.TABLE_HTML_PAGE_EXPORT_TYPE);
    if (path.endsWith(""String_Node_Str"")) {
      reportComponent.setForceUnlockPreferredOutput(true);
    }
    reportComponent.setInputs(inputs);
    final MasterReport report=reportComponent.getReport();
    final StagingMode stagingMode=getStagingMode(inputs,report);
    reportStagingHandler=new StagingHandler(outputStream,stagingMode,this.userSession);
    if (reportStagingHandler.isFullyBuffered()) {
      report.getReportConfiguration().setConfigProperty(FORCED_BUFFERED_WRITING,""String_Node_Str"");
    }
    reportComponent.setOutputStream(reportStagingHandler.getStagingOutputStream());
    final IUnifiedRepository repository=PentahoSystem.get(IUnifiedRepository.class,userSession);
    final RepositoryFile file=repository.getFileById(fileId);
    final String mimeType=reportComponent.getMimeType();
    final String outputTarget=reportComponent.getComputedOutputTarget();
    if (HtmlTableModule.TABLE_HTML_PAGE_EXPORT_TYPE.equals(outputTarget) && reportComponent.getAcceptedPage() < 0) {
      reportComponent.setAcceptedPage(0);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(Messages.getInstance().getString(""String_Node_Str"",mimeType,outputTarget,String.valueOf(reportComponent.getAcceptedPage())));
    }
    HttpServletResponse response=null;
    boolean streamToBrowser=false;
    final IParameterProvider pathProviders=contentGenerator.getParameterProviders().get(""String_Node_Str"");
    if (pathProviders != null) {
      final Object httpResponse=pathProviders.getParameter(""String_Node_Str"");
      if (httpResponse instanceof HttpServletResponse) {
        response=(HttpServletResponse)httpResponse;
        if (reportStagingHandler.getStagingMode() == StagingMode.THRU) {
          final OutputStream respOutputStream=response.getOutputStream();
          if (respOutputStream == outputStream) {
            streamToBrowser=true;
          }
        }
      }
    }
    final String extension=MimeHelper.getExtension(mimeType);
    String filename=file.getName();
    if (filename.lastIndexOf(""String_Node_Str"") != -1) {
      filename=filename.substring(0,filename.lastIndexOf(""String_Node_Str""));
    }
    String disposition=""String_Node_Str"" + URLEncoder.encode(filename,""String_Node_Str"") + extension;
    final boolean validates=reportComponent.validate();
    if (!validates) {
      sendErrorResponse(response,outputStream,reportStagingHandler);
    }
 else {
      if (response != null) {
        response.setHeader(""String_Node_Str"",disposition);
        response.setHeader(""String_Node_Str"",file.getName());
        response.setHeader(""String_Node_Str"",""String_Node_Str"");
      }
      if (reportComponent.execute()) {
        if (response != null) {
          if (reportStagingHandler.canSendHeaders()) {
            response.setHeader(""String_Node_Str"",disposition);
            response.setHeader(""String_Node_Str"",file.getName());
            response.setHeader(""String_Node_Str"",""String_Node_Str"");
            response.setContentLength(reportStagingHandler.getWrittenByteCount());
          }
        }
        if (logger.isDebugEnabled()) {
          logger.debug(Messages.getInstance().getString(""String_Node_Str"",String.valueOf(reportStagingHandler.getWrittenByteCount())));
        }
        reportStagingHandler.complete();
      }
 else {
        sendErrorResponse(response,outputStream,reportStagingHandler);
      }
    }
  }
 catch (  Exception ex) {
    result=MessageTypes.INSTANCE_FAILED;
    throw ex;
  }
 finally {
    if (reportStagingHandler != null) {
      reportStagingHandler.close();
    }
    final long end=System.currentTimeMillis();
    AuditHelper.audit(userSession.getId(),userSession.getName(),objID,contentGenerator.getObjectName(),getClass().getName(),result,contentGenerator.getInstanceId(),""String_Node_Str"",((float)(end - start) / 1000),contentGenerator);
  }
}","public void createReportContent(final OutputStream outputStream,final Serializable fileId,final String path,final boolean forceDefaultOutputTarget) throws Exception {
  final long start=System.currentTimeMillis();
  final Map<String,Object> inputs=contentGenerator.createInputs();
  String objID=getObjectIdFromContent(fileId);
  AuditHelper.audit(userSession.getId(),userSession.getName(),objID,contentGenerator.getObjectName(),getClass().getName(),MessageTypes.INSTANCE_START,contentGenerator.getInstanceId(),""String_Node_Str"",0,contentGenerator);
  String result=MessageTypes.INSTANCE_END;
  StagingHandler reportStagingHandler=null;
  try {
    final Object rawSessionId=inputs.get(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID);
    if ((rawSessionId instanceof String) == false || ""String_Node_Str"".equals(rawSessionId)) {
      inputs.put(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID,UUIDUtil.getUUIDAsString());
    }
    final SimpleReportingComponent reportComponent=new SimpleReportingComponent();
    reportComponent.setReportFileId(fileId);
    reportComponent.setPaginateOutput(true);
    reportComponent.setForceDefaultOutputTarget(forceDefaultOutputTarget);
    reportComponent.setDefaultOutputTarget(HtmlTableModule.TABLE_HTML_PAGE_EXPORT_TYPE);
    if (path.endsWith(""String_Node_Str"")) {
      reportComponent.setForceUnlockPreferredOutput(true);
    }
    reportComponent.setInputs(inputs);
    final MasterReport report=reportComponent.getReport();
    final StagingMode stagingMode=getStagingMode(inputs,report);
    reportStagingHandler=new StagingHandler(outputStream,stagingMode,this.userSession);
    if (reportStagingHandler.isFullyBuffered()) {
      report.getReportConfiguration().setConfigProperty(FORCED_BUFFERED_WRITING,""String_Node_Str"");
    }
    reportComponent.setOutputStream(reportStagingHandler.getStagingOutputStream());
    final IUnifiedRepository repository=PentahoSystem.get(IUnifiedRepository.class,userSession);
    final RepositoryFile file=repository.getFileById(fileId);
    final String mimeType=reportComponent.getMimeType();
    final String outputTarget=reportComponent.getComputedOutputTarget();
    if (HtmlTableModule.TABLE_HTML_PAGE_EXPORT_TYPE.equals(outputTarget) && reportComponent.getAcceptedPage() < 0) {
      reportComponent.setAcceptedPage(0);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(Messages.getInstance().getString(""String_Node_Str"",mimeType,outputTarget,String.valueOf(reportComponent.getAcceptedPage())));
    }
    HttpServletResponse response=null;
    boolean streamToBrowser=false;
    final IParameterProvider pathProviders=contentGenerator.getParameterProviders().get(""String_Node_Str"");
    if (pathProviders != null) {
      final Object httpResponse=pathProviders.getParameter(""String_Node_Str"");
      if (httpResponse instanceof HttpServletResponse) {
        response=(HttpServletResponse)httpResponse;
        if (reportStagingHandler.getStagingMode() == StagingMode.THRU) {
          final OutputStream respOutputStream=response.getOutputStream();
          if (respOutputStream == outputStream) {
            streamToBrowser=true;
          }
        }
      }
    }
    final String extension=MimeHelper.getExtension(mimeType);
    String filename=file.getName();
    if (filename.lastIndexOf(""String_Node_Str"") != -1) {
      filename=filename.substring(0,filename.lastIndexOf(""String_Node_Str""));
    }
    String disposition=""String_Node_Str"" + RepositoryPathEncoder.encode(RepositoryPathEncoder.encodeRepositoryPath(filename + extension));
    final boolean validates=reportComponent.validate();
    if (!validates) {
      sendErrorResponse(response,outputStream,reportStagingHandler);
    }
 else {
      if (response != null) {
        response.setHeader(""String_Node_Str"",disposition);
        response.setHeader(""String_Node_Str"",file.getName());
        response.setHeader(""String_Node_Str"",""String_Node_Str"");
      }
      if (reportComponent.execute()) {
        if (response != null) {
          if (reportStagingHandler.canSendHeaders()) {
            response.setHeader(""String_Node_Str"",disposition);
            response.setHeader(""String_Node_Str"",file.getName());
            response.setHeader(""String_Node_Str"",""String_Node_Str"");
            response.setContentLength(reportStagingHandler.getWrittenByteCount());
          }
        }
        if (logger.isDebugEnabled()) {
          logger.debug(Messages.getInstance().getString(""String_Node_Str"",String.valueOf(reportStagingHandler.getWrittenByteCount())));
        }
        reportStagingHandler.complete();
      }
 else {
        sendErrorResponse(response,outputStream,reportStagingHandler);
      }
    }
  }
 catch (  Exception ex) {
    result=MessageTypes.INSTANCE_FAILED;
    throw ex;
  }
 finally {
    if (reportStagingHandler != null) {
      reportStagingHandler.close();
    }
    final long end=System.currentTimeMillis();
    AuditHelper.audit(userSession.getId(),userSession.getName(),objID,contentGenerator.getObjectName(),getClass().getName(),result,contentGenerator.getInstanceId(),""String_Node_Str"",((float)(end - start) / 1000),contentGenerator);
  }
}"
51464,"/** 
 * verifies that values containing illegal control chars are base64 encoded, and that the ""encoded=true"" attribute is set as expected. For example, <value encoded=""true"" label=""Gg=="" null=""false"" selected=""false"" type=""java.lang.String"" value=""Gg=="" /> http://jira.pentaho.com/browse/PRD-3882
 */
public void testEncodedParameterValues() throws Exception {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  final ParameterContentGenerator contentGenerator=new ParameterContentGenerator();
  final ParameterXmlContentHandler handler=new ParameterXmlContentHandler(contentGenerator,false);
  handler.createParameterContent(baos,""String_Node_Str"",""String_Node_Str"",false,null);
  Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(baos.toByteArray()));
  NodeList list=doc.getElementsByTagName(""String_Node_Str"");
  doc.getElementsByTagName(""String_Node_Str"").item(0).getAttributes().item(4);
  String[] expectedVal=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] expectedEncoded=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < 3; i++) {
    String value=((Element)doc.getElementsByTagName(""String_Node_Str"").item(i)).getAttribute(""String_Node_Str"");
    Node encoded=((Element)doc.getElementsByTagName(""String_Node_Str"").item(i)).getAttributeNode(""String_Node_Str"");
    String label=((Element)doc.getElementsByTagName(""String_Node_Str"").item(i)).getAttribute(""String_Node_Str"");
    assertEquals(expectedVal[i],value);
    assertEquals(expectedVal[i],label);
    if (i == 0) {
      assertEquals(null,encoded);
    }
 else {
      assertEquals(expectedEncoded[i],encoded.getTextContent());
    }
  }
}","/** 
 * verifies that values containing illegal control chars are base64 encoded, and that the ""encoded=true"" attribute is set as expected. For example, <value encoded=""true"" label=""Gg=="" null=""false"" selected=""false"" type=""java.lang.String"" value=""Gg=="" /> http://jira.pentaho.com/browse/PRD-3882
 */
public void testEncodedParameterValues() throws Exception {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  final ParameterContentGenerator contentGenerator=new ParameterContentGenerator();
  final ParameterXmlContentHandler handler=new ParameterXmlContentHandler(contentGenerator,false);
  handler.createParameterContent(baos,""String_Node_Str"",""String_Node_Str"",false,null);
  Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(baos.toByteArray()));
  NodeList list=doc.getElementsByTagName(""String_Node_Str"");
  doc.getElementsByTagName(""String_Node_Str"").item(0).getAttributes().item(4);
  String[] expectedVal=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] expectedLab=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] expectedEncoded=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < 3; i++) {
    String value=((Element)doc.getElementsByTagName(""String_Node_Str"").item(i)).getAttribute(""String_Node_Str"");
    Node encoded=((Element)doc.getElementsByTagName(""String_Node_Str"").item(i)).getAttributeNode(""String_Node_Str"");
    String label=((Element)doc.getElementsByTagName(""String_Node_Str"").item(i)).getAttribute(""String_Node_Str"");
    assertEquals(expectedVal[i],value);
    assertEquals(expectedLab[i],label);
    if (i == 0) {
      assertEquals(null,encoded);
    }
 else {
      assertEquals(expectedEncoded[i],encoded.getTextContent());
    }
  }
}"
51465,"private Element createParameterElement(final ParameterDefinitionEntry parameter,final ParameterContext parameterContext,final Object selections) throws BeanException, ReportDataFactoryException {
  try {
    final Element parameterElement=document.createElement(""String_Node_Str"");
    parameterElement.setAttribute(""String_Node_Str"",parameter.getName());
    final Class<?> valueType=parameter.getValueType();
    parameterElement.setAttribute(""String_Node_Str"",valueType.getName());
    parameterElement.setAttribute(""String_Node_Str"",String.valueOf(parameter.isMandatory()));
    final String[] namespaces=parameter.getParameterAttributeNamespaces();
    for (int i=0; i < namespaces.length; i++) {
      final String namespace=namespaces[i];
      final String[] attributeNames=parameter.getParameterAttributeNames(namespace);
      for (      final String attributeName : attributeNames) {
        final String attributeValue=parameter.getParameterAttribute(namespace,attributeName,parameterContext);
        final Element attributeElement=document.createElement(""String_Node_Str"");
        attributeElement.setAttribute(""String_Node_Str"",namespace);
        attributeElement.setAttribute(""String_Node_Str"",attributeName);
        attributeElement.setAttribute(""String_Node_Str"",attributeValue);
        parameterElement.appendChild(attributeElement);
      }
    }
    final Class<?> elementValueType;
    if (valueType.isArray()) {
      elementValueType=valueType.getComponentType();
    }
 else {
      elementValueType=valueType;
    }
    final LinkedHashSet<Object> selectionSet=new LinkedHashSet<Object>();
    if (selections != null) {
      if (selections.getClass().isArray()) {
        final int length=Array.getLength(selections);
        for (int i=0; i < length; i++) {
          final Object value=Array.get(selections,i);
          selectionSet.add(resolveSelectionValue(value));
        }
      }
 else {
        selectionSet.add(resolveSelectionValue(selections));
      }
    }
 else {
      final String type=parameter.getParameterAttribute(ParameterAttributeNames.Core.NAMESPACE,ParameterAttributeNames.Core.TYPE,parameterContext);
      if (ParameterAttributeNames.Core.TYPE_DATEPICKER.equals(type) && Date.class.isAssignableFrom(valueType)) {
        if (isGenerateDefaultDates()) {
          selectionSet.add(new Date());
        }
      }
    }
    if (Date.class.isAssignableFrom(elementValueType)) {
      parameterElement.setAttribute(""String_Node_Str"",computeTimeZoneHint(parameter,parameterContext,selectionSet));
    }
    @SuppressWarnings(""String_Node_Str"") final LinkedHashSet handledValues=(LinkedHashSet)selectionSet.clone();
    if (parameter instanceof ListParameter) {
      final ListParameter asListParam=(ListParameter)parameter;
      parameterElement.setAttribute(""String_Node_Str"",String.valueOf(asListParam.isAllowMultiSelection()));
      parameterElement.setAttribute(""String_Node_Str"",String.valueOf(asListParam.isStrictValueCheck()));
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      final Element valuesElement=document.createElement(""String_Node_Str"");
      parameterElement.appendChild(valuesElement);
      final ParameterValues possibleValues=asListParam.getValues(parameterContext);
      for (int i=0; i < possibleValues.getRowCount(); i++) {
        Object key=possibleValues.getKeyValue(i);
        Object value=possibleValues.getTextValue(i);
        final Element valueElement=document.createElement(""String_Node_Str"");
        valuesElement.appendChild(valueElement);
        if (hasISOControlChars(key,elementValueType) || hasISOControlChars(value,elementValueType)) {
          key=Base64.encodeBase64String(key.toString().getBytes());
          value=Base64.encodeBase64String(value.toString().getBytes());
          valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        }
        valueElement.setAttribute(""String_Node_Str"",String.valueOf(value));
        valueElement.setAttribute(""String_Node_Str"",elementValueType.getName());
        if (key instanceof Number) {
          final BigDecimal bd=new BigDecimal(String.valueOf(key));
          valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(bd)));
          handledValues.remove(bd);
        }
 else         if (key == null) {
          if (selections == null || selectionSet.contains(null)) {
            valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
            handledValues.remove(null);
          }
        }
 else {
          Object origKey=possibleValues.getKeyValue(i);
          valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(origKey)));
          handledValues.remove(key);
        }
        if (key == null) {
          valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
          valueElement.setAttribute(""String_Node_Str"",convertParameterValueToString(parameter,parameterContext,key,elementValueType));
        }
      }
      if (!asListParam.isStrictValueCheck()) {
        for (        final Object key : handledValues) {
          final Element valueElement=document.createElement(""String_Node_Str"");
          valuesElement.appendChild(valueElement);
          valueElement.setAttribute(""String_Node_Str"",Messages.getInstance().getString(""String_Node_Str"",String.valueOf(key)));
          valueElement.setAttribute(""String_Node_Str"",elementValueType.getName());
          if (key instanceof Number) {
            BigDecimal bd=new BigDecimal(String.valueOf(key));
            valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(bd)));
          }
 else {
            valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(key)));
          }
          if (key == null) {
            valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
            valueElement.setAttribute(""String_Node_Str"",convertParameterValueToString(parameter,parameterContext,key,elementValueType));
          }
        }
      }
    }
 else     if (parameter instanceof PlainParameter) {
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      if (selections != null) {
        final Element valuesElement=document.createElement(""String_Node_Str"");
        parameterElement.appendChild(valuesElement);
        final Element valueElement=document.createElement(""String_Node_Str"");
        valuesElement.appendChild(valueElement);
        valueElement.setAttribute(""String_Node_Str"",valueType.getName());
        valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        final String value=convertParameterValueToString(parameter,parameterContext,selections,valueType);
        valueElement.setAttribute(""String_Node_Str"",value);
        valueElement.setAttribute(""String_Node_Str"",value);
      }
    }
    return parameterElement;
  }
 catch (  BeanException be) {
    logger.error(Messages.getInstance().getString(""String_Node_Str"",parameter.getName(),String.valueOf(selections)),be);
    throw be;
  }
}","private Element createParameterElement(final ParameterDefinitionEntry parameter,final ParameterContext parameterContext,final Object selections) throws BeanException, ReportDataFactoryException {
  try {
    final Element parameterElement=document.createElement(""String_Node_Str"");
    parameterElement.setAttribute(""String_Node_Str"",parameter.getName());
    final Class<?> valueType=parameter.getValueType();
    parameterElement.setAttribute(""String_Node_Str"",valueType.getName());
    parameterElement.setAttribute(""String_Node_Str"",String.valueOf(parameter.isMandatory()));
    final String[] namespaces=parameter.getParameterAttributeNamespaces();
    for (int i=0; i < namespaces.length; i++) {
      final String namespace=namespaces[i];
      final String[] attributeNames=parameter.getParameterAttributeNames(namespace);
      for (      final String attributeName : attributeNames) {
        final String attributeValue=parameter.getParameterAttribute(namespace,attributeName,parameterContext);
        final Element attributeElement=document.createElement(""String_Node_Str"");
        attributeElement.setAttribute(""String_Node_Str"",namespace);
        attributeElement.setAttribute(""String_Node_Str"",attributeName);
        attributeElement.setAttribute(""String_Node_Str"",attributeValue);
        parameterElement.appendChild(attributeElement);
      }
    }
    final Class<?> elementValueType;
    if (valueType.isArray()) {
      elementValueType=valueType.getComponentType();
    }
 else {
      elementValueType=valueType;
    }
    final LinkedHashSet<Object> selectionSet=new LinkedHashSet<Object>();
    if (selections != null) {
      if (selections.getClass().isArray()) {
        final int length=Array.getLength(selections);
        for (int i=0; i < length; i++) {
          final Object value=Array.get(selections,i);
          selectionSet.add(resolveSelectionValue(value));
        }
      }
 else {
        selectionSet.add(resolveSelectionValue(selections));
      }
    }
 else {
      final String type=parameter.getParameterAttribute(ParameterAttributeNames.Core.NAMESPACE,ParameterAttributeNames.Core.TYPE,parameterContext);
      if (ParameterAttributeNames.Core.TYPE_DATEPICKER.equals(type) && Date.class.isAssignableFrom(valueType)) {
        if (isGenerateDefaultDates()) {
          selectionSet.add(new Date());
        }
      }
    }
    if (Date.class.isAssignableFrom(elementValueType)) {
      parameterElement.setAttribute(""String_Node_Str"",computeTimeZoneHint(parameter,parameterContext,selectionSet));
    }
    Encoder enc=org.owasp.esapi.ESAPI.encoder();
    @SuppressWarnings(""String_Node_Str"") final LinkedHashSet handledValues=(LinkedHashSet)selectionSet.clone();
    if (parameter instanceof ListParameter) {
      final ListParameter asListParam=(ListParameter)parameter;
      parameterElement.setAttribute(""String_Node_Str"",String.valueOf(asListParam.isAllowMultiSelection()));
      parameterElement.setAttribute(""String_Node_Str"",String.valueOf(asListParam.isStrictValueCheck()));
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      final Element valuesElement=document.createElement(""String_Node_Str"");
      parameterElement.appendChild(valuesElement);
      final ParameterValues possibleValues=asListParam.getValues(parameterContext);
      for (int i=0; i < possibleValues.getRowCount(); i++) {
        Object key=possibleValues.getKeyValue(i);
        Object value=possibleValues.getTextValue(i);
        final Element valueElement=document.createElement(""String_Node_Str"");
        valuesElement.appendChild(valueElement);
        if (hasISOControlChars(key,elementValueType) || hasISOControlChars(value,elementValueType)) {
          key=Base64.encodeBase64String(key.toString().getBytes());
          value=Base64.encodeBase64String(value.toString().getBytes());
          valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        }
        valueElement.setAttribute(""String_Node_Str"",enc.encodeForHTMLAttribute(String.valueOf(value)));
        valueElement.setAttribute(""String_Node_Str"",elementValueType.getName());
        if (key instanceof Number) {
          final BigDecimal bd=new BigDecimal(String.valueOf(key));
          valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(bd)));
          handledValues.remove(bd);
        }
 else         if (key == null) {
          if (selections == null || selectionSet.contains(null)) {
            valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
            handledValues.remove(null);
          }
        }
 else {
          Object origKey=possibleValues.getKeyValue(i);
          valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(origKey)));
          handledValues.remove(key);
        }
        if (key == null) {
          valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        }
 else {
          valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
          valueElement.setAttribute(""String_Node_Str"",convertParameterValueToString(parameter,parameterContext,key,elementValueType));
        }
      }
      if (!asListParam.isStrictValueCheck()) {
        for (        final Object key : handledValues) {
          final Element valueElement=document.createElement(""String_Node_Str"");
          valuesElement.appendChild(valueElement);
          valueElement.setAttribute(""String_Node_Str"",Messages.getInstance().getString(""String_Node_Str"",String.valueOf(key)));
          valueElement.setAttribute(""String_Node_Str"",elementValueType.getName());
          if (key instanceof Number) {
            BigDecimal bd=new BigDecimal(String.valueOf(key));
            valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(bd)));
          }
 else {
            valueElement.setAttribute(""String_Node_Str"",String.valueOf(selectionSet.contains(key)));
          }
          if (key == null) {
            valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
            valueElement.setAttribute(""String_Node_Str"",convertParameterValueToString(parameter,parameterContext,key,elementValueType));
          }
        }
      }
    }
 else     if (parameter instanceof PlainParameter) {
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      parameterElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      if (selections != null) {
        final Element valuesElement=document.createElement(""String_Node_Str"");
        parameterElement.appendChild(valuesElement);
        final Element valueElement=document.createElement(""String_Node_Str"");
        valuesElement.appendChild(valueElement);
        valueElement.setAttribute(""String_Node_Str"",valueType.getName());
        valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        valueElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
        final String value=convertParameterValueToString(parameter,parameterContext,selections,valueType);
        valueElement.setAttribute(""String_Node_Str"",value);
        valueElement.setAttribute(""String_Node_Str"",enc.encodeForHTMLAttribute(value));
      }
    }
    return parameterElement;
  }
 catch (  BeanException be) {
    logger.error(Messages.getInstance().getString(""String_Node_Str"",parameter.getName(),String.valueOf(selections)),be);
    throw be;
  }
}"
51466,"public void createParameterContent(final OutputStream outputStream,final Serializable fileId,final boolean overrideOutputType,MasterReport report) throws Exception {
  final Object rawSessionId=inputs.get(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID);
  if ((rawSessionId instanceof String) == false || ""String_Node_Str"".equals(rawSessionId)) {
    inputs.put(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID,UUIDUtil.getUUIDAsString());
  }
  this.fileId=fileId;
  this.document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  final IParameterProvider requestParams=getRequestParameters();
  final boolean subscribe=""String_Node_Str"".equals(requestParams.getStringParameter(""String_Node_Str"",""String_Node_Str""));
  final SimpleReportingComponent reportComponent=new SimpleReportingComponent();
  reportComponent.setReportFileId(fileId);
  if (report != null) {
    reportComponent.setReport(report);
  }
  reportComponent.setPaginateOutput(true);
  reportComponent.setForceDefaultOutputTarget(overrideOutputType);
  reportComponent.setDefaultOutputTarget(HtmlTableModule.TABLE_HTML_PAGE_EXPORT_TYPE);
  reportComponent.setInputs(inputs);
  report=reportComponent.getReport();
  final DefaultParameterContext parameterContext=new DefaultParameterContext(report);
  final ValidationResult vr;
  final Element parameters;
  try {
    final ValidationResult validationResult=ReportContentUtil.applyInputsToReportParameters(report,parameterContext,null,new ValidationResult());
    final ReportParameterDefinition reportParameterDefinition=report.getParameterDefinition();
    vr=reportParameterDefinition.getValidator().validate(validationResult,reportParameterDefinition,parameterContext);
    parameters=document.createElement(GROUP_PARAMETERS);
    parameters.setAttribute(""String_Node_Str"",String.valueOf(vr.isEmpty() == false));
    parameters.setAttribute(""String_Node_Str"",String.valueOf(subscribe));
    parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    final Boolean autoSubmitFlag=requestFlag(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.AUTO_SUBMIT_PARAMETER,""String_Node_Str"");
    if (Boolean.TRUE.equals(autoSubmitFlag)) {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (Boolean.FALSE.equals(autoSubmitFlag)) {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    final Boolean autoSubmitUiFlag=requestFlag(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.AUTO_SUBMIT_DEFAULT,""String_Node_Str"");
    if (Boolean.FALSE.equals(autoSubmitUiFlag)) {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    parameters.setAttribute(""String_Node_Str"",requestConfiguration(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.PARAMETER_UI_LAYOUT,""String_Node_Str""));
    final ParameterDefinitionEntry[] parameterDefinitions=reportParameterDefinition.getParameterDefinitions();
    final LinkedHashMap<String,ParameterDefinitionEntry> reportParameters=new LinkedHashMap<String,ParameterDefinitionEntry>();
    for (    final ParameterDefinitionEntry parameter : parameterDefinitions) {
      reportParameters.put(parameter.getName(),parameter);
    }
    for (    final Map.Entry<String,ParameterDefinitionEntry> entry : getSystemParameter().entrySet()) {
      if (reportParameters.containsKey(entry.getKey()) == false) {
        reportParameters.put(entry.getKey(),entry.getValue());
      }
    }
    if (overrideOutputType) {
      final ParameterDefinitionEntry definitionEntry=reportParameters.get(SimpleReportingComponent.OUTPUT_TARGET);
      if (definitionEntry instanceof AbstractParameter) {
        final AbstractParameter parameter=(AbstractParameter)definitionEntry;
        parameter.setHidden(true);
        parameter.setMandatory(false);
      }
    }
 else {
      hideOutputParameterIfLocked(report,reportParameters);
    }
    hideSubscriptionParameter(subscribe,reportParameters);
    final Map<String,Object> inputs=computeRealInput(parameterContext,reportParameters,reportComponent.getComputedOutputTarget(),vr);
    final Boolean showParameterUI=requestFlag(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.SHOW_PARAMETER_UI,null);
    if (Boolean.FALSE.equals(showParameterUI)) {
      inputs.put(""String_Node_Str"",Boolean.FALSE);
    }
 else {
      inputs.put(""String_Node_Str"",Boolean.TRUE);
    }
    String proportionalWidth=report.getReportConfiguration().getConfigProperty(CONFIG_PARAM_HTML_PROPORTIONAL_WIDTH);
    inputs.put(SYS_PARAM_HTML_PROPORTIONAL_WIDTH,Boolean.valueOf(proportionalWidth));
    for (    final ParameterDefinitionEntry parameter : reportParameters.values()) {
      final Object selections=inputs.get(parameter.getName());
      final ParameterContextWrapper wrapper=new ParameterContextWrapper(parameterContext,vr.getParameterValues());
      parameters.appendChild(createParameterElement(parameter,wrapper,selections));
    }
    if (vr.isEmpty() == false) {
      parameters.appendChild(createErrorElements(vr));
    }
    final String[] outputParameter=new OutputParameterCollector().collectParameter(report);
    for (int i=0; i < outputParameter.length; i++) {
      final String outputParameterName=outputParameter[i];
      final Element element=document.createElement(""String_Node_Str"");
      element.setAttribute(""String_Node_Str"",outputParameterName);
      element.setAttribute(""String_Node_Str"",outputParameterName);
      parameters.appendChild(element);
    }
    if (vr.isEmpty() && paginate) {
      appendPageCount(reportComponent,parameters);
    }
    document.appendChild(parameters);
    final DOMSource source=new DOMSource(document);
    final StreamResult result=new StreamResult(outputStream);
    final Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.transform(source,result);
  }
  finally {
    parameterContext.close();
  }
}","public void createParameterContent(final OutputStream outputStream,final Serializable fileId,final boolean overrideOutputType,MasterReport report) throws Exception {
  final Object rawSessionId=inputs.get(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID);
  if ((rawSessionId instanceof String) == false || ""String_Node_Str"".equals(rawSessionId)) {
    inputs.put(ParameterXmlContentHandler.SYS_PARAM_SESSION_ID,UUIDUtil.getUUIDAsString());
  }
  this.fileId=fileId;
  this.document=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
  final IParameterProvider requestParams=getRequestParameters();
  final boolean subscribe=""String_Node_Str"".equals(requestParams.getStringParameter(""String_Node_Str"",""String_Node_Str""));
  final SimpleReportingComponent reportComponent=new SimpleReportingComponent();
  reportComponent.setReportFileId(fileId);
  if (report != null) {
    reportComponent.setReport(report);
  }
  reportComponent.setPaginateOutput(true);
  reportComponent.setForceDefaultOutputTarget(overrideOutputType);
  reportComponent.setDefaultOutputTarget(HtmlTableModule.TABLE_HTML_PAGE_EXPORT_TYPE);
  reportComponent.setInputs(inputs);
  report=reportComponent.getReport();
  final DefaultParameterContext parameterContext=new DefaultParameterContext(report);
  final ValidationResult vr;
  final Element parameters;
  try {
    final ValidationResult validationResult=ReportContentUtil.applyInputsToReportParameters(report,parameterContext,inputs,new ValidationResult());
    final ReportParameterDefinition reportParameterDefinition=report.getParameterDefinition();
    vr=reportParameterDefinition.getValidator().validate(validationResult,reportParameterDefinition,parameterContext);
    parameters=document.createElement(GROUP_PARAMETERS);
    parameters.setAttribute(""String_Node_Str"",String.valueOf(vr.isEmpty() == false));
    parameters.setAttribute(""String_Node_Str"",String.valueOf(subscribe));
    parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    final Boolean autoSubmitFlag=requestFlag(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.AUTO_SUBMIT_PARAMETER,""String_Node_Str"");
    if (Boolean.TRUE.equals(autoSubmitFlag)) {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (Boolean.FALSE.equals(autoSubmitFlag)) {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    final Boolean autoSubmitUiFlag=requestFlag(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.AUTO_SUBMIT_DEFAULT,""String_Node_Str"");
    if (Boolean.FALSE.equals(autoSubmitUiFlag)) {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      parameters.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
    parameters.setAttribute(""String_Node_Str"",requestConfiguration(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.PARAMETER_UI_LAYOUT,""String_Node_Str""));
    final ParameterDefinitionEntry[] parameterDefinitions=reportParameterDefinition.getParameterDefinitions();
    final LinkedHashMap<String,ParameterDefinitionEntry> reportParameters=new LinkedHashMap<String,ParameterDefinitionEntry>();
    for (    final ParameterDefinitionEntry parameter : parameterDefinitions) {
      reportParameters.put(parameter.getName(),parameter);
    }
    for (    final Map.Entry<String,ParameterDefinitionEntry> entry : getSystemParameter().entrySet()) {
      if (reportParameters.containsKey(entry.getKey()) == false) {
        reportParameters.put(entry.getKey(),entry.getValue());
      }
    }
    if (overrideOutputType) {
      final ParameterDefinitionEntry definitionEntry=reportParameters.get(SimpleReportingComponent.OUTPUT_TARGET);
      if (definitionEntry instanceof AbstractParameter) {
        final AbstractParameter parameter=(AbstractParameter)definitionEntry;
        parameter.setHidden(true);
        parameter.setMandatory(false);
      }
    }
 else {
      hideOutputParameterIfLocked(report,reportParameters);
    }
    hideSubscriptionParameter(subscribe,reportParameters);
    final Map<String,Object> inputs=computeRealInput(parameterContext,reportParameters,reportComponent.getComputedOutputTarget(),vr);
    final Boolean showParameterUI=requestFlag(""String_Node_Str"",report,AttributeNames.Core.NAMESPACE,AttributeNames.Core.SHOW_PARAMETER_UI,null);
    if (Boolean.FALSE.equals(showParameterUI)) {
      inputs.put(""String_Node_Str"",Boolean.FALSE);
    }
 else {
      inputs.put(""String_Node_Str"",Boolean.TRUE);
    }
    String proportionalWidth=report.getReportConfiguration().getConfigProperty(CONFIG_PARAM_HTML_PROPORTIONAL_WIDTH);
    inputs.put(SYS_PARAM_HTML_PROPORTIONAL_WIDTH,Boolean.valueOf(proportionalWidth));
    for (    final ParameterDefinitionEntry parameter : reportParameters.values()) {
      final Object selections=inputs.get(parameter.getName());
      final ParameterContextWrapper wrapper=new ParameterContextWrapper(parameterContext,vr.getParameterValues());
      parameters.appendChild(createParameterElement(parameter,wrapper,selections));
    }
    if (vr.isEmpty() == false) {
      parameters.appendChild(createErrorElements(vr));
    }
    final String[] outputParameter=new OutputParameterCollector().collectParameter(report);
    for (int i=0; i < outputParameter.length; i++) {
      final String outputParameterName=outputParameter[i];
      final Element element=document.createElement(""String_Node_Str"");
      element.setAttribute(""String_Node_Str"",outputParameterName);
      element.setAttribute(""String_Node_Str"",outputParameterName);
      parameters.appendChild(element);
    }
    if (vr.isEmpty() && paginate) {
      appendPageCount(reportComponent,parameters);
    }
    document.appendChild(parameters);
    final DOMSource source=new DOMSource(document);
    final StreamResult result=new StreamResult(outputStream);
    final Transformer transformer=TransformerFactory.newInstance().newTransformer();
    transformer.transform(source,result);
  }
  finally {
    parameterContext.close();
  }
}"
51467,"public String getEnvironmentProperty(final String key){
  if (key == null) {
    throw new NullPointerException();
  }
  if (""String_Node_Str"".equals(key)) {
    return clText;
  }
  if (cache == null) {
    cache=new HashMap<String,String>();
  }
  final String cached=cache.get(key);
  if (cached != null) {
    return cached;
  }
  final IPentahoSession session=PentahoSessionHolder.getSession();
  if (PentahoSystem.getApplicationContext() != null) {
    final String fullyQualifiedServerUrl=PentahoSystem.getApplicationContext().getFullyQualifiedServerURL();
    if (""String_Node_Str"".equals(key)) {
      final String baseServerURL=getBaseServerURL(fullyQualifiedServerUrl);
      cache.put(key,baseServerURL);
      return baseServerURL;
    }
 else     if (""String_Node_Str"".equals(key)) {
      cache.put(key,fullyQualifiedServerUrl);
      return fullyQualifiedServerUrl;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final String solutionRoot=PentahoSystem.getApplicationContext().getSolutionPath(""String_Node_Str"");
      cache.put(key,solutionRoot);
      return solutionRoot;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final String hostColonPort=getHostColonPort(fullyQualifiedServerUrl);
      cache.put(key,hostColonPort);
      return hostColonPort;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final String requestContextPath=PentahoRequestContextHolder.getRequestContext().getContextPath();
      cache.put(key,requestContextPath);
    }
  }
 else {
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)) {
      logger.warn(Messages.getInstance().getString(""String_Node_Str""));
      cache.put(key,null);
      return null;
    }
  }
  if (session != null) {
    if (""String_Node_Str"".equals(key)) {
      final Authentication authentication=SecurityHelper.getAuthentication(session,true);
      final String userName=authentication.getName();
      cache.put(key,userName);
      return userName;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final Authentication authentication=SecurityHelper.getAuthentication(session,true);
      final StringBuilder property=new StringBuilder();
      final GrantedAuthority[] roles=authentication.getAuthorities();
      if (roles == null) {
        return null;
      }
      final int rolesSize=roles.length;
      final CSVQuoter quoter=new CSVQuoter(',','""');
      for (int i=0; i < rolesSize; i++) {
        if (i != 0) {
          property.append(""String_Node_Str"");
        }
        property.append(quoter.doQuoting(roles[i].getAuthority()));
      }
      return property.toString();
    }
    if (key.startsWith(""String_Node_Str"")) {
      final Object attribute=session.getAttribute(key.substring(""String_Node_Str"".length()));
      return String.valueOf(attribute);
    }
 else     if (key.startsWith(""String_Node_Str"")) {
      final Object attribute=PentahoSystem.getGlobalParameters().getParameter(key.substring(""String_Node_Str"".length()));
      return String.valueOf(attribute);
    }
  }
 else {
    if (key.startsWith(""String_Node_Str"") || key.equals(""String_Node_Str"") || key.startsWith(""String_Node_Str"")|| key.equals(""String_Node_Str"")) {
      logger.warn(Messages.getInstance().getString(""String_Node_Str""));
      return null;
    }
  }
  final Object environmentProperty=super.getEnvironmentProperty(key);
  if (environmentProperty == null) {
    return null;
  }
  return String.valueOf(environmentProperty);
}","public String getEnvironmentProperty(final String key){
  if (key == null) {
    throw new NullPointerException();
  }
  if (""String_Node_Str"".equals(key)) {
    return clText;
  }
  if (cache == null) {
    cache=new HashMap<String,String>();
  }
  final String cached=cache.get(key);
  if (cached != null) {
    return cached;
  }
  final IPentahoSession session=PentahoSessionHolder.getSession();
  if (PentahoSystem.getApplicationContext() != null) {
    final String fullyQualifiedServerUrl=PentahoSystem.getApplicationContext().getFullyQualifiedServerURL();
    if (""String_Node_Str"".equals(key)) {
      final String baseServerURL=getBaseServerURL(fullyQualifiedServerUrl);
      cache.put(key,baseServerURL);
      return baseServerURL;
    }
 else     if (""String_Node_Str"".equals(key)) {
      cache.put(key,fullyQualifiedServerUrl);
      return fullyQualifiedServerUrl;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final String solutionRoot=PentahoSystem.getApplicationContext().getSolutionPath(""String_Node_Str"");
      cache.put(key,solutionRoot);
      return solutionRoot;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final String hostColonPort=getHostColonPort(fullyQualifiedServerUrl);
      cache.put(key,hostColonPort);
      return hostColonPort;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final String requestContextPath=PentahoRequestContextHolder.getRequestContext().getContextPath();
      cache.put(key,requestContextPath);
    }
  }
 else {
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)) {
      logger.warn(Messages.getInstance().getString(""String_Node_Str""));
      cache.put(key,null);
      return null;
    }
  }
  if (session != null) {
    if (""String_Node_Str"".equals(key)) {
      final Authentication authentication=SecurityHelper.getAuthentication();
      final String userName=authentication.getName();
      cache.put(key,userName);
      return userName;
    }
 else     if (""String_Node_Str"".equals(key)) {
      final Authentication authentication=SecurityHelper.getAuthentication();
      final StringBuilder property=new StringBuilder();
      final GrantedAuthority[] roles=authentication.getAuthorities();
      if (roles == null) {
        return null;
      }
      final int rolesSize=roles.length;
      final CSVQuoter quoter=new CSVQuoter(',','""');
      for (int i=0; i < rolesSize; i++) {
        if (i != 0) {
          property.append(""String_Node_Str"");
        }
        property.append(quoter.doQuoting(roles[i].getAuthority()));
      }
      return property.toString();
    }
    if (key.startsWith(""String_Node_Str"")) {
      final Object attribute=session.getAttribute(key.substring(""String_Node_Str"".length()));
      return String.valueOf(attribute);
    }
 else     if (key.startsWith(""String_Node_Str"")) {
      final Object attribute=PentahoSystem.getGlobalParameters().getParameter(key.substring(""String_Node_Str"".length()));
      return String.valueOf(attribute);
    }
  }
 else {
    if (key.startsWith(""String_Node_Str"") || key.equals(""String_Node_Str"") || key.startsWith(""String_Node_Str"")|| key.equals(""String_Node_Str"")) {
      logger.warn(Messages.getInstance().getString(""String_Node_Str""));
      return null;
    }
  }
  final Object environmentProperty=super.getEnvironmentProperty(key);
  if (environmentProperty == null) {
    return null;
  }
  return String.valueOf(environmentProperty);
}"
51468,"/** 
 * gets a resource stream from the runtime context.
 * @param caller resource manager
 * @return input stream
 */
public InputStream getResourceAsStream(final ResourceManager caller) throws ResourceLoadingException {
  try {
    final ISolutionRepository solutionRepository=PentahoSystem.get(ISolutionRepository.class);
    return solutionRepository.getResourceInputStream(key.getIdentifierAsString(),false,ISolutionRepository.ACTION_EXECUTE);
  }
 catch (  FileNotFoundException e) {
    throw new ResourceLoadingException(e.getLocalizedMessage(),e);
  }
}","/** 
 * gets a resource stream from the runtime context.
 * @param caller resource manager
 * @return input stream
 */
public InputStream getResourceAsStream(final ResourceManager caller) throws ResourceLoadingException {
  try {
    IUnifiedRepository unifiedRepository=PentahoSystem.get(IUnifiedRepository.class);
    SimpleRepositoryFileData fileData=unifiedRepository.getDataForRead(key.getIdentifierAsString(),SimpleRepositoryFileData.class);
    return fileData.getStream();
  }
 catch (  UnifiedRepositoryException ex) {
    throw new ResourceLoadingException(ex.getLocalizedMessage(),ex);
  }
}"
51469,"/** 
 * gets a resource stream from the runtime context.
 * @param caller resource manager
 * @return input stream
 */
public InputStream getResourceAsStream(final ResourceManager caller) throws ResourceLoadingException {
  try {
    final ISolutionRepository solutionRepository=PentahoSystem.get(ISolutionRepository.class);
    return solutionRepository.getResourceInputStream(key.getIdentifier().toString(),false,ISolutionRepository.ACTION_EXECUTE);
  }
 catch (  FileNotFoundException e) {
    throw new ResourceLoadingException(e.getLocalizedMessage(),e);
  }
}","/** 
 * gets a resource stream from the runtime context.
 * @param caller resource manager
 * @return input stream
 */
public InputStream getResourceAsStream(final ResourceManager caller) throws ResourceLoadingException {
  try {
    final ISolutionRepository solutionRepository=PentahoSystem.get(ISolutionRepository.class);
    String fileIdentifier=key.getIdentifierAsString();
    if (fileIdentifier.startsWith(""String_Node_Str"")) {
      fileIdentifier=fileIdentifier.substring(1);
    }
    return solutionRepository.getResourceInputStream(fileIdentifier,false,ISolutionRepository.ACTION_EXECUTE);
  }
 catch (  FileNotFoundException e) {
    throw new ResourceLoadingException(e.getLocalizedMessage(),e);
  }
}"
51470,"/** 
 * gets a resource stream from the runtime context.
 * @param caller resource manager
 * @return input stream
 */
public InputStream getResourceAsStream(ResourceManager caller) throws ResourceLoadingException {
  try {
    ISolutionRepository solutionRepository=PentahoSystem.get(ISolutionRepository.class);
    return solutionRepository.getResourceInputStream(key.getIdentifier().toString(),false,ISolutionRepository.ACTION_EXECUTE);
  }
 catch (  FileNotFoundException e) {
    throw new ResourceLoadingException(e.getLocalizedMessage(),e);
  }
}","/** 
 * gets a resource stream from the runtime context.
 * @param caller resource manager
 * @return input stream
 */
public InputStream getResourceAsStream(ResourceManager caller) throws ResourceLoadingException {
  try {
    ISolutionRepository solutionRepository=PentahoSystem.get(ISolutionRepository.class);
    String fileIdentifier=key.getIdentifierAsString();
    if (fileIdentifier.startsWith(""String_Node_Str"")) {
      fileIdentifier=fileIdentifier.substring(1);
    }
    return solutionRepository.getResourceInputStream(fileIdentifier,false,ISolutionRepository.ACTION_EXECUTE);
  }
 catch (  FileNotFoundException e) {
    throw new ResourceLoadingException(e.getLocalizedMessage(),e);
  }
}"
51471,"public String serialize(final ResourceKey bundleKey,final ResourceKey key) throws ResourceException {
  throw new ResourceKeyCreationException(Messages.getString(""String_Node_Str""));
}","public String serialize(final ResourceKey bundleKey,final ResourceKey key) throws ResourceException {
  throw new ResourceKeyCreationException(Messages.getInstance().getString(""String_Node_Str""));
}"
51472,"public ResourceKey deserialize(final ResourceKey bundleKey,final String stringKey) throws ResourceKeyCreationException {
  throw new ResourceKeyCreationException(Messages.getString(""String_Node_Str""));
}","public ResourceKey deserialize(final ResourceKey bundleKey,final String stringKey) throws ResourceKeyCreationException {
  throw new ResourceKeyCreationException(Messages.getInstance().getString(""String_Node_Str""));
}"
51473,"private static File createExperimentalFolder(List<IDesign> problems,File experimentalFolder,String expFolderId) throws InPUTException {
  if (expFolderId != null) {
    File expFolder;
synchronized (globalExperimentCounter) {
      expFolder=new File(expFolderId);
      while (expFolder.exists()) {
        repetitionCounter=globalExperimentCounter.incrementAndGet();
        expFolder=new File(initExperimentalFolder(expFolderId));
      }
      repetitionCounter=globalExperimentCounter.intValue();
    }
    expFolder.mkdirs();
    experimentalFolder=expFolder;
  }
  addProblems(experimentalFolder,problems);
  return experimentalFolder;
}","private static File createExperimentalFolder(List<IDesign> problems,File experimentalFolder,String expFolderId) throws InPUTException {
  if (expFolderId != null) {
    File expFolder;
synchronized (globalExperimentCounter) {
      expFolder=new File(expFolderId);
      while (expFolder.exists()) {
        repetitionCounter=globalExperimentCounter.incrementAndGet();
        expFolder=new File(initExperimentalFolder(expFolderId));
      }
      repetitionCounter=globalExperimentCounter.intValue();
    }
    expFolder.mkdirs();
    experimentalFolder=expFolder;
  }
  if (problems != null)   addProblems(experimentalFolder,problems);
  return experimentalFolder;
}"
51474,"/** 
 * only for existing investigations that should be proceeded. uses the existing config file.
 */
public void resumeInvestigation(ExperimentConductor<T> conductor,boolean isMinProblem) throws InPUTException, IOException {
  if (investigationPath == null)   throw new IllegalStateException(""String_Node_Str"");
  String spotConfigPath=investigationPath + File.separator + SPOTQ.SPOT_DESIGN_ID+ Q.XML;
  investigate(spotConfigPath,true,true,conductor);
}","/** 
 * only for existing investigations that should be proceeded. uses the existing config file.
 */
public void resumeInvestigation(ExperimentConductor<T> conductor,boolean isMinProblem,boolean randomProblemChoice) throws InPUTException, IOException {
  if (investigationPath == null)   throw new IllegalStateException(""String_Node_Str"");
  String spotConfigPath=investigationPath + File.separator + SPOTQ.SPOT_DESIGN_ID+ Q.XML;
  investigate(spotConfigPath,isMinProblem,true,randomProblemChoice,conductor);
}"
51475,"public void investigate(String spotConfigPath,boolean isMinProblem,ExperimentConductor<T> conductor) throws InPUTException, IOException {
  investigate(spotConfigPath,isMinProblem,false,conductor);
}","public void investigate(String spotConfigPath,boolean isMinProblem,boolean randomProblemChoice,ExperimentConductor<T> conductor) throws InPUTException, IOException {
  investigate(spotConfigPath,isMinProblem,false,randomProblemChoice,conductor);
}"
51476,"public SPOT(IInPUT input,List<IDesign> problems,String spotConfigPath,String studyId,boolean minProblem,boolean resumeExisting) throws InPUTException {
  super(input,problems,studyId,minProblem);
  config=initConfig(spotConfigPath);
  helper=new SpotHelper(input,config,studyId,minProblem,problems,resumeExisting);
  initSeed();
  currentDesignSize=getTotalAmountRunsInitialDesign();
}","public SPOT(IInPUT input,List<IDesign> problems,String spotConfigPath,String studyId,boolean minProblem,boolean resumeExisting,boolean randomProblemChoice) throws InPUTException {
  super(input,problems,studyId,minProblem,randomProblemChoice);
  config=initConfig(spotConfigPath);
  helper=new SpotHelper(input,config,studyId,minProblem,problems,resumeExisting);
  initSeed();
  currentDesignSize=getTotalAmountRunsInitialDesign();
}"
51477,"@Override public IExperiment nextExperiment() throws InPUTException {
  if (currentDesignPointer == 0 || currentDesignPointer == currentDesignSize) {
    currentDesignPointer=0;
    currentDesignSize=initNextDesign();
  }
  IExperiment nextExperiment=nextExperiment(currentDesignPointer);
  nextExperiment.setProblemFeatures(randomInstance());
  if (!nextExperiment.same(currentExperiment)) {
    currentExperiment=nextExperiment;
    amountInvestigatedConfigurations++;
  }
  return currentExperiment;
}","@Override public IExperiment nextExperiment() throws InPUTException {
  if (currentDesignPointer == 0 || currentDesignPointer == currentDesignSize) {
    currentDesignPointer=0;
    currentDesignSize=initNextDesign();
  }
  IExperiment nextExperiment=nextExperiment(currentDesignPointer);
  IDesign nextProblem=getNextProblem();
  nextExperiment.setProblemFeatures(nextProblem);
  if (!nextExperiment.same(currentExperiment)) {
    currentExperiment=nextExperiment;
    amountInvestigatedConfigurations++;
  }
  return currentExperiment;
}"
51478,"/** 
 * A sequential tuner requires an experimental context to be set, that extends the use of an IInPUT element to a concrete problem instance under investigation. To differentiate between different problem instances allows for a differentiated analysis of the results with respect to problem features. However, the setting of problem is optional; a <code>problem</code> context might not even be reasonable, desired, or available (e.g. when interested in configurations for a single possibly very special instance only). When defined, it has to match the problem feature space provided by <code>input</code>.
 * @param input
 * @param studyId
 * @param problem
 * @throws InPUTException
 */
public SequentialTuner(IInPUT input,List<IDesign> problems,String studyId,boolean minProblem) throws InPUTException {
  super(input,studyId,minProblem);
  this.problems=problems;
  if (input.getOutputSpace() == null)   throw new InPUTException(""String_Node_Str"");
}","/** 
 * A sequential tuner requires an experimental context to be set, that extends the use of an IInPUT element to a concrete problem instance under investigation. To differentiate between different problem instances allows for a differentiated analysis of the results with respect to problem features. However, the setting of problem is optional; a <code>problem</code> context might not even be reasonable, desired, or available (e.g. when interested in configurations for a single possibly very special instance only). When defined, it has to match the problem feature space provided by <code>input</code>.
 * @param input
 * @param studyId
 * @param problem
 * @throws InPUTException
 */
public SequentialTuner(IInPUT input,List<IDesign> problems,String studyId,boolean minProblem,boolean randomProblemChoice) throws InPUTException {
  super(input,studyId,minProblem);
  this.problems=problems;
  this.randomProblemChoice=randomProblemChoice;
  if (input.getOutputSpace() == null)   throw new InPUTException(""String_Node_Str"");
}"
51479,"private IDesign randomInstance(){
  if (problems == null || problems.size() == 0)   return null;
  int next=rng.nextInt(problems.size());
  return problems.get(next);
}","private IDesign randomInstance(){
  int next=rng.nextInt(problems.size());
  return problems.get(next);
}"
51480,"private void initInverseFunction(){
  runCommand(""String_Node_Str"",false);
}","private void initInverseFunction(){
  runCommand(""String_Node_Str"",false);
  runCommand(""String_Node_Str"",false);
}"
51481,"public Object newInstance(Object[] actualParams) throws InPUTException {
  if (!init)   init();
  try {
    return constructor.newInstance(actualParams);
  }
 catch (  InstantiationException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"" + constructor.getDeclaringClass().getName()+ ""String_Node_Str""+ getClassesForArguments(actualParams),e);
  }
catch (  InvocationTargetException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
}","public Object newInstance(Object[] actualParams) throws InPUTException {
  if (!init)   init();
  try {
    ensureRightArrayTypes(actualParams);
    return constructor.newInstance(actualParams);
  }
 catch (  InstantiationException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"" + constructor.getDeclaringClass().getName()+ ""String_Node_Str""+ getClassesForArguments(actualParams),e);
  }
catch (  InvocationTargetException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
}"
51482,"@Test public void testInitialNextIteration() throws InPUTException {
  IExperiment experiment=tuner.nextExperiment();
  tuner.feedback(initialResults.get(0));
  assertEquals(12,tuner.getCurrentDesignSize());
  assertEquals(0,tuner.getCurrentDesignPointer());
  for (int i=0; i < 2; i++) {
    assertEquals(experiment,tuner.nextExperiment());
    tuner.feedback(initialResults.get(i + 1));
  }
  assertFalse(experiment.equals(tuner.nextExperiment()));
  TUtil.assertExpectedType(experiment,TUtil.STRUCTURAL_PARENT_PARAM,SomeStructuralParent.class);
  if (YetAnotherThirdChoice.class.isInstance(experiment.getValue(TUtil.STRUCTURAL_PARENT_PARAM))) {
    assertNotNull(experiment.getValue(TUtil.NON_SHARED_PRIMITIVE_SUB_PARAM));
  }
 else {
    assertNull(experiment.getValue(TUtil.NON_SHARED_PRIMITIVE_SUB_PARAM));
  }
}","@Test public void testInitialNextIteration() throws InPUTException {
  IExperiment experiment=tuner.nextExperiment();
  tuner.feedback(initialResults.get(0));
  assertEquals(0,tuner.getCurrentDesignPointer());
  for (int i=0; i < 2; i++) {
    assertEquals(experiment,tuner.nextExperiment());
    tuner.feedback(initialResults.get(i + 1));
  }
  assertFalse(experiment.equals(tuner.nextExperiment()));
  TUtil.assertExpectedType(experiment,TUtil.STRUCTURAL_PARENT_PARAM,SomeStructuralParent.class);
  if (YetAnotherThirdChoice.class.isInstance(experiment.getValue(TUtil.STRUCTURAL_PARENT_PARAM))) {
    assertNotNull(experiment.getValue(TUtil.NON_SHARED_PRIMITIVE_SUB_PARAM));
  }
 else {
    assertNull(experiment.getValue(TUtil.NON_SHARED_PRIMITIVE_SUB_PARAM));
  }
}"
51483,"@Before public void setUp() throws InPUTException {
  super.setUp();
  tuner=new SPOT(input,null,false);
}","@Before public void setUp() throws InPUTException {
  super.setUp();
  tuner=new SPOT(input,null,null,""String_Node_Str"",false,false);
}"
51484,"void setElement(String paramId,Value<?> newValueE) throws InPUTException {
  Value<?> oldValueE=elementCache.get(paramId);
  if (isValid() && oldValueE == null)   throw new InPUTException(""String_Node_Str"" + paramId + ""String_Node_Str""+ getId()+ ""String_Node_Str"");
  addElement(paramId,newValueE);
}","void setElement(String paramId,Value<?> newValueE) throws InPUTException {
  Value<?> oldValueE=elementCache.get(paramId);
  if (!newValueE.getParam().isOptional() && isValid() && oldValueE == null)   throw new InPUTException(""String_Node_Str"" + paramId + ""String_Node_Str""+ getId()+ ""String_Node_Str"");
  addElement(paramId,newValueE);
}"
51485,"public Object newInstance(Object[] actualParams) throws InPUTException {
  if (!init)   init();
  try {
    return constructor.newInstance(actualParams);
  }
 catch (  InstantiationException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"" + constructor.getDeclaringClass().getName()+ ""String_Node_Str""+ getClassesForArguments(actualParams),e);
  }
catch (  InvocationTargetException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
}","public Object newInstance(Object[] actualParams) throws InPUTException {
  if (!init)   init();
  try {
    ensureRightArrayTypes(actualParams);
    return constructor.newInstance(actualParams);
  }
 catch (  InstantiationException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"" + constructor.getDeclaringClass().getName()+ ""String_Node_Str""+ getClassesForArguments(actualParams),e);
  }
catch (  InvocationTargetException e) {
    throw new InPUTException(param.getId() + ""String_Node_Str"",e);
  }
}"
51486,"private void addPairToRoot(Element root,ParamValuePair pair,IDesignSpace space,ParamStore store) throws InPUTException {
  String realParamId=makeParamId(pair.paramId);
  Param<?> param=store.getParam(realParamId);
  Element parent=findParent(root,param,pair,store,space);
  if (isAppropriateSubParam(parent,param)) {
    addToParent(pair,param,parent);
  }
}","private void addPairToRoot(Element root,ParamValuePair pair,IDesignSpace space,ParamStore store) throws InPUTException {
  String realParamId=makeParamId(pair.paramId);
  Param<?> param=store.getParam(realParamId);
  Element parent=findParent(root,param,pair,store,space);
  if (isAppropriateSubParam(parent,param))   addToParent(pair,param,parent);
}"
51487,"private boolean hasComplexGrandParent(Param<?> param) throws InPUTException {
  Element grandParent=param.getParentElement().getParentElement();
  return grandParent != null && !grandParent.isRootElement() && isComplex((Param<?>)grandParent);
}","private boolean hasComplexGrandParent(Param<?> param) throws InPUTException {
  Element grandParent=param.getParentElement().getParentElement();
  return grandParent != null && !grandParent.isRootElement() && isStructuralArrayType((Param<?>)grandParent);
}"
51488,"private Element findParent(Element root,Param<?> param,ParamValuePair pair,ParamStore store,IDesignSpace space) throws InPUTException {
  Element resultParent=null;
  if (isComplex(param))   resultParent=findParentForComplex(root,param,pair,store,space);
 else   if (hasComplexGrandParent(param))   addPairToAllSuitableParentsForGrandChildOfComplex(root,param,pair,store,space);
 else   resultParent=findParentForNormal(root,param,pair,store,space);
  return resultParent;
}","private Element findParent(Element root,Param<?> param,ParamValuePair pair,ParamStore store,IDesignSpace space) throws InPUTException {
  Element resultParent=null;
  if (isStructuralArrayType(param))   resultParent=findParentForComplex(root,param,pair,store,space);
 else   if (hasComplexGrandParent(param))   addPairToAllSuitableParentsForGrandChildOfComplex(root,param,pair,store,space);
 else   resultParent=findParentForNormal(root,param,pair,store,space);
  return resultParent;
}"
51489,"private void addAllFixedEntries(Map<Integer,Set<ParamValuePair>> paramMap,List<Param<?>> fixed) throws InPUTException {
  int depth;
  Set<ParamValuePair> setOfDepth;
  for (  Param<?> param : fixed) {
    depth=param.getId().split(SpotConverter.ID_CHOP_PATTERN).length;
    if (param instanceof SParam && ((SParam)param).isComplex()) {
      setOfDepth=getSetOfDepth(depth + 1,paramMap);
      addAllFixedEntriesForComplexParam(setOfDepth,param.getId(),param.getFixedValue().split(""String_Node_Str""));
    }
 else {
      setOfDepth=getSetOfDepth(depth,paramMap);
      setOfDepth.add(new ParamValuePair(param.getId(),param.getFixedValue()));
    }
  }
}","private void addAllFixedEntries(Map<Integer,Set<ParamValuePair>> paramMap,List<Param<?>> fixed) throws InPUTException {
  int depth;
  Set<ParamValuePair> setOfDepth;
  for (  Param<?> param : fixed) {
    depth=param.getId().split(SpotConverter.ID_CHOP_PATTERN).length;
    if (isStructuralArrayType(param)) {
      setOfDepth=getSetOfDepth(depth + 1,paramMap);
      addAllFixedEntriesForComplexParam(setOfDepth,param.getId(),param.getFixedValue().split(""String_Node_Str""));
    }
 else {
      setOfDepth=getSetOfDepth(depth,paramMap);
      setOfDepth.add(new ParamValuePair(param.getId(),param.getFixedValue()));
    }
  }
}"
51490,"private Map<Integer,Set<ParamValuePair>> initValues(List<Param<?>> fixed,SpotDesign spotDesign) throws InPUTException {
  Map<Integer,Set<ParamValuePair>> paramMap=new HashMap<Integer,Set<ParamValuePair>>();
  addAllVariableEntries(paramMap,spotDesign);
  addAllFixedEntries(paramMap,fixed);
  return paramMap;
}","private Map<Integer,Set<ParamValuePair>> initValues(List<Param<?>> fixed,SpotDesign spotDesign) throws InPUTException {
  Map<Integer,Set<ParamValuePair>> paramMap=new HashMap<Integer,Set<ParamValuePair>>();
  System.out.println(""String_Node_Str"");
  addAllVariableEntries(paramMap,spotDesign);
  addAllFixedEntries(paramMap,fixed);
  return paramMap;
}"
51491,"private static boolean isParentInDesign(Param<?> p,Map<String,String> sample) throws InPUTException {
  Element parent=p.getParentElement();
  if (parent.isRootElement())   return true;
  boolean flag=false;
  if (parent instanceof SParam || parent instanceof NParam) {
    if (parent instanceof SParam && ((SParam)parent).isComplex() && p instanceof SChoice) {
      String compl, choiceNumber;
      for (int j=1; j <= ((SParam)parent).getDimensions()[0]; j++) {
        compl=p.getParamId() + ""String_Node_Str"" + j;
        choiceNumber=sample.get(compl);
        if (isRelevantComplexChoice((SChoice)p,sample,(SParam)parent,compl,choiceNumber)) {
          flag=true;
          break;
        }
      }
    }
 else     flag=isParentInDesign((Param<?>)parent,sample);
  }
 else   if (parent instanceof SChoice) {
    flag=checkChoice(sample,parent,flag);
  }
  return flag;
}","private static boolean isParentInDesign(Param<?> p,Map<String,String> sample) throws InPUTException {
  Element parent=p.getParentElement();
  if (parent.isRootElement())   return true;
  boolean flag=false;
  if (parent instanceof SParam || parent instanceof NParam) {
    if (SpotDesignInitializer.isStructuralArrayType(parent) && p instanceof SChoice) {
      String compl, choiceNumber;
      for (int j=1; j <= ((SParam)parent).getDimensions()[0]; j++) {
        compl=p.getParamId() + ""String_Node_Str"" + j;
        choiceNumber=sample.get(compl);
        if (isRelevantComplexChoice((SChoice)p,sample,(SParam)parent,compl,choiceNumber)) {
          flag=true;
          break;
        }
      }
    }
 else     flag=isParentInDesign((Param<?>)parent,sample);
  }
 else   if (parent instanceof SChoice) {
    flag=checkChoice(sample,parent,flag);
  }
  return flag;
}"
51492,"public void feedbackSpot(IDesign result) throws InPUTException {
  feedbackSpotInMemory();
  saveSPOTWorkspace();
  currentRES.append(result,currentDES);
}","public void feedbackSpot(IDesign result) throws InPUTException {
  currentRES.append(result,currentDES);
  if (isFileMode())   feedbackResultInRESFile();
  saveSPOTWorkspace();
}"
51493,"public int initSequentialDesign() throws InPUTException {
  initSPOTSequentialDesign();
  saveSPOTWorkspace();
  currentDES=initializeDesign();
  return currentDES.size();
}","public int initSequentialDesign() throws InPUTException {
  writeResultsToSPOTProjectCache();
  initSPOTSequentialDesign();
  saveSPOTWorkspace();
  currentDES=initializeDesign();
  return currentDES.size();
}"
51494,"public String toSpot(){
  StringBuilder spotb=new StringBuilder();
  String spotHeader=headerToSpot();
  spotb.append(spotHeader);
  spotb.append('\n');
  for (  SpotResult result : allResults) {
    spotb.append(result.toSpot());
    spotb.append('\n');
  }
  return spotb.toString();
}","public String toSpot(List<SpotResult> results){
  StringBuilder spotb=new StringBuilder();
  String spotHeader=headerToSpot();
  spotb.append(spotHeader);
  spotb.append('\n');
  for (  SpotResult result : results)   spotb.append(result.toSpot());
  return spotb.toString();
}"
51495,"@Override public String toString(){
  return toSpot();
}","@Override public String toString(){
  return toSpot(allResults);
}"
51496,"@Override public InputStream export(){
  return new ByteArrayInputStream(toSpot().getBytes());
}","@Override public InputStream export(){
  return new ByteArrayInputStream(toSpot(allResults).getBytes());
}"
51497,"public String toSpot(){
  StringBuilder b=new StringBuilder();
  for (  String var : header) {
    b.append(variables.get(var));
    b.append(' ');
  }
  return b.toString();
}","public String toSpot(){
  StringBuilder b=new StringBuilder();
  for (  String var : header) {
    b.append(variables.get(var));
    b.append(' ');
  }
  b.append('\n');
  return b.toString();
}"
51498,"private Class<?> getClassForLocalContext(String identifier) throws InPUTException {
  Class<?> cLass=getClassForNumericParam(identifier);
  if (cLass == null) {
    cLass=getClassForGlobalContext(identifier);
    if (cLass == null) {
      Param<?> paramForId=ParamUtil.getParamForLocalId(identifier,param,ps);
      if (paramForId != null) {
        cLass=getClassForLocalParam(identifier,paramForId);
      }
    }
  }
  return cLass;
}","private Class<?> getClassForLocalContext(String identifier) throws InPUTException {
  Class<?> cLass=getClassForNumericParam(identifier);
  if (cLass == null) {
    cLass=getClassForGlobalContext(identifier);
    if (cLass == null) {
      Param<?> paramForId=ParamUtil.getParamForLocalId(identifier,param,ps);
      if (paramForId != null) {
        cLass=getClassForLocalParam(identifier,paramForId);
      }
    }
  }
  if (cLass == null) {
    Object value=InPUTConfig.getValue(identifier);
    if (value != null)     cLass=value.getClass();
  }
  return cLass;
}"
51499,"private Class<?> getClassForLocalParam(String identifier,Param<?> param) throws InPUTException {
  Class<?> cLass=null;
  if (param != null)   cLass=param.getInPUTClass();
  return cLass;
}","private Class<?> getClassForLocalParam(String identifier,Param<?> param) throws InPUTException {
  if (param == null)   return null;
  if (param.isArrayType())   return param.getArrayType();
  return param.getInPUTClass();
}"
51500,"private String getSpotNumericType(NParam param){
  if (param.isCountable())   return SPOT_COUNTABLE;
  return SPOT_NON_COUNTABLE;
}","private String getSpotNumericType(NParam param){
  if (param.isBoolean())   return SPOT_FACTOR;
  if (param.isCountable())   return SPOT_COUNTABLE;
  return SPOT_NON_COUNTABLE;
}"
51501,"private void writeResultsToSPOTProjectCache(){
  engine.eval(""String_Node_Str"" + currentRES.toString() + ""String_Node_Str"");
}","private void writeResultsToSPOTProjectCache(){
  runCommand(""String_Node_Str"" + currentRES.toString() + ""String_Node_Str"",false);
}"
51502,"private void initResultHeading(){
  engine.eval(""String_Node_Str"" + currentRES.toString() + ""String_Node_Str"");
}","private void initResultHeading(){
  runCommand(""String_Node_Str"" + currentRES.toString() + ""String_Node_Str"",false);
}"
51503,"private void checkSPOTIsInstalled() throws InPUTException {
  REXP spotInstalled=engine.eval(""String_Node_Str"");
  if (!spotInstalled.asBool().isTRUE())   throw new InPUTException(""String_Node_Str"");
}","private void checkSPOTIsInstalled() throws InPUTException {
  REXP spotInstalled=runCommand(""String_Node_Str"",true);
  if (!spotInstalled.asBool().isTRUE())   throw new InPUTException(""String_Node_Str"");
}"
51504,"private void initInverseFunction(){
  engine.eval(""String_Node_Str"",false);
}","private void initInverseFunction(){
  runCommand(""String_Node_Str"",false);
}"
51505,"public SpotDES initializeDesign() throws InPUTException {
  REXP designs=engine.eval(""String_Node_Str"");
  return new SpotDES(designs.asVector(),paramIds,inputROI);
}","public SpotDES initializeDesign() throws InPUTException {
  REXP designs=runCommand(""String_Node_Str"",true);
  return new SpotDES(designs.asVector(),paramIds,inputROI);
}"
51506,"public void initSPOTSequentialDesign(){
  engine.eval(""String_Node_Str"",false);
}","public void initSPOTSequentialDesign(){
  String command=""String_Node_Str"";
  runCommand(command,false);
}"
51507,"public SpotHelper(IInPUT input,IDesign config,String studyId) throws InPUTException {
  this.studyId=studyId;
  experimentalFolder=initExperimentalFolder(studyId,config);
  investigationId=initExperimentId(studyId,config,experimentalFolder);
  this.config=initConfig(investigationId,config);
  this.input=input;
  initInverseFunction();
  checkSPOTIsInstalled();
  inputROI=new SpotROI(input);
  outputROI=new SpotROI(input.getOutputSpace());
  currentRES=new SpotRES(inputROI,outputROI);
  initExperimentalFolder();
}","public SpotHelper(IInPUT input,IDesign config,String studyId) throws InPUTException {
  experimentalFolder=initExperimentalFolder(studyId,config);
  this.studyId=experimentalFolder.getName();
  investigationId=initExperimentId(studyId,config,experimentalFolder);
  this.config=initConfig(investigationId,config);
  this.input=input;
  initInverseFunction();
  checkSPOTIsInstalled();
  inputROI=new SpotROI(input);
  outputROI=new SpotROI(input.getOutputSpace());
  currentRES=new SpotRES(inputROI,outputROI);
  initExperimentalFolder();
}"
51508,"public void retrieveNextDesign(){
  paramIds=engine.eval(""String_Node_Str"").asStringArray();
}","public void retrieveNextDesign(){
  REXP expr=runCommand(""String_Node_Str"",true);
  paramIds=expr.asStringArray();
}"
51509,"public void initSPOTinitialDesign(){
  initInverseFunction();
  engine.eval(""String_Node_Str"",false);
}","public void initSPOTinitialDesign(){
  initInverseFunction();
  runCommand(""String_Node_Str"",false);
}"
51510,"public void initSPOTConfFileName(){
  engine.eval(""String_Node_Str"" + investigationId + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",false);
}","public void initSPOTConfFileName(){
  runCommand(""String_Node_Str"" + investigationId + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",false);
}"
51511,"public void reset(String studyId) throws InPUTException {
  this.studyId=studyId;
  engine.eval(""String_Node_Str"",false);
}","public void reset(String studyId) throws InPUTException {
  this.studyId=studyId;
  runCommand(""String_Node_Str"",false);
}"
51512,"private void saveSPOTWorkspace() throws InPUTException {
  String rData=initRelativeFileString(studyId,config,""String_Node_Str"");
  engine.eval(""String_Node_Str"" + rData + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",false);
  saveSPOTHistory();
}","private void saveSPOTWorkspace() throws InPUTException {
  runCommand(""String_Node_Str"" + studyId + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",false);
  saveSPOTHistory();
}"
51513,"private void saveSPOTHistory() throws InPUTException {
  String rHistory=initRelativeFileString(studyId,config,""String_Node_Str"");
  engine.eval(""String_Node_Str"" + rHistory + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",false);
}","private void saveSPOTHistory() throws InPUTException {
  runCommand(""String_Node_Str"" + studyId + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",false);
}"
51514,"private void initValues() throws InPUTException {
  Element root=design.getRootElement();
  List<Element> obsoletes=root.getChildren();
  Element[] obsoletesA=obsoletes.toArray(new Element[]{});
  for (int i=0; i < obsoletesA.length; i++) {
    if (isValueE(obsoletesA[i])) {
      Value<?> newE=createElement(obsoletesA[i],root);
      updateElementCache(newE);
    }
  }
}","private void initValues() throws InPUTException {
  Element root=design.getRootElement();
  List<Element> obsoletes=root.getChildren();
  Element[] obsoletesA=obsoletes.toArray(new Element[]{});
  List<String> paramIds=new ArrayList<String>();
  for (int i=0; i < obsoletesA.length; i++) {
    if (isValueE(obsoletesA[i])) {
      Value<?> newE=createElement(obsoletesA[i],root);
      paramIds.add(newE.getId());
      updateElementCache(newE);
    }
  }
  validateInitialValues(paramIds);
}"
51515,"private void updateCacheForIndexedValue(Value<?> parentValue) throws InPUTException {
  Element parent=parentValue.getParentElement();
  if (parent instanceof Value<?>) {
    parentValue=(Value<?>)parent;
    parentValue.getParam().init(parentValue,null,elementCache);
    updateElementCache(parentValue);
  }
}","private void updateCacheForIndexedValue(Value<?> parentValue) throws InPUTException {
  Element parent=parentValue.getParentElement();
  if (parent instanceof Value<?>) {
    updateElementCache(parentValue);
    parentValue=(Value<?>)parent;
    parentValue.getParam().init(parentValue,null,elementCache);
  }
}"
51516,"@Override public void setValue(final String paramId,Object value) throws InPUTException {
  Value<?> valueE;
  Param<?> param=ps.getParam(paramId);
  if (param != null) {
    param.validateInPUT(paramId,value,elementCache);
    if (param.isArrayType())     value=ParamUtil.repackArrayForImport(value);
    valueE=ValueFactory.constructElementByValue(value,param,param.getDimensions(),elementCache);
    setElement(paramId,valueE);
  }
 else {
    valueE=elementCache.get(paramId);
    if (valueE != null) {
      if (valueE.isParentInitialized())       valueE.getParam().validateInPUT(paramId,value,elementCache);
      if (valueE.isArrayType())       value=ParamUtil.repackArrayForImport(value);
      valueE.setInputValue(value);
      updateCacheForIndexedValue(valueE);
    }
 else     throw new InPUTException(""String_Node_Str"" + paramId + ""String_Node_Str"");
  }
}","@Override public void setValue(final String paramId,Object value) throws InPUTException {
  if (isReadOnly())   throw new InPUTException(""String_Node_Str"");
  Param<?> param=ps.getParam(paramId);
  if (param != null)   setValueForExplicitParam(paramId,value,param);
 else   setValueForNoneExplicitParam(paramId,value);
}"
51517,"private Map<String,Object> initVarsFromElementCache(ElementCache elementCache){
  Map<String,Object> dependencies=new HashMap<String,Object>();
  addDependencies(elementCache,dependencies,getMinDependencies());
  addDependencies(elementCache,dependencies,getMaxDependencies());
  return dependencies;
}","private Map<String,Object> initVarsFromElementCache(ElementCache elementCache) throws InPUTException {
  Map<String,Object> dependencies=new HashMap<String,Object>();
  addDependencies(elementCache,dependencies,getMinDependencies());
  addDependencies(elementCache,dependencies,getMaxDependencies());
  return dependencies;
}"
51518,"private void checkValidArrayType(String paramId,Object value,ElementCache elementCache) throws InPUTException {
  Value<?> current=elementCache.get(paramId);
  Object flag=value;
  if (current != null && current.getValue() != null) {
    Object currentValue=current.getInputValue(null);
    while (currentValue.getClass().isArray()) {
      currentValue=Array.get(currentValue,0);
      if (!flag.getClass().isArray())       throw new InPUTException(""String_Node_Str"" + paramId + ""String_Node_Str"");
      flag=Array.get(flag,0);
    }
    if (flag.getClass().isArray())     throw new InPUTException(""String_Node_Str"" + paramId + ""String_Node_Str"");
  }
}","private void checkValidArrayType(String paramId,Object newValue,ElementCache elementCache) throws InPUTException {
  Value<?> current=elementCache.get(paramId);
  if (current != null && current.getValue() != null) {
    Object currentValue=current.getInputValue(null);
    checkDimensionalityValidity(paramId,newValue,currentValue);
  }
  checkArrayEntriesRespectRange(newValue,elementCache);
}"
51519,"private void addDependencies(ElementCache elementCache,Map<String,Object> dependencies,Set<Param<?>> params){
  for (  Param<?> param : params)   dependencies.put(param.getId(),elementCache.get(param.getId()).getInputValue());
}","private void addDependencies(ElementCache elementCache,Map<String,Object> dependencies,Set<Param<?>> params) throws InPUTException {
  for (  Param<?> param : params)   dependencies.put(param.getId(),elementCache.get(param.getId()).getInputValue(null));
}"
51520,"public void checkValidity(String paramId,Object value,ElementCache elementCache) throws InPUTException {
  if (isOfValidPlainType(value)) {
    checkValidPlainValidity(paramId,value,elementCache);
  }
 else   if (value.getClass().isArray()) {
    checkValidArrayType(paramId,value,elementCache);
  }
 else   throw new InPUTException(""String_Node_Str"" + value.toString() + ""String_Node_Str""+ value.getClass().getName()+ ""String_Node_Str""+ type.getNumClass().getName()+ ""String_Node_Str""+ type.getPrimitiveClass().getName()+ ""String_Node_Str"");
}","public void checkValidity(String paramId,Object value,ElementCache elementCache) throws InPUTException {
  if (isOfValidPlainType(value)) {
    checkPlainValueValidity(paramId,value,elementCache);
  }
 else   if (value.getClass().isArray()) {
    checkValidArrayType(paramId,value,elementCache);
  }
 else   throw new InPUTException(""String_Node_Str"" + value.toString() + ""String_Node_Str""+ value.getClass().getName()+ ""String_Node_Str""+ type.getNumClass().getName()+ ""String_Node_Str""+ type.getPrimitiveClass().getName()+ ""String_Node_Str"");
}"
51521,"public void setFixed(String value) throws InPUTException {
  if (value != null) {
    setAttribute(Q.FIXED_ATTR,value);
  }
 else {
    removeAttribute(Q.FIXED_ATTR);
  }
  generator=initGenerator(true);
}","public void setFixed(String value) throws InPUTException {
  if (value == null)   removeAttribute(Q.FIXED_ATTR);
 else   if (isValidFixedValue(value))   setAttribute(Q.FIXED_ATTR,value);
 else   throw new InPUTException(""String_Node_Str"");
  generator=initGenerator(true);
}"
51522,"@Override public boolean isPlainValueElement(Value<?> valueElement){
  String valueString=valueElement.getAttributeValue(Q.VALUE_ATTR);
  return (valueString != null && !valueString.equals(Q.NULL)) || !isArrayType() || (isArrayType() && !getId().equals(getId()));
}","@Override public boolean isPlainValueElement(Value<?> valueElement){
  String valueString=valueElement.getAttributeValue(Q.VALUE_ATTR);
  return (isValidFixedValue(valueString) && !valueString.equals(Q.NULL)) || !isArrayType() || (isArrayType() && !getId().equals(getId()));
}"
51523,"@Override protected NumericGenerator initGenerator(boolean initRanges) throws InPUTException {
  String fixedValue=getFixedValue();
  NumericGenerator generator;
  if (fixedValue != null)   generator=new FixedNumericGenerator(this,fixedValue);
 else {
    generator=new RandomNumericGenerator(this,initRandom(ps));
  }
  if (initRanges) {
    generator.initRanges();
  }
  return generator;
}","@Override protected NumericGenerator initGenerator(boolean initRanges) throws InPUTException {
  String fixedValue=getFixedValue();
  NumericGenerator generator;
  if (isValidFixedValue(fixedValue))   generator=new FixedNumericGenerator(this,fixedValue);
 else {
    generator=new RandomNumericGenerator(this,initRandom(ps));
  }
  if (initRanges) {
    generator.initRanges();
  }
  return generator;
}"
51524,"public void setFixed(String value) throws InPUTException {
  if (value != null) {
    setAttribute(Q.FIXED_ATTR,value);
  }
 else   removeAttribute(Q.FIXED_ATTR);
  generator=initGenerator(true);
}","public void setFixed(String value) throws InPUTException {
  if (value == null)   removeAttribute(Q.FIXED_ATTR);
 else   if (getChoiceById(value) != null)   setAttribute(Q.FIXED_ATTR,value);
 else   throw new InPUTException(""String_Node_Str"" + value + ""String_Node_Str""+ getId()+ ""String_Node_Str"");
  generator=initGenerator(true);
}"
51525,"private void checkMaxima(Comparable<Comparable<?>> theValue,Ranges evaluatedRanges){
  Comparable<?>[] extremas=evaluatedRanges.getStrongTypedMax();
  if (extremas == null || extremas.length == 0)   return;
  boolean violates=true;
  for (  Comparable<?> extrema : extremas) {
    if (theValue.compareTo(extrema) <= 0) {
      violates=false;
      break;
    }
  }
  if (violates)   throw new IllegalArgumentException(spaceId + ""String_Node_Str"" + theValue+ ""String_Node_Str""+ paramId+ ""String_Node_Str""+ extremas[0]+ ""String_Node_Str"");
}","private void checkMaxima(Comparable<Comparable<?>> theValue,Ranges evaluatedRanges){
  Comparable<?>[] extremas=evaluatedRanges.getStrongTypedMax();
  if (extremas == null || extremas.length == 0)   return;
  Comparable<?> violated=null;
  for (  Comparable<?> extrema : extremas) {
    if (theValue.compareTo(extrema) > 0) {
      violated=extrema;
      break;
    }
  }
  if (violated != null)   throw new IllegalArgumentException(spaceId + ""String_Node_Str"" + theValue+ ""String_Node_Str""+ paramId+ ""String_Node_Str""+ violated+ ""String_Node_Str"");
}"
51526,"private void checkMinima(Comparable<Comparable<?>> theValue,Ranges evaluatedRanges){
  Comparable<?>[] extremas=evaluatedRanges.getStrongTypedMin();
  if (extremas == null || extremas.length == 0)   return;
  boolean violates=true;
  for (  Comparable<?> extrema : extremas) {
    if (theValue.compareTo(extrema) >= 0) {
      violates=false;
      break;
    }
  }
  if (violates)   throw new IllegalArgumentException(spaceId + ""String_Node_Str"" + theValue+ ""String_Node_Str""+ paramId+ ""String_Node_Str""+ min[0]+ ""String_Node_Str"");
}","private void checkMinima(Comparable<Comparable<?>> theValue,Ranges evaluatedRanges){
  Comparable<?>[] extremas=evaluatedRanges.getStrongTypedMin();
  if (extremas == null || extremas.length == 0)   return;
  Comparable<?> violated=null;
  for (  Comparable<?> extrema : extremas) {
    if (theValue.compareTo(extrema) < 0) {
      violated=extrema;
      break;
    }
  }
  if (violated != null)   throw new IllegalArgumentException(spaceId + ""String_Node_Str"" + theValue+ ""String_Node_Str""+ paramId+ ""String_Node_Str""+ violated+ ""String_Node_Str"");
}"
51527,"private DesignSpace initDesignSpace(String filePath,String ref) throws InPUTException {
  if (ref == null) {
    throw new InPUTException(""String_Node_Str"" + getId() + ""String_Node_Str""+ filePath+ ""String_Node_Str"");
  }
  DesignSpace designSpace=DesignSpace.lookup(ref);
  if (designSpace != null)   return designSpace;
  if (!ref.contains(Q.XML))   ref+=Q.XML;
  Document space=SAXUtil.build(ref,InPUTConfig.isValidationActive());
  return new DesignSpace(space);
}","private DesignSpace initDesignSpace(String filePath,String ref) throws InPUTException {
  if (ref == null) {
    throw new InPUTException(""String_Node_Str"" + getId() + ""String_Node_Str""+ filePath+ ""String_Node_Str"");
  }
  DesignSpace designSpace=DesignSpace.lookup(ref);
  if (designSpace != null)   return designSpace;
  if (!ref.contains(Q.XML))   ref+=Q.XML;
  Document space=SAXUtil.build(ref,InPUTConfig.isValidationActive());
  return new DesignSpace(space,ref);
}"
51528,"/** 
 * Has as a consequence, that from after its execution, no write operations are allowed anymore, and will lead to the throwing of InPUTExceptions.
 */
void setReadOnly();","/** 
 * Subsequent calls to   {@link #setValue(String,Object) setValue} willthrow an InPUTExceptions.
 */
void setReadOnly();"
51529,"@Override public int getPlaceholderIndex(String placeholderName){
  int idx=0;
  if (m_havingClause != null)   idx=m_havingClause.getPlaceholderIndex(placeholderName);
  if (idx == 0 && m_where != null)   idx=m_where.getPlaceholderIndex(placeholderName);
  return idx;
}","@Override public int getPlaceholderIndex(String placeholderName){
  int idx=0;
  if (m_havingClause != null)   idx=m_havingClause.getPlaceholderIndex(placeholderName);
  if (idx == 0 && m_where != null)   idx=m_where.getPlaceholderIndex(placeholderName);
  if (idx == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  return idx;
}"
51530,"public static void main(String... args) throws SQLException, ClassNotFoundException {
  QbFactory fac=new QbFactoryImp();
  insertTests(fac);
  deleteTests(fac);
  selectTests(fac);
  placeholderTests(fac);
  whereTests(fac);
  updateTests(fac);
  Sample.sample();
  System.out.println(""String_Node_Str"");
}","public static void main(String... args) throws SQLException, ClassNotFoundException {
  QbFactory fac=new QbFactoryImp();
  insertTests(fac);
  deleteTests(fac);
  selectTests(fac);
  placeholderTests(fac);
  whereTests(fac);
  updateTests(fac);
  exceptionTests(fac);
  Sample.sample();
  System.out.println(""String_Node_Str"");
}"
51531,"@Override public int getPlaceholderIndex(String placeholderName){
  if (m_placeholders == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Integer idx=m_placeholders.get(placeholderName);
  if (idx == null) {
    idx=m_where.getPlaceholderIndex(placeholderName);
    if (idx == null)     throw new IllegalArgumentException(""String_Node_Str"");
  }
  return idx;
}","@Override public int getPlaceholderIndex(String placeholderName){
  if (m_placeholders == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Integer idx=m_placeholders.get(placeholderName);
  if (idx == null) {
    idx=m_where.getPlaceholderIndex(placeholderName);
    if (idx == 0)     throw new IllegalArgumentException(""String_Node_Str"");
  }
  return idx;
}"
51532,"@Override public String getQueryString(){
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  if (m_table == null)   throw new IllegalStateException(""String_Node_Str"");
  if (m_selectFields == null)   throw new IllegalStateException(""String_Node_Str"");
  if (m_distinct)   builder.append(""String_Node_Str"");
  int fieldCount=0;
  for (  QbField field : m_selectFields) {
    builder.append(field.toString());
    if (fieldCount != m_selectFields.length - 1) {
      builder.append(',');
      builder.append(' ');
    }
    fieldCount++;
  }
  builder.append(""String_Node_Str"");
  builder.append(QbCommonImp.protectTableName(m_table));
  builder.append(' ');
  if (m_where != null)   builder.append(m_where.toString());
  if (m_joinList != null) {
    for (    JoinInfo join : m_joinList) {
      String joinStr=joinTypeToString(join.joinType);
      builder.append(joinStr);
      builder.append(' ');
      builder.append(QbCommonImp.protectTableName(join.table));
      builder.append(""String_Node_Str"");
      builder.append(join.leftSide.toString());
      builder.append(""String_Node_Str"");
      builder.append(join.rightSide.toString());
    }
  }
  if (m_groupBy != null) {
    builder.append(""String_Node_Str"");
    fieldCount=0;
    for (    QbField field : m_groupBy) {
      builder.append(field.toString());
      if (fieldCount != m_groupBy.length - 1) {
        builder.append(',');
        builder.append(' ');
      }
    }
    fieldCount++;
  }
  if (m_havingClause != null)   builder.append(m_havingClause.toString());
  if (m_orderBy != null) {
    builder.append(""String_Node_Str"");
    fieldCount=0;
    for (    QbField field : m_orderBy) {
      builder.append(field.toString());
      if (fieldCount != m_orderBy.length - 1) {
        builder.append(',');
        builder.append(' ');
      }
      fieldCount++;
    }
    builder.append(m_orderByOrder.toString());
  }
  if (m_haveLimit) {
    builder.append(""String_Node_Str"");
    builder.append(m_offset);
    builder.append(',');
    builder.append(' ');
    builder.append(m_limit);
  }
  return builder.toString();
}","@Override public String getQueryString(){
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  if (m_table == null)   throw new IllegalStateException(""String_Node_Str"");
  if (m_selectFields == null)   throw new IllegalStateException(""String_Node_Str"");
  if (m_distinct)   builder.append(""String_Node_Str"");
  int fieldCount=0;
  for (  QbField field : m_selectFields) {
    builder.append(field.toString());
    if (fieldCount != m_selectFields.length - 1) {
      builder.append(',');
      builder.append(' ');
    }
    fieldCount++;
  }
  builder.append(""String_Node_Str"");
  builder.append(QbCommonImp.protectTableName(m_table));
  builder.append(' ');
  if (m_joinList != null) {
    for (    JoinInfo join : m_joinList) {
      String joinStr=joinTypeToString(join.joinType);
      builder.append(joinStr);
      builder.append(""String_Node_Str"");
      builder.append(QbCommonImp.protectTableName(join.table));
      builder.append(""String_Node_Str"");
      builder.append(join.leftSide.toString());
      builder.append(""String_Node_Str"");
      builder.append(join.rightSide.toString());
    }
  }
  if (m_where != null)   builder.append(m_where.toString());
  if (m_groupBy != null) {
    builder.append(""String_Node_Str"");
    fieldCount=0;
    for (    QbField field : m_groupBy) {
      builder.append(field.toString());
      if (fieldCount != m_groupBy.length - 1) {
        builder.append(',');
        builder.append(' ');
      }
      fieldCount++;
    }
  }
  if (m_havingClause != null)   builder.append(m_havingClause.toString());
  if (m_orderBy != null) {
    builder.append(""String_Node_Str"");
    fieldCount=0;
    for (    QbField field : m_orderBy) {
      builder.append(field.toString());
      if (fieldCount != m_orderBy.length - 1) {
        builder.append(',');
        builder.append(' ');
      }
      fieldCount++;
    }
    builder.append(' ');
    builder.append(m_orderByOrder.toString());
  }
  if (m_haveLimit) {
    builder.append(""String_Node_Str"");
    builder.append(m_offset);
    builder.append(',');
    builder.append(' ');
    builder.append(m_limit);
  }
  return builder.toString();
}"
51533,"static void selectTests(QbFactory fac){
  QbSelect select=fac.newSelectQuery();
  select.select(fac.newAllField());
  select.from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  System.out.println(select.getQueryString());
}","static void selectTests(QbFactory fac){
  QbSelect select=fac.newSelectQuery();
  select.select(fac.newAllField());
  select.from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newAllField(""String_Node_Str""));
  select.from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newSum(fac.newStdField(""String_Node_Str""),""String_Node_Str""));
  select.from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newAvg(fac.newStdField(""String_Node_Str""),null));
  select.from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""));
  select.from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newMax(fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
  select.from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""));
  select.from(""String_Node_Str"");
  select.join(""String_Node_Str"",fac.newStdField(""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""));
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""));
  select.from(""String_Node_Str"");
  select.join(""String_Node_Str"",fac.newStdField(""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""),QbJoinType.INNER);
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""));
  select.from(""String_Node_Str"");
  select.join(""String_Node_Str"",fac.newStdField(""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""),QbJoinType.INNER);
  select.join(""String_Node_Str"",fac.newStdField(""String_Node_Str""),fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""));
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.distinct().select(fac.newStdField(""String_Node_Str"")).from(""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newMin(fac.newStdField(""String_Node_Str""),""String_Node_Str"")).from(""String_Node_Str"").groupBy(fac.newStdField(""String_Node_Str""),fac.newStdField(""String_Node_Str""));
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newMax(fac.newStdField(""String_Node_Str""),""String_Node_Str"")).from(""String_Node_Str"").groupBy(fac.newQualifiedField(""String_Node_Str"",""String_Node_Str""));
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery().distinct().select(fac.newAllField()).from(""String_Node_Str"").limit(0,100);
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery();
  select.select(fac.newCount(fac.newStdField(""String_Node_Str""),""String_Node_Str"")).from(""String_Node_Str"").groupBy(fac.newStdField(""String_Node_Str"")).having().where(fac.newStdField(""String_Node_Str""),""String_Node_Str"");
  assert(select.getQueryString().equals(""String_Node_Str""));
  select=fac.newSelectQuery().select(fac.newStdField(""String_Node_Str"")).distinct().from(""String_Node_Str"").orderBy(QbOrderBy.ASC,fac.newStdField(""String_Node_Str""));
  assert(select.getQueryString().equals(""String_Node_Str""));
  System.out.println(select.getQueryString());
}"
51534,"@Override public String getQueryString(){
  if (m_fields == null || m_table == null || m_placeholders == null)   throw new IllegalStateException(""String_Node_Str"");
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  builder.append(QbCommonImp.protectTableName(m_table));
  builder.append('(');
  for (  QbField field : m_fields) {
    builder.append(field.toString());
    builder.append(',');
    builder.append(' ');
  }
  builder.append(""String_Node_Str"");
  for (int i=0; i < m_fields.size(); i++) {
    builder.append('?');
    builder.append(',');
    builder.append(' ');
  }
  builder.append(')');
  return builder.toString();
}","@Override public String getQueryString(){
  if (m_fields == null || m_table == null || m_placeholders == null)   throw new IllegalStateException(""String_Node_Str"");
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  builder.append(QbCommonImp.protectTableName(m_table));
  builder.append('(');
  int fieldCnt=0;
  for (  QbField field : m_fields) {
    builder.append(field.toString());
    if (fieldCnt != m_fields.size() - 1) {
      builder.append(',');
      builder.append(' ');
    }
    fieldCnt++;
  }
  builder.append(""String_Node_Str"");
  for (int i=0; i < m_fields.size(); i++) {
    builder.append('?');
    builder.append(',');
    builder.append(' ');
  }
  builder.append(')');
  return builder.toString();
}"
51535,"@Override public int getPlaceholderIndex(String placeholderName){
  if (m_placeholders == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Integer idx=m_placeholders.get(placeholderName);
  if (idx == null)   throw new IllegalArgumentException(""String_Node_Str"");
 else   return idx;
}","@Override public int getPlaceholderIndex(String placeholderName){
  if (m_placeholders == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Integer idx=m_placeholders.get(placeholderName);
  if (idx == null) {
    idx=m_where.getPlaceholderIndex(placeholderName);
    if (idx == null)     throw new IllegalArgumentException(""String_Node_Str"");
  }
  return idx;
}"
51536,"public static void main(String... args){
  QbFactory fac=new QbFactoryImp();
  insertTests(fac);
  deleteTests(fac);
  selectTests(fac);
  placeholderTests(fac);
  whereTests(fac);
}","public static void main(String... args){
  QbFactory fac=new QbFactoryImp();
  insertTests(fac);
  deleteTests(fac);
  selectTests(fac);
  placeholderTests(fac);
  whereTests(fac);
  updateTests(fac);
}"
51537,"static void whereTests(QbFactory fac){
  QbSelect sel=fac.newSelectQuery();
  sel.select(fac.newStdField(""String_Node_Str"")).from(""String_Node_Str"").where().where(fac.newStdField(""String_Node_Str""),QbWhereOperator.NOT_EQUALS,""String_Node_Str"").orWhere(fac.newStdField(""String_Node_Str""),""String_Node_Str"");
  assert(sel.getQueryString().equals(""String_Node_Str""));
  assert(sel.getPlaceholderIndex(""String_Node_Str"") == 2);
  sel=fac.newSelectQuery();
  sel.select(fac.newStdField(""String_Node_Str"")).from(""String_Node_Str"").where().where(""String_Node_Str"").whereNotIn(fac.newStdField(""String_Node_Str""),""String_Node_Str"",10).orWhereNotIn(fac.newStdField(""String_Node_Str""),""String_Node_Str"",5);
  assert(sel.getQueryString().equals(""String_Node_Str""));
  assert(sel.getPlaceholderIndex(""String_Node_Str"") == 11);
}","static void whereTests(QbFactory fac){
  QbSelect sel=fac.newSelectQuery();
  sel.select(fac.newStdField(""String_Node_Str"")).from(""String_Node_Str"").where().where(fac.newStdField(""String_Node_Str""),QbWhereOperator.NOT_EQUALS,""String_Node_Str"").orWhere(fac.newStdField(""String_Node_Str""),""String_Node_Str"");
  assert(sel.getQueryString().equals(""String_Node_Str""));
  assert(sel.getPlaceholderIndex(""String_Node_Str"") == 2);
  sel=fac.newSelectQuery();
  sel.select(fac.newStdField(""String_Node_Str"")).from(""String_Node_Str"").where().where(""String_Node_Str"").whereNotIn(fac.newStdField(""String_Node_Str""),""String_Node_Str"",10).orWhereNotIn(fac.newStdField(""String_Node_Str""),""String_Node_Str"",5);
  assert(sel.getQueryString().equals(""String_Node_Str""));
  assert(sel.getPlaceholderIndex(""String_Node_Str"") == 11);
  sel=fac.newSelectQuery();
  sel.select(fac.newStdField(""String_Node_Str"")).from(""String_Node_Str"").where().where(fac.newStdField(""String_Node_Str""),QbWhereOperator.LIKE,""String_Node_Str"");
  assert(sel.getQueryString().equals(""String_Node_Str""));
  assert(sel.getPlaceholderIndex(""String_Node_Str"") == 1);
  sel=fac.newSelectQuery();
  sel.select(fac.newStdField(""String_Node_Str""),fac.newStdField(""String_Node_Str"")).from(""String_Node_Str"").where().where(fac.newStdField(""String_Node_Str""),""String_Node_Str"").orWhere(fac.newStdField(""String_Node_Str""),QbWhereOperator.NOT_LIKE,""String_Node_Str"");
  assert(sel.getQueryString().equals(""String_Node_Str""));
  assert(sel.getPlaceholderIndex(""String_Node_Str"") == 1);
  assert(sel.getPlaceholderIndex(""String_Node_Str"") == 2);
}"
51538,"/** 
 * Called when the Save this event button is pressed on the Edit event form
 * @param id - database ID of the Event to be modified
 * @return a redirect to the Events page which should show the list of Events with the modified event
 */
@Transactional public static Result updateEvent(Long id){
  Form<Event> eventForm=form(Event.class).bindFromRequest();
  if (eventForm.hasErrors()) {
    return badRequest(views.html.editEvent.render(id,eventForm,new Event(),makeProgramMap()));
  }
  Event newEventForm=eventForm.get();
  EiEvent event=JPA.em().find(EiEvent.class,id);
  Date currentDate=new Date();
  GregorianCalendar calendar=new GregorianCalendar();
  calendar.setTime(currentDate);
  XMLGregorianCalendar xCalendar=datatypeFactory.newXMLGregorianCalendar(calendar);
  xCalendar.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  JAXBElement<SignalPayload> signalPayload=objectFactory.createSignalPayload(new SignalPayload(new PayloadFloat(1)));
  String contextName=JPA.em().find(Program.class,Long.parseLong(newEventForm.getMarketContext())).getProgramName();
  Intervals intervals=new Intervals();
  ArrayList<Interval> intervalList=new ArrayList<Interval>();
  for (int i=0; i < newEventForm.getIntervals(); i++) {
    intervalList.add(new Interval().withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(event.getEiActivePeriod().getProperties().getDuration().getDuration().getValue()))))).withUid(new Uid().withText(""String_Node_Str"" + i)).withStreamPayloadBase(signalPayload));
  }
  intervals.setIntervals(intervalList);
  event.setEiActivePeriod(new EiActivePeriod().withProperties(new Properties().withDtstart(new Dtstart().withDateTime(new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize()))).withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(event.getEiActivePeriod().getProperties().getDuration().getDuration().getValue(),(int)newEventForm.getIntervals()))))).withTolerance(new Tolerance().withTolerate(new Tolerate().withStartafter(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str""))))))).withXEiNotification(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRampUp(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRecovery(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str""))))))));
  event.setEiTarget(new EiTarget());
  event.setEventDescriptor(new EventDescriptor().withCreatedDateTime(new DateTime().withValue(xCalendar)).withEiMarketContext(new EiMarketContext().withMarketContext(new MarketContext().withValue(contextName))).withEventID(newEventForm.getEventID()).withEventStatus(updateStatus(event,(int)newEventForm.getIntervals())).withModificationNumber(event.getEventDescriptor().getModificationNumber() + 1).withPriority(newEventForm.getPriority()).withTestEvent(""String_Node_Str"").withVtnComment(""String_Node_Str""));
  event.setEiEventSignals(new EiEventSignals().withEiEventSignals(new EiEventSignal().withCurrentValue(new CurrentValue().withPayloadFloat(new PayloadFloat().withValue(updateSignalPayload(event)))).withIntervals(new Intervals().withIntervals(intervalList)).withSignalID(""String_Node_Str"").withSignalName(""String_Node_Str"").withSignalType(SignalTypeEnumeratedType.LEVEL)));
  JPA.em().merge(event);
  flash(""String_Node_Str"",""String_Node_Str"");
  return redirect(routes.Events.events());
}","/** 
 * Called when the Save this event button is pressed on the Edit event form
 * @param id - database ID of the Event to be modified
 * @return a redirect to the Events page which should show the list of Events with the modified event
 */
@Transactional public static Result updateEvent(Long id){
  Form<Event> eventForm=form(Event.class).bindFromRequest();
  if (eventForm.hasErrors()) {
    return badRequest(views.html.editEvent.render(id,eventForm,new Event(),makeProgramMap()));
  }
  Event newEventForm=eventForm.get();
  EiEvent event=JPA.em().find(EiEvent.class,id);
  Date currentDate=new Date();
  GregorianCalendar calendar=new GregorianCalendar();
  calendar.setTime(currentDate);
  XMLGregorianCalendar xCalendar=datatypeFactory.newXMLGregorianCalendar(calendar);
  xCalendar.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  JAXBElement<SignalPayload> signalPayload=objectFactory.createSignalPayload(new SignalPayload(new PayloadFloat(1)));
  String contextName=JPA.em().find(Program.class,Long.parseLong(newEventForm.getMarketContext())).getProgramName();
  Intervals intervals=new Intervals();
  ArrayList<Interval> intervalList=new ArrayList<Interval>();
  for (int i=0; i < newEventForm.getIntervals(); i++) {
    intervalList.add(new Interval().withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(event))))).withUid(new Uid().withText(""String_Node_Str"" + i)).withStreamPayloadBase(signalPayload));
  }
  intervals.setIntervals(intervalList);
  event.setEiActivePeriod(new EiActivePeriod().withProperties(new Properties().withDtstart(new Dtstart().withDateTime(new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize()))).withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(event,(int)newEventForm.getIntervals()))))).withTolerance(new Tolerance().withTolerate(new Tolerate().withStartafter(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str""))))))).withXEiNotification(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRampUp(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRecovery(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str""))))))));
  event.setEiTarget(new EiTarget());
  event.setEventDescriptor(new EventDescriptor().withCreatedDateTime(new DateTime().withValue(xCalendar)).withEiMarketContext(new EiMarketContext().withMarketContext(new MarketContext().withValue(contextName))).withEventID(newEventForm.getEventID()).withEventStatus(updateStatus(event,(int)newEventForm.getIntervals())).withModificationNumber(event.getEventDescriptor().getModificationNumber() + 1).withPriority(newEventForm.getPriority()).withTestEvent(""String_Node_Str"").withVtnComment(""String_Node_Str""));
  event.setEiEventSignals(new EiEventSignals().withEiEventSignals(new EiEventSignal().withCurrentValue(new CurrentValue().withPayloadFloat(new PayloadFloat().withValue(updateSignalPayload(event)))).withIntervals(new Intervals().withIntervals(intervalList)).withSignalID(""String_Node_Str"").withSignalName(""String_Node_Str"").withSignalType(SignalTypeEnumeratedType.LEVEL)));
  JPA.em().merge(event);
  flash(""String_Node_Str"",""String_Node_Str"");
  return redirect(routes.Events.events());
}"
51539,"/** 
 * Updates the EventStatus based on the current time and time of the event
 * @param event - the event to have the EventStatus updated
 * @param intervals - the number of time intervals contained in the 
 * @return the EventStatusEnumeratedType the EventStatus should be set to
 */
@Transactional public static EventStatusEnumeratedType updateStatus(EiEvent event,int intervals){
  DatatypeFactory df=null;
  try {
    df=DatatypeFactory.newInstance();
  }
 catch (  DatatypeConfigurationException e) {
    e.printStackTrace();
  }
  Date currentDate=new Date();
  GregorianCalendar calendar=new GregorianCalendar();
  calendar.setTime(currentDate);
  XMLGregorianCalendar xCalendar=df.newXMLGregorianCalendar(calendar);
  xCalendar.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  DateTime currentTime=new DateTime().withValue(xCalendar);
  DateTime startTime=new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize());
  DateTime endTime=new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize());
  DateTime rampUpTime=new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize());
  rampUpTime.getValue().add(getDuration(event.getEiActivePeriod().getProperties().getXEiRampUp().getDuration().getValue()));
  Duration d=getDuration(event.getEiActivePeriod().getProperties().getDuration().getDuration().getValue(),intervals);
  endTime.getValue().add(d);
  if (currentTime.getValue().compare(startTime.getValue()) == -1) {
    if (currentTime.getValue().compare(rampUpTime.getValue()) == -1) {
      return EventStatusEnumeratedType.FAR;
    }
 else {
      return EventStatusEnumeratedType.NEAR;
    }
  }
 else   if (currentTime.getValue().compare(startTime.getValue()) > 0 && currentTime.getValue().compare(endTime.getValue()) == -1) {
    return EventStatusEnumeratedType.ACTIVE;
  }
 else   if (currentTime.getValue().compare(endTime.getValue()) > 0) {
    return EventStatusEnumeratedType.COMPLETED;
  }
 else {
    return EventStatusEnumeratedType.NONE;
  }
}","/** 
 * Updates the EventStatus based on the current time and time of the event
 * @param event - the event to have the EventStatus updated
 * @param intervals - the number of time intervals contained in the 
 * @return the EventStatusEnumeratedType the EventStatus should be set to
 */
@Transactional public static EventStatusEnumeratedType updateStatus(EiEvent event,int intervals){
  DatatypeFactory df=null;
  try {
    df=DatatypeFactory.newInstance();
  }
 catch (  DatatypeConfigurationException e) {
    e.printStackTrace();
  }
  Date currentDate=new Date();
  GregorianCalendar calendar=new GregorianCalendar();
  calendar.setTime(currentDate);
  XMLGregorianCalendar xCalendar=df.newXMLGregorianCalendar(calendar);
  xCalendar.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  DateTime currentTime=new DateTime().withValue(xCalendar);
  DateTime startTime=new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize());
  DateTime endTime=new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize());
  DateTime rampUpTime=new DateTime().withValue(event.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize());
  rampUpTime.getValue().add(getDuration(event.getEiActivePeriod().getProperties().getXEiRampUp().getDuration().getValue()));
  Duration d=getDuration(event,intervals);
  endTime.getValue().add(d);
  if (currentTime.getValue().compare(startTime.getValue()) == -1) {
    if (currentTime.getValue().compare(rampUpTime.getValue()) == -1) {
      return EventStatusEnumeratedType.FAR;
    }
 else {
      return EventStatusEnumeratedType.NEAR;
    }
  }
 else   if (currentTime.getValue().compare(startTime.getValue()) > 0 && currentTime.getValue().compare(endTime.getValue()) == -1) {
    return EventStatusEnumeratedType.ACTIVE;
  }
 else   if (currentTime.getValue().compare(endTime.getValue()) > 0) {
    return EventStatusEnumeratedType.COMPLETED;
  }
 else {
    return EventStatusEnumeratedType.NONE;
  }
}"
51540,"/** 
 * The default page render for Events, inclusive of ordering of EiEvents based on their start DateTime, in ascending order
 * @return the rendered views.html.events page with a sorted list of EiEventsfrom the EiEventComparator class
 */
@SuppressWarnings(""String_Node_Str"") @Transactional public static Result events(){
  /** 
 * Comparator to return the ordering of the two EiEvents based on start time
 * @author Jeff LaJoie       
 */
class EiEventComparator implements Comparator<EiEvent> {
    public int compare(    EiEvent eventOne,    EiEvent eventTwo){
      return eventOne.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().compare(eventTwo.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue());
    }
  }
  Date currentDate=new Date();
  GregorianCalendar calendar=new GregorianCalendar();
  calendar.setTime(currentDate);
  XMLGregorianCalendar xCalendar=datatypeFactory.newXMLGregorianCalendar(calendar);
  xCalendar.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  List<EiEvent> eiEvents=JPA.em().createQuery(""String_Node_Str"").getResultList();
  Collections.sort(eiEvents,new EiEventComparator());
  for (  EiEvent e : eiEvents) {
    e.getEventDescriptor().withCreatedDateTime(new DateTime().withValue(xCalendar));
    if (!e.getEventDescriptor().getEventStatus().equals(EventStatusEnumeratedType.CANCELLED))     e.getEventDescriptor().setEventStatus(updateStatus(e,e.getEiEventSignals().getEiEventSignals().size()));
    for (    EiEventSignal eventSignal : e.getEiEventSignals().getEiEventSignals()) {
      eventSignal.setCurrentValue(new CurrentValue().withPayloadFloat(new PayloadFloat().withValue(updateSignalPayload(e))));
    }
  }
  return ok(views.html.events.render(eiEvents,new Event()));
}","/** 
 * The default page render for Events, inclusive of ordering of EiEvents based on their start DateTime, in ascending order
 * @return the rendered views.html.events page with a sorted list of EiEventsfrom the EiEventComparator class
 */
@SuppressWarnings(""String_Node_Str"") @Transactional public static Result events(){
  return ok(views.html.events.render());
}"
51541,"/** 
 * Takes the Event form pulled from the scala.html and crafts
 * @param newEventForm - the wrapper from the scala.html form for EiEvent
 * @return the EiEvent built from the Event wrapper
 */
public static EiEvent buildEventFromForm(Event newEventForm){
  Date currentDate=new Date();
  GregorianCalendar calendar=new GregorianCalendar();
  calendar.setTime(currentDate);
  XMLGregorianCalendar xCalendar=datatypeFactory.newXMLGregorianCalendar(calendar);
  xCalendar.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  JAXBElement<SignalPayload> signalPayload=objectFactory.createSignalPayload(new SignalPayload(new PayloadFloat(1)));
  String contextName=JPA.em().find(Program.class,Long.parseLong(newEventForm.getMarketContext())).getProgramName();
  Intervals intervals=new Intervals();
  ArrayList<Interval> intervalList=new ArrayList<Interval>();
  EiEvent newEvent=newEventForm.toEiEvent();
  for (int i=0; i < newEventForm.getIntervals(); i++) {
    intervalList.add(new Interval().withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(newEvent.getEiActivePeriod().getProperties().getDuration().getDuration().getValue()))))).withUid(new Uid().withText(""String_Node_Str"" + i)).withStreamPayloadBase(signalPayload));
  }
  intervals.setIntervals(intervalList);
  newEvent.withEiActivePeriod(new EiActivePeriod().withProperties(new Properties().withDtstart(new Dtstart().withDateTime(new DateTime().withValue(newEvent.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize()))).withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(newEvent.getEiActivePeriod().getProperties().getDuration().getDuration().getValue(),(int)newEventForm.getIntervals()))))).withTolerance(new Tolerance().withTolerate(new Tolerate().withStartafter(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str""))))))).withXEiNotification(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRampUp(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRecovery(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))))).withEiTarget(new EiTarget()).withEventDescriptor(new EventDescriptor().withCreatedDateTime(new DateTime().withValue(xCalendar)).withEiMarketContext(new EiMarketContext().withMarketContext(new MarketContext().withValue(contextName))).withEventID(newEventForm.getEventID()).withEventStatus(updateStatus(newEvent,(int)newEventForm.getIntervals())).withModificationNumber(0).withPriority(newEventForm.getPriority()).withTestEvent(""String_Node_Str"").withVtnComment(""String_Node_Str"")).withEiEventSignals(new EiEventSignals().withEiEventSignals(new EiEventSignal().withCurrentValue(new CurrentValue().withPayloadFloat(new PayloadFloat().withValue(updateSignalPayload(newEvent)))).withIntervals(new Intervals().withIntervals(intervalList)).withSignalID(""String_Node_Str"").withSignalName(""String_Node_Str"").withSignalType(SignalTypeEnumeratedType.LEVEL)));
  return newEvent;
}","/** 
 * Takes the Event form pulled from the scala.html and crafts
 * @param newEventForm - the wrapper from the scala.html form for EiEvent
 * @return the EiEvent built from the Event wrapper
 */
public static EiEvent buildEventFromForm(Event newEventForm){
  Date currentDate=new Date();
  GregorianCalendar calendar=new GregorianCalendar();
  calendar.setTime(currentDate);
  XMLGregorianCalendar xCalendar=datatypeFactory.newXMLGregorianCalendar(calendar);
  xCalendar.setTimezone(DatatypeConstants.FIELD_UNDEFINED);
  JAXBElement<SignalPayload> signalPayload=objectFactory.createSignalPayload(new SignalPayload(new PayloadFloat(1)));
  String contextName=JPA.em().find(Program.class,Long.parseLong(newEventForm.getMarketContext())).getProgramName();
  Intervals intervals=new Intervals();
  ArrayList<Interval> intervalList=new ArrayList<Interval>();
  EiEvent newEvent=newEventForm.toEiEvent();
  for (int i=0; i < newEventForm.getIntervals(); i++) {
    intervalList.add(new Interval().withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(newEvent))))).withUid(new Uid().withText(""String_Node_Str"" + i)).withStreamPayloadBase(signalPayload));
  }
  intervals.setIntervals(intervalList);
  Logger.info(""String_Node_Str"" + newEvent.getEiActivePeriod().getProperties().getDuration().getDuration().getValue());
  newEvent.withEiActivePeriod(new EiActivePeriod().withProperties(new Properties().withDtstart(new Dtstart().withDateTime(new DateTime().withValue(newEvent.getEiActivePeriod().getProperties().getDtstart().getDateTime().getValue().normalize()))).withDuration(new DurationPropType().withDuration(new DurationValue().withValue(formatDuration(getDuration(newEvent,(int)newEventForm.getIntervals()))))).withTolerance(new Tolerance().withTolerate(new Tolerate().withStartafter(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str""))))))).withXEiNotification(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRampUp(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))).withXEiRecovery(new DurationPropType().withDuration(new DurationValue().withValue((formatDuration(getDuration(""String_Node_Str"")))))))).withEiTarget(new EiTarget()).withEventDescriptor(new EventDescriptor().withCreatedDateTime(new DateTime().withValue(xCalendar)).withEiMarketContext(new EiMarketContext().withMarketContext(new MarketContext().withValue(contextName))).withEventID(newEventForm.getEventID()).withEventStatus(updateStatus(newEvent,(int)newEventForm.getIntervals())).withModificationNumber(0).withPriority(newEventForm.getPriority()).withTestEvent(""String_Node_Str"").withVtnComment(""String_Node_Str"")).withEiEventSignals(new EiEventSignals().withEiEventSignals(new EiEventSignal().withCurrentValue(new CurrentValue().withPayloadFloat(new PayloadFloat().withValue(updateSignalPayload(newEvent)))).withIntervals(new Intervals().withIntervals(intervalList)).withSignalID(""String_Node_Str"").withSignalName(""String_Node_Str"").withSignalType(SignalTypeEnumeratedType.LEVEL)));
  return newEvent;
}"
51542,"public static XmppService getInstance(){
  if (instance == null) {
synchronized (XMPPService.class) {
      if (instance == null) {
        try {
          instance=new XmppService();
        }
 catch (        XMPPException e) {
          e.printStackTrace();
        }
catch (        InstantiationException e) {
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        JAXBException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return instance;
}","public static XmppService getInstance(){
  if (instance == null) {
synchronized (XmppService.class) {
      if (instance == null) {
        try {
          instance=new XmppService();
        }
 catch (        XMPPException e) {
          e.printStackTrace();
        }
catch (        InstantiationException e) {
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        JAXBException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return instance;
}"
51543,"public PacketFilter oadrPacketFilter(){
  return new PacketFilter(){
    @Override public boolean accept(    Packet packet){
      return packet.getExtension(OADR2_XMLNS) != null;
    }
  }
;
}","public PacketFilter oadrPacketFilter(){
  return new PacketFilter(){
    @Override public boolean accept(    Packet packet){
      Logger.info(""String_Node_Str"");
      return packet.getExtension(OADR2_XMLNS) != null;
    }
  }
;
}"
51544,"public PacketListener oadrPacketListener(){
  return new PacketListener(){
    @Override public void processPacket(    Packet packet){
      Logger.info(packet.toString());
    }
  }
;
}","public PacketListener oadrPacketListener(){
  return new PacketListener(){
    @Override public void processPacket(    Packet packet){
      Logger.info(""String_Node_Str"");
      Logger.info(packet.toString());
    }
  }
;
}"
51545,"@Override public void processPacket(Packet packet){
  Logger.info(packet.toString());
}","@Override public void processPacket(Packet packet){
  Logger.info(""String_Node_Str"");
  Logger.info(packet.toString());
}"
51546,"@Override public boolean accept(Packet packet){
  return packet.getExtension(OADR2_XMLNS) != null;
}","@Override public boolean accept(Packet packet){
  Logger.info(""String_Node_Str"");
  return packet.getExtension(OADR2_XMLNS) != null;
}"
51547,"public static XmppService getInstance(){
  if (instance == null) {
synchronized (XmppService.class) {
      if (instance == null) {
        try {
          instance=new XmppService();
        }
 catch (        XMPPException e) {
          e.printStackTrace();
        }
catch (        InstantiationException e) {
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        JAXBException e) {
          e.printStackTrace();
        }
      }
    }
  }
  return instance;
}","public static XmppService getInstance(){
  if (instance == null) {
synchronized (XmppService.class) {
      if (instance == null) {
        try {
          instance=new XmppService();
        }
 catch (        XMPPException e) {
          Logger.error(""String_Node_Str"",e);
        }
catch (        InstantiationException e) {
          Logger.error(""String_Node_Str"",e);
        }
catch (        IllegalAccessException e) {
          Logger.error(""String_Node_Str"",e);
        }
catch (        JAXBException e) {
          Logger.error(""String_Node_Str"",e);
        }
      }
    }
  }
  return instance;
}"
51548,"@Transactional public static Result deleteUser(long id){
  createNewEm();
  entityManager.remove(entityManager.find(UserForm.class,id));
  entityManager.getTransaction().commit();
  flash(""String_Node_Str"",""String_Node_Str"");
  return redirect(routes.Events.events());
}","@Transactional public static Result deleteUser(Long id){
  createNewEm();
  entityManager.remove(entityManager.find(UserForm.class,id));
  entityManager.getTransaction().commit();
  flash(""String_Node_Str"",""String_Node_Str"");
  return redirect(routes.Users.users());
}"
51549,"/** 
 * This method corresponds to the menu option File -> Run. It does its work by calling runInstruction().
 */
public synchronized void menuRun(){
  threadRunning=true;
  interruptSent=false;
  noPauses=false;
  File stdoutFile=getCurrentDefaultStdoutFile();
  if (currentSettings.getStrValue(Settings.STDOUT_USE).equals(""String_Node_Str"")) {
    try {
      if (stdoutFile.exists()) {
        stdoutFile.delete();
      }
      stdoutFile.createNewFile();
    }
 catch (    IOException e) {
      String[] filename={stdoutFile.getName()};
      gui.showError(new Message(""String_Node_Str"",filename).toString());
      logger.warning(e.getMessage());
    }
  }
  RunInfo runinfo;
  int runmode=currentSettings.getIntValue(Settings.RUN_MODE);
  int base=0;
  int limit=currentSettings.getIntValue(Settings.MEMORY_SIZE);
  animator.init(control.getCpu(),base,limit);
  if ((runmode & ANIMATED) != 0) {
    gui.showAnimator();
  }
  do {
    currentState=B91_RUNNING;
    setGUICommandsForCurrentState();
    int nextLine=((Processor)control.getCpu()).getValueOf(TTK91Cpu.CU_PC_CURRENT);
    gui.selectLine(nextLine,GUI.INSTRUCTIONS_AND_DATA_TABLE);
    runmode=currentSettings.getIntValue(Settings.RUN_MODE);
    try {
      runinfo=control.runLine();
      if (runinfo == null) {
        break;
      }
    }
 catch (    TTK91NoKbdData needMoreData) {
      gui.addComment(new Message(""String_Node_Str"").toString());
      gui.updateStatusBar(new Message(""String_Node_Str"").toString());
      currentState=B91_WAIT_FOR_KBD;
      setGUICommandsForCurrentState();
      gui.enable(GUI.INPUT_FIELD);
      waitForContinueTask();
      gui.disable(GUI.INPUT_FIELD);
      continue;
    }
catch (    TTK91RuntimeException e) {
      gui.updateStatusBar(new Message(""String_Node_Str"").toString());
      gui.addComment(e.getMessage());
      currentState=INTERRUPTED_WITH_PAUSE;
      setGUICommandsForCurrentState();
      break;
    }
    if ((runmode & COMMENTED) != 0) {
      if (runinfo.getComments() != null) {
        gui.addComment(runinfo.getLineNumber() + ""String_Node_Str"" + runinfo.getComments());
      }
    }
    animator.stopAnimation();
    animator.animate(runinfo);
    gui.updateStatusBar(runinfo.getComments());
    if (runinfo.isExternalOp() && runinfo.whatOUT() != null) {
      if (runinfo.whatOUT()[0] == Processor.CRT) {
        gui.addOutputData(runinfo.whatOUT()[1]);
      }
    }
    int[] newRegisterValues=runinfo.getRegisters();
    gui.updateReg(GUI.R0,newRegisterValues[0]);
    gui.updateReg(GUI.R1,newRegisterValues[1]);
    gui.updateReg(GUI.R2,newRegisterValues[2]);
    gui.updateReg(GUI.R3,newRegisterValues[3]);
    gui.updateReg(GUI.R4,newRegisterValues[4]);
    gui.updateReg(GUI.R5,newRegisterValues[5]);
    gui.updateReg(GUI.R6,newRegisterValues[6]);
    gui.updateReg(GUI.R7,newRegisterValues[7]);
    gui.updateReg(GUI.PC,runinfo.getNewPC());
    LinkedList changedMemoryLines=runinfo.getChangedMemoryLines();
    Iterator changedMemoryLinesListIterator=changedMemoryLines.iterator();
    while (changedMemoryLinesListIterator.hasNext()) {
      Object[] listItem=(Object[])changedMemoryLinesListIterator.next();
      int line=((Integer)listItem[0]).intValue();
      MemoryLine contents=(MemoryLine)listItem[1];
      gui.updateInstructionsAndDataTableLine(line,contents.getBinary(),contents.getSymbolic());
    }
    gui.repaint();
    if ((runmode & LINE_BY_LINE) != 0 && noPauses == false) {
      currentState=B91_PAUSED;
      setGUICommandsForCurrentState();
      waitForContinueTask();
    }
 else {
      try {
        if (SLOWDOWN > 0)         wait(SLOWDOWN);
      }
 catch (      InterruptedException e) {
        System.out.println(""String_Node_Str"");
      }
    }
  }
 while (interruptSent == false);
  if (currentState == INTERRUPTED_WITH_PAUSE) {
    setGUICommandsForCurrentState();
    waitForContinueTask();
  }
  load();
  currentState=B91_NOT_RUNNING;
  setGUICommandsForCurrentState();
  gui.unselectAll();
  gui.addComment(""String_Node_Str"");
  gui.addComment(new Message(""String_Node_Str"").toString());
  gui.addComment(""String_Node_Str"");
  continueTask();
  threadRunning=false;
  continueTask();
}","/** 
 * This method corresponds to the menu option File -> Run. It does its work by calling runInstruction().
 */
public void menuRun(){
synchronized (lock) {
    threadRunning=true;
    interruptSent=false;
    noPauses=false;
    File stdoutFile=getCurrentDefaultStdoutFile();
    if (currentSettings.getStrValue(Settings.STDOUT_USE).equals(""String_Node_Str"")) {
      try {
        if (stdoutFile.exists()) {
          stdoutFile.delete();
        }
        stdoutFile.createNewFile();
      }
 catch (      IOException e) {
        String[] filename={stdoutFile.getName()};
        gui.showError(new Message(""String_Node_Str"",filename).toString());
        logger.warning(e.getMessage());
      }
    }
    RunInfo runinfo;
    int runmode=currentSettings.getIntValue(Settings.RUN_MODE);
    int base=0;
    int limit=currentSettings.getIntValue(Settings.MEMORY_SIZE);
    animator.init(control.getCpu(),base,limit);
    if ((runmode & ANIMATED) != 0) {
      gui.showAnimator();
    }
    do {
      currentState=B91_RUNNING;
      setGUICommandsForCurrentState();
      int nextLine=((Processor)control.getCpu()).getValueOf(TTK91Cpu.CU_PC_CURRENT);
      gui.selectLine(nextLine,GUI.INSTRUCTIONS_AND_DATA_TABLE);
      runmode=currentSettings.getIntValue(Settings.RUN_MODE);
      try {
        runinfo=control.runLine();
        if (runinfo == null) {
          break;
        }
      }
 catch (      TTK91NoKbdData needMoreData) {
        gui.addComment(new Message(""String_Node_Str"").toString());
        gui.updateStatusBar(new Message(""String_Node_Str"").toString());
        currentState=B91_WAIT_FOR_KBD;
        setGUICommandsForCurrentState();
        gui.enable(GUI.INPUT_FIELD);
        waitForContinueTask();
        gui.disable(GUI.INPUT_FIELD);
        continue;
      }
catch (      TTK91RuntimeException e) {
        gui.updateStatusBar(new Message(""String_Node_Str"").toString());
        gui.addComment(e.getMessage());
        currentState=INTERRUPTED_WITH_PAUSE;
        setGUICommandsForCurrentState();
        break;
      }
      if ((runmode & COMMENTED) != 0) {
        if (runinfo.getComments() != null) {
          gui.addComment(runinfo.getLineNumber() + ""String_Node_Str"" + runinfo.getComments());
        }
      }
      animator.stopAnimation();
      animator.animate(runinfo);
      gui.updateStatusBar(runinfo.getComments());
      if (runinfo.isExternalOp() && runinfo.whatOUT() != null) {
        if (runinfo.whatOUT()[0] == Processor.CRT) {
          gui.addOutputData(runinfo.whatOUT()[1]);
        }
      }
      int[] newRegisterValues=runinfo.getRegisters();
      gui.updateReg(GUI.R0,newRegisterValues[0]);
      gui.updateReg(GUI.R1,newRegisterValues[1]);
      gui.updateReg(GUI.R2,newRegisterValues[2]);
      gui.updateReg(GUI.R3,newRegisterValues[3]);
      gui.updateReg(GUI.R4,newRegisterValues[4]);
      gui.updateReg(GUI.R5,newRegisterValues[5]);
      gui.updateReg(GUI.R6,newRegisterValues[6]);
      gui.updateReg(GUI.R7,newRegisterValues[7]);
      gui.updateReg(GUI.PC,runinfo.getNewPC());
      LinkedList changedMemoryLines=runinfo.getChangedMemoryLines();
      Iterator changedMemoryLinesListIterator=changedMemoryLines.iterator();
      while (changedMemoryLinesListIterator.hasNext()) {
        Object[] listItem=(Object[])changedMemoryLinesListIterator.next();
        int line=((Integer)listItem[0]).intValue();
        MemoryLine contents=(MemoryLine)listItem[1];
        gui.updateInstructionsAndDataTableLine(line,contents.getBinary(),contents.getSymbolic());
      }
      gui.repaint();
      if ((runmode & LINE_BY_LINE) != 0 && noPauses == false) {
        currentState=B91_PAUSED;
        setGUICommandsForCurrentState();
        waitForContinueTask();
      }
 else {
        try {
          if (SLOWDOWN > 0)           lock.wait(SLOWDOWN);
        }
 catch (        InterruptedException e) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
 while (interruptSent == false);
    if (currentState == INTERRUPTED_WITH_PAUSE) {
      setGUICommandsForCurrentState();
      waitForContinueTask();
    }
    load();
    currentState=B91_NOT_RUNNING;
    setGUICommandsForCurrentState();
    gui.unselectAll();
    gui.addComment(""String_Node_Str"");
    gui.addComment(new Message(""String_Node_Str"").toString());
    gui.addComment(""String_Node_Str"");
    continueTask();
    threadRunning=false;
    continueTask();
  }
}"
51550,"/** 
 * Notifies all methods,that have called waitForContinueTask() to continue their operation.
 */
public void continueTask(){
synchronized (this) {
    notify();
  }
  return;
}","/** 
 * Notifies all methods,that have called waitForContinueTask() to continue their operation.
 */
public void continueTask(){
synchronized (lock) {
    lock.notify();
  }
  return;
}"
51551,"/** 
 * This method corresponds to the menu option File -> Compile. It does its work by calling compileLine().
 */
public synchronized void menuCompile(){
  threadRunning=true;
  interruptSent=false;
  noPauses=false;
  currentState=K91_COMPILING;
  setGUICommandsForCurrentState();
  CompileInfo compileinfo=null;
  int compilemode=currentSettings.getIntValue(Settings.COMPILE_MODE);
  int phase;
  boolean compilingCompleted=false;
  do {
    currentState=K91_COMPILING;
    setGUICommandsForCurrentState();
    try {
      compileinfo=control.compileLine();
    }
 catch (    TTK91CompileException e) {
      int errorLine=0;
      phase=CompileInfo.FIRST_ROUND;
      if (compileinfo != null) {
        errorLine=compileinfo.getLineNumber() + 1;
        phase=compileinfo.getPhase();
      }
      gui.addComment(errorLine + ""String_Node_Str"" + e.getMessage());
      gui.updateStatusBar(new Message(""String_Node_Str"").toString());
      if (phase == CompileInfo.FIRST_ROUND) {
        gui.selectLine(errorLine,GUI.CODE_TABLE);
      }
 else       if (phase == CompileInfo.SECOND_ROUND) {
        gui.selectLine(errorLine,GUI.INSTRUCTIONS_AND_DATA_TABLE);
      }
      currentState=K91_PAUSED;
      setGUICommandsForCurrentState();
      waitForContinueTask();
      break;
    }
    if (compileinfo == null) {
      compilingCompleted=true;
      break;
    }
 else {
      String comments=compileinfo.getComments();
      if (comments == null) {
        comments=""String_Node_Str"";
      }
      if ((compilemode & COMMENTED) != 0 && !comments.equals(""String_Node_Str"")) {
        gui.addComment(compileinfo.getLineNumber() + ""String_Node_Str"" + comments);
      }
      gui.updateStatusBar(comments);
      compilemode=currentSettings.getIntValue(Settings.COMPILE_MODE);
      phase=compileinfo.getPhase();
      if (phase == CompileInfo.FIRST_ROUND) {
        if (compileinfo.getSymbolFound()) {
          String symbolName=compileinfo.getSymbolName();
          Integer symbolValue=null;
          if (compileinfo.getSymbolDefined()) {
            symbolValue=new Integer(compileinfo.getSymbolValue());
          }
          gui.updateRowInSymbolTable(symbolName,symbolValue);
        }
        if (compileinfo.getLabelFound()) {
          String symbolName=compileinfo.getLabelName();
          Integer symbolValue=new Integer(compileinfo.getLabelValue());
          gui.updateRowInSymbolTable(symbolName,symbolValue);
        }
        gui.selectLine(compileinfo.getLineNumber(),GUI.CODE_TABLE);
      }
 else       if (phase == CompileInfo.FINALIZING_FIRST_ROUND) {
        String[][] symbolTable=compileinfo.getSymbolTable();
        if (symbolTable != null) {
          for (int i=0; i < symbolTable.length; i++) {
            String symbolName=symbolTable[i][0];
            Integer symbolValue=null;
            try {
              symbolValue=new Integer(symbolTable[i][1]);
            }
 catch (            NumberFormatException e) {
            }
            gui.updateRowInSymbolTable(symbolName,symbolValue);
          }
        }
        String[] newInstructionsContents=compileinfo.getInstructions();
        String[] newDataContents=compileinfo.getData();
        gui.insertToInstructionsTable(newInstructionsContents);
        gui.insertToDataTable(newDataContents);
        gui.setGUIView(3);
      }
 else       if (phase == CompileInfo.SECOND_ROUND) {
        int line=compileinfo.getLineNumber();
        int binary=compileinfo.getLineBinary();
        gui.updateInstructionsAndDataTableLine(line,binary);
        gui.selectLine(compileinfo.getLineNumber(),GUI.INSTRUCTIONS_AND_DATA_TABLE);
      }
      gui.repaint();
      if (((compilemode & PAUSED) != 0) && !comments.equals(""String_Node_Str"") && noPauses == false) {
        currentState=K91_PAUSED;
        setGUICommandsForCurrentState();
        waitForContinueTask();
      }
 else {
        try {
          wait(SLOWDOWN + 1);
        }
 catch (        InterruptedException e) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
  }
 while (interruptSent == false);
  if (currentState == INTERRUPTED_WITH_PAUSE) {
    setGUICommandsForCurrentState();
    waitForContinueTask();
  }
  if (compilingCompleted == true) {
    try {
      control.saveBinary();
      System.out.println(new Message(""String_Node_Str"").toString());
    }
 catch (    IOException e) {
      System.out.println(e);
    }
    gui.resetAll();
    gui.addComment(""String_Node_Str"");
    gui.addComment(new Message(""String_Node_Str"").toString());
    gui.addComment(""String_Node_Str"");
    loadAndUpdateGUI();
  }
 else {
    try {
      control.openSource(currentlyOpenedFile);
    }
 catch (    IOException e) {
      gui.showError(e.getMessage());
      currentState=NONE;
      setGUICommandsForCurrentState();
      return;
    }
    currentState=K91_NOT_COMPILING;
    setGUICommandsForCurrentState();
    gui.setGUIView(2);
    gui.resetAll();
    gui.addComment(""String_Node_Str"");
    gui.addComment(new Message(""String_Node_Str"").toString());
    gui.addComment(""String_Node_Str"");
    continueTask();
  }
  threadRunning=false;
  continueTask();
}","/** 
 * This method corresponds to the menu option File -> Compile. It does its work by calling compileLine().
 */
public void menuCompile(){
synchronized (lock) {
    threadRunning=true;
    interruptSent=false;
    noPauses=false;
    currentState=K91_COMPILING;
    setGUICommandsForCurrentState();
    CompileInfo compileinfo=null;
    int compilemode=currentSettings.getIntValue(Settings.COMPILE_MODE);
    int phase;
    boolean compilingCompleted=false;
    do {
      currentState=K91_COMPILING;
      setGUICommandsForCurrentState();
      try {
        compileinfo=control.compileLine();
      }
 catch (      TTK91CompileException e) {
        int errorLine=0;
        phase=CompileInfo.FIRST_ROUND;
        if (compileinfo != null) {
          errorLine=compileinfo.getLineNumber() + 1;
          phase=compileinfo.getPhase();
        }
        gui.addComment(errorLine + ""String_Node_Str"" + e.getMessage());
        gui.updateStatusBar(new Message(""String_Node_Str"").toString());
        if (phase == CompileInfo.FIRST_ROUND) {
          gui.selectLine(errorLine,GUI.CODE_TABLE);
        }
 else         if (phase == CompileInfo.SECOND_ROUND) {
          gui.selectLine(errorLine,GUI.INSTRUCTIONS_AND_DATA_TABLE);
        }
        currentState=K91_PAUSED;
        setGUICommandsForCurrentState();
        waitForContinueTask();
        break;
      }
      if (compileinfo == null) {
        compilingCompleted=true;
        break;
      }
 else {
        String comments=compileinfo.getComments();
        if (comments == null) {
          comments=""String_Node_Str"";
        }
        if ((compilemode & COMMENTED) != 0 && !comments.equals(""String_Node_Str"")) {
          gui.addComment(compileinfo.getLineNumber() + ""String_Node_Str"" + comments);
        }
        gui.updateStatusBar(comments);
        compilemode=currentSettings.getIntValue(Settings.COMPILE_MODE);
        phase=compileinfo.getPhase();
        if (phase == CompileInfo.FIRST_ROUND) {
          if (compileinfo.getSymbolFound()) {
            String symbolName=compileinfo.getSymbolName();
            Integer symbolValue=null;
            if (compileinfo.getSymbolDefined()) {
              symbolValue=new Integer(compileinfo.getSymbolValue());
            }
            gui.updateRowInSymbolTable(symbolName,symbolValue);
          }
          if (compileinfo.getLabelFound()) {
            String symbolName=compileinfo.getLabelName();
            Integer symbolValue=new Integer(compileinfo.getLabelValue());
            gui.updateRowInSymbolTable(symbolName,symbolValue);
          }
          gui.selectLine(compileinfo.getLineNumber(),GUI.CODE_TABLE);
        }
 else         if (phase == CompileInfo.FINALIZING_FIRST_ROUND) {
          String[][] symbolTable=compileinfo.getSymbolTable();
          if (symbolTable != null) {
            for (int i=0; i < symbolTable.length; i++) {
              String symbolName=symbolTable[i][0];
              Integer symbolValue=null;
              try {
                symbolValue=new Integer(symbolTable[i][1]);
              }
 catch (              NumberFormatException e) {
              }
              gui.updateRowInSymbolTable(symbolName,symbolValue);
            }
          }
          String[] newInstructionsContents=compileinfo.getInstructions();
          String[] newDataContents=compileinfo.getData();
          gui.insertToInstructionsTable(newInstructionsContents);
          gui.insertToDataTable(newDataContents);
          gui.setGUIView(3);
        }
 else         if (phase == CompileInfo.SECOND_ROUND) {
          int line=compileinfo.getLineNumber();
          int binary=compileinfo.getLineBinary();
          gui.updateInstructionsAndDataTableLine(line,binary);
          gui.selectLine(compileinfo.getLineNumber(),GUI.INSTRUCTIONS_AND_DATA_TABLE);
        }
        gui.repaint();
        if (((compilemode & PAUSED) != 0) && !comments.equals(""String_Node_Str"") && noPauses == false) {
          currentState=K91_PAUSED;
          setGUICommandsForCurrentState();
          waitForContinueTask();
        }
 else {
          try {
            lock.wait(SLOWDOWN + 1);
          }
 catch (          InterruptedException e) {
            System.out.println(""String_Node_Str"");
          }
        }
      }
    }
 while (interruptSent == false);
    if (currentState == INTERRUPTED_WITH_PAUSE) {
      setGUICommandsForCurrentState();
      waitForContinueTask();
    }
    if (compilingCompleted == true) {
      try {
        control.saveBinary();
        System.out.println(new Message(""String_Node_Str"").toString());
      }
 catch (      IOException e) {
        System.out.println(e);
      }
      gui.resetAll();
      gui.addComment(""String_Node_Str"");
      gui.addComment(new Message(""String_Node_Str"").toString());
      gui.addComment(""String_Node_Str"");
      loadAndUpdateGUI();
    }
 else {
      try {
        control.openSource(currentlyOpenedFile);
      }
 catch (      IOException e) {
        gui.showError(e.getMessage());
        currentState=NONE;
        setGUICommandsForCurrentState();
        return;
      }
      currentState=K91_NOT_COMPILING;
      setGUICommandsForCurrentState();
      gui.setGUIView(2);
      gui.resetAll();
      gui.addComment(""String_Node_Str"");
      gui.addComment(new Message(""String_Node_Str"").toString());
      gui.addComment(""String_Node_Str"");
      continueTask();
    }
    threadRunning=false;
    continueTask();
  }
}"
51552,"/** 
 * Notifies all currents tasks to be interrupted once they are able to read the new value of interruptSent. Immediate interruption means that all tasks should end without any further activities, while non-immediate interruption means that some tasks may pause to wait for continueTask() to notify them before ending completely.
 * @param immediate If this is true, then continueTask is being waited beforethe previous job ends. If this is false, then it stops immediately and next job can start right after calling this.
 */
private void interruptCurrentTasks(boolean immediate){
  if (immediate == true) {
    currentState=INTERRUPTED_WITHOUT_PAUSE;
  }
 else {
    currentState=INTERRUPTED_WITH_PAUSE;
  }
  interruptSent=true;
synchronized (this) {
    notifyAll();
  }
}","/** 
 * Notifies all currents tasks to be interrupted once they are able to read the new value of interruptSent. Immediate interruption means that all tasks should end without any further activities, while non-immediate interruption means that some tasks may pause to wait for continueTask() to notify them before ending completely.
 * @param immediate If this is true, then continueTask is being waited beforethe previous job ends. If this is false, then it stops immediately and next job can start right after calling this.
 */
private void interruptCurrentTasks(boolean immediate){
  if (immediate == true) {
    currentState=INTERRUPTED_WITHOUT_PAUSE;
  }
 else {
    currentState=INTERRUPTED_WITH_PAUSE;
  }
  interruptSent=true;
synchronized (lock) {
    lock.notifyAll();
  }
}"
51553,"/** 
 * A method can call this, if it wants enter into pause mode and wait for someone to call continueTask() or continueTaskWithoutPauses() methods. This method cannot however be used, unless the method which is calling this hasn't been set to run in a thread of its own. eg. by calling new GUIThreader()
 */
public void waitForContinueTask(){
synchronized (this) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
  return;
}","/** 
 * A method can call this, if it wants enter into pause mode and wait for someone to call continueTask() or continueTaskWithoutPauses() methods. This method cannot however be used, unless the method which is calling this hasn't been set to run in a thread of its own. eg. by calling new GUIThreader()
 */
public void waitForContinueTask(){
synchronized (lock) {
    try {
      lock.wait();
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
  return;
}"
51554,"/** 
 * Notifies all methods, that have called waitForContinueTask() to continue their operation plus informs them that waitForContinueTask() should no longer be called during current operation.
 */
public void continueTaskWithoutPauses(){
  noPauses=true;
synchronized (this) {
    notify();
  }
  return;
}","/** 
 * Notifies all methods, that have called waitForContinueTask() to continue their operation plus informs them that waitForContinueTask() should no longer be called during current operation.
 */
public void continueTaskWithoutPauses(){
  noPauses=true;
synchronized (lock) {
    lock.notify();
  }
  return;
}"
51555,"/** 
 * This method corresponds to the menu option File -> Erase memory.
 */
public synchronized void menuEraseMemory(){
  interruptCurrentTasks(true);
  if (threadRunning == true) {
    waitForContinueTask();
  }
  control.eraseMemory();
  gui.updateReg(GUI.R0,0);
  gui.updateReg(GUI.R1,0);
  gui.updateReg(GUI.R2,0);
  gui.updateReg(GUI.R3,0);
  gui.updateReg(GUI.R4,0);
  gui.updateReg(GUI.R5,0);
  gui.updateReg(GUI.R6,0);
  gui.updateReg(GUI.R7,0);
  gui.updateReg(GUI.PC,0);
  gui.resetAll();
  gui.updateStatusBar(new Message(""String_Node_Str"").toString());
  gui.setGUIView(1);
  currentState=NONE;
  setGUICommandsForCurrentState();
  display.setMem(control.getPhysicalMemory());
}","/** 
 * This method corresponds to the menu option File -> Erase memory.
 */
public void menuEraseMemory(){
  interruptCurrentTasks(true);
synchronized (lock) {
    if (threadRunning == true) {
      waitForContinueTask();
    }
    control.eraseMemory();
    gui.updateReg(GUI.R0,0);
    gui.updateReg(GUI.R1,0);
    gui.updateReg(GUI.R2,0);
    gui.updateReg(GUI.R3,0);
    gui.updateReg(GUI.R4,0);
    gui.updateReg(GUI.R5,0);
    gui.updateReg(GUI.R6,0);
    gui.updateReg(GUI.R7,0);
    gui.updateReg(GUI.PC,0);
    gui.resetAll();
    gui.updateStatusBar(new Message(""String_Node_Str"").toString());
    gui.setGUIView(1);
    currentState=NONE;
    setGUICommandsForCurrentState();
    display.setMem(control.getPhysicalMemory());
  }
}"
51556,"/** 
 * Sets the viewport of a certain table so that the given line is visible.
 * @param line  Number of the line, that is wanted to be visible.
 * @param table The table. Valid values for this parameter are CODE_TABLEand INSTRUCTIONS_AND_DATA_TABLE
 * @return True if the operation was successful.False if the line number was not valid - ie there's no such line in the table or there's no such table.
 */
public boolean centerToLine(int line,short table){
  JScrollPane activeScrollPane=null;
  JTableX activeTable=null;
switch (table) {
case CODE_TABLE:
    if (line >= codeTable.getRowCount() || line < 0) {
      return false;
    }
  activeScrollPane=codeTableScrollPane;
activeTable=codeTable;
break;
case INSTRUCTIONS_AND_DATA_TABLE:
if (line >= (instructionsTable.getRowCount() + dataTable.getRowCount()) || line < 0) {
return false;
}
if (line < instructionsTable.getRowCount()) {
activeScrollPane=instructionsTableScrollPane;
activeTable=instructionsTable;
}
 else {
activeScrollPane=dataTableScrollPane;
activeTable=dataTable;
line-=instructionsTable.getRowCount();
}
break;
default :
break;
}
if (activeScrollPane == null || activeTable == null) {
return false;
}
int tableViewHeight=activeScrollPane.getHeight() - activeTable.getTableHeader().getHeight();
int y;
if (tableViewHeight > activeTable.getHeight()) {
y=0;
}
 else {
y=line * activeTable.getRowHeight() - tableViewHeight / 2 + activeTable.getRowHeight() / 2;
y=(y < 0) ? 0 : y;
if (y + tableViewHeight > activeTable.getHeight()) {
y=activeTable.getHeight() - tableViewHeight + activeTable.getRowMargin() + 2;
}
}
activeScrollPane.getViewport().setViewPosition(new Point(0,y));
return true;
}","/** 
 * Sets the viewport of a certain table so that the given line is visible.
 * @param line  Number of the line, that is wanted to be visible.
 * @param table The table. Valid values for this parameter are CODE_TABLEand INSTRUCTIONS_AND_DATA_TABLE
 * @return True if the operation was successful.False if the line number was not valid - ie there's no such line in the table or there's no such table.
 */
protected void centerToLine(final int ln,final short table){
  SwingUtilities.invokeLater(new Runnable(){
    int line=ln;
    public void run(){
      JScrollPane activeScrollPane=null;
      JTableX activeTable=null;
switch (table) {
case CODE_TABLE:
        if (line >= codeTable.getRowCount() || line < 0) {
          return;
        }
      activeScrollPane=codeTableScrollPane;
    activeTable=codeTable;
  break;
case INSTRUCTIONS_AND_DATA_TABLE:
if (line >= (instructionsTable.getRowCount() + dataTable.getRowCount()) || line < 0) {
  return;
}
if (line < instructionsTable.getRowCount()) {
activeScrollPane=instructionsTableScrollPane;
activeTable=instructionsTable;
}
 else {
activeScrollPane=dataTableScrollPane;
activeTable=dataTable;
line-=instructionsTable.getRowCount();
}
break;
default :
break;
}
if (activeScrollPane == null || activeTable == null) {
return;
}
int tableViewHeight=activeScrollPane.getHeight() - activeTable.getTableHeader().getHeight();
int y;
if (tableViewHeight > activeTable.getHeight()) {
y=0;
}
 else {
y=line * activeTable.getRowHeight() - tableViewHeight / 2 + activeTable.getRowHeight() / 2;
y=(y < 0) ? 0 : y;
if (y + tableViewHeight > activeTable.getHeight()) {
y=activeTable.getHeight() - tableViewHeight + activeTable.getRowMargin() + 2;
}
}
activeScrollPane.getViewport().setViewPosition(new Point(0,y));
return;
}
}
);
}"
51557,"@Override public void setPort(int n,int value){
  if (n == 0) {
switch (value) {
case 0:
      flagged=0;
    break;
case 1:
  disabled=true;
break;
case 2:
disabled=false;
break;
}
}
 else if (n == 1) {
flagged=flagged & value;
enabled=value;
}
throw new RuntimeException(""String_Node_Str"" + n);
}","@Override public void setPort(int n,int value){
  if (n == 0) {
switch (value) {
case 0:
      flagged=0;
    return;
case 1:
  disabled=true;
return;
case 2:
disabled=false;
return;
}
}
 else if (n == 1) {
flagged=flagged & value;
enabled=value;
return;
}
throw new RuntimeException(""String_Node_Str"" + n);
}"
51558,"@Override public void setPort(int n,int value){
  if (n == 0)   rnd=new Random(value);
  throw new RuntimeException(""String_Node_Str"" + n);
}","@Override public void setPort(int n,int value){
  if (n == 0) {
    rnd=new Random(value);
    return;
  }
  throw new RuntimeException(""String_Node_Str"" + n);
}"
51559,"/** 
 * Returns a value, which is the length of the longest text in a certain column.
 * @param column Number of the column. 0 is the leftmost, next to the right is 1, and so on.
 * @return The lenght of the longest text in the given column, in pixel.
 */
public int getMaxTextLengthInColumn(int column){
  int maxLength=0;
  int rowForMaxLength=0;
  for (int i=0; i < this.getRowCount(); i++) {
    String str=(String)((DefaultTableModel)getModel()).getValueAt(i,column);
    if (str.length() > maxLength) {
      maxLength=str.length();
      rowForMaxLength=i;
    }
  }
  return getTextLength(rowForMaxLength,column);
}","/** 
 * Returns a value, which is the length of the longest text in a certain column.
 * @param column Number of the column. 0 is the leftmost, next to the right is 1, and so on.
 * @return The lenght of the longest text in the given column, in pixel.
 */
public int getMaxTextLengthInColumn(int column){
  int maxLength=0;
  int rowForMaxLength=0;
  for (int i=0; i < this.getRowCount(); i++) {
    String str=(String)((DefaultTableModel)getModel()).getValueAt(i,column);
    if (str.length() > maxLength) {
      maxLength=str.length();
      rowForMaxLength=i;
    }
  }
  return getRowCount() != 0 ? getTextLength(rowForMaxLength,column) : 0;
}"
51560,"/** 
 * This method tests whether a label name contains at least one  non-number and consists of 0-9, A-� and _.  It does not check whether the label is in use already or if it is a reserved word.
 * @param labelName The label name to test.
 * @return True if the label consists of valid characters, false otherwise. 
 */
private boolean validLabelName(String labelName){
  if (labelName.matches(""String_Node_Str"") && labelName.matches(""String_Node_Str"")) {
    return true;
  }
  return false;
}","/** 
 * This method tests whether a label name contains at least one  non-number and consists of 0-9, A-Ö and _.  It does not check whether the label is in use already or if it is a reserved word.
 * @param labelName The label name to test.
 * @return True if the label consists of valid characters, false otherwise. 
 */
private boolean validLabelName(String labelName){
  if (labelName.matches(""String_Node_Str"") && labelName.matches(""String_Node_Str"")) {
    return true;
  }
  return false;
}"
51561,"/** 
 * This method parses a String and tries to find a label, opCode and all the other parts of a Command line.
 * @param symbolicOpcode Symbolic form of an operation code. 
 */
public String[] parseLine(String symbolicOpcode) throws TTK91CompileException {
  String label=""String_Node_Str"";
  String opcode=""String_Node_Str"";
  String firstRegister=""String_Node_Str"";
  String addressingMode=""String_Node_Str"";
  String secondRegister=""String_Node_Str"";
  String address=""String_Node_Str"";
  String comment;
  String[] parsedLine;
  String wordTemp=""String_Node_Str"";
  int nextToCheck=0;
  int fieldEnd=0;
  boolean spaceBetweenMemorymodeAndAddress=false;
  fieldEnd=symbolicOpcode.indexOf(""String_Node_Str"");
  if (fieldEnd != -1) {
    symbolicOpcode=symbolicOpcode.substring(0,fieldEnd);
  }
  symbolicOpcode=symbolicOpcode.replace('\t',' ');
  symbolicOpcode=symbolicOpcode.replace('�',' ');
  symbolicOpcode=symbolicOpcode.toLowerCase();
  symbolicOpcode=symbolicOpcode.trim();
  if (symbolicOpcode.length() == 0) {
    parsedLine=new String[6];
    for (int i=0; i < parsedLine.length; ++i)     parsedLine[i]=""String_Node_Str"";
    return parsedLine;
  }
  String[] lineAsArray=symbolicOpcode.split(""String_Node_Str"");
  int lineAsArrayIndex=0;
  wordTemp=lineAsArray[lineAsArrayIndex];
  if (symbolicInterpreter.getOpcode(wordTemp) == -1) {
    if (!validLabelName(wordTemp)) {
      comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",wordTemp).toString()).toString();
      throw new TTK91CompileException(comment);
    }
    label=wordTemp;
    ++lineAsArrayIndex;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    opcode=lineAsArray[lineAsArrayIndex];
    ++lineAsArrayIndex;
    if (symbolicInterpreter.getOpcode(opcode) < 0) {
      comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",opcode).toString()).toString();
      throw new TTK91CompileException(comment);
    }
  }
 else {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",opcode).toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(lineAsArray[lineAsArrayIndex].length() - 1) == ',') {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1)) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1);
        ++lineAsArrayIndex;
      }
    }
 else {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex]) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex];
        ++lineAsArrayIndex;
      }
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '(' && (opcode.equalsIgnoreCase(""String_Node_Str"") || opcode.equalsIgnoreCase(""String_Node_Str"")))     lineAsArray[lineAsArrayIndex]='0' + lineAsArray[lineAsArrayIndex];
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '=' || lineAsArray[lineAsArrayIndex].charAt(0) == '@') {
      addressingMode=""String_Node_Str"" + lineAsArray[lineAsArrayIndex].charAt(0);
      if (lineAsArray[lineAsArrayIndex].length() == 1) {
        spaceBetweenMemorymodeAndAddress=true;
        ++lineAsArrayIndex;
      }
    }
 else {
      addressingMode=""String_Node_Str"";
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") != -1) {
      if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
        comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
        throw new TTK91CompileException(comment);
      }
 else {
        if (spaceBetweenMemorymodeAndAddress) {
          address=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        }
 else {
          address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length(),lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        }
        secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        if (symbolicInterpreter.getRegisterId(secondRegister) == -1) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",secondRegister).toString()).toString();
          throw new TTK91CompileException(comment);
        }
      }
    }
 else {
      if (spaceBetweenMemorymodeAndAddress) {
        address=lineAsArray[lineAsArrayIndex];
      }
 else {
        address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length());
      }
      if (lineAsArrayIndex + 1 < lineAsArray.length) {
        ++lineAsArrayIndex;
        if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") == -1 || lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") == -1) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
          throw new TTK91CompileException(comment);
        }
        if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
          throw new TTK91CompileException(comment);
        }
 else {
          secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        }
      }
    }
    ++lineAsArrayIndex;
  }
  if (symbolicInterpreter.getRegisterId(address) != -1) {
    secondRegister=address;
    address=""String_Node_Str"";
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.length() > 0) {
    if (opcode.charAt(0) == 'j' || opcode.charAt(0) == 'J' || opcode.toLowerCase().equals(""String_Node_Str"")) {
      if (opcode.toLowerCase().matches(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") || opcode.toLowerCase().equals(""String_Node_Str"")) {
        if (firstRegister.equals(""String_Node_Str"")) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
          throw new TTK91CompileException(comment);
        }
      }
      if (((!opcode.toLowerCase().equals(""String_Node_Str"")) && (addressingMode.equals(""String_Node_Str"") || address.equals(""String_Node_Str"")))) {
        comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
        throw new TTK91CompileException(comment);
      }
    }
 else {
      if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
      }
 else {
        if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
          if (addressingMode.equals(""String_Node_Str"") || addressingMode.equals(""String_Node_Str"") || !address.equals(""String_Node_Str"")) {
            comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
            throw new TTK91CompileException(comment);
          }
        }
 else {
          if (opcode.equalsIgnoreCase(""String_Node_Str"") || opcode.equalsIgnoreCase(""String_Node_Str"")) {
            if (firstRegister.equals(""String_Node_Str"")) {
              comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
              throw new TTK91CompileException(comment);
            }
          }
 else {
            if (firstRegister.equals(""String_Node_Str"") || (address.equals(""String_Node_Str"") && secondRegister.equals(""String_Node_Str""))) {
              comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
              throw new TTK91CompileException(comment);
            }
          }
        }
      }
    }
  }
  if (!address.equals(""String_Node_Str"")) {
    boolean isANumber=true;
    for (int i=0; i < address.length(); ++i) {
      if (!(i == 0 && address.charAt(i) == '-')) {
        if (!Character.isDigit(address.charAt(i)))         isANumber=false;
      }
    }
    if (isANumber) {
      if (address.length() > (""String_Node_Str"" + ADDRESSMIN).length() || Integer.parseInt(address) > ADDRESSMAX || Integer.parseInt(address) < ADDRESSMIN) {
        comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
        throw new TTK91CompileException(comment);
      }
    }
  }
  if (addressingMode.equals(""String_Node_Str"") && address.equals(""String_Node_Str"")) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && address.equals(""String_Node_Str"") && !addressingMode.equals(""String_Node_Str"")) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && addressingMode.equals(""String_Node_Str"")) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.equals(""String_Node_Str"") && (!label.equals(""String_Node_Str"") || !firstRegister.equals(""String_Node_Str"") || !addressingMode.equals(""String_Node_Str"")|| !address.equals(""String_Node_Str"")|| !secondRegister.equals(""String_Node_Str""))) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  parsedLine=new String[6];
  parsedLine[0]=label.trim();
  parsedLine[1]=opcode.trim();
  parsedLine[2]=firstRegister.trim();
  parsedLine[3]=addressingMode.trim();
  parsedLine[4]=address.trim();
  parsedLine[5]=secondRegister.trim();
  return parsedLine;
}","/** 
 * This method parses a String and tries to find a label, opCode and all the other parts of a Command line.
 * @param symbolicOpcode Symbolic form of an operation code. 
 */
public String[] parseLine(String symbolicOpcode) throws TTK91CompileException {
  String label=""String_Node_Str"";
  String opcode=""String_Node_Str"";
  String firstRegister=""String_Node_Str"";
  String addressingMode=""String_Node_Str"";
  String secondRegister=""String_Node_Str"";
  String address=""String_Node_Str"";
  String comment;
  String[] parsedLine;
  String wordTemp=""String_Node_Str"";
  int nextToCheck=0;
  int fieldEnd=0;
  boolean spaceBetweenMemorymodeAndAddress=false;
  fieldEnd=symbolicOpcode.indexOf(""String_Node_Str"");
  if (fieldEnd != -1) {
    symbolicOpcode=symbolicOpcode.substring(0,fieldEnd);
  }
  symbolicOpcode=symbolicOpcode.replace('\t',' ');
  symbolicOpcode=symbolicOpcode.replace(' ',' ');
  symbolicOpcode=symbolicOpcode.toLowerCase();
  symbolicOpcode=symbolicOpcode.trim();
  if (symbolicOpcode.length() == 0) {
    parsedLine=new String[6];
    for (int i=0; i < parsedLine.length; ++i)     parsedLine[i]=""String_Node_Str"";
    return parsedLine;
  }
  String[] lineAsArray=symbolicOpcode.split(""String_Node_Str"");
  int lineAsArrayIndex=0;
  wordTemp=lineAsArray[lineAsArrayIndex];
  if (symbolicInterpreter.getOpcode(wordTemp) == -1) {
    if (!validLabelName(wordTemp)) {
      comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",wordTemp).toString()).toString();
      throw new TTK91CompileException(comment);
    }
    label=wordTemp;
    ++lineAsArrayIndex;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    opcode=lineAsArray[lineAsArrayIndex];
    ++lineAsArrayIndex;
    if (symbolicInterpreter.getOpcode(opcode) < 0) {
      comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",opcode).toString()).toString();
      throw new TTK91CompileException(comment);
    }
  }
 else {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",opcode).toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(lineAsArray[lineAsArrayIndex].length() - 1) == ',') {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1)) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1);
        ++lineAsArrayIndex;
      }
    }
 else {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex]) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex];
        ++lineAsArrayIndex;
      }
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '(' && (opcode.equalsIgnoreCase(""String_Node_Str"") || opcode.equalsIgnoreCase(""String_Node_Str"")))     lineAsArray[lineAsArrayIndex]='0' + lineAsArray[lineAsArrayIndex];
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '=' || lineAsArray[lineAsArrayIndex].charAt(0) == '@') {
      addressingMode=""String_Node_Str"" + lineAsArray[lineAsArrayIndex].charAt(0);
      if (lineAsArray[lineAsArrayIndex].length() == 1) {
        spaceBetweenMemorymodeAndAddress=true;
        ++lineAsArrayIndex;
      }
    }
 else {
      addressingMode=""String_Node_Str"";
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") != -1) {
      if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
        comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
        throw new TTK91CompileException(comment);
      }
 else {
        if (spaceBetweenMemorymodeAndAddress) {
          address=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        }
 else {
          address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length(),lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        }
        secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        if (symbolicInterpreter.getRegisterId(secondRegister) == -1) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",secondRegister).toString()).toString();
          throw new TTK91CompileException(comment);
        }
      }
    }
 else {
      if (spaceBetweenMemorymodeAndAddress) {
        address=lineAsArray[lineAsArrayIndex];
      }
 else {
        address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length());
      }
      if (lineAsArrayIndex + 1 < lineAsArray.length) {
        ++lineAsArrayIndex;
        if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") == -1 || lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") == -1) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
          throw new TTK91CompileException(comment);
        }
        if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
          throw new TTK91CompileException(comment);
        }
 else {
          secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        }
      }
    }
    ++lineAsArrayIndex;
  }
  if (symbolicInterpreter.getRegisterId(address) != -1) {
    secondRegister=address;
    address=""String_Node_Str"";
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.length() > 0) {
    if (opcode.charAt(0) == 'j' || opcode.charAt(0) == 'J' || opcode.toLowerCase().equals(""String_Node_Str"")) {
      if (opcode.toLowerCase().matches(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"") || opcode.toLowerCase().equals(""String_Node_Str"")) {
        if (firstRegister.equals(""String_Node_Str"")) {
          comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
          throw new TTK91CompileException(comment);
        }
      }
      if (((!opcode.toLowerCase().equals(""String_Node_Str"")) && (addressingMode.equals(""String_Node_Str"") || address.equals(""String_Node_Str"")))) {
        comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
        throw new TTK91CompileException(comment);
      }
    }
 else {
      if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
      }
 else {
        if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
          if (addressingMode.equals(""String_Node_Str"") || addressingMode.equals(""String_Node_Str"") || !address.equals(""String_Node_Str"")) {
            comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
            throw new TTK91CompileException(comment);
          }
        }
 else {
          if (opcode.equalsIgnoreCase(""String_Node_Str"") || opcode.equalsIgnoreCase(""String_Node_Str"")) {
            if (firstRegister.equals(""String_Node_Str"")) {
              comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
              throw new TTK91CompileException(comment);
            }
          }
 else {
            if (firstRegister.equals(""String_Node_Str"") || (address.equals(""String_Node_Str"") && secondRegister.equals(""String_Node_Str""))) {
              comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
              throw new TTK91CompileException(comment);
            }
          }
        }
      }
    }
  }
  if (!address.equals(""String_Node_Str"")) {
    boolean isANumber=true;
    for (int i=0; i < address.length(); ++i) {
      if (!(i == 0 && address.charAt(i) == '-')) {
        if (!Character.isDigit(address.charAt(i)))         isANumber=false;
      }
    }
    if (isANumber) {
      if (address.length() > (""String_Node_Str"" + ADDRESSMIN).length() || Integer.parseInt(address) > ADDRESSMAX || Integer.parseInt(address) < ADDRESSMIN) {
        comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
        throw new TTK91CompileException(comment);
      }
    }
  }
  if (addressingMode.equals(""String_Node_Str"") && address.equals(""String_Node_Str"")) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && address.equals(""String_Node_Str"") && !addressingMode.equals(""String_Node_Str"")) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && addressingMode.equals(""String_Node_Str"")) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  if (opcode.equals(""String_Node_Str"") && (!label.equals(""String_Node_Str"") || !firstRegister.equals(""String_Node_Str"") || !addressingMode.equals(""String_Node_Str"")|| !address.equals(""String_Node_Str"")|| !secondRegister.equals(""String_Node_Str""))) {
    comment=new Message(""String_Node_Str"",new Message(""String_Node_Str"",""String_Node_Str"").toString()).toString();
    throw new TTK91CompileException(comment);
  }
  parsedLine=new String[6];
  parsedLine[0]=label.trim();
  parsedLine[1]=opcode.trim();
  parsedLine[2]=firstRegister.trim();
  parsedLine[3]=addressingMode.trim();
  parsedLine[4]=address.trim();
  parsedLine[5]=secondRegister.trim();
  return parsedLine;
}"
51562,"/** 
 * This method parses a String and tries to find a label, opCode and all the other parts of a Command line.
 * @param symbolicOpCode Symbolic form of an operation code. 
 */
public String[] parseLine(String symbolicOpcode){
  String label=""String_Node_Str"";
  String opcode=""String_Node_Str"";
  String firstRegister=""String_Node_Str"";
  String addressingMode=""String_Node_Str"";
  String secondRegister=""String_Node_Str"";
  String address=""String_Node_Str"";
  String[] parsedLine;
  String wordTemp=""String_Node_Str"";
  int nextToCheck=0;
  int fieldEnd=0;
  symbolicOpcode=symbolicOpcode.replace('\t',' ');
  symbolicOpcode=symbolicOpcode.toLowerCase();
  symbolicOpcode=symbolicOpcode.trim();
  fieldEnd=symbolicOpcode.indexOf(""String_Node_Str"");
  if (fieldEnd != -1) {
    symbolicOpcode=symbolicOpcode.substring(0,fieldEnd);
  }
  String[] lineAsArray=symbolicOpcode.split(""String_Node_Str"");
  int lineAsArrayIndex=0;
  if (lineAsArrayIndex == lineAsArray.length) {
    parsedLine=new String[6];
    for (int i=0; i < parsedLine.length; ++i)     parsedLine[i]=""String_Node_Str"";
    return parsedLine;
  }
  wordTemp=lineAsArray[lineAsArrayIndex];
  if (symbolicInterpreter.getOpcode(wordTemp) == -1) {
    if (!validLabelName(wordTemp))     return null;
    label=wordTemp;
    ++lineAsArrayIndex;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    opcode=lineAsArray[lineAsArrayIndex];
    ++lineAsArrayIndex;
    if (symbolicInterpreter.getOpcode(opcode) < 0) {
      return null;
    }
  }
 else {
    return null;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(lineAsArray[lineAsArrayIndex].length() - 1) == ',') {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1)) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1);
        ++lineAsArrayIndex;
      }
    }
 else {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex]) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex];
        ++lineAsArrayIndex;
      }
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '=' || lineAsArray[lineAsArrayIndex].charAt(0) == '@') {
      addressingMode=""String_Node_Str"" + lineAsArray[lineAsArrayIndex].charAt(0);
    }
 else {
      addressingMode=""String_Node_Str"";
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") != -1) {
      if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
        return null;
      }
 else {
        address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length(),lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        if (symbolicInterpreter.getRegisterId(secondRegister) == -1) {
          return null;
        }
      }
    }
 else {
      address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length());
    }
  }
  if (symbolicInterpreter.getRegisterId(address) != -1) {
    secondRegister=address;
    address=""String_Node_Str"";
  }
  if (opcode.length() > 0) {
    if (opcode.charAt(0) == 'j' || opcode.charAt(0) == 'J') {
      if (opcode.toLowerCase().matches(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
        if (firstRegister.equals(""String_Node_Str""))         return null;
      }
      if (addressingMode.equals(""String_Node_Str"") || address.equals(""String_Node_Str""))       return null;
    }
 else {
      if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
      }
 else {
        if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
          if (addressingMode.equals(""String_Node_Str"") || addressingMode.equals(""String_Node_Str"") || !address.equals(""String_Node_Str""))           return null;
        }
 else {
          if (firstRegister.equals(""String_Node_Str"") || (address.equals(""String_Node_Str"") && secondRegister.equals(""String_Node_Str"")))           return null;
        }
      }
    }
  }
  if (addressingMode.equals(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && addressingMode.equals(""String_Node_Str""))   return null;
  if (opcode.equals(""String_Node_Str"") && (!label.equals(""String_Node_Str"") || !firstRegister.equals(""String_Node_Str"") || !addressingMode.equals(""String_Node_Str"")|| !address.equals(""String_Node_Str"")|| !secondRegister.equals(""String_Node_Str""))) {
    return null;
  }
  parsedLine=new String[6];
  parsedLine[0]=label.trim();
  parsedLine[1]=opcode.trim();
  parsedLine[2]=firstRegister.trim();
  parsedLine[3]=addressingMode.trim();
  parsedLine[4]=address.trim();
  parsedLine[5]=secondRegister.trim();
  return parsedLine;
}","/** 
 * This method parses a String and tries to find a label, opCode and all the other parts of a Command line.
 * @param symbolicOpCode Symbolic form of an operation code. 
 */
public String[] parseLine(String symbolicOpcode){
  String label=""String_Node_Str"";
  String opcode=""String_Node_Str"";
  String firstRegister=""String_Node_Str"";
  String addressingMode=""String_Node_Str"";
  String secondRegister=""String_Node_Str"";
  String address=""String_Node_Str"";
  String[] parsedLine;
  String wordTemp=""String_Node_Str"";
  int nextToCheck=0;
  int fieldEnd=0;
  fieldEnd=symbolicOpcode.indexOf(""String_Node_Str"");
  if (fieldEnd != -1) {
    symbolicOpcode=symbolicOpcode.substring(0,fieldEnd);
  }
  symbolicOpcode=symbolicOpcode.replace('\t',' ');
  symbolicOpcode=symbolicOpcode.toLowerCase();
  symbolicOpcode=symbolicOpcode.trim();
  String[] lineAsArray=symbolicOpcode.split(""String_Node_Str"");
  int lineAsArrayIndex=0;
  if (lineAsArrayIndex == lineAsArray.length) {
    parsedLine=new String[6];
    for (int i=0; i < parsedLine.length; ++i)     parsedLine[i]=""String_Node_Str"";
    return parsedLine;
  }
  wordTemp=lineAsArray[lineAsArrayIndex];
  if (symbolicInterpreter.getOpcode(wordTemp) == -1) {
    if (!validLabelName(wordTemp))     return null;
    label=wordTemp;
    ++lineAsArrayIndex;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    opcode=lineAsArray[lineAsArrayIndex];
    ++lineAsArrayIndex;
    if (symbolicInterpreter.getOpcode(opcode) < 0) {
      return null;
    }
  }
 else {
    return null;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(lineAsArray[lineAsArrayIndex].length() - 1) == ',') {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1)) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1);
        ++lineAsArrayIndex;
      }
    }
 else {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex]) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex];
        ++lineAsArrayIndex;
      }
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '=' || lineAsArray[lineAsArrayIndex].charAt(0) == '@') {
      addressingMode=""String_Node_Str"" + lineAsArray[lineAsArrayIndex].charAt(0);
    }
 else {
      addressingMode=""String_Node_Str"";
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") != -1) {
      if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
        return null;
      }
 else {
        address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length(),lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        if (symbolicInterpreter.getRegisterId(secondRegister) == -1) {
          return null;
        }
      }
    }
 else {
      address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length());
    }
  }
  if (symbolicInterpreter.getRegisterId(address) != -1) {
    secondRegister=address;
    address=""String_Node_Str"";
  }
  if (opcode.length() > 0) {
    if (opcode.charAt(0) == 'j' || opcode.charAt(0) == 'J') {
      if (opcode.toLowerCase().matches(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
        if (firstRegister.equals(""String_Node_Str""))         return null;
      }
      if (addressingMode.equals(""String_Node_Str"") || address.equals(""String_Node_Str""))       return null;
    }
 else {
      if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
      }
 else {
        if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
          if (addressingMode.equals(""String_Node_Str"") || addressingMode.equals(""String_Node_Str"") || !address.equals(""String_Node_Str""))           return null;
        }
 else {
          if (firstRegister.equals(""String_Node_Str"") || (address.equals(""String_Node_Str"") && secondRegister.equals(""String_Node_Str"")))           return null;
        }
      }
    }
  }
  if (addressingMode.equals(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && addressingMode.equals(""String_Node_Str""))   return null;
  if (opcode.equals(""String_Node_Str"") && (!label.equals(""String_Node_Str"") || !firstRegister.equals(""String_Node_Str"") || !addressingMode.equals(""String_Node_Str"")|| !address.equals(""String_Node_Str"")|| !secondRegister.equals(""String_Node_Str""))) {
    return null;
  }
  parsedLine=new String[6];
  parsedLine[0]=label.trim();
  parsedLine[1]=opcode.trim();
  parsedLine[2]=firstRegister.trim();
  parsedLine[3]=addressingMode.trim();
  parsedLine[4]=address.trim();
  parsedLine[5]=secondRegister.trim();
  return parsedLine;
}"
51563,"/** 
 * This method coverts a complete command in a symbolic form to a binary form. caller must split up the original command and give the parts as parameters
 * @param opCode String form of an operation code. (STORE)
 * @param firstRegister String form of a first register. (R0-R7, SP or FP)
 * @param addressingMode = or @ or an empty string that representes the memory addressing mode.
 * @param address String form of an address, must be a valid int.
 * @param otherRegister String form of an other register. (R0-R7, SP or FP)
 * @return Int format of a symbolic opCode. (etc 00000010 00101000 00000000 01100100 as int)
 */
public int stringToBinary(String opcode,String firstRegister,String addressingMode,String address,String otherRegister){
  boolean allOk=true;
  int opcodeAsInt=getOpcode(opcode);
  int firstRegisterAsInt=getRegisterId(firstRegister);
  int addressingModeAsInt=getAddressingMode(addressingMode);
  int addressAsInt=0;
  int secondRegisterIdAsInt=getRegisterId(otherRegister);
  if (address.equals(""String_Node_Str""))   address=""String_Node_Str"";
  try {
    addressAsInt=Integer.parseInt(address);
  }
 catch (  NumberFormatException e) {
    allOk=false;
  }
  if (opcodeAsInt < 0) {
    allOk=false;
  }
  if (firstRegisterAsInt < 0) {
    allOk=false;
  }
  if (addressingModeAsInt < 0) {
    allOk=false;
  }
  if (secondRegisterIdAsInt < 0) {
    allOk=false;
  }
  if (allOk) {
    if (opcodeAsInt == 1 || (opcodeAsInt >= 32 && opcodeAsInt <= 44)) {
      addressingModeAsInt=addressingModeAsInt - 1;
      if (addressingModeAsInt == -1) {
        ++addressingModeAsInt;
      }
    }
    String binary=intToBinary(opcodeAsInt,8) + intToBinary(firstRegisterAsInt,3) + intToBinary(addressingModeAsInt,2)+ intToBinary(secondRegisterIdAsInt,3)+ intToBinary(addressAsInt,16);
    return binaryToInt(binary,true);
  }
  return -1;
}","/** 
 * This method coverts a complete command in a symbolic form to a binary form. caller must split up the original command and give the parts as parameters
 * @param opCode String form of an operation code. (STORE)
 * @param firstRegister String form of a first register. (R0-R7, SP or FP)
 * @param addressingMode = or @ or an empty string that representes the memory addressing mode.
 * @param address String form of an address, must be a valid int.
 * @param otherRegister String form of an other register. (R0-R7, SP or FP)
 * @return Int format of a symbolic opCode. (etc 00000010 00101000 00000000 01100100 as int)
 */
public int stringToBinary(String opcode,String firstRegister,String addressingMode,String address,String otherRegister){
  boolean allOk=true;
  int opcodeAsInt=getOpcode(opcode);
  int firstRegisterAsInt=getRegisterId(firstRegister);
  int addressingModeAsInt=getAddressingMode(addressingMode);
  int addressAsInt=0;
  int secondRegisterIdAsInt=getRegisterId(otherRegister);
  if (address.equals(""String_Node_Str""))   address=""String_Node_Str"";
  try {
    addressAsInt=Integer.parseInt(address);
  }
 catch (  NumberFormatException e) {
    allOk=false;
  }
  if (opcodeAsInt < 0) {
    allOk=false;
  }
  if (firstRegisterAsInt < 0) {
    firstRegisterAsInt=0;
  }
  if (addressingModeAsInt < 0) {
    addressingModeAsInt=1;
  }
  if (secondRegisterIdAsInt < 0) {
    secondRegisterIdAsInt=0;
  }
  if (allOk) {
    if (opcodeAsInt == 1 || (opcodeAsInt >= 32 && opcodeAsInt <= 44)) {
      addressingModeAsInt=addressingModeAsInt - 1;
      if (addressingModeAsInt == -1) {
        ++addressingModeAsInt;
      }
    }
    String binary=intToBinary(opcodeAsInt,8) + intToBinary(firstRegisterAsInt,3) + intToBinary(addressingModeAsInt,2)+ intToBinary(secondRegisterIdAsInt,3)+ intToBinary(addressAsInt,16);
    return binaryToInt(binary,true);
  }
  return -1;
}"
51564,"/** 
 * This method parses a String and tries to find a label, opCode and all the other parts of a Command line.
 * @param symbolicOpCode Symbolic form of an operation code. 
 */
public String[] parseLine(String symbolicOpcode){
  String label=""String_Node_Str"";
  String opcode=""String_Node_Str"";
  String firstRegister=""String_Node_Str"";
  String addressingMode=""String_Node_Str"";
  String secondRegister=""String_Node_Str"";
  String address=""String_Node_Str"";
  String[] parsedLine;
  String wordTemp=""String_Node_Str"";
  int nextToCheck=0;
  int fieldEnd=0;
  fieldEnd=symbolicOpcode.indexOf(""String_Node_Str"");
  if (fieldEnd != -1) {
    symbolicOpcode=symbolicOpcode.substring(0,fieldEnd);
  }
  symbolicOpcode=symbolicOpcode.replace('\t',' ');
  symbolicOpcode=symbolicOpcode.toLowerCase();
  symbolicOpcode=symbolicOpcode.trim();
  String[] lineAsArray=symbolicOpcode.split(""String_Node_Str"");
  int lineAsArrayIndex=0;
  if (lineAsArrayIndex == lineAsArray.length) {
    parsedLine=new String[6];
    for (int i=0; i < parsedLine.length; ++i)     parsedLine[i]=""String_Node_Str"";
    return parsedLine;
  }
  wordTemp=lineAsArray[lineAsArrayIndex];
  if (symbolicInterpreter.getOpcode(wordTemp) == -1) {
    if (!validLabelName(wordTemp))     return null;
    label=wordTemp;
    ++lineAsArrayIndex;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    opcode=lineAsArray[lineAsArrayIndex];
    ++lineAsArrayIndex;
    if (symbolicInterpreter.getOpcode(opcode) < 0) {
      return null;
    }
  }
 else {
    return null;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(lineAsArray[lineAsArrayIndex].length() - 1) == ',') {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1)) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1);
        ++lineAsArrayIndex;
      }
    }
 else {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex]) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex];
        ++lineAsArrayIndex;
      }
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '=' || lineAsArray[lineAsArrayIndex].charAt(0) == '@') {
      addressingMode=""String_Node_Str"" + lineAsArray[lineAsArrayIndex].charAt(0);
    }
 else {
      addressingMode=""String_Node_Str"";
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") != -1) {
      if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
        return null;
      }
 else {
        address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length(),lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        if (symbolicInterpreter.getRegisterId(secondRegister) == -1) {
          return null;
        }
      }
    }
 else {
      address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length());
    }
  }
  if (symbolicInterpreter.getRegisterId(address) != -1) {
    secondRegister=address;
    address=""String_Node_Str"";
  }
  if (opcode.length() > 0) {
    if (opcode.charAt(0) == 'j' || opcode.charAt(0) == 'J') {
      if (opcode.toLowerCase().matches(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
        if (firstRegister.equals(""String_Node_Str""))         return null;
      }
      if (addressingMode.equals(""String_Node_Str"") || address.equals(""String_Node_Str""))       return null;
    }
 else {
      if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
      }
 else {
        if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
          if (addressingMode.equals(""String_Node_Str"") || addressingMode.equals(""String_Node_Str"") || !address.equals(""String_Node_Str""))           return null;
        }
 else {
          if (firstRegister.equals(""String_Node_Str"") || (address.equals(""String_Node_Str"") && secondRegister.equals(""String_Node_Str"")))           return null;
        }
      }
    }
  }
  if (addressingMode.equals(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && addressingMode.equals(""String_Node_Str""))   return null;
  if (opcode.equals(""String_Node_Str"") && (!label.equals(""String_Node_Str"") || !firstRegister.equals(""String_Node_Str"") || !addressingMode.equals(""String_Node_Str"")|| !address.equals(""String_Node_Str"")|| !secondRegister.equals(""String_Node_Str""))) {
    return null;
  }
  parsedLine=new String[6];
  parsedLine[0]=label.trim();
  parsedLine[1]=opcode.trim();
  parsedLine[2]=firstRegister.trim();
  parsedLine[3]=addressingMode.trim();
  parsedLine[4]=address.trim();
  parsedLine[5]=secondRegister.trim();
  return parsedLine;
}","/** 
 * This method parses a String and tries to find a label, opCode and all the other parts of a Command line.
 * @param symbolicOpCode Symbolic form of an operation code. 
 */
public String[] parseLine(String symbolicOpcode){
  String label=""String_Node_Str"";
  String opcode=""String_Node_Str"";
  String firstRegister=""String_Node_Str"";
  String addressingMode=""String_Node_Str"";
  String secondRegister=""String_Node_Str"";
  String address=""String_Node_Str"";
  String[] parsedLine;
  String wordTemp=""String_Node_Str"";
  int nextToCheck=0;
  int fieldEnd=0;
  fieldEnd=symbolicOpcode.indexOf(""String_Node_Str"");
  if (fieldEnd != -1) {
    symbolicOpcode=symbolicOpcode.substring(0,fieldEnd);
  }
  symbolicOpcode=symbolicOpcode.replace('\t',' ');
  symbolicOpcode=symbolicOpcode.toLowerCase();
  symbolicOpcode=symbolicOpcode.trim();
  if (symbolicOpcode.length() == 0) {
    parsedLine=new String[6];
    for (int i=0; i < parsedLine.length; ++i)     parsedLine[i]=""String_Node_Str"";
    return parsedLine;
  }
  String[] lineAsArray=symbolicOpcode.split(""String_Node_Str"");
  int lineAsArrayIndex=0;
  wordTemp=lineAsArray[lineAsArrayIndex];
  if (symbolicInterpreter.getOpcode(wordTemp) == -1) {
    if (!validLabelName(wordTemp))     return null;
    label=wordTemp;
    ++lineAsArrayIndex;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    opcode=lineAsArray[lineAsArrayIndex];
    ++lineAsArrayIndex;
    if (symbolicInterpreter.getOpcode(opcode) < 0) {
      return null;
    }
  }
 else {
    return null;
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(lineAsArray[lineAsArrayIndex].length() - 1) == ',') {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1)) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex].substring(0,lineAsArray[lineAsArrayIndex].length() - 1);
        ++lineAsArrayIndex;
      }
    }
 else {
      if (symbolicInterpreter.getRegisterId(lineAsArray[lineAsArrayIndex]) != -1) {
        firstRegister=lineAsArray[lineAsArrayIndex];
        ++lineAsArrayIndex;
      }
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].charAt(0) == '=' || lineAsArray[lineAsArrayIndex].charAt(0) == '@') {
      addressingMode=""String_Node_Str"" + lineAsArray[lineAsArrayIndex].charAt(0);
    }
 else {
      addressingMode=""String_Node_Str"";
    }
  }
  if (lineAsArrayIndex < lineAsArray.length) {
    if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") != -1) {
      if (lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") < lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"")) {
        return null;
      }
 else {
        address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length(),lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        secondRegister=lineAsArray[lineAsArrayIndex].substring(lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str"") + 1,lineAsArray[lineAsArrayIndex].indexOf(""String_Node_Str""));
        if (symbolicInterpreter.getRegisterId(secondRegister) == -1) {
          return null;
        }
      }
    }
 else {
      address=lineAsArray[lineAsArrayIndex].substring(addressingMode.length());
    }
  }
  if (symbolicInterpreter.getRegisterId(address) != -1) {
    secondRegister=address;
    address=""String_Node_Str"";
  }
  if (opcode.length() > 0) {
    if (opcode.charAt(0) == 'j' || opcode.charAt(0) == 'J') {
      if (opcode.toLowerCase().matches(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
        if (firstRegister.equals(""String_Node_Str""))         return null;
      }
      if (addressingMode.equals(""String_Node_Str"") || address.equals(""String_Node_Str""))       return null;
    }
 else {
      if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
      }
 else {
        if (opcode.equalsIgnoreCase(""String_Node_Str"")) {
          if (addressingMode.equals(""String_Node_Str"") || addressingMode.equals(""String_Node_Str"") || !address.equals(""String_Node_Str""))           return null;
        }
 else {
          if (firstRegister.equals(""String_Node_Str"") || (address.equals(""String_Node_Str"") && secondRegister.equals(""String_Node_Str"")))           return null;
        }
      }
    }
  }
  if (addressingMode.equals(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && address.equals(""String_Node_Str""))   return null;
  if (opcode.equalsIgnoreCase(""String_Node_Str"") && addressingMode.equals(""String_Node_Str""))   return null;
  if (opcode.equals(""String_Node_Str"") && (!label.equals(""String_Node_Str"") || !firstRegister.equals(""String_Node_Str"") || !addressingMode.equals(""String_Node_Str"")|| !address.equals(""String_Node_Str"")|| !secondRegister.equals(""String_Node_Str""))) {
    return null;
  }
  parsedLine=new String[6];
  parsedLine[0]=label.trim();
  parsedLine[1]=opcode.trim();
  parsedLine[2]=firstRegister.trim();
  parsedLine[3]=addressingMode.trim();
  parsedLine[4]=address.trim();
  parsedLine[5]=secondRegister.trim();
  return parsedLine;
}"
51565,"public static void main(String[] argv) throws ConnectionError, ContentError, RuntimeError, ParseError, ParseException, BuildException, XMLException {
  if (argv.length == 0) {
    System.err.println(""String_Node_Str"");
    showUsage();
    System.exit(1);
  }
  if (argv.length == 1 && (argv[0].equals(""String_Node_Str"") || argv[0].equals(""String_Node_Str"") || argv[0].equals(""String_Node_Str""))) {
    showUsage();
    System.exit(0);
  }
  HashMap<String,String> argMap=parseArguments(argv);
  String typePath=null;
  String modelName=null;
  boolean verbose=false;
  if (argMap.containsKey(""String_Node_Str"")) {
    typePath=argMap.get(""String_Node_Str"");
    argMap.remove(""String_Node_Str"");
  }
  if (argMap.containsKey(""String_Node_Str"")) {
    modelName=argMap.get(""String_Node_Str"");
    argMap.remove(""String_Node_Str"");
  }
  if (modelName == null) {
    showUsage();
    System.exit(1);
  }
  File simFile=new File(modelName);
  if (!simFile.exists()) {
    E.error(""String_Node_Str"" + simFile.getAbsolutePath());
    System.exit(1);
  }
  FileInclusionReader fir=new FileInclusionReader(simFile);
  if (typePath != null) {
    fir.addSearchPaths(typePath);
  }
  Sim sim=new Sim(fir.read());
  sim.readModel();
  sim.build();
  ControlPanel.getInstance().registerSimulation(sim,simFile);
  StateInstance si=sim.getRootState(false);
  StateType st=sim.getTargetBehavior();
  if (verbose) {
    System.out.println(""String_Node_Str"");
    System.out.println(st.getSummary(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(si.getSummary(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
  }
  boolean doRun=true;
  if (doRun) {
    sim.run();
    E.info(""String_Node_Str"");
  }
  IOUtil.saveReportAndTimesFile(sim);
}","public static void main(String[] argv) throws ConnectionError, ContentError, RuntimeError, ParseError, ParseException, BuildException, XMLException {
  if (argv.length == 0) {
    System.err.println(""String_Node_Str"");
    showUsage();
    System.exit(1);
  }
  if (argv.length == 1 && (argv[0].equals(""String_Node_Str"") || argv[0].equals(""String_Node_Str"") || argv[0].equals(""String_Node_Str""))) {
    showUsage();
    System.exit(0);
  }
  HashMap<String,String> argMap=parseArguments(argv);
  String typePath=null;
  String modelName=null;
  boolean verbose=false;
  if (argMap.containsKey(""String_Node_Str"")) {
    typePath=argMap.get(""String_Node_Str"");
    argMap.remove(""String_Node_Str"");
  }
  if (argMap.containsKey(""String_Node_Str"")) {
    modelName=argMap.get(""String_Node_Str"");
    argMap.remove(""String_Node_Str"");
  }
  if (modelName == null) {
    showUsage();
    System.exit(1);
  }
  final String typePathArg=typePath;
  ControlPanel cp=new ControlPanel(){
    @Override public Sim importFile(    File simFile){
      if (!simFile.exists()) {
        E.error(""String_Node_Str"" + simFile.getAbsolutePath());
        System.exit(1);
      }
      FileInclusionReader fir=new FileInclusionReader(simFile);
      if (typePathArg != null) {
        fir.addSearchPaths(typePathArg);
      }
      try {
        Sim sim=new Sim(fir.read());
        sim.readModel();
        sim.build();
        return sim;
      }
 catch (      Exception e) {
        return null;
      }
    }
  }
;
  File simFile=new File(modelName);
  Sim sim=cp.initialise(simFile);
  StateInstance si=sim.getRootState(false);
  StateType st=sim.getTargetBehavior();
  if (verbose) {
    System.out.println(""String_Node_Str"");
    System.out.println(st.getSummary(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(si.getSummary(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
  }
  boolean doRun=true;
  if (doRun) {
    sim.run();
    E.info(""String_Node_Str"");
  }
  IOUtil.saveReportAndTimesFile(sim);
}"
51566,"/** 
 * The control panel handles one simulation at a time, this should be ""registered"" using this method. Load all the windows, one per display
 * @param sim - simulation object
 * @param simFile - new file to load (can be null)
 * @throws ConnectionError
 * @throws ContentError
 * @throws RuntimeError
 * @throws ParseError
 */
public void registerSimulation(Sim sim,File simFile) throws ConnectionError, ContentError, RuntimeError, ParseError {
  simulation=sim;
  if (simFile != null) {
    workingFile=simFile;
    statusLabel.setText(workingFile.getName());
  }
  loadRunConfigsFromSimulation();
  positionViewers();
}","/** 
 * The control panel handles one simulation at a time, this should be ""registered"" using this method. Load all the windows, one per display
 * @param sim - simulation object
 * @param simFile - new file to load (can be null)
 * @throws ConnectionError
 * @throws ContentError
 * @throws RuntimeError
 * @throws ParseError
 */
protected void registerSimulation(Sim sim,File simFile){
  simulation=sim;
  if (sim == null)   return;
  if (simFile != null) {
    setNewWorkingFile(simFile);
  }
  loadRunConfigsFromSimulation();
  positionViewers();
}"
51567,"/** 
 * load the runConfigs from the simulation into the runConfigs map. The runConfigs map is indexed for easy referencing
 */
private void loadRunConfigsFromSimulation(){
  int index=-1;
  for (  RunConfig conf : simulation.getRunConfigs()) {
    runConfigs.put(index++,conf);
  }
}","/** 
 * load the runConfigs from the simulation into the runConfigs map. The runConfigs map is indexed for easy referencing
 */
protected void loadRunConfigsFromSimulation(){
  int index=-1;
  for (  RunConfig conf : simulation.getRunConfigs()) {
    runConfigs.put(index++,conf);
  }
}"
51568,"private void clearCurrentSimulation(){
  for (  String key : simulation.getDvHM().keySet()) {
    if (simulation.getDvHM().get(key) instanceof StandaloneViewer) {
      StandaloneViewer viewer=((StandaloneViewer)simulation.getDvHM().get(key));
      viewerRects.put(key,viewer.getViewerRectangle());
      viewer.close();
    }
  }
}","protected void clearCurrentSimulation(){
  for (  String key : simulation.getDvHM().keySet()) {
    if (simulation.getDvHM().get(key) instanceof StandaloneViewer) {
      StandaloneViewer viewer=((StandaloneViewer)simulation.getDvHM().get(key));
      viewerRects.put(key,viewer.getViewerRectangle());
      viewer.close();
    }
  }
}"
51569,"/** 
 * Lay out the StandaloneViewer windows in a  
 */
private void positionViewers(){
  int borderWidth=10;
  int layerWidth=30;
  int start_cursor_x=(int)windowDimension.getWidth() + borderWidth;
  int start_cursor_y=0;
  frame.setLocation(0,0);
  int screenWidth=java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;
  int screenHeight=java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height;
  int cursor_x=start_cursor_x;
  int cursor_y=start_cursor_y;
  for (  String key : simulation.getDvHM().keySet()) {
    if (simulation.getDvHM().get(key) instanceof StandaloneViewer) {
      StandaloneViewer sViewer=((StandaloneViewer)simulation.getDvHM().get(key));
      if (viewerRects.containsKey(key)) {
        sViewer.setViewerRectangle(viewerRects.get(key));
        sViewer.show();
        continue;
      }
      sViewer.setViewerRectangle(new Rectangle(cursor_x,cursor_y,(int)sViewer.getDimensions().getWidth(),(int)sViewer.getDimensions().getHeight()));
      sViewer.show();
      cursor_y+=sViewer.getDimensions().getHeight() + borderWidth;
      if ((cursor_y + sViewer.getDimensions().getHeight()) > screenHeight - start_cursor_y) {
        cursor_y=start_cursor_y;
        if ((cursor_x + sViewer.getDimensions().getWidth()) > screenWidth - start_cursor_x) {
          start_cursor_y+=layerWidth;
          start_cursor_x+=layerWidth;
          cursor_y=start_cursor_y;
          cursor_x=start_cursor_x;
        }
 else {
          cursor_x+=sViewer.getDimensions().getWidth() + borderWidth;
        }
      }
    }
  }
  frame.setVisible(true);
}","/** 
 * Lay out the StandaloneViewer windows in a  
 */
protected void positionViewers(){
  int borderWidth=10;
  int layerWidth=30;
  int start_cursor_x=(int)windowDimension.getWidth() + borderWidth;
  int start_cursor_y=0;
  frame.setLocation(0,0);
  int screenWidth=java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;
  int screenHeight=java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().height;
  int cursor_x=start_cursor_x;
  int cursor_y=start_cursor_y;
  for (  String key : simulation.getDvHM().keySet()) {
    if (simulation.getDvHM().get(key) instanceof StandaloneViewer) {
      StandaloneViewer sViewer=((StandaloneViewer)simulation.getDvHM().get(key));
      if (viewerRects.containsKey(key)) {
        sViewer.setViewerRectangle(viewerRects.get(key));
        sViewer.showWithoutPack();
        continue;
      }
      sViewer.setViewerRectangle(new Rectangle(cursor_x,cursor_y,(int)sViewer.getDimensions().getWidth(),(int)sViewer.getDimensions().getHeight()));
      sViewer.show();
      cursor_y+=sViewer.getDimensions().getHeight() + borderWidth;
      if ((cursor_y + sViewer.getDimensions().getHeight()) > screenHeight - start_cursor_y) {
        cursor_y=start_cursor_y;
        if ((cursor_x + sViewer.getDimensions().getWidth()) > screenWidth - start_cursor_x) {
          start_cursor_y+=layerWidth;
          start_cursor_x+=layerWidth;
          cursor_y=start_cursor_y;
          cursor_x=start_cursor_x;
        }
 else {
          cursor_x+=sViewer.getDimensions().getWidth() + borderWidth;
        }
      }
    }
  }
  frame.setVisible(true);
}"
51570,"private void importFile(){
  FileInclusionReader fir=new FileInclusionReader(workingFile);
  try {
    Sim sim=new Sim(fir.read());
    sim.readModel();
    sim.build();
    ControlPanel.getInstance().registerSimulation(sim,null);
  }
 catch (  Exception e) {
    JOptionPane.showMessageDialog(new JFrame(),String.format(""String_Node_Str"",e.getMessage()),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}",protected abstract Sim importFile(File sourceFile);
51571,"/** 
 * The toolbar for the control panel - open, layer and run The buttons have matching menu items performing the same actions 
 */
private void createToolbar(){
  int iconSize=20;
  JToolBar toolbar=new JToolBar();
  toolbar.setFloatable(false);
  toolbar.setRollover(true);
  toolbar.setPreferredSize(new Dimension(0,iconSize + 20));
  URL imgURL=getClass().getResource(""String_Node_Str"");
  ImageIcon iconOpen=new ImageIcon(imgURL);
  Image img=iconOpen.getImage().getScaledInstance(iconSize,iconSize,Image.SCALE_SMOOTH);
  iconOpen.setImage(img);
  JButton buttonOpen=new JButton(iconOpen);
  buttonOpen.setSize(iconSize,iconSize);
  buttonOpen.setToolTipText(""String_Node_Str"");
  buttonOpen.setActionCommand(""String_Node_Str"");
  buttonOpen.addActionListener(this);
  toolbar.add(buttonOpen);
  imgURL=getClass().getResource(""String_Node_Str"");
  ImageIcon iconBringToFront=new ImageIcon(imgURL);
  img=iconBringToFront.getImage().getScaledInstance(iconSize,iconSize,Image.SCALE_SMOOTH);
  iconBringToFront.setImage(img);
  JButton buttonBringToFront=new JButton(iconBringToFront);
  buttonBringToFront.setSize(iconSize,iconSize);
  buttonBringToFront.setToolTipText(""String_Node_Str"");
  buttonBringToFront.setActionCommand(""String_Node_Str"");
  buttonBringToFront.addActionListener(this);
  toolbar.add(buttonBringToFront);
  imgURL=getClass().getResource(""String_Node_Str"");
  ImageIcon iconReloadAndRun=new ImageIcon(imgURL);
  img=iconReloadAndRun.getImage().getScaledInstance(iconSize,iconSize,Image.SCALE_SMOOTH);
  iconReloadAndRun.setImage(img);
  JButton buttonReloadAndRun=new JButton(iconReloadAndRun);
  buttonReloadAndRun.setSize(iconSize,iconSize);
  buttonReloadAndRun.setToolTipText(""String_Node_Str"");
  buttonReloadAndRun.setActionCommand(""String_Node_Str"");
  buttonReloadAndRun.addActionListener(this);
  toolbar.add(buttonReloadAndRun);
  frame.add(toolbar,BorderLayout.NORTH);
}","/** 
 * The toolbar for the control panel - open, layer and run The buttons have matching menu items performing the same actions 
 */
protected void createToolbar(){
  int iconSize=20;
  JToolBar toolbar=new JToolBar();
  toolbar.setFloatable(false);
  toolbar.setRollover(true);
  toolbar.setPreferredSize(new Dimension(0,iconSize + 20));
  URL imgURL=getClass().getResource(""String_Node_Str"");
  ImageIcon iconOpen=new ImageIcon(imgURL);
  Image img=iconOpen.getImage().getScaledInstance(iconSize,iconSize,Image.SCALE_SMOOTH);
  iconOpen.setImage(img);
  JButton buttonOpen=new JButton(iconOpen);
  buttonOpen.setSize(iconSize,iconSize);
  buttonOpen.setToolTipText(""String_Node_Str"");
  buttonOpen.setActionCommand(""String_Node_Str"");
  buttonOpen.addActionListener(this);
  toolbar.add(buttonOpen);
  imgURL=getClass().getResource(""String_Node_Str"");
  ImageIcon iconBringToFront=new ImageIcon(imgURL);
  img=iconBringToFront.getImage().getScaledInstance(iconSize,iconSize,Image.SCALE_SMOOTH);
  iconBringToFront.setImage(img);
  JButton buttonBringToFront=new JButton(iconBringToFront);
  buttonBringToFront.setSize(iconSize,iconSize);
  buttonBringToFront.setToolTipText(""String_Node_Str"");
  buttonBringToFront.setActionCommand(""String_Node_Str"");
  buttonBringToFront.addActionListener(this);
  toolbar.add(buttonBringToFront);
  imgURL=getClass().getResource(""String_Node_Str"");
  ImageIcon iconReloadAndRun=new ImageIcon(imgURL);
  img=iconReloadAndRun.getImage().getScaledInstance(iconSize,iconSize,Image.SCALE_SMOOTH);
  iconReloadAndRun.setImage(img);
  buttonReloadAndRun=new JButton(iconReloadAndRun);
  buttonReloadAndRun.setEnabled(false);
  buttonReloadAndRun.setSize(iconSize,iconSize);
  buttonReloadAndRun.setToolTipText(""String_Node_Str"");
  buttonReloadAndRun.setActionCommand(""String_Node_Str"");
  buttonReloadAndRun.addActionListener(this);
  toolbar.add(buttonReloadAndRun);
  frame.add(toolbar,BorderLayout.NORTH);
}"
51572,"/** 
 * When simulation.run() is called from the actionPerformed method below, it holds up the  Java Swing display thread and we don't get the nice animation, so call run() in its own thread here.
 */
private void runSimulationInNewThread(){
  for (  final Entry<Integer,RunConfig> conf : runConfigs.entrySet()) {
    multiThreadService.execute(new Runnable(){
      @Override public void run(){
        try {
          simulation.run(conf.getValue(),false);
        }
 catch (        Exception ex) {
          JOptionPane.showMessageDialog(new JFrame(),String.format(""String_Node_Str"",ex.getMessage()),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
      }
    }
);
  }
}","/** 
 * When simulation.run() is called from the actionPerformed method below, it holds up the  Java Swing display thread and we don't get the nice animation, so call run() in its own thread here.
 */
protected void runSimulationInNewThread(){
  for (  final Entry<Integer,RunConfig> conf : runConfigs.entrySet()) {
    multiThreadService.execute(new Runnable(){
      @Override public void run(){
        try {
          simulation.run(conf.getValue(),false);
        }
 catch (        Exception ex) {
          JOptionPane.showMessageDialog(new JFrame(),String.format(""String_Node_Str"",ex.getMessage()),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
        }
      }
    }
);
  }
}"
51573,"private void addToMenu(String[] actions,JMenu jm){
  for (  String s : actions) {
    JMenuItem jmi=new JMenuItem(s);
    jmi.setActionCommand(s.toLowerCase());
    jmi.addActionListener(this);
    jm.add(jmi);
  }
}","protected void addToMenu(String[] actions,JMenu jm){
  for (  String s : actions) {
    JMenuItem jmi=new JMenuItem(s);
    jmi.setActionCommand(s.toLowerCase());
    jmi.addActionListener(this);
    jm.add(jmi);
  }
}"
51574,"public void actionPerformed(ActionEvent e){
  String sev=e.getActionCommand();
  if (sev.equals(""String_Node_Str"")) {
    importNewFile();
    runSimulationInNewThread();
  }
 else   if (sev.equals(""String_Node_Str"")) {
    frame.dispatchEvent(new WindowEvent(frame,WindowEvent.WINDOW_CLOSING));
  }
 else   if (sev.equals(""String_Node_Str"")) {
    bringAllViewersToForeground();
  }
 else   if (sev.equals(""String_Node_Str"")) {
    if (simulation != null) {
      clearCurrentSimulation();
      importFile();
      runSimulationInNewThread();
    }
  }
}","public void actionPerformed(ActionEvent e){
  String sev=e.getActionCommand();
  if (sev.equals(""String_Node_Str"")) {
    File newfile=SwingDialogs.getInstance().getFileToRead();
    if (newfile == null)     return;
    clearAll();
    try {
      setNewWorkingFile(newfile);
      Sim sim=importFile(newfile);
      registerSimulation(sim,workingFile);
    }
 catch (    Exception ex) {
      setPrevWorkingFile();
      restoreViewerWindows();
      JOptionPane.showMessageDialog(new JFrame(),String.format(""String_Node_Str"",ex.getMessage()),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
    }
    runSimulationInNewThread();
  }
 else   if (sev.equals(""String_Node_Str"")) {
    frame.dispatchEvent(new WindowEvent(frame,WindowEvent.WINDOW_CLOSING));
  }
 else   if (sev.equals(""String_Node_Str"")) {
    restoreViewerWindows();
  }
 else   if (sev.equals(""String_Node_Str"")) {
    if (simulation != null) {
      clearCurrentSimulation();
      try {
        Sim sim=importFile(workingFile);
        registerSimulation(sim,null);
      }
 catch (      Exception ex) {
        restoreViewerWindows();
        JOptionPane.showMessageDialog(new JFrame(),String.format(""String_Node_Str"",ex.getMessage()),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      }
      runSimulationInNewThread();
    }
  }
}"
51575,"private ControlPanel(){
  frame=new JFrame(""String_Node_Str"");
  frame.setPreferredSize(windowDimension);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  Container ctr=frame.getContentPane();
  JMenuBar jmb=new JMenuBar();
  JMenu jm=new JMenu(""String_Node_Str"");
  String[] actions={""String_Node_Str"",""String_Node_Str""};
  addToMenu(actions,jm);
  jmb.add(jm);
  JMenu jvm=new JMenu(""String_Node_Str"");
  String[] viewActions={""String_Node_Str""};
  addToMenu(viewActions,jvm);
  jmb.add(jvm);
  JMenu jmsimulation=new JMenu(""String_Node_Str"");
  addToMenuWithShortcut(""String_Node_Str"",jmsimulation,KeyEvent.VK_F6,0);
  jmb.add(jmsimulation);
  frame.setJMenuBar(jmb);
  statusLabel.setHorizontalAlignment(SwingConstants.LEFT);
  statusLabel.setVerticalAlignment(SwingConstants.TOP);
  statusLabel.setFont(new Font(statusLabel.getFont().getFontName(),10,10));
  statusLabel.setHorizontalAlignment(SwingConstants.LEFT);
  JPanel statusPanel=new JPanel();
  statusPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
  statusPanel.setLayout(new BoxLayout(statusPanel,BoxLayout.X_AXIS));
  statusPanel.add(statusLabel);
  ctr.add(pmain,BorderLayout.SOUTH);
  ctr.add(statusPanel,BorderLayout.SOUTH);
  createToolbar();
  show();
}","public ControlPanel(){
  frame=new JFrame(""String_Node_Str"");
  frame.setPreferredSize(windowDimension);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  Container ctr=frame.getContentPane();
  JMenuBar jmb=new JMenuBar();
  JMenu jm=new JMenu(""String_Node_Str"");
  String[] actions={""String_Node_Str"",""String_Node_Str""};
  addToMenu(actions,jm);
  jmb.add(jm);
  JMenu jvm=new JMenu(""String_Node_Str"");
  String[] viewActions={""String_Node_Str""};
  addToMenu(viewActions,jvm);
  jmb.add(jvm);
  JMenu jmsimulation=new JMenu(""String_Node_Str"");
  menuItemReloadAndRun=addToMenuWithShortcut(""String_Node_Str"",jmsimulation,KeyEvent.VK_F6,0);
  jmb.add(jmsimulation);
  frame.setJMenuBar(jmb);
  statusLabel.setHorizontalAlignment(SwingConstants.LEFT);
  statusLabel.setVerticalAlignment(SwingConstants.TOP);
  statusLabel.setFont(new Font(statusLabel.getFont().getFontName(),10,10));
  statusLabel.setHorizontalAlignment(SwingConstants.LEFT);
  JPanel statusPanel=new JPanel();
  statusPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
  statusPanel.setLayout(new BoxLayout(statusPanel,BoxLayout.X_AXIS));
  statusPanel.add(statusLabel);
  ctr.add(pmain,BorderLayout.SOUTH);
  ctr.add(statusPanel,BorderLayout.SOUTH);
  createToolbar();
  setRunSimulationEnabled(false);
  show();
}"
51576,"/** 
 * @param action - The name of the action item
 * @param jm - the menu for this item to be added to
 * @param key - int representing the ID of KeyEvent (eg KeyEvent.VK_F6)
 * @param modifier - int representing the ID of ActionEvent (eg ActionEvent.ALT_MASK , 0 for no modifier)
 */
private void addToMenuWithShortcut(String action,JMenu jm,int key,int modifier){
  JMenuItem jmi=new JMenuItem(action);
  jmi.setActionCommand(action.toLowerCase());
  jmi.addActionListener(this);
  jmi.setAccelerator(KeyStroke.getKeyStroke(key,modifier));
  jm.add(jmi);
}","/** 
 * @param action - The name of the action item
 * @param jm - the menu for this item to be added to
 * @param key - int representing the ID of KeyEvent (eg KeyEvent.VK_F6)
 * @param modifier - int representing the ID of ActionEvent (eg ActionEvent.ALT_MASK , 0 for no modifier)
 */
protected JMenuItem addToMenuWithShortcut(String action,JMenu jm,int key,int modifier){
  JMenuItem jmi=new JMenuItem(action);
  jmi.setActionCommand(action.toLowerCase());
  jmi.addActionListener(this);
  jmi.setAccelerator(KeyStroke.getKeyStroke(key,modifier));
  jm.add(jmi);
  return jmi;
}"
51577,"private String mapEs(String frm,String to,String str){
  int strlen=str.length();
  String ret=""String_Node_Str"";
  int lastmatch=0;
  int newmatch=str.indexOf(frm);
  while (newmatch >= 0) {
    ret+=str.substring(lastmatch,newmatch);
    if (newmatch + 3 < strlen && numberHS.contains(str.substring(newmatch + 2,newmatch + 3))) {
      ret+=to;
    }
 else {
      ret+=frm;
    }
    lastmatch=newmatch + frm.length();
    newmatch=str.indexOf(frm,lastmatch);
  }
  ret+=str.substring(lastmatch,str.length());
  return ret;
}","private String mapEs(String frm,String to,String str){
  int strlen=str.length();
  String ret=""String_Node_Str"";
  int lastmatch=0;
  int newmatch=str.indexOf(frm);
  while (newmatch >= 0) {
    ret+=str.substring(lastmatch,newmatch);
    if (newmatch + 3 <= strlen && numberHS.contains(str.substring(newmatch + 2,newmatch + 3))) {
      ret+=to;
    }
 else {
      ret+=frm;
    }
    lastmatch=newmatch + frm.length();
    newmatch=str.indexOf(frm,lastmatch);
  }
  ret+=str.substring(lastmatch,str.length());
  return ret;
}"
51578,"public ArrayList<Node> tokenize(String e){
  ArrayList<Node> ret=new ArrayList<Node>();
  String ewk=disambiguate(e);
  for (  String op : opHM.keySet()) {
    ewk=replaceAll(ewk,op,""String_Node_Str"" + op + ""String_Node_Str"");
  }
  ewk=replaceAll(ewk,""String_Node_Str"",""String_Node_Str"");
  ewk=replaceAll(ewk,""String_Node_Str"",""String_Node_Str"");
  ewk=reambiguate(ewk);
  if (verbose) {
    E.info(""String_Node_Str"" + ewk);
  }
  Node pretok=null;
  String[] bits=ewk.split(""String_Node_Str"");
  for (int i=0; i < bits.length; i++) {
    String stok=bits[i];
    stok=stok.trim();
    if (stok.length() > 0) {
      Node n=null;
      if (stok.equals(""String_Node_Str"")) {
        n=new GroupNode();
      }
 else       if (stok.equals(""String_Node_Str"")) {
        n=new OpenNode();
      }
 else       if (funcHS.contains(stok)) {
        n=new FunctionNode(stok);
      }
 else       if (opHM.containsKey(stok)) {
        n=opHM.get(stok).copy();
        if (n instanceof MinusNode && pretok instanceof AbstractOperatorNode) {
          n=new UnaryMinusNode();
        }
      }
 else       if (snum.indexOf(stok.substring(0,1)) >= 0) {
        n=new ConstantNode(stok);
      }
 else {
        n=new VariableNode(stok);
      }
      if (pretok != null) {
        pretok.linkNext(n);
      }
      pretok=n;
      ret.add(n);
    }
  }
  return ret;
}","public ArrayList<Node> tokenize(String e){
  ArrayList<Node> ret=new ArrayList<Node>();
  String ewk=disambiguate(e);
  if (verbose) {
    E.info(""String_Node_Str"" + ewk);
  }
  for (  String op : opHM.keySet()) {
    ewk=replaceAll(ewk,op,""String_Node_Str"" + op + ""String_Node_Str"");
  }
  ewk=replaceAll(ewk,""String_Node_Str"",""String_Node_Str"");
  ewk=replaceAll(ewk,""String_Node_Str"",""String_Node_Str"");
  ewk=reambiguate(ewk);
  if (verbose) {
    E.info(""String_Node_Str"" + ewk);
  }
  Node pretok=null;
  String[] bits=ewk.split(""String_Node_Str"");
  for (int i=0; i < bits.length; i++) {
    String stok=bits[i];
    stok=stok.trim();
    if (stok.length() > 0) {
      Node n=null;
      if (stok.equals(""String_Node_Str"")) {
        n=new GroupNode();
      }
 else       if (stok.equals(""String_Node_Str"")) {
        n=new OpenNode();
      }
 else       if (funcHS.contains(stok)) {
        n=new FunctionNode(stok);
      }
 else       if (opHM.containsKey(stok)) {
        n=opHM.get(stok).copy();
        if (n instanceof MinusNode && pretok instanceof AbstractOperatorNode) {
          n=new UnaryMinusNode();
        }
      }
 else       if (snum.indexOf(stok.substring(0,1)) >= 0) {
        n=new ConstantNode(stok);
      }
 else {
        n=new VariableNode(stok);
      }
      if (pretok != null) {
        pretok.linkNext(n);
      }
      pretok=n;
      ret.add(n);
    }
  }
  return ret;
}"
51579,"@Test public void testEvaluatingBoolean() throws ParseError, ContentError {
  Parser p=new Parser();
  String src=""String_Node_Str"";
  ParseTree pt=p.parseCondition(src);
  HashMap<String,Double> valHM=new HashMap<String,Double>();
  valHM.put(""String_Node_Str"",4.);
  valHM.put(""String_Node_Str"",5.);
  boolean res=pt.makeBooleanEvaluator().evalB(valHM);
  assertFalse(src,res);
  valHM.put(""String_Node_Str"",1.);
  valHM.put(""String_Node_Str"",50.);
  res=pt.makeBooleanEvaluator().evalB(valHM);
  assertTrue(src,res);
  pt=p.parseCondition(""String_Node_Str"");
  assertFalse(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"");
  assertTrue(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"");
  assertTrue(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"");
  assertFalse(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"" + AndNode.SYMBOL + ""String_Node_Str"");
  assertTrue(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"" + AndNode.SYMBOL + ""String_Node_Str"");
  assertFalse(src,pt.makeBooleanEvaluator().evalB(valHM));
  ParseTree ptOr=p.parseCondition(""String_Node_Str"" + OrNode.SYMBOL + ""String_Node_Str"");
  assertTrue(src,ptOr.makeBooleanEvaluator().evalB(valHM));
  ptOr=p.parseCondition(""String_Node_Str"" + OrNode.SYMBOL + ""String_Node_Str"");
  assertTrue(src,ptOr.makeBooleanEvaluator().evalB(valHM));
  ptOr=p.parseCondition(""String_Node_Str"" + OrNode.SYMBOL + ""String_Node_Str"");
  assertFalse(src,ptOr.makeBooleanEvaluator().evalB(valHM));
  src=""String_Node_Str"";
  pt=p.parseCondition(src);
  valHM=new HashMap<String,Double>();
  valHM.put(""String_Node_Str"",-0.2);
  res=pt.makeBooleanEvaluator().evalB(valHM);
  assertFalse(src,res);
}","@Test public void testEvaluatingBoolean() throws ParseError, ContentError {
  Parser p=new Parser();
  String src=""String_Node_Str"";
  ParseTree pt=p.parseCondition(src);
  HashMap<String,Double> valHM=new HashMap<String,Double>();
  valHM.put(""String_Node_Str"",4.);
  valHM.put(""String_Node_Str"",5.);
  boolean res=pt.makeBooleanEvaluator().evalB(valHM);
  assertFalse(src,res);
  valHM.put(""String_Node_Str"",1.);
  valHM.put(""String_Node_Str"",50.);
  res=pt.makeBooleanEvaluator().evalB(valHM);
  assertTrue(src,res);
  pt=p.parseCondition(""String_Node_Str"");
  assertFalse(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"");
  assertTrue(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"");
  assertTrue(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"");
  assertFalse(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"" + AndNode.SYMBOL + ""String_Node_Str"");
  assertTrue(src,pt.makeBooleanEvaluator().evalB(valHM));
  pt=p.parseCondition(""String_Node_Str"" + AndNode.SYMBOL + ""String_Node_Str"");
  assertFalse(src,pt.makeBooleanEvaluator().evalB(valHM));
  ParseTree ptOr=p.parseCondition(""String_Node_Str"" + OrNode.SYMBOL + ""String_Node_Str"");
  assertTrue(src,ptOr.makeBooleanEvaluator().evalB(valHM));
  ptOr=p.parseCondition(""String_Node_Str"" + OrNode.SYMBOL + ""String_Node_Str"");
  assertTrue(src,ptOr.makeBooleanEvaluator().evalB(valHM));
  ptOr=p.parseCondition(""String_Node_Str"" + OrNode.SYMBOL + ""String_Node_Str"");
  assertFalse(src,ptOr.makeBooleanEvaluator().evalB(valHM));
  src=""String_Node_Str"";
  pt=p.parseCondition(src);
  valHM=new HashMap<String,Double>();
  valHM.put(""String_Node_Str"",-0.2);
  res=pt.makeBooleanEvaluator().evalB(valHM);
  assertFalse(src,res);
  src=""String_Node_Str"";
  pt=p.parseCondition(src);
  valHM=new HashMap<String,Double>();
  valHM.put(""String_Node_Str"",-0.2);
  res=pt.makeBooleanEvaluator().evalB(valHM);
  assertFalse(src,res);
}"
51580,"/** 
 * Read the instance's associated keystore file into memory.
 */
public void loadStoreFile(){
  try {
    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(this.storeFile));
    JSONTokener jsonTokener=new JSONTokener(new InputStreamReader(bis));
    JSONArray array=new JSONArray(jsonTokener);
    bis.close();
    this.keys=new ConcurrentHashMap<String,Key>(array.length());
    for (int i=0, j=array.length(); i < j; i+=1) {
      JSONObject obj=array.getJSONObject(i);
      Key key=new Key(obj.getString(""String_Node_Str""),obj.getString(""String_Node_Str""));
      this.addKey(key);
    }
  }
 catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"");
    log.debug(e.toString());
  }
catch (  JSONException e) {
    log.error(""String_Node_Str"");
    log.debug(e.toString());
  }
catch (  IOException e) {
    log.error(""String_Node_Str"");
    log.debug(e.toString());
  }
}","/** 
 * Read the instance's associated keystore file into memory.
 */
public void loadStoreFile(){
  try {
    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(this.storeFile));
    JSONTokener jsonTokener=new JSONTokener(new InputStreamReader(bis));
    JSONArray array=new JSONArray(jsonTokener);
    bis.close();
    this.keys=new ConcurrentHashMap<String,Key>(array.length());
    for (int i=0, j=array.length(); i < j; i+=1) {
      JSONObject obj=array.getJSONObject(i);
      Key key=new Key(obj.getString(""String_Node_Str""),obj.getString(""String_Node_Str""));
      log.debug(""String_Node_Str"",key.name());
      this.addKey(key);
    }
  }
 catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"");
    log.debug(e.toString());
  }
catch (  JSONException e) {
    log.error(""String_Node_Str"");
    log.debug(e.toString());
  }
catch (  IOException e) {
    log.error(""String_Node_Str"");
    log.debug(e.toString());
  }
}"
51581,"/** 
 * Set the instance's keystore file to the given   {@link File}.
 * @param file The JSON file.
 */
public void setStoreFile(File file){
  this.storeFile=storeFile;
}","/** 
 * Set the instance's keystore file to the given   {@link File}. This will also invoke  {@link edu.clayton.cas.support.token.keystore.JSONKeystore#loadStoreFile()}. Thus, you should be sure that the instance is okay to re-initialize.
 * @param file The JSON file.
 */
public void setStoreFile(File file){
  this.storeFile=file;
  this.loadStoreFile();
}"
51582,"@Before public void buildStore() throws URISyntaxException {
  URL url=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  File file=new File(url.toURI());
  this.keystore=new JSONKeystore(file);
}","@Before public void buildStore() throws URISyntaxException {
  URL url=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  this.keystoreFile=new File(url.toURI());
  this.keystore=new JSONKeystore(this.keystoreFile);
}"
51583,"@Override public int yearsBetweenDates(LocalDate startDate,LocalDate endDate){
  return endDate.getYear() - startDate.getYear();
}","@Override public int yearsBetweenDates(LocalDate startDate,LocalDate endDate){
  return YEARS.between(startDate,endDate).getAmountInt();
}"
51584,"@SuppressWarnings(""String_Node_Str"") @Override protected void runOneIteration() throws Exception {
  logger.info(""String_Node_Str"");
  Tweet tweet=recentTweet.get();
  try {
    logger.info(""String_Node_Str"");
    if (tweet != null) {
      this.endpointUriBuilder=this.endpointUriBuilder.replaceQueryParam(""String_Node_Str"",tweet.getId());
    }
  }
 catch (  IllegalArgumentException iae) {
    logger.error(iae,""String_Node_Str"");
    throw iae;
  }
 finally {
    logger.info(""String_Node_Str"");
  }
  Tweet[] tweets;
  try {
    logger.info(""String_Node_Str"");
    final URI uri=this.endpointUriBuilder.build();
    logger.info(""String_Node_Str"");
    tweets=this.httpClient.get(uri,MediaType.APPLICATION_JSON_TYPE,Tweet[].class);
  }
 catch (  RuntimeException re) {
    logger.error(re,""String_Node_Str"");
    throw re;
  }
 finally {
    logger.info(""String_Node_Str"");
  }
  if (tweets == null)   tweets=new Tweet[0];
  logger.info(""String_Node_Str"",tweets.length);
  if (tweets.length > 0)   eventBus.post(tweets);
  if (tweets.length > 0) {
    if (tweet == null)     tweet=tweets[0];
    for (    Tweet t : tweets) {
      if (tweet.getCreatedAt().isBefore(t.getCreatedAt()))       tweet=t;
    }
  }
  this.recentTweet=Optional.fromNullable(tweet);
}","@SuppressWarnings(""String_Node_Str"") @Override protected void runOneIteration() throws Exception {
  logger.info(""String_Node_Str"");
  Tweet tweet=null;
  try {
    if (recentTweet.isPresent()) {
      tweet=recentTweet.get();
      this.endpointUriBuilder=this.endpointUriBuilder.replaceQueryParam(""String_Node_Str"",tweet.getId());
    }
  }
 catch (  IllegalArgumentException iae) {
    logger.error(iae,""String_Node_Str"");
    throw iae;
  }
  Tweet[] tweets;
  try {
    logger.info(""String_Node_Str"");
    final URI uri=this.endpointUriBuilder.build();
    logger.info(""String_Node_Str"");
    tweets=this.httpClient.get(uri,MediaType.APPLICATION_JSON_TYPE,Tweet[].class);
  }
 catch (  RuntimeException re) {
    logger.error(re,""String_Node_Str"");
    throw re;
  }
 finally {
    logger.info(""String_Node_Str"");
  }
  if (tweets == null)   tweets=new Tweet[0];
  logger.info(""String_Node_Str"",tweets.length);
  if (tweets.length > 0)   eventBus.post(tweets);
  if (tweets.length > 0) {
    if (tweet == null)     tweet=tweets[0];
    for (    Tweet t : tweets) {
      if (tweet.getCreatedAt().isBefore(t.getCreatedAt()))       tweet=t;
    }
  }
  this.recentTweet=Optional.fromNullable(tweet);
}"
51585,"@EventHandler public void onTransaction(TraderTransactionEvent event) throws IOException {
  String name=event.getNPC().getName();
  int stra=event.getStatus().equals(TraderStatus.SELL) ? 1 : 0;
  int btra=event.getStatus().equals(TraderStatus.BUY) ? 1 : 0;
  URL dtl=new URL(""String_Node_Str"" + CitizensTrader.getInstance().getServer().getName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ stra+ ""String_Node_Str""+ btra);
  URLConnection dtlCon=dtl.openConnection();
  dtlCon.connect();
}","@EventHandler public void onTransaction(TraderTransactionEvent event) throws IOException {
  String name=event.getNPC().getName();
  int stra=event.getResult().equals(TransactionResult.SUCCESS_SELL) ? 1 : 0;
  int btra=event.getStatus().equals(TransactionResult.SUCCESS_BUY) ? 1 : 0;
  URL dtl=new URL(""String_Node_Str"" + CitizensTrader.getInstance().getServer().getServerName() + ""String_Node_Str""+ name+ ""String_Node_Str""+ stra+ ""String_Node_Str""+ btra);
  URLConnection dtlCon=dtl.openConnection();
  dtlCon.getInputStream();
}"
51586,"@Override public int hashCode(){
  System.out.print(key);
  return key.hashCode();
}","@Override public int hashCode(){
  return key.hashCode();
}"
51587,"public void sendMessage(CommandSender sender,String key,Object... obj){
  if (!cache.containsKey(new LocaleEntry(key,pver))) {
    locale.set(buildPath(""String_Node_Str"",key),""String_Node_Str"");
    cache.put(new LocaleEntry(key,pver),""String_Node_Str"");
    save();
  }
  String msg=cache.get(new LocaleEntry(key,pver));
  for (int i=0; i < obj.length; ) {
    if (obj[i] instanceof String) {
      System.out.print(obj[i + 1]);
      if (!keywords.containsKey(new LocaleEntry((String)obj[i + 1],pver)) && ((String)obj[i + 1]).startsWith(""String_Node_Str"")) {
        locale.set(buildPath(""String_Node_Str"",((String)obj[i + 1]).substring(1)),""String_Node_Str"");
        keywords.put(new LocaleEntry((String)obj[i + 1],pver),""String_Node_Str"");
        save();
      }
      msg=msg.replaceAll(""String_Node_Str"" + (String)obj[i] + ""String_Node_Str"",keywords.get(new LocaleEntry((String)obj[i + 1],pver)));
      i+=2;
    }
 else     ++i;
  }
  sender.sendMessage(msg.replace('^','§'));
}","public void sendMessage(CommandSender sender,String key,Object... obj){
  if (!cache.containsKey(new LocaleEntry(key,pver))) {
    locale.set(buildPath(""String_Node_Str"",key),""String_Node_Str"");
    cache.put(new LocaleEntry(key,pver),""String_Node_Str"");
    save();
  }
  String msg=cache.get(new LocaleEntry(key,pver));
  for (int i=0; i < obj.length; ) {
    if (obj[i] instanceof String) {
      if (!keywords.containsKey(new LocaleEntry((String)obj[i + 1],pver)) && ((String)obj[i + 1]).startsWith(""String_Node_Str"")) {
        locale.set(buildPath(""String_Node_Str"",((String)obj[i + 1]).substring(1)),""String_Node_Str"");
        keywords.put(new LocaleEntry((String)obj[i + 1],pver),""String_Node_Str"");
        save();
      }
      msg=msg.replaceAll(""String_Node_Str"" + (String)obj[i] + ""String_Node_Str"",keywords.get(new LocaleEntry((String)obj[i + 1],pver)));
      i+=2;
    }
 else     ++i;
  }
  sender.sendMessage(msg.replace('^','§'));
}"
51588,"public static StockItem toStockItem(ItemStack is){
  String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
  if (!is.getEnchantments().isEmpty()) {
    itemInfo+=""String_Node_Str"";
    for (    Map.Entry<Enchantment,Integer> ench : is.getItemMeta().getEnchants().entrySet())     itemInfo+=ench.getKey().getId() + ""String_Node_Str"" + ench.getValue()+ ""String_Node_Str"";
  }
  if (is.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)is.getItemMeta();
    if (!meta.getStoredEnchants().isEmpty()) {
      itemInfo+=""String_Node_Str"";
      for (      Map.Entry<Enchantment,Integer> e : meta.getStoredEnchants().entrySet())       itemInfo+=e.getKey().getId() + ""String_Node_Str"" + e.getValue()+ ""String_Node_Str"";
    }
  }
 else   if (StockItem.isLeatherArmor(is)) {
    LeatherArmorMeta meta=(LeatherArmorMeta)is.getItemMeta();
    Color color=meta.getColor();
    itemInfo+=""String_Node_Str"" + color.getRed() + ""String_Node_Str""+ color.getGreen()+ ""String_Node_Str""+ color.getBlue();
  }
 else   if (is.getType().equals(Material.FIREWORK)) {
    itemInfo+=""String_Node_Str"" + StockItem.fireworkData(is);
  }
  String name=MetaTools.getName(is);
  if (!name.isEmpty())   itemInfo+=""String_Node_Str"" + name;
  if (is.hasItemMeta()) {
    if (is.getItemMeta().hasLore()) {
      itemInfo+=""String_Node_Str"";
      System.out.print(itemInfo);
      return new StockItem(itemInfo,is.getItemMeta().getLore());
    }
  }
  return new StockItem(itemInfo);
}","public static StockItem toStockItem(ItemStack is){
  String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
  if (!is.getEnchantments().isEmpty()) {
    itemInfo+=""String_Node_Str"";
    for (    Map.Entry<Enchantment,Integer> ench : is.getItemMeta().getEnchants().entrySet())     itemInfo+=ench.getKey().getId() + ""String_Node_Str"" + ench.getValue()+ ""String_Node_Str"";
  }
  if (is.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)is.getItemMeta();
    if (!meta.getStoredEnchants().isEmpty()) {
      itemInfo+=""String_Node_Str"";
      for (      Map.Entry<Enchantment,Integer> e : meta.getStoredEnchants().entrySet())       itemInfo+=e.getKey().getId() + ""String_Node_Str"" + e.getValue()+ ""String_Node_Str"";
    }
  }
 else   if (StockItem.isLeatherArmor(is)) {
    LeatherArmorMeta meta=(LeatherArmorMeta)is.getItemMeta();
    Color color=meta.getColor();
    itemInfo+=""String_Node_Str"" + color.getRed() + ""String_Node_Str""+ color.getGreen()+ ""String_Node_Str""+ color.getBlue();
  }
 else   if (is.getType().equals(Material.FIREWORK)) {
    itemInfo+=""String_Node_Str"" + StockItem.fireworkData(is);
  }
  String name=MetaTools.getName(is);
  if (!name.isEmpty())   itemInfo+=""String_Node_Str"" + name;
  if (is.hasItemMeta()) {
    if (is.getItemMeta().hasLore()) {
      itemInfo+=""String_Node_Str"";
      return new StockItem(itemInfo,is.getItemMeta().getLore());
    }
  }
  return new StockItem(itemInfo);
}"
51589,"@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (!(event.getWhoClicked() instanceof Player))   return;
  Player p=(Player)event.getWhoClicked();
  if (p.getGameMode().equals(GameMode.CREATIVE) && event.getView().getType().equals(InventoryType.PLAYER))   return;
  if ((p.getGameMode().equals(GameMode.SURVIVAL) || p.getGameMode().equals(GameMode.SURVIVAL)) && event.getView().getType().equals(InventoryType.CRAFTING))   return;
  tNPC economyNpc=playerInteraction.get(p.getName());
  if (economyNpc == null)   return;
  if (economyNpc.locked()) {
    economyNpc.managerMode(event);
    return;
  }
  if (economyNpc instanceof Banker) {
    if (((Banker)economyNpc).getStatus().settings()) {
      economyNpc.settingsMode(event);
      return;
    }
  }
  economyNpc.simpleMode(event);
}","@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (!(event.getWhoClicked() instanceof Player))   return;
  Player p=(Player)event.getWhoClicked();
  if (p.getGameMode().equals(GameMode.CREATIVE) && event.getView().getType().equals(InventoryType.PLAYER))   return;
  if ((p.getGameMode().equals(GameMode.SURVIVAL) || p.getGameMode().equals(GameMode.ADVENTURE)) && event.getView().getType().equals(InventoryType.CRAFTING))   return;
  tNPC economyNpc=playerInteraction.get(p.getName());
  if (economyNpc == null)   return;
  if (economyNpc.locked()) {
    economyNpc.managerMode(event);
    return;
  }
  if (economyNpc instanceof Banker) {
    if (((Banker)economyNpc).getStatus().settings()) {
      economyNpc.settingsMode(event);
      return;
    }
  }
  economyNpc.simpleMode(event);
}"
51590,"@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",perm=""String_Node_Str"") public void traderWalletDeposit(CitizensTrader plugin,CommandSender sender,Trader npc,Map<String,String> args){
  Wallet wallet=npc.getWallet();
  double amount=Double.parseDouble(args.get(""String_Node_Str""));
  if (CitizensTrader.getEconomy().depositPlayer(sender.getName(),amount).transactionSuccess()) {
    wallet.deposit(null,amount);
    locale.sendMessage(sender,""String_Node_Str"",""String_Node_Str"",format.format(amount));
    locale.sendMessage(sender,""String_Node_Str"",""String_Node_Str"",format.format(wallet.getMoney()));
  }
 else   locale.sendMessage(sender,""String_Node_Str"");
}","@Command(name=""String_Node_Str"",syntax=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",perm=""String_Node_Str"") public void traderWalletDeposit(CitizensTrader plugin,CommandSender sender,Trader npc,Map<String,String> args){
  Wallet wallet=npc.getWallet();
  double amount=Double.parseDouble(args.get(""String_Node_Str""));
  if (CitizensTrader.getEconomy().withdrawPlayer(sender.getName(),amount).transactionSuccess()) {
    wallet.deposit(null,amount);
    locale.sendMessage(sender,""String_Node_Str"",""String_Node_Str"",format.format(amount));
    locale.sendMessage(sender,""String_Node_Str"",""String_Node_Str"",format.format(wallet.getMoney()));
  }
 else   locale.sendMessage(sender,""String_Node_Str"");
}"
51591,"public boolean withdraw(String p,double m){
switch (type) {
case OWNER:
    return economy.withdrawPlayer(p,m).transactionSuccess();
case BANK:
  return economy.bankWithdraw(bank,m).transactionSuccess();
case NPC:
if (money >= m) money-=m;
return money >= m;
default :
return true;
}
}","public boolean withdraw(String p,double m){
switch (type) {
case OWNER:
    return economy.withdrawPlayer(p,m).transactionSuccess();
case BANK:
  return economy.bankWithdraw(bank,m).transactionSuccess();
case NPC:
if (money >= m) {
  money-=m;
  return true;
}
return false;
default :
return true;
}
}"
51592,"public static void removeDescriptions(Inventory inventory){
  int s=0;
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      NBTTagEditor.removeDescription(item);
      inventory.setItem(s,new ItemStack(cleanItem(item)));
    }
    ++s;
  }
}","public static void removeDescriptions(Inventory inventory){
  int s=0;
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      NBTTagEditor.removeDescription(item,""String_Node_Str"");
      inventory.setItem(s,new ItemStack(cleanItem(item)));
    }
    ++s;
  }
}"
51593,"public static void removeDescription(ItemStack item){
  if (!item.hasItemMeta())   return;
  ItemMeta meta=item.getItemMeta();
  if (!meta.hasLore())   return;
  List<String> list=meta.getLore();
  List<String> lore=CitizensTrader.getLocaleManager().lore(""String_Node_Str"");
  if (list.size() >= lore.size()) {
    Iterator<String> it=list.iterator();
    while (it.hasNext()) {
      String line=it.next();
      for (int j=0; j < lore.size(); ++j) {
        String m=lore.get(j);
        m=m.replace(""String_Node_Str"",""String_Node_Str"");
        m=m.replace(""String_Node_Str"",""String_Node_Str"");
        m=m.replace(""String_Node_Str"",""String_Node_Str"");
        if (Pattern.matches(m,line)) {
          it.remove();
          j=lore.size();
        }
      }
    }
  }
  if (list.isEmpty())   meta.setLore(null);
 else   meta.setLore(list);
  item.setItemMeta(meta);
}","public static void removeDescription(ItemStack item,String toRem){
  if (!item.hasItemMeta())   return;
  ItemMeta meta=item.getItemMeta();
  if (!meta.hasLore())   return;
  List<String> list=meta.getLore();
  List<String> lore=CitizensTrader.getLocaleManager().lore(toRem);
  if (list.size() >= lore.size()) {
    Iterator<String> it=list.iterator();
    while (it.hasNext()) {
      String line=it.next();
      for (int j=0; j < lore.size(); ++j) {
        String m=lore.get(j);
        m=m.replace(""String_Node_Str"",""String_Node_Str"");
        m=m.replace(""String_Node_Str"",""String_Node_Str"");
        m=m.replace(""String_Node_Str"",""String_Node_Str"");
        if (Pattern.matches(m,line)) {
          it.remove();
          j=lore.size();
        }
      }
    }
  }
  if (list.isEmpty())   meta.setLore(null);
 else   meta.setLore(list);
  item.setItemMeta(meta);
}"
51594,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(slot,3)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(2))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_PRICE);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
        getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(4));
        locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(4))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(5));
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(5))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(4));
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          locale.sendMessage(player,""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        saveManagedAmounts();
        switchInventory(TraderStatus.MANAGE_SELL);
        locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem())             locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick()) {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(-calculateTimeout(event.getCursor()));
              }
 else {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(calculateTimeout(event.getCursor()));
              }
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem())             locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick()) {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(-calculateTimeout(event.getCursor()));
              }
 else {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(calculateTimeout(event.getCursor()));
              }
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getPlayerLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (event.isLeftClick()) {
          if (equalsTraderStatus(TraderStatus.MANAGE_SELL)) {
            if (selectItem(slot,TraderStatus.MANAGE_SELL).hasSelectedItem() && permissionsManager.has(player,""String_Node_Str"")) {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
            }
          }
        }
 else {
        }
        event.setCancelled(true);
      }
 else {
        if (equalsTraderStatus(getBasicManageModeByWool())) {
          if (event.isRightClick()) {
            if (!permissionsManager.has(player,""String_Node_Str"")) {
              locale.sendMessage(player,""String_Node_Str"");
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().stackPrice()) {
                getSelectedItem().setStackPrice(false);
                locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
              }
 else {
                getSelectedItem().setStackPrice(true);
                locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
              }
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getManageLore(getSelectedItem(),getTraderStatus().name(),player));
              getSelectedItem().setAsPatternItem(false);
            }
            selectItem(null);
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.setAmount(event.getCursor().getAmount());
              if (this.isBuyModeByWool()) {
                trait.getStock().addItem(""String_Node_Str"",item);
                getStock().addItem(""String_Node_Str"",item);
              }
              if (this.isSellModeByWool()) {
                trait.getStock().addItem(""String_Node_Str"",item);
                getStock().addItem(""String_Node_Str"",item);
              }
              locale.sendMessage(player,""String_Node_Str"");
            }
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              getSelectedItem().setSlot(-2);
              locale.sendMessage(player,""String_Node_Str"");
            }
            item.setSlot(slot);
            item.setAsPatternItem(false);
            locale.sendMessage(player,""String_Node_Str"");
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              getSelectedItem().setSlot(-2);
              locale.sendMessage(player,""String_Node_Str"");
            }
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
          if (!equalsSelected(event.getCursor(),true,false) && !event.getCursor().getType().equals(Material.AIR)) {
            locale.sendMessage(player,""String_Node_Str"");
            event.setCancelled(true);
          }
          if (!event.getCursor().getType().equals(Material.AIR))           getSelectedItem().setAsPatternItem(false);
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem())             locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",f.format(getSelectedItem().getRawPrice()));
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else               getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
              getSelectedItem().setAsPatternItem(false);
              getSelectedItem().setPatternPrice(false);
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getPriceLore(getSelectedItem(),0,getBasicManageModeByWool().toString(),getStock().getPatterns(),player));
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",f.format(getSelectedItem().getRawPrice()));
            }
          }
          selectItem(null);
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick())               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(calculateLimit(event.getCursor()));
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              getSelectedItem().setAsPatternItem(false);
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
          selectItem(null);
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick())               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(calculateLimit(event.getCursor()));
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getPlayerLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              getSelectedItem().setAsPatternItem(false);
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
          selectItem(null);
          event.setCancelled(true);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(getBasicManageModeByWool())) {
      if (getInventoryClicked() && hasSelectedItem()) {
        if (equalsTraderStatus(TraderStatus.MANAGE_SELL))         trait.getStock().removeItem(""String_Node_Str"",getSelectedItem().getSlot());
        if (equalsTraderStatus(TraderStatus.MANAGE_BUY))         trait.getStock().removeItem(""String_Node_Str"",getSelectedItem().getSlot());
        selectItem(null);
        locale.sendMessage(player,""String_Node_Str"");
      }
 else {
        if (event.getCurrentItem().getTypeId() != 0) {
          selectItem(toStockItem(event.getCurrentItem()));
          locale.sendMessage(player,""String_Node_Str"");
        }
      }
    }
    setInventoryClicked(false);
  }
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(slot,3)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(2))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_PRICE);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
        getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(4));
        locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(4))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(5));
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(5))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(4));
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          locale.sendMessage(player,""String_Node_Str"");
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        saveManagedAmounts();
        switchInventory(TraderStatus.MANAGE_SELL);
        locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem())             locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick()) {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(-calculateTimeout(event.getCursor()));
              }
 else {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(calculateTimeout(event.getCursor()));
              }
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem())             locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick()) {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(-calculateTimeout(event.getCursor()));
              }
 else {
                getSelectedItem().getLimits().get(""String_Node_Str"").changeTimeout(calculateTimeout(event.getCursor()));
              }
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getPlayerLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().timeout(""String_Node_Str"")));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (event.isLeftClick()) {
          if (equalsTraderStatus(TraderStatus.MANAGE_SELL)) {
            if (selectItem(slot,TraderStatus.MANAGE_SELL).hasSelectedItem() && permissionsManager.has(player,""String_Node_Str"")) {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
            }
          }
        }
 else {
        }
        event.setCancelled(true);
      }
 else {
        if (equalsTraderStatus(getBasicManageModeByWool())) {
          if (event.isRightClick()) {
            if (!permissionsManager.has(player,""String_Node_Str"")) {
              locale.sendMessage(player,""String_Node_Str"");
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().stackPrice()) {
                getSelectedItem().setStackPrice(false);
                locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
              }
 else {
                getSelectedItem().setStackPrice(true);
                locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
              }
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getManageLore(getSelectedItem(),getTraderStatus().name(),player));
              getSelectedItem().setAsPatternItem(false);
            }
            selectItem(null);
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.setAmount(event.getCursor().getAmount());
              if (this.isBuyModeByWool()) {
                trait.getStock().addItem(""String_Node_Str"",item);
                getStock().addItem(""String_Node_Str"",item);
              }
              if (this.isSellModeByWool()) {
                trait.getStock().addItem(""String_Node_Str"",item);
                getStock().addItem(""String_Node_Str"",item);
              }
              locale.sendMessage(player,""String_Node_Str"");
            }
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              getSelectedItem().setSlot(-2);
              locale.sendMessage(player,""String_Node_Str"");
            }
            item.setSlot(slot);
            item.setAsPatternItem(false);
            locale.sendMessage(player,""String_Node_Str"");
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              getSelectedItem().setSlot(-2);
              locale.sendMessage(player,""String_Node_Str"");
            }
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
          if (!equalsSelected(event.getCursor(),true,false) && !event.getCursor().getType().equals(Material.AIR)) {
            locale.sendMessage(player,""String_Node_Str"");
            event.setCancelled(true);
          }
          if (!event.getCursor().getType().equals(Material.AIR))           getSelectedItem().setAsPatternItem(false);
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem())             locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",f.format(getSelectedItem().getRawPrice()));
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else               getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
              getSelectedItem().setAsPatternItem(false);
              getSelectedItem().setPatternPrice(false);
              NBTTagEditor.removeDescription(event.getCurrentItem());
              event.setCurrentItem(TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getPriceLore(getSelectedItem(),0,getBasicManageModeByWool().toString(),getStock().getPatterns(),player)));
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",f.format(getSelectedItem().getRawPrice()));
            }
          }
          selectItem(null);
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick())               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(calculateLimit(event.getCursor()));
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              getSelectedItem().setAsPatternItem(false);
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
          selectItem(null);
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
 else {
            if (selectItem(slot,getBasicManageModeByWool()).hasSelectedItem()) {
              if (getSelectedItem().getLimits().get(""String_Node_Str"") == null)               getSelectedItem().getLimits().set(""String_Node_Str"",new Limit(0,-1));
              if (event.isRightClick())               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimits().get(""String_Node_Str"").changeLimit(calculateLimit(event.getCursor()));
              NBTTagEditor.removeDescription(event.getCurrentItem());
              TraderStockPart.setLore(event.getCurrentItem(),TraderStockPart.getPlayerLimitLore(getSelectedItem(),getTraderStatus().name(),player));
              getSelectedItem().setAsPatternItem(false);
              locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getLimits().get(""String_Node_Str"").getLimit()));
            }
          }
          selectItem(null);
          event.setCancelled(true);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(getBasicManageModeByWool())) {
      if (getInventoryClicked() && hasSelectedItem()) {
        if (equalsTraderStatus(TraderStatus.MANAGE_SELL))         trait.getStock().removeItem(""String_Node_Str"",getSelectedItem().getSlot());
        if (equalsTraderStatus(TraderStatus.MANAGE_BUY))         trait.getStock().removeItem(""String_Node_Str"",getSelectedItem().getSlot());
        selectItem(null);
        locale.sendMessage(player,""String_Node_Str"");
      }
 else {
        if (event.getCurrentItem().getTypeId() != 0) {
          selectItem(toStockItem(event.getCurrentItem()));
          locale.sendMessage(player,""String_Node_Str"");
        }
      }
    }
    setInventoryClicked(false);
  }
}"
51595,"@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCursor(null);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.SELL);
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.BUY);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmounts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
            locale.sendMessage(player,""String_Node_Str"");
          }
 else           if (!inventoryHasPlace(0)) {
            locale.sendMessage(player,""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          }
 else           if (!buyTransaction(price)) {
            locale.sendMessage(player,""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          }
 else {
            locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
            addSelectedToInventory(0);
            updateLimits();
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else         if (!inventoryHasPlace(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else         if (!buyTransaction(price)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
          addSelectedToInventory(slot);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
          updateBuyLimits(scale);
          NBTTagEditor.removeDescription(event.getCurrentItem());
          removeFromInventory(event.getCurrentItem(),event);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        locale.sendMessage(player,""String_Node_Str"");
      }
 else       if (!checkBuyLimits(scale)) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        locale.sendMessage(player,""String_Node_Str"");
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        locale.sendMessage(player,""String_Node_Str"");
      }
 else {
        locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
        updateBuyLimits(scale);
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
        NBTTagEditor.removeDescription(event.getCurrentItem());
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
      }
    }
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCursor(null);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.SELL);
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          switchInventory(TraderStatus.BUY);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmounts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
            locale.sendMessage(player,""String_Node_Str"");
          }
 else           if (!inventoryHasPlace(0)) {
            locale.sendMessage(player,""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          }
 else           if (!buyTransaction(price)) {
            locale.sendMessage(player,""String_Node_Str"");
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          }
 else {
            locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
            addSelectedToInventory(0);
            updateLimits();
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else         if (!inventoryHasPlace(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else         if (!buyTransaction(price)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
          addSelectedToInventory(slot);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          locale.sendMessage(player,""String_Node_Str"");
        }
 else {
          locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
          updateBuyLimits(scale);
          NBTTagEditor.removeDescription(event.getCurrentItem(),""String_Node_Str"");
          removeFromInventory(event.getCurrentItem(),event);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        locale.sendMessage(player,""String_Node_Str"");
      }
 else       if (!checkBuyLimits(scale)) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        locale.sendMessage(player,""String_Node_Str"");
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        locale.sendMessage(player,""String_Node_Str"");
      }
 else {
        locale.sendMessage(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",String.valueOf(getSelectedItem().getAmount()),""String_Node_Str"",f.format(price));
        updateBuyLimits(scale);
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
        NBTTagEditor.removeDescription(event.getCurrentItem(),""String_Node_Str"");
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
      }
    }
  }
  event.setCancelled(true);
}"
51596,"public void setItemPriceLore(ItemStack is){
  NBTTagEditor.removeDescription(is);
  StockItem it=this.getStock().getItem(is,TraderStatus.BUY,true,false);
  if (it != null) {
    int scale=is.getAmount() / it.getAmount();
    DecimalFormat f=new DecimalFormat(""String_Node_Str"");
    List<String> lore=new ArrayList<String>();
    ;
    for (    String l : CitizensTrader.getLocaleManager().lore(""String_Node_Str""))     lore.add(l.replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"")) + ""String_Node_Str"").replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"") * scale) + ""String_Node_Str""));
    if (scale > 0)     NBTTagEditor.addDescription(is,lore);
  }
}","public void setItemPriceLore(ItemStack is){
  NBTTagEditor.removeDescription(is,""String_Node_Str"");
  StockItem it=this.getStock().getItem(is,TraderStatus.BUY,true,false);
  if (it != null) {
    int scale=is.getAmount() / it.getAmount();
    DecimalFormat f=new DecimalFormat(""String_Node_Str"");
    List<String> lore=new ArrayList<String>();
    ;
    for (    String l : CitizensTrader.getLocaleManager().lore(""String_Node_Str""))     lore.add(l.replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"")) + ""String_Node_Str"").replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"") * scale) + ""String_Node_Str""));
    if (scale > 0)     NBTTagEditor.addDescription(is,lore);
  }
}"
51597,"public StockItem getItem(ItemStack itemStack,TraderStatus status,boolean dura,boolean amount){
  boolean equal=false;
  for (  StockItem item : stock.get(status.toString())) {
    equal=false;
    if (itemStack.getType().equals(item.getItemStack().getType())) {
      equal=true;
      if (dura)       equal=itemStack.getDurability() <= item.getItemStack().getDurability();
 else       equal=itemStack.getData().equals(item.getItemStack().getData());
      if (amount && equal)       equal=itemStack.getAmount() >= item.getItemStack().getAmount();
      if (equal) {
        boolean checkEnchant=item.isCheckingEnchantments();
        boolean checkLevel=item.isCheckingEnchantmentLevels();
        if (checkEnchant || checkLevel) {
          Map<Enchantment,Integer> itemStackEnchantments=null;
          Map<Enchantment,Integer> stockItemEnchantments=null;
          if (itemStack.getType().equals(Material.ENCHANTED_BOOK)) {
            EnchantmentStorageMeta itemStackStorageMeta=(EnchantmentStorageMeta)itemStack.getItemMeta();
            if (itemStackStorageMeta != null) {
              itemStackEnchantments=itemStackStorageMeta.getStoredEnchants();
            }
            EnchantmentStorageMeta stockItemStorageMeta=(EnchantmentStorageMeta)item.getItemStack().getItemMeta();
            if (stockItemStorageMeta != null) {
              itemStackEnchantments=stockItemStorageMeta.getStoredEnchants();
            }
          }
 else {
            itemStackEnchantments=itemStack.getEnchantments();
            stockItemEnchantments=item.getItemStack().getEnchantments();
          }
          if (itemStackEnchantments == null || itemStackEnchantments.isEmpty()) {
            equal=(stockItemEnchantments == null || stockItemEnchantments.isEmpty());
          }
 else {
            equal=(stockItemEnchantments != null && !stockItemEnchantments.isEmpty() && itemStackEnchantments.keySet().equals(stockItemEnchantments.keySet()));
          }
          if (equal && checkLevel) {
            for (            Map.Entry<Enchantment,Integer> ench : itemStackEnchantments.entrySet()) {
              if (ench.getValue() != stockItemEnchantments.get(ench.getKey())) {
                equal=false;
                break;
              }
            }
          }
        }
      }
      if (equal)       return item;
    }
  }
  return null;
}","public StockItem getItem(ItemStack itemStack,TraderStatus status,boolean dura,boolean amount){
  boolean equal=false;
  for (  StockItem item : stock.get(status.toString())) {
    equal=false;
    if (itemStack.getType().equals(item.getItemStack().getType())) {
      equal=true;
      if (dura)       equal=itemStack.getDurability() <= item.getItemStack().getDurability();
 else       equal=itemStack.getData().equals(item.getItemStack().getData());
      if (amount && equal)       equal=itemStack.getAmount() >= item.getItemStack().getAmount();
      if (equal) {
        boolean checkEnchant=item.isCheckingEnchantments();
        boolean checkLevel=item.isCheckingEnchantmentLevels();
        if (checkEnchant || checkLevel) {
          Map<Enchantment,Integer> itemStackEnchantments=null;
          Map<Enchantment,Integer> stockItemEnchantments=null;
          if (itemStack.getType().equals(Material.ENCHANTED_BOOK)) {
            EnchantmentStorageMeta itemStackStorageMeta=(EnchantmentStorageMeta)itemStack.getItemMeta();
            if (itemStackStorageMeta != null) {
              itemStackEnchantments=itemStackStorageMeta.getStoredEnchants();
            }
            EnchantmentStorageMeta stockItemStorageMeta=(EnchantmentStorageMeta)item.getItemStack().getItemMeta();
            if (stockItemStorageMeta != null) {
              stockItemEnchantments=stockItemStorageMeta.getStoredEnchants();
            }
          }
 else {
            itemStackEnchantments=itemStack.getEnchantments();
            stockItemEnchantments=item.getItemStack().getEnchantments();
          }
          if (itemStackEnchantments == null || itemStackEnchantments.isEmpty()) {
            equal=(stockItemEnchantments == null || stockItemEnchantments.isEmpty());
          }
 else {
            equal=(stockItemEnchantments != null && !stockItemEnchantments.isEmpty() && itemStackEnchantments.keySet().equals(stockItemEnchantments.keySet()));
          }
          if (equal && checkLevel) {
            for (            Map.Entry<Enchantment,Integer> ench : itemStackEnchantments.entrySet()) {
              if (ench.getValue() != stockItemEnchantments.get(ench.getKey())) {
                equal=false;
                break;
              }
            }
          }
        }
      }
      if (equal)       return item;
    }
  }
  return null;
}"
51598,"public void loadDescriptions(Player player,Inventory inventory){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  for (int i=0; i < inventory.getSize(); ++i) {
    ItemStack item=inventory.getItem(i);
    if (item != null) {
      StockItem stockItem=this.getStock().getItem(item,TraderStatus.BUY,true,false);
      if (stockItem != null) {
        int scale=item.getAmount() / stockItem.getAmount();
        List<String> lore=new ArrayList<String>();
        ;
        for (        String l : itemsConfig.getPriceLore(""String_Node_Str""))         lore.add(l.replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"",0)) + ""String_Node_Str"").replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"",0) * scale) + ""String_Node_Str""));
        if (scale > 0)         NBTTagEditor.addDescription(item,lore);
      }
    }
  }
}","public void loadDescriptions(Player player,Inventory inventory){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  for (int i=0; i < inventory.getSize(); ++i) {
    ItemStack item=inventory.getItem(i);
    if (item != null) {
      StockItem stockItem=this.getStock().getItem(item,TraderStatus.BUY,true,false);
      if (stockItem != null) {
        int scale=item.getAmount() / stockItem.getAmount();
        List<String> lore=new ArrayList<String>();
        ;
        for (        String l : itemsConfig.getPriceLore(""String_Node_Str""))         lore.add(l.replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"",stockItem,0)) + ""String_Node_Str"").replace(""String_Node_Str"",f.format(getPrice(player,""String_Node_Str"",stockItem,0) * scale) + ""String_Node_Str""));
        if (scale > 0)         NBTTagEditor.addDescription(item,lore);
      }
    }
  }
}"
51599,"public double getPrice(Player player,String transaction,int slot){
  if (getStock().getPattern() != null)   return getStock().getPattern().getItemPrice(player,getSelectedItem(),transaction,slot,0.0);
  return getSelectedItem().getPrice(slot);
}","public double getPrice(Player player,String transaction,StockItem item,int slot){
  if (getStock().getPattern() != null)   return getStock().getPattern().getItemPrice(player,item,transaction,slot,0.0);
  return item.getPrice(slot);
}"
51600,"@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(price)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else {
            addSelectedToInventory(0);
            updateLimits();
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
            if (!checkLimits()) {
              getStock().removeItem(""String_Node_Str"",slot);
              this.switchInventory(getTraderStatus());
            }
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(price)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          addSelectedToInventory(slot);
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
          if (!checkLimits(slot)) {
            getStock().removeItem(""String_Node_Str"",slot);
            this.switchInventory(this.getTraderStatus());
          }
        }
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
          addItem(getSelectedItem().getItemStack(),scale,getSelectedItem());
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
        updateBuyLimits(scale);
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        addItem(getSelectedItem().getItemStack(),scale,getSelectedItem());
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(price)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else {
            addSelectedToInventory(0);
            updateLimits();
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
            if (!checkLimits()) {
              getStock().removeItem(""String_Node_Str"",slot);
              this.switchInventory(getTraderStatus());
            }
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(price)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          addSelectedToInventory(slot);
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
          if (!checkLimits(slot)) {
            getStock().removeItem(""String_Node_Str"",slot);
            this.switchInventory(this.getTraderStatus());
          }
        }
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
          addItem(getSelectedItem().getItemStack(),scale,getSelectedItem());
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
        updateBuyLimits(scale);
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        addItem(getSelectedItem().getItemStack(),scale,getSelectedItem());
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51601,"@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (!checkLimits()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(getSelectedItem().getPrice())) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            addSelectedToInventory(0);
            updateLimits();
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (!checkLimits(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(getSelectedItem().getPrice(slot))) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          addSelectedToInventory(slot);
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
          updateBuyLimits(scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
        updateBuyLimits(scale);
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (!checkLimits()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(getSelectedItem().getPrice())) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            addSelectedToInventory(0);
            updateLimits();
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (!checkLimits(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(getSelectedItem().getPrice(slot))) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          addSelectedToInventory(slot);
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
          updateBuyLimits(scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
        updateBuyLimits(scale);
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51602,"@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCursor(null);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          }
 else           if (!buyTransaction(price)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          }
 else {
            player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(price)));
            addSelectedToInventory(0);
            updateLimits();
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(price)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(price)));
          addSelectedToInventory(slot);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
          updateBuyLimits(scale);
          NBTTagEditor.removeDescription(event.getCurrentItem());
          removeFromInventory(event.getCurrentItem(),event);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
        updateBuyLimits(scale);
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
        NBTTagEditor.removeDescription(event.getCurrentItem());
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
      }
    }
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCursor(null);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.isShiftClick()) {
      ((Player)event.getWhoClicked()).sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          }
 else           if (!buyTransaction(price)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          }
 else {
            player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(price)));
            addSelectedToInventory(0);
            updateLimits();
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_SPACE));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(price)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(price)));
          addSelectedToInventory(slot);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_SELL));
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
          updateBuyLimits(scale);
          NBTTagEditor.removeDescription(event.getCurrentItem());
          removeFromInventory(event.getCurrentItem(),event);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
        updateBuyLimits(scale);
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),price,TransactionResult.SUCCESS_BUY));
        NBTTagEditor.removeDescription(event.getCurrentItem());
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
      }
    }
  }
  event.setCancelled(true);
}"
51603,"public final Trader selectItem(ItemStack item,TraderStatus status,boolean dura,boolean amount){
  selectedItem=traderStock.getItem(item,status,dura,amount);
  return this;
}","public final Trader selectItem(ItemStack item,TraderStatus status,boolean amount){
  selectedItem=traderStock.getItem(item,status,StockItem.hasDurability(item),amount);
  return this;
}"
51604,"@Override public void run(){
  if (playerInteraction.get(player.getName()) == null)   NBTTagEditor.removeDescriptions(event.getPlayer().getInventory());
}","@Override public void run(){
  tempOpening.remove(player.getName());
}"
51605,"@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
switch (characterTrait.getType()) {
case SERVER_TRADER:
{
      if (economyNpc != null) {
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (economyNpc.getNpcId() == npc.getId()) {
          economyNpc.onRightClick(player,characterTrait,npc);
          if (!economyNpc.locked())           playerInteraction.remove(playerName);
        }
 else {
          player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
          EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
          ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
          playerInteraction.put(playerName,newNpc);
          if (!newNpc.onRightClick(player,characterTrait,npc))           playerInteraction.remove(playerName);
        }
      }
 else {
        EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
      return;
    }
case PLAYER_TRADER:
{
    if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str""));
      return;
    }
    if (economyNpc != null) {
      if (economyNpc.getNpcId() == npc.getId()) {
        economyNpc.onRightClick(player,characterTrait,npc);
        if (!economyNpc.locked())         playerInteraction.remove(playerName);
      }
 else {
        player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
        EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
        ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
    }
 else {
      EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
    return;
  }
case MARKET_TRADER:
{
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (economyNpc != null) {
    if (economyNpc.getNpcId() == npc.getId()) {
      economyNpc.onRightClick(player,characterTrait,npc);
      if (!economyNpc.locked())       playerInteraction.remove(playerName);
    }
 else {
      player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
      EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
  }
 else {
    EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
    ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
    playerInteraction.put(playerName,newNpc);
    if (!newNpc.onRightClick(player,characterTrait,npc))     playerInteraction.remove(playerName);
  }
  return;
}
case PRIVATE_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return;
}
if (economyNpc != null) {
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
 else {
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
case MONEY_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
player.sendMessage(locale.getLocaleString(""String_Node_Str""));
return;
}
if (economyNpc != null) {
{
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
}
 else {
EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
playerInteraction.put(playerName,newNpc);
newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
default :
{
}
}
}","@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  final Player player=event.getClicker();
  if (tempOpening.contains(player.getName()))   return;
  tempOpening.add(player.getName());
  TimerTask task=new TimerTask(){
    @Override public void run(){
      tempOpening.remove(player.getName());
    }
  }
;
  timer.schedule(task,1000);
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
switch (characterTrait.getType()) {
case SERVER_TRADER:
{
      if (economyNpc != null) {
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (economyNpc.getNpcId() == npc.getId()) {
          economyNpc.onRightClick(player,characterTrait,npc);
          if (!economyNpc.locked())           playerInteraction.remove(playerName);
        }
 else {
          player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
          EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
          ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
          playerInteraction.put(playerName,newNpc);
          if (!newNpc.onRightClick(player,characterTrait,npc))           playerInteraction.remove(playerName);
        }
      }
 else {
        EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
      return;
    }
case PLAYER_TRADER:
{
    if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str""));
      return;
    }
    if (economyNpc != null) {
      if (economyNpc.getNpcId() == npc.getId()) {
        economyNpc.onRightClick(player,characterTrait,npc);
        if (!economyNpc.locked())         playerInteraction.remove(playerName);
      }
 else {
        player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
        EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
        ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
    }
 else {
      EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
    return;
  }
case MARKET_TRADER:
{
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (economyNpc != null) {
    if (economyNpc.getNpcId() == npc.getId()) {
      economyNpc.onRightClick(player,characterTrait,npc);
      if (!economyNpc.locked())       playerInteraction.remove(playerName);
    }
 else {
      player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
      EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
  }
 else {
    EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
    ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
    playerInteraction.put(playerName,newNpc);
    if (!newNpc.onRightClick(player,characterTrait,npc))     playerInteraction.remove(playerName);
  }
  return;
}
case PRIVATE_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return;
}
if (economyNpc != null) {
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
 else {
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
case MONEY_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
player.sendMessage(locale.getLocaleString(""String_Node_Str""));
return;
}
if (economyNpc != null) {
{
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
}
 else {
EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
playerInteraction.put(playerName,newNpc);
newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
default :
{
}
}
}"
51606,"public StockItem(String data){
  limit=new LimitSystem(this);
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          try {
            price=Double.parseDouble(value.substring(2));
          }
 catch (          NumberFormatException e) {
            info(""String_Node_Str"");
          }
          listenPattern=false;
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          setName(value.substring(2).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add((Integer.parseInt(amout) == 0 ? 1 : Integer.parseInt(amout)));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemGlobalLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemPlayerLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
      }
 else {
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
        }
        if (value.equals(""String_Node_Str"")) {
          listenPattern=true;
        }
      }
    }
  }
}","public StockItem(String data){
  limit=new LimitSystem(this);
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          try {
            price=Double.parseDouble(value.substring(2));
          }
 catch (          NumberFormatException e) {
            info(""String_Node_Str"");
          }
          listenPattern=false;
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          setName(value.substring(2).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add((Integer.parseInt(amout) == 0 ? 1 : Integer.parseInt(amout)));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemGlobalLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemPlayerLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addUnsafeEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(3).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            EnchantmentStorageMeta meta=((EnchantmentStorageMeta)item.getItemMeta());
            if (item.getType().equals(Material.ENCHANTED_BOOK))             meta.addStoredEnchant(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]),true);
            item.setItemMeta(meta);
          }
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
      }
 else {
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
        }
        if (value.equals(""String_Node_Str"")) {
          listenPattern=true;
        }
      }
    }
  }
}"
51607,"@Override public String toString(){
  String itemString=""String_Node_Str"" + item.getTypeId() + (item.getData().getData() != 0 ? ""String_Node_Str"" + item.getData().getData() : ""String_Node_Str"");
  if (!listenPattern)   itemString+=""String_Node_Str"" + new DecimalFormat(""String_Node_Str"").format(price);
  itemString+=""String_Node_Str"" + slot;
  itemString+=""String_Node_Str"" + item.getDurability();
  itemString+=""String_Node_Str"";
  for (int i=0; i < amouts.size(); ++i)   itemString+=amouts.get(i) + (i + 1 < amouts.size() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (limit.hasLimit())   itemString+=""String_Node_Str"" + limit.toString();
  if (limit.hasPlayerLimit())   itemString+=""String_Node_Str"" + limit.playerLimitToString();
  if (!item.getEnchantments().isEmpty()) {
    itemString+=""String_Node_Str"";
    for (int i=0; i < item.getEnchantments().size(); ++i) {
      Enchantment e=(Enchantment)item.getEnchantments().keySet().toArray()[i];
      itemString+=e.getId() + ""String_Node_Str"" + item.getEnchantmentLevel(e)+ (i + 1 < item.getEnchantments().size() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
  if (!name.isEmpty())   itemString+=""String_Node_Str"" + name.replace(""String_Node_Str"",""String_Node_Str"");
  if (stackPrice)   itemString+=""String_Node_Str"";
  if (listenPattern)   itemString+=""String_Node_Str"";
  return itemString;
}","@Override public String toString(){
  String itemString=""String_Node_Str"" + item.getTypeId() + (item.getData().getData() != 0 ? ""String_Node_Str"" + item.getData().getData() : ""String_Node_Str"");
  if (!listenPattern)   itemString+=""String_Node_Str"" + new DecimalFormat(""String_Node_Str"").format(price);
  itemString+=""String_Node_Str"" + slot;
  itemString+=""String_Node_Str"" + item.getDurability();
  itemString+=""String_Node_Str"";
  for (int i=0; i < amouts.size(); ++i)   itemString+=amouts.get(i) + (i + 1 < amouts.size() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (limit.hasLimit())   itemString+=""String_Node_Str"" + limit.toString();
  if (limit.hasPlayerLimit())   itemString+=""String_Node_Str"" + limit.playerLimitToString();
  if (!item.getEnchantments().isEmpty()) {
    itemString+=""String_Node_Str"";
    for (int i=0; i < item.getEnchantments().size(); ++i) {
      Enchantment e=(Enchantment)item.getItemMeta().getEnchants().keySet().toArray()[i];
      itemString+=e.getId() + ""String_Node_Str"" + item.getEnchantmentLevel(e)+ (i + 1 < item.getEnchantments().size() ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
  if (item.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)item.getItemMeta();
    if (!meta.getStoredEnchants().isEmpty()) {
      itemString+=""String_Node_Str"";
      int i=0;
      for (      Map.Entry<Enchantment,Integer> e : meta.getStoredEnchants().entrySet()) {
        itemString+=e.getKey().getId() + ""String_Node_Str"" + e.getValue()+ (i + 1 < ((EnchantmentStorageMeta)item.getItemMeta()).getStoredEnchants().size() ? ""String_Node_Str"" : ""String_Node_Str"");
        ++i;
      }
    }
  }
  if (!name.isEmpty())   itemString+=""String_Node_Str"" + name.replace(""String_Node_Str"",""String_Node_Str"");
  if (stackPrice)   itemString+=""String_Node_Str"";
  if (listenPattern)   itemString+=""String_Node_Str"";
  return itemString;
}"
51608,"public void setInventoryWith(Inventory inventory,StockItem item,Player player){
  int i=0;
  for (  Integer amount : item.getAmounts()) {
    ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,i,""String_Node_Str"",pattern,player));
    chk.addEnchantments(item.getItemStack().getEnchantments());
    chk.setAmount(amount);
    if (item.getLimitSystem().checkLimit(""String_Node_Str"",i))     inventory.setItem(i++,chk);
  }
  inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(7));
}","public void setInventoryWith(Inventory inventory,StockItem item,Player player){
  int i=0;
  for (  Integer amount : item.getAmounts()) {
    ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,i,""String_Node_Str"",pattern,player));
    chk.setAmount(amount);
    if (item.getLimitSystem().checkLimit(""String_Node_Str"",i))     inventory.setItem(i++,chk);
  }
  inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(7));
}"
51609,"public static ItemStack setLore(ItemStack cis,List<String> lore){
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(cis.getType());
  List<String> list=new ArrayList<String>();
  for (  String s : lore)   list.add(s.replace('^','�'));
  meta.setLore(list);
  meta.setDisplayName(NBTTagEditor.getName(cis));
  Map<String,Object> map=cis.serialize();
  map.put(""String_Node_Str"",meta);
  cis.setItemMeta(ItemStack.deserialize(map).getItemMeta());
  return ItemStack.deserialize(map);
}","public static ItemStack setLore(ItemStack cis,List<String> lore){
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(cis.getType());
  List<String> list=cis.getItemMeta().getLore();
  if (list == null)   list=new ArrayList<String>();
  for (  String s : lore)   list.add(s.replace('^','�'));
  meta.setLore(list);
  meta.setDisplayName(NBTTagEditor.getName(cis));
  for (  Map.Entry<Enchantment,Integer> e : cis.getEnchantments().entrySet())   meta.addEnchant(e.getKey(),e.getValue(),true);
  if (cis.getType().equals(Material.ENCHANTED_BOOK)) {
    for (    Map.Entry<Enchantment,Integer> e : ((EnchantmentStorageMeta)cis.getItemMeta()).getStoredEnchants().entrySet())     ((EnchantmentStorageMeta)meta).addStoredEnchant(e.getKey(),e.getValue(),true);
  }
  Map<String,Object> map=cis.serialize();
  map.put(""String_Node_Str"",meta);
  return ItemStack.deserialize(map);
}"
51610,"public Inventory inventoryView(Inventory inventory,TraderStatus s,Player player,String type){
  if (!s.isManaging()) {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,0,s.toString(),pattern,player));
      chk.addEnchantments(item.getItemStack().getEnchantments());
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    if (!stock.get(opositeStock(s.toString())).isEmpty())     inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
 else {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(item.getItemStack(),getLore(type,item,s.toString(),pattern,player));
      chk.addEnchantments(item.getItemStack().getEnchantments());
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    inventory.setItem(stockSize - 3,itemsConfig.getItemManagement(4));
    inventory.setItem(stockSize - 2,itemsConfig.getItemManagement(2));
    inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
  return inventory;
}","public Inventory inventoryView(Inventory inventory,TraderStatus s,Player player,String type){
  if (!s.isManaging()) {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,0,s.toString(),pattern,player));
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    if (!stock.get(opositeStock(s.toString())).isEmpty())     inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
 else {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(item.getItemStack(),getLore(type,item,s.toString(),pattern,player));
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    inventory.setItem(stockSize - 3,itemsConfig.getItemManagement(4));
    inventory.setItem(stockSize - 2,itemsConfig.getItemManagement(2));
    inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
  return inventory;
}"
51611,"@Override public Inventory getInventory(){
  Inventory inventory=Bukkit.createInventory(this,stockSize,name);
  for (  StockItem item : stock.get(""String_Node_Str"")) {
    ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,0,""String_Node_Str"",pattern,null));
    chk.addEnchantments(item.getItemStack().getEnchantments());
    if (item.getSlot() < 0)     item.setSlot(inventory.firstEmpty());
    inventory.setItem(item.getSlot(),chk);
  }
  if (!stock.get(""String_Node_Str"").isEmpty())   inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(""String_Node_Str""));
  return inventory;
}","@Override public Inventory getInventory(){
  Inventory inventory=Bukkit.createInventory(this,stockSize,name);
  for (  StockItem item : stock.get(""String_Node_Str"")) {
    ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,0,""String_Node_Str"",pattern,null));
    if (item.getSlot() < 0)     item.setSlot(inventory.firstEmpty());
    inventory.setItem(item.getSlot(),chk);
  }
  if (!stock.get(""String_Node_Str"").isEmpty())   inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(""String_Node_Str""));
  return inventory;
}"
51612,"public static StockItem toStockItem(ItemStack is){
  String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
  if (!is.getEnchantments().isEmpty()) {
    itemInfo+=""String_Node_Str"";
    for (    Enchantment ench : is.getEnchantments().keySet())     itemInfo+=ench.getId() + ""String_Node_Str"" + is.getEnchantmentLevel(ench)+ ""String_Node_Str"";
  }
  String name=NBTTagEditor.getName(is).replace(""String_Node_Str"",""String_Node_Str"");
  if (!name.isEmpty())   itemInfo+=""String_Node_Str"" + NBTTagEditor.getName(is).replace(""String_Node_Str"",""String_Node_Str"");
  return new StockItem(itemInfo);
}","public static StockItem toStockItem(ItemStack is){
  String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
  if (!is.getEnchantments().isEmpty()) {
    itemInfo+=""String_Node_Str"";
    for (    Enchantment ench : is.getEnchantments().keySet())     itemInfo+=ench.getId() + ""String_Node_Str"" + is.getEnchantmentLevel(ench)+ ""String_Node_Str"";
  }
  if (is.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)is.getItemMeta();
    if (!meta.getStoredEnchants().isEmpty()) {
      itemInfo+=""String_Node_Str"";
      for (      Map.Entry<Enchantment,Integer> e : meta.getStoredEnchants().entrySet())       itemInfo+=e.getKey().getId() + ""String_Node_Str"" + e.getValue()+ ""String_Node_Str"";
    }
  }
  String name=NBTTagEditor.getName(is).replace(""String_Node_Str"",""String_Node_Str"");
  if (!name.isEmpty())   itemInfo+=""String_Node_Str"" + NBTTagEditor.getName(is).replace(""String_Node_Str"",""String_Node_Str"");
  return new StockItem(itemInfo);
}"
51613,"public static void setName(ItemStack item,String name){
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(item.getType());
  meta.setDisplayName(name);
  Map<String,Object> map=item.serialize();
  map.put(""String_Node_Str"",meta);
  item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
}","public static void setName(ItemStack item,String name){
  ItemMeta oldMeta=item.getItemMeta();
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(item.getType());
  meta.setDisplayName(name);
  if (oldMeta != null) {
    meta.setLore(oldMeta.getLore());
    for (    Map.Entry<Enchantment,Integer> e : oldMeta.getEnchants().entrySet())     meta.addEnchant(e.getKey(),e.getValue(),true);
  }
  Map<String,Object> map=item.serialize();
  map.put(""String_Node_Str"",meta);
  item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
}"
51614,"public static void removeDescriptions(Inventory inventory){
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      int size=0;
      List<String> lore=CitizensTrader.getInstance().getItemConfig().getPriceLore(""String_Node_Str"");
      if (lore != null) {
        size=lore.size();
        Map<String,Object> map=item.serialize();
        ItemMeta meta=(ItemMeta)map.get(""String_Node_Str"");
        if (meta != null) {
          List<String> list=null;
          if (meta.getLore() != null && meta.getLore().size() >= size) {
            list=new ArrayList<String>(meta.getLore());
            int s=list.size();
            for (int i=0; i + (s - size) < s; ++i) {
              String m=lore.get((size - 1) - i);
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              if (Pattern.matches(m,list.get((s - 1) - i)))               list.remove((s - 1) - i);
            }
          }
          meta.setLore(list);
        }
        map.remove(""String_Node_Str"");
        if (meta != null)         map.put(""String_Node_Str"",meta);
        item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
      }
    }
  }
}","public static void removeDescriptions(Inventory inventory){
  int s=0;
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      int size=0;
      List<String> lore=CitizensTrader.getInstance().getItemConfig().getPriceLore(""String_Node_Str"");
      if (lore != null) {
        size=lore.size();
        Map<String,Object> map=item.serialize();
        ItemMeta meta=(ItemMeta)map.get(""String_Node_Str"");
        if (meta != null) {
          List<String> list=null;
          if (meta.getLore() != null && meta.getLore().size() > size) {
            list=new ArrayList<String>(meta.getLore());
            int listSize=list.size();
            int removed=0;
            for (int i=0; i < listSize; ++i) {
              for (int j=0; j < size; ++j) {
                String m=lore.get(j);
                m=m.replace(""String_Node_Str"",""String_Node_Str"");
                m=m.replace(""String_Node_Str"",""String_Node_Str"");
                m=m.replace(""String_Node_Str"",""String_Node_Str"");
                if (Pattern.matches(m,list.get(i - removed))) {
                  list.remove(i - removed);
                  ++removed;
                }
              }
            }
          }
          if (list != null && list.isEmpty())           meta.setLore(null);
 else           meta.setLore(list);
        }
        map.remove(""String_Node_Str"");
        if (meta != null)         map.put(""String_Node_Str"",meta);
 else         map.put(""String_Node_Str"",Bukkit.getItemFactory().getItemMeta(item.getType()));
        item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
        inventory.setItem(s,new ItemStack(item));
      }
    }
    ++s;
  }
}"
51615,"public void loadPrices(ConfigurationSection prices){
  HashMap<String,Double> sell=new HashMap<String,Double>();
  HashMap<String,Double> buy=new HashMap<String,Double>();
  for (  String transaction : prices.getKeys(false)) {
    if (transaction.equals(""String_Node_Str"")) {
      for (      String item : prices.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
        if (item.equals(""String_Node_Str"")) {
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
 else {
          sell.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
          buy.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
      }
    }
 else     if (transaction.equals(""String_Node_Str"")) {
      for (      String item : prices.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
        if (item.equals(""String_Node_Str"")) {
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
 else         sell.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
      }
    }
 else     if (transaction.equals(""String_Node_Str"")) {
      for (      String item : prices.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
        if (item.equals(""String_Node_Str"")) {
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
 else         buy.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
      }
    }
 else     if (transaction.startsWith(""String_Node_Str"")) {
      TransactionPattern tier=patternTiers.get(transaction);
      if (tier == null) {
        tier=new TransactionPattern(name + ""String_Node_Str"" + transaction);
        patternTiers.put(transaction,tier);
      }
      tier.loadPrices(prices.getConfigurationSection(transaction));
    }
  }
  patternPrices.put(""String_Node_Str"",sell);
  patternPrices.put(""String_Node_Str"",buy);
}","public void loadPrices(ConfigurationSection prices){
  HashMap<String,Double> sell=new HashMap<String,Double>();
  HashMap<String,Double> buy=new HashMap<String,Double>();
  for (  String transaction : prices.getKeys(false)) {
    if (transaction.equals(""String_Node_Str"")) {
      for (      String item : prices.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
        if (item.equals(""String_Node_Str"")) {
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
 else {
          sell.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
          buy.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
      }
    }
 else     if (transaction.equals(""String_Node_Str"")) {
      for (      String item : prices.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
        if (item.equals(""String_Node_Str"")) {
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
 else         sell.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
      }
    }
 else     if (transaction.equals(""String_Node_Str"")) {
      for (      String item : prices.getConfigurationSection(""String_Node_Str"").getKeys(false)) {
        if (item.equals(""String_Node_Str"")) {
          multiplier.put(""String_Node_Str"",prices.getDouble(transaction + ""String_Node_Str"" + item));
        }
 else         buy.put(item,prices.getDouble(transaction + ""String_Node_Str"" + item));
      }
    }
 else     if (transaction.startsWith(""String_Node_Str"")) {
      TransactionPattern tier=patternTiers.get(transaction);
      if (tier == null) {
        tier=new TransactionPattern(name + ""String_Node_Str"" + transaction,true);
        patternTiers.put(transaction,tier);
      }
      tier.loadPrices(prices.getConfigurationSection(transaction));
    }
  }
  patternPrices.put(""String_Node_Str"",sell);
  patternPrices.put(""String_Node_Str"",buy);
}"
51616,"public double getItemPrice(Player player,StockItem item,String transation,int slot,double nprice){
  double price=nprice;
  if (item.isPatternListening()) {
    if (patternPrices.containsKey(transation))     if (patternPrices.get(transation).containsKey(item.getIdAndData()))     price=patternPrices.get(transation).get(item.getIdAndData());
 else     for (    Map.Entry<String,Double> entry : patternPrices.get(transation).entrySet())     if (item.getIdAndData().split(""String_Node_Str"")[0].equals(entry.getKey()))     price=entry.getValue();
    for (    Map.Entry<String,TransactionPattern> tier : patternTiers.entrySet())     if (CitizensTrader.getPermissionsManager().has(player,""String_Node_Str"" + tier.getKey())) {
      price=tier.getValue().getItemPrice(player,item,transation,slot,price);
    }
  }
 else   price=item.getRawPrice();
  if (!item.hasStackPrice() && nprice == 0.0)   price*=item.getAmount(slot);
  price*=multiplier.get(transation);
  return price;
}","public double getItemPrice(Player player,StockItem item,String transation,int slot,double nprice){
  double price=nprice;
  double m=multiplier.get(transation);
  if (item.isPatternListening()) {
    if (patternPrices.containsKey(transation))     if (patternPrices.get(transation).containsKey(item.getIdAndData()))     price=patternPrices.get(transation).get(item.getIdAndData());
 else     for (    Map.Entry<String,Double> entry : patternPrices.get(transation).entrySet())     if (item.getIdAndData().split(""String_Node_Str"")[0].equals(entry.getKey()))     price=entry.getValue();
    for (    Map.Entry<String,TransactionPattern> tier : patternTiers.entrySet())     if (CitizensTrader.getPermissionsManager().has(player,""String_Node_Str"" + tier.getKey())) {
      price=tier.getValue().getItemPrice(player,item,transation,slot,price);
      m=tier.getValue().getMultiplier(transation);
    }
    if (!tier)     price*=m;
  }
 else   price=item.getRawPrice();
  if (!item.hasStackPrice() && nprice == 0.0 && !tier)   price*=item.getAmount(slot);
  return price;
}"
51617,"public TransactionPattern(String name){
  this.name=name;
  patternItems=new HashMap<String,List<StockItem>>();
  patternPrices=new HashMap<String,HashMap<String,Double>>();
  patternTiers=new TreeMap<String,TransactionPattern>();
  multiplier=new HashMap<String,Double>();
  multiplier.put(""String_Node_Str"",1.00);
  multiplier.put(""String_Node_Str"",1.00);
}","public TransactionPattern(String name,boolean tier){
  this.tier=tier;
  this.name=name;
  patternItems=new HashMap<String,List<StockItem>>();
  patternPrices=new HashMap<String,HashMap<String,Double>>();
  patternTiers=new TreeMap<String,TransactionPattern>();
  multiplier=new HashMap<String,Double>();
  multiplier.put(""String_Node_Str"",1.00);
  multiplier.put(""String_Node_Str"",1.00);
}"
51618,"public static StockItem toStockItem(ItemStack is){
  String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
  if (!is.getEnchantments().isEmpty()) {
    itemInfo+=""String_Node_Str"";
    for (    Enchantment ench : is.getEnchantments().keySet())     itemInfo+=ench.getId() + ""String_Node_Str"" + is.getEnchantmentLevel(ench)+ ""String_Node_Str"";
  }
  if (is.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)is.getItemMeta();
    if (!meta.getStoredEnchants().isEmpty()) {
      itemInfo+=""String_Node_Str"";
      for (      Map.Entry<Enchantment,Integer> e : meta.getStoredEnchants().entrySet())       itemInfo+=e.getKey().getId() + ""String_Node_Str"" + e.getValue()+ ""String_Node_Str"";
    }
  }
  String name=NBTTagEditor.getName(is).replace(""String_Node_Str"",""String_Node_Str"");
  if (!name.isEmpty())   itemInfo+=""String_Node_Str"" + NBTTagEditor.getName(is).replace(""String_Node_Str"",""String_Node_Str"");
  return new StockItem(itemInfo);
}","public static StockItem toStockItem(ItemStack is){
  String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
  if (!is.getEnchantments().isEmpty()) {
    itemInfo+=""String_Node_Str"";
    for (    Map.Entry<Enchantment,Integer> ench : is.getItemMeta().getEnchants().entrySet())     itemInfo+=ench.getKey().getId() + ""String_Node_Str"" + ench.getValue()+ ""String_Node_Str"";
  }
  if (is.getType().equals(Material.ENCHANTED_BOOK)) {
    EnchantmentStorageMeta meta=(EnchantmentStorageMeta)is.getItemMeta();
    if (!meta.getStoredEnchants().isEmpty()) {
      itemInfo+=""String_Node_Str"";
      for (      Map.Entry<Enchantment,Integer> e : meta.getStoredEnchants().entrySet())       itemInfo+=e.getKey().getId() + ""String_Node_Str"" + e.getValue()+ ""String_Node_Str"";
    }
  }
  String name=NBTTagEditor.getName(is).replace(""String_Node_Str"",""String_Node_Str"");
  if (!name.isEmpty())   itemInfo+=""String_Node_Str"" + name;
  return new StockItem(itemInfo);
}"
51619,"@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  CitizensTrader.getInstance();
  if (CitizensTrader.getDenizen() != null && CitizensTrader.getDenizen().getDenizenNPCRegistry().isDenizenNPC(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
switch (characterTrait.getType()) {
case SERVER_TRADER:
{
      if (economyNpc != null) {
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (economyNpc.getNpcId() == npc.getId()) {
          economyNpc.onRightClick(player,characterTrait,npc);
          if (!economyNpc.locked())           playerInteraction.remove(playerName);
        }
 else {
          player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
          EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
          ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
          playerInteraction.put(playerName,newNpc);
          if (!newNpc.onRightClick(player,characterTrait,npc))           playerInteraction.remove(playerName);
        }
      }
 else {
        EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
      return;
    }
case PLAYER_TRADER:
{
    if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str""));
      return;
    }
    if (economyNpc != null) {
      if (economyNpc.getNpcId() == npc.getId()) {
        economyNpc.onRightClick(player,characterTrait,npc);
        if (!economyNpc.locked())         playerInteraction.remove(playerName);
      }
 else {
        player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
        EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
        ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
    }
 else {
      EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
    return;
  }
case MARKET_TRADER:
{
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (economyNpc != null) {
    if (economyNpc.getNpcId() == npc.getId()) {
      economyNpc.onRightClick(player,characterTrait,npc);
      if (!economyNpc.locked())       playerInteraction.remove(playerName);
    }
 else {
      player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
      EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
  }
 else {
    EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
    ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
    playerInteraction.put(playerName,newNpc);
    if (!newNpc.onRightClick(player,characterTrait,npc))     playerInteraction.remove(playerName);
  }
  return;
}
case PRIVATE_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return;
}
if (economyNpc != null) {
  if (economyNpc.getNpcId() == npc.getId()) {
    economyNpc.onRightClick(player,characterTrait,npc);
    if (!economyNpc.locked())     playerInteraction.remove(playerName);
  }
 else {
    player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
    EconomyNpc newNpc=new PlayerBanker(npc,characterTrait.getBankTrait(),playerName);
    Banker banker=(Banker)playerInteraction.get(playerName);
    if (!Banker.hasAccount(player)) {
      playerInteraction.remove(playerName);
      return;
    }
    playerInteraction.put(playerName,newNpc);
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",new DecimalFormat(""String_Node_Str"").format(banker.getDepositFee())));
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",new DecimalFormat(""String_Node_Str"").format(banker.getWithdrawFee())));
    newNpc.onRightClick(player,characterTrait,npc);
  }
}
 else {
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  EconomyNpc newNpc=new PlayerBanker(npc,characterTrait.getBankTrait(),playerName);
  if (!Banker.hasAccount(player)) {
    playerInteraction.remove(playerName);
    return;
  }
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
case MONEY_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
player.sendMessage(locale.getLocaleString(""String_Node_Str""));
return;
}
if (economyNpc != null) {
{
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new MoneyBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
}
 else {
EconomyNpc newNpc=new MoneyBanker(npc,characterTrait.getBankTrait(),playerName);
playerInteraction.put(playerName,newNpc);
newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
default :
{
}
}
}","@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  CitizensTrader.getInstance();
  if (CitizensTrader.getDenizen() != null && CitizensTrader.getDenizen().getDenizenNPCRegistry().isDenizenNPC(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
switch (characterTrait.getType()) {
case SERVER_TRADER:
{
      if (economyNpc != null) {
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (economyNpc.getNpcId() == npc.getId()) {
          economyNpc.onRightClick(player,characterTrait,npc);
          if (!economyNpc.locked())           playerInteraction.remove(playerName);
        }
 else {
          player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
          EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
          ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
          playerInteraction.put(playerName,newNpc);
          if (!newNpc.onRightClick(player,characterTrait,npc))           playerInteraction.remove(playerName);
        }
      }
 else {
        EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
      return;
    }
case PLAYER_TRADER:
{
    if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str""));
      return;
    }
    if (economyNpc != null) {
      if (economyNpc.getNpcId() == npc.getId()) {
        economyNpc.onRightClick(player,characterTrait,npc);
        if (!economyNpc.locked())         playerInteraction.remove(playerName);
      }
 else {
        player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
        EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
        ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
    }
 else {
      EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
    return;
  }
case MARKET_TRADER:
{
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (economyNpc != null) {
    if (economyNpc.getNpcId() == npc.getId()) {
      economyNpc.onRightClick(player,characterTrait,npc);
      if (!economyNpc.locked())       playerInteraction.remove(playerName);
    }
 else {
      player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
      EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
  }
 else {
    EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
    ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
    playerInteraction.put(playerName,newNpc);
    if (!newNpc.onRightClick(player,characterTrait,npc))     playerInteraction.remove(playerName);
  }
  return;
}
case PRIVATE_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return;
}
if (economyNpc != null) {
  if (economyNpc.getNpcId() == npc.getId()) {
    economyNpc.onRightClick(player,characterTrait,npc);
    if (!economyNpc.locked())     playerInteraction.remove(playerName);
  }
 else {
    player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
    EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
    Banker banker=(Banker)playerInteraction.get(playerName);
    if (!Banker.hasAccount(player)) {
      playerInteraction.remove(playerName);
      return;
    }
    playerInteraction.put(playerName,newNpc);
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",new DecimalFormat(""String_Node_Str"").format(banker.getDepositFee())));
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",new DecimalFormat(""String_Node_Str"").format(banker.getWithdrawFee())));
    newNpc.onRightClick(player,characterTrait,npc);
  }
}
 else {
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  if (!Banker.hasAccount(player)) {
    playerInteraction.remove(playerName);
    return;
  }
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
case MONEY_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
player.sendMessage(locale.getLocaleString(""String_Node_Str""));
return;
}
if (economyNpc != null) {
{
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new MoneyBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
}
 else {
EconomyNpc newNpc=new MoneyBanker(npc,characterTrait.getBankTrait(),playerName);
playerInteraction.put(playerName,newNpc);
newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
default :
{
}
}
}"
51620,"public static void removeDescriptions(Inventory inventory){
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      net.minecraft.server.ItemStack c=((CraftItemStack)item).getHandle();
      NBTTagCompound tc=c.getTag();
      if (tc != null) {
        if (tc.hasKey(""String_Node_Str"")) {
          NBTTagCompound d=tc.getCompound(""String_Node_Str"");
          if (d != null) {
            if (d.hasKey(""String_Node_Str"")) {
              NBTTagList oldList=d.getList(""String_Node_Str"");
              NBTTagList newList=new NBTTagList();
              for (int j=0; j < oldList.size(); ++j)               if (!oldList.get(j).getName().equals(""String_Node_Str"") && !oldList.get(j).getName().isEmpty())               newList.add(oldList.get(j));
              d.set(""String_Node_Str"",newList);
            }
          }
        }
      }
    }
  }
}","public static void removeDescriptions(Inventory inventory){
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      net.minecraft.server.ItemStack c=((CraftItemStack)item).getHandle();
      NBTTagCompound tc=c.getTag();
      if (tc != null) {
        if (tc.hasKey(""String_Node_Str"")) {
          NBTTagCompound d=tc.getCompound(""String_Node_Str"");
          if (d != null) {
            if (d.hasKey(""String_Node_Str"")) {
              NBTTagList oldList=d.getList(""String_Node_Str"");
              NBTTagList newList=new NBTTagList();
              for (int j=0; j < oldList.size(); ++j)               if (!oldList.get(j).getName().equals(""String_Node_Str"") && !oldList.get(j).getName().isEmpty())               newList.add(oldList.get(j));
              if (newList.size() == 0)               c.setTag(null);
              d.set(""String_Node_Str"",newList);
            }
          }
        }
      }
    }
  }
}"
51621,"public double getItemPrice(Player player,StockItem item,String transation,int slot,double nprice){
  double price=nprice;
  if (item.isPatternListening()) {
    if (patternPrices.containsKey(transation))     if (patternPrices.get(transation).containsKey(item.getIdAndData()))     price=patternPrices.get(transation).get(item.getIdAndData());
 else     for (    Map.Entry<String,Double> entry : patternPrices.get(transation).entrySet())     if (item.getIdAndData().split(""String_Node_Str"")[0].equals(entry.getKey()))     price=entry.getValue();
    for (    Map.Entry<String,TransactionPattern> tier : patternTiers.entrySet())     if (CitizensTrader.getPermissionsManager().has(player,""String_Node_Str"" + tier.getKey())) {
      price=tier.getValue().getItemPrice(player,item,transation,slot,price);
    }
  }
 else   price=item.getRawPrice();
  if (!item.hasStackPrice() && nprice == 0.0)   price*=item.getAmount(slot);
  price*=multiplier.get(transation);
  return price;
}","public double getItemPrice(Player player,StockItem item,String transation,int slot,double nprice){
  double price=nprice;
  System.out.print(price);
  if (item.isPatternListening()) {
    System.out.print(price);
    if (patternPrices.containsKey(transation))     if (patternPrices.get(transation).containsKey(item.getIdAndData()))     price=patternPrices.get(transation).get(item.getIdAndData());
 else     for (    Map.Entry<String,Double> entry : patternPrices.get(transation).entrySet())     if (item.getIdAndData().split(""String_Node_Str"")[0].equals(entry.getKey()))     price=entry.getValue();
    System.out.print(price);
    for (    Map.Entry<String,TransactionPattern> tier : patternTiers.entrySet())     if (CitizensTrader.getPermissionsManager().has(player,""String_Node_Str"" + tier.getKey())) {
      price=tier.getValue().getItemPrice(player,item,transation,slot,price);
    }
  }
 else   price=item.getRawPrice();
  System.out.print(price);
  if (!item.hasStackPrice() && nprice == 0.0)   price*=item.getAmount(slot);
  System.out.print(price);
  price*=multiplier.get(transation);
  System.out.print(price);
  return price;
}"
51622,"@Override public boolean onRightClick(Player player,TraderCharacterTrait trait,NPC npc){
  if (player.getGameMode().equals(GameMode.CREATIVE) && !permissionsManager.has(player,""String_Node_Str"")) {
    player.sendMessage(localeManager.getLocaleString(""String_Node_Str""));
    return false;
  }
  if (player.getItemInHand().getTypeId() == itemsConfig.getManageWand().getTypeId()) {
    if (!permissionsManager.has(player,""String_Node_Str"") && !player.isOp()) {
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        return false;
      }
      if (!trait.getConfig().getOwner().equals(player.getName())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        return false;
      }
    }
    if (getTraderStatus().isManaging()) {
      switchInventory(getStartStatus(player));
      player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
      return true;
    }
    player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
    switchInventory(getManageStartStatus(player));
    return true;
  }
  player.openInventory(getInventory());
  return true;
}","@Override public boolean onRightClick(Player player,TraderCharacterTrait trait,NPC npc){
  if (player.getGameMode().equals(GameMode.CREATIVE) && !permissionsManager.has(player,""String_Node_Str"")) {
    player.sendMessage(localeManager.getLocaleString(""String_Node_Str""));
    return false;
  }
  if (player.getItemInHand().getTypeId() == itemsConfig.getManageWand().getTypeId()) {
    if (!permissionsManager.has(player,""String_Node_Str"") && !player.isOp()) {
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        return false;
      }
      if (!trait.getConfig().getOwner().equals(player.getName())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        return false;
      }
    }
    if (getTraderStatus().isManaging()) {
      switchInventory(getStartStatus(player));
      player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
      return true;
    }
    player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
    switchInventory(getManageStartStatus(player));
    return true;
  }
  NBTTagEditor.removeDescriptions(player.getInventory());
  if (!getTraderStatus().isManaging())   loadDescriptions(player.getInventory());
  player.openInventory(getInventory());
  return true;
}"
51623,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (clickedSlot < 0) {
    event.setCursor(null);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
        getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? itemsConfig.getItemManagement(4) : itemsConfig.getItemManagement(3)));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(2))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_PRICE);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(3))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          getInventory().setItem(getInventory().getSize() - 1,itemsConfig.getItemManagement(0));
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(3));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          getInventory().setItem(getInventory().getSize() - 1,itemsConfig.getItemManagement(1));
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(4));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        this.saveManagedAmouts();
        switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,itemsConfig.getItemManagement(1));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(leftAmount)) {
                if (isBuyModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                if (isSellModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                addAmountToInventory(leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              if (permissionsManager.has(player,""String_Node_Str"")) {
                switchInventory(getSelectedItem());
                setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
              }
 else               player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                if (isSellModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              addAmountToInventory(stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus()).hasSelectedItem()) {
            if (!permissionsManager.has(player,""String_Node_Str"")) {
              player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
            NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
            TraderStockPart.setLore((CraftItemStack)event.getCurrentItem(),TraderStockPart.getManageLore(getSelectedItem(),getTraderStatus().name(),null,player));
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
          stockItem.setSlot(clickedSlot);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem())           player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
            TraderStockPart.setLore((CraftItemStack)event.getCurrentItem(),TraderStockPart.getPriceLore(getSelectedItem(),getTraderStatus().name(),null,player));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
            TraderStockPart.setLore((CraftItemStack)event.getCurrentItem(),TraderStockPart.getLimitLore(getSelectedItem(),getTraderStatus().name(),null,player));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            getInventory().setItem(clickedSlot,clonedStack);
            event.setCancelled(false);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            int addAmount=event.getCursor().getAmount();
            if (event.getCursor().getTypeId() == 0)             addAmount=1;
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else {
          if (event.getCurrentItem().getTypeId() == 0) {
            return;
          }
          int removeAmount=event.getCursor().getAmount();
          if (event.getCursor().getTypeId() == 0)           removeAmount=1;
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCurrentItem(new ItemStack(Material.AIR,0));
          }
 else {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.getCurrentItem().setAmount(oldAmount - removeAmount);
          }
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      if (event.isShiftClick())       event.setCancelled(true);
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        StockItem stockItem=toStockItem(itemToAdd.clone());
        stockItem.setAsPatternItem(false);
        stockItem.setPetternListening(false);
        stockItem.setSlot(firstEmpty);
        LimitSystem limitSystem=stockItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getStock().addItem(""String_Node_Str"",stockItem);
        if (isBuyModeByWool())         getStock().addItem(""String_Node_Str"",stockItem);
        itemToAdd.setAmount(backUpAmount);
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",itemToAdd.getAmount() + ""String_Node_Str"").replace((itemToAdd.getAmount() != 1 ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str""));
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        selectItem(null);
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (clickedSlot < 0) {
    event.setCursor(null);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
        getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? itemsConfig.getItemManagement(4) : itemsConfig.getItemManagement(3)));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(2))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_PRICE);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 2,itemsConfig.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(3))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          switchInventory(getBasicManageModeByWool(),""String_Node_Str"");
          getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          getInventory().setItem(getInventory().getSize() - 1,itemsConfig.getItemManagement(0));
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(3));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          getInventory().setItem(getInventory().getSize() - 1,itemsConfig.getItemManagement(1));
          getInventory().setItem(getInventory().getSize() - 3,itemsConfig.getItemManagement(4));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        this.saveManagedAmouts();
        switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,itemsConfig.getItemManagement(1));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(leftAmount)) {
                if (isBuyModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                if (isSellModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                addAmountToInventory(leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              if (permissionsManager.has(player,""String_Node_Str"")) {
                switchInventory(getSelectedItem());
                setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
              }
 else               player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                if (isSellModeByWool())                 getStock().removeItem(""String_Node_Str"",clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              addAmountToInventory(stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus()).hasSelectedItem()) {
            if (!permissionsManager.has(player,""String_Node_Str"")) {
              player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
            NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
            TraderStockPart.setLore((CraftItemStack)event.getCurrentItem(),TraderStockPart.getManageLore(getSelectedItem(),getTraderStatus().name(),null,player));
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
          stockItem.setSlot(clickedSlot);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem())           player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
            TraderStockPart.setLore((CraftItemStack)event.getCurrentItem(),TraderStockPart.getPriceLore(getSelectedItem(),getBasicManageModeByWool().toString(),null,player));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
            TraderStockPart.setLore((CraftItemStack)event.getCurrentItem(),TraderStockPart.getLimitLore(getSelectedItem(),getTraderStatus().name(),null,player));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            getInventory().setItem(clickedSlot,clonedStack);
            event.setCancelled(false);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            int addAmount=event.getCursor().getAmount();
            if (event.getCursor().getTypeId() == 0)             addAmount=1;
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else {
          if (event.getCurrentItem().getTypeId() == 0) {
            return;
          }
          int removeAmount=event.getCursor().getAmount();
          if (event.getCursor().getTypeId() == 0)           removeAmount=1;
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCurrentItem(new ItemStack(Material.AIR,0));
          }
 else {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.getCurrentItem().setAmount(oldAmount - removeAmount);
          }
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      if (event.isShiftClick())       event.setCancelled(true);
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        StockItem stockItem=toStockItem(itemToAdd.clone());
        stockItem.setAsPatternItem(false);
        stockItem.setPetternListening(false);
        stockItem.setSlot(firstEmpty);
        LimitSystem limitSystem=stockItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getStock().addItem(""String_Node_Str"",stockItem);
        if (isBuyModeByWool())         getStock().addItem(""String_Node_Str"",stockItem);
        itemToAdd.setAmount(backUpAmount);
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",itemToAdd.getAmount() + ""String_Node_Str"").replace((itemToAdd.getAmount() != 1 ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str""));
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        selectItem(null);
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}"
51624,"@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (!checkLimits()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(getSelectedItem().getPrice())) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            addSelectedToInventory(0);
            updateLimits();
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (!checkLimits(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(getSelectedItem().getPrice(slot))) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          addSelectedToInventory(slot);
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(getSelectedItem().getPrice(),event.getCurrentItem())) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          updateBuyLimits(scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(getSelectedItem().getPrice(),event.getCurrentItem())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
        updateBuyLimits(scale);
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCancelled(true);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (!checkLimits()) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(getSelectedItem().getPrice())) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            addSelectedToInventory(0);
            updateLimits();
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (!checkLimits(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(getSelectedItem().getPrice(slot))) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          addSelectedToInventory(slot);
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price * scale,event.getCurrentItem())) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
          updateBuyLimits(scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
          this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(price * scale)));
        updateBuyLimits(scale);
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        this.messageOwner(""String_Node_Str"",player.getName(),getSelectedItem(),0);
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51625,"@Override public void simpleMode(InventoryClickEvent event){
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCursor(null);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_LIMIT));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_SPACE));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(price)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
          }
 else {
            addSelectedToInventory(0);
            updateLimits();
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_SELL));
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_SPACE));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(price)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          addSelectedToInventory(slot);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_SELL));
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price,event.getCurrentItem())) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          updateBuyLimits(scale);
          NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
          removeFromInventory(event.getCurrentItem(),event);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_BUY));
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price,event.getCurrentItem())) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        updateBuyLimits(scale);
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_BUY));
        NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
      }
    }
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  int slot=event.getSlot();
  if (slot < 0) {
    event.setCursor(null);
    return;
  }
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(0))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.SELL);
        }
      }
 else       if (isWool(event.getCurrentItem(),itemsConfig.getItemManagement(1))) {
        if (!permissionsManager.has(player,""String_Node_Str"")) {
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.BUY);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts() && permissionsManager.has(player,""String_Node_Str"")) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          double price=getPrice(player,""String_Node_Str"");
          if (!checkLimits()) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_LIMIT));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!inventoryHasPlace(0)) {
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_SPACE));
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          }
 else           if (!buyTransaction(price)) {
            player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
          }
 else {
            addSelectedToInventory(0);
            updateLimits();
            Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_SELL));
            log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),price);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        double price=getPrice(player,""String_Node_Str"",slot);
        if (!checkLimits(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!inventoryHasPlace(slot)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_SPACE));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!buyTransaction(price)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          addSelectedToInventory(slot);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_SELL));
          updateLimits(slot);
          switchInventory(getSelectedItem());
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),price);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        double price=getPrice(player,""String_Node_Str"");
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (!checkBuyLimits(scale)) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_LIMIT));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else         if (!sellTransaction(price,event.getCurrentItem())) {
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),player,this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
          player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          updateBuyLimits(scale);
          NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
          removeFromInventory(event.getCurrentItem(),event);
          Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_BUY));
          log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      double price=getPrice(player,""String_Node_Str"");
      System.out.print(""String_Node_Str"" + price);
      int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
      if (!permissionsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!checkBuyLimits(scale)) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!sellTransaction(price * scale,event.getCurrentItem())) {
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.FAIL_MONEY));
        player.sendMessage(localeManager.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else {
        updateBuyLimits(scale);
        Bukkit.getServer().getPluginManager().callEvent(new TraderTransactionEvent(this,this.getNpc(),event.getWhoClicked(),this.getTraderStatus(),this.getSelectedItem(),TransactionResult.SUCCESS_BUY));
        NBTTagEditor.removeDescription((CraftItemStack)event.getCurrentItem());
        removeFromInventory(event.getCurrentItem(),event);
        log(""String_Node_Str"",getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,price * scale);
      }
    }
  }
  event.setCancelled(true);
}"
51626,"public boolean sellTransaction(double price,ItemStack item){
  return traderConfig.sellTransaction(player.getName(),price * ((int)item.getAmount() / selectedItem.getAmount()));
}","public boolean sellTransaction(double price,ItemStack item){
  return traderConfig.sellTransaction(player.getName(),price);
}"
51627,"@Override public void load(DataKey data) throws NPCLoadException {
  String type=data.getString(""String_Node_Str"",""String_Node_Str"");
  if (type.equals(""String_Node_Str"")) {
    this.type=EcoNpcType.getTypeByName(data.getString(""String_Node_Str""));
    if (config == null) {
      config=new TraderConfigPart();
      stock=new TraderStockPart(getNPC().getFullName() + ""String_Node_Str"");
    }
    config.load(data);
    stock.load(data);
    if (this.type.equals(EcoNpcType.MARKET_TRADER))     stock.linkItems();
  }
 else   if (type.equals(""String_Node_Str"")) {
    this.type=EcoNpcType.getTypeByName(data.getString(""String_Node_Str""));
    if (banker == null)     banker=new BankerPart();
    banker.load(data);
  }
 else {
    this.type=EcoNpcType.getTypeByName(data.getString(""String_Node_Str"",data.getString(""String_Node_Str"")));
    if (config == null) {
      config=new TraderConfigPart();
      stock=new TraderStockPart(getNPC().getFullName() + ""String_Node_Str"");
    }
    config.load(data);
    stock.load(data);
    if (this.type.equals(EcoNpcType.MARKET_TRADER))     stock.linkItems();
  }
}","@Override public void load(DataKey data) throws NPCLoadException {
  String type=data.getString(""String_Node_Str"",""String_Node_Str"");
  if (type.equals(""String_Node_Str"")) {
    this.type=EcoNpcType.getTypeByName(data.getString(""String_Node_Str""));
    if (config == null) {
      config=new TraderConfigPart();
      stock=new TraderStockPart(getNPC().getFullName() + ""String_Node_Str"");
    }
    config.load(data);
    stock.load(data);
    if (CitizensTrader.dtlWalletsEnabled())     config.loadDtlWallet(npc);
    if (this.type.equals(EcoNpcType.MARKET_TRADER))     stock.linkItems();
  }
 else   if (type.equals(""String_Node_Str"")) {
    this.type=EcoNpcType.getTypeByName(data.getString(""String_Node_Str""));
    if (banker == null)     banker=new BankerPart();
    if (CitizensTrader.dtlWalletsEnabled())     banker.loadDtlWallet(npc);
    banker.load(data);
  }
 else {
    this.type=EcoNpcType.getTypeByName(data.getString(""String_Node_Str"",data.getString(""String_Node_Str"")));
    if (config == null) {
      config=new TraderConfigPart();
      stock=new TraderStockPart(getNPC().getFullName() + ""String_Node_Str"");
    }
    config.load(data);
    stock.load(data);
    if (this.type.equals(EcoNpcType.MARKET_TRADER))     stock.linkItems();
  }
}"
51628,"public boolean buyTransaction(String player,double price){
  boolean success=CitizensTrader.getEconomy().withdrawPlayer(player,price).transactionSuccess();
  if (success)   wallet.deposit(owner,price);
  return success;
}","public boolean buyTransaction(String player,double price){
  boolean success=CitizensTrader.getEconomy().withdrawPlayer(player,price).transactionSuccess();
  if (success)   deposit(owner,price);
  return success;
}"
51629,"public void load(DataKey data) throws NPCLoadException {
  if (!CitizensTrader.dtlWalletsEnabled()) {
    if (data.keyExists(""String_Node_Str"")) {
      wallet=new Wallet(WalletType.getTypeByName(data.getString(""String_Node_Str"")));
      if (data.keyExists(""String_Node_Str""))       wallet.setClan(getClan(data.getString(""String_Node_Str"")));
      if (data.keyExists(""String_Node_Str""))       wallet.setTown(getTown(data.getString(""String_Node_Str"")));
      if (data.keyExists(""String_Node_Str""))       wallet.setFaction(getFaction(data.getString(""String_Node_Str"")));
      if (data.keyExists(""String_Node_Str""))       wallet.setBank(data.getString(""String_Node_Str"",""String_Node_Str""),data.getString(""String_Node_Str""));
      wallet.setMoney(data.getDouble(""String_Node_Str"",0.0));
    }
 else {
      wallet=new Wallet(WalletType.getTypeByName(data.getString(""String_Node_Str"")));
      if (wallet.getType().equals(WalletType.SIMPLE_CLANS) && CitizensTrader.getSimpleClans() != null) {
        wallet.setClan(getClan(data.getString(""String_Node_Str"").split(""String_Node_Str"")[1]));
      }
 else       if (wallet.getType().equals(WalletType.TOWNY)) {
        wallet.setTown(getTown(data.getString(""String_Node_Str"").split(""String_Node_Str"")[1]));
      }
 else       if (wallet.getType().equals(WalletType.FACTIONS)) {
        wallet.setFaction(getFaction(data.getString(""String_Node_Str"").split(""String_Node_Str"")[1]));
      }
 else       wallet.setType(WalletType.NPC);
      wallet.setMoney(data.getDouble(""String_Node_Str"",0.0));
    }
  }
  owner=data.getString(""String_Node_Str"",""String_Node_Str"");
  enabled=data.getBoolean(""String_Node_Str"",true);
}","public void load(DataKey data) throws NPCLoadException {
  if (data.keyExists(""String_Node_Str"")) {
    wallet=new Wallet(WalletType.getTypeByName(data.getString(""String_Node_Str"")));
    if (data.keyExists(""String_Node_Str""))     wallet.setClan(getClan(data.getString(""String_Node_Str"")));
    if (data.keyExists(""String_Node_Str""))     wallet.setTown(getTown(data.getString(""String_Node_Str"")));
    if (data.keyExists(""String_Node_Str""))     wallet.setFaction(getFaction(data.getString(""String_Node_Str"")));
    if (data.keyExists(""String_Node_Str""))     wallet.setBank(data.getString(""String_Node_Str"",""String_Node_Str""),data.getString(""String_Node_Str""));
    wallet.setMoney(data.getDouble(""String_Node_Str"",0.0));
  }
 else {
    wallet=new Wallet(WalletType.getTypeByName(data.getString(""String_Node_Str"")));
    if (wallet.getType().equals(WalletType.SIMPLE_CLANS) && CitizensTrader.getSimpleClans() != null) {
      wallet.setClan(getClan(data.getString(""String_Node_Str"").split(""String_Node_Str"")[1]));
    }
 else     if (wallet.getType().equals(WalletType.TOWNY)) {
      wallet.setTown(getTown(data.getString(""String_Node_Str"").split(""String_Node_Str"")[1]));
    }
 else     if (wallet.getType().equals(WalletType.FACTIONS)) {
      wallet.setFaction(getFaction(data.getString(""String_Node_Str"").split(""String_Node_Str"")[1]));
    }
 else     wallet.setType(WalletType.NPC);
    wallet.setMoney(data.getDouble(""String_Node_Str"",0.0));
  }
  owner=data.getString(""String_Node_Str"",""String_Node_Str"");
  enabled=data.getBoolean(""String_Node_Str"",true);
}"
51630,"public boolean sellTransaction(String player,double price){
  boolean success=wallet.withdraw(owner,price);
  if (success)   CitizensTrader.getEconomy().depositPlayer(player,price);
  return success;
}","public boolean sellTransaction(String player,double price){
  boolean success=withdraw(owner,price);
  if (success)   CitizensTrader.getEconomy().depositPlayer(player,price);
  return success;
}"
51631,"public void save(DataKey data){
  if (!CitizensTrader.dtlWalletsEnabled()) {
    data.setString(""String_Node_Str"",wallet.getType().toString());
    if (!wallet.getTown().isEmpty())     data.setString(""String_Node_Str"",wallet.getTown());
    if (!wallet.getClan().isEmpty())     data.setString(""String_Node_Str"",wallet.getClan());
    if (!wallet.getFaction().isEmpty())     data.setString(""String_Node_Str"",wallet.getFaction());
    if (!wallet.getBank().isEmpty())     data.setString(""String_Node_Str"",wallet.getBank());
    if (wallet.getMoney() != 0.0)     data.setDouble(""String_Node_Str"",wallet.getMoney());
  }
  data.setString(""String_Node_Str"",owner);
  data.setBoolean(""String_Node_Str"",enabled);
}","public void save(DataKey data){
  data.setString(""String_Node_Str"",wallet.getType().toString());
  if (!wallet.getTown().isEmpty())   data.setString(""String_Node_Str"",wallet.getTown());
  if (!wallet.getClan().isEmpty())   data.setString(""String_Node_Str"",wallet.getClan());
  if (!wallet.getFaction().isEmpty())   data.setString(""String_Node_Str"",wallet.getFaction());
  if (!wallet.getBank().isEmpty())   data.setString(""String_Node_Str"",wallet.getBank());
  if (wallet.getMoney() != 0.0)   data.setDouble(""String_Node_Str"",wallet.getMoney());
  data.setString(""String_Node_Str"",owner);
  data.setBoolean(""String_Node_Str"",enabled);
}"
51632,"public boolean createTrader(Player player,String[] args){
  String traderName=""String_Node_Str"";
  String owner=player.getName();
  String clanTag=""String_Node_Str"";
  String townName=""String_Node_Str"";
  String factionName=""String_Node_Str"";
  EntityType entityType=EntityType.PLAYER;
  EcoNpcType traderType=getDefaultTraderType(player);
  WalletType walletType=getDefaultWalletType(player,traderType);
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      owner=arg.substring(2);
      walletType=WalletType.OWNER;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      clanTag=arg.substring(3);
      walletType=WalletType.SIMPLE_CLANS;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      townName=arg.substring(5);
      walletType=WalletType.TOWNY;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      factionName=arg.substring(2);
      walletType=WalletType.FACTIONS;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      traderType=EcoNpcType.getTypeByName(arg.substring(2));
      if (traderType == null || traderType.isBanker()) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      walletType=WalletType.getTypeByName(arg.substring(2));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      entityType=EntityType.fromName(arg.substring(2));
    }
 else {
      traderName+=arg + ""String_Node_Str"";
    }
  }
  if (traderName.isEmpty() || args.length == 1 || traderName.equals(""String_Node_Str""))   traderName=""String_Node_Str"";
 else   traderName=traderName.substring(7,traderName.length() - 1);
  if (walletType == null || traderType == null || entityType == null) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
    return true;
  }
  NPC npc=CitizensAPI.getNPCRegistry().createNPC(entityType,traderName);
  npc.addTrait(TraderCharacterTrait.class);
  npc.addTrait(MobType.class);
  npc.getTrait(MobType.class).setType(entityType);
  npc.spawn(player.getLocation());
  System.out.print(""String_Node_Str"");
  npc.getTrait(TraderCharacterTrait.class).implementTrader();
  TraderConfigPart settings=npc.getTrait(TraderCharacterTrait.class).getConfig();
  System.out.print(""String_Node_Str"");
  npc.getTrait(TraderCharacterTrait.class).setType(traderType);
  System.out.print(""String_Node_Str"");
  settings.getWallet().setType(walletType);
  System.out.print(""String_Node_Str"");
  if (walletType.equals(WalletType.SIMPLE_CLANS)) {
    Clan clan=CitizensTrader.getSimpleClans().getClanManager().getClan(clanTag);
    if (clan == null) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
    settings.getWallet().setClan(clan);
  }
  if (walletType.equals(WalletType.TOWNY)) {
    Town town=CitizensTrader.getTowny().getTownyUniverse().getTownsMap().get(townName);
    if (town == null) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
    settings.getWallet().setTown(town);
  }
  if (walletType.equals(WalletType.FACTIONS)) {
    Faction faction=Factions.i.getByTag(factionName);
    if (faction == null) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
    settings.getWallet().setFaction(faction);
  }
  settings.setOwner(owner);
  player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",player.getName()));
  return true;
}","public boolean createTrader(Player player,String[] args){
  String traderName=""String_Node_Str"";
  String owner=player.getName();
  String clanTag=""String_Node_Str"";
  String townName=""String_Node_Str"";
  String factionName=""String_Node_Str"";
  EntityType entityType=EntityType.PLAYER;
  EcoNpcType traderType=getDefaultTraderType(player);
  WalletType walletType=getDefaultWalletType(player,traderType);
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      owner=arg.substring(2);
      walletType=WalletType.OWNER;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      clanTag=arg.substring(3);
      walletType=WalletType.SIMPLE_CLANS;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      townName=arg.substring(5);
      walletType=WalletType.TOWNY;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      factionName=arg.substring(2);
      walletType=WalletType.FACTIONS;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      traderType=EcoNpcType.getTypeByName(arg.substring(2));
      if (traderType == null || traderType.isBanker()) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      walletType=WalletType.getTypeByName(arg.substring(2));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      entityType=EntityType.fromName(arg.substring(2));
    }
 else {
      traderName+=arg + ""String_Node_Str"";
    }
  }
  if (traderName.isEmpty() || args.length == 1 || traderName.equals(""String_Node_Str""))   traderName=""String_Node_Str"";
 else   traderName=traderName.substring(7,traderName.length() - 1);
  if (walletType == null || traderType == null || entityType == null) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
    return true;
  }
  NPC npc=CitizensAPI.getNPCRegistry().createNPC(entityType,traderName);
  npc.addTrait(TraderCharacterTrait.class);
  npc.addTrait(MobType.class);
  npc.getTrait(MobType.class).setType(entityType);
  npc.spawn(player.getLocation());
  npc.getTrait(TraderCharacterTrait.class).implementTrader();
  TraderConfigPart settings=npc.getTrait(TraderCharacterTrait.class).getConfig();
  npc.getTrait(TraderCharacterTrait.class).setType(traderType);
  settings.getWallet().setType(walletType);
  if (walletType.equals(WalletType.SIMPLE_CLANS)) {
    Clan clan=CitizensTrader.getSimpleClans().getClanManager().getClan(clanTag);
    if (clan == null) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
    settings.getWallet().setClan(clan);
  }
  if (walletType.equals(WalletType.TOWNY)) {
    Town town=CitizensTrader.getTowny().getTownyUniverse().getTownsMap().get(townName);
    if (town == null) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
    settings.getWallet().setTown(town);
  }
  if (walletType.equals(WalletType.FACTIONS)) {
    Faction faction=Factions.i.getByTag(factionName);
    if (faction == null) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      return true;
    }
    settings.getWallet().setFaction(faction);
  }
  settings.setOwner(owner);
  player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",player.getName()));
  return true;
}"
51633,"public StockItem(String data){
  limit=new LimitSystem(this);
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,(short)0,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          price=Double.parseDouble(value.substring(2));
          listenPattern=false;
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add((Integer.parseInt(amout) == 0 ? 1 : Integer.parseInt(amout)));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemGlobalLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemPlayerLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
      }
 else {
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
        }
        if (value.equals(""String_Node_Str"")) {
          listenPattern=true;
        }
      }
    }
  }
}","public StockItem(String data){
  limit=new LimitSystem(this);
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,(short)0,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          price=Double.parseDouble(value.substring(2).replace(',','.'));
          listenPattern=false;
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add((Integer.parseInt(amout) == 0 ? 1 : Integer.parseInt(amout)));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemGlobalLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemPlayerLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
        }
      }
 else {
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
        }
        if (value.equals(""String_Node_Str"")) {
          listenPattern=true;
        }
      }
    }
  }
}"
51634,"public double getItemPrice(Player player,StockItem item,String transation,int slot,double nprice){
  double price=nprice;
  if (item.isPatternListening()) {
    if (patternPrices.containsKey(transation))     if (patternPrices.get(transation).containsKey(item.getIdAndData()))     price=patternPrices.get(transation).get(item.getIdAndData());
 else     for (    Map.Entry<String,Double> entry : patternPrices.get(transation).entrySet())     if (item.getIdAndData().split(""String_Node_Str"")[0].equals(entry.getKey()))     price=entry.getValue();
    for (    Map.Entry<String,TransactionPattern> tier : patternTiers.entrySet())     if (CitizensTrader.getPermissionsManager().has(player,""String_Node_Str"" + tier.getKey())) {
      price=tier.getValue().getItemPrice(player,item,transation,slot,price);
    }
  }
 else   price=item.getRawPrice();
  System.out.print(slot + ""String_Node_Str"" + nprice);
  if (!item.hasStackPrice() && nprice == 0.0)   price*=item.getAmount(slot);
  price*=multiplier.get(transation);
  return price;
}","public double getItemPrice(Player player,StockItem item,String transation,int slot,double nprice){
  double price=nprice;
  if (item.isPatternListening()) {
    if (patternPrices.containsKey(transation))     if (patternPrices.get(transation).containsKey(item.getIdAndData()))     price=patternPrices.get(transation).get(item.getIdAndData());
 else     for (    Map.Entry<String,Double> entry : patternPrices.get(transation).entrySet())     if (item.getIdAndData().split(""String_Node_Str"")[0].equals(entry.getKey()))     price=entry.getValue();
    for (    Map.Entry<String,TransactionPattern> tier : patternTiers.entrySet())     if (CitizensTrader.getPermissionsManager().has(player,""String_Node_Str"" + tier.getKey())) {
      price=tier.getValue().getItemPrice(player,item,transation,slot,price);
    }
  }
 else   price=item.getRawPrice();
  if (!item.hasStackPrice() && nprice == 0.0)   price*=item.getAmount(slot);
  price*=multiplier.get(transation);
  return price;
}"
51635,"public void save(DataKey data){
  if (!pattern.getName().isEmpty())   data.setString(""String_Node_Str"",pattern.getName());
  List<String> sellList=new ArrayList<String>();
  for (  StockItem item : stock.get(""String_Node_Str""))   if (!item.isPatternItem())   sellList.add(item.toString());
  List<String> buyList=new ArrayList<String>();
  for (  StockItem item : stock.get(""String_Node_Str"")) {
    if (!item.isPatternItem())     buyList.add(item.toString());
  }
  data.setRaw(""String_Node_Str"",sellList);
  data.setRaw(""String_Node_Str"",buyList);
}","public void save(DataKey data){
  if (pattern != null)   if (!pattern.getName().isEmpty())   data.setString(""String_Node_Str"",pattern.getName());
  List<String> sellList=new ArrayList<String>();
  for (  StockItem item : stock.get(""String_Node_Str""))   if (!item.isPatternItem())   sellList.add(item.toString());
  List<String> buyList=new ArrayList<String>();
  for (  StockItem item : stock.get(""String_Node_Str"")) {
    if (!item.isPatternItem())     buyList.add(item.toString());
  }
  data.setRaw(""String_Node_Str"",sellList);
  data.setRaw(""String_Node_Str"",buyList);
}"
51636,"@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  if (CitizensTrader.getDenizen() != null)   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
switch (characterTrait.getType()) {
case SERVER_TRADER:
{
      if (economyNpc != null) {
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (economyNpc.getNpcId() == npc.getId()) {
          economyNpc.onRightClick(player,characterTrait,npc);
          if (!economyNpc.locked())           playerInteraction.remove(playerName);
        }
 else {
          player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
          EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
          ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
          playerInteraction.put(playerName,newNpc);
          if (!newNpc.onRightClick(player,characterTrait,npc))           playerInteraction.remove(playerName);
        }
      }
 else {
        EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
      return;
    }
case PLAYER_TRADER:
{
    if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str""));
      return;
    }
    if (economyNpc != null) {
      if (economyNpc.getNpcId() == npc.getId()) {
        economyNpc.onRightClick(player,characterTrait,npc);
        if (!economyNpc.locked())         playerInteraction.remove(playerName);
      }
 else {
        player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
        EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
        ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
    }
 else {
      EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
    return;
  }
case MARKET_TRADER:
{
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (economyNpc != null) {
    if (economyNpc.getNpcId() == npc.getId()) {
      economyNpc.onRightClick(player,characterTrait,npc);
      if (!economyNpc.locked())       playerInteraction.remove(playerName);
    }
 else {
      player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
      EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
  }
 else {
    EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
    ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
    playerInteraction.put(playerName,newNpc);
    if (!newNpc.onRightClick(player,characterTrait,npc))     playerInteraction.remove(playerName);
  }
  return;
}
case PRIVATE_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return;
}
if (economyNpc != null) {
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
 else {
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
case MONEY_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
player.sendMessage(locale.getLocaleString(""String_Node_Str""));
return;
}
if (economyNpc != null) {
{
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
}
 else {
EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
playerInteraction.put(playerName,newNpc);
newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
default :
{
}
}
}","@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
switch (characterTrait.getType()) {
case SERVER_TRADER:
{
      if (economyNpc != null) {
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (economyNpc.getNpcId() == npc.getId()) {
          economyNpc.onRightClick(player,characterTrait,npc);
          if (!economyNpc.locked())           playerInteraction.remove(playerName);
        }
 else {
          player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
          EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
          ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
          playerInteraction.put(playerName,newNpc);
          if (!newNpc.onRightClick(player,characterTrait,npc))           playerInteraction.remove(playerName);
        }
      }
 else {
        EconomyNpc newNpc=new ServerTrader(characterTrait,npc,player);
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
      return;
    }
case PLAYER_TRADER:
{
    if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
      player.sendMessage(locale.getLocaleString(""String_Node_Str""));
      return;
    }
    if (economyNpc != null) {
      if (economyNpc.getNpcId() == npc.getId()) {
        economyNpc.onRightClick(player,characterTrait,npc);
        if (!economyNpc.locked())         playerInteraction.remove(playerName);
      }
 else {
        player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
        EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
        ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
        playerInteraction.put(playerName,newNpc);
        if (!newNpc.onRightClick(player,characterTrait,npc))         playerInteraction.remove(playerName);
      }
    }
 else {
      EconomyNpc newNpc=new PlayerTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
    return;
  }
case MARKET_TRADER:
{
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (economyNpc != null) {
    if (economyNpc.getNpcId() == npc.getId()) {
      economyNpc.onRightClick(player,characterTrait,npc);
      if (!economyNpc.locked())       playerInteraction.remove(playerName);
    }
 else {
      player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
      EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
      ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
      playerInteraction.put(playerName,newNpc);
      if (!newNpc.onRightClick(player,characterTrait,npc))       playerInteraction.remove(playerName);
    }
  }
 else {
    EconomyNpc newNpc=new MarketTrader(characterTrait,npc,player);
    ((Trader)newNpc).switchInventory(Trader.getStartStatus(player));
    playerInteraction.put(playerName,newNpc);
    if (!newNpc.onRightClick(player,characterTrait,npc))     playerInteraction.remove(playerName);
  }
  return;
}
case PRIVATE_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return;
}
if (economyNpc != null) {
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
 else {
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  EconomyNpc newNpc=new PrivateBanker(npc,characterTrait.getBankTrait(),playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
case MONEY_BANKER:
{
if (!permManager.has(player,""String_Node_Str"" + characterTrait.getType().toString())) {
player.sendMessage(locale.getLocaleString(""String_Node_Str""));
return;
}
if (economyNpc != null) {
{
  player.sendMessage(ChatColor.AQUA + economyNpc.getNpc().getFullName() + ChatColor.RED+ ""String_Node_Str"");
  EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
  playerInteraction.put(playerName,newNpc);
  newNpc.onRightClick(player,characterTrait,npc);
}
}
 else {
EconomyNpc newNpc=new MoneyBanker(npc,characterTrait,playerName);
playerInteraction.put(playerName,newNpc);
newNpc.onRightClick(player,characterTrait,npc);
}
return;
}
default :
{
}
}
}"
51637,"public static ItemStack addDescription(ItemStack item,List<String> lore){
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(item.getType());
  List<String> list=new ArrayList<String>();
  for (  String s : lore)   list.add(s.replace('^','�'));
  meta.setLore(list);
  Map<String,Object> map=item.serialize();
  map.put(""String_Node_Str"",meta);
  item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
  return ItemStack.deserialize(map);
}","public static ItemStack addDescription(ItemStack item,List<String> lore){
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(item.getType());
  List<String> list=new ArrayList<String>();
  for (  String s : lore)   list.add(s.replace('^','�'));
  meta.setLore(list);
  meta.setDisplayName(item.getItemMeta().getDisplayName());
  Map<String,Object> map=item.serialize();
  map.put(""String_Node_Str"",meta);
  item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
  return ItemStack.deserialize(map);
}"
51638,"public static String getName(ItemStack item){
  String name=""String_Node_Str"";
  if (item.hasItemMeta())   name=item.getItemMeta().getDisplayName();
  return name;
}","public static String getName(ItemStack item){
  String name=""String_Node_Str"";
  if (item.hasItemMeta())   name=item.getItemMeta().getDisplayName();
  return name == null ? ""String_Node_Str"" : name;
}"
51639,"public static void removeDescriptions(Inventory inventory){
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      int size=0;
      List<String> lore=CitizensTrader.getInstance().getItemConfig().getPriceLore(""String_Node_Str"");
      if (lore != null) {
        size=lore.size();
        Map<String,Object> map=item.serialize();
        ItemMeta meta=(ItemMeta)map.get(""String_Node_Str"");
        if (meta != null) {
          List<String> list=null;
          if (meta.getLore() != null && meta.getLore().size() >= size) {
            list=new ArrayList<String>(meta.getLore());
            int s=list.size();
            for (int i=0; i + (s - size) < s; ++i) {
              String m=lore.get((size - 1) - i);
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              if (Pattern.matches(m,list.get((s - 1) - i)))               list.remove((s - 1) - i);
            }
          }
          meta.setLore(list);
        }
        map.remove(""String_Node_Str"");
        if (meta != null && meta.hasLore())         map.put(""String_Node_Str"",meta);
        item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
      }
    }
  }
}","public static void removeDescriptions(Inventory inventory){
  for (  ItemStack item : inventory.getContents()) {
    if (item != null) {
      int size=0;
      List<String> lore=CitizensTrader.getInstance().getItemConfig().getPriceLore(""String_Node_Str"");
      if (lore != null) {
        size=lore.size();
        Map<String,Object> map=item.serialize();
        ItemMeta meta=(ItemMeta)map.get(""String_Node_Str"");
        if (meta != null) {
          List<String> list=null;
          if (meta.getLore() != null && meta.getLore().size() >= size) {
            list=new ArrayList<String>(meta.getLore());
            int s=list.size();
            for (int i=0; i + (s - size) < s; ++i) {
              String m=lore.get((size - 1) - i);
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              m=m.replace(""String_Node_Str"",""String_Node_Str"");
              if (Pattern.matches(m,list.get((s - 1) - i)))               list.remove((s - 1) - i);
            }
          }
          meta.setLore(list);
        }
        map.remove(""String_Node_Str"");
        if (meta != null)         map.put(""String_Node_Str"",meta);
        item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
      }
    }
  }
}"
51640,"public static void removeDescription(ItemStack item){
  if (item.hasItemMeta()) {
    ItemMeta meta=item.getItemMeta();
    if (meta.hasLore()) {
      meta.setLore(null);
    }
  }
}","public static void removeDescription(ItemStack item){
  Map<String,Object> map=item.serialize();
  if (map.containsKey(""String_Node_Str"")) {
    ItemMeta meta=(ItemMeta)map.get(""String_Node_Str"");
    meta.setLore(null);
    item.setItemMeta(ItemStack.deserialize(map).getItemMeta());
  }
}"
51641,"@Deprecated public void setEconomy(Economy e){
  economy=e;
}","@Deprecated public void setEconomy(Economy e){
}"
51642,"public static WalletType getTypeByName(String n){
  if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.OWNER;
  if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.OWNER;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.NPC;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.NPC;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.BANK;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.INFINITE;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.INFINITE;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.SIMPLE_CLANS;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.TOWNY;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.FACTIONS;
  return null;
}","public static WalletType getTypeByName(String n){
  if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.OWNER;
  if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.OWNER;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.NPC;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.NPC;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.BANK;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.INFINITE;
 else   if (n.equalsIgnoreCase(""String_Node_Str""))   return WalletType.INFINITE;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.SIMPLE_CLANS;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.SIMPLE_CLANS;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.TOWNY;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.FACTIONS;
 else   if (n.startsWith(""String_Node_Str""))   return WalletType.FACTIONS;
  return null;
}"
51643,"public void setInventoryWith(Inventory inventory,StockItem item,Player player){
  int i=0;
  for (  Integer amount : item.getAmounts()) {
    ItemStack chk=setLore(createCraftItem(item),getPriceLore(item,i,""String_Node_Str"",pattern,player));
    chk.addEnchantments(item.getItemStack().getEnchantments());
    chk.setAmount(amount);
    if (item.getLimitSystem().checkLimit(""String_Node_Str"",i))     inventory.setItem(i++,chk);
  }
  inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(7));
}","public void setInventoryWith(Inventory inventory,StockItem item,Player player){
  int i=0;
  for (  Integer amount : item.getAmounts()) {
    ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,i,""String_Node_Str"",pattern,player));
    chk.addEnchantments(item.getItemStack().getEnchantments());
    chk.setAmount(amount);
    if (item.getLimitSystem().checkLimit(""String_Node_Str"",i))     inventory.setItem(i++,chk);
  }
  inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(7));
}"
51644,"@Override public Inventory getInventory(){
  Inventory inventory=Bukkit.createInventory(this,stockSize,name);
  for (  StockItem item : stock.get(""String_Node_Str"")) {
    ItemStack chk=setLore(createCraftItem(item),getPriceLore(item,0,""String_Node_Str"",pattern,null));
    chk.addEnchantments(item.getItemStack().getEnchantments());
    if (item.getSlot() < 0)     item.setSlot(inventory.firstEmpty());
    inventory.setItem(item.getSlot(),chk);
  }
  if (!stock.get(""String_Node_Str"").isEmpty())   inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(""String_Node_Str""));
  return inventory;
}","@Override public Inventory getInventory(){
  Inventory inventory=Bukkit.createInventory(this,stockSize,name);
  for (  StockItem item : stock.get(""String_Node_Str"")) {
    ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,0,""String_Node_Str"",pattern,null));
    chk.addEnchantments(item.getItemStack().getEnchantments());
    if (item.getSlot() < 0)     item.setSlot(inventory.firstEmpty());
    inventory.setItem(item.getSlot(),chk);
  }
  if (!stock.get(""String_Node_Str"").isEmpty())   inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(""String_Node_Str""));
  return inventory;
}"
51645,"public static ItemStack setLore(ItemStack cis,List<String> lore){
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(cis.getType());
  List<String> list=new ArrayList<String>();
  for (  String s : lore)   list.add(s.replace('^','�'));
  meta.setLore(list);
  Map<String,Object> map=cis.serialize();
  map.put(""String_Node_Str"",meta);
  cis.setItemMeta(ItemStack.deserialize(map).getItemMeta());
  return ItemStack.deserialize(map);
}","public static ItemStack setLore(ItemStack cis,List<String> lore){
  ItemMeta meta=Bukkit.getItemFactory().getItemMeta(cis.getType());
  List<String> list=new ArrayList<String>();
  for (  String s : lore)   list.add(s.replace('^','�'));
  meta.setLore(list);
  meta.setDisplayName(NBTTagEditor.getName(cis));
  Map<String,Object> map=cis.serialize();
  map.put(""String_Node_Str"",meta);
  cis.setItemMeta(ItemStack.deserialize(map).getItemMeta());
  return ItemStack.deserialize(map);
}"
51646,"public Inventory inventoryView(Inventory inventory,TraderStatus s,Player player,String type){
  if (!s.isManaging()) {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(createCraftItem(item),getPriceLore(item,0,s.toString(),pattern,player));
      chk.addEnchantments(item.getItemStack().getEnchantments());
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    if (!stock.get(opositeStock(s.toString())).isEmpty())     inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
 else {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(createCraftItem(item),getLore(type,item,s.toString(),pattern,player));
      chk.addEnchantments(item.getItemStack().getEnchantments());
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    inventory.setItem(stockSize - 3,itemsConfig.getItemManagement(4));
    inventory.setItem(stockSize - 2,itemsConfig.getItemManagement(2));
    inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
  return inventory;
}","public Inventory inventoryView(Inventory inventory,TraderStatus s,Player player,String type){
  if (!s.isManaging()) {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(item.getItemStack(),getPriceLore(item,0,s.toString(),pattern,player));
      chk.addEnchantments(item.getItemStack().getEnchantments());
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    if (!stock.get(opositeStock(s.toString())).isEmpty())     inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
 else {
    for (    StockItem item : stock.get(s.toString())) {
      ItemStack chk=setLore(item.getItemStack(),getLore(type,item,s.toString(),pattern,player));
      chk.addEnchantments(item.getItemStack().getEnchantments());
      if (item.getSlot() < 0)       item.setSlot(inventory.firstEmpty());
      inventory.setItem(item.getSlot(),chk);
    }
    inventory.setItem(stockSize - 3,itemsConfig.getItemManagement(4));
    inventory.setItem(stockSize - 2,itemsConfig.getItemManagement(2));
    inventory.setItem(stockSize - 1,itemsConfig.getItemManagement(opositeStock(s.toString())));
  }
  return inventory;
}"
51647,"public final boolean addAmountToInventory(int amount){
  PlayerInventory inventory=player.getInventory();
  int amountToAdd=amount;
  for (  ItemStack item : inventory.all(selectedItem.getItemStack().getType()).values()) {
    if (item.getDurability() == selectedItem.getItemStack().getDurability()) {
      if (item.getAmount() + amountToAdd <= selectedItem.getItemStack().getMaxStackSize()) {
        item.setAmount(item.getAmount() + amountToAdd);
        return true;
      }
      if (item.getAmount() < selectedItem.getItemStack().getMaxStackSize()) {
        amountToAdd=(item.getAmount() + amountToAdd) % selectedItem.getItemStack().getMaxStackSize();
        item.setAmount(selectedItem.getItemStack().getMaxStackSize());
      }
      if (amountToAdd <= 0)       return true;
    }
  }
  if (inventory.firstEmpty() < inventory.getSize() && inventory.firstEmpty() >= 0) {
    ItemStack is=selectedItem.getItemStack().clone();
    is.setAmount(amountToAdd);
    inventory.setItem(inventory.firstEmpty(),is);
    return true;
  }
  return false;
}","public final boolean addAmountToInventory(int amount){
  PlayerInventory inventory=player.getInventory();
  int amountToAdd=amount;
  for (  ItemStack item : inventory.all(selectedItem.getItemStack().getType()).values()) {
    if (item.getDurability() == selectedItem.getItemStack().getDurability()) {
      if (NBTTagEditor.getName(item).equals(selectedItem.getName())) {
        if (item.getAmount() + amountToAdd <= selectedItem.getItemStack().getMaxStackSize()) {
          item.setAmount(item.getAmount() + amountToAdd);
          return true;
        }
        if (item.getAmount() < selectedItem.getItemStack().getMaxStackSize()) {
          amountToAdd=(item.getAmount() + amountToAdd) % selectedItem.getItemStack().getMaxStackSize();
          item.setAmount(selectedItem.getItemStack().getMaxStackSize());
        }
        if (amountToAdd <= 0)         return true;
      }
    }
  }
  if (inventory.firstEmpty() < inventory.getSize() && inventory.firstEmpty() >= 0) {
    ItemStack is=selectedItem.getItemStack().clone();
    is.setAmount(amountToAdd);
    NBTTagEditor.removeDescription(is);
    StockItem it=this.getStock().getItem(is,TraderStatus.BUY,true,false);
    if (it != null) {
      int scale=is.getAmount() / it.getAmount();
      DecimalFormat f=new DecimalFormat(""String_Node_Str"");
      List<String> lore=new ArrayList<String>();
      ;
      for (      String l : itemsConfig.getPriceLore(""String_Node_Str""))       lore.add(l.replace(""String_Node_Str"",f.format(it.getPrice()) + ""String_Node_Str"").replace(""String_Node_Str"",f.format(it.getPrice() * scale) + ""String_Node_Str""));
      if (scale > 0)       NBTTagEditor.addDescription(is,lore);
    }
    inventory.setItem(inventory.firstEmpty(),is);
    return true;
  }
  return false;
}"
51648,"public final boolean inventoryHasPlaceAmount(int amount){
  PlayerInventory inventory=player.getInventory();
  int amountToAdd=amount;
  for (  ItemStack item : inventory.all(selectedItem.getItemStack().getType()).values()) {
    if (item.getDurability() == selectedItem.getItemStack().getDurability()) {
      if (item.getAmount() + amountToAdd <= selectedItem.getItemStack().getMaxStackSize())       return true;
      if (item.getAmount() < 64) {
        amountToAdd=(item.getAmount() + amountToAdd) % 64;
      }
      if (amountToAdd <= 0)       return true;
    }
  }
  if (inventory.firstEmpty() < inventory.getSize() && inventory.firstEmpty() >= 0) {
    return true;
  }
  return false;
}","public final boolean inventoryHasPlaceAmount(int amount){
  PlayerInventory inventory=player.getInventory();
  int amountToAdd=amount;
  for (  ItemStack item : inventory.all(selectedItem.getItemStack().getType()).values()) {
    if (item.getDurability() == selectedItem.getItemStack().getDurability()) {
      if (NBTTagEditor.getName(item).equals(selectedItem.getName())) {
        if (item.getAmount() + amountToAdd <= selectedItem.getItemStack().getMaxStackSize())         return true;
        if (item.getAmount() < 64) {
          amountToAdd=(item.getAmount() + amountToAdd) % 64;
        }
        if (amountToAdd <= 0)         return true;
      }
    }
  }
  if (inventory.firstEmpty() < inventory.getSize() && inventory.firstEmpty() >= 0) {
    return true;
  }
  return false;
}"
51649,"@Override public void simpleMode(InventoryClickEvent event){
  System.out.print(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player player=(Player)event.getWhoClicked();
  int slot=event.getSlot();
  System.out.print(slot);
  if (slot < 0) {
    if (event.getCursor().getTypeId() != 0) {
      BankItem item=getSelectedItem();
      if (item != null) {
        if (item.getSlot() != -1) {
          if (!withdrawFee(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str""));
            event.setCancelled(true);
            return;
          }
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          removeItemFromAccount(item);
          selectItem(null);
        }
      }
      return;
    }
  }
  if (top) {
    if (rowClicked(getTab().getTabSize() + 1,slot)) {
      if (event.getCurrentItem().getTypeId() != 0) {
        if (event.getCursor().getTypeId() == 0) {
          if (!getTab().getName().equals(getTab(getRowSlot(slot)).getId())) {
            setTab(getTab(getRowSlot(slot)).getId());
            player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",getTab().getName()));
            switchInventory();
          }
        }
 else {
        }
        event.setCancelled(true);
        return;
      }
    }
 else {
      if (event.isShiftClick()) {
        BankItem item=getSelectedItem();
        if (selectItem(slot).hasSelectedItem()) {
          if (!this.playerInventoryHasPlace(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCancelled(true);
            selectItem(item);
            return;
          }
          if (!withdrawFee(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str""));
            event.setCancelled(true);
            selectItem(item);
            return;
          }
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          event.setCurrentItem(null);
          removeItemFromAccount(getSelectedItem());
          addSelectedToPlayerInventory(player);
          event.setCancelled(true);
        }
        selectItem(item);
        return;
      }
      BankItem item=getSelectedItem();
      selectItem(slot);
      System.out.print(item);
      if (item != null) {
        System.out.print(item.getSlot());
        if (item.getSlot() == -1) {
          if (!depositFee(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str""));
            event.setCancelled(true);
            selectItem(item);
            return;
          }
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          item.setSlot(slot);
          item.getItemStack().setAmount(event.getCursor().getAmount());
          addItemToAccount(item);
          item=null;
        }
      }
      if (item != null) {
        BankItem oldItem=toBankItem(item.getItemStack());
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        oldItem.setSlot(item.getSlot());
        item.setSlot(slot);
        updateAccountItem(oldItem,item);
      }
    }
  }
 else {
    System.out.print(""String_Node_Str"");
    if (event.isShiftClick()) {
      BankItem item=getSelectedItem();
      if (selectItem(toBankItem(event.getCurrentItem())).hasSelectedItem()) {
        if (!bankerInventoryHasPlace()) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          selectItem(item);
          event.setCancelled(true);
          return;
        }
        if (!depositFee(player)) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          event.setCancelled(true);
          selectItem(item);
          return;
        }
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        addSelectedToBankerInventory();
        event.setCurrentItem(null);
      }
      selectItem(item);
      return;
    }
    BankItem item=getSelectedItem();
    if (item != null) {
      if (item.getSlot() != -1) {
        if (!withdrawFee(player)) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          event.setCancelled(true);
          return;
        }
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        removeItemFromAccount(item);
      }
    }
    if (selectItem(toBankItem(event.getCurrentItem())).hasSelectedItem())     getSelectedItem().setSlot(-1);
  }
}","@Override public void simpleMode(InventoryClickEvent event){
  System.out.print(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player player=(Player)event.getWhoClicked();
  int slot=event.getSlot();
  System.out.print(slot);
  if (slot < 0) {
    if (event.getCursor().getTypeId() != 0) {
      BankItem item=getSelectedItem();
      if (item != null) {
        if (item.getSlot() != -1) {
          if (!withdrawFee(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str""));
            event.setCancelled(true);
            return;
          }
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          removeItemFromAccount(item);
          selectItem(null);
        }
      }
      return;
    }
  }
  if (top) {
    if (rowClicked(getTab().getTabSize() + 1,slot)) {
      if (event.getCurrentItem().getTypeId() != 0) {
        if (event.getCursor().getTypeId() == 0) {
          if (!getTab().getName().equals(getTab(getRowSlot(slot)).getId())) {
            setTab(getTab(getRowSlot(slot)).getId());
            player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",getTab().getName()));
            switchInventory();
          }
        }
 else {
        }
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        BankItem item=getSelectedItem();
        if (selectItem(slot).hasSelectedItem()) {
          if (!this.playerInventoryHasPlace(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCancelled(true);
            selectItem(item);
            return;
          }
          if (!withdrawFee(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str""));
            event.setCancelled(true);
            selectItem(item);
            return;
          }
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          event.setCurrentItem(null);
          removeItemFromAccount(getSelectedItem());
          addSelectedToPlayerInventory(player);
          event.setCancelled(true);
        }
        selectItem(item);
        return;
      }
      BankItem item=getSelectedItem();
      selectItem(slot);
      System.out.print(item);
      if (item != null) {
        System.out.print(item.getSlot());
        if (item.getSlot() == -1) {
          if (!depositFee(player)) {
            player.sendMessage(locale.getLocaleString(""String_Node_Str""));
            event.setCancelled(true);
            selectItem(item);
            return;
          }
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          item.setSlot(slot);
          item.getItemStack().setAmount(event.getCursor().getAmount());
          addItemToAccount(item);
          item=null;
        }
      }
      if (item != null) {
        BankItem oldItem=toBankItem(item.getItemStack());
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        oldItem.setSlot(item.getSlot());
        item.setSlot(slot);
        updateAccountItem(oldItem,item);
      }
    }
  }
 else {
    System.out.print(""String_Node_Str"");
    if (event.isShiftClick()) {
      BankItem item=getSelectedItem();
      if (selectItem(toBankItem(event.getCurrentItem())).hasSelectedItem()) {
        if (!bankerInventoryHasPlace()) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          selectItem(item);
          event.setCancelled(true);
          return;
        }
        if (!depositFee(player)) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          event.setCancelled(true);
          selectItem(item);
          return;
        }
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        addSelectedToBankerInventory();
        event.setCurrentItem(null);
      }
      selectItem(item);
      return;
    }
    BankItem item=getSelectedItem();
    if (item != null) {
      if (item.getSlot() != -1) {
        if (!withdrawFee(player)) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          event.setCancelled(true);
          return;
        }
        player.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        removeItemFromAccount(item);
      }
    }
    if (selectItem(toBankItem(event.getCurrentItem())).hasSelectedItem())     getSelectedItem().setSlot(-1);
  }
}"
51650,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (clickedSlot < 0) {
    event.setCursor(null);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? config.getItemManagement(5) : config.getItemManagement(3)));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(2))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          this.setTraderStatus(TraderStatus.MANAGE_PRICE);
          getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(3))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(0));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(3));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(4));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        this.saveManagedAmouts();
        this.switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL,p).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(p,leftAmount)) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                this.addAmountToInventory(p,leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              if (permissions.has(p,""String_Node_Str"")) {
                switchInventory(getSelectedItem());
                setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
              }
 else               p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY,p).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus(),p).hasSelectedItem()) {
            if (!permissions.has(p,""String_Node_Str"")) {
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
          stockItem.setSlot(clickedSlot);
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem())           p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            getInventory().setItem(clickedSlot,clonedStack);
            event.setCancelled(false);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            int addAmount=event.getCursor().getAmount();
            if (event.getCursor().getTypeId() == 0)             addAmount=1;
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else {
          if (event.getCurrentItem().getTypeId() == 0) {
            return;
          }
          int removeAmount=event.getCursor().getAmount();
          if (event.getCursor().getTypeId() == 0)           removeAmount=1;
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCurrentItem(new ItemStack(Material.AIR,0));
          }
 else {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.getCurrentItem().setAmount(oldAmount - removeAmount);
          }
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      if (event.isShiftClick())       event.setCancelled(true);
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,p,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        MarketItem marketItem=toMarketItem(itemToAdd.clone());
        marketItem.setAsPatternItem(false);
        marketItem.setPetternListening(false);
        marketItem.setItemOwner(p.getName());
        marketItem.setSlot(firstEmpty);
        LimitSystem limitSystem=marketItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,marketItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,marketItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,p,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",itemToAdd.getAmount() + ""String_Node_Str"").replace((itemToAdd.getAmount() != 1 ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str""));
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (clickedSlot < 0) {
    event.setCursor(null);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? config.getItemManagement(5) : config.getItemManagement(3)));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(2))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          this.setTraderStatus(TraderStatus.MANAGE_PRICE);
          getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(3))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(0));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(3));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(4));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        this.saveManagedAmouts();
        this.switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL,p).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(p,leftAmount)) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                this.addAmountToInventory(p,leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              if (permissions.has(p,""String_Node_Str"")) {
                switchInventory(getSelectedItem());
                setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
              }
 else               p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY,p).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus(),p).hasSelectedItem()) {
            if (!permissions.has(p,""String_Node_Str"")) {
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            selectItem(stockItem);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
          stockItem.setSlot(clickedSlot);
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            selectItem(null);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem())           p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            getInventory().setItem(clickedSlot,clonedStack);
            event.setCancelled(false);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            int addAmount=event.getCursor().getAmount();
            if (event.getCursor().getTypeId() == 0)             addAmount=1;
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else {
          if (event.getCurrentItem().getTypeId() == 0) {
            return;
          }
          int removeAmount=event.getCursor().getAmount();
          if (event.getCursor().getTypeId() == 0)           removeAmount=1;
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCurrentItem(new ItemStack(Material.AIR,0));
          }
 else {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.getCurrentItem().setAmount(oldAmount - removeAmount);
          }
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      if (event.isShiftClick())       event.setCancelled(true);
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,p,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        MarketItem marketItem=toMarketItem(itemToAdd.clone());
        marketItem.setAsPatternItem(false);
        marketItem.setPetternListening(false);
        marketItem.setItemOwner(p.getName());
        marketItem.setSlot(firstEmpty);
        LimitSystem limitSystem=marketItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,marketItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,marketItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,p,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",itemToAdd.getAmount() + ""String_Node_Str"").replace((itemToAdd.getAmount() != 1 ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str""));
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}"
51651,"@Override public boolean buyTransaction(Player p,double price){
  return getTraderConfig().transaction(getSelectedMarketItem().getItemOwner(),p.getName(),price);
}","@Override public boolean buyTransaction(Player p,double price){
  return getTraderConfig().transaction(getSelectedMarketItem().getItemOwner(),p.getName(),false,price);
}"
51652,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (clickedSlot < 0) {
    event.setCursor(null);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? config.getItemManagement(5) : config.getItemManagement(3)));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(2))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          this.setTraderStatus(TraderStatus.MANAGE_PRICE);
          getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(3))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(0));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(3));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(4));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        this.saveManagedAmouts();
        this.switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL,p).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(p,leftAmount)) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                this.addAmountToInventory(p,leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              if (permissions.has(p,""String_Node_Str"")) {
                switchInventory(getSelectedItem());
                setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
              }
 else               p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY,p).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus(),p).hasSelectedItem()) {
            if (!permissions.has(p,""String_Node_Str"")) {
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",getSelectedMarketItem().getItemOwner()));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            selectItem(stockItem);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
          stockItem.setSlot(clickedSlot);
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",((MarketItem)stockItem).getItemOwner()));
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",getSelectedMarketItem().getItemOwner()));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            selectItem(null);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem())           p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            getInventory().setItem(clickedSlot,clonedStack);
            event.setCancelled(false);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            int addAmount=event.getCursor().getAmount();
            if (event.getCursor().getTypeId() == 0)             addAmount=1;
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else {
          if (event.getCurrentItem().getTypeId() == 0) {
            return;
          }
          int removeAmount=event.getCursor().getAmount();
          if (event.getCursor().getTypeId() == 0)           removeAmount=1;
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCurrentItem(new ItemStack(Material.AIR,0));
          }
 else {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.getCurrentItem().setAmount(oldAmount - removeAmount);
          }
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      if (event.isShiftClick())       event.setCancelled(true);
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectMarketItem(itemToAdd,getBasicManageModeByWool(),p.getName(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        MarketItem marketItem=toMarketItem(itemToAdd.clone());
        marketItem.setAsPatternItem(false);
        marketItem.setPetternListening(false);
        marketItem.setItemOwner(p.getName());
        marketItem.setSlot(firstEmpty);
        LimitSystem limitSystem=marketItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,marketItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,marketItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectMarketItem(itemToAdd,getBasicManageModeByWool(),p.getName(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",itemToAdd.getAmount() + ""String_Node_Str"").replace((itemToAdd.getAmount() != 1 ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str""));
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (clickedSlot < 0) {
    event.setCursor(null);
    switchInventory(getBasicManageModeByWool());
    return;
  }
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? config.getItemManagement(5) : config.getItemManagement(3)));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(2))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          this.setTraderStatus(TraderStatus.MANAGE_PRICE);
          getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(6));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(3))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
          getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
          getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_BUY);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(0));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(3));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        if (!permissions.has(p,""String_Node_Str"")) {
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
 else {
          switchInventory(TraderStatus.MANAGE_SELL);
          getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
          getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(4));
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        this.saveManagedAmouts();
        this.switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL,p).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(p,leftAmount)) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                this.addAmountToInventory(p,leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              if (permissions.has(p,""String_Node_Str"")) {
                switchInventory(getSelectedItem());
                setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
              }
 else               p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY,p).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus(),p).hasSelectedItem()) {
            if (!permissions.has(p,""String_Node_Str"")) {
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
              selectItem(null);
              event.setCancelled(true);
              return;
            }
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",getSelectedMarketItem().getItemOwner()));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            selectItem(stockItem);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
          stockItem.setSlot(clickedSlot);
          p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",((MarketItem)stockItem).getItemOwner()));
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus(),p).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",getSelectedMarketItem().getItemOwner()));
          }
 else           if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            event.setCancelled(true);
            selectItem(null);
            p.sendMessage(locale.getLocaleString(""String_Node_Str""));
            return;
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem())           p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool(),p).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            getInventory().setItem(clickedSlot,clonedStack);
            event.setCancelled(false);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            int addAmount=event.getCursor().getAmount();
            if (event.getCursor().getTypeId() == 0)             addAmount=1;
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else {
          if (event.getCurrentItem().getTypeId() == 0) {
            return;
          }
          int removeAmount=event.getCursor().getAmount();
          if (event.getCursor().getTypeId() == 0)           removeAmount=1;
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0) {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.setCurrentItem(new ItemStack(Material.AIR,0));
          }
 else {
            p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
            event.getCurrentItem().setAmount(oldAmount - removeAmount);
          }
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      if (event.isShiftClick())       event.setCancelled(true);
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        MarketItem marketItem=toMarketItem(itemToAdd.clone());
        marketItem.setAsPatternItem(false);
        marketItem.setPetternListening(false);
        marketItem.setItemOwner(p.getName());
        marketItem.setSlot(firstEmpty);
        LimitSystem limitSystem=marketItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,marketItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,marketItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getLocaleString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        p.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",itemToAdd.getAmount() + ""String_Node_Str"").replace((itemToAdd.getAmount() != 1 ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str""));
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getLocaleString(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}"
51653,"@Override public boolean sellTransaction(Player p,double price,ItemStack item){
  return getTraderConfig().transaction(p.getName(),getSelectedMarketItem().getItemOwner(),price * ((int)item.getAmount() / getSelectedItem().getAmount()));
}","@Override public boolean sellTransaction(Player p,double price,ItemStack item){
  return getTraderConfig().transaction(p.getName(),getSelectedMarketItem().getItemOwner(),true,price * ((int)item.getAmount() / getSelectedItem().getAmount()));
}"
51654,"public StockItem getItem(ItemStack itemStack,TraderStatus status,boolean dura,boolean amount){
  boolean equal=false;
  if (status.equals(TraderStatus.MANAGE_BUY) || status.equals(TraderStatus.BUY)) {
    for (    StockItem item : buyStock) {
      equal=false;
      if (itemStack.getType().equals(item.getItemStack().getType()) && itemStack.getData().equals(item.getItemStack().getData())) {
        equal=true;
        if (dura)         equal=itemStack.getDurability() >= item.getItemStack().getDurability();
        if (amount && equal)         equal=itemStack.getAmount() >= item.getItemStack().getAmount();
        if (equal)         return item;
      }
    }
  }
  if (status.equals(TraderStatus.MANAGE_SELL) || status.equals(TraderStatus.SELL)) {
    for (    StockItem item : sellStock) {
      equal=false;
      if (itemStack.getType().equals(item.getItemStack().getType()) && itemStack.getData().equals(item.getItemStack().getData())) {
        equal=true;
        if (dura)         equal=itemStack.getDurability() >= item.getItemStack().getDurability();
        if (amount && equal)         equal=itemStack.getAmount() >= item.getItemStack().getAmount();
        if (equal)         return item;
      }
    }
  }
  return null;
}","public StockItem getItem(ItemStack itemStack,TraderStatus status,boolean dura,boolean amount){
  boolean equal=false;
  if (status.equals(TraderStatus.MANAGE_BUY) || status.equals(TraderStatus.BUY)) {
    for (    StockItem item : buyStock) {
      equal=false;
      if (itemStack.getType().equals(item.getItemStack().getType())) {
        equal=true;
        if (dura)         equal=itemStack.getDurability() <= item.getItemStack().getDurability();
 else         equal=itemStack.getData().equals(item.getItemStack().getData());
        if (amount && equal)         equal=itemStack.getAmount() >= item.getItemStack().getAmount();
        if (equal)         return item;
      }
    }
  }
  if (status.equals(TraderStatus.MANAGE_SELL) || status.equals(TraderStatus.SELL)) {
    for (    StockItem item : sellStock) {
      equal=false;
      if (itemStack.getType().equals(item.getItemStack().getType()) && itemStack.getData().equals(item.getItemStack().getData())) {
        equal=true;
        if (dura)         equal=itemStack.getDurability() >= item.getItemStack().getDurability();
        if (amount && equal)         equal=itemStack.getAmount() >= item.getItemStack().getAmount();
        if (equal)         return item;
      }
    }
  }
  return null;
}"
51655,"public boolean buyTransaction(Player pBuying,double price){
  return transaction(owner,pBuying.getName(),price);
}","public boolean buyTransaction(Player pBuying,double price){
  return transaction(owner,pBuying.getName(),false,price);
}"
51656,"public boolean sellTransaction(Player pSelling,double price){
  return transaction(pSelling.getName(),owner,price);
}","public boolean sellTransaction(Player pSelling,double price){
  return transaction(pSelling.getName(),owner,true,price);
}"
51657,"public boolean transaction(String pSelling,String pBuying,final double price){
  if (w.withdraw(pBuying,price,false)) {
    w.deposit(pSelling,price,true);
    return true;
  }
  return false;
}","public boolean transaction(String pSelling,String pBuying,boolean isOwner,final double price){
  if (w.withdraw(pBuying,price,isOwner)) {
    w.deposit(pSelling,price,!isOwner);
    return true;
  }
  return false;
}"
51658,"public Inventory inventoryView(int size,String name){
  Inventory view=Bukkit.createInventory(this,size,name);
  for (  StockItem item : sellStock) {
    ItemStack chk=new ItemStack(item.getItemStack().getType(),item.getItemStack().getAmount(),item.getItemStack().getDurability());
    chk.addEnchantments(item.getItemStack().getEnchantments());
    if (item.getSlot() < 0)     item.setSlot(view.firstEmpty());
    view.setItem(item.getSlot(),chk);
  }
  if (!buyStock.isEmpty())   view.setItem(view.getSize() - 1,config.getItemManagement(1));
  return view;
}","public Inventory inventoryView(int size,String name){
  Inventory view=Bukkit.createInventory(this,size,name);
  for (  StockItem item : sellStock) {
    ItemStack chk=new ItemStack(item.getItemStack().getType(),item.getItemStack().getAmount(),item.getItemStack().getDurability());
    chk.addEnchantments(item.getItemStack().getEnchantments());
    if (item.getSlot() < 0 || getItem(item.getSlot(),TraderStatus.SELL) != null)     item.setSlot(view.firstEmpty());
    view.setItem(item.getSlot(),chk);
  }
  if (!buyStock.isEmpty())   view.setItem(view.getSize() - 1,config.getItemManagement(1));
  return view;
}"
51659,"@Override public Inventory getInventory(){
  Inventory inv=Bukkit.createInventory(this,size,""String_Node_Str"");
  for (  StockItem item : sellStock)   inv.addItem(item.getItemStack());
  return inv;
}","@Override public Inventory getInventory(){
  Inventory inv=Bukkit.createInventory(this,size,""String_Node_Str"");
  for (  StockItem item : sellStock) {
    if (item.getSlot() < 0 || getItem(item.getSlot(),TraderStatus.SELL) != null)     item.setSlot(inv.firstEmpty());
    inv.setItem(item.getSlot(),item.getItemStack());
  }
  return inv;
}"
51660,"public StockItem(String data){
  limit=new LimitSystem(this);
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,(short)0,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          price=Double.parseDouble(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add((Integer.parseInt(amout) == 0 ? 1 : Integer.parseInt(amout)));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemGlobalLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemPlayerLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
        }
      }
    }
  }
}","public StockItem(String data){
  limit=new LimitSystem(this);
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,(short)0,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          price=Double.parseDouble(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add((Integer.parseInt(amout) == 0 ? 1 : Integer.parseInt(amout)));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemGlobalLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(3).split(""String_Node_Str"");
          limit.setItemPlayerLimit(Integer.parseInt(limitData[0]),Integer.parseInt(limitData[1]),Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
      }
 else {
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
          System.out.print(stackPrice);
        }
      }
    }
  }
}"
51661,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? config.getItemManagement(5) : config.getItemManagement(3)));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(2))) {
        this.setTraderStatus(TraderStatus.MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(6));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(5))) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(3))) {
        setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        switchInventory(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(0));
        getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(3));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(5));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        this.switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(p,leftAmount)) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                this.addAmountToInventory(p,leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus()).hasSelectedItem()) {
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
          stockItem.setSlot(clickedSlot);
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem())           p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            clonedStack.setAmount(1);
            getInventory().setItem(clickedSlot,clonedStack);
          }
 else {
            int addAmount=event.getCursor().getAmount();
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
          }
        }
 else {
          int removeAmount=event.getCursor().getAmount();
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0)           event.setCurrentItem(new ItemStack(Material.AIR,0));
 else           event.getCurrentItem().setAmount(oldAmount - removeAmount);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        StockItem stockItem=toStockItem(itemToAdd.clone());
        stockItem.setSlot(firstEmpty);
        LimitSystem limitSystem=stockItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,stockItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,stockItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(6))) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(2));
        getInventory().setItem(getInventory().getSize() - 3,(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? config.getItemManagement(5) : config.getItemManagement(3)));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(2))) {
        this.setTraderStatus(TraderStatus.MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,config.getItemManagement(6));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(5))) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(3))) {
        setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        switchInventory(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(0));
        getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(3));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        getInventory().setItem(getInventory().getSize() - 3,config.getItemManagement(5));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        this.saveManagedAmouts();
        this.switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,config.getItemManagement(1));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL).hasSelectedItem()) {
            if (event.isLeftClick()) {
              int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
              if (inventoryHasPlaceAmount(p,leftAmount)) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                this.addAmountToInventory(p,leftAmount);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                selectItem(null);
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
              }
            }
 else {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT);
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus()).hasSelectedItem()) {
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
          stockItem.setSlot(clickedSlot);
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem())           p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
        event.setCancelled(true);
        if (event.isLeftClick()) {
          if (event.getCurrentItem().getType().equals(Material.AIR)) {
            ItemStack clonedStack=getSelectedItem().getItemStack().clone();
            getInventory().setItem(clickedSlot,clonedStack);
            event.setCancelled(false);
          }
 else {
            int addAmount=event.getCursor().getAmount();
            int oldAmount=event.getCurrentItem().getAmount();
            if (event.getCurrentItem().getMaxStackSize() < oldAmount + addAmount)             event.getCurrentItem().setAmount(event.getCurrentItem().getMaxStackSize());
 else             event.getCurrentItem().setAmount(oldAmount + addAmount);
          }
        }
 else {
          if (event.getCurrentItem().getTypeId() == 0) {
            return;
          }
          int removeAmount=event.getCursor().getAmount();
          int oldAmount=event.getCurrentItem().getAmount();
          if (oldAmount - removeAmount <= 0)           event.setCurrentItem(new ItemStack(Material.AIR,0));
 else           event.getCurrentItem().setAmount(oldAmount - removeAmount);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL) || equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      return;
    }
    event.setCancelled(true);
    if (hasSelectedItem()) {
      if (event.getCursor().getTypeId() != 0) {
        event.setCursor(null);
        selectItem(null);
        switchInventory(getBasicManageModeByWool());
      }
    }
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        StockItem stockItem=toStockItem(itemToAdd.clone());
        stockItem.setSlot(firstEmpty);
        LimitSystem limitSystem=stockItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,stockItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,stockItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      if (equalsTraderStatus(TraderStatus.MANAGE_BUY))       return;
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}"
51662,"@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            updateBuyLimits(p.getName(),scale);
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          updateBuyLimits(p.getName(),scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            switchInventory(getSelectedItem());
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            updateBuyLimits(p.getName(),scale);
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          updateBuyLimits(p.getName(),scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51663,"@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            updateBuyLimits(p.getName(),scale);
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          updateBuyLimits(p.getName(),scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),config.getItemManagement(7))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(0))) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),config.getItemManagement(1))) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            switchInventory(getSelectedItem());
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            updateBuyLimits(p.getName(),scale);
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          updateBuyLimits(p.getName(),scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51664,"public final void switchInventory(StockItem item){
  inventory.clear();
  InventoryTrait.setInventoryWith(inventory,item);
  selectedItem=item;
}","public final void switchInventory(StockItem item){
  inventory.clear();
  if (TraderStatus.hasManageMode(traderStatus))   InventoryTrait.setManagerInventoryWith(inventory,item);
 else   InventoryTrait.setInventoryWith(inventory,item);
  selectedItem=item;
}"
51665,"@Override public void onLoad(){
  info(""String_Node_Str"" + getDescription().getVersion());
  saveDefaultConfig();
  stdConfig=getConfig();
  itemConfig=new ItemsConfig(stdConfig);
  instance=this;
  info(""String_Node_Str"" + getDescription().getVersion());
}","@Override public void onLoad(){
  saveDefaultConfig();
  stdConfig=getConfig();
  itemConfig=new ItemsConfig(stdConfig);
  instance=this;
}"
51666,"@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
  if (economyNpc != null) {
    if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
      if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
        if (economyNpc.getNpcId() == npc.getId()) {
          playerInteraction.remove(playerName);
          player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
          return;
        }
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
          playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
        }
        if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
          playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
        }
        playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
        player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
        return;
      }
      return;
    }
    if (economyNpc.getNpcId() == npc.getId()) {
      player.openInventory(playerInteraction.get(playerName).getInventory());
      return;
    }
    if (!TraderStatus.hasManageMode(playerInteraction.get(playerName).getTraderStatus()))     return;
    player.sendMessage(ChatColor.AQUA + CitizensAPI.getNPCRegistry().getById(economyNpc.getNpcId()).getFullName() + ChatColor.RED+ ""String_Node_Str"");
    playerInteraction.get(playerName).setTraderStatus(TraderStatus.SELL);
    player.openInventory(playerInteraction.get(playerName).getInventory());
    return;
  }
  if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
    if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
      if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
        playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
      }
      if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
        playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
      }
      playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
      player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
      return;
    }
    return;
  }
  player.openInventory(playerInteraction.get(playerName).getInventory());
}","@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
  if (economyNpc != null) {
    if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
      if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
        if (economyNpc.getNpcId() == npc.getId()) {
          playerInteraction.remove(playerName);
          player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
          return;
        }
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
          playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
        }
        if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
          playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
        }
        playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
        player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
        return;
      }
      return;
    }
    if (economyNpc.getNpcId() == npc.getId()) {
      ((Trader)playerInteraction.get(playerName)).switchInventory(TraderStatus.MANAGE_SELL);
      player.openInventory(playerInteraction.get(playerName).getInventory());
      return;
    }
    if (!TraderStatus.hasManageMode(playerInteraction.get(playerName).getTraderStatus()))     return;
    player.sendMessage(ChatColor.AQUA + CitizensAPI.getNPCRegistry().getById(economyNpc.getNpcId()).getFullName() + ChatColor.RED+ ""String_Node_Str"");
    if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
      playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
    }
    if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
      playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
    }
    player.openInventory(playerInteraction.get(playerName).getInventory());
    return;
  }
  if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
    if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
      if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
        playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
      }
      if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
        playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
      }
      playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
      player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
      return;
    }
    return;
  }
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
    playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
  }
  if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
    playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
  }
  if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK)) {
    playerInteraction.put(playerName,new PlayerBanker(npc,characterTrait.getBankTrait()));
  }
  player.openInventory(playerInteraction.get(playerName).getInventory());
}"
51667,"@Override public void load(DataKey data) throws NPCLoadException {
  if (data.keyExists(""String_Node_Str"")) {
    type=TraderType.getTypeByName(data.getString(""String_Node_Str""));
  }
  if (type.equals(TraderType.PLAYER_BANK)) {
    this.bankTrait.load(data);
  }
 else {
    this.traderTrait.load(data);
    this.inventoryTrait.load(data);
  }
}","@Override public void load(DataKey data) throws NPCLoadException {
  if (data.keyExists(""String_Node_Str"")) {
    type=TraderType.getTypeByName(data.getString(""String_Node_Str""));
    traderTrait.setTraderType(type);
  }
  if (type.equals(TraderType.PLAYER_BANK)) {
    this.bankTrait.load(data);
  }
 else {
    this.traderTrait.load(data);
    this.inventoryTrait.load(data);
  }
}"
51668,"public boolean setType(Player player,Trader trader,String typeString){
  if (!permsManager.has(player,""String_Node_Str"" + typeString)) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return true;
  }
  TraderType type=TraderType.getTypeByName(typeString);
  if (type == null) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",trader.getTraderConfig().getTraderType().toString()));
  }
 else {
    trader.getTraderConfig().setTraderType(type);
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",typeString));
  }
  return true;
}","public boolean setType(Player player,Trader trader,String typeString){
  if (!permsManager.has(player,""String_Node_Str"" + typeString)) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return true;
  }
  TraderType type=TraderType.getTypeByName(typeString);
  if (type == null) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",trader.getTraderConfig().getTraderType().toString()));
  }
 else {
    trader.getTraderConfig().setTraderType(type);
    trader.getNpc().getTrait(TraderCharacterTrait.class).setTraderType(type);
    player.sendMessage(locale.getLocaleString(""String_Node_Str"").replace(""String_Node_Str"",typeString));
  }
  return true;
}"
51669,"public boolean createTrader(Player player,String[] args){
  String traderName=""String_Node_Str"";
  EntityType entityType=EntityType.PLAYER;
  TraderType traderType=getDefaultTraderType(player);
  WalletType walletType=getDefaultWalletType(player);
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return true;
      }
      traderType=TraderType.getTypeByName(arg.substring(2));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return true;
      }
      walletType=WalletType.getTypeByName(arg.substring(2));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return true;
      }
      entityType=EntityType.fromName(arg.substring(2));
    }
 else {
      traderName+=arg + ""String_Node_Str"";
    }
  }
  if (traderName.isEmpty())   traderName=""String_Node_Str"";
 else   traderName=traderName.substring(7,traderName.length() - 1);
  if (walletType == null || traderType == null || entityType == null) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return true;
  }
  NPC npc=CitizensAPI.getNPCRegistry().createNPC(entityType,traderName);
  npc.addTrait(TraderCharacterTrait.class);
  npc.addTrait(MobType.class);
  npc.getTrait(MobType.class).setType(entityType);
  npc.spawn(player.getLocation());
  TraderTrait settings=npc.getTrait(TraderCharacterTrait.class).getTraderTrait();
  settings.setTraderType(traderType);
  settings.setWalletType(walletType);
  settings.setOwner(player.getName());
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return true;
}","public boolean createTrader(Player player,String[] args){
  String traderName=""String_Node_Str"";
  EntityType entityType=EntityType.PLAYER;
  TraderType traderType=getDefaultTraderType(player);
  WalletType walletType=getDefaultWalletType(player);
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return true;
      }
      traderType=TraderType.getTypeByName(arg.substring(2));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return true;
      }
      walletType=WalletType.getTypeByName(arg.substring(2));
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"" + arg.substring(2))) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return true;
      }
      entityType=EntityType.fromName(arg.substring(2));
    }
 else {
      traderName+=arg + ""String_Node_Str"";
    }
  }
  if (traderName.isEmpty())   traderName=""String_Node_Str"";
 else   traderName=traderName.substring(7,traderName.length() - 1);
  if (walletType == null || traderType == null || entityType == null) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return true;
  }
  NPC npc=CitizensAPI.getNPCRegistry().createNPC(entityType,traderName);
  npc.addTrait(TraderCharacterTrait.class);
  npc.addTrait(MobType.class);
  npc.getTrait(MobType.class).setType(entityType);
  npc.spawn(player.getLocation());
  TraderTrait settings=npc.getTrait(TraderCharacterTrait.class).getTraderTrait();
  npc.getTrait(TraderCharacterTrait.class).setTraderType(traderType);
  settings.setWalletType(walletType);
  settings.setOwner(player.getName());
  player.sendMessage(locale.getLocaleString(""String_Node_Str""));
  return true;
}"
51670,"@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
  if (economyNpc != null) {
    if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
      if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK))       return;
      if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
        if (economyNpc.getNpcId() == npc.getId()) {
          playerInteraction.remove(playerName);
          player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
          return;
        }
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
          playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
        }
        if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
          playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
        }
        playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
        player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
        return;
      }
      return;
    }
    if (economyNpc.getNpcId() == npc.getId()) {
      ((Trader)playerInteraction.get(playerName)).switchInventory(TraderStatus.MANAGE_SELL);
      player.openInventory(playerInteraction.get(playerName).getInventory());
      return;
    }
    if (!TraderStatus.hasManageMode(playerInteraction.get(playerName).getTraderStatus()))     return;
    player.sendMessage(ChatColor.AQUA + CitizensAPI.getNPCRegistry().getById(economyNpc.getNpcId()).getFullName() + ChatColor.RED+ ""String_Node_Str"");
    if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
      playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
    }
    if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
      playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
    }
    if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK)) {
      playerInteraction.put(playerName,new PlayerBanker(npc,characterTrait.getBankTrait()));
      Banker banker=(Banker)playerInteraction.get(playerName);
      banker.switchInventory(playerName,TraderStatus.BANK);
    }
    player.openInventory(playerInteraction.get(playerName).getInventory());
    return;
  }
  if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
    if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK))     return;
    if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
      if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
        playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
      }
      if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
        playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
      }
      playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
      player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
      return;
    }
    return;
  }
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
    playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
  }
  if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
    playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
  }
  if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK)) {
    playerInteraction.put(playerName,new PlayerBanker(npc,characterTrait.getBankTrait()));
    Banker banker=(Banker)playerInteraction.get(playerName);
    banker.switchInventory(playerName,TraderStatus.BANK);
  }
  player.openInventory(playerInteraction.get(playerName).getInventory());
}","@EventHandler public void onNPCRightCLick(NPCRightClickEvent event){
  if (!isEconomyNpc(event.getNPC()))   return;
  Player player=event.getClicker();
  final String playerName=player.getName();
  NPC npc=event.getNPC();
  EconomyNpc economyNpc=playerInteraction.get(playerName);
  TraderCharacterTrait characterTrait=npc.getTrait(TraderCharacterTrait.class);
  if (economyNpc != null) {
    if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
      if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK))       return;
      if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
        if (economyNpc.getNpcId() == npc.getId()) {
          playerInteraction.remove(playerName);
          player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
          return;
        }
        if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
          player.sendMessage(locale.getLocaleString(""String_Node_Str""));
          return;
        }
        if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
          playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
        }
        if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
          playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
        }
        playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
        player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
        return;
      }
      return;
    }
    if (economyNpc.getNpcId() == npc.getId()) {
      if (!TraderStatus.hasManageMode(playerInteraction.get(playerName).getTraderStatus()))       return;
      ((Trader)playerInteraction.get(playerName)).switchInventory(TraderStatus.MANAGE_SELL);
      player.openInventory(playerInteraction.get(playerName).getInventory());
      return;
    }
    player.sendMessage(ChatColor.AQUA + CitizensAPI.getNPCRegistry().getById(economyNpc.getNpcId()).getFullName() + ChatColor.RED+ ""String_Node_Str"");
    if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
      playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
    }
    if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
      playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
    }
    if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK)) {
      playerInteraction.put(playerName,new PlayerBanker(npc,characterTrait.getBankTrait()));
      Banker banker=(Banker)playerInteraction.get(playerName);
      banker.switchInventory(playerName,TraderStatus.BANK);
    }
    player.openInventory(playerInteraction.get(playerName).getInventory());
    return;
  }
  if (player.getItemInHand().getTypeId() == config.getMMToggleItem().getTypeId()) {
    if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK))     return;
    if ((permManager.has(player,""String_Node_Str"") && characterTrait.getTraderTrait().getOwner().equals(player.getName())) || permManager.has(player,""String_Node_Str"") || player.isOp()) {
      if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getLocaleString(""String_Node_Str""));
        return;
      }
      if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
        playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
      }
      if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
        playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
      }
      playerInteraction.get(playerName).setTraderStatus(TraderStatus.MANAGE);
      player.sendMessage(ChatColor.AQUA + npc.getFullName() + ChatColor.RED+ ""String_Node_Str"");
      return;
    }
    return;
  }
  if (!permManager.has(player,""String_Node_Str"" + characterTrait.getTraderType().toString())) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (player.getGameMode().equals(GameMode.CREATIVE) && !permManager.has(player,""String_Node_Str"")) {
    player.sendMessage(locale.getLocaleString(""String_Node_Str""));
    return;
  }
  if (characterTrait.getTraderType().equals(TraderType.PLAYER_TRADER)) {
    playerInteraction.put(playerName,new PlayerTrader(npc,characterTrait.getTraderTrait()));
  }
  if (characterTrait.getTraderType().equals(TraderType.SERVER_TRADER)) {
    playerInteraction.put(playerName,new ServerTrader(npc,characterTrait.getTraderTrait()));
  }
  if (characterTrait.getTraderType().equals(TraderType.PLAYER_BANK)) {
    playerInteraction.put(playerName,new PlayerBanker(npc,characterTrait.getBankTrait()));
    Banker banker=(Banker)playerInteraction.get(playerName);
    banker.switchInventory(playerName,TraderStatus.BANK);
  }
  player.openInventory(playerInteraction.get(playerName).getInventory());
}"
51671,"@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (!cmd.getName().equalsIgnoreCase(""String_Node_Str""))   return false;
  if (sender instanceof Player) {
    Player player=(Player)sender;
    Trader trader=traderManager.getOngoingTrades(player.getName());
    if (!permsManager.has(player,""String_Node_Str"")) {
      player.sendMessage(locale.getMessage(""String_Node_Str""));
      return true;
    }
    if (args.length < 1) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + plugin.getDescription().getVersion()+ ChatColor.RED+ ""String_Node_Str"");
      return false;
    }
    if (args[0].equals(""String_Node_Str"")) {
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      if (permsManager.has(player,""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
        return getItemList(player,trader,args,TraderStatus.SELL);
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      if (permsManager.has(player,""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
        return getItemList(player,trader,args,TraderStatus.BUY);
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
      }
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return setWallet(player,trader,args[1],(args.length > 2 ? args[2] : ""String_Node_Str""));
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return setType(player,trader,args[1]);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return createTrader(player,args);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!trader.equalsWalletType(WalletType.NPC_WALLET)) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      return balance(player,trader);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!trader.equalsWalletType(WalletType.NPC_WALLET)) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return withdraw(player,trader,args[1]);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!trader.equalsWalletType(WalletType.NPC_WALLET)) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return deposit(player,trader,args[1]);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        return getOwner(player,trader);
      }
      return setOwner(player,trader,args[1]);
    }
  }
 else {
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (!cmd.getName().equalsIgnoreCase(""String_Node_Str""))   return false;
  if (sender instanceof Player) {
    Player player=(Player)sender;
    Trader trader=traderManager.getOngoingTrades(player.getName());
    if (!permsManager.has(player,""String_Node_Str"")) {
      player.sendMessage(locale.getMessage(""String_Node_Str""));
      return true;
    }
    if (args.length < 1) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + plugin.getDescription().getVersion()+ ChatColor.RED+ ""String_Node_Str"");
      return false;
    }
    if (args[0].equals(""String_Node_Str"")) {
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      if (permsManager.has(player,""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
        return getItemList(player,trader,args,TraderStatus.SELL);
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      if (permsManager.has(player,""String_Node_Str"") && args[1].equals(""String_Node_Str"")) {
        return getItemList(player,trader,args,TraderStatus.BUY);
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
      }
 else       if (permsManager.has(player,""String_Node_Str"")) {
      }
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 1) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return setWallet(player,trader,(args.length > 1 ? args[1] : ""String_Node_Str""),(args.length > 2 ? args[2] : ""String_Node_Str""));
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 1) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return setType(player,trader,(args.length > 1 ? args[1] : ""String_Node_Str""));
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return createTrader(player,args);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return false;
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!trader.equalsWalletType(WalletType.NPC_WALLET)) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      return balance(player,trader);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!trader.equalsWalletType(WalletType.NPC_WALLET)) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return withdraw(player,trader,args[1]);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (!trader.equalsWalletType(WalletType.NPC_WALLET)) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        player.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        return true;
      }
      return deposit(player,trader,args[1]);
    }
 else     if (args[0].equals(""String_Node_Str"")) {
      if (!permsManager.has(player,""String_Node_Str"")) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (trader == null) {
        player.sendMessage(locale.getMessage(""String_Node_Str""));
        return true;
      }
      if (args.length < 2) {
        return getOwner(player,trader);
      }
      return setOwner(player,trader,args[1]);
    }
  }
 else {
  }
  return false;
}"
51672,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),(byte)0)) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? 11 : 12)));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)15)) {
        this.setTraderStatus(TraderStatus.MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)11)) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (isWool(event.getCurrentItem(),(byte)12)) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 1,new ItemStack(Material.WOOL,1,(short)0,(byte)3));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)12));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,new ItemStack(Material.WOOL,1,(short)0,(byte)5));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)11));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)2)) {
        this.setTraderStatus(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,new ItemStack(Material.WOOL,1,(short)0,(byte)5));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL).hasSelectedItem()) {
            int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,leftAmount)) {
              if (isBuyModeByWool())               getTraderStock().removeItem(false,clickedSlot);
              if (isSellModeByWool())               getTraderStock().removeItem(true,clickedSlot);
              this.addAmountToInventory(p,leftAmount);
              getInventory().setItem(clickedSlot,new ItemStack(0));
              selectItem(null);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus()).hasSelectedItem()) {
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
          stockItem.setSlot(clickedSlot);
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem())           p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
      return;
    }
    event.setCancelled(true);
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        StockItem stockItem=toStockItem(itemToAdd.clone());
        stockItem.setSlot(firstEmpty);
        LimitSystem limitSystem=stockItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,stockItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,stockItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int clickedSlot=event.getSlot();
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(clickedSlot,3)) {
      if (isWool(event.getCurrentItem(),(byte)0)) {
        if (isSellModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_SELL);
        if (isBuyModeByWool())         this.setTraderStatus(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)(getBasicManageModeByWool().equals(TraderStatus.MANAGE_SELL) ? 11 : 12)));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)15)) {
        this.setTraderStatus(TraderStatus.MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)11)) {
        p.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else       if (isWool(event.getCurrentItem(),(byte)12)) {
        setTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.MANAGE_BUY);
        getInventory().setItem(getInventory().getSize() - 1,new ItemStack(Material.WOOL,1,(short)0,(byte)3));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)12));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,new ItemStack(Material.WOOL,1,(short)0,(byte)5));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)11));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (isWool(event.getCurrentItem(),(byte)2)) {
        this.setTraderStatus(TraderStatus.MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 1,new ItemStack(Material.WOOL,1,(short)0,(byte)5));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
      }
      event.setCancelled(true);
      return;
    }
 else {
      if (event.isShiftClick()) {
        event.setCancelled(true);
        if (isSellModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_SELL).hasSelectedItem()) {
            int leftAmount=getSelectedItem().getLimitSystem().getGlobalLimit() - getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,leftAmount)) {
              if (isBuyModeByWool())               getTraderStock().removeItem(false,clickedSlot);
              if (isSellModeByWool())               getTraderStock().removeItem(true,clickedSlot);
              this.addAmountToInventory(p,leftAmount);
              getInventory().setItem(clickedSlot,new ItemStack(0));
              selectItem(null);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + leftAmount));
            }
          }
        }
 else         if (isBuyModeByWool()) {
          if (selectItem(clickedSlot,TraderStatus.MANAGE_BUY).hasSelectedItem()) {
            int stockedAmount=getSelectedItem().getLimitSystem().getGlobalAmount();
            if (inventoryHasPlaceAmount(p,stockedAmount)) {
              if (event.isLeftClick()) {
                if (isBuyModeByWool())                 getTraderStock().removeItem(false,clickedSlot);
                if (isSellModeByWool())                 getTraderStock().removeItem(true,clickedSlot);
                getInventory().setItem(clickedSlot,new ItemStack(0));
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
              }
 else {
                p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + stockedAmount));
                getSelectedItem().getLimitSystem().setGlobalAmount(0);
              }
              this.addAmountToInventory(p,stockedAmount);
              selectItem(null);
            }
          }
        }
        return;
      }
      if (equalsTraderStatus(getBasicManageModeByWool())) {
        if (event.isRightClick()) {
          if (selectItem(event.getSlot(),getTraderStatus()).hasSelectedItem()) {
            if (getSelectedItem().hasStackPrice()) {
              getSelectedItem().setStackPrice(false);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
 else {
              getSelectedItem().setStackPrice(true);
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            }
          }
          selectItem(null);
          event.setCancelled(true);
          return;
        }
        if (hasSelectedItem()) {
          StockItem stockItem=getSelectedItem();
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
          stockItem.setSlot(clickedSlot);
        }
 else {
          if (selectItem(clickedSlot,getTraderStatus()).hasSelectedItem()) {
            getSelectedItem().setSlot(-2);
            p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
        }
        return;
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_PRICE)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem())           p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
        }
 else {
          if (selectItem(event.getSlot(),getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else             getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getRawPrice())));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
        if (event.getCursor().getType().equals(Material.AIR)) {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
          }
        }
 else {
          if (selectItem(clickedSlot,getBasicManageModeByWool()).hasSelectedItem()) {
            if (event.isRightClick())             getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else             getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()));
          }
        }
        selectItem(null);
        event.setCancelled(true);
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_LIMIT_PLAYER)) {
      }
 else       if (equalsTraderStatus(TraderStatus.MANAGE_SELL_AMOUNT)) {
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.MANAGE_PRICE) || equalsTraderStatus(TraderStatus.MANAGE_LIMIT_GLOBAL)) {
      return;
    }
    event.setCancelled(true);
    if (event.isLeftClick() && event.getCurrentItem().getTypeId() != 0) {
      int backUpAmount=event.getCurrentItem().getAmount();
      ItemStack itemToAdd=event.getCurrentItem();
      itemToAdd.setAmount(1);
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        itemToAdd.setAmount(backUpAmount);
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      int firstEmpty=getInventory().firstEmpty();
      if (firstEmpty >= 0 && firstEmpty < getInventory().getSize() - 3) {
        getInventory().setItem(firstEmpty,itemToAdd.clone());
        StockItem stockItem=toStockItem(itemToAdd.clone());
        stockItem.setSlot(firstEmpty);
        LimitSystem limitSystem=stockItem.getLimitSystem();
        limitSystem.setGlobalLimit(0);
        limitSystem.setGlobalTimeout(-2000);
        if (isSellModeByWool())         getTraderStock().addItem(true,stockItem);
        if (isBuyModeByWool())         getTraderStock().addItem(false,stockItem);
        itemToAdd.setAmount(backUpAmount);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
 else     if (event.getCurrentItem().getTypeId() != 0) {
      if (!event.isShiftClick()) {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
        setInventoryClicked(false);
        return;
      }
      ItemStack itemToAdd=event.getCurrentItem();
      this.selectItem(itemToAdd,getBasicManageModeByWool(),false,false);
      if (hasSelectedItem()) {
        event.setCancelled(false);
        LimitSystem limitSystem=getSelectedItem().getLimitSystem();
        limitSystem.setGlobalTimeout(-2000);
        int getItemsLeft=limitSystem.getGlobalLimit() - limitSystem.getGlobalAmount();
        if (getItemsLeft < 0)         getItemsLeft=0;
        limitSystem.setGlobalLimit(getItemsLeft + itemToAdd.getAmount());
        itemToAdd.setAmount(0);
        event.setCurrentItem(itemToAdd);
        limitSystem.setGlobalAmount(0);
        p.sendMessage(locale.getMessage(""String_Node_Str""));
        selectItem(null);
      }
 else {
        p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
    }
  }
  setInventoryClicked(false);
}"
51673,"@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          if (checkLimits(p) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            if (!updateLimitsTem(p.getName(),event.getCurrentItem()))             updateLimits(p.getName());
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        if (checkLimits(p) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          if (!updateLimitsTem(p.getName(),event.getCurrentItem()))           updateLimits(p.getName());
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit()).replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalAmount()));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            updateBuyLimits(p.getName(),scale);
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          updateBuyLimits(p.getName(),scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51674,"@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          if (checkLimits(p) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            if (!updateLimitsTem(p.getName(),event.getCurrentItem()))             updateLimits(p.getName());
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        if (checkLimits(p) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          if (!updateLimitsTem(p.getName(),event.getCurrentItem()))           updateLimits(p.getName());
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  int slot=event.getSlot();
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(slot,1)) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL)) {
      if (selectItem(slot,TraderStatus.SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == slot) {
            if (checkLimits(p) && inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount()).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
              addSelectedToInventory(p,0);
              updateLimits(p.getName());
              log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(),getSelectedItem().getPrice());
            }
 else             p.sendMessage(locale.getMessage(""String_Node_Str""));
          }
 else {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
            setClickedSlot(slot);
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == slot) {
          if (checkLimits(p,slot) && inventoryHasPlace(p,slot) && buyTransaction(p,getSelectedItem().getPrice(slot))) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount(slot)).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
            addSelectedToInventory(p,slot);
            updateLimits(p.getName(),slot);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount(slot),getSelectedItem().getPrice(slot));
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice(slot))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(slot,TraderStatus.BUY).hasSelectedItem()) {
        p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice())));
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == slot && !getInventoryClicked()) {
          int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
          if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
            p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
            updateBuyLimits(p.getName(),scale);
            removeFromInventory(event.getCurrentItem(),event);
            log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
          }
 else           p.sendMessage(locale.getMessage(""String_Node_Str""));
        }
 else {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.SELL_AMOUNT)) {
      p.sendMessage(locale.getMessage(""String_Node_Str""));
      event.setCancelled(true);
      return;
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == slot && !getInventoryClicked()) {
        int scale=event.getCurrentItem().getAmount() / getSelectedItem().getAmount();
        if (checkBuyLimits(p,scale) && sellTransaction(p,getSelectedItem().getPrice(),event.getCurrentItem())) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + getSelectedItem().getAmount() * scale).replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * scale)));
          updateBuyLimits(p.getName(),scale);
          removeFromInventory(event.getCurrentItem(),event);
          log(""String_Node_Str"",p.getName(),getSelectedItem().getItemStack().getTypeId(),getSelectedItem().getItemStack().getData().getData(),getSelectedItem().getAmount() * scale,getSelectedItem().getPrice() * scale);
        }
 else         p.sendMessage(locale.getMessage(""String_Node_Str""));
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",f.format(getSelectedItem().getPrice() * ((int)event.getCurrentItem().getAmount() / getSelectedItem().getAmount()))));
          p.sendMessage(locale.getMessage(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
          setClickedSlot(slot);
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51675,"public boolean reachedLimitWith(int a){
  return amount + a >= limit;
}","public boolean reachedLimitWith(int a){
  if (limit <= 0)   return false;
  return amount + a >= limit;
}"
51676,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(event.getSlot(),3)) {
      if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 2) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
      }
 else       if (isWool(event.getCurrentItem(),(byte)15)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 3) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)13));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)12));
      }
 else       if (isWool(event.getCurrentItem(),(byte)12)) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_PLAYER);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)11));
      }
 else       if (isWool(event.getCurrentItem(),(byte)11)) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)12));
      }
 else       if (isWool(event.getCurrentItem(),(byte)13)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_BUY);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)14)) {
        saveManagedAmouts();
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
      event.setCancelled(true);
    }
 else {
      if (event.isShiftClick()) {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
          }
 else {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changeGlobalTimeout(-calculateTimeout(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changeGlobalTimeout(calculateTimeout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
              }
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changeGlobalTimeout(-calculateTimeout(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changeGlobalTimeout(calculateTimeout(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
            }
          }
          event.setCancelled(true);
          return;
        }
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
          }
 else {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changePlayerTimeout(-calculateTimeout(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changePlayerTimeout(calculateTimeout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
              }
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changePlayerTimeout(-calculateTimeout(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changePlayerTimeout(calculateTimeout(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
            }
          }
          event.setCancelled(true);
          return;
        }
        if (event.isLeftClick()) {
          if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT);
            }
          }
        }
 else {
        }
        event.setCancelled(true);
      }
 else {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
          if (event.isRightClick()) {
            if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
                if (getSelectedItem().hasStackPrice()) {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
 else {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(true,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT)) {
          if (!equalsSelected(event.getCursor(),true,false) && !event.getCursor().getType().equals(Material.AIR)) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
          if (event.isRightClick()) {
            if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (getSelectedItem().hasStackPrice()) {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
 else {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(false,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             ;
            getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_PRICE)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else                 getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else               getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
          }
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
            }
          }
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changePlayerLimit(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changePlayerLimit(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changePlayerLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changePlayerLimit(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
            }
          }
          event.setCancelled(true);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL) || equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
      if (getInventoryClicked() && hasSelectedItem()) {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL))         getTraderStock().removeItem(true,getSelectedItem().getSlot());
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY))         getTraderStock().removeItem(false,getSelectedItem().getSlot());
        selectItem(null);
      }
 else {
        selectItem(toStockItem(event.getCurrentItem()));
      }
    }
    event.setCancelled(true);
    setInventoryClicked(false);
  }
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  if (top) {
    setInventoryClicked(true);
    if (isManagementSlot(event.getSlot(),3)) {
      if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 2) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
      }
 else       if (isWool(event.getCurrentItem(),(byte)15)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 3) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)13));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)12));
      }
 else       if (isWool(event.getCurrentItem(),(byte)12)) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_PLAYER);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)11));
      }
 else       if (isWool(event.getCurrentItem(),(byte)11)) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)12));
      }
 else       if (isWool(event.getCurrentItem(),(byte)13)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_BUY);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)14)) {
        saveManagedAmouts();
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
      event.setCancelled(true);
    }
 else {
      if (event.isShiftClick()) {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
          }
 else {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changeGlobalTimeout(-calculateTimeout(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changeGlobalTimeout(calculateTimeout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
              }
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changeGlobalTimeout(-calculateTimeout(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changeGlobalTimeout(calculateTimeout(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalTimeout());
            }
          }
          event.setCancelled(true);
          return;
        }
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
          }
 else {
            if (isBuyModeByWool()) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changePlayerTimeout(-calculateTimeout(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changePlayerTimeout(calculateTimeout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
              }
            }
 else             if (isSellModeByWool())             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changePlayerTimeout(-calculateTimeout(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changePlayerTimeout(calculateTimeout(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerTimeout());
            }
          }
          event.setCancelled(true);
          return;
        }
        if (event.isLeftClick()) {
          if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT);
            }
          }
        }
 else {
        }
        event.setCancelled(true);
      }
 else {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
          if (event.isRightClick()) {
            if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
                if (getSelectedItem().hasStackPrice()) {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
 else {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(true,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT)) {
          if (!equalsSelected(event.getCursor(),true,false) && !event.getCursor().getType().equals(Material.AIR)) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
          if (event.isRightClick()) {
            if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (getSelectedItem().hasStackPrice()) {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
 else {
                  getSelectedItem().setStackPrice(true);
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(false,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_PRICE)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else                 getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else               getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
          }
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_GLOBAL)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changeGlobalLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changeGlobalLimit(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getGlobalLimit());
            }
          }
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT_PLAYER)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().getLimitSystem().changePlayerLimit(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().getLimitSystem().changePlayerLimit(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().getLimitSystem().changePlayerLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().getLimitSystem().changePlayerLimit(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimitSystem().getPlayerLimit());
            }
          }
          event.setCancelled(true);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL) || equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
      if (getInventoryClicked() && hasSelectedItem()) {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL))         getTraderStock().removeItem(true,getSelectedItem().getSlot());
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY))         getTraderStock().removeItem(false,getSelectedItem().getSlot());
        selectItem(null);
      }
 else {
        selectItem(toStockItem(event.getCurrentItem()));
      }
    }
    setInventoryClicked(false);
  }
}"
51677,"public final boolean addSelectedToInventory(Player player,int slot){
  PlayerInventory inventory=player.getInventory();
  int amountToAdd=selectedItem.getAmount(slot);
  for (  ItemStack item : inventory.all(selectedItem.getItemStack().getType()).values()) {
    if (item.getAmount() + amountToAdd <= selectedItem.getItemStack().getMaxStackSize()) {
      item.setAmount(item.getAmount() + amountToAdd);
      return true;
    }
    if (item.getAmount() < 64) {
      amountToAdd=(item.getAmount() + amountToAdd) % 64;
      item.setAmount(64);
    }
    if (amountToAdd <= 0)     return true;
  }
  if (inventory.firstEmpty() < inventory.getSize() && inventory.firstEmpty() >= 0) {
    ItemStack is=selectedItem.getItemStack(slot).clone();
    is.setAmount(amountToAdd);
    inventory.setItem(inventory.firstEmpty(),is);
    return true;
  }
  return false;
}","public final boolean addSelectedToInventory(Player player,int slot){
  PlayerInventory inventory=player.getInventory();
  int amountToAdd=selectedItem.getAmount(slot);
  for (  ItemStack item : inventory.all(selectedItem.getItemStack().getType()).values()) {
    if (item.getDurability() == selectedItem.getItemStack().getDurability()) {
      if (item.getAmount() + amountToAdd <= selectedItem.getItemStack().getMaxStackSize()) {
        item.setAmount(item.getAmount() + amountToAdd);
        return true;
      }
      if (item.getAmount() < 64) {
        amountToAdd=(item.getAmount() + amountToAdd) % 64;
        item.setAmount(64);
      }
      if (amountToAdd <= 0)       return true;
    }
  }
  if (inventory.firstEmpty() < inventory.getSize() && inventory.firstEmpty() >= 0) {
    ItemStack is=selectedItem.getItemStack(slot).clone();
    is.setAmount(amountToAdd);
    inventory.setItem(inventory.firstEmpty(),is);
    return true;
  }
  return false;
}"
51678,"@Override public void onSpawn(){
}","@Override public void onSpawn(){
  if (npc.hasTrait(TraderCharacterTrait.class))   CitizensTrader.getTraderManager().addTraderNpc(npc);
}"
51679,"private void setTraderType(Player p,String type){
  if (type != null && (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str""))) {
    Trader trader=this.traderManager.getOngoingTrades(p.getName());
    if (trader.getTraderConfig().getTraderType().toString().equals(type))     return;
    trader.getTraderConfig().setTraderType(TraderType.getTypeByName(type));
    p.sendMessage(ChatColor.RED + ""String_Node_Str"" + type);
  }
 else {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","private void setTraderType(Player p,String type){
  if (type != null && (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str""))) {
    Trader trader=this.traderManager.getOngoingTrades(p.getName());
    if (trader == null)     return;
    if (trader.getTraderConfig().getTraderType().toString().equals(type))     return;
    trader.getTraderConfig().setTraderType(TraderType.getTypeByName(type));
    p.sendMessage(ChatColor.RED + ""String_Node_Str"" + type);
  }
 else {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}"
51680,"@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (!(event.getWhoClicked() instanceof Player))   return;
  Player p=(Player)event.getWhoClicked();
  if (ongoingTrades.containsKey(p.getName())) {
    if (event.getRawSlot() < 0) {
      event.setCancelled(true);
      return;
    }
    if (TraderStatus.hasManageMode(ongoingTrades.get(p.getName()).getTraderStatus())) {
      if (ongoingTrades.get(p.getName()).equalsTraderStatus(TraderStatus.PLAYER_MANAGE))       ongoingTrades.get(p.getName()).setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
      ongoingTrades.get(p.getName()).managerMode(event);
      System.out.print(event.isCancelled());
    }
 else {
      if (config.getMode().equals(""String_Node_Str""))       ongoingTrades.get(p.getName()).secureMode(event);
      if (config.getMode().equals(""String_Node_Str""))       ongoingTrades.get(p.getName()).simpleMode(event);
    }
  }
}","@EventHandler public void onInventoryClick(InventoryClickEvent event){
  if (!(event.getWhoClicked() instanceof Player))   return;
  Player p=(Player)event.getWhoClicked();
  if (ongoingTrades.containsKey(p.getName())) {
    if (event.getRawSlot() < 0) {
      event.setCancelled(true);
      return;
    }
    if (TraderStatus.hasManageMode(ongoingTrades.get(p.getName()).getTraderStatus())) {
      if (ongoingTrades.get(p.getName()).equalsTraderStatus(TraderStatus.PLAYER_MANAGE))       ongoingTrades.get(p.getName()).setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
      ongoingTrades.get(p.getName()).managerMode(event);
    }
 else {
      if (config.getMode().equals(""String_Node_Str""))       ongoingTrades.get(p.getName()).secureMode(event);
      if (config.getMode().equals(""String_Node_Str""))       ongoingTrades.get(p.getName()).simpleMode(event);
    }
  }
}"
51681,"@EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getRawSlot() < 0)   return;
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      DecimalFormat f=new DecimalFormat(""String_Node_Str"");
      if ((!trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) && !trader.getStatus().equals(Status.PLAYER_MANAGE_BUY) && !trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) && !trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
        StockItem si=null;
        if (((CitizensTrader)sr.getPlugin()).config.getMode().equals(""String_Node_Str"") && top) {
          secureMode(event,trader,si,sr);
          return;
        }
 else         if (((CitizensTrader)sr.getPlugin()).config.getMode().equals(""String_Node_Str""))         simpleMode(event,trader,si,sr);
        event.setCancelled(true);
      }
 else {
        if ((event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) || (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) || (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2))|| (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 2))|| (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)))         event.setCancelled(true);
        StockItem si=null;
        if (top) {
          if (event.isShiftClick()) {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              si=sr.itemForSell(event.getSlot());
              if (si != null) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_MANAGE_SELL_AMOUT);
                trader.setStockItem(si);
              }
            }
            event.setCancelled(true);
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
              trader.setStatus(Status.PLAYER_MANAGE_PRICE);
              trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
              return;
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              if (event.isRightClick()) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
                return;
              }
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.itemForSell(event.getSlot()));
                if (trader.getStockItem() == null)                 if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_BUY);
                  trader.setStatus(Status.PLAYER_MANAGE_BUY);
                  trader.setStockItem(null);
                }
              }
 else {
                StockItem item=trader.getStockItem();
                if (item.getSlot() < 0) {
                  item.getAmouts().clear();
                  item.addAmout(event.getCursor().getAmount());
                  sr.addItem(true,item);
                }
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.itemForSell(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              if (!event.getCursor().getType().equals(Material.AIR) && !(event.getCursor().getType().equals(trader.getStockItem().getItemStack().getType()) && event.getCursor().getData().equals(trader.getStockItem().getItemStack().getData())) || (!event.getCurrentItem().getType().equals(trader.getStockItem().getItemStack().getType()) && !event.getCurrentItem().getType().equals(Material.AIR))) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
              }
              if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                sr.saveNewAmouts(trader.getInventory(),trader.getStockItem());
                trader.getInventory().clear();
                sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
                trader.setStatus(Status.PLAYER_MANAGE_SELL);
                trader.setStockItem(null);
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
              if (event.isRightClick()) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
                return;
              }
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.wantItemBuy(event.getSlot()));
                if (trader.getStockItem() == null) {
                  if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                    trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                    trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
                  }
 else                   if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                    trader.getInventory().clear();
                    sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
                    trader.setStatus(Status.PLAYER_MANAGE_SELL);
                    trader.setStockItem(null);
                  }
                }
              }
 else {
                StockItem item=trader.getStockItem();
                if (item.getSlot() < 0) {
                  item.getAmouts().clear();
                  item.addAmout(event.getCursor().getAmount());
                  sr.addItem(false,item);
                }
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.wantItemBuy(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))               si=sr.itemForSell(event.getSlot());
 else               si=sr.wantItemBuy(event.getSlot());
              if (si != null) {
                if (event.isLeftClick())                 si.increasePrice(this.getManagePriceAmout(event.getCursor()));
 else                 if (event.isRightClick())                 si.lowerPrice(this.getManagePriceAmout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() / si.getAmouts().get(0)));
                event.setCancelled(true);
              }
 else {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))                   trader.setStatus(Status.PLAYER_MANAGE_SELL);
 else                   trader.setStatus(Status.PLAYER_MANAGE_BUY);
                  trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1));
                }
 else                 p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
            }
          }
          trader.setLastInv(true);
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) || trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            if (trader.getLastInv() && trader.getStockItem() != null) {
              StockItem item=trader.getStockItem();
              if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL))               if (sr.itemForSell(item.getSlot()).equals(item))               sr.removeItem(true,trader.getStockItem().getSlot());
              if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY))               if (sr.wantItemBuy(item.getSlot()).equals(item))               sr.removeItem(false,trader.getStockItem().getSlot());
              trader.setStockItem(null);
            }
 else {
              ItemStack is=event.getCurrentItem();
              String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
              if (!is.getEnchantments().isEmpty()) {
                itemInfo+=""String_Node_Str"";
                for (                Enchantment ench : is.getEnchantments().keySet())                 itemInfo+=ench.getId() + ""String_Node_Str"" + is.getEnchantmentLevel(ench)+ ""String_Node_Str"";
              }
              trader.setStockItem(new StockItem(itemInfo));
            }
          }
 else {
          }
          trader.setLastInv(false);
        }
      }
    }
  }
}","@EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getRawSlot() < 0)   return;
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      DecimalFormat f=new DecimalFormat(""String_Node_Str"");
      if ((!trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) && !trader.getStatus().equals(Status.PLAYER_MANAGE_BUY) && !trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) && !trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
        StockItem si=null;
        if (((CitizensTrader)sr.getPlugin()).config.getMode().equals(""String_Node_Str"")) {
          secureMode(event,trader,si,sr);
          return;
        }
 else         if (((CitizensTrader)sr.getPlugin()).config.getMode().equals(""String_Node_Str""))         simpleMode(event,trader,si,sr);
        event.setCancelled(true);
      }
 else {
        if ((event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) || (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) || (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2))|| (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 2))|| (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)))         event.setCancelled(true);
        StockItem si=null;
        if (top) {
          if (event.isShiftClick()) {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              si=sr.itemForSell(event.getSlot());
              if (si != null) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_MANAGE_SELL_AMOUT);
                trader.setStockItem(si);
              }
            }
            event.setCancelled(true);
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
              trader.setStatus(Status.PLAYER_MANAGE_PRICE);
              trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
              return;
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              if (event.isRightClick()) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
                return;
              }
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.itemForSell(event.getSlot()));
                if (trader.getStockItem() == null)                 if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_BUY);
                  trader.setStatus(Status.PLAYER_MANAGE_BUY);
                  trader.setStockItem(null);
                }
              }
 else {
                StockItem item=trader.getStockItem();
                if (item.getSlot() < 0) {
                  item.getAmouts().clear();
                  item.addAmout(event.getCursor().getAmount());
                  sr.addItem(true,item);
                }
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.itemForSell(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              if (!event.getCursor().getType().equals(Material.AIR) && !(event.getCursor().getType().equals(trader.getStockItem().getItemStack().getType()) && event.getCursor().getData().equals(trader.getStockItem().getItemStack().getData())) || (!event.getCurrentItem().getType().equals(trader.getStockItem().getItemStack().getType()) && !event.getCurrentItem().getType().equals(Material.AIR))) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
              }
              if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                sr.saveNewAmouts(trader.getInventory(),trader.getStockItem());
                trader.getInventory().clear();
                sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
                trader.setStatus(Status.PLAYER_MANAGE_SELL);
                trader.setStockItem(null);
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
              if (event.isRightClick()) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
                return;
              }
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.wantItemBuy(event.getSlot()));
                if (trader.getStockItem() == null) {
                  if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                    trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                    trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
                  }
 else                   if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                    trader.getInventory().clear();
                    sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
                    trader.setStatus(Status.PLAYER_MANAGE_SELL);
                    trader.setStockItem(null);
                  }
                }
              }
 else {
                StockItem item=trader.getStockItem();
                if (item.getSlot() < 0) {
                  item.getAmouts().clear();
                  item.addAmout(event.getCursor().getAmount());
                  sr.addItem(false,item);
                }
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.wantItemBuy(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))               si=sr.itemForSell(event.getSlot());
 else               si=sr.wantItemBuy(event.getSlot());
              if (si != null) {
                if (event.isLeftClick())                 si.increasePrice(this.getManagePriceAmout(event.getCursor()));
 else                 if (event.isRightClick())                 si.lowerPrice(this.getManagePriceAmout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() / si.getAmouts().get(0)));
                event.setCancelled(true);
              }
 else {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))                   trader.setStatus(Status.PLAYER_MANAGE_SELL);
 else                   trader.setStatus(Status.PLAYER_MANAGE_BUY);
                  trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1));
                }
 else                 p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
            }
          }
          trader.setLastInv(true);
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) || trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            if (trader.getLastInv() && trader.getStockItem() != null) {
              StockItem item=trader.getStockItem();
              if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL))               if (sr.itemForSell(item.getSlot()).equals(item))               sr.removeItem(true,trader.getStockItem().getSlot());
              if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY))               if (sr.wantItemBuy(item.getSlot()).equals(item))               sr.removeItem(false,trader.getStockItem().getSlot());
              trader.setStockItem(null);
            }
 else {
              ItemStack is=event.getCurrentItem();
              String itemInfo=is.getTypeId() + ""String_Node_Str"" + is.getData().getData()+ ""String_Node_Str""+ is.getAmount()+ ""String_Node_Str""+ is.getDurability();
              if (!is.getEnchantments().isEmpty()) {
                itemInfo+=""String_Node_Str"";
                for (                Enchantment ench : is.getEnchantments().keySet())                 itemInfo+=ench.getId() + ""String_Node_Str"" + is.getEnchantmentLevel(ench)+ ""String_Node_Str"";
              }
              trader.setStockItem(new StockItem(itemInfo));
            }
          }
 else {
          }
          trader.setLastInv(false);
        }
      }
    }
  }
}"
51682,"public void secureMode(InventoryClickEvent event,TraderStatus trader,StockItem si,InventoryTrait sr){
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    DecimalFormat f=new DecimalFormat(""String_Node_Str"");
    if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
      if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))       si=trader.getStockItem();
 else       si=sr.itemForSell(event.getSlot());
      if (si != null) {
        if (event.isShiftClick()) {
          if (si.hasMultipleAmouts() && trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
            if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                p.getInventory().addItem(event.getCurrentItem());
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
              }
            }
 else {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
 else {
            if (econ.has(p.getName(),si.getPrice())) {
              econ.withdrawPlayer(p.getName(),si.getPrice());
              p.getInventory().addItem(si.getItemStack());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice())+ ""String_Node_Str"");
            }
 else {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
            }
          }
 else           if (trader.getStatus().equals(Status.PLAYER_SELL)) {
            if (si.hasMultipleAmouts()) {
              if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_SELL_AMOUT);
                trader.setStockItem(si);
              }
            }
 else {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice())+ ""String_Node_Str"");
            }
          }
        }
      }
 else       if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
        trader.getInventory().clear();
        sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
        trader.setStatus(Status.PLAYER_BUY);
        trader.setStockItem(null);
      }
    }
 else     if (trader.getStatus().equals(Status.PLAYER_BUY)) {
      si=sr.wantItemBuy(event.getSlot());
      if (si != null) {
        if (si.getItemStack().getType().equals(event.getCursor().getType()) && si.getItemStack().getData().equals(event.getCursor().getData())) {
          econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice() * event.getCursor().getAmount())+ ""String_Node_Str"");
          event.setCursor(new ItemStack(Material.AIR));
        }
 else {
          if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice())+ ""String_Node_Str"");
        }
      }
 else {
        if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
          trader.getInventory().clear();
          sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
          trader.setStatus(Status.PLAYER_SELL);
          trader.setStockItem(null);
        }
      }
    }
  }
}","public void secureMode(InventoryClickEvent event,TraderStatus trader,StockItem si,InventoryTrait sr){
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    DecimalFormat f=new DecimalFormat(""String_Node_Str"");
    boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
    if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT) && top) {
      if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))       si=trader.getStockItem();
 else       si=sr.itemForSell(event.getSlot());
      if (si != null) {
        if (event.isShiftClick()) {
          if (si.hasMultipleAmouts() && trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
            if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                p.getInventory().addItem(event.getCurrentItem());
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
              }
            }
 else {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
 else {
            if (econ.has(p.getName(),si.getPrice())) {
              econ.withdrawPlayer(p.getName(),si.getPrice());
              p.getInventory().addItem(si.getItemStack());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice())+ ""String_Node_Str"");
            }
 else {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
            }
          }
 else           if (trader.getStatus().equals(Status.PLAYER_SELL)) {
            if (si.hasMultipleAmouts()) {
              if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_SELL_AMOUT);
                trader.setStockItem(si);
              }
            }
 else {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice())+ ""String_Node_Str"");
            }
          }
        }
      }
 else       if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
        trader.getInventory().clear();
        sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
        trader.setStatus(Status.PLAYER_BUY);
        trader.setStockItem(null);
      }
      event.setCancelled(true);
    }
 else     if (trader.getStatus().equals(Status.PLAYER_BUY) && top) {
      si=sr.wantItemBuy(event.getSlot());
      if (si != null) {
        if (si.getItemStack().getType().equals(event.getCursor().getType()) && si.getItemStack().getData().equals(event.getCursor().getData())) {
          econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice() * event.getCursor().getAmount())+ ""String_Node_Str"");
          event.setCursor(new ItemStack(Material.AIR));
        }
 else {
          if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice())+ ""String_Node_Str"");
        }
      }
 else {
        if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
          trader.getInventory().clear();
          sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
          trader.setStatus(Status.PLAYER_SELL);
          trader.setStockItem(null);
        }
      }
      event.setCancelled(true);
    }
  }
}"
51683,"public void simpleMode(InventoryClickEvent event,TraderStatus trader,StockItem si,InventoryTrait sr){
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    DecimalFormat f=new DecimalFormat(""String_Node_Str"");
    boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
    if ((trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))) {
      if (top) {
        if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))         si=trader.getStockItem();
 else         si=sr.itemForSell(event.getSlot());
        if (si != null) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                if (trader.getLastSlot() != event.getSlot()) {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                  trader.setLastSlot(event.getSlot());
                }
 else {
                  if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
                    trader.setLastSlot(-1);
                  }
 else {
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                    trader.setLastSlot(-1);
                  }
                }
              }
            }
          }
 else           if (trader.getStatus().equals(Status.PLAYER_SELL)) {
            if (si.hasMultipleAmouts()) {
              if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_SELL_AMOUT);
                trader.setStockItem(si);
              }
            }
 else {
              if (trader.getLastSlot() != event.getSlot()) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice())+ ""String_Node_Str"");
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                trader.setLastSlot(event.getSlot());
              }
 else {
                if (econ.has(p.getName(),si.getPrice()) && trader.getLastInv()) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice())+ ""String_Node_Str"");
                  trader.setLastSlot(-1);
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                  trader.setLastSlot(-1);
                }
              }
            }
          }
        }
 else         if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
          trader.getInventory().clear();
          sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
          trader.setStatus(Status.PLAYER_BUY);
          trader.setStockItem(null);
        }
        trader.setLastInv(true);
      }
 else {
        si=sr.wantItemBuy(event.getCurrentItem());
        if (si != null) {
          if (trader.getLastSlot() == event.getSlot() && !trader.getLastInv()) {
            econ.depositPlayer(p.getName(),si.getPrice() * event.getCurrentItem().getAmount());
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
            event.setCurrentItem(new ItemStack(Material.AIR));
            trader.setLastSlot(-1);
          }
 else {
            if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              trader.setLastSlot(event.getSlot());
            }
          }
        }
        trader.setLastInv(false);
      }
    }
 else     if (trader.getStatus().equals(Status.PLAYER_BUY)) {
      if (top) {
        if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
          trader.getInventory().clear();
          sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
          trader.setStatus(Status.PLAYER_SELL);
          trader.setStockItem(null);
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
        }
      }
 else {
        si=sr.wantItemBuy(event.getCurrentItem());
        if (si != null) {
          if (trader.getLastSlot() == event.getSlot()) {
            econ.depositPlayer(p.getName(),si.getPrice() * event.getCurrentItem().getAmount());
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
            event.setCurrentItem(new ItemStack(Material.AIR));
            trader.setLastSlot(-1);
          }
 else {
            if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              trader.setLastSlot(event.getSlot());
            }
          }
        }
      }
    }
  }
}","public void simpleMode(InventoryClickEvent event,TraderStatus trader,StockItem si,InventoryTrait sr){
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    DecimalFormat f=new DecimalFormat(""String_Node_Str"");
    boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
    if ((trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))) {
      if (top) {
        if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))         si=trader.getStockItem();
 else         si=sr.itemForSell(event.getSlot());
        if (si != null) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                if (trader.getLastSlot() != event.getSlot()) {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                  trader.setLastSlot(event.getSlot());
                }
 else {
                  if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice(event.getSlot()))+ ""String_Node_Str"");
                    trader.setLastSlot(-1);
                  }
 else {
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                    trader.setLastSlot(-1);
                  }
                }
              }
            }
          }
 else           if (trader.getStatus().equals(Status.PLAYER_SELL)) {
            if (si.hasMultipleAmouts()) {
              if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_SELL_AMOUT);
                trader.setStockItem(si);
              }
            }
 else {
              if (trader.getLastSlot() != event.getSlot()) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice())+ ""String_Node_Str"");
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                trader.setLastSlot(event.getSlot());
              }
 else {
                if (econ.has(p.getName(),si.getPrice()) && trader.getLastInv()) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice())+ ""String_Node_Str"");
                  trader.setLastSlot(-1);
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                  trader.setLastSlot(-1);
                }
              }
            }
          }
        }
 else         if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
          trader.getInventory().clear();
          sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
          trader.setStatus(Status.PLAYER_BUY);
          trader.setStockItem(null);
        }
        trader.setLastInv(true);
      }
 else {
        si=sr.wantItemBuy(event.getCurrentItem());
        if (si != null) {
          if (trader.getLastSlot() == event.getSlot() && !trader.getLastInv()) {
            econ.depositPlayer(p.getName(),si.getPrice() * event.getCurrentItem().getAmount());
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
            event.setCurrentItem(new ItemStack(Material.AIR));
            trader.setLastSlot(-1);
          }
 else {
            if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              trader.setLastSlot(event.getSlot());
            }
          }
        }
        trader.setLastInv(false);
      }
    }
 else     if (trader.getStatus().equals(Status.PLAYER_BUY)) {
      if (top) {
        si=sr.wantItemBuy(event.getSlot());
        if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
          trader.getInventory().clear();
          sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
          trader.setStatus(Status.PLAYER_SELL);
          trader.setStockItem(null);
        }
 else {
          if (si != null)           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
        }
        event.setCancelled(true);
      }
 else {
        si=sr.wantItemBuy(event.getCurrentItem());
        if (si != null) {
          if (trader.getLastSlot() == event.getSlot()) {
            econ.depositPlayer(p.getName(),si.getPrice() * event.getCurrentItem().getAmount());
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
            event.setCurrentItem(new ItemStack(Material.AIR));
            trader.setLastSlot(-1);
          }
 else {
            if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(si.getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              trader.setLastSlot(event.getSlot());
            }
          }
        }
      }
    }
  }
}"
51684,"@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  if (getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    RegisteredServiceProvider<Economy> rspEcon=getServer().getServicesManager().getRegistration(Economy.class);
    if (rspEcon != null) {
      economy=rspEcon.getProvider();
      this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"");
    }
 else {
      this.logger.info(""String_Node_Str"");
      this.setEnabled(false);
      this.getPluginLoader().disablePlugin(this);
      return;
    }
    RegisteredServiceProvider<Permission> rspPerm=plugin.getServer().getServicesManager().getRegistration(Permission.class);
    if (rspPerm != null) {
      permission=rspPerm.getProvider();
      this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"");
    }
 else {
      this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"");
    }
    this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
    cf=new CharacterFactory(TraderNpc.class);
    cf.withName(""String_Node_Str"");
    if (CitizensAPI.getCharacterManager() != null)     CitizensAPI.getCharacterManager().registerCharacter(cf);
    if (CitizensAPI.getTraitManager() != null)     CitizensAPI.getTraitManager().registerTrait(new TraitFactory(InventoryTrait.class).withName(""String_Node_Str"").withPlugin(this));
    getServer().getPluginManager().registerEvents((Listener)CitizensAPI.getCharacterManager().getCharacter(""String_Node_Str""),this);
    getCommand(""String_Node_Str"").setExecutor(new TraderCommandExecutor());
    ((TraderNpc)CitizensAPI.getCharacterManager().getCharacter(""String_Node_Str"")).setEcon(economy);
    plugin=this;
  }
 else {
    this.logger.info(""String_Node_Str"");
    this.setEnabled(false);
    this.getPluginLoader().disablePlugin(this);
    return;
  }
}","@Override public void onEnable(){
  PluginDescriptionFile pdfFile=this.getDescription();
  if (getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    RegisteredServiceProvider<Economy> rspEcon=getServer().getServicesManager().getRegistration(Economy.class);
    if (rspEcon != null) {
      economy=rspEcon.getProvider();
      this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"");
    }
 else {
      this.logger.info(""String_Node_Str"");
      this.setEnabled(false);
      this.getPluginLoader().disablePlugin(this);
      return;
    }
    RegisteredServiceProvider<Permission> rspPerm=getServer().getServicesManager().getRegistration(Permission.class);
    if (rspPerm != null) {
      permission=rspPerm.getProvider();
      this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"");
    }
 else {
      this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str"");
    }
    this.logger.info(""String_Node_Str"" + pdfFile.getName() + ""String_Node_Str""+ pdfFile.getVersion()+ ""String_Node_Str"");
    cf=new CharacterFactory(TraderNpc.class);
    cf.withName(""String_Node_Str"");
    if (CitizensAPI.getCharacterManager() != null)     CitizensAPI.getCharacterManager().registerCharacter(cf);
    if (CitizensAPI.getTraitManager() != null)     CitizensAPI.getTraitManager().registerTrait(new TraitFactory(InventoryTrait.class).withName(""String_Node_Str"").withPlugin(this));
    getServer().getPluginManager().registerEvents((Listener)CitizensAPI.getCharacterManager().getCharacter(""String_Node_Str""),this);
    getCommand(""String_Node_Str"").setExecutor(new TraderCommandExecutor());
    ((TraderNpc)CitizensAPI.getCharacterManager().getCharacter(""String_Node_Str"")).setEcon(economy);
    plugin=this;
  }
 else {
    this.logger.info(""String_Node_Str"");
    this.setEnabled(false);
    this.getPluginLoader().disablePlugin(this);
    return;
  }
}"
51685,"@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(event.getSlot(),1)) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == event.getSlot()) {
            if (inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
              addSelectedToInventory(p,0);
            }
 else             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
 else {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            setClickedSlot(event.getSlot());
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == event.getSlot()) {
          if (inventoryHasPlace(p,event.getSlot()) && buyTransaction(p,getSelectedItem().getPrice(event.getSlot()))) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount(event.getSlot())+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
            addSelectedToInventory(p,event.getSlot());
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_BUY).hasSelectedItem()) {
        p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
          if (checkLimits(p.getName()) && sellTransaction(p,getSelectedItem().getPrice())) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            updateLimits(p.getName());
            if (event.getCurrentItem().getAmount() - getSelectedItem().getAmount() > 0)             event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
 else             event.setCurrentItem(new ItemStack(Material.AIR));
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
        if (checkLimits(p.getName()) && sellTransaction(p,getSelectedItem().getPrice())) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          updateLimits(p.getName());
          if (event.getCurrentItem().getAmount() - getSelectedItem().getAmount() > 0)           event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
 else           event.setCurrentItem(new ItemStack(Material.AIR));
        }
 else         p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (isManagementSlot(event.getSlot(),1)) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == event.getSlot()) {
            if (inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
              addSelectedToInventory(p,0);
            }
 else             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
 else {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            setClickedSlot(event.getSlot());
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == event.getSlot()) {
          if (inventoryHasPlace(p,event.getSlot()) && buyTransaction(p,getSelectedItem().getPrice(event.getSlot()))) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount(event.getSlot())+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
            addSelectedToInventory(p,event.getSlot());
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_BUY).hasSelectedItem()) {
        p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
          if (checkLimits(p.getName()) && sellTransaction(p,getSelectedItem().getPrice())) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            updateLimits(p.getName());
            if (event.getCurrentItem().getAmount() - getSelectedItem().getAmount() > 0)             event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
 else             event.setCurrentItem(new ItemStack(Material.AIR));
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
        if (checkLimits(p.getName()) && sellTransaction(p,getSelectedItem().getPrice())) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          updateLimits(p.getName());
          if (event.getCurrentItem().getAmount() - getSelectedItem().getAmount() > 0)           event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
 else           event.setCurrentItem(new ItemStack(Material.AIR));
        }
 else         p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51686,"public StockItem(String data){
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,(short)0,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          price=Double.parseDouble(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add(Integer.parseInt(amout));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(2).split(""String_Node_Str"");
          limit.setLimit(Integer.parseInt(limitData[0]));
          limit.setAmount(Integer.parseInt(limitData[1]));
          limit.setTimeout(Integer.parseInt(limitData[2]));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
        }
      }
    }
  }
}","public StockItem(String data){
  String[] values=data.split(""String_Node_Str"");
  for (  String value : values) {
    if (item == null) {
      if (value.contains(""String_Node_Str"")) {
        String[] itemData=value.split(""String_Node_Str"");
        item=new ItemStack(Integer.parseInt(itemData[0]),1,(short)0,Byte.parseByte(itemData[1]));
        amouts.add(1);
      }
 else {
        item=new ItemStack(Integer.parseInt(value),1);
        amouts.add(1);
      }
    }
 else {
      if (value.length() > 2) {
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          price=Double.parseDouble(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          slot=Integer.parseInt(value.substring(2));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          item.setDurability(Short.parseShort(value.substring(2)));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          amouts.clear();
          for (          String amout : value.substring(2).split(""String_Node_Str""))           amouts.add(Integer.parseInt(amout));
          if (amouts.size() > 0)           item.setAmount(amouts.get(0));
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          String[] limitData=value.substring(2).split(""String_Node_Str"");
          limit.setLimit(Integer.parseInt(limitData[0]));
          limit.setAmount(Integer.parseInt(limitData[1]));
          limit.setTimeout(Integer.parseInt(limitData[2]) * 1000);
        }
        if (value.startsWith(""String_Node_Str"") && !value.contains(""String_Node_Str"")) {
          for (          String ench : value.substring(2).split(""String_Node_Str"")) {
            String[] enchData=ench.split(""String_Node_Str"");
            item.addEnchantment(Enchantment.getById(Integer.parseInt(enchData[0])),Integer.parseInt(enchData[1]));
          }
        }
        if (value.equals(""String_Node_Str"")) {
          stackPrice=true;
        }
      }
    }
  }
}"
51687,"@Override public String toString(){
  return limit + ""String_Node_Str"" + amount+ ""String_Node_Str""+ timeout;
}","@Override public String toString(){
  return limit + ""String_Node_Str"" + amount+ ""String_Node_Str""+ (timeout / 1000);
}"
51688,"@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  if (top) {
    setInventoryClicked(true);
    if (event.getSlot() >= getInventory().getSize() - 3) {
      if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 2) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
      }
 else       if (isWool(event.getCurrentItem(),(byte)15)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 3) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)13));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.AIR));
      }
 else       if (isWool(event.getCurrentItem(),(byte)13)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_BUY);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)14)) {
        saveManagedAmouts();
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
      event.setCancelled(true);
    }
 else {
      if (event.isShiftClick()) {
        if (getTraderStatus().equals(TraderStatus.PLAYER_MANAGE_LIMIT)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().changeTimeout(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().changeTimeout(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().changeTimeout(-calculateLimit(event.getCursor()));
 else               getSelectedItem().changeTimeout(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
            }
          }
          event.setCancelled(true);
        }
        if (event.isLeftClick()) {
          if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT);
            }
          }
        }
 else {
          if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (getSelectedItem().hasStackPrice()) {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
 else {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
            }
          }
 else           if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
              if (getSelectedItem().hasStackPrice()) {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
 else {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
            }
          }
        }
        event.setCancelled(true);
      }
 else {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
          if (event.isRightClick()) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(true,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (getTraderStatus().equals(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT)) {
          if (!equalsSelected(event.getCursor(),true,false) && !event.getCursor().getType().equals(Material.AIR)) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
          if (event.isRightClick()) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(false,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             ;
            getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (getTraderStatus().equals(TraderStatus.PLAYER_MANAGE_PRICE)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else                 getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else               getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
          }
          event.setCancelled(true);
        }
 else         if (getTraderStatus().equals(TraderStatus.PLAYER_MANAGE_LIMIT)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().changeLimit(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().changeLimit(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().changeLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().changeLimit(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
            }
          }
          event.setCancelled(true);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL) || equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
      if (getInventoryClicked() && hasSelectedItem()) {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL))         getTraderStock().removeItem(true,getSelectedItem().getSlot());
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY))         getTraderStock().removeItem(false,getSelectedItem().getSlot());
        selectItem(null);
      }
 else {
        selectItem(toStockItem(event.getCurrentItem()));
      }
    }
    setInventoryClicked(false);
  }
}","@Override public void managerMode(InventoryClickEvent event){
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  if (top) {
    setInventoryClicked(true);
    if (event.getSlot() >= getInventory().getSize() - 3) {
      if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 2) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_PRICE);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.AIR));
      }
 else       if (isWool(event.getCurrentItem(),(byte)15)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)0) && event.getSlot() == getInventory().getSize() - 3) {
        setTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)13));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.AIR));
      }
 else       if (isWool(event.getCurrentItem(),(byte)13)) {
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3))         setTraderStatus(TraderStatus.PLAYER_MANAGE_BUY);
        if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))         setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL);
        getInventory().setItem(getInventory().getSize() - 3,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
        getInventory().setItem(getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)0));
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_BUY);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)14)) {
        saveManagedAmouts();
        switchInventory(TraderStatus.PLAYER_MANAGE_SELL);
      }
      event.setCancelled(true);
    }
 else {
      if (event.isShiftClick()) {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().changeTimeout(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().changeTimeout(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().changeTimeout(-calculateLimit(event.getCursor()));
 else               getSelectedItem().changeTimeout(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getTimeout());
            }
          }
          event.setCancelled(true);
        }
        if (event.isLeftClick()) {
          if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              switchInventory(getSelectedItem());
              setTraderStatus(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT);
            }
          }
        }
 else {
          if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (getSelectedItem().hasStackPrice()) {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
 else {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
            }
          }
 else           if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
              if (getSelectedItem().hasStackPrice()) {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
 else {
                getSelectedItem().setStackPrice(true);
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
              }
            }
          }
        }
        event.setCancelled(true);
      }
 else {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL)) {
          if (event.isRightClick()) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(true,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL_AMOUNT)) {
          if (!equalsSelected(event.getCursor(),true,false) && !event.getCursor().getType().equals(Material.AIR)) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
          if (event.isRightClick()) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            event.setCancelled(true);
            return;
          }
          if (hasSelectedItem()) {
            StockItem item=getSelectedItem();
            if (item.getSlot() == -1) {
              item.resetAmounts(event.getCursor().getAmount());
              getTraderStock().addItem(false,item);
            }
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             getSelectedItem().setSlot(-2);
            item.setSlot(event.getSlot());
          }
 else {
            if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())             ;
            getSelectedItem().setSlot(-2);
          }
          return;
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_PRICE)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else                 getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().lowerPrice(calculatePrice(event.getCursor()));
 else               getSelectedItem().increasePrice(calculatePrice(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getRawPrice()));
            }
          }
          event.setCancelled(true);
        }
 else         if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_LIMIT)) {
          if (event.getCursor().getType().equals(Material.AIR)) {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem())               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem())             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
          }
 else {
            if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)3)) {
              if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_BUY).hasSelectedItem()) {
                if (event.isRightClick())                 getSelectedItem().changeLimit(-calculateLimit(event.getCursor()));
 else                 getSelectedItem().changeLimit(calculateLimit(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
              }
            }
 else             if (isWool(getInventory().getItem(getInventory().getSize() - 1),(byte)5))             if (selectItem(event.getSlot(),TraderStatus.PLAYER_MANAGE_SELL).hasSelectedItem()) {
              if (event.isRightClick())               getSelectedItem().changeLimit(-calculateLimit(event.getCursor()));
 else               getSelectedItem().changeLimit(calculateLimit(event.getCursor()));
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getLimit());
            }
          }
          event.setCancelled(true);
        }
      }
    }
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL) || equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY)) {
      if (getInventoryClicked() && hasSelectedItem()) {
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_SELL))         getTraderStock().removeItem(true,getSelectedItem().getSlot());
        if (equalsTraderStatus(TraderStatus.PLAYER_MANAGE_BUY))         getTraderStock().removeItem(false,getSelectedItem().getSlot());
        selectItem(null);
      }
 else {
        selectItem(toStockItem(event.getCurrentItem()));
      }
    }
    setInventoryClicked(false);
  }
}"
51689,"@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.getSlot() >= getInventory().getSize() - 1) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == event.getSlot()) {
            if (inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
              addSelectedToInventory(p,0);
              updateSelectedItemLimit();
            }
 else             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
 else {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            setClickedSlot(event.getSlot());
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == event.getSlot()) {
          if (inventoryHasPlace(p,event.getSlot()) && buyTransaction(p,getSelectedItem().getPrice(event.getSlot()))) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount(event.getSlot())+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
            addSelectedToInventory(p,event.getSlot());
            updateSelectedItemLimit(getSelectedItem().getAmount(event.getSlot()));
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_BUY).hasSelectedItem()) {
        p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
          if (sellTransaction(p,getSelectedItem().getPrice()) && checkLimit()) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            updateSelectedItemLimit();
            event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
        if (sellTransaction(p,getSelectedItem().getPrice()) && checkLimit()) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          updateSelectedItemLimit();
          event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
        }
 else         p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.getSlot() >= getInventory().getSize() - 1) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == event.getSlot()) {
            if (inventoryHasPlace(p,0) && buyTransaction(p,getSelectedItem().getPrice())) {
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
              addSelectedToInventory(p,0);
              updateSelectedItemLimit();
            }
 else             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
 else {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            setClickedSlot(event.getSlot());
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == event.getSlot()) {
          if (inventoryHasPlace(p,event.getSlot()) && buyTransaction(p,getSelectedItem().getPrice(event.getSlot()))) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount(event.getSlot())+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
            addSelectedToInventory(p,event.getSlot());
            updateSelectedItemLimit(getSelectedItem().getAmount(event.getSlot()));
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_BUY).hasSelectedItem()) {
        p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
        if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
          if (sellTransaction(p,getSelectedItem().getPrice()) && checkLimit()) {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            updateSelectedItemLimit();
            if (event.getCurrentItem().getAmount() - getSelectedItem().getAmount() > 0)             event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
 else             event.setCurrentItem(new ItemStack(Material.AIR));
          }
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,true).hasSelectedItem()) {
      if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
        if (sellTransaction(p,getSelectedItem().getPrice()) && checkLimit()) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          updateSelectedItemLimit();
          if (event.getCurrentItem().getAmount() - getSelectedItem().getAmount() > 0)           event.getCurrentItem().setAmount(event.getCurrentItem().getAmount() - getSelectedItem().getAmount());
 else           event.setCurrentItem(new ItemStack(Material.AIR));
        }
 else         p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51690,"@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.getSlot() >= getInventory().getSize() - 1) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == event.getSlot()) {
            if (buyTransaction(p,getSelectedItem().getPrice()))             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
 else             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
 else {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            setClickedSlot(event.getSlot());
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == event.getSlot()) {
          if (buyTransaction(p,getSelectedItem().getPrice(event.getSlot())))           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount(event.getSlot())+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_BUY).hasSelectedItem()) {
        if (getClickedSlot() == event.getSlot()) {
          if (sellTransaction(p,getSelectedItem().getPrice(event.getSlot())))           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (selectItem(event.getSlot(),TraderStatus.PLAYER_BUY).hasSelectedItem()) {
      if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
        if (sellTransaction(p,getSelectedItem().getPrice(event.getSlot())))         p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}","@Override public void simpleMode(InventoryClickEvent event){
  Player p=(Player)event.getWhoClicked();
  DecimalFormat f=new DecimalFormat(""String_Node_Str"");
  boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
  if (top) {
    if (event.getSlot() >= getInventory().getSize() - 1) {
      if (isWool(event.getCurrentItem(),(byte)14)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)3)) {
        switchInventory(TraderStatus.PLAYER_SELL);
      }
 else       if (isWool(event.getCurrentItem(),(byte)5)) {
        switchInventory(TraderStatus.PLAYER_BUY);
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_SELL).hasSelectedItem()) {
        if (getSelectedItem().hasMultipleAmouts()) {
          switchInventory(getSelectedItem());
          setTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT);
        }
 else {
          if (getClickedSlot() == event.getSlot()) {
            if (buyTransaction(p,getSelectedItem().getPrice()))             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
 else             p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          }
 else {
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice())+ ""String_Node_Str"");
            p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            setClickedSlot(event.getSlot());
          }
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_SELL_AMOUNT)) {
      if (!event.getCurrentItem().getType().equals(Material.AIR)) {
        if (getClickedSlot() == event.getSlot()) {
          if (buyTransaction(p,getSelectedItem().getPrice(event.getSlot())))           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + getSelectedItem().getAmount(event.getSlot())+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice(event.getSlot()))+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getSlot(),TraderStatus.PLAYER_BUY).hasSelectedItem()) {
        p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
      }
    }
    setInventoryClicked(true);
  }
 else {
    if (equalsTraderStatus(TraderStatus.PLAYER_BUY)) {
      if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,false).hasSelectedItem()) {
        if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
          if (sellTransaction(p,getSelectedItem().getPrice(event.getSlot())))           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
 else           p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
 else     if (selectItem(event.getCurrentItem(),TraderStatus.PLAYER_BUY,true,false).hasSelectedItem()) {
      if (getClickedSlot() == event.getSlot() && !getInventoryClicked()) {
        if (sellTransaction(p,getSelectedItem().getPrice(event.getSlot())))         p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
 else         p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + f.format(getSelectedItem().getPrice() * event.getCurrentItem().getAmount())+ ""String_Node_Str"");
          p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
          setClickedSlot(event.getSlot());
        }
      }
    }
    setInventoryClicked(false);
  }
  event.setCancelled(true);
}"
51691,"public final Trader selectItem(int slot,TraderStatus status){
  selectedItem=traderStock.getItem(slot,status);
  return this;
}","public final Trader selectItem(ItemStack item,TraderStatus status,boolean dura,boolean amount){
  selectedItem=traderStock.getItem(item,status,dura,amount);
  return this;
}"
51692,"public StockItem getItem(int slot,TraderStatus status){
  if (status.equals(TraderStatus.PLAYER_MANAGE_BUY) || status.equals(TraderStatus.PLAYER_BUY)) {
    for (    StockItem item : buyStock)     if (item.getSlot() == slot)     return item;
  }
  if (status.equals(TraderStatus.PLAYER_MANAGE_SELL) || status.equals(TraderStatus.PLAYER_SELL)) {
    for (    StockItem item : sellStock)     if (item.getSlot() == slot)     return item;
  }
  return null;
}","public StockItem getItem(ItemStack itemStack,TraderStatus status,boolean dura,boolean amount){
  boolean equal=false;
  if (status.equals(TraderStatus.PLAYER_MANAGE_BUY) || status.equals(TraderStatus.PLAYER_BUY)) {
    for (    StockItem item : buyStock) {
      equal=false;
      if (itemStack.getType().equals(item.getItemStack().getType()) && itemStack.getData().equals(item.getItemStack().getData())) {
        equal=true;
        if (dura)         equal=itemStack.getDurability() >= item.getItemStack().getDurability();
        if (amount && equal)         equal=itemStack.getAmount() == item.getItemStack().getAmount();
        if (equal)         return item;
      }
    }
  }
  if (status.equals(TraderStatus.PLAYER_MANAGE_SELL) || status.equals(TraderStatus.PLAYER_SELL)) {
    for (    StockItem item : sellStock) {
      equal=false;
      if (itemStack.getType().equals(item.getItemStack().getType()) && itemStack.getData().equals(item.getItemStack().getData())) {
        equal=true;
        if (dura)         equal=itemStack.getDurability() >= item.getItemStack().getDurability();
        if (amount && equal)         equal=itemStack.getAmount() == item.getItemStack().getAmount();
        if (equal)         return item;
      }
    }
  }
  return null;
}"
51693,"@EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getRawSlot() < 0)   return;
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      if ((!trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) && !trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) && !trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE) && top) {
        StockItem si=null;
        if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))           si=trader.getStockItem();
 else           si=sr.itemForSell(event.getSlot());
          if (si != null) {
            if (event.isShiftClick()) {
              if (si.hasMultipleAmouts() && trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
 else {
                if (econ.has(p.getName(),si.getPrice())) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ si.getPrice()+ ""String_Node_Str"");
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
 else {
              if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
                  trader.setStatus(Status.PLAYER_SELL);
                  trader.setStockItem(null);
                }
 else {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))                   p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
                }
              }
 else               if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                if (si.hasMultipleAmouts()) {
                  if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                    trader.getInventory().clear();
                    InventoryTrait.setInventoryWith(trader.getInventory(),si);
                    trader.setStatus(Status.PLAYER_SELL_AMOUT);
                    trader.setStockItem(si);
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice()+ ""String_Node_Str"");
                }
              }
            }
          }
 else           if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
            trader.getInventory().clear();
            sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
            trader.setStatus(Status.PLAYER_BUY);
            trader.setStockItem(null);
          }
        }
 else         if (trader.getStatus().equals(Status.PLAYER_BUY)) {
          si=sr.wantItemBuy(event.getSlot());
          if (si != null) {
            if (si.getItemStack().getType().equals(event.getCursor().getType())) {
              econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
              event.setCursor(new ItemStack(Material.AIR));
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
            }
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
          }
        }
        event.setCancelled(true);
      }
 else {
        StockItem si=null;
        if (top) {
          if (event.isShiftClick()) {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              si=sr.itemForSell(event.getSlot());
              if (si != null) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_MANAGE_SELL_AMOUT);
                trader.setStockItem(si);
              }
 else {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_PRICE);
                }
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              sr.saveNewAmouts(trader.getInventory(),trader.getStockItem());
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
              trader.setStatus(Status.PLAYER_MANAGE_SELL);
              trader.setStockItem(null);
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                trader.setStatus(Status.PLAYER_MANAGE_SELL);
                trader.getInventory().clear();
                sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
              }
            }
            event.setCancelled(true);
          }
 else {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.itemForSell(event.getSlot()));
              }
 else {
                if (trader.getStockItem().getSlot() < 0) {
                  trader.getStockItem().getAmouts().clear();
                  trader.getStockItem().addAmout(event.getCursor().getAmount());
                  sr.addItem(true,trader.getStockItem());
                }
                StockItem item=trader.getStockItem();
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.itemForSell(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              if (!event.getCursor().getType().equals(Material.AIR) && !(event.getCursor().getType().equals(trader.getStockItem().getItemStack().getType()) && event.getCursor().getData().equals(trader.getStockItem().getItemStack().getData())) || (!event.getCurrentItem().getType().equals(trader.getStockItem().getItemStack().getType()) && !event.getCurrentItem().getType().equals(Material.AIR))) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              si=sr.itemForSell(event.getSlot());
              if (si == null)               si=sr.wantItemBuy(event.getSlot());
              if (si != null) {
                if (event.isLeftClick())                 si.increasePrice(this.getManagePriceAmout(event.getCursor()));
 else                 if (event.isRightClick())                 si.lowerPrice(this.getManagePriceAmout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice() / si.getAmouts().get(0));
                event.setCancelled(true);
              }
 else               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
          trader.setLastInv(true);
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) || trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            if (trader.getLastInv() && trader.getStockItem() != null) {
              sr.removeItem(true,trader.getStockItem().getSlot());
              trader.setStockItem(null);
            }
 else {
              ItemStack is=event.getCurrentItem();
              trader.setStockItem(new StockItem(is.getTypeId() + ""String_Node_Str"" + is.getAmount()));
            }
          }
 else {
          }
          trader.setLastInv(false);
        }
      }
    }
  }
}","@EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getRawSlot() < 0)   return;
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      if ((!trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) && !trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) && !trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE) && top) {
        StockItem si=null;
        if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))           si=trader.getStockItem();
 else           si=sr.itemForSell(event.getSlot());
          if (si != null) {
            if (event.isShiftClick()) {
              if (si.hasMultipleAmouts() && trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
 else {
                if (econ.has(p.getName(),si.getPrice())) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ si.getPrice()+ ""String_Node_Str"");
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
 else {
              if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
                  trader.setStatus(Status.PLAYER_SELL);
                  trader.setStockItem(null);
                }
 else {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))                   p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
                }
              }
 else               if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                if (si.hasMultipleAmouts()) {
                  if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                    trader.getInventory().clear();
                    InventoryTrait.setInventoryWith(trader.getInventory(),si);
                    trader.setStatus(Status.PLAYER_SELL_AMOUT);
                    trader.setStockItem(si);
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice()+ ""String_Node_Str"");
                }
              }
            }
          }
 else           if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
            trader.getInventory().clear();
            sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
            trader.setStatus(Status.PLAYER_BUY);
            trader.setStockItem(null);
          }
        }
 else         if (trader.getStatus().equals(Status.PLAYER_BUY)) {
          si=sr.wantItemBuy(event.getSlot());
          if (si != null) {
            if (si.getItemStack().getType().equals(event.getCursor().getType())) {
              econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ si.getPrice(si.getSlot()) * event.getCursor().getAmount() + ""String_Node_Str"");
              event.setCursor(new ItemStack(Material.AIR));
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
            }
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
          }
        }
        event.setCancelled(true);
      }
 else {
        StockItem si=null;
        if (top) {
          if (event.isShiftClick()) {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              si=sr.itemForSell(event.getSlot());
              if (si != null) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_MANAGE_SELL_AMOUT);
                trader.setStockItem(si);
              }
 else {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_PRICE);
                }
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              sr.saveNewAmouts(trader.getInventory(),trader.getStockItem());
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
              trader.setStatus(Status.PLAYER_MANAGE_SELL);
              trader.setStockItem(null);
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                trader.setStatus(Status.PLAYER_MANAGE_SELL);
                trader.getInventory().clear();
                sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
              }
            }
            event.setCancelled(true);
          }
 else {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.itemForSell(event.getSlot()));
              }
 else {
                if (trader.getStockItem().getSlot() < 0) {
                  trader.getStockItem().getAmouts().clear();
                  trader.getStockItem().addAmout(event.getCursor().getAmount());
                  sr.addItem(true,trader.getStockItem());
                }
                StockItem item=trader.getStockItem();
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.itemForSell(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              if (!event.getCursor().getType().equals(Material.AIR) && !(event.getCursor().getType().equals(trader.getStockItem().getItemStack().getType()) && event.getCursor().getData().equals(trader.getStockItem().getItemStack().getData())) || (!event.getCurrentItem().getType().equals(trader.getStockItem().getItemStack().getType()) && !event.getCurrentItem().getType().equals(Material.AIR))) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              si=sr.itemForSell(event.getSlot());
              if (si == null)               si=sr.wantItemBuy(event.getSlot());
              if (si != null) {
                if (event.isLeftClick())                 si.increasePrice(this.getManagePriceAmout(event.getCursor()));
 else                 if (event.isRightClick())                 si.lowerPrice(this.getManagePriceAmout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice() / si.getAmouts().get(0));
                event.setCancelled(true);
              }
 else               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
          trader.setLastInv(true);
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) || trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            if (trader.getLastInv() && trader.getStockItem() != null) {
              sr.removeItem(true,trader.getStockItem().getSlot());
              trader.setStockItem(null);
            }
 else {
              ItemStack is=event.getCurrentItem();
              trader.setStockItem(new StockItem(is.getTypeId() + ""String_Node_Str"" + is.getAmount()));
            }
          }
 else {
          }
          trader.setLastInv(false);
        }
      }
    }
  }
}"
51694,"@EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getRawSlot() < 0)   return;
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      if ((!trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) && !trader.getStatus().equals(Status.PLAYER_MANAGE_BUY) && !trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) && !trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE) && top) {
        StockItem si=null;
        if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))           si=trader.getStockItem();
 else           si=sr.itemForSell(event.getSlot());
          if (si != null) {
            if (event.isShiftClick()) {
              if (si.hasMultipleAmouts() && trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
 else {
                if (econ.has(p.getName(),si.getPrice())) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ si.getPrice()+ ""String_Node_Str"");
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
 else {
              if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
                  trader.setStatus(Status.PLAYER_SELL);
                  trader.setStockItem(null);
                }
 else {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))                   p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
                }
              }
 else               if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                if (si.hasMultipleAmouts()) {
                  if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                    trader.getInventory().clear();
                    InventoryTrait.setInventoryWith(trader.getInventory(),si);
                    trader.setStatus(Status.PLAYER_SELL_AMOUT);
                    trader.setStockItem(si);
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice()+ ""String_Node_Str"");
                }
              }
            }
          }
 else           if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
            trader.getInventory().clear();
            sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
            trader.setStatus(Status.PLAYER_BUY);
            trader.setStockItem(null);
          }
        }
 else         if (trader.getStatus().equals(Status.PLAYER_BUY)) {
          si=sr.wantItemBuy(event.getSlot());
          if (si != null) {
            if (si.getItemStack().getType().equals(event.getCursor().getType())) {
              econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ si.getPrice(si.getSlot()) * event.getCursor().getAmount() + ""String_Node_Str"");
              event.setCursor(new ItemStack(Material.AIR));
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
            }
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
          }
        }
        event.setCancelled(true);
      }
 else {
        StockItem si=null;
        if (top) {
          if (event.isShiftClick()) {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              si=sr.itemForSell(event.getSlot());
              if (si != null) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_MANAGE_SELL_AMOUT);
                trader.setStockItem(si);
              }
 else {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                  trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
                }
 else                 if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.setStatus(Status.PLAYER_MANAGE_BUY);
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_BUY);
                }
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              sr.saveNewAmouts(trader.getInventory(),trader.getStockItem());
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
              trader.setStatus(Status.PLAYER_MANAGE_SELL);
              trader.setStockItem(null);
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
              if (sr.wantItemBuy(event.getSlot()) == null) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                  trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
                }
 else                 if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
                  trader.setStatus(Status.PLAYER_MANAGE_SELL);
                  trader.setStockItem(null);
                }
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))                 trader.setStatus(Status.PLAYER_MANAGE_SELL);
 else                 trader.setStatus(Status.PLAYER_MANAGE_BUY);
                trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1));
              }
            }
            event.setCancelled(true);
          }
 else {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.itemForSell(event.getSlot()));
              }
 else {
                if (trader.getStockItem().getSlot() < 0) {
                  trader.getStockItem().getAmouts().clear();
                  trader.getStockItem().addAmout(event.getCursor().getAmount());
                  sr.addItem(true,trader.getStockItem());
                }
                StockItem item=trader.getStockItem();
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.itemForSell(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              if (!event.getCursor().getType().equals(Material.AIR) && !(event.getCursor().getType().equals(trader.getStockItem().getItemStack().getType()) && event.getCursor().getData().equals(trader.getStockItem().getItemStack().getData())) || (!event.getCurrentItem().getType().equals(trader.getStockItem().getItemStack().getType()) && !event.getCurrentItem().getType().equals(Material.AIR))) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.wantItemBuy(event.getSlot()));
              }
 else {
                if (trader.getStockItem().getSlot() < 0) {
                  trader.getStockItem().getAmouts().clear();
                  trader.getStockItem().addAmout(event.getCursor().getAmount());
                  sr.addItem(false,trader.getStockItem());
                }
                StockItem item=trader.getStockItem();
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.wantItemBuy(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))               si=sr.itemForSell(event.getSlot());
 else               si=sr.wantItemBuy(event.getSlot());
              if (si != null) {
                if (event.isLeftClick())                 si.increasePrice(this.getManagePriceAmout(event.getCursor()));
 else                 if (event.isRightClick())                 si.lowerPrice(this.getManagePriceAmout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice() / si.getAmouts().get(0));
                event.setCancelled(true);
              }
 else               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
          trader.setLastInv(true);
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) || trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            if (trader.getLastInv() && trader.getStockItem() != null) {
              sr.removeItem(true,trader.getStockItem().getSlot());
              trader.setStockItem(null);
            }
 else {
              ItemStack is=event.getCurrentItem();
              trader.setStockItem(new StockItem(is.getTypeId() + ""String_Node_Str"" + is.getAmount()));
            }
          }
 else {
          }
          trader.setLastInv(false);
        }
      }
    }
  }
}","@EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getRawSlot() < 0)   return;
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      if ((!trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) && !trader.getStatus().equals(Status.PLAYER_MANAGE_BUY) && !trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) && !trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE) && top) {
        StockItem si=null;
        if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))           si=trader.getStockItem();
 else           si=sr.itemForSell(event.getSlot());
          if (si != null) {
            if (event.isShiftClick()) {
              if (si.hasMultipleAmouts() && trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
 else {
                if (econ.has(p.getName(),si.getPrice())) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ si.getPrice()+ ""String_Node_Str"");
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
 else {
              if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
                  trader.setStatus(Status.PLAYER_SELL);
                  trader.setStockItem(null);
                }
 else {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))                   p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
                }
              }
 else               if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                if (si.hasMultipleAmouts()) {
                  if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                    trader.getInventory().clear();
                    InventoryTrait.setInventoryWith(trader.getInventory(),si);
                    trader.setStatus(Status.PLAYER_SELL_AMOUT);
                    trader.setStockItem(si);
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice()+ ""String_Node_Str"");
                }
              }
            }
          }
 else           if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
            trader.getInventory().clear();
            sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
            trader.setStatus(Status.PLAYER_BUY);
            trader.setStockItem(null);
          }
        }
 else         if (trader.getStatus().equals(Status.PLAYER_BUY)) {
          si=sr.wantItemBuy(event.getSlot());
          if (si != null) {
            if (si.getItemStack().getType().equals(event.getCursor().getType())) {
              econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ si.getPrice(si.getSlot()) * event.getCursor().getAmount() + ""String_Node_Str"");
              event.setCursor(new ItemStack(Material.AIR));
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice()+ ""String_Node_Str"");
            }
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
          }
        }
        event.setCancelled(true);
      }
 else {
        StockItem si=null;
        if (top) {
          if (event.isShiftClick()) {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              si=sr.itemForSell(event.getSlot());
              if (si != null) {
                trader.getInventory().clear();
                InventoryTrait.setInventoryWith(trader.getInventory(),si);
                trader.setStatus(Status.PLAYER_MANAGE_SELL_AMOUT);
                trader.setStockItem(si);
              }
 else {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                  trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
                }
 else                 if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.setStatus(Status.PLAYER_MANAGE_BUY);
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_BUY);
                }
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              sr.saveNewAmouts(trader.getInventory(),trader.getStockItem());
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
              trader.setStatus(Status.PLAYER_MANAGE_SELL);
              trader.setStockItem(null);
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
              if (sr.wantItemBuy(event.getSlot()) == null) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                  trader.setStatus(Status.PLAYER_MANAGE_PRICE);
                  trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1,(short)0,(byte)15));
                }
 else                 if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_MANAGE_SELL);
                  trader.setStatus(Status.PLAYER_MANAGE_SELL);
                  trader.setStockItem(null);
                }
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)15)) && (event.getSlot() == trader.getInventory().getSize() - 2)) {
                if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))                 trader.setStatus(Status.PLAYER_MANAGE_SELL);
 else                 trader.setStatus(Status.PLAYER_MANAGE_BUY);
                trader.getInventory().setItem(trader.getInventory().getSize() - 2,new ItemStack(Material.WOOL,1));
              }
            }
            event.setCancelled(true);
          }
 else {
            if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL)) {
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.itemForSell(event.getSlot()));
              }
 else {
                if (trader.getStockItem().getSlot() < 0) {
                  trader.getStockItem().getAmouts().clear();
                  trader.getStockItem().addAmout(event.getCursor().getAmount());
                  sr.addItem(true,trader.getStockItem());
                }
                StockItem item=trader.getStockItem();
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.itemForSell(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL_AMOUT)) {
              if (!event.getCursor().getType().equals(Material.AIR) && !(event.getCursor().getType().equals(trader.getStockItem().getItemStack().getType()) && event.getCursor().getData().equals(trader.getStockItem().getItemStack().getData())) || (!event.getCurrentItem().getType().equals(trader.getStockItem().getItemStack().getType()) && !event.getCurrentItem().getType().equals(Material.AIR))) {
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                event.setCancelled(true);
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
              if (trader.getStockItem() == null) {
                trader.setStockItem(sr.wantItemBuy(event.getSlot()));
              }
 else {
                if (trader.getStockItem().getSlot() < 0) {
                  trader.getStockItem().getAmouts().clear();
                  trader.getStockItem().addAmout(event.getCursor().getAmount());
                  sr.addItem(false,trader.getStockItem());
                }
                StockItem item=trader.getStockItem();
                if (!event.getCurrentItem().getType().equals(Material.AIR))                 trader.setStockItem(sr.wantItemBuy(event.getSlot()));
 else                 trader.setStockItem(null);
                item.setSlot(event.getSlot());
              }
            }
 else             if (trader.getStatus().equals(Status.PLAYER_MANAGE_PRICE)) {
              if (trader.getInventory().getItem(trader.getInventory().getSize() - 1).equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)))               si=sr.itemForSell(event.getSlot());
 else               si=sr.wantItemBuy(event.getSlot());
              if (si != null) {
                if (event.isLeftClick())                 si.increasePrice(this.getManagePriceAmout(event.getCursor()));
 else                 if (event.isRightClick())                 si.lowerPrice(this.getManagePriceAmout(event.getCursor()));
                p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice() / si.getAmouts().get(0));
                event.setCancelled(true);
              }
 else               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
            }
          }
          trader.setLastInv(true);
        }
 else {
          if (trader.getStatus().equals(Status.PLAYER_MANAGE_SELL) || trader.getStatus().equals(Status.PLAYER_MANAGE_BUY)) {
            if (trader.getLastInv() && trader.getStockItem() != null) {
              sr.removeItem(true,trader.getStockItem().getSlot());
              trader.setStockItem(null);
            }
 else {
              ItemStack is=event.getCurrentItem();
              trader.setStockItem(new StockItem(is.getTypeId() + ""String_Node_Str"" + is.getAmount()));
            }
          }
 else {
          }
          trader.setLastInv(false);
        }
      }
    }
  }
}"
51695,"@Override public void onSet(NPC npc){
  if (!npc.hasTrait(InventoryTrait.class)) {
    npc.addTrait(new InventoryTrait());
    npc.getTrait(InventoryTrait.class).loadInventory(npc.getId());
  }
}","@Override public void onSet(NPC npc){
  if (!npc.hasTrait(InventoryTrait.class)) {
    npc.addTrait(InventoryTrait.class);
  }
}"
51696,"@Override public void save(DataKey data){
}","@Override public void save(DataKey data){
  System.out.print(data);
  List<String> sellList=new ArrayList<String>();
  if (!sellStock.isEmpty())   for (  StockItem item : sellStock)   sellList.add(item.toString());
  List<String> buyList=new ArrayList<String>();
  if (!buyStock.isEmpty())   for (  StockItem item : buyStock)   buyList.add(item.toString());
  data.setRaw(""String_Node_Str"",sellList);
  data.setRaw(""String_Node_Str"",buyList);
}"
51697,"@SuppressWarnings(""String_Node_Str"") @Override public void load(DataKey data) throws NPCLoadException {
}","@SuppressWarnings(""String_Node_Str"") @Override public void load(DataKey data) throws NPCLoadException {
  if (data.keyExists(""String_Node_Str"")) {
    for (    String item : (List<String>)data.getRaw(""String_Node_Str"")) {
      sellStock.add(new StockItem(item));
    }
  }
  if (data.keyExists(""String_Node_Str"")) {
    for (    String item : (List<String>)data.getRaw(""String_Node_Str""))     buyStock.add(new StockItem(item));
  }
}"
51698,"@SuppressWarnings(""String_Node_Str"") @EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      if (!trader.getStatus().equals(Status.PLAYER_MANAGE) && top) {
        StockItem si=null;
        if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))           si=trader.getStockItem();
 else           si=sr.itemForSell(event.getSlot());
          if (si != null) {
            if (event.isShiftClick()) {
              if (si.hasMultipleAmouts()) {
                if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
 else {
                if (econ.has(p.getName(),si.getPrice())) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ si.getPrice()+ ""String_Node_Str"");
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
 else {
              if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
                  trader.setStatus(Status.PLAYER_SELL);
                  trader.setStockItem(null);
                }
 else {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))                   p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
                }
              }
 else               if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                if (si.hasMultipleAmouts()) {
                  if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                    trader.getInventory().clear();
                    InventoryTrait.setInventoryWith(trader.getInventory(),si);
                    trader.setStatus(Status.PLAYER_SELL_AMOUT);
                    trader.setStockItem(si);
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice()+ ""String_Node_Str"");
                }
              }
            }
          }
 else           if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
            trader.getInventory().clear();
            sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
            trader.setStatus(Status.PLAYER_BUY);
            trader.setStockItem(null);
          }
        }
 else         if (trader.getStatus().equals(Status.PLAYER_BUY)) {
          si=sr.wantItemBuy(event.getSlot());
          if (si != null) {
            if (si.getItemStack().getType().equals(event.getCursor().getType())) {
              econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
              event.setCursor(new ItemStack(Material.AIR));
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
            }
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
          }
        }
        event.setCancelled(true);
      }
 else {
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @EventHandler public void inventoryClick(InventoryClickEvent event){
  if (event.getRawSlot() < 0)   return;
  if (event.getWhoClicked() instanceof Player) {
    Player p=(Player)event.getWhoClicked();
    if (state.containsKey(p.getName())) {
      TraderStatus trader=state.get(p.getName());
      InventoryTrait sr=trader.getTrader().getTrait(InventoryTrait.class);
      boolean top=event.getView().convertSlot(event.getRawSlot()) == event.getRawSlot();
      if (!trader.getStatus().equals(Status.PLAYER_MANAGE) && top) {
        StockItem si=null;
        if (trader.getStatus().equals(Status.PLAYER_SELL) || trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
          if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT))           si=trader.getStockItem();
 else           si=sr.itemForSell(event.getSlot());
          if (si != null) {
            if (event.isShiftClick()) {
              if (si.hasMultipleAmouts()) {
                if (econ.has(p.getName(),si.getPrice(event.getSlot()))) {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR)) {
                    econ.withdrawPlayer(p.getName(),si.getPrice(event.getSlot()));
                    p.getInventory().addItem(event.getCurrentItem());
                    p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCurrentItem().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
 else {
                if (econ.has(p.getName(),si.getPrice())) {
                  econ.withdrawPlayer(p.getName(),si.getPrice());
                  p.getInventory().addItem(si.getItemStack());
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getItemStack().getAmount()+ ""String_Node_Str""+ si.getPrice()+ ""String_Node_Str"");
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
                }
              }
            }
 else {
              if (trader.getStatus().equals(Status.PLAYER_SELL_AMOUT)) {
                if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
                  trader.getInventory().clear();
                  sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
                  trader.setStatus(Status.PLAYER_SELL);
                  trader.setStockItem(null);
                }
 else {
                  if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)14)) && !event.getCurrentItem().getType().equals(Material.AIR))                   p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
                }
              }
 else               if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                if (si.hasMultipleAmouts()) {
                  if (trader.getStatus().equals(Status.PLAYER_SELL)) {
                    trader.getInventory().clear();
                    InventoryTrait.setInventoryWith(trader.getInventory(),si);
                    trader.setStatus(Status.PLAYER_SELL_AMOUT);
                    trader.setStockItem(si);
                  }
                }
 else {
                  p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice()+ ""String_Node_Str"");
                }
              }
            }
          }
 else           if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)5)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
            trader.getInventory().clear();
            sr.inventoryView(trader.getInventory(),Status.PLAYER_BUY);
            trader.setStatus(Status.PLAYER_BUY);
            trader.setStockItem(null);
          }
        }
 else         if (trader.getStatus().equals(Status.PLAYER_BUY)) {
          si=sr.wantItemBuy(event.getSlot());
          if (si != null) {
            if (si.getItemStack().getType().equals(event.getCursor().getType())) {
              econ.depositPlayer(p.getName(),si.getPrice() * event.getCursor().getAmount());
              p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + event.getCursor().getAmount()+ ""String_Node_Str""+ si.getPrice(event.getSlot())+ ""String_Node_Str"");
              event.setCursor(new ItemStack(Material.AIR));
            }
 else {
              if (!event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && !event.getCurrentItem().getType().equals(Material.AIR))               p.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + si.getPrice(event.getSlot())+ ""String_Node_Str"");
            }
          }
 else {
            if (event.getCurrentItem().equals(new ItemStack(Material.WOOL,1,(short)0,(byte)3)) && (event.getSlot() == trader.getInventory().getSize() - 1)) {
              trader.getInventory().clear();
              sr.inventoryView(trader.getInventory(),Status.PLAYER_SELL);
              trader.setStatus(Status.PLAYER_SELL);
              trader.setStockItem(null);
            }
          }
        }
        event.setCancelled(true);
      }
 else {
      }
    }
  }
}"
51699,"/** 
 * Command created to add new nodes to a container.
 */
@SuppressWarnings(""String_Node_Str"") @Override protected Command getCreateCommand(CreateRequest request){
  Assert.isLegal(getHost().getModel() instanceof OPMContainer,this.getClass().toString() + ""String_Node_Str"");
  OPMContainer model=(OPMContainer)getHost().getModel();
  Command retVal=null;
  EClass newObjectType=(EClass)request.getNewObjectType();
  if (OPMPackage.eINSTANCE.getOPMNode().isSuperTypeOf(newObjectType)) {
    if (!OpmValidator.eINSTANCE.validateContaiment(model,newObjectType)) {
      return null;
    }
    OPMNodeCreateCommand command=new OPMNodeCreateCommand();
    Rectangle constraints=(Rectangle)getConstraintFor(request);
    if (constraints.getSize().isEmpty()) {
      constraints.setSize(DEFAULT_THING_DIMENSION);
    }
    command.setConstraints(constraints);
    OPMContainer container=(OPMContainer)getHost().getModel();
    if (container instanceof OPMDecorated<?>)     container=((OPMDecorated<OPMContainer>)container).getDecorated();
    command.setContainer(container);
    command.setNode((OPMNode)(request.getNewObject()));
    retVal=command;
  }
  return retVal;
}","/** 
 * Command created to add new nodes to a container.
 */
@SuppressWarnings(""String_Node_Str"") @Override protected Command getCreateCommand(CreateRequest request){
  Assert.isLegal(getHost().getModel() instanceof OPMContainer,this.getClass().toString() + ""String_Node_Str"");
  OPMContainer model=(OPMContainer)getHost().getModel();
  Command retVal=null;
  EClass newObjectType=(EClass)request.getNewObjectType();
  if (OPMPackage.eINSTANCE.getOPMNode().isSuperTypeOf(newObjectType)) {
    if (!OpmValidator.eINSTANCE.validateContainment(model,newObjectType)) {
      return null;
    }
    OPMNodeCreateCommand command=new OPMNodeCreateCommand();
    Rectangle constraints=(Rectangle)getConstraintFor(request);
    if (constraints.getSize().isEmpty()) {
      constraints.setSize(DEFAULT_THING_DIMENSION);
    }
    command.setConstraints(constraints);
    OPMContainer container=(OPMContainer)getHost().getModel();
    if (container instanceof OPMDecorated<?>)     container=((OPMDecorated<OPMContainer>)container).getDecorated();
    command.setContainer(container);
    command.setNode((OPMNode)(request.getNewObject()));
    retVal=command;
  }
  return retVal;
}"
51700,"public static OpmValidatorImpl init(){
  if (instance == null) {
    OpmValidatorImpl validator=new OpmValidatorImpl();
    validator.initContaimentRules();
    validator.initLinkRules();
    instance=validator;
  }
  return instance;
}","public static OpmValidatorImpl init(){
  if (instance == null) {
    OpmValidatorImpl validator=new OpmValidatorImpl();
    validator.initContainmentRules();
    validator.initLinkRules();
    instance=validator;
  }
  return instance;
}"
51701,"/** 
 * Command created to add new nodes to a container.
 */
@Override protected Command getCreateCommand(CreateRequest request){
  if (!canGetChildCommand())   return null;
  ContainerInstance model=(ContainerInstance)getHost().getModel();
  Command retVal=null;
  NodeInstance newNode=(NodeInstance)request.getNewObject();
  if (opmodelValidator.validateContaiment(model,newNode)) {
    OPModelNodeCreateCommand command=new OPModelNodeCreateCommand();
    Rectangle constraints=(Rectangle)getConstraintFor(request);
    if (constraints.getSize().isEmpty()) {
      constraints.setSize(DEFAULT_NODE_DIMENSION);
    }
    command.setConstraints(constraints);
    command.setContainer(model);
    command.setNode(newNode);
    retVal=command;
  }
  return retVal;
}","/** 
 * Command created to add new nodes to a container.
 */
@Override protected Command getCreateCommand(CreateRequest request){
  if (!canGetChildCommand())   return null;
  ContainerInstance model=(ContainerInstance)getHost().getModel();
  Command retVal=null;
  NodeInstance newNode=(NodeInstance)request.getNewObject();
  if (opmodelValidator.validateContainment(model,newNode)) {
    OPModelNodeCreateCommand command=new OPModelNodeCreateCommand();
    Rectangle constraints=(Rectangle)getConstraintFor(request);
    if (constraints.getSize().isEmpty()) {
      constraints.setSize(DEFAULT_NODE_DIMENSION);
    }
    command.setConstraints(constraints);
    command.setContainer(model);
    command.setNode(newNode);
    retVal=command;
  }
  return retVal;
}"
51702,"public OpmodelValidator(OPmetaDefinition interpretation){
  this.interpretation=interpretation;
  linkValidator=new LinkValidator();
  contaimentValidator=new ContainmentValidator();
  initValidationRules();
}","public OpmodelValidator(OPmetaDefinition interpretation){
  this.interpretation=interpretation;
  linkValidator=new LinkValidator();
  containmentValidator=new ContainmentValidator();
  initValidationRules();
}"
51703,"private void initValidationRules(){
  List<OPmodelLinkValidationRule> rawLinkRules=interpretation.getLinkValidationRules();
  List<OPmodelContainmentValidationRule> rawContaimentRules=interpretation.getContainmentValidationRules();
  for (  OPmodelLinkValidationRule rule : rawLinkRules) {
    ElementTypeDecriptor from=new ElementTypeDecriptor(rule.getSourceType());
    ElementTypeDecriptor to=new ElementTypeDecriptor(rule.getTargetType());
    ElementTypeDecriptor link=new ElementTypeDecriptor(rule.getLinkType());
    linkValidator.addRule(from,link,to,rule.isValid());
  }
  for (  OPmodelContainmentValidationRule rule : rawContaimentRules) {
    ElementTypeDecriptor container=new ElementTypeDecriptor(rule.getContainerType());
    ElementTypeDecriptor containedItem=new ElementTypeDecriptor(rule.getNodeType());
    contaimentValidator.addRule(container,containedItem,rule.isValid());
  }
  try {
    linkValidator.finalizeInit();
    contaimentValidator.finalizeInit();
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","private void initValidationRules(){
  List<OPmodelLinkValidationRule> rawLinkRules=interpretation.getLinkValidationRules();
  List<OPmodelContainmentValidationRule> rawContainmentRules=interpretation.getContainmentValidationRules();
  for (  OPmodelLinkValidationRule rule : rawLinkRules) {
    ElementTypeDecriptor from=new ElementTypeDecriptor(rule.getSourceType());
    ElementTypeDecriptor to=new ElementTypeDecriptor(rule.getTargetType());
    ElementTypeDecriptor link=new ElementTypeDecriptor(rule.getLinkType());
    linkValidator.addRule(from,link,to,rule.isValid());
  }
  for (  OPmodelContainmentValidationRule rule : rawContainmentRules) {
    ElementTypeDecriptor container=new ElementTypeDecriptor(rule.getContainerType());
    ElementTypeDecriptor containedItem=new ElementTypeDecriptor(rule.getNodeType());
    containmentValidator.addRule(container,containedItem,rule.isValid());
  }
  try {
    linkValidator.finalizeInit();
    containmentValidator.finalizeInit();
  }
 catch (  Exception ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}"
51704,"private void fillOpmContainmentRules(List<OPMetaModelContainmentValidationRule> contaimentRules){
  OPMetaModelContainmentValidationRule rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(true);
  contaimentRules.add(rule);
  rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(false);
  contaimentRules.add(rule);
  rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(true);
  contaimentRules.add(rule);
  rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(true);
  contaimentRules.add(rule);
}","private void fillOpmContainmentRules(List<OPMetaModelContainmentValidationRule> containmentRules){
  OPMetaModelContainmentValidationRule rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(true);
  containmentRules.add(rule);
  rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(false);
  containmentRules.add(rule);
  rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(true);
  containmentRules.add(rule);
  rule=opmetaFactory.eINSTANCE.createOPMetaModelContainmentValidationRule();
  rule.setContainerTypeName(""String_Node_Str"");
  rule.setNodeTypeName(""String_Node_Str"");
  rule.setValid(true);
  containmentRules.add(rule);
}"
51705,"@Override protected void outlineShape(Graphics g){
  g.drawPolyline(getPoints());
  PointList points=getPoints();
  Point source=points.getFirstPoint();
  Point pointAfterSource=points.getPoint(1);
  Point target=points.getLastPoint();
  Point pointBeforeTarget=points.getPoint(points.size() - 2);
switch (kind) {
case EFFECT:
    arrow.setLocation(source);
  arrow.setReferencePoint(pointAfterSource);
g.drawPolyline(arrow.getPoints());
case CONSUMPTION:
case RESULT:
case INVOCATION:
arrow.setLocation(target);
arrow.setReferencePoint(pointBeforeTarget);
g.drawPolyline(arrow.getPoints());
break;
case INSTRUMENT:
int radius=OPMFigureConstants.agentCircleRadius;
g.pushState();
g.setBackgroundColor(ColorConstants.black);
g.fillOval(target.x() - radius,target.y() - radius,radius * 2,radius * 2);
g.setBackgroundColor(ColorConstants.white);
g.fillOval(target.x() - (radius - 2),target.y() - (radius - 2),(radius - 2) * 2,(radius - 2) * 2);
g.popState();
break;
}
switch (activationKind) {
case CONDITION:
if (pointBeforeTarget.x() < target.x()) g.drawText(""String_Node_Str"",target.x() - 20,target.y() - 20);
 else g.drawText(""String_Node_Str"",target.x() + 20,target.y() - 20);
break;
case EVENT:
if (pointBeforeTarget.x() < target.x()) g.drawText(""String_Node_Str"",target.x() - 20,target.y() - 20);
 else g.drawText(""String_Node_Str"",target.x() + 20,target.y() - 20);
}
}","@Override protected void outlineShape(Graphics g){
  g.drawPolyline(getPoints());
  PointList points=getPoints();
  Point source=points.getFirstPoint();
  Point pointAfterSource=points.getPoint(1);
  Point target=points.getLastPoint();
  Point pointBeforeTarget=points.getPoint(points.size() - 2);
  int radius=OPMFigureConstants.agentCircleRadius;
switch (kind) {
case EFFECT:
    arrow.setLocation(source);
  arrow.setReferencePoint(pointAfterSource);
g.drawPolyline(arrow.getPoints());
case CONSUMPTION:
case RESULT:
case INVOCATION:
arrow.setLocation(target);
arrow.setReferencePoint(pointBeforeTarget);
g.drawPolyline(arrow.getPoints());
break;
case INSTRUMENT:
g.pushState();
g.setBackgroundColor(ColorConstants.black);
g.fillOval(target.x() - radius,target.y() - radius,radius * 2,radius * 2);
g.setBackgroundColor(ColorConstants.white);
g.fillOval(target.x() - (radius - 2),target.y() - (radius - 2),(radius - 2) * 2,(radius - 2) * 2);
g.popState();
break;
case AGENT:
g.pushState();
g.setBackgroundColor(ColorConstants.black);
g.fillOval(target.x() - radius,target.y() - radius,radius * 2,radius * 2);
g.popState();
break;
}
switch (activationKind) {
case CONDITION:
if (pointBeforeTarget.x() < target.x()) g.drawText(""String_Node_Str"",target.x() - 20,target.y() - 20);
 else g.drawText(""String_Node_Str"",target.x() + 20,target.y() - 20);
break;
case EVENT:
if (pointBeforeTarget.x() < target.x()) g.drawText(""String_Node_Str"",target.x() - 20,target.y() - 20);
 else g.drawText(""String_Node_Str"",target.x() + 20,target.y() - 20);
}
}"
51706,"@Override protected List getModelChildren(){
  OPMNode model=(OPMNode)getModel();
  if (model instanceof OPMContainer) {
    OPMContainer container=(OPMContainer)model;
    return Collections.unmodifiableList(container.getNodes());
  }
 else {
    return Collections.EMPTY_LIST;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected List getModelChildren(){
  OPMNode model=(OPMNode)getModel();
  if (model instanceof OPMContainer) {
    OPMContainer container=(OPMContainer)model;
    return Collections.unmodifiableList(container.getNodes());
  }
 else {
    return Collections.EMPTY_LIST;
  }
}"
51707,"@Override public ConnectionAnchor getTargetConnectionAnchor(Request request){
  if (getFigure() instanceof LabelFigure) {
    return null;
  }
 else {
    return ((OPMNodeFigure)getFigure()).getTargetConnectionAnchor();
  }
}","@Override public ConnectionAnchor getTargetConnectionAnchor(Request request){
  if (getFigure() instanceof OPMNodeFigure) {
    return ((OPMNodeFigure)getFigure()).getTargetConnectionAnchor();
  }
 else {
    return null;
  }
}"
51708,"@Override public ConnectionAnchor getSourceConnectionAnchor(Request request){
  if (getFigure() instanceof LabelFigure) {
    return null;
  }
 else {
    return ((OPMNodeFigure)getFigure()).getSourceConnectionAnchor();
  }
}","@Override public ConnectionAnchor getSourceConnectionAnchor(Request request){
  if (getFigure() instanceof OPMNodeFigure) {
    return ((OPMNodeFigure)getFigure()).getTargetConnectionAnchor();
  }
 else {
    return null;
  }
}"
51709,"@Override public List<OPMLink> getLinks(){
  recreateNodesAndLinks();
  return new ArrayList(links);
}","@Override public List<OPMLink> getLinks(){
  recreateNodesAndLinks();
  return new ArrayList<>(links);
}"
51710,"public OPMNamedElementDirectEditManager(GraphicalEditPart source,Class editorType,CellEditorLocator locator,Label label){
  super(source,editorType,locator);
  this.label=label;
}","public OPMNamedElementDirectEditManager(GraphicalEditPart source,Class<?> editorType,CellEditorLocator locator,Label label){
  super(source,editorType,locator);
  this.label=label;
}"
51711,"/** 
 * Currently the class only adapts to create a   {@link SnapToHelper} when the editor is in snapping mode (either togrid or to shapes).
 */
@Override public Object getAdapter(Class key){
  if (key == SnapToHelper.class) {
    List<SnapToHelper> helpers=new ArrayList<SnapToHelper>();
    if (Boolean.TRUE.equals(getViewer().getProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED))) {
      helpers.add(new SnapToGeometry(this));
    }
    if (Boolean.TRUE.equals(getViewer().getProperty(SnapToGrid.PROPERTY_GRID_ENABLED))) {
      helpers.add(new SnapToGrid(this));
    }
    if (helpers.size() == 0) {
      return null;
    }
 else {
      return new CompoundSnapToHelper(helpers.toArray(new SnapToHelper[0]));
    }
  }
  return super.getAdapter(key);
}","/** 
 * Currently the class only adapts to create a   {@link SnapToHelper} when the editor is in snapping mode (either togrid or to shapes).
 */
@SuppressWarnings(""String_Node_Str"") @Override public Object getAdapter(Class key){
  if (key == SnapToHelper.class) {
    List<SnapToHelper> helpers=new ArrayList<SnapToHelper>();
    if (Boolean.TRUE.equals(getViewer().getProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED))) {
      helpers.add(new SnapToGeometry(this));
    }
    if (Boolean.TRUE.equals(getViewer().getProperty(SnapToGrid.PROPERTY_GRID_ENABLED))) {
      helpers.add(new SnapToGrid(this));
    }
    if (helpers.size() == 0) {
      return null;
    }
 else {
      return new CompoundSnapToHelper(helpers.toArray(new SnapToHelper[0]));
    }
  }
  return super.getAdapter(key);
}"
51712,"private void setStructuralLinkAggregatorPosition(CreateConnectionRequest request){
  OPMStructuralLink structuralLink=(OPMStructuralLink)request.getNewObject();
  OPMNode source=(OPMNode)request.getSourceEditPart().getModel();
  if (source instanceof OPMDecorated<?>)   source=(OPMNode)((OPMDecorated<OPMNode>)source).getDecorated();
  OPMNode target=(OPMNode)request.getTargetEditPart().getModel();
  if (target instanceof OPMDecorated<?>)   target=(OPMNode)((OPMDecorated<OPMNode>)target).getDecorated();
  structuralLink.setAggregatorPosition(getAggregatorPosition(source,target));
}","private void setStructuralLinkAggregatorPosition(CreateConnectionRequest request){
  OPMStructuralLink structuralLink=(OPMStructuralLink)request.getNewObject();
  OPMNode source=(OPMNode)request.getSourceEditPart().getModel();
  if (source instanceof OPMDecorated<?>)   source=(OPMNode)((OPMDecorated<?>)source).getDecorated();
  OPMNode target=(OPMNode)request.getTargetEditPart().getModel();
  if (target instanceof OPMDecorated<?>)   target=(OPMNode)((OPMDecorated<?>)target).getDecorated();
  structuralLink.setAggregatorPosition(getAggregatorPosition(source,target));
}"
51713,"/** 
 * Create a command used to begin connecting to nodes.   {@link OPMStructuralLinkAggregatorEditPart} nodes cannot besource nodes, therefore in this case a  {@link UnexecutableCommand} is returned.
 * @return a {@link Command} that contains the initial information neede tocreate a connection between two nodes.
 */
@Override protected Command getConnectionCreateCommand(CreateConnectionRequest request){
  if (request.getSourceEditPart() instanceof OPMStructuralLinkAggregatorEditPart) {
    return null;
  }
  if (request.getNewObject() instanceof OPMStructuralLinkAggregator) {
    request.setStartCommand(new Command(){
    }
);
    return request.getStartCommand();
  }
  OPMLinkCreateCommand result=new OPMLinkCreateCommand();
  OPMNode source=(OPMNode)getHost().getModel();
  if (source instanceof OPMDecorated<?>)   source=(OPMNode)((OPMDecorated<?>)source).getDecorated();
  result.setSource(source);
  result.setLink((OPMLink)request.getNewObject());
  OPMObjectProcessDiagram opd=OPDAnalysis.findOPD((OPMNode)getHost().getModel());
  if (opd instanceof OPMDecorated<?>)   opd=(OPMObjectProcessDiagram)((OPMDecorated<?>)opd).getDecorated();
  result.setOPD(opd);
  request.setStartCommand(result);
  return result;
}","/** 
 * Create a command used to begin connecting to nodes.   {@link OPMStructuralLinkAggregatorEditPart} nodes cannot besource nodes, therefore in this case a  {@link UnexecutableCommand} is returned.
 * @return a {@link Command} that contains the initial information neede tocreate a connection between two nodes.
 */
@Override protected Command getConnectionCreateCommand(CreateConnectionRequest request){
  if (getHost() instanceof OPMStructuralLinkAggregatorEditPart) {
    return null;
  }
  OPMLinkCreateCommand result=new OPMLinkCreateCommand();
  OPMNode source=(OPMNode)getHost().getModel();
  if (source instanceof OPMDecorated<?>)   source=(OPMNode)((OPMDecorated<?>)source).getDecorated();
  result.setSource(source);
  result.setLink((OPMLink)request.getNewObject());
  OPMObjectProcessDiagram opd=OPDAnalysis.findOPD((OPMNode)getHost().getModel());
  if (opd instanceof OPMDecorated<?>)   opd=(OPMObjectProcessDiagram)((OPMDecorated<?>)opd).getDecorated();
  result.setOPD(opd);
  request.setStartCommand(result);
  return result;
}"
51714,"/** 
 * Retrieves the command created by  {@link OPMNodeGraphicalNodeEditPolicy#getConnectionCreateCommand(CreateConnectionRequest) getConnectionCreateCommand}, and adds it information so that the command can be executed.   {@link OPMStructuralLinkAggregatorEditPart} nodes cannotbe source nodes, therefore in this case a  {@link UnexecutableCommand} isreturned.
 * @return a {@link Command} that can be executed to create a connectionbetween two nodes.
 */
@Override protected Command getConnectionCompleteCommand(CreateConnectionRequest request){
  if (request.getStartCommand() == null || request.getTargetEditPart() instanceof OPMStructuralLinkAggregatorEditPart) {
    return null;
  }
  OPMLinkCreateCommand linkCreateCommand=(OPMLinkCreateCommand)request.getStartCommand();
  OPMNode target=(OPMNode)getHost().getModel();
  if (target instanceof OPMDecorated<?>)   target=(OPMNode)((OPMDecorated<?>)target).getDecorated();
  linkCreateCommand.setTarget(target);
  if (request.getNewObject() instanceof OPMStructuralLink) {
    setStructuralLinkAggregatorPosition(request);
  }
  return linkCreateCommand;
}","/** 
 * Retrieves the command created by  {@link OPMNodeGraphicalNodeEditPolicy#getConnectionCreateCommand(CreateConnectionRequest) getConnectionCreateCommand}, and adds it information so that the command can be executed.   {@link OPMStructuralLinkAggregatorEditPart} nodes cannotbe source nodes, therefore in this case a  {@link UnexecutableCommand} isreturned.
 * @return a {@link Command} that can be executed to create a connectionbetween two nodes.
 */
@Override protected Command getConnectionCompleteCommand(CreateConnectionRequest request){
  if (request.getStartCommand() == null || request.getTargetEditPart() instanceof OPMStructuralLinkAggregatorEditPart || getHost() instanceof OPMStructuralLinkAggregatorEditPart) {
    return null;
  }
  OPMLinkCreateCommand linkCreateCommand=(OPMLinkCreateCommand)request.getStartCommand();
  OPMNode target=(OPMNode)getHost().getModel();
  if (target instanceof OPMDecorated<?>)   target=(OPMNode)((OPMDecorated<?>)target).getDecorated();
  linkCreateCommand.setTarget(target);
  if (request.getNewObject() instanceof OPMStructuralLink) {
    setStructuralLinkAggregatorPosition(request);
  }
  return linkCreateCommand;
}"
51715,"/** 
 * <p> When the user requests the creation of a structural link, the following is done: </p> <ol> <li>If this is the first structural link of its kind between the source and target nodes, we create a new aggregator and connect it to the source and target.</li> <li>If there already is an aggregator of its kind between the nodes, we only add a new link from the aggregator to the new target.</li> </ol>
 * @param request the user request to create a new strucutral link between the nodes.
 * @return a command that creates the links as stated above.
 */
private Command handleOPMStructuralLinkRequest(CreateConnectionRequest request){
  Command command=null;
  OPMNode sNode=(OPMNode)request.getSourceEditPart().getModel();
  OPMNode tNode=(OPMNode)request.getTargetEditPart().getModel();
  OPMStructuralLink agrNode=(OPMStructuralLink)request.getNewObject();
  boolean aggregatorFound=false;
  for (  OPMLink structuralLink : OPDAnalysis.findOutgoingStructuralLinks(sNode)) {
    OPMStructuralLink existingAggregator=(OPMStructuralLink)structuralLink.getTarget();
    if (agrNode.eClass().isInstance(existingAggregator)) {
      aggregatorFound=true;
      agrNode=existingAggregator;
    }
  }
  if (aggregatorFound) {
  }
 else {
    OPMLinkCreateCommand linkCreateCommand=(OPMLinkCreateCommand)request.getStartCommand();
    linkCreateCommand.setTarget((OPMNode)getHost().getModel());
    agrNode.setAggregatorPosition(getAggregatorPosition(sNode,tNode));
    command=linkCreateCommand;
  }
  return command;
}","/** 
 * <p> When the user requests the creation of a structural link, the following is done: </p> <ol> <li>If this is the first structural link of its kind between the source and target nodes, we create a new aggregator and connect it to the source and target.</li> <li>If there already is an aggregator of its kind between the nodes, we only add a new link from the aggregator to the new target.</li> </ol>
 * @param request the user request to create a new strucutral link between the nodes.
 * @return a command that creates the links as stated above.
 */
private Command handleOPMStructuralLinkRequest(CreateConnectionRequest request){
  Command command=null;
  OPMNode sNode=(OPMNode)request.getSourceEditPart().getModel();
  OPMNode tNode=(OPMNode)request.getTargetEditPart().getModel();
  OPMStructuralLink agrNode=(OPMStructuralLink)request.getNewObject();
  boolean aggregatorFound=false;
  OPMStructuralLink existingAggregator=(OPMStructuralLink)OPDAnalysis.findFirstOutgoingLink(sNode,agrNode.eClass());
  if (null != existingAggregator) {
    aggregatorFound=true;
    agrNode=existingAggregator;
  }
  if (aggregatorFound) {
  }
 else {
    OPMLinkCreateCommand linkCreateCommand=(OPMLinkCreateCommand)request.getStartCommand();
    linkCreateCommand.setTarget((OPMNode)getHost().getModel());
    linkCreateCommand.getLink().setRouterKind(OPMLinkRouterKind.MANHATTAN);
    agrNode.setAggregatorPosition(getAggregatorPosition(sNode,tNode));
    command=linkCreateCommand;
  }
  return command;
}"
51716,"/** 
 * Add tools to create structural links in the diagram.
 */
private void addOPMStructuralLinkTools(){
  ConnectionCreationToolEntry entry;
  entry=new ConnectionCreationToolEntry(""String_Node_Str"",""String_Node_Str"",new OPMAggregationStructuralLinkAggregatorFactory(),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""));
  group.add(entry);
  entry=new ConnectionCreationToolEntry(""String_Node_Str"",""String_Node_Str"",new OPMExhibitionStructuralLinkAggregatorFactory(),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""));
  group.add(entry);
  entry=new ConnectionCreationToolEntry(""String_Node_Str"",""String_Node_Str"",new OPMGeneralizationStructuralLinkAggregatorFactory(),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""));
  group.add(entry);
}","/** 
 * Add tools to create structural links in the diagram.
 */
private void addOPMStructuralLinkTools(){
  ConnectionCreationToolEntry entry;
  entry=new ConnectionCreationToolEntry(""String_Node_Str"",""String_Node_Str"",new OPMAggregationLinkFactory(),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""));
  group.add(entry);
  entry=new ConnectionCreationToolEntry(""String_Node_Str"",""String_Node_Str"",new OPMExhibitionLinkFactory(),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""));
  group.add(entry);
  entry=new ConnectionCreationToolEntry(""String_Node_Str"",""String_Node_Str"",new OPMGeneralizationLinkFactory(),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""),ImageDescriptor.createFromFile(this.getClass(),""String_Node_Str""));
  group.add(entry);
}"
51717,"@Override public Object getObjectType(){
  return OPMProceduralLink.class;
}","@Override public Object getObjectType(){
  return OPMAgentLink.class;
}"
51718,"@Override public Object getNewObject(){
  OPMProceduralLink link=OPMFactory.eINSTANCE.createOPMProceduralLink();
  link.setKind(OPMProceduralLinkKind.AGENT);
  link.setId(OPMIdManager.getNextId());
  return link;
}","@Override public Object getNewObject(){
  OPMAgentLink link=OPMFactory.eINSTANCE.createOPMAgentLink();
  link.setId(OPMIdManager.getNextId());
  return link;
}"
51719,"@Override public Object getObjectType(){
  return OPMProceduralLink.class;
}","@Override public Object getObjectType(){
  return OPMConsumptionConditionLink.class;
}"
51720,"@Override public Object getNewObject(){
  OPMProceduralLink link=OPMFactory.eINSTANCE.createOPMProceduralLink();
  link.setKind(OPMProceduralLinkKind.CONSUMPTION_CONDITION);
  link.setId(OPMIdManager.getNextId());
  return link;
}","@Override public Object getNewObject(){
  OPMConsumptionConditionLink link=OPMFactory.eINSTANCE.createOPMConsumptionConditionLink();
  link.setId(OPMIdManager.getNextId());
  return link;
}"
51721,"@Override public Object getObjectType(){
  return OPMProceduralLink.class;
}","@Override public Object getObjectType(){
  return OPMConsumptionEventLink.class;
}"
51722,"@Override public Object getNewObject(){
  OPMProceduralLink link=OPMFactory.eINSTANCE.createOPMProceduralLink();
  link.setKind(OPMProceduralLinkKind.CONSUMPTION_EVENT);
  link.setId(OPMIdManager.getNextId());
  return link;
}","@Override public Object getNewObject(){
  OPMConsumptionEventLink link=OPMFactory.eINSTANCE.createOPMConsumptionEventLink();
  link.setId(OPMIdManager.getNextId());
  return link;
}"
51723,"@Override public Object getObjectType(){
  return OPMProceduralLink.class;
}","@Override public Object getObjectType(){
  return OPMConsumptionLink.class;
}"
51724,"@Override public Object getNewObject(){
  OPMProceduralLink link=OPMFactory.eINSTANCE.createOPMProceduralLink();
  link.setKind(OPMProceduralLinkKind.CONSUMPTION);
  link.setId(OPMIdManager.getNextId());
  return link;
}","@Override public Object getNewObject(){
  OPMConsumptionLink link=OPMFactory.eINSTANCE.createOPMConsumptionLink();
  link.setId(OPMIdManager.getNextId());
  return link;
}"
51725,"@Override public Object getObjectType(){
  return OPMProceduralLink.class;
}","@Override public Object getObjectType(){
  return OPMEffectLink.class;
}"
51726,"@Override public Object getNewObject(){
  OPMProceduralLink link=OPMFactory.eINSTANCE.createOPMProceduralLink();
  link.setKind(OPMProceduralLinkKind.EFFECT);
  link.setId(OPMIdManager.getNextId());
  return link;
}","@Override public Object getNewObject(){
  OPMEffectLink link=OPMFactory.eINSTANCE.createOPMEffectLink();
  link.setId(OPMIdManager.getNextId());
  return link;
}"
51727,"/** 
 * Create a new aggregator figure depending on the aggregator kind. 
 * @param kind the {@link OPMStructuralLinkAggregatorKind} of the figure.
 */
public OPMStructuralLinkAggregatorFigure(final OPMStructuralLinkAggregatorKind kind){
  this.kind=kind;
  setLayoutManager(new XYLayout());
  triangle=new IsoscelesTriangle();
  triangle.setBackgroundColor(ColorConstants.black);
switch (kind) {
case AGGREGATION:
    triangle.setFill(true);
  break;
case GENERALIZATION:
triangle.setFill(false);
break;
case EXHIBITION:
triangle.setFill(false);
triangle.setLayoutManager(new XYLayout());
innerTriangle=new IsoscelesTriangle();
innerTriangle.setDirection(Orientable.NORTH);
triangle.add(innerTriangle);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + kind);
}
add(triangle);
}","/** 
 * Create a new aggregator figure depending on the aggregator kind. 
 * @param kind the {@link OPMStructuralLinkAggregatorKind} of the figure.
 */
public OPMStructuralLinkAggregatorFigure(final StructuralLinkKind kind){
  this.kind=kind;
  setLayoutManager(new XYLayout());
  triangle=new IsoscelesTriangle();
  triangle.setBackgroundColor(ColorConstants.black);
switch (kind) {
case AGGREGATION:
    triangle.setFill(true);
  break;
case GENERALIZATION:
triangle.setFill(false);
break;
case EXHIBITION:
triangle.setFill(false);
triangle.setLayoutManager(new XYLayout());
innerTriangle=new IsoscelesTriangle();
innerTriangle.setDirection(Orientable.NORTH);
triangle.add(innerTriangle);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + kind);
}
add(triangle);
}"
51728,"@Override protected void paintFigure(Graphics graphics){
  Rectangle bounds=getBounds().getCopy();
  setConstraint(triangle,new Rectangle(0,0,bounds.width,bounds.height));
  if (kind == OPMStructuralLinkAggregatorKind.EXHIBITION) {
    triangle.setConstraint(innerTriangle,new Rectangle(bounds.width / 3,bounds.height / 2,bounds.width / 3,bounds.height / 3));
  }
  triangle.invalidate();
}","@Override protected void paintFigure(Graphics graphics){
  Rectangle bounds=getBounds().getCopy();
  setConstraint(triangle,new Rectangle(0,0,bounds.width,bounds.height));
  if (kind == StructuralLinkKind.EXHIBITION) {
    triangle.setConstraint(innerTriangle,new Rectangle(bounds.width / 3,bounds.height / 2,bounds.width / 3,bounds.height / 3));
  }
  triangle.invalidate();
}"
51729,"/** 
 * Extend the connection created by   {@link OPMLinkEditPart#createFigure()} by adding decorations depending on thelink kind. An agent link is decorated at the target with black filled  {@link CircleDecoration}. An instrument link is decorated at the target with a white filled   {@link CircleDecoration}. A consumption or result link is decorated at the target with a   {@link PolylineDecoration} (which is an arrow). An effect link link is decoratedat the source and target with a  {@link PolylineDecoration}.
 * @return a decorated {@link PolylineConnection} figure.
 */
@Override protected PolylineConnection createFigure(){
  OPMProceduralLink model=(OPMProceduralLink)getModel();
  PolylineConnection connection=new OPMProceduralLinkFigure(model.getKind());
  connection.setLineWidth(OPMFigureConstants.connectionLineWidth);
  centerDecorationLabel=new Label();
  ConnectionLocator locator=new ConnectionLocator(connection,ConnectionLocator.MIDDLE);
  connection.add(centerDecorationLabel,locator);
  connection.setConnectionRouter(new BendpointConnectionRouter());
  return connection;
}","/** 
 * Extend the connection created by   {@link OPMLinkEditPart#createFigure()} by adding decorations depending on thelink kind. An agent link is decorated at the target with black filled  {@link CircleDecoration}. An instrument link is decorated at the target with a white filled   {@link CircleDecoration}. A consumption or result link is decorated at the target with a   {@link PolylineDecoration} (which is an arrow). An effect link link is decoratedat the source and target with a  {@link PolylineDecoration}.
 * @return a decorated {@link PolylineConnection} figure.
 */
@Override protected PolylineConnection createFigure(){
  OPMProceduralLink model=(OPMProceduralLink)getModel();
  ProceduralLinkKind linkKind=OPMProceduralLinkToProceduralLinkKindConverter.INSTANCE.Convert(model);
  PolylineConnection connection=new OPMProceduralLinkFigure(linkKind,model.getActivationKind());
  connection.setLineWidth(OPMFigureConstants.connectionLineWidth);
  centerDecorationLabel=new Label();
  ConnectionLocator locator=new ConnectionLocator(connection,ConnectionLocator.MIDDLE);
  connection.add(centerDecorationLabel,locator);
  connection.setConnectionRouter(new BendpointConnectionRouter());
  return connection;
}"
51730,"@Override protected IFigure createFigure(){
  OPMStructuralLinkAggregator model=(OPMStructuralLinkAggregator)getModel();
  figure=new OPMStructuralLinkAggregatorFigure(model.getKind());
  return figure;
}","@Override protected IFigure createFigure(){
  OPMStructuralLink model=(OPMStructuralLink)getModel();
  linkKind=OPMStructuralLinkToStructuralLinkKindConverter.INSTANCE.Convert(model);
  figure=new OPMStructuralLinkAggregatorFigure(linkKind);
  return figure;
}"
51731,"@Override protected void refreshVisuals(){
  OPMStructuralLinkAggregator model=(OPMStructuralLinkAggregator)getModel();
  ((GraphicalEditPart)getParent()).setLayoutConstraint(this,figure,model.getConstraints());
}","@Override protected void refreshVisuals(){
  OPMStructuralLink model=(OPMStructuralLink)getModel();
  ((GraphicalEditPart)getParent()).setLayoutConstraint(this,figure,model.getConstraints());
}"
51732,"/** 
 * {@inheritDoc}<p> The action is enabled if all the selected entities on the editor are  {@link OPMNodeEditPart} instances</p>
 */
@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  for (  Object selectedObject : getSelectedObjects()) {
    if (selectedObject instanceof OPMNodeEditPart) {
      return true;
    }
  }
  return false;
}","/** 
 * {@inheritDoc}<p> The action is enabled if all the selected entities on the editor are  {@link OPMNodeEditPart} instances</p>
 */
@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  for (  Object selectedObject : getSelectedObjects()) {
    if (!(selectedObject instanceof OPMNodeEditPart)) {
      return false;
    }
  }
  return true;
}"
51733,"/** 
 * Extend the connection creted by   {@link OPMLinkEditPart#createFigure()} byadding decorations depending on the link kind. An agent link is decorated at the target with black filled  {@link CircleDecoration}. An instrument link is decorated at the target with a white filled  {@link CircleDecoration}. A consumption or result link is decorated at the target with a   {@link PolylineDecoration} (which is an arrow). Aneffect link link is decorated at the source and target with a {@link PolylineDecoration}.
 * @return a decorated {@link PolylineConnection} figure.
 */
@Override protected PolylineConnection createFigure(){
  PolylineConnection connection=super.createFigure();
  OPMProceduralLink model=(OPMProceduralLink)getModel();
  decorateConnection(connection,model.getKind());
  sourceDecorationLabel=new Label();
  centerDecorationLabel=new Label();
  targetDecorationLabel=new Label();
  ConnectionLocator locator=new ConnectionLocator(connection,ConnectionLocator.SOURCE);
  connection.add(sourceDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.MIDDLE);
  connection.add(centerDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.TARGET);
  connection.add(targetDecorationLabel,locator);
  connection.add(centerDecorationLabel,locator);
  return connection;
}","/** 
 * Extend the connection created by   {@link OPMLinkEditPart#createFigure()}by adding decorations depending on the link kind. An agent link is decorated at the target with black filled   {@link CircleDecoration}. An instrument link is decorated at the target with a white filled  {@link CircleDecoration}. A consumption or result link is decorated at the target with a   {@link PolylineDecoration} (which is an arrow). Aneffect link link is decorated at the source and target with a {@link PolylineDecoration}.
 * @return a decorated {@link PolylineConnection} figure.
 */
@Override protected PolylineConnection createFigure(){
  PolylineConnection connection=super.createFigure();
  OPMProceduralLink model=(OPMProceduralLink)getModel();
  decorateConnection(connection,model.getKind());
  sourceDecorationLabel=new Label();
  centerDecorationLabel=new Label();
  targetDecorationLabel=new Label();
  ConnectionLocator locator=new ConnectionLocator(connection,ConnectionLocator.SOURCE);
  connection.add(sourceDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.MIDDLE);
  connection.add(centerDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.TARGET);
  connection.add(targetDecorationLabel,locator);
  return connection;
}"
51734,"@Override protected void createEditPolicies(){
  super.createEditPolicies();
  installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,new OPMStateDirectEditPolicy());
  installEditPolicy(""String_Node_Str"",new SnapFeedbackPolicy());
}","@Override protected void createEditPolicies(){
  super.createEditPolicies();
  installEditPolicy(""String_Node_Str"",new SnapFeedbackPolicy());
}"
51735,"/** 
 * This functions is ignored. Use   {@link IsoscelesTriangle#setDirection(int)}instead.
 */
@Override @Deprecated public void setOrientation(final int orientation){
}","/** 
 * This functions is ignored. Use  {@link IsoscelesTriangle#setDirection(int)} instead.
 */
@Override @Deprecated public void setOrientation(final int orientation){
}"
51736,"/** 
 * Validates the figure, drawing a vertical isosceles triangle filling the  figure's bounds.
 */
@Override public void validate(){
  super.validate();
  Rectangle r=getBounds().getCopy();
  r.shrink(getInsets());
  r.resize(-1,-1);
  Point p1=null, p2=null, p3=null;
switch (direction) {
case NORTH:
    p1=new Point(r.x + r.width / 2,r.y);
  p2=new Point(r.x,r.y + r.height);
p3=new Point(r.x + r.width,r.y + r.height);
break;
case SOUTH:
p1=new Point(r.x + r.width / 2,r.y + r.height);
p2=new Point(r.x,r.y);
p3=new Point(r.x + r.width,r.y);
break;
case EAST:
p1=new Point(r.x,r.y);
p2=new Point(r.x + r.width,r.y + r.height / 2);
p3=new Point(r.x,r.y + r.height);
break;
case WEST:
p1=new Point(r.x + r.width,r.y);
p2=new Point(r.x + r.width,r.y + r.height);
p3=new Point(r.x,r.y + r.height / 2);
}
triangle.removeAllPoints();
triangle.addPoint(p1);
triangle.addPoint(p2);
triangle.addPoint(p3);
}","/** 
 * Validates the figure, drawing a vertical isosceles triangle filling the figure's bounds.
 */
@Override public void validate(){
  super.validate();
  Rectangle r=getBounds().getCopy();
  r.shrink(getInsets());
  r.resize(-1,-1);
  Point p1=null, p2=null, p3=null;
switch (direction) {
case NORTH:
    p1=new Point(r.x + r.width / 2,r.y);
  p2=new Point(r.x,r.y + r.height);
p3=new Point(r.x + r.width,r.y + r.height);
break;
case SOUTH:
p1=new Point(r.x + r.width / 2,r.y + r.height);
p2=new Point(r.x,r.y);
p3=new Point(r.x + r.width,r.y);
break;
case EAST:
p1=new Point(r.x,r.y);
p2=new Point(r.x + r.width,r.y + r.height / 2);
p3=new Point(r.x,r.y + r.height);
break;
case WEST:
p1=new Point(r.x + r.width,r.y);
p2=new Point(r.x + r.width,r.y + r.height);
p3=new Point(r.x,r.y + r.height / 2);
}
triangle.removeAllPoints();
triangle.addPoint(p1);
triangle.addPoint(p2);
triangle.addPoint(p3);
}"
51737,"public void run(){
  serv.addError(SpannableString.valueOf(err));
  for (  Channel channel : serv.getChannels()) {
    channel.addError(SpannableString.valueOf(err));
  }
  if (adapter != null) {
    adapter.notifyDataSetChanged();
    if (channelAdapter != null)     channelAdapter.notifyDataSetChanged();
  }
}","public void run(){
  serv.addMessage(Server.createError(SpannableString.valueOf(err)));
  for (  Channel channel : serv.getChannels()) {
    channel.addMessage(Channel.createError(SpannableString.valueOf(err)));
  }
  if (adapter != null) {
    adapter.notifyDataSetChanged();
    if (channelAdapter != null)     channelAdapter.notifyDataSetChanged();
  }
}"
51738,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    if (channelList.getVisibility() == View.VISIBLE) {
      channelList.setVisibility(View.GONE);
    }
 else {
      moveTaskToBack(true);
    }
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_MENU) {
    if (channelList.getVisibility() == View.VISIBLE) {
      channelList.setVisibility(View.GONE);
    }
 else     if (channelList.getVisibility() == View.GONE) {
      channelList.setVisibility(View.VISIBLE);
    }
    return true;
  }
  return super.onKeyDown(keyCode,event);
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    if (channelList.getVisibility() == View.VISIBLE) {
      channelList.setVisibility(View.GONE);
    }
 else {
      moveTaskToBack(true);
    }
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_MENU) {
    if (channelList.getVisibility() == View.VISIBLE) {
      channelList.setVisibility(View.GONE);
    }
 else     if (channelList.getVisibility() == View.GONE) {
      channelList.setVisibility(View.VISIBLE);
      expandAllServerGroups();
    }
    return true;
  }
  return super.onKeyDown(keyCode,event);
}"
51739,"private void sendMessage(){
  if (this.commandInterpreter == null) {
    this.commandInterpreter=new CommandInterpreter(this.moeService,this);
  }
  String message=this.sendText.getText().toString();
  if (this.commandInterpreter.isCommand(message)) {
    this.commandInterpreter.interpret(message);
    this.sendText.setText(""String_Node_Str"");
  }
 else {
    if (message.length() >= 2 && message.substring(0,2).equals(""String_Node_Str"")) {
      message=message.substring(1,message.length());
    }
    if (this.currentChannel != null) {
      if (message.length() > 0) {
        if (this.currentChannel instanceof Server) {
          SpannedString error=SpannedString.valueOf(""String_Node_Str"");
          this.currentChannel.addError(error);
        }
 else {
          this.currentChannel.sendMessage(message);
        }
        this.sendText.setText(""String_Node_Str"");
        this.adapter.notifyDataSetChanged();
      }
    }
  }
}","private void sendMessage(){
  if (this.commandInterpreter == null) {
    this.commandInterpreter=new CommandInterpreter(this.moeService,this);
  }
  String message=this.sendText.getText().toString();
  if (this.commandInterpreter.isCommand(message)) {
    this.commandInterpreter.interpret(message);
    this.sendText.setText(""String_Node_Str"");
  }
 else {
    if (message.length() >= 2 && message.substring(0,2).equals(""String_Node_Str"")) {
      message=message.substring(1,message.length());
    }
    if (this.currentChannel != null) {
      if (message.length() > 0) {
        if (this.currentChannel instanceof Server) {
          this.currentChannel.addMessage(Channel.createError(SpannedString.valueOf(""String_Node_Str"")));
        }
 else {
          this.currentChannel.sendMessage(message);
        }
        this.sendText.setText(""String_Node_Str"");
        this.adapter.notifyDataSetChanged();
      }
    }
  }
}"
51740,"public void serverDisconnected(Server server,String error){
  if (server != null) {
    final String err=error;
    final Server serv=server;
    this.runOnUiThread(new Runnable(){
      public void run(){
        serv.addError(SpannableString.valueOf(err));
        for (        Channel channel : serv.getChannels()) {
          channel.addError(SpannableString.valueOf(err));
        }
        if (adapter != null) {
          adapter.notifyDataSetChanged();
          if (channelAdapter != null)           channelAdapter.notifyDataSetChanged();
        }
      }
    }
);
  }
}","public void serverDisconnected(Server server,String error){
  if (server != null) {
    final String err=error;
    final Server serv=server;
    this.runOnUiThread(new Runnable(){
      public void run(){
        serv.addMessage(Server.createError(SpannableString.valueOf(err)));
        for (        Channel channel : serv.getChannels()) {
          channel.addMessage(Channel.createError(SpannableString.valueOf(err)));
        }
        if (adapter != null) {
          adapter.notifyDataSetChanged();
          if (channelAdapter != null)           channelAdapter.notifyDataSetChanged();
        }
      }
    }
);
  }
}"
51741,"protected Boolean doInBackground(String... arguments){
  if (arguments.length < 1) {
    return false;
  }
  this.server=serverMap.get(arguments[0]);
  this.client=this.server.getClient();
  this.preferences=this.client.getServerPreferences();
  boolean connected=false;
  ServerPreferences.Host host=this.preferences.getHost();
  try {
    if (connectedEventListener != null) {
      channelJoined(server,null);
    }
    if (host.isSSL()) {
      if (host.verifySSL()) {
        this.client.connect(host.getHostname(),host.getPort(),host.getPassword(),SSLSocketFactory.getDefault());
      }
 else {
        this.client.connect(host.getHostname(),host.getPort(),host.getPassword(),new UtilSSLSocketFactory().trustAllCertificates());
      }
    }
 else {
      this.client.connect(host.getHostname(),host.getPort(),host.getPassword());
    }
    connected=true;
  }
 catch (  Exception ex) {
    Log.e(""String_Node_Str"",ex.getMessage());
    server.addError(Html.fromHtml(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str""));
    statusMessageReceived(server,null);
    return false;
  }
  return connected;
}","protected Boolean doInBackground(String... arguments){
  if (arguments.length < 1) {
    return false;
  }
  this.server=serverMap.get(arguments[0]);
  this.client=this.server.getClient();
  this.preferences=this.client.getServerPreferences();
  boolean connected=false;
  ServerPreferences.Host host=this.preferences.getHost();
  try {
    if (connectedEventListener != null) {
      channelJoined(server,null);
    }
    if (host.isSSL()) {
      if (host.verifySSL()) {
        this.client.connect(host.getHostname(),host.getPort(),host.getPassword(),SSLSocketFactory.getDefault());
      }
 else {
        this.client.connect(host.getHostname(),host.getPort(),host.getPassword(),new UtilSSLSocketFactory().trustAllCertificates());
      }
    }
 else {
      this.client.connect(host.getHostname(),host.getPort(),host.getPassword());
    }
    connected=true;
  }
 catch (  Exception ex) {
    statusMessageReceived(server,Server.createError(Html.fromHtml(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str"")));
    return false;
  }
  return connected;
}"
51742,"public void interpret(String message){
  if (message.startsWith(""String_Node_Str"")) {
    message=message.substring(1,message.length());
  }
  String[] parts=message.split(""String_Node_Str"");
  Client client=this.activity.getCurrentChannel().getClient();
  Server server=this.activity.getCurrentChannel().getServer();
  String command=parts[0];
  if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    String[] channels=parts[1].split(""String_Node_Str"");
    String[] passwords=null;
    if (parts.length > 2 && parts[2].split(""String_Node_Str"").length == channels.length) {
      passwords=parts[2].split(""String_Node_Str"");
    }
    for (int i=0; i < channels.length; i++) {
      if (!this.looksLikeChannel(channels[i])) {
        this.activity.getCurrentChannel().addError(SpannedString.valueOf(""String_Node_Str"" + channels[i]));
        this.service.activeChannelMessageReceived(this.activity.getCurrentChannel(),null);
        continue;
      }
      if (passwords != null) {
        client.joinChannel(channels[i],passwords[i]);
      }
 else {
        client.joinChannel(channels[i]);
      }
    }
  }
 else   if (command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) {
    if (parts.length == 1) {
      client.partChannel(this.activity.getCurrentChannel().getChannelInfo());
      this.service.channelParted(this.activity.getCurrentChannel(),client.getNick());
    }
 else {
      if (!this.looksLikeChannel(parts[1])) {
        client.partChannel(this.activity.getCurrentChannel().getChannelInfo(),parts[1]);
        this.service.channelParted(this.activity.getCurrentChannel(),client.getNick());
      }
 else {
        if (parts.length < 3) {
          Channel channel=server.getChannel(parts[1]);
          client.partChannel(channel.getChannelInfo());
          this.service.channelParted(channel,client.getNick());
        }
 else {
          Channel channel=server.getChannel(parts[1]);
          client.partChannel(channel.getChannelInfo(),parts[2]);
          this.service.channelParted(channel,client.getNick());
        }
      }
    }
  }
 else   if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    if (!client.userExists(parts[1])) {
      client.changeNick(parts[1]);
    }
 else {
      this.activity.getCurrentChannel().addError(SpannedString.valueOf(""String_Node_Str"" + parts[1]));
      this.service.activeChannelMessageReceived(this.activity.getCurrentChannel(),null);
    }
  }
 else   if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    for (int i=1; i < parts.length; i++) {
      client.sendRawLine(""String_Node_Str"" + parts[i]);
    }
  }
 else   if (command.equalsIgnoreCase(""String_Node_Str"") && parts.length > 1) {
    Channel channel;
    if (this.looksLikeChannel(parts[1])) {
      channel=server.getChannel(parts[1]);
    }
 else {
      channel=this.activity.getCurrentChannel();
    }
    client.setMode(channel.getChannelInfo(),message.substring(""String_Node_Str"".length() + 1,message.length()));
  }
 else   if (command.equalsIgnoreCase(""String_Node_Str"") && parts.length > 2) {
    if (this.looksLikeChannel(parts[1])) {
      client.sendCTCPCommand(server.getChannel(parts[1]).getChannelInfo(),parts[2]);
    }
 else {
      client.sendCTCPCommand(parts[1],parts[2]);
    }
  }
 else   if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    client.sendRawLine(message.substring(parts[0].length() + 1,message.length()));
  }
}","public void interpret(String message){
  if (message.startsWith(""String_Node_Str"")) {
    message=message.substring(1,message.length());
  }
  String[] parts=message.split(""String_Node_Str"");
  Client client=this.activity.getCurrentChannel().getClient();
  Server server=this.activity.getCurrentChannel().getServer();
  String command=parts[0];
  if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    String[] channels=parts[1].split(""String_Node_Str"");
    String[] passwords=null;
    if (parts.length > 2 && parts[2].split(""String_Node_Str"").length == channels.length) {
      passwords=parts[2].split(""String_Node_Str"");
    }
    for (int i=0; i < channels.length; i++) {
      if (!this.looksLikeChannel(channels[i])) {
        this.service.activeChannelMessageReceived(this.activity.getCurrentChannel(),Channel.createError(SpannedString.valueOf(""String_Node_Str"" + channels[i])));
        continue;
      }
      if (passwords != null) {
        client.joinChannel(channels[i],passwords[i]);
      }
 else {
        client.joinChannel(channels[i]);
      }
    }
  }
 else   if (command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) {
    if (parts.length == 1) {
      client.partChannel(this.activity.getCurrentChannel().getChannelInfo());
      this.service.channelParted(this.activity.getCurrentChannel(),client.getNick());
    }
 else {
      if (!this.looksLikeChannel(parts[1])) {
        client.partChannel(this.activity.getCurrentChannel().getChannelInfo(),parts[1]);
        this.service.channelParted(this.activity.getCurrentChannel(),client.getNick());
      }
 else {
        if (parts.length < 3) {
          Channel channel=server.getChannel(parts[1]);
          client.partChannel(channel.getChannelInfo());
          this.service.channelParted(channel,client.getNick());
        }
 else {
          Channel channel=server.getChannel(parts[1]);
          client.partChannel(channel.getChannelInfo(),parts[2]);
          this.service.channelParted(channel,client.getNick());
        }
      }
    }
  }
 else   if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    if (!client.userExists(parts[1])) {
      client.changeNick(parts[1]);
    }
 else {
      this.service.activeChannelMessageReceived(this.activity.getCurrentChannel(),Channel.createError(SpannedString.valueOf(""String_Node_Str"" + parts[1])));
    }
  }
 else   if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    for (int i=1; i < parts.length; i++) {
      client.sendRawLine(""String_Node_Str"" + parts[i]);
    }
  }
 else   if (command.equalsIgnoreCase(""String_Node_Str"") && parts.length > 1) {
    Channel channel;
    if (this.looksLikeChannel(parts[1])) {
      channel=server.getChannel(parts[1]);
    }
 else {
      channel=this.activity.getCurrentChannel();
    }
    client.setMode(channel.getChannelInfo(),message.substring(""String_Node_Str"".length() + 1,message.length()));
  }
 else   if (command.equalsIgnoreCase(""String_Node_Str"") && parts.length > 2) {
    if (this.looksLikeChannel(parts[1])) {
      client.sendCTCPCommand(server.getChannel(parts[1]).getChannelInfo(),parts[2]);
    }
 else {
      client.sendCTCPCommand(parts[1],parts[2]);
    }
  }
 else   if ((command.equalsIgnoreCase(""String_Node_Str"") || command.equalsIgnoreCase(""String_Node_Str"")) && parts.length > 1) {
    client.sendRawLine(message.substring(parts[0].length() + 1,message.length()));
  }
}"
51743,"public void onClick(View view){
  SharedPreferences rawPreferences=activity.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  ServerPreferences prefs=new ServerPreferences();
  ServerPreferences.Host host=prefs.new Host();
  prefs.setHost(host);
  boolean success=true;
  if (nameView.getText().length() == 0) {
    success=false;
    AlertDialog.Builder b=new AlertDialog.Builder(activity);
    b.setMessage(""String_Node_Str"");
    b.setPositiveButton(""String_Node_Str"",null);
    b.show();
  }
 else {
    if (!nameView.getText().toString().equals(originalServerName) && ServerPreferences.serverNameExists(rawPreferences,nameView.getText().toString())) {
      success=false;
      AlertDialog.Builder b=new AlertDialog.Builder(activity);
      b.setMessage(""String_Node_Str"");
      b.setPositiveButton(""String_Node_Str"",null);
      b.show();
    }
 else     prefs.setName(nameView.getText().toString());
  }
  if (hostView.getText().length() == 0) {
    host.setHostname(""String_Node_Str"");
  }
 else {
    host.setHostname(hostView.getText().toString());
  }
  if (portView.getText().length() == 0) {
    host.setPort(6667);
  }
 else {
    host.setPort(Integer.parseInt(portView.getText().toString()));
  }
  if (passwordView.getText().length() == 0) {
    host.setPassword(null);
  }
 else {
    host.setPassword(passwordView.getText().toString());
  }
  host.isSSL(ssl.isChecked());
  host.isSSL(verifyssl.isChecked());
  if (nickName.getText().length() == 0) {
    success=false;
    AlertDialog.Builder b=new AlertDialog.Builder(activity);
    b.setMessage(""String_Node_Str"");
    b.setPositiveButton(""String_Node_Str"",null);
    b.show();
  }
 else {
    ArrayList<String> nicks=new ArrayList<String>();
    for (    String s : nickName.getText().toString().split(""String_Node_Str""))     nicks.add(s);
    prefs.setNicknames(nicks);
  }
  if (usernameView.getText().length() == 0) {
    prefs.setUsername(""String_Node_Str"");
  }
 else {
    prefs.setUsername(usernameView.getText().toString());
  }
  if (realnameView.getText().length() == 0) {
    prefs.setRealname(""String_Node_Str"");
  }
 else {
    prefs.setRealname(realnameView.getText().toString());
  }
  if (autoconnectCommands.getText().length() > 0) {
    ArrayList<String> commands=new ArrayList<String>();
    for (    String c : autoconnectCommands.getText().toString().split(""String_Node_Str""))     commands.add(c);
    prefs.setAutoCommands(commands);
  }
  prefs.isAutoConnected(autoconnect.isChecked());
  prefs.isLogged(log.isChecked());
  if (success) {
    prefs.saveToSharedPreferences(rawPreferences);
    if (server != null && server.getServerInfo().getBot().isConnected())     moeService.disconnect(originalServerName);
    moeService.connect(prefs);
    d.dismiss();
  }
}","public void onClick(View view){
  SharedPreferences rawPreferences=activity.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  ServerPreferences prefs=new ServerPreferences();
  ServerPreferences.Host host=prefs.new Host();
  prefs.setHost(host);
  boolean success=true;
  if (nameView.getText().length() == 0) {
    success=false;
    AlertDialog.Builder b=new AlertDialog.Builder(activity);
    b.setMessage(""String_Node_Str"");
    b.setPositiveButton(""String_Node_Str"",null);
    b.show();
  }
 else {
    if (!nameView.getText().toString().equals(originalServerName) && ServerPreferences.serverNameExists(rawPreferences,nameView.getText().toString())) {
      success=false;
      AlertDialog.Builder b=new AlertDialog.Builder(activity);
      b.setMessage(""String_Node_Str"");
      b.setPositiveButton(""String_Node_Str"",null);
      b.show();
    }
 else     prefs.setName(nameView.getText().toString());
  }
  if (hostView.getText().length() == 0) {
    host.setHostname(""String_Node_Str"");
  }
 else {
    host.setHostname(hostView.getText().toString());
  }
  if (portView.getText().length() == 0) {
    host.setPort(6667);
  }
 else {
    host.setPort(Integer.parseInt(portView.getText().toString()));
  }
  if (passwordView.getText().length() == 0) {
    host.setPassword(null);
  }
 else {
    host.setPassword(passwordView.getText().toString());
  }
  host.isSSL(ssl.isChecked());
  host.verifySSL(verifyssl.isChecked());
  if (nickName.getText().length() == 0) {
    success=false;
    AlertDialog.Builder b=new AlertDialog.Builder(activity);
    b.setMessage(""String_Node_Str"");
    b.setPositiveButton(""String_Node_Str"",null);
    b.show();
  }
 else {
    ArrayList<String> nicks=new ArrayList<String>();
    for (    String s : nickName.getText().toString().split(""String_Node_Str""))     nicks.add(s);
    prefs.setNicknames(nicks);
  }
  if (usernameView.getText().length() == 0) {
    prefs.setUsername(""String_Node_Str"");
  }
 else {
    prefs.setUsername(usernameView.getText().toString());
  }
  if (realnameView.getText().length() == 0) {
    prefs.setRealname(""String_Node_Str"");
  }
 else {
    prefs.setRealname(realnameView.getText().toString());
  }
  if (autoconnectCommands.getText().length() > 0) {
    ArrayList<String> commands=new ArrayList<String>();
    for (    String c : autoconnectCommands.getText().toString().split(""String_Node_Str""))     commands.add(c);
    prefs.setAutoCommands(commands);
  }
  prefs.isAutoConnected(autoconnect.isChecked());
  prefs.isLogged(log.isChecked());
  if (success) {
    prefs.saveToSharedPreferences(rawPreferences);
    if (server != null && server.getServerInfo().getBot().isConnected())     moeService.disconnect(originalServerName);
    moeService.connect(prefs);
    d.dismiss();
  }
}"
51744,"public void onShow(DialogInterface dialog){
  Button b=d.getButton(AlertDialog.BUTTON_POSITIVE);
  final TextView nameView=(TextView)dialogView.findViewById(R.id.addServer_name);
  final TextView hostView=(TextView)dialogView.findViewById(R.id.addServer_host);
  final TextView portView=(TextView)dialogView.findViewById(R.id.addServer_port);
  final TextView passwordView=(TextView)dialogView.findViewById(R.id.addServer_password);
  final CheckBox ssl=(CheckBox)dialogView.findViewById(R.id.addServer_ssl);
  final CheckBox verifyssl=(CheckBox)dialogView.findViewById(R.id.addServer_verifyssl);
  final TextView nickName=(TextView)dialogView.findViewById(R.id.addServer_nicknames);
  final TextView usernameView=(TextView)dialogView.findViewById(R.id.addServer_username);
  final TextView realnameView=(TextView)dialogView.findViewById(R.id.addServer_realname);
  final TextView autoconnectCommands=(TextView)dialogView.findViewById(R.id.addServer_autoconnectcommands);
  final CheckBox autoconnect=(CheckBox)dialogView.findViewById(R.id.addServer_connectatstartup);
  final CheckBox log=(CheckBox)dialogView.findViewById(R.id.addServer_log);
  String n=null;
  if (server != null)   n=server.getClient().getServerPreferences().getName();
  final String originalServerName=n;
  if (server != null) {
    ServerPreferences prefs=server.getClient().getServerPreferences();
    nameView.setText(prefs.getName());
    hostView.setText(prefs.getHost().getHostname());
    portView.setText(String.valueOf(prefs.getHost().getPort()));
    passwordView.setText(prefs.getHost().getPassword());
    ssl.setChecked(prefs.getHost().isSSL());
    verifyssl.setChecked(prefs.getHost().verifySSL());
    String nicks=""String_Node_Str"";
    for (int i=0; i < prefs.getNicknames().size(); i++) {
      if (i != 0)       nicks+=""String_Node_Str"";
      nicks+=prefs.getNicknames().get(i);
    }
    nickName.setText(nicks);
    usernameView.setText(prefs.getUsername());
    realnameView.setText(prefs.getRealname());
    String commands=""String_Node_Str"";
    for (int i=0; i < prefs.getAutoCommands().size(); i++) {
      if (i != 0)       commands+=""String_Node_Str"";
      commands+=prefs.getAutoCommands().get(i);
    }
    autoconnectCommands.setText(commands);
    autoconnect.setChecked(prefs.isAutoConnected());
    log.setChecked(prefs.isLogged());
  }
  b.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      SharedPreferences rawPreferences=activity.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
      ServerPreferences prefs=new ServerPreferences();
      ServerPreferences.Host host=prefs.new Host();
      prefs.setHost(host);
      boolean success=true;
      if (nameView.getText().length() == 0) {
        success=false;
        AlertDialog.Builder b=new AlertDialog.Builder(activity);
        b.setMessage(""String_Node_Str"");
        b.setPositiveButton(""String_Node_Str"",null);
        b.show();
      }
 else {
        if (!nameView.getText().toString().equals(originalServerName) && ServerPreferences.serverNameExists(rawPreferences,nameView.getText().toString())) {
          success=false;
          AlertDialog.Builder b=new AlertDialog.Builder(activity);
          b.setMessage(""String_Node_Str"");
          b.setPositiveButton(""String_Node_Str"",null);
          b.show();
        }
 else         prefs.setName(nameView.getText().toString());
      }
      if (hostView.getText().length() == 0) {
        host.setHostname(""String_Node_Str"");
      }
 else {
        host.setHostname(hostView.getText().toString());
      }
      if (portView.getText().length() == 0) {
        host.setPort(6667);
      }
 else {
        host.setPort(Integer.parseInt(portView.getText().toString()));
      }
      if (passwordView.getText().length() == 0) {
        host.setPassword(null);
      }
 else {
        host.setPassword(passwordView.getText().toString());
      }
      host.isSSL(ssl.isChecked());
      host.isSSL(verifyssl.isChecked());
      if (nickName.getText().length() == 0) {
        success=false;
        AlertDialog.Builder b=new AlertDialog.Builder(activity);
        b.setMessage(""String_Node_Str"");
        b.setPositiveButton(""String_Node_Str"",null);
        b.show();
      }
 else {
        ArrayList<String> nicks=new ArrayList<String>();
        for (        String s : nickName.getText().toString().split(""String_Node_Str""))         nicks.add(s);
        prefs.setNicknames(nicks);
      }
      if (usernameView.getText().length() == 0) {
        prefs.setUsername(""String_Node_Str"");
      }
 else {
        prefs.setUsername(usernameView.getText().toString());
      }
      if (realnameView.getText().length() == 0) {
        prefs.setRealname(""String_Node_Str"");
      }
 else {
        prefs.setRealname(realnameView.getText().toString());
      }
      if (autoconnectCommands.getText().length() > 0) {
        ArrayList<String> commands=new ArrayList<String>();
        for (        String c : autoconnectCommands.getText().toString().split(""String_Node_Str""))         commands.add(c);
        prefs.setAutoCommands(commands);
      }
      prefs.isAutoConnected(autoconnect.isChecked());
      prefs.isLogged(log.isChecked());
      if (success) {
        prefs.saveToSharedPreferences(rawPreferences);
        if (server != null && server.getServerInfo().getBot().isConnected())         moeService.disconnect(originalServerName);
        moeService.connect(prefs);
        d.dismiss();
      }
    }
  }
);
}","public void onShow(DialogInterface dialog){
  Button b=d.getButton(AlertDialog.BUTTON_POSITIVE);
  final TextView nameView=(TextView)dialogView.findViewById(R.id.addServer_name);
  final TextView hostView=(TextView)dialogView.findViewById(R.id.addServer_host);
  final TextView portView=(TextView)dialogView.findViewById(R.id.addServer_port);
  final TextView passwordView=(TextView)dialogView.findViewById(R.id.addServer_password);
  final CheckBox ssl=(CheckBox)dialogView.findViewById(R.id.addServer_ssl);
  final CheckBox verifyssl=(CheckBox)dialogView.findViewById(R.id.addServer_verifyssl);
  final TextView nickName=(TextView)dialogView.findViewById(R.id.addServer_nicknames);
  final TextView usernameView=(TextView)dialogView.findViewById(R.id.addServer_username);
  final TextView realnameView=(TextView)dialogView.findViewById(R.id.addServer_realname);
  final TextView autoconnectCommands=(TextView)dialogView.findViewById(R.id.addServer_autoconnectcommands);
  final CheckBox autoconnect=(CheckBox)dialogView.findViewById(R.id.addServer_connectatstartup);
  final CheckBox log=(CheckBox)dialogView.findViewById(R.id.addServer_log);
  String n=null;
  if (server != null)   n=server.getClient().getServerPreferences().getName();
  final String originalServerName=n;
  if (server != null) {
    ServerPreferences prefs=server.getClient().getServerPreferences();
    nameView.setText(prefs.getName());
    hostView.setText(prefs.getHost().getHostname());
    portView.setText(String.valueOf(prefs.getHost().getPort()));
    passwordView.setText(prefs.getHost().getPassword());
    ssl.setChecked(prefs.getHost().isSSL());
    verifyssl.setChecked(prefs.getHost().verifySSL());
    String nicks=""String_Node_Str"";
    for (int i=0; i < prefs.getNicknames().size(); i++) {
      if (i != 0)       nicks+=""String_Node_Str"";
      nicks+=prefs.getNicknames().get(i);
    }
    nickName.setText(nicks);
    usernameView.setText(prefs.getUsername());
    realnameView.setText(prefs.getRealname());
    String commands=""String_Node_Str"";
    for (int i=0; i < prefs.getAutoCommands().size(); i++) {
      if (i != 0)       commands+=""String_Node_Str"";
      commands+=prefs.getAutoCommands().get(i);
    }
    autoconnectCommands.setText(commands);
    autoconnect.setChecked(prefs.isAutoConnected());
    log.setChecked(prefs.isLogged());
  }
  b.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      SharedPreferences rawPreferences=activity.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
      ServerPreferences prefs=new ServerPreferences();
      ServerPreferences.Host host=prefs.new Host();
      prefs.setHost(host);
      boolean success=true;
      if (nameView.getText().length() == 0) {
        success=false;
        AlertDialog.Builder b=new AlertDialog.Builder(activity);
        b.setMessage(""String_Node_Str"");
        b.setPositiveButton(""String_Node_Str"",null);
        b.show();
      }
 else {
        if (!nameView.getText().toString().equals(originalServerName) && ServerPreferences.serverNameExists(rawPreferences,nameView.getText().toString())) {
          success=false;
          AlertDialog.Builder b=new AlertDialog.Builder(activity);
          b.setMessage(""String_Node_Str"");
          b.setPositiveButton(""String_Node_Str"",null);
          b.show();
        }
 else         prefs.setName(nameView.getText().toString());
      }
      if (hostView.getText().length() == 0) {
        host.setHostname(""String_Node_Str"");
      }
 else {
        host.setHostname(hostView.getText().toString());
      }
      if (portView.getText().length() == 0) {
        host.setPort(6667);
      }
 else {
        host.setPort(Integer.parseInt(portView.getText().toString()));
      }
      if (passwordView.getText().length() == 0) {
        host.setPassword(null);
      }
 else {
        host.setPassword(passwordView.getText().toString());
      }
      host.isSSL(ssl.isChecked());
      host.verifySSL(verifyssl.isChecked());
      if (nickName.getText().length() == 0) {
        success=false;
        AlertDialog.Builder b=new AlertDialog.Builder(activity);
        b.setMessage(""String_Node_Str"");
        b.setPositiveButton(""String_Node_Str"",null);
        b.show();
      }
 else {
        ArrayList<String> nicks=new ArrayList<String>();
        for (        String s : nickName.getText().toString().split(""String_Node_Str""))         nicks.add(s);
        prefs.setNicknames(nicks);
      }
      if (usernameView.getText().length() == 0) {
        prefs.setUsername(""String_Node_Str"");
      }
 else {
        prefs.setUsername(usernameView.getText().toString());
      }
      if (realnameView.getText().length() == 0) {
        prefs.setRealname(""String_Node_Str"");
      }
 else {
        prefs.setRealname(realnameView.getText().toString());
      }
      if (autoconnectCommands.getText().length() > 0) {
        ArrayList<String> commands=new ArrayList<String>();
        for (        String c : autoconnectCommands.getText().toString().split(""String_Node_Str""))         commands.add(c);
        prefs.setAutoCommands(commands);
      }
      prefs.isAutoConnected(autoconnect.isChecked());
      prefs.isLogged(log.isChecked());
      if (success) {
        prefs.saveToSharedPreferences(rawPreferences);
        if (server != null && server.getServerInfo().getBot().isConnected())         moeService.disconnect(originalServerName);
        moeService.connect(prefs);
        d.dismiss();
      }
    }
  }
);
}"
51745,"private void showServerEditDialog(Server existingServer){
  final Server server=existingServer;
  final View dialogView=getLayoutInflater().inflate(R.layout.addserver_dialog,null);
  final AlertDialog d=new AlertDialog.Builder(this).setView(dialogView).setTitle(""String_Node_Str"").setPositiveButton(android.R.string.ok,new Dialog.OnClickListener(){
    public void onClick(    DialogInterface d,    int which){
    }
  }
).setNegativeButton(android.R.string.cancel,null).create();
  d.setOnShowListener(new DialogInterface.OnShowListener(){
    public void onShow(    DialogInterface dialog){
      Button b=d.getButton(AlertDialog.BUTTON_POSITIVE);
      final TextView nameView=(TextView)dialogView.findViewById(R.id.addServer_name);
      final TextView hostView=(TextView)dialogView.findViewById(R.id.addServer_host);
      final TextView portView=(TextView)dialogView.findViewById(R.id.addServer_port);
      final TextView passwordView=(TextView)dialogView.findViewById(R.id.addServer_password);
      final CheckBox ssl=(CheckBox)dialogView.findViewById(R.id.addServer_ssl);
      final CheckBox verifyssl=(CheckBox)dialogView.findViewById(R.id.addServer_verifyssl);
      final TextView nickName=(TextView)dialogView.findViewById(R.id.addServer_nicknames);
      final TextView usernameView=(TextView)dialogView.findViewById(R.id.addServer_username);
      final TextView realnameView=(TextView)dialogView.findViewById(R.id.addServer_realname);
      final TextView autoconnectCommands=(TextView)dialogView.findViewById(R.id.addServer_autoconnectcommands);
      final CheckBox autoconnect=(CheckBox)dialogView.findViewById(R.id.addServer_connectatstartup);
      final CheckBox log=(CheckBox)dialogView.findViewById(R.id.addServer_log);
      String n=null;
      if (server != null)       n=server.getClient().getServerPreferences().getName();
      final String originalServerName=n;
      if (server != null) {
        ServerPreferences prefs=server.getClient().getServerPreferences();
        nameView.setText(prefs.getName());
        hostView.setText(prefs.getHost().getHostname());
        portView.setText(String.valueOf(prefs.getHost().getPort()));
        passwordView.setText(prefs.getHost().getPassword());
        ssl.setChecked(prefs.getHost().isSSL());
        verifyssl.setChecked(prefs.getHost().verifySSL());
        String nicks=""String_Node_Str"";
        for (int i=0; i < prefs.getNicknames().size(); i++) {
          if (i != 0)           nicks+=""String_Node_Str"";
          nicks+=prefs.getNicknames().get(i);
        }
        nickName.setText(nicks);
        usernameView.setText(prefs.getUsername());
        realnameView.setText(prefs.getRealname());
        String commands=""String_Node_Str"";
        for (int i=0; i < prefs.getAutoCommands().size(); i++) {
          if (i != 0)           commands+=""String_Node_Str"";
          commands+=prefs.getAutoCommands().get(i);
        }
        autoconnectCommands.setText(commands);
        autoconnect.setChecked(prefs.isAutoConnected());
        log.setChecked(prefs.isLogged());
      }
      b.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View view){
          SharedPreferences rawPreferences=activity.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
          ServerPreferences prefs=new ServerPreferences();
          ServerPreferences.Host host=prefs.new Host();
          prefs.setHost(host);
          boolean success=true;
          if (nameView.getText().length() == 0) {
            success=false;
            AlertDialog.Builder b=new AlertDialog.Builder(activity);
            b.setMessage(""String_Node_Str"");
            b.setPositiveButton(""String_Node_Str"",null);
            b.show();
          }
 else {
            if (!nameView.getText().toString().equals(originalServerName) && ServerPreferences.serverNameExists(rawPreferences,nameView.getText().toString())) {
              success=false;
              AlertDialog.Builder b=new AlertDialog.Builder(activity);
              b.setMessage(""String_Node_Str"");
              b.setPositiveButton(""String_Node_Str"",null);
              b.show();
            }
 else             prefs.setName(nameView.getText().toString());
          }
          if (hostView.getText().length() == 0) {
            host.setHostname(""String_Node_Str"");
          }
 else {
            host.setHostname(hostView.getText().toString());
          }
          if (portView.getText().length() == 0) {
            host.setPort(6667);
          }
 else {
            host.setPort(Integer.parseInt(portView.getText().toString()));
          }
          if (passwordView.getText().length() == 0) {
            host.setPassword(null);
          }
 else {
            host.setPassword(passwordView.getText().toString());
          }
          host.isSSL(ssl.isChecked());
          host.isSSL(verifyssl.isChecked());
          if (nickName.getText().length() == 0) {
            success=false;
            AlertDialog.Builder b=new AlertDialog.Builder(activity);
            b.setMessage(""String_Node_Str"");
            b.setPositiveButton(""String_Node_Str"",null);
            b.show();
          }
 else {
            ArrayList<String> nicks=new ArrayList<String>();
            for (            String s : nickName.getText().toString().split(""String_Node_Str""))             nicks.add(s);
            prefs.setNicknames(nicks);
          }
          if (usernameView.getText().length() == 0) {
            prefs.setUsername(""String_Node_Str"");
          }
 else {
            prefs.setUsername(usernameView.getText().toString());
          }
          if (realnameView.getText().length() == 0) {
            prefs.setRealname(""String_Node_Str"");
          }
 else {
            prefs.setRealname(realnameView.getText().toString());
          }
          if (autoconnectCommands.getText().length() > 0) {
            ArrayList<String> commands=new ArrayList<String>();
            for (            String c : autoconnectCommands.getText().toString().split(""String_Node_Str""))             commands.add(c);
            prefs.setAutoCommands(commands);
          }
          prefs.isAutoConnected(autoconnect.isChecked());
          prefs.isLogged(log.isChecked());
          if (success) {
            prefs.saveToSharedPreferences(rawPreferences);
            if (server != null && server.getServerInfo().getBot().isConnected())             moeService.disconnect(originalServerName);
            moeService.connect(prefs);
            d.dismiss();
          }
        }
      }
);
    }
  }
);
  d.show();
}","private void showServerEditDialog(Server existingServer){
  final Server server=existingServer;
  final View dialogView=getLayoutInflater().inflate(R.layout.addserver_dialog,null);
  final AlertDialog d=new AlertDialog.Builder(this).setView(dialogView).setTitle(""String_Node_Str"").setPositiveButton(android.R.string.ok,new Dialog.OnClickListener(){
    public void onClick(    DialogInterface d,    int which){
    }
  }
).setNegativeButton(android.R.string.cancel,null).create();
  d.setOnShowListener(new DialogInterface.OnShowListener(){
    public void onShow(    DialogInterface dialog){
      Button b=d.getButton(AlertDialog.BUTTON_POSITIVE);
      final TextView nameView=(TextView)dialogView.findViewById(R.id.addServer_name);
      final TextView hostView=(TextView)dialogView.findViewById(R.id.addServer_host);
      final TextView portView=(TextView)dialogView.findViewById(R.id.addServer_port);
      final TextView passwordView=(TextView)dialogView.findViewById(R.id.addServer_password);
      final CheckBox ssl=(CheckBox)dialogView.findViewById(R.id.addServer_ssl);
      final CheckBox verifyssl=(CheckBox)dialogView.findViewById(R.id.addServer_verifyssl);
      final TextView nickName=(TextView)dialogView.findViewById(R.id.addServer_nicknames);
      final TextView usernameView=(TextView)dialogView.findViewById(R.id.addServer_username);
      final TextView realnameView=(TextView)dialogView.findViewById(R.id.addServer_realname);
      final TextView autoconnectCommands=(TextView)dialogView.findViewById(R.id.addServer_autoconnectcommands);
      final CheckBox autoconnect=(CheckBox)dialogView.findViewById(R.id.addServer_connectatstartup);
      final CheckBox log=(CheckBox)dialogView.findViewById(R.id.addServer_log);
      String n=null;
      if (server != null)       n=server.getClient().getServerPreferences().getName();
      final String originalServerName=n;
      if (server != null) {
        ServerPreferences prefs=server.getClient().getServerPreferences();
        nameView.setText(prefs.getName());
        hostView.setText(prefs.getHost().getHostname());
        portView.setText(String.valueOf(prefs.getHost().getPort()));
        passwordView.setText(prefs.getHost().getPassword());
        ssl.setChecked(prefs.getHost().isSSL());
        verifyssl.setChecked(prefs.getHost().verifySSL());
        String nicks=""String_Node_Str"";
        for (int i=0; i < prefs.getNicknames().size(); i++) {
          if (i != 0)           nicks+=""String_Node_Str"";
          nicks+=prefs.getNicknames().get(i);
        }
        nickName.setText(nicks);
        usernameView.setText(prefs.getUsername());
        realnameView.setText(prefs.getRealname());
        String commands=""String_Node_Str"";
        for (int i=0; i < prefs.getAutoCommands().size(); i++) {
          if (i != 0)           commands+=""String_Node_Str"";
          commands+=prefs.getAutoCommands().get(i);
        }
        autoconnectCommands.setText(commands);
        autoconnect.setChecked(prefs.isAutoConnected());
        log.setChecked(prefs.isLogged());
      }
      b.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View view){
          SharedPreferences rawPreferences=activity.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
          ServerPreferences prefs=new ServerPreferences();
          ServerPreferences.Host host=prefs.new Host();
          prefs.setHost(host);
          boolean success=true;
          if (nameView.getText().length() == 0) {
            success=false;
            AlertDialog.Builder b=new AlertDialog.Builder(activity);
            b.setMessage(""String_Node_Str"");
            b.setPositiveButton(""String_Node_Str"",null);
            b.show();
          }
 else {
            if (!nameView.getText().toString().equals(originalServerName) && ServerPreferences.serverNameExists(rawPreferences,nameView.getText().toString())) {
              success=false;
              AlertDialog.Builder b=new AlertDialog.Builder(activity);
              b.setMessage(""String_Node_Str"");
              b.setPositiveButton(""String_Node_Str"",null);
              b.show();
            }
 else             prefs.setName(nameView.getText().toString());
          }
          if (hostView.getText().length() == 0) {
            host.setHostname(""String_Node_Str"");
          }
 else {
            host.setHostname(hostView.getText().toString());
          }
          if (portView.getText().length() == 0) {
            host.setPort(6667);
          }
 else {
            host.setPort(Integer.parseInt(portView.getText().toString()));
          }
          if (passwordView.getText().length() == 0) {
            host.setPassword(null);
          }
 else {
            host.setPassword(passwordView.getText().toString());
          }
          host.isSSL(ssl.isChecked());
          host.verifySSL(verifyssl.isChecked());
          if (nickName.getText().length() == 0) {
            success=false;
            AlertDialog.Builder b=new AlertDialog.Builder(activity);
            b.setMessage(""String_Node_Str"");
            b.setPositiveButton(""String_Node_Str"",null);
            b.show();
          }
 else {
            ArrayList<String> nicks=new ArrayList<String>();
            for (            String s : nickName.getText().toString().split(""String_Node_Str""))             nicks.add(s);
            prefs.setNicknames(nicks);
          }
          if (usernameView.getText().length() == 0) {
            prefs.setUsername(""String_Node_Str"");
          }
 else {
            prefs.setUsername(usernameView.getText().toString());
          }
          if (realnameView.getText().length() == 0) {
            prefs.setRealname(""String_Node_Str"");
          }
 else {
            prefs.setRealname(realnameView.getText().toString());
          }
          if (autoconnectCommands.getText().length() > 0) {
            ArrayList<String> commands=new ArrayList<String>();
            for (            String c : autoconnectCommands.getText().toString().split(""String_Node_Str""))             commands.add(c);
            prefs.setAutoCommands(commands);
          }
          prefs.isAutoConnected(autoconnect.isChecked());
          prefs.isLogged(log.isChecked());
          if (success) {
            prefs.saveToSharedPreferences(rawPreferences);
            if (server != null && server.getServerInfo().getBot().isConnected())             moeService.disconnect(originalServerName);
            moeService.connect(prefs);
            d.dismiss();
          }
        }
      }
);
    }
  }
);
  d.show();
}"
51746,"public void onServerResponse(ServerResponseEvent<Client> event){
  Server server=this.service.getServer(event.getBot().getServerPreferences().getName());
  String response=event.getResponse();
  if (response == null || response.isEmpty()) {
    return;
  }
  response=response.trim();
  if (response.startsWith(""String_Node_Str"")) {
    response=response.substring(1,response.length() - 1).trim();
  }
  if (response.startsWith(""String_Node_Str"")) {
    response=response.substring(1,response.length() - 1).trim();
  }
  ServerMessage message=new ServerMessage();
  message.setContent(Html.fromHtml(MessageParser.parseToHTML(response)));
  message.setTime(new Date());
  this.service.statusMessageReceived(server,message);
}","public void onServerResponse(ServerResponseEvent<Client> event){
  Server server=this.service.getServer(event.getBot().getServerPreferences().getName());
  String response=event.getResponse();
  if (response == null || response.isEmpty()) {
    return;
  }
  response=response.trim();
  if (response.startsWith(event.getBot().getNick())) {
    response=response.substring(event.getBot().getNick().length(),response.length()).trim();
  }
  if (response.startsWith(""String_Node_Str"")) {
    response=response.substring(1,response.length()).trim();
  }
  if (response.startsWith(""String_Node_Str"")) {
    response=response.substring(1,response.length()).trim();
  }
  ServerMessage message=new ServerMessage();
  message.setContent(Html.fromHtml(MessageParser.parseToHTML(response)));
  message.setTime(new Date());
  this.service.statusMessageReceived(server,message);
}"
51747,"@Override public int onStartCommand(Intent intent,int flags,int startID){
  ArrayList<ServerPreferences> preferences=this.loadPreferences();
  for (  ServerPreferences serverPrefs : preferences) {
    if (serverPrefs.isAutoConnected()) {
      this.connect(serverPrefs);
    }
 else {
    }
  }
  super.onCreate();
  NotificationManager notificationManager=(NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);
  int icon=moe.lolis.metroirc.R.drawable.ic_launcher;
  this.constantNotification=new Notification(icon,""String_Node_Str"",0);
  Context context=getApplicationContext();
  CharSequence contentTitle=""String_Node_Str"";
  CharSequence contentText=""String_Node_Str"";
  Intent notificationIntent=new Intent(this,ChannelActivity.class);
  PendingIntent contentIntent=PendingIntent.getActivity(this,0,notificationIntent,0);
  this.constantNotification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
  this.constantNotification.flags=Notification.FLAG_ONGOING_EVENT;
  this.startForeground(CONSTANT_FOREGROUND_ID,constantNotification);
  return Service.START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startID){
  ArrayList<ServerPreferences> preferences=this.loadPreferences();
  for (  ServerPreferences serverPrefs : preferences) {
    if (serverPrefs.isAutoConnected()) {
      this.connect(serverPrefs);
    }
 else {
      this.addDisconnectedServer(serverPrefs);
    }
  }
  super.onCreate();
  NotificationManager notificationManager=(NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);
  int icon=moe.lolis.metroirc.R.drawable.ic_launcher;
  this.constantNotification=new Notification(icon,""String_Node_Str"",0);
  Context context=getApplicationContext();
  CharSequence contentTitle=""String_Node_Str"";
  CharSequence contentText=""String_Node_Str"";
  Intent notificationIntent=new Intent(this,ChannelActivity.class);
  PendingIntent contentIntent=PendingIntent.getActivity(this,0,notificationIntent,0);
  this.constantNotification.setLatestEventInfo(context,contentTitle,contentText,contentIntent);
  this.constantNotification.flags=Notification.FLAG_ONGOING_EVENT;
  this.startForeground(CONSTANT_FOREGROUND_ID,constantNotification);
  return Service.START_STICKY;
}"
51748,"public void saveToSharedPreferences(SharedPreferences sharedPreferences){
  String prefix=""String_Node_Str"";
  SharedPreferences.Editor editor=sharedPreferences.edit();
  if (this.preferenceSpot >= 0) {
    prefix+=this.preferenceSpot + ""String_Node_Str"";
  }
 else {
    int count=sharedPreferences.getInt(""String_Node_Str"",0);
    editor.putInt(""String_Node_Str"",count + 1);
    prefix+=(count + 1) + ""String_Node_Str"";
  }
  editor.putString(prefix + ""String_Node_Str"",this.getName());
  editor.putInt(prefix + ""String_Node_Str"",this.nicknames.size());
  for (int i=0; i < this.nicknames.size(); i++) {
    editor.putString(prefix + ""String_Node_Str"" + i,this.nicknames.get(i));
  }
  editor.putString(prefix + ""String_Node_Str"",this.getUsername());
  editor.putString(prefix + ""String_Node_Str"",this.getRealname());
  editor.putString(prefix + ""String_Node_Str"",this.host.getHostname());
  editor.putInt(prefix + ""String_Node_Str"",this.host.getPort());
  editor.putBoolean(prefix + ""String_Node_Str"",this.host.isSSL());
  editor.putBoolean(prefix + ""String_Node_Str"",this.host.verifySSL());
  editor.putString(prefix + ""String_Node_Str"",this.host.getPassword());
  editor.putInt(prefix + ""String_Node_Str"",this.autoChannels.size());
  for (int i=0; i < this.autoChannels.size(); i++) {
    editor.putString(prefix + ""String_Node_Str"" + i,this.autoChannels.get(i));
  }
  editor.putInt(prefix + ""String_Node_Str"",this.autoCommands.size());
  for (int i=0; i < this.autoCommands.size(); i++) {
    editor.putString(prefix + ""String_Node_Str"" + i,this.autoCommands.get(i));
  }
  editor.putBoolean(prefix + ""String_Node_Str"",this.isAutoConnected());
  editor.putBoolean(prefix + ""String_Node_Str"",this.isLogged());
  editor.commit();
}","public void saveToSharedPreferences(SharedPreferences sharedPreferences){
  String prefix=""String_Node_Str"";
  SharedPreferences.Editor editor=sharedPreferences.edit();
  if (this.preferenceSpot >= 0) {
    prefix+=this.preferenceSpot + ""String_Node_Str"";
  }
 else {
    int count=sharedPreferences.getInt(""String_Node_Str"",0);
    editor.putInt(""String_Node_Str"",count + 1);
    prefix+=count + ""String_Node_Str"";
  }
  editor.putString(prefix + ""String_Node_Str"",this.getName());
  editor.putInt(prefix + ""String_Node_Str"",this.nicknames.size());
  for (int i=0; i < this.nicknames.size(); i++) {
    editor.putString(prefix + ""String_Node_Str"" + i,this.nicknames.get(i));
  }
  editor.putString(prefix + ""String_Node_Str"",this.getUsername());
  editor.putString(prefix + ""String_Node_Str"",this.getRealname());
  editor.putString(prefix + ""String_Node_Str"",this.host.getHostname());
  editor.putInt(prefix + ""String_Node_Str"",this.host.getPort());
  editor.putBoolean(prefix + ""String_Node_Str"",this.host.isSSL());
  editor.putBoolean(prefix + ""String_Node_Str"",this.host.verifySSL());
  editor.putString(prefix + ""String_Node_Str"",this.host.getPassword());
  editor.putInt(prefix + ""String_Node_Str"",this.autoChannels.size());
  for (int i=0; i < this.autoChannels.size(); i++) {
    editor.putString(prefix + ""String_Node_Str"" + i,this.autoChannels.get(i));
  }
  editor.putInt(prefix + ""String_Node_Str"",this.autoCommands.size());
  for (int i=0; i < this.autoCommands.size(); i++) {
    editor.putString(prefix + ""String_Node_Str"" + i,this.autoCommands.get(i));
  }
  editor.putBoolean(prefix + ""String_Node_Str"",this.isAutoConnected());
  editor.putBoolean(prefix + ""String_Node_Str"",this.isLogged());
  editor.commit();
}"
51749,"public void run(){
  serv.addMessage(serv.createError(SpannableString.valueOf(err)));
  for (  Channel channel : serv.getChannels())   channel.addMessage(channel.createError(SpannableString.valueOf(err)));
  if (adapter != null)   adapter.notifyDataSetChanged();
}","public void run(){
  serv.addMessage(serv.createError(SpannableString.valueOf(err)));
  for (  Channel channel : serv.getChannels())   channel.addMessage(channel.createError(SpannableString.valueOf(err)));
  if (adapter != null)   adapter.notifyDataSetChanged();
  if (channelAdapter != null)   channelAdapter.notifyDataSetChanged();
}"
51750,"public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  Channel c=servers.get(groupPosition).getChannels().get(childPosition);
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.channellist_channel,null);
  }
  TextView name=(TextView)convertView.findViewById(R.id.name);
  TextView messages=(TextView)convertView.findViewById(R.id.unreadCount);
  name.setText(c.getChannelInfo().getName());
  if (c.getUnreadMessageCount() > 0) {
    messages.setText(""String_Node_Str"" + String.valueOf(c.getUnreadMessageCount()) + ""String_Node_Str"");
  }
 else {
    messages.setText(""String_Node_Str"");
  }
  return convertView;
}","public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.channellist_channel,null);
  }
  Server s=servers.get(groupPosition);
  if (s.getChannels().size() > 0) {
    Channel c=s.getChannels().get(childPosition);
    TextView name=(TextView)convertView.findViewById(R.id.name);
    TextView messages=(TextView)convertView.findViewById(R.id.unreadCount);
    name.setText(c.getChannelInfo().getName());
    if (c.getUnreadMessageCount() > 0) {
      messages.setText(""String_Node_Str"" + String.valueOf(c.getUnreadMessageCount()) + ""String_Node_Str"");
    }
 else {
      messages.setText(""String_Node_Str"");
    }
  }
  return convertView;
}"
51751,"public void serverDisconnected(Server server,String error){
  final Server serv=server;
  if (server != null) {
    final String err=error;
    this.runOnUiThread(new Runnable(){
      public void run(){
        serv.addMessage(serv.createError(SpannableString.valueOf(err)));
        for (        Channel channel : serv.getChannels())         channel.addMessage(channel.createError(SpannableString.valueOf(err)));
        if (adapter != null)         adapter.notifyDataSetChanged();
      }
    }
);
  }
}","public void serverDisconnected(Server server,String error){
  final Server serv=server;
  if (server != null) {
    final String err=error;
    this.runOnUiThread(new Runnable(){
      public void run(){
        serv.addMessage(serv.createError(SpannableString.valueOf(err)));
        for (        Channel channel : serv.getChannels())         channel.addMessage(channel.createError(SpannableString.valueOf(err)));
        if (adapter != null)         adapter.notifyDataSetChanged();
        if (channelAdapter != null)         channelAdapter.notifyDataSetChanged();
      }
    }
);
  }
}"
51752,"public void disconnect(String serverName){
  Server s=this.getServer(serverName);
  if (s != null) {
    if (s.getServerInfo().getBot().isConnected())     s.getServerInfo().getBot().disconnect();
    this.serverMap.remove(serverName);
    this.servers.remove(s);
  }
}","public void disconnect(String serverName){
  Server s=this.getServer(serverName);
  if (s != null) {
    if (s.getServerInfo().getBot().isConnected())     s.getServerInfo().getBot().disconnect();
    this.serverMap.remove(serverName);
    this.servers.remove(s);
    this.addDisconnectedServer(s.getServer().getServer().getServer().getServer().getServer().getServer().getServer().getServer().getServer().getServer().getServer().getServer().getServer().getClient().getServerPreferences());
    this.serverDisconnected(s,""String_Node_Str"");
  }
}"
51753,"public void connect(ServerPreferences serverPrefs){
  ConnectTask connectionTask=new ConnectTask();
  connectionTask.execute(new ServerPreferences[]{serverPrefs});
}","public void connect(ServerPreferences serverPrefs){
  for (int i=0; i < this.getServers().size(); i++) {
    Server s=this.servers.get(i);
    if (s.getName().equals(serverPrefs.getName())) {
      this.servers.remove(s);
      this.serverMap.remove(s.getName());
    }
  }
  ConnectTask connectionTask=new ConnectTask();
  connectionTask.execute(new ServerPreferences[]{serverPrefs});
}"
51754,"public void addAutoChannel(String channel){
  this.autoChannels.add(channel);
}","public void addAutoChannel(String channel){
  if (!this.containsAutoChannel(channel))   this.autoChannels.add(channel);
}"
51755,"protected String executeCommand(String executionString){
  String response=""String_Node_Str"";
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + executionString);
  }
  ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",executionString);
  pb.redirectErrorStream(true);
  int shellExitStatus=0;
  try {
    final Process shell=pb.start();
    final InputStream shellStream=shell.getInputStream();
    Callable<Integer> call=new Callable<Integer>(){
      public Integer call() throws Exception {
        shell.waitFor();
        return shell.exitValue();
      }
    }
;
    Callable<String> readOutput=new Callable<String>(){
      public String call() throws Exception {
        String output=""String_Node_Str"";
        String line=""String_Node_Str"";
        InputStreamReader isr=new InputStreamReader(shellStream);
        BufferedReader reader=new BufferedReader(isr);
        while ((line=reader.readLine()) != null)         output+=line + ""String_Node_Str"";
        return output;
      }
    }
;
    ExecutorService service=Executors.newSingleThreadExecutor();
    try {
      Future<Integer> ft=service.submit(call);
      Future<String> outputThread=service.submit(readOutput);
      try {
        shellExitStatus=ft.get(getCommandTimeout(),TimeUnit.MILLISECONDS);
      }
 catch (      TimeoutException ex) {
        shell.destroy();
        shellExitStatus=-5;
      }
catch (      ExecutionException e) {
        shell.destroy();
        shellExitStatus=-5;
      }
      try {
        response=outputThread.get(getCommandTimeout(),TimeUnit.MILLISECONDS);
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,""String_Node_Str"",ex);
      }
    }
  finally {
      service.shutdown();
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"" + executionString,e);
  }
catch (  InterruptedException e) {
    logger.log(Level.WARNING,""String_Node_Str"" + executionString,e);
  }
  if (shellExitStatus != 0) {
    if (shellExitStatus == -5) {
      logger.log(Level.WARNING,""String_Node_Str"" + shellExitStatus,executionString);
    }
 else {
      logger.log(Level.WARNING,""String_Node_Str"" + shellExitStatus,executionString);
    }
  }
  return response;
}","protected String executeCommand(String executionString){
  String response=""String_Node_Str"";
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + executionString);
  }
  ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",executionString);
  pb.redirectErrorStream(true);
  int shellExitStatus=0;
  try {
    final Process shell=pb.start();
    final InputStream shellStream=shell.getInputStream();
    Callable<Integer> call=new Callable<Integer>(){
      public Integer call() throws Exception {
        shell.waitFor();
        return shell.exitValue();
      }
    }
;
    Callable<String> readOutput=new Callable<String>(){
      public String call() throws Exception {
        String output=""String_Node_Str"";
        String line=""String_Node_Str"";
        InputStreamReader isr=new InputStreamReader(shellStream);
        BufferedReader reader=new BufferedReader(isr);
        while ((line=reader.readLine()) != null)         output+=line + ""String_Node_Str"";
        return output;
      }
    }
;
    ExecutorService service=Executors.newSingleThreadExecutor();
    try {
      Future<String> outputThread=service.submit(readOutput);
      Future<Integer> ft=service.submit(call);
      try {
        shellExitStatus=ft.get(getCommandTimeout(),TimeUnit.MILLISECONDS);
      }
 catch (      TimeoutException ex) {
        shell.destroy();
        shellExitStatus=-5;
      }
catch (      ExecutionException e) {
        shell.destroy();
        shellExitStatus=-5;
      }
      try {
        response=outputThread.get(getCommandTimeout(),TimeUnit.MILLISECONDS);
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,""String_Node_Str"",ex);
      }
    }
  finally {
      service.shutdown();
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,""String_Node_Str"" + executionString,e);
  }
catch (  InterruptedException e) {
    logger.log(Level.WARNING,""String_Node_Str"" + executionString,e);
  }
  if (shellExitStatus != 0) {
    if (shellExitStatus == -5) {
      logger.log(Level.WARNING,""String_Node_Str"" + shellExitStatus,executionString);
    }
 else {
      logger.log(Level.WARNING,""String_Node_Str"" + shellExitStatus,executionString);
    }
  }
  return response;
}"
51756,"public String getOrderID(){
  return orderID;
}","public long getOrderID(){
  return orderID;
}"
51757,"public void setOrderID(String orderID){
  this.orderID=orderID;
}","public void setOrderID(long orderID){
  this.orderID=orderID;
}"
51758,"public void updatePK(){
  id=new OrderItem.PK(inventoryId,order.getOrderID());
}","public void updatePK(String inventoryId){
  id=new OrderItem.PK(inventoryId,order.getOrderID());
}"
51759,"/** 
 * Returns the hash code for the key.
 */
public int hashCode(){
  Util.debug(""String_Node_Str"" + inventoryID + ""String_Node_Str"");
  Util.debug(""String_Node_Str"" + order_orderID + ""String_Node_Str"");
  return (inventoryID.hashCode() + order_orderID.hashCode());
}","/** 
 * Returns the hash code for the key.
 */
public int hashCode(){
  Util.debug(""String_Node_Str"" + inventoryID + ""String_Node_Str"");
  Util.debug(""String_Node_Str"" + order_orderID + ""String_Node_Str"");
  return (inventoryID.hashCode() + (int)order_orderID);
}"
51760,"/** 
 * Returns true if both keys are equal.
 */
public boolean equals(java.lang.Object otherKey){
  if (otherKey instanceof PK) {
    PK o=(PK)otherKey;
    return ((this.inventoryID.equals(o.inventoryID)) && (this.order_orderID.equals(o.order_orderID)));
  }
  return false;
}","/** 
 * Returns true if both keys are equal.
 */
public boolean equals(java.lang.Object otherKey){
  if (otherKey instanceof PK) {
    PK o=(PK)otherKey;
    return ((this.inventoryID.equals(o.inventoryID)) && (this.order_orderID == o.order_orderID));
  }
  return false;
}"
51761,"public OrderItem(Order order,String orderID,Inventory inv,java.lang.String name,java.lang.String pkginfo,float price,float cost,int quantity,int category,java.lang.String sellDate){
  Util.debug(""String_Node_Str"");
  inventory=inv;
  setInventoryId(inv.getInventoryId());
  setName(name);
  setPkginfo(pkginfo);
  setPrice(price);
  setCost(cost);
  setQuantity(quantity);
  setCategory(category);
  setSellDate(sellDate);
  setOrder(order);
  id=new OrderItem.PK(inv.getInventoryId(),order.getOrderID());
}","public OrderItem(Order order,String orderID,Inventory inv,java.lang.String name,java.lang.String pkginfo,float price,float cost,int quantity,int category,java.lang.String sellDate){
  Util.debug(""String_Node_Str"");
  inventory=inv;
  setName(name);
  setPkginfo(pkginfo);
  setPrice(price);
  setCost(cost);
  setQuantity(quantity);
  setCategory(category);
  setSellDate(sellDate);
  setOrder(order);
  id=new OrderItem.PK(inv.getInventoryId(),order.getOrderID());
}"
51762,"public PK(String inventoryID,String argOrder){
  Util.debug(""String_Node_Str"" + inventoryID + ""String_Node_Str"");
  Util.debug(""String_Node_Str"" + argOrder + ""String_Node_Str"");
  this.inventoryID=inventoryID;
  this.order_orderID=argOrder;
}","public PK(String inventoryID,long argOrder){
  Util.debug(""String_Node_Str"" + inventoryID + ""String_Node_Str"");
  Util.debug(""String_Node_Str"" + argOrder + ""String_Node_Str"");
  this.inventoryID=inventoryID;
  this.order_orderID=argOrder;
}"
51763,"/** 
 * Get the order ID.
 * @return Order ID 
 */
public String getID(){
  return orderID;
}","/** 
 * Get the order ID.
 * @return Order ID 
 */
public long getID(){
  return orderID;
}"
51764,"/** 
 * Create the Subject line.
 * @param orderKey The order number.
 * @return The Order number string.
 */
private String createSubjectLine(String orderKey){
  StringBuffer msg=new StringBuffer();
  msg.append(""String_Node_Str"" + orderKey);
  return msg.toString();
}","/** 
 * Create the Subject line.
 * @param orderKey The order number.
 * @return The Order number string.
 */
private String createSubjectLine(long orderKey){
  StringBuffer msg=new StringBuffer();
  msg.append(""String_Node_Str"" + orderKey);
  return msg.toString();
}"
51765,"/** 
 * Create a mail message and send it.
 * @param customerInfo  Customer information.
 * @param orderKey
 * @throws MailerAppException
 */
public void createAndSendMail(CustomerInfo customerInfo,String orderKey) throws MailerAppException {
  try {
    EMailMessage eMessage=new EMailMessage(createSubjectLine(orderKey),createMessage(orderKey),customerInfo.getCustomerID());
    Util.debug(""String_Node_Str"" + ""String_Node_Str"" + eMessage.getEmailReceiver() + ""String_Node_Str""+ eMessage.getSubject()+ ""String_Node_Str""+ eMessage.getHtmlContents());
    MimeMessage msg=new MimeMessage(mailSession);
    msg.setFrom();
    msg.setRecipients(Message.RecipientType.TO,InternetAddress.parse(eMessage.getEmailReceiver(),false));
    msg.setSubject(eMessage.getSubject());
    MimeBodyPart mbp=new MimeBodyPart();
    mbp.setText(eMessage.getHtmlContents(),""String_Node_Str"");
    msg.setHeader(""String_Node_Str"",""String_Node_Str"");
    Multipart mp=new MimeMultipart();
    mp.addBodyPart(mbp);
    msg.setContent(mp);
    msg.setSentDate(new Date());
    Transport.send(msg);
    Util.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    Util.debug(""String_Node_Str"");
    Util.debug(""String_Node_Str"" + e);
    e.printStackTrace();
    throw new MailerAppException(""String_Node_Str"");
  }
}","/** 
 * Create a mail message and send it.
 * @param customerInfo  Customer information.
 * @param orderKey
 * @throws MailerAppException
 */
public void createAndSendMail(CustomerInfo customerInfo,long orderKey) throws MailerAppException {
  try {
    EMailMessage eMessage=new EMailMessage(createSubjectLine(orderKey),createMessage(orderKey),customerInfo.getCustomerID());
    Util.debug(""String_Node_Str"" + ""String_Node_Str"" + eMessage.getEmailReceiver() + ""String_Node_Str""+ eMessage.getSubject()+ ""String_Node_Str""+ eMessage.getHtmlContents());
    MimeMessage msg=new MimeMessage(mailSession);
    msg.setFrom();
    msg.setRecipients(Message.RecipientType.TO,InternetAddress.parse(eMessage.getEmailReceiver(),false));
    msg.setSubject(eMessage.getSubject());
    MimeBodyPart mbp=new MimeBodyPart();
    mbp.setText(eMessage.getHtmlContents(),""String_Node_Str"");
    msg.setHeader(""String_Node_Str"",""String_Node_Str"");
    Multipart mp=new MimeMultipart();
    mp.addBodyPart(mbp);
    msg.setContent(mp);
    msg.setSentDate(new Date());
    Transport.send(msg);
    Util.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    Util.debug(""String_Node_Str"");
    Util.debug(""String_Node_Str"" + e);
    e.printStackTrace();
    throw new MailerAppException(""String_Node_Str"");
  }
}"
51766,"/** 
 * Create the email message.
 * @param orderKey The order number.
 * @return The email message.
 */
private String createMessage(String orderKey){
  Util.debug(""String_Node_Str"" + orderKey);
  StringBuffer msg=new StringBuffer();
  EntityManager em=entityManagerFactory.createEntityManager();
  Order order=em.find(Order.class,orderKey);
  msg.append(""String_Node_Str"" + orderKey + ""String_Node_Str"");
  msg.append(""String_Node_Str"" + order.getShipName() + ""String_Node_Str"");
  msg.append(""String_Node_Str"" + order.getShipAddr1() + ""String_Node_Str""+ order.getShipAddr2()+ ""String_Node_Str"");
  msg.append(""String_Node_Str"" + order.getShipCity() + ""String_Node_Str""+ order.getShipState()+ ""String_Node_Str""+ order.getShipZip()+ ""String_Node_Str"");
  msg.append(""String_Node_Str"");
  return msg.toString();
}","/** 
 * Create the email message.
 * @param orderKey The order number.
 * @return The email message.
 */
private String createMessage(long orderKey){
  Util.debug(""String_Node_Str"" + orderKey);
  StringBuffer msg=new StringBuffer();
  EntityManager em=entityManagerFactory.createEntityManager();
  Order order=em.find(Order.class,orderKey);
  msg.append(""String_Node_Str"" + orderKey + ""String_Node_Str"");
  msg.append(""String_Node_Str"" + order.getShipName() + ""String_Node_Str"");
  msg.append(""String_Node_Str"" + order.getShipAddr1() + ""String_Node_Str""+ order.getShipAddr2()+ ""String_Node_Str"");
  msg.append(""String_Node_Str"" + order.getShipCity() + ""String_Node_Str""+ order.getShipState()+ ""String_Node_Str""+ order.getShipZip()+ ""String_Node_Str"");
  msg.append(""String_Node_Str"");
  return msg.toString();
}"
51767,"/** 
 * Create an order with contents of a shopping cart.
 * @param customerID customer's ID
 * @param billName billing name
 * @param billAddr1 billing address line 1
 * @param billAddr2 billing address line 2
 * @param billCity billing address city
 * @param billState billing address state
 * @param billZip billing address zip code
 * @param billPhone billing phone
 * @param shipName shippng name
 * @param shipAddr1 shippng address line 1
 * @param shipAddr2 shippng address line 2
 * @param shipCity shippng address city
 * @param shipState shippng address state
 * @param shipZip shippng address zip code
 * @param shipPhone shippng phone
 * @param creditCard credit card
 * @param ccNum credit card number
 * @param ccExpireMonth credit card expiration month
 * @param ccExpireYear credit card expiration year
 * @param cardHolder credit card holder name
 * @param shippingMethod int of shipping method used
 * @param items vector of StoreItems ordered
 * @return OrderInfo
 */
public OrderInfo createOrder(String customerID,String billName,String billAddr1,String billAddr2,String billCity,String billState,String billZip,String billPhone,String shipName,String shipAddr1,String shipAddr2,String shipCity,String shipState,String shipZip,String shipPhone,String creditCard,String ccNum,String ccExpireMonth,String ccExpireYear,String cardHolder,int shippingMethod,Collection<ShoppingCartItem> items){
  Order order=null;
  Collection<OrderItem> orderitems=new ArrayList<OrderItem>();
  EntityManager em=entityManagerFactory.createEntityManager();
  for (  Object o : items) {
    ShoppingCartItem si=(ShoppingCartItem)o;
    Inventory inv=em.find(Inventory.class,si.getID());
    OrderItem oi=new OrderItem(inv);
    oi.setQuantity(si.getQuantity());
    orderitems.add(oi);
  }
  Customer c=em.find(Customer.class,customerID);
  order=new Order(c,billName,billAddr1,billAddr2,billCity,billState,billZip,billPhone,shipName,shipAddr1,shipAddr2,shipCity,shipState,shipZip,shipPhone,creditCard,ccNum,ccExpireMonth,ccExpireYear,cardHolder,shippingMethod,orderitems);
  em.persist(order);
  em.flush();
  for (  OrderItem o : orderitems) {
    o.setOrder(order);
    o.updatePK();
    em.persist(o);
  }
  em.flush();
  OrderInfo orderInfo=new OrderInfo(order);
  return orderInfo;
}","/** 
 * Create an order with contents of a shopping cart.
 * @param customerID customer's ID
 * @param billName billing name
 * @param billAddr1 billing address line 1
 * @param billAddr2 billing address line 2
 * @param billCity billing address city
 * @param billState billing address state
 * @param billZip billing address zip code
 * @param billPhone billing phone
 * @param shipName shippng name
 * @param shipAddr1 shippng address line 1
 * @param shipAddr2 shippng address line 2
 * @param shipCity shippng address city
 * @param shipState shippng address state
 * @param shipZip shippng address zip code
 * @param shipPhone shippng phone
 * @param creditCard credit card
 * @param ccNum credit card number
 * @param ccExpireMonth credit card expiration month
 * @param ccExpireYear credit card expiration year
 * @param cardHolder credit card holder name
 * @param shippingMethod int of shipping method used
 * @param items vector of StoreItems ordered
 * @return OrderInfo
 */
public OrderInfo createOrder(String customerID,String billName,String billAddr1,String billAddr2,String billCity,String billState,String billZip,String billPhone,String shipName,String shipAddr1,String shipAddr2,String shipCity,String shipState,String shipZip,String shipPhone,String creditCard,String ccNum,String ccExpireMonth,String ccExpireYear,String cardHolder,int shippingMethod,Collection<ShoppingCartItem> items){
  Order order=null;
  Collection<OrderItem> orderitems=new ArrayList<OrderItem>();
  EntityManager em=entityManagerFactory.createEntityManager();
  for (  Object o : items) {
    ShoppingCartItem si=(ShoppingCartItem)o;
    Inventory inv=em.find(Inventory.class,si.getID());
    OrderItem oi=new OrderItem(inv);
    oi.setQuantity(si.getQuantity());
    orderitems.add(oi);
  }
  Customer c=em.find(Customer.class,customerID);
  order=new Order(c,billName,billAddr1,billAddr2,billCity,billState,billZip,billPhone,shipName,shipAddr1,shipAddr2,shipCity,shipState,shipZip,shipPhone,creditCard,ccNum,ccExpireMonth,ccExpireYear,cardHolder,shippingMethod,orderitems);
  em.getTransaction().begin();
  em.persist(order);
  em.flush();
  for (  OrderItem o : orderitems) {
    o.setOrder(order);
    o.updatePK(o.getInventory().getInventoryId());
    em.persist(o);
  }
  em.flush();
  em.getTransaction().commit();
  OrderInfo orderInfo=new OrderInfo(order);
  return orderInfo;
}"
51768,"/** 
 * This method sends an email message.
 * @param customerInfo  Customer information.
 * @param orderKey
 * @throws MailerAppException
 */
public void createAndSendMail(CustomerInfo customerInfo,String orderKey) throws MailerAppException ;","/** 
 * This method sends an email message.
 * @param customerInfo  Customer information.
 * @param orderKey
 * @throws MailerAppException
 */
public void createAndSendMail(CustomerInfo customerInfo,long orderKey) throws MailerAppException ;"
51769,"/** 
 * Send the email order confirmation message. 
 * @param customerInfo The customer information.
 * @param orderKey The order number.
 */
public final void sendConfirmationMessage(CustomerInfo customerInfo,String orderKey){
  try {
    System.out.println(""String_Node_Str"" + mailer);
    mailer.createAndSendMail(customerInfo,orderKey);
  }
 catch (  MailerAppException e) {
    Util.debug(""String_Node_Str"" + e);
  }
}","/** 
 * Send the email order confirmation message. 
 * @param customerInfo The customer information.
 * @param orderKey The order number.
 */
public final void sendConfirmationMessage(CustomerInfo customerInfo,long orderKey){
  try {
    System.out.println(""String_Node_Str"" + mailer);
    mailer.createAndSendMail(customerInfo,orderKey);
  }
 catch (  MailerAppException e) {
    Util.debug(""String_Node_Str"" + e);
  }
}"
51770,"/** 
 * Main service method for ShoppingServlet
 * @param req Object that encapsulates the request to the servlet
 * @param resp Object that encapsulates the response from the servlet
 */
public void performTask(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String action=null;
  action=req.getParameter(Util.ATTR_ACTION);
  Util.debug(""String_Node_Str"" + action);
  if (action.equals(ACTION_SHOPPING)) {
    String category=(String)req.getParameter(""String_Node_Str"");
    HttpSession session=req.getSession(true);
    if ((category == null) || (category.equals(""String_Node_Str""))) {
      category=(String)session.getAttribute(Util.ATTR_CATEGORY);
    }
    if ((category == null) || (category.equals(""String_Node_Str""))) {
      category=""String_Node_Str"";
    }
    session.setAttribute(Util.ATTR_CATEGORY,category);
    Collection c=catalog.getItemsByCategory(Integer.parseInt(category));
    ArrayList items=new ArrayList(c);
    for (int i=0; i < items.size(); ) {
      if (((Inventory)items.get(i)).isPublic())       i++;
 else       items.remove(i);
    }
    req.setAttribute(Util.ATTR_INVITEMS,items);
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_SHOPPING);
  }
 else   if (action.equals(ACTION_PRODUCTDETAIL)) {
    String invID=(String)req.getParameter(""String_Node_Str"");
    req.setAttribute(Util.ATTR_INVITEM,catalog.getItemInventory(invID));
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_PRODUCT);
  }
 else   if (action.equals(ACTION_GOTOCART)) {
    HttpSession session=req.getSession(true);
    ShoppingCart shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    if (shoppingCart != null) {
      try {
        shoppingCart.getItems();
      }
 catch (      RuntimeException e) {
        Util.debug(""String_Node_Str"");
        ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        session.setAttribute(Util.ATTR_CART,shoppingCart);
      }
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CART);
  }
 else   if (action.equals(ACTION_ADDTOCART)) {
    ShoppingCart shoppingCart=null;
    HttpSession session=req.getSession(true);
    shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    if (shoppingCart == null) {
      Util.debug(""String_Node_Str"");
      shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
    }
 else {
      try {
        Util.debug(""String_Node_Str"" + shoppingCart.getItems().size());
        shoppingCart.getItems();
      }
 catch (      RuntimeException e) {
        Util.debug(""String_Node_Str"");
        ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        if (cartContents != null) {
          shoppingCart.setCartContents(cartContents);
        }
      }
    }
    if (shoppingCart != null) {
      String invID=req.getParameter(""String_Node_Str"");
      Inventory inv=catalog.getItemInventory(invID);
      ShoppingCartItem si=new ShoppingCartItem(inv);
      si.setQuantity(Integer.parseInt(req.getParameter(""String_Node_Str"").trim()));
      shoppingCart.addItem(si);
      session.setAttribute(Util.ATTR_CART,shoppingCart);
      session.setAttribute(Util.ATTR_CART_CONTENTS,shoppingCart.getCartContents());
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CART);
  }
 else   if (action.equals(ACTION_UPDATEQUANTITY)) {
    HttpSession session=req.getSession(true);
    ShoppingCart shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    try {
      shoppingCart.getItems();
    }
 catch (    RuntimeException e) {
      Util.debug(""String_Node_Str"");
      ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
      shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
      if (cartContents != null) {
        shoppingCart.setCartContents(cartContents);
      }
    }
    if (shoppingCart != null) {
      try {
        int cnt=0;
        Collection c=shoppingCart.getItems();
        ArrayList items;
        if (c instanceof ArrayList)         items=(ArrayList)c;
 else         items=new ArrayList(c);
        ShoppingCartItem si;
        String parm, parmval;
        for (int parmcnt=0; ; parmcnt++) {
          parm=""String_Node_Str"" + String.valueOf(parmcnt);
          parmval=req.getParameter(parm);
          if ((parmval == null) || parmval.equals(""String_Node_Str"")) {
            break;
          }
 else {
            int quantity=Integer.parseInt(parmval);
            if (quantity == 0) {
              items.remove(cnt);
            }
 else {
              si=(ShoppingCartItem)items.get(cnt);
              si.setQuantity(quantity);
              items.set(cnt,si);
              cnt++;
            }
          }
        }
        if (items.size() > 0) {
          shoppingCart.setItems(items);
          session.setAttribute(Util.ATTR_CART,shoppingCart);
          session.setAttribute(Util.ATTR_CART_CONTENTS,shoppingCart.getCartContents());
        }
 else {
          session.removeAttribute(Util.ATTR_CART);
          session.removeAttribute(Util.ATTR_CART_CONTENTS);
        }
      }
 catch (      Exception e) {
        Util.debug(""String_Node_Str"" + e);
        throw new ServletException(e.getMessage());
      }
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CART);
  }
 else   if (action.equals(ACTION_INITCHECKOUT)) {
    String url;
    HttpSession session=req.getSession(true);
    CustomerInfo customerInfo=(CustomerInfo)session.getAttribute(Util.ATTR_CUSTOMER);
    if (customerInfo == null) {
      req.setAttribute(Util.ATTR_RESULTS,""String_Node_Str"");
      session.setAttribute(Util.ATTR_CHECKOUT,new Boolean(true));
      url=Util.PAGE_LOGIN;
    }
 else {
      url=Util.PAGE_ORDERINFO;
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,url);
  }
 else   if (action.equals(ACTION_ORDERINFODONE)) {
    OrderInfo orderinfo=null;
    ShoppingCart shoppingCart=null;
    HttpSession session=req.getSession(true);
    CustomerInfo customerInfo=(CustomerInfo)session.getAttribute(Util.ATTR_CUSTOMER);
    String customerID=customerInfo.getCustomerID();
    shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    try {
      Util.debug(""String_Node_Str"");
      shoppingCart.getItems();
    }
 catch (    RuntimeException e) {
      Util.debug(""String_Node_Str"");
      ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
      if (cartContents != null) {
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        shoppingCart.setCartContents(cartContents);
      }
 else {
        Util.debug(""String_Node_Str"");
        Util.debug(""String_Node_Str"");
        shoppingCart=null;
      }
    }
    Util.debug(""String_Node_Str"");
    if (shoppingCart != null) {
      Util.debug(""String_Node_Str"");
      String billName=req.getParameter(""String_Node_Str"");
      String billAddr1=req.getParameter(""String_Node_Str"");
      String billAddr2=req.getParameter(""String_Node_Str"");
      String billCity=req.getParameter(""String_Node_Str"");
      String billState=req.getParameter(""String_Node_Str"");
      String billZip=req.getParameter(""String_Node_Str"");
      String billPhone=req.getParameter(""String_Node_Str"");
      String shipName=req.getParameter(""String_Node_Str"");
      String shipAddr1=req.getParameter(""String_Node_Str"");
      String shipAddr2=req.getParameter(""String_Node_Str"");
      String shipCity=req.getParameter(""String_Node_Str"");
      String shipState=req.getParameter(""String_Node_Str"");
      String shipZip=req.getParameter(""String_Node_Str"");
      String shipPhone=req.getParameter(""String_Node_Str"");
      int shippingMethod=Integer.parseInt(req.getParameter(""String_Node_Str""));
      String creditCard=req.getParameter(""String_Node_Str"");
      String ccNum=req.getParameter(""String_Node_Str"");
      String ccExpireMonth=req.getParameter(""String_Node_Str"");
      String ccExpireYear=req.getParameter(""String_Node_Str"");
      String cardHolder=req.getParameter(""String_Node_Str"");
      orderinfo=shoppingCart.createOrder(customerID,billName,billAddr1,billAddr2,billCity,billState,billZip,billPhone,shipName,shipAddr1,shipAddr2,shipCity,shipState,shipZip,shipPhone,creditCard,ccNum,ccExpireMonth,ccExpireYear,cardHolder,shippingMethod,shoppingCart.getItems());
      Util.debug(""String_Node_Str"");
    }
    if (orderinfo != null) {
      req.setAttribute(Util.ATTR_ORDERINFO,orderinfo);
      req.setAttribute(Util.ATTR_CARTITEMS,shoppingCart.getItems());
      session.setAttribute(Util.ATTR_ORDERKEY,orderinfo.getID());
      requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CHECKOUTFINAL);
    }
  }
 else   if (action.equals(ACTION_COMPLETECHECKOUT)) {
    ShoppingCart shoppingCart=null;
    HttpSession session=req.getSession(true);
    String key=(String)session.getAttribute(Util.ATTR_ORDERKEY);
    req.setAttribute(Util.ATTR_ORDERID,key);
    String orderKey=key;
    Util.debug(""String_Node_Str"" + orderKey);
    CustomerInfo customerInfo=(CustomerInfo)session.getAttribute(Util.ATTR_CUSTOMER);
    shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    try {
      Util.debug(""String_Node_Str"");
      shoppingCart.getItems();
    }
 catch (    RuntimeException e) {
      Util.debug(""String_Node_Str"");
      ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
      if (cartContents != null) {
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        shoppingCart.setCartContents(cartContents);
      }
 else {
        Util.debug(""String_Node_Str"");
        Util.debug(""String_Node_Str"");
        shoppingCart=null;
      }
    }
    if (shoppingCart != null) {
      ShoppingCartItem si;
      Collection items=shoppingCart.getItems();
      for (      Object o : items) {
        si=(ShoppingCartItem)o;
        shoppingCart.checkInventory(si);
        Util.debug(""String_Node_Str"" + si.getID());
      }
    }
    try {
      mailer.createAndSendMail(customerInfo,orderKey);
    }
 catch (    MailerAppException e) {
      System.out.println(""String_Node_Str"" + e);
      e.printStackTrace();
    }
catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e);
      e.printStackTrace();
    }
    session.removeAttribute(Util.ATTR_CART);
    session.removeAttribute(Util.ATTR_CART_CONTENTS);
    session.removeAttribute(Util.ATTR_CATEGORY);
    session.removeAttribute(Util.ATTR_ORDERKEY);
    session.removeAttribute(Util.ATTR_CHECKOUT);
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_ORDERDONE);
  }
}","/** 
 * Main service method for ShoppingServlet
 * @param req Object that encapsulates the request to the servlet
 * @param resp Object that encapsulates the response from the servlet
 */
public void performTask(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String action=null;
  action=req.getParameter(Util.ATTR_ACTION);
  Util.debug(""String_Node_Str"" + action);
  if (action.equals(ACTION_SHOPPING)) {
    String category=(String)req.getParameter(""String_Node_Str"");
    HttpSession session=req.getSession(true);
    if ((category == null) || (category.equals(""String_Node_Str""))) {
      category=(String)session.getAttribute(Util.ATTR_CATEGORY);
    }
    if ((category == null) || (category.equals(""String_Node_Str""))) {
      category=""String_Node_Str"";
    }
    session.setAttribute(Util.ATTR_CATEGORY,category);
    Collection c=catalog.getItemsByCategory(Integer.parseInt(category));
    ArrayList items=new ArrayList(c);
    for (int i=0; i < items.size(); ) {
      if (((Inventory)items.get(i)).isPublic())       i++;
 else       items.remove(i);
    }
    req.setAttribute(Util.ATTR_INVITEMS,items);
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_SHOPPING);
  }
 else   if (action.equals(ACTION_PRODUCTDETAIL)) {
    String invID=(String)req.getParameter(""String_Node_Str"");
    req.setAttribute(Util.ATTR_INVITEM,catalog.getItemInventory(invID));
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_PRODUCT);
  }
 else   if (action.equals(ACTION_GOTOCART)) {
    HttpSession session=req.getSession(true);
    ShoppingCart shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    if (shoppingCart != null) {
      try {
        shoppingCart.getItems();
      }
 catch (      RuntimeException e) {
        Util.debug(""String_Node_Str"");
        ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        session.setAttribute(Util.ATTR_CART,shoppingCart);
      }
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CART);
  }
 else   if (action.equals(ACTION_ADDTOCART)) {
    ShoppingCart shoppingCart=null;
    HttpSession session=req.getSession(true);
    shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    if (shoppingCart == null) {
      Util.debug(""String_Node_Str"");
      shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
    }
 else {
      try {
        Util.debug(""String_Node_Str"" + shoppingCart.getItems().size());
        shoppingCart.getItems();
      }
 catch (      RuntimeException e) {
        Util.debug(""String_Node_Str"");
        ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        if (cartContents != null) {
          shoppingCart.setCartContents(cartContents);
        }
      }
    }
    if (shoppingCart != null) {
      String invID=req.getParameter(""String_Node_Str"");
      Inventory inv=catalog.getItemInventory(invID);
      ShoppingCartItem si=new ShoppingCartItem(inv);
      si.setQuantity(Integer.parseInt(req.getParameter(""String_Node_Str"").trim()));
      shoppingCart.addItem(si);
      session.setAttribute(Util.ATTR_CART,shoppingCart);
      session.setAttribute(Util.ATTR_CART_CONTENTS,shoppingCart.getCartContents());
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CART);
  }
 else   if (action.equals(ACTION_UPDATEQUANTITY)) {
    HttpSession session=req.getSession(true);
    ShoppingCart shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    try {
      shoppingCart.getItems();
    }
 catch (    RuntimeException e) {
      Util.debug(""String_Node_Str"");
      ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
      shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
      if (cartContents != null) {
        shoppingCart.setCartContents(cartContents);
      }
    }
    if (shoppingCart != null) {
      try {
        int cnt=0;
        Collection c=shoppingCart.getItems();
        ArrayList items;
        if (c instanceof ArrayList)         items=(ArrayList)c;
 else         items=new ArrayList(c);
        ShoppingCartItem si;
        String parm, parmval;
        for (int parmcnt=0; ; parmcnt++) {
          parm=""String_Node_Str"" + String.valueOf(parmcnt);
          parmval=req.getParameter(parm);
          if ((parmval == null) || parmval.equals(""String_Node_Str"")) {
            break;
          }
 else {
            int quantity=Integer.parseInt(parmval);
            if (quantity == 0) {
              items.remove(cnt);
            }
 else {
              si=(ShoppingCartItem)items.get(cnt);
              si.setQuantity(quantity);
              items.set(cnt,si);
              cnt++;
            }
          }
        }
        if (items.size() > 0) {
          shoppingCart.setItems(items);
          session.setAttribute(Util.ATTR_CART,shoppingCart);
          session.setAttribute(Util.ATTR_CART_CONTENTS,shoppingCart.getCartContents());
        }
 else {
          session.removeAttribute(Util.ATTR_CART);
          session.removeAttribute(Util.ATTR_CART_CONTENTS);
        }
      }
 catch (      Exception e) {
        Util.debug(""String_Node_Str"" + e);
        throw new ServletException(e.getMessage());
      }
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CART);
  }
 else   if (action.equals(ACTION_INITCHECKOUT)) {
    String url;
    HttpSession session=req.getSession(true);
    CustomerInfo customerInfo=(CustomerInfo)session.getAttribute(Util.ATTR_CUSTOMER);
    if (customerInfo == null) {
      req.setAttribute(Util.ATTR_RESULTS,""String_Node_Str"");
      session.setAttribute(Util.ATTR_CHECKOUT,new Boolean(true));
      url=Util.PAGE_LOGIN;
    }
 else {
      url=Util.PAGE_ORDERINFO;
    }
    requestDispatch(getServletConfig().getServletContext(),req,resp,url);
  }
 else   if (action.equals(ACTION_ORDERINFODONE)) {
    OrderInfo orderinfo=null;
    ShoppingCart shoppingCart=null;
    HttpSession session=req.getSession(true);
    CustomerInfo customerInfo=(CustomerInfo)session.getAttribute(Util.ATTR_CUSTOMER);
    String customerID=customerInfo.getCustomerID();
    shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    try {
      Util.debug(""String_Node_Str"");
      shoppingCart.getItems();
    }
 catch (    RuntimeException e) {
      Util.debug(""String_Node_Str"");
      ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
      if (cartContents != null) {
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        shoppingCart.setCartContents(cartContents);
      }
 else {
        Util.debug(""String_Node_Str"");
        Util.debug(""String_Node_Str"");
        shoppingCart=null;
      }
    }
    Util.debug(""String_Node_Str"");
    if (shoppingCart != null) {
      Util.debug(""String_Node_Str"");
      String billName=req.getParameter(""String_Node_Str"");
      String billAddr1=req.getParameter(""String_Node_Str"");
      String billAddr2=req.getParameter(""String_Node_Str"");
      String billCity=req.getParameter(""String_Node_Str"");
      String billState=req.getParameter(""String_Node_Str"");
      String billZip=req.getParameter(""String_Node_Str"");
      String billPhone=req.getParameter(""String_Node_Str"");
      String shipName=req.getParameter(""String_Node_Str"");
      String shipAddr1=req.getParameter(""String_Node_Str"");
      String shipAddr2=req.getParameter(""String_Node_Str"");
      String shipCity=req.getParameter(""String_Node_Str"");
      String shipState=req.getParameter(""String_Node_Str"");
      String shipZip=req.getParameter(""String_Node_Str"");
      String shipPhone=req.getParameter(""String_Node_Str"");
      int shippingMethod=Integer.parseInt(req.getParameter(""String_Node_Str""));
      String creditCard=req.getParameter(""String_Node_Str"");
      String ccNum=req.getParameter(""String_Node_Str"");
      String ccExpireMonth=req.getParameter(""String_Node_Str"");
      String ccExpireYear=req.getParameter(""String_Node_Str"");
      String cardHolder=req.getParameter(""String_Node_Str"");
      orderinfo=shoppingCart.createOrder(customerID,billName,billAddr1,billAddr2,billCity,billState,billZip,billPhone,shipName,shipAddr1,shipAddr2,shipCity,shipState,shipZip,shipPhone,creditCard,ccNum,ccExpireMonth,ccExpireYear,cardHolder,shippingMethod,shoppingCart.getItems());
      Util.debug(""String_Node_Str"");
    }
    if (orderinfo != null) {
      req.setAttribute(Util.ATTR_ORDERINFO,orderinfo);
      req.setAttribute(Util.ATTR_CARTITEMS,shoppingCart.getItems());
      session.setAttribute(Util.ATTR_ORDERKEY,orderinfo.getID());
      requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_CHECKOUTFINAL);
    }
  }
 else   if (action.equals(ACTION_COMPLETECHECKOUT)) {
    ShoppingCart shoppingCart=null;
    HttpSession session=req.getSession(true);
    long key=(Long)session.getAttribute(Util.ATTR_ORDERKEY);
    req.setAttribute(Util.ATTR_ORDERID,key);
    long orderKey=key;
    Util.debug(""String_Node_Str"" + orderKey);
    CustomerInfo customerInfo=(CustomerInfo)session.getAttribute(Util.ATTR_CUSTOMER);
    shoppingCart=(ShoppingCart)session.getAttribute(Util.ATTR_CART);
    try {
      Util.debug(""String_Node_Str"");
      shoppingCart.getItems();
    }
 catch (    RuntimeException e) {
      Util.debug(""String_Node_Str"");
      ShoppingCartContents cartContents=(ShoppingCartContents)session.getAttribute(Util.ATTR_CART_CONTENTS);
      if (cartContents != null) {
        shoppingCart=(ShoppingCart)WebUtil.getSpringBean(this.getServletContext(),""String_Node_Str"");
        shoppingCart.setCartContents(cartContents);
      }
 else {
        Util.debug(""String_Node_Str"");
        Util.debug(""String_Node_Str"");
        shoppingCart=null;
      }
    }
    if (shoppingCart != null) {
      ShoppingCartItem si;
      Collection items=shoppingCart.getItems();
      for (      Object o : items) {
        si=(ShoppingCartItem)o;
        shoppingCart.checkInventory(si);
        Util.debug(""String_Node_Str"" + si.getID());
      }
    }
    try {
      mailer.createAndSendMail(customerInfo,orderKey);
    }
 catch (    MailerAppException e) {
      System.out.println(""String_Node_Str"" + e);
      e.printStackTrace();
    }
catch (    Exception e) {
      System.out.println(""String_Node_Str"" + e);
      e.printStackTrace();
    }
    session.removeAttribute(Util.ATTR_CART);
    session.removeAttribute(Util.ATTR_CART_CONTENTS);
    session.removeAttribute(Util.ATTR_CATEGORY);
    session.removeAttribute(Util.ATTR_ORDERKEY);
    session.removeAttribute(Util.ATTR_CHECKOUT);
    requestDispatch(getServletConfig().getServletContext(),req,resp,Util.PAGE_ORDERDONE);
  }
}"
51771,"private Map<Integer,Integer> parseHeader(String[] header){
  Map<Integer,Integer> map=new HashMap<Integer,Integer>(4);
  for (int i=0; i < HEADERS.length; i++) {
    for (int j=0; j < header.length; j++) {
      if (CsvProvider.isSimilarString(header[j],HEADERS[i],1)) {
        map.put(i,j);
      }
    }
  }
  return map;
}","private Map<Integer,Integer> parseHeader(String[] header) throws IOException {
  Map<Integer,Integer> map=new HashMap<Integer,Integer>(4);
  for (int i=0; i < HEADERS.length; i++) {
    for (int j=0; j < header.length; j++) {
      if (CsvProvider.isSimilarString(header[j],HEADERS[i],1)) {
        map.put(i,j);
      }
    }
  }
  if (map.get(HEADER_GROUP) == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (map.get(HEADER_USERNAME) == null && map.get(HEADER_STUDENTID) == null) {
    throw new IOException(""String_Node_Str"");
  }
  return map;
}"
51772,"/** 
 * Parse the CSV import.
 * @param util TODO
 * @param csvfile
 * @return
 * @throws InitializationException
 * @throws BbServiceException
 */
private boolean parseCSV(BlackboardUtil util,Reader csvfile){
  CSVReader reader;
  sets=new HashMap<String,GroupSet>();
  try {
    reader=new CSVReader(csvfile);
    String[] nextLine;
    int lineNum=2;
    Map<Integer,Integer> headerIndexes=parseHeader(reader.readNext());
    if (headerIndexes.get(HEADER_GROUP) == null || (headerIndexes.get(HEADER_USERNAME) == null && headerIndexes.get(HEADER_STUDENTID) == null)) {
      throw new IOException(""String_Node_Str"");
    }
    while ((nextLine=reader.readNext()) != null) {
      if ((headerIndexes.get(HEADER_GROUP) == null || nextLine[headerIndexes.get(HEADER_GROUP)].trim().isEmpty()) || ((headerIndexes.get(HEADER_USERNAME) == null || nextLine[headerIndexes.get(HEADER_USERNAME)].trim().isEmpty()) && (headerIndexes.get(HEADER_STUDENTID) == null || nextLine[headerIndexes.get(HEADER_STUDENTID)].trim().isEmpty()))) {
        throw new IOException(""String_Node_Str"" + lineNum + ""String_Node_Str"");
      }
      if (headerIndexes.get(HEADER_GROUPSET) == null || nextLine[headerIndexes.get(HEADER_GROUPSET)].trim().isEmpty()) {
        nextLine[headerIndexes.get(HEADER_GROUPSET)]=GroupSet.EMPTY_NAME;
      }
      GroupSet set=sets.get(nextLine[headerIndexes.get(HEADER_GROUPSET)].trim());
      if (set == null) {
        set=new GroupSet(nextLine[headerIndexes.get(HEADER_GROUPSET)].trim());
        sets.put(nextLine[headerIndexes.get(HEADER_GROUPSET)],set);
      }
      GroGroup group=set.getGroup(nextLine[headerIndexes.get(HEADER_GROUP)].trim());
      if (group == null) {
        group=new GroGroup(nextLine[headerIndexes.get(HEADER_GROUP)].trim());
        set.addGroup(group);
      }
      GroUser user=null;
      User bbUser=null;
      if (headerIndexes.get(HEADER_USERNAME) != null && !nextLine[headerIndexes.get(HEADER_USERNAME)].trim().isEmpty()) {
        bbUser=util.findUserByUsername(nextLine[headerIndexes.get(HEADER_USERNAME)].trim());
      }
 else {
        bbUser=util.findUserByStudentId(nextLine[headerIndexes.get(HEADER_STUDENTID)].trim());
      }
      if (bbUser == null) {
        throw new IOException(""String_Node_Str"");
      }
 else {
        user=new GroUser(bbUser);
      }
      if (!group.hasMember(user)) {
        group.addMember(user);
      }
      lineNum++;
    }
  }
 catch (  IOException e) {
    error(""String_Node_Str"" + e.getMessage());
    return false;
  }
  log(""String_Node_Str"");
  return true;
}","/** 
 * Parse the CSV import.
 * @param util TODO
 * @param csvfile
 * @return
 * @throws InitializationException
 * @throws BbServiceException
 */
private boolean parseCSV(BlackboardUtil util,Reader csvfile){
  CSVReader reader;
  sets=new HashMap<String,GroupSet>();
  try {
    reader=new CSVReader(csvfile);
    String[] nextLine;
    int lineNum=2;
    Map<Integer,Integer> headerIndexes=parseHeader(reader.readNext());
    Integer groupIndex=headerIndexes.get(HEADER_GROUP);
    Integer usernameIndex=headerIndexes.get(HEADER_USERNAME);
    Integer studentIdIndex=headerIndexes.get(HEADER_STUDENTID);
    Integer groupSetIndex=headerIndexes.get(HEADER_GROUPSET);
    while ((nextLine=reader.readNext()) != null) {
      if (nextLine[groupIndex].trim().isEmpty()) {
        throw new IOException(""String_Node_Str"" + lineNum + ""String_Node_Str"");
      }
      if ((usernameIndex == null || nextLine[usernameIndex].trim().isEmpty()) && (studentIdIndex == null || nextLine[studentIdIndex].trim().isEmpty())) {
        throw new IOException(""String_Node_Str"" + lineNum + ""String_Node_Str"");
      }
      GroupSet set;
      String groupSetName;
      if (groupSetIndex == null || nextLine[groupSetIndex].trim().isEmpty()) {
        groupSetName=GroupSet.EMPTY_NAME;
      }
 else {
        groupSetName=nextLine[groupSetIndex].trim();
      }
      set=sets.get(groupSetName);
      if (set == null) {
        set=new GroupSet(groupSetName);
        sets.put(groupSetName,set);
      }
      GroGroup group=set.getGroup(nextLine[groupIndex].trim());
      if (group == null) {
        group=new GroGroup(nextLine[groupIndex].trim());
        set.addGroup(group);
      }
      GroUser user=null;
      User bbUser=null;
      if (usernameIndex != null && !nextLine[usernameIndex].trim().isEmpty()) {
        bbUser=util.findUserByUsername(nextLine[usernameIndex].trim());
      }
 else {
        bbUser=util.findUserByStudentId(nextLine[studentIdIndex].trim());
      }
      if (bbUser == null) {
        throw new IOException(""String_Node_Str"" + lineNum + ""String_Node_Str"");
      }
 else {
        user=new GroUser(bbUser);
      }
      if (!group.hasMember(user)) {
        group.addMember(user);
      }
      lineNum++;
    }
  }
 catch (  IOException e) {
    error(""String_Node_Str"" + e.getMessage());
    return false;
  }
  log(""String_Node_Str"");
  return true;
}"
51773,"/** 
 * Filter out users according to some criteria.
 * @param fieldId - the grade center field to filter on
 * @param op - the operator to apply for the filter
 * @param term - the actual term to use the operator on
 * @return
 * @throws PersistenceException
 * @throws ConnectionNotAvailableException
 */
public LinkedHashSet<UserWrapper> search(ArrayList<SearchCriteria> criterias,String combinationOp) throws PersistenceException, ConnectionNotAvailableException {
  if (criterias.isEmpty()) {
    debug+=""String_Node_Str"";
    return new LinkedHashSet<UserWrapper>();
  }
  if (criterias.size() == 1) {
    return searchSingleCriteria(criterias.get(0));
  }
  if (combinationOp.equals(""String_Node_Str"")) {
    LinkedHashSet<UserWrapper> ret=new LinkedHashSet<UserWrapper>();
    for (    SearchCriteria criteria : criterias) {
      LinkedHashSet<UserWrapper> searchRes=searchSingleCriteria(criteria);
      ret.addAll(searchRes);
    }
    createSearchFields(ret,criterias);
    return ret;
  }
 else   if (combinationOp.equals(""String_Node_Str"")) {
    LinkedHashSet<UserWrapper> ret=searchSingleCriteria(criterias.remove(0));
    for (    SearchCriteria criteria : criterias) {
      LinkedHashSet<UserWrapper> searchRes=searchSingleCriteria(criteria);
      ret.retainAll(searchRes);
    }
    createSearchFields(ret,criterias);
    return ret;
  }
  debug+=""String_Node_Str"" + combinationOp + ""String_Node_Str"";
  return new LinkedHashSet<UserWrapper>();
}","/** 
 * Filter out users according to some criteria.
 * @param fieldId - the grade center field to filter on
 * @param op - the operator to apply for the filter
 * @param term - the actual term to use the operator on
 * @return
 * @throws PersistenceException
 * @throws ConnectionNotAvailableException
 */
public LinkedHashSet<UserWrapper> search(ArrayList<SearchCriteria> criterias,String combinationOp) throws PersistenceException, ConnectionNotAvailableException {
  if (criterias.isEmpty()) {
    debug+=""String_Node_Str"";
    return new LinkedHashSet<UserWrapper>();
  }
  if (criterias.size() == 1) {
    debug+=""String_Node_Str"";
    LinkedHashSet<UserWrapper> ret=searchSingleCriteria(criterias.get(0));
    createSearchFields(ret,criterias);
    return ret;
  }
  debug+=""String_Node_Str"";
  debug+=""String_Node_Str"" + criterias.size();
  if (combinationOp.equals(""String_Node_Str"")) {
    LinkedHashSet<UserWrapper> ret=new LinkedHashSet<UserWrapper>();
    for (    SearchCriteria criteria : criterias) {
      LinkedHashSet<UserWrapper> searchRes=searchSingleCriteria(criteria);
      ret.addAll(searchRes);
    }
    createSearchFields(ret,criterias);
    return ret;
  }
 else   if (combinationOp.equals(""String_Node_Str"")) {
    LinkedHashSet<UserWrapper> ret=null;
    debug+=""String_Node_Str"" + criterias.size();
    for (    SearchCriteria criteria : criterias) {
      if (ret == null) {
        ret=searchSingleCriteria(criteria);
        continue;
      }
      LinkedHashSet<UserWrapper> searchRes=searchSingleCriteria(criteria);
      ret.retainAll(searchRes);
    }
    debug+=""String_Node_Str"" + criterias.size();
    createSearchFields(ret,criterias);
    return ret;
  }
  debug+=""String_Node_Str"" + combinationOp + ""String_Node_Str"";
  return new LinkedHashSet<UserWrapper>();
}"
51774,"/** 
 * Because the multiple search is done by combining individual searches, each UserWrapper initially can only knows of at least 1 search field. We have to tell each wrapper about the other fields. 
 * @param existing
 * @param newer
 * @throws PersistenceException 
 * @throws KeyNotFoundException 
 */
private void createSearchFields(LinkedHashSet<UserWrapper> wrappers,ArrayList<SearchCriteria> criterias) throws KeyNotFoundException, PersistenceException {
  ScoreDbLoader scoreLoader=ScoreDbLoader.Default.getInstance();
  LineitemDbLoader lineitemLoader=LineitemDbLoader.Default.getInstance();
  for (  SearchCriteria criteria : criterias) {
    for (    UserWrapper wrap : wrappers) {
      Lineitem item=lineitemLoader.loadById(Id.generateId(Lineitem.LINEITEM_DATA_TYPE,criteria.getField()));
      Score score=scoreLoader.loadByCourseMembershipIdAndLineitemId(wrap.getMember().getId(),item.getId());
      wrap.addSearchFields(item.getName(),score.getGrade());
    }
  }
}","/** 
 * Because the multiple search is done by combining individual searches, each UserWrapper initially can only knows of at least 1 search field. We have to tell each wrapper about the other fields. 
 * @param existing
 * @param newer
 * @throws PersistenceException 
 * @throws KeyNotFoundException 
 */
private void createSearchFields(LinkedHashSet<UserWrapper> wrappers,ArrayList<SearchCriteria> criterias) throws PersistenceException {
  ScoreDbLoader scoreLoader=ScoreDbLoader.Default.getInstance();
  LineitemDbLoader lineitemLoader=LineitemDbLoader.Default.getInstance();
  debug+=""String_Node_Str"" + criterias.size() + ""String_Node_Str"";
  for (  SearchCriteria criteria : criterias) {
    if (criteria.isUserInfoField()) {
      debug+=""String_Node_Str"" + criteria.getField();
      continue;
    }
    for (    UserWrapper wrap : wrappers) {
      debug+=""String_Node_Str"" + criteria.getField();
      Lineitem item=lineitemLoader.loadById(Id.generateId(Lineitem.LINEITEM_DATA_TYPE,criteria.getField()));
      Score score;
      try {
        score=scoreLoader.loadByCourseMembershipIdAndLineitemId(wrap.getMember().getId(),item.getId());
        debug+=""String_Node_Str"" + item.getName() + ""String_Node_Str""+ score.getGrade()+ ""String_Node_Str"";
        wrap.addSearchFields(item.getName(),score.getGrade());
      }
 catch (      KeyNotFoundException e) {
        debug+=""String_Node_Str"";
        wrap.addSearchFields(item.getName(),""String_Node_Str"");
      }
    }
  }
}"
51775,"private LinkedHashSet<UserWrapper> searchSingleCriteriaUserinfo(String fieldId,String op,String term) throws KeyNotFoundException, PersistenceException, ConnectionNotAvailableException {
  ArrayList<UserWrapper> users=getUsers();
  LinkedHashSet<UserWrapper> ret=new LinkedHashSet<UserWrapper>();
  for (  UserWrapper user : users) {
    String target;
    if (fieldId.equals(""String_Node_Str"")) {
      target=user.getGivenName();
    }
 else     if (fieldId.equals(""String_Node_Str"")) {
      target=user.getFamilyName();
    }
 else     if (fieldId.equals(""String_Node_Str"")) {
      target=user.getStudentId();
    }
 else {
      debug+=""String_Node_Str"";
      return ret;
    }
    debug+=""String_Node_Str"" + target + ""String_Node_Str""+ term+ ""String_Node_Str"";
    if (op.equals(""String_Node_Str"")) {
      if (target.contains(term) || term.isEmpty()) {
        ret.add(user);
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      if (target.equals(term)) {
        ret.add(user);
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      if (!target.contains(term)) {
        ret.add(user);
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      try {
        double right=Double.parseDouble(term);
        double left=Double.parseDouble(target);
        if (left > right) {
          ret.add(user);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      try {
        double right=Double.parseDouble(term);
        double left=Double.parseDouble(target);
        if (left == right) {
          ret.add(user);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      try {
        double right=Double.parseDouble(term);
        double left=Double.parseDouble(target);
        if (left < right) {
          ret.add(user);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else {
      debug+=""String_Node_Str"";
      return new LinkedHashSet<UserWrapper>();
    }
  }
  return ret;
}","private LinkedHashSet<UserWrapper> searchSingleCriteriaUserinfo(String fieldId,String op,String term) throws KeyNotFoundException, PersistenceException, ConnectionNotAvailableException {
  ArrayList<UserWrapper> users=getUsers();
  LinkedHashSet<UserWrapper> ret=new LinkedHashSet<UserWrapper>();
  for (  UserWrapper user : users) {
    String target=getValueFromUserInfoField(user,fieldId);
    if (target.isEmpty()) {
      debug+=""String_Node_Str"";
      return ret;
    }
    if (op.equals(""String_Node_Str"")) {
      if (target.contains(term) || term.isEmpty()) {
        ret.add(user);
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      if (target.equals(term)) {
        ret.add(user);
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      if (!target.contains(term)) {
        ret.add(user);
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      try {
        double right=Double.parseDouble(term);
        double left=Double.parseDouble(target);
        if (left > right) {
          ret.add(user);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      try {
        double right=Double.parseDouble(term);
        double left=Double.parseDouble(target);
        if (left == right) {
          ret.add(user);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (op.equals(""String_Node_Str"")) {
      try {
        double right=Double.parseDouble(term);
        double left=Double.parseDouble(target);
        if (left < right) {
          ret.add(user);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else {
      debug+=""String_Node_Str"";
      return new LinkedHashSet<UserWrapper>();
    }
  }
  return ret;
}"
51776,"/** 
 * Does the search, but only on a single criteria.
 * @param criteria
 * @return
 * @throws PersistenceException
 * @throws ConnectionNotAvailableException
 */
private LinkedHashSet<UserWrapper> searchSingleCriteria(SearchCriteria criteria) throws PersistenceException, ConnectionNotAvailableException {
  String fieldId=criteria.getField();
  String op=criteria.getOp();
  String term=criteria.getTerm();
  GradeCenterUtil gc=new GradeCenterUtil(ctx);
  debug+=""String_Node_Str"" + fieldId + ""String_Node_Str"";
  if (gc.getUserinfoColumns().containsKey(fieldId)) {
    debug+=""String_Node_Str"";
    return searchSingleCriteriaUserinfo(fieldId,op,term);
  }
  return searchSingleCriteriaLineitems(fieldId,op,term);
}","/** 
 * Does the search, but only on a single criteria.
 * @param criteria
 * @return
 * @throws PersistenceException
 * @throws ConnectionNotAvailableException
 */
private LinkedHashSet<UserWrapper> searchSingleCriteria(SearchCriteria criteria) throws PersistenceException, ConnectionNotAvailableException {
  String fieldId=criteria.getField();
  String op=criteria.getOp();
  String term=criteria.getTerm();
  debug+=""String_Node_Str"" + fieldId + ""String_Node_Str"";
  if (GradeCenterUtil.getUserinfoColumns().containsKey(fieldId)) {
    debug+=""String_Node_Str"";
    criteria.setUserInfoField(true);
    return searchSingleCriteriaUserinfo(fieldId,op,term);
  }
  return searchSingleCriteriaLineitems(fieldId,op,term);
}"
51777,"public Tuple exec(Tuple input) throws IOException {
  List<Tuple> bagtuples=new ArrayList<Tuple>();
  ;
  Tuple result=TupleFactory.getInstance().newTuple(bagtuples);
  String[] paramColumns=getParamColumns();
  try {
    if (DataChecker.isValid(input,1)) {
      String json=""String_Node_Str"";
      if (input.get(0) != null) {
        json=input.get(0).toString();
      }
      JSONObject jsonObject=JSONObject.fromObject(json);
      for (      String column : paramColumns) {
        String data=(String)jsonObject.get(column);
        if (data == null) {
          data=""String_Node_Str"";
        }
        result.append(data);
      }
    }
  }
 catch (  ExecException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    for (    String column : paramColumns) {
      result.append(column + ""String_Node_Str"");
    }
  }
  return result;
}","public Tuple exec(Tuple input) throws IOException {
  List<Tuple> bagtuples=new ArrayList<Tuple>();
  ;
  Tuple result=TupleFactory.getInstance().newTuple(bagtuples);
  String[] paramColumns=getParamColumns();
  String jj=""String_Node_Str"";
  try {
    if (DataChecker.isValid(input,1)) {
      String json=""String_Node_Str"";
      if (input.get(0) != null) {
        json=input.get(0).toString();
        json=json.replace(""String_Node_Str"",""String_Node_Str"");
      }
      jj=json;
      JSONObject jsonObject=JSONObject.fromObject(json);
      for (      String column : paramColumns) {
        String data=(String)jsonObject.get(column);
        if (data == null) {
          data=""String_Node_Str"";
        }
        result.append(data);
      }
    }
  }
 catch (  ExecException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    result.append(jj);
    for (    String column : paramColumns) {
      result.append(""String_Node_Str"");
    }
  }
  return result;
}"
51778,"public void Update(boolean refresh){
  if (_isVisible) {
    _textHandler.Update();
    _textHandler.Clear();
    if (refresh) {
      StringSquisher.Clear();
      StringSquisher.Squish(title);
      HashMap<Integer,GenericItem> items=_equipment.GetItems();
      for (      Integer item : items.keySet()) {
        StringSquisher.Squish(ItemSlot.Names[item].substring(0,1),sep,items.get(item).Name,newline);
      }
      display=StringSquisher.Flush();
    }
    _textHandler.WriteDefault(display,320,30,GetHudOrigin());
  }
}","public void Update(boolean refresh){
  if (_isVisible) {
    _textHandler.Update();
    _textHandler.Clear();
    if (refresh) {
      StringSquisher.Clear();
      StringSquisher.Squish(title);
      HashMap<Integer,GenericItem> items=_equipment.GetItems();
      for (      Integer item : items.keySet()) {
        StringSquisher.Squish(ItemSlot.Names[item].substring(0,1),sep,items.get(item).Name,newline);
      }
      display=StringSquisher.Flush();
    }
    _textHandler.WriteDefault(display,20,60,GetHudOrigin());
  }
}"
51779,"protected IHud(ICreature owner,int width,int height){
  _parent=owner;
  if (_menuBase == null) {
    _menuBase=XnaManager.GetMenuBaseAsset();
  }
  _dimensions=new Point2(width,height);
  playerHudPositions.add(new Point2(GameManager.SpriteWidth / 2,XnaManager.WindowHeight - _dimensions.Y / 2));
  playerHudPositions.add(new Point2(XnaManager.WindowWidth - _dimensions.X / 2,XnaManager.WindowHeight + _dimensions.Y / 2));
  playerHudPositions.add(new Point2(0,0));
  playerHudPositions.add(new Point2(XnaManager.WindowWidth - _dimensions.X / 2,0));
}","protected IHud(ICreature owner,int width,int height){
  _parent=owner;
  if (_menuBase == null) {
    _menuBase=XnaManager.GetMenuBaseAsset();
  }
  _dimensions=new Point2(width,height);
  playerHudPositions.add(new Point2(0,XnaManager.WindowHeight - _dimensions.Y));
  playerHudPositions.add(new Point2(XnaManager.WindowWidth - _dimensions.X,XnaManager.WindowHeight + _dimensions.Y));
  playerHudPositions.add(new Point2(0,0));
  playerHudPositions.add(new Point2(XnaManager.WindowWidth - _dimensions.X,0));
}"
51780,"public void Draw(){
  if (_isVisible) {
    XnaManager.Renderer.Draw(_menuBase,GetHudOrigin(),Depth.HudBG,Color.WHITE,(int)XnaManager.GetCenter().X,(int)XnaManager.GetCenter().Y);
    _textHandler.Draw();
    _deltas.Draw();
    _equipHud.Draw();
  }
}","public void Draw(){
  if (_isVisible) {
    XnaManager.Renderer.Draw(_menuBase,GetHudOrigin(),Depth.HudBG,Color.BLACK,(int)XnaManager.GetCenter().X,(int)XnaManager.GetCenter().Y);
    _textHandler.Draw();
    _deltas.Draw();
    _equipHud.Draw();
  }
}"
51781,"public void Draw(){
  if (!_isVisible) {
    return;
  }
  XnaManager.Renderer.Draw(_menuBase,GetHudOrigin(),Depth.HudBG,Color.GREEN,GameManager.SpriteWidth,CalculateHeight(StatType.HEALTH));
  XnaManager.Renderer.Draw(_menuBase,_manaPosition,Depth.HudBG,Color.BLUE,GameManager.SpriteWidth,CalculateHeight(StatType.MANA));
  XnaManager.Renderer.Draw(_menuBase,_costPosition,Depth.HudBG,Color.YELLOW,GameManager.SpriteWidth / 2,CostOfCurrentSkill());
  _textHandler.Draw();
}","public void Draw(){
  if (!_isVisible) {
    return;
  }
  XnaManager.Renderer.Draw(_menuBase,GetHudOrigin(),Depth.HudBG,Color.GREEN,GameManager.SpriteWidth,CalculateHeight(StatType.HEALTH));
  XnaManager.Renderer.Draw(_menuBase,_manaPosition,Depth.HudBG,Color.BLUE,GameManager.SpriteWidth,CalculateHeight(StatType.MANA));
  XnaManager.Renderer.Draw(_menuBase,_manaPosition,Depth.HudBG,Color.YELLOW,GameManager.SpriteWidth / 2,CostOfCurrentSkill());
  _textHandler.Draw();
}"
51782,"public SkillHud(ICreature owner){
  super(owner,GameManager.SpriteWidth,XnaManager.WindowHeight / 4);
  _manaPosition=new Point2(GetHudOrigin().X,GetHudOrigin().Y - XnaManager.WindowHeight / 4);
  _costPosition=new Point2(GetHudOrigin().X - GameManager.SpriteWidth / 4,GetHudOrigin().Y - XnaManager.WindowHeight / 4 + _dimensions.Y / 2 - GameManager.SpriteHeight / 4);
}","public SkillHud(ICreature owner){
  super(owner,GameManager.SpriteWidth,XnaManager.WindowHeight / 4);
  _manaPosition=new Point2(GetHudOrigin().X,GetHudOrigin().Y - XnaManager.WindowHeight / 4);
}"
51783,"public void Update(){
  if (_isVisible) {
    _textHandler.Update();
    _textHandler.Clear();
    _textHandler.WriteDefault(GetSkillStrings(),GameManager.SpriteWidth,0,GetHudOrigin());
  }
}","public void Update(){
  if (_isVisible) {
    _textHandler.Update();
    _textHandler.Clear();
    _textHandler.WriteDefault(GetSkillStrings(),(int)GetHudOrigin().X + GameManager.SpriteWidth,GameManager.SpriteHeight,null);
  }
}"
51784,"public void Draw(){
  if (!_isVisible) {
    return;
  }
  XnaManager.Renderer.Draw(_menuBase.getScaledCopy((int)CalculateHeight(StatType.HEALTH).PosX,(int)CalculateHeight(StatType.HEALTH).PosY),GetHudOrigin(),Depth.HudBG,Color.green);
  XnaManager.Renderer.Draw(_menuBase.getScaledCopy((int)CostOfCurrentSkill().PosX,(int)CostOfCurrentSkill().PosY),_manaPosition,Depth.HudBG,Color.yellow);
  XnaManager.Renderer.Draw(_menuBase.getScaledCopy((int)CalculateHeight(StatType.MANA).PosX,(int)CalculateHeight(StatType.MANA).PosY),_manaPosition,Depth.HudBG,Color.blue);
  _textHandler.Draw();
}","public void Draw(){
  if (!_isVisible) {
    return;
  }
  XnaManager.Renderer.Draw(_menuBase.getScaledCopy((int)_dimensions.X,CalculateHeight(StatType.HEALTH)),GetHudOrigin(),Depth.HudBG,Color.green);
  XnaManager.Renderer.Draw(_menuBase.getScaledCopy((int)_dimensions.X,CalculateHeight(StatType.MANA)),_manaPosition,Depth.HudBG,Color.blue);
  XnaManager.Renderer.Draw(_menuBase.getScaledCopy((int)(_dimensions.X * .5f),CostOfCurrentSkill()),_manaPosition,Depth.HudBG,Color.yellow);
  _textHandler.Draw();
}"
51785,"private Point2 CostOfCurrentSkill(){
  return new Point2(_dimensions.X * .5f,_parent.GetCurrentSkillCost() / _parent.GetMax(StatType.MANA) * _dimensions.Y);
}","private int CostOfCurrentSkill(){
  return (int)(_parent.GetCurrentSkillCost() / _parent.GetMax(StatType.MANA) * _dimensions.Y);
}"
51786,"private Point2 CalculateHeight(String statType){
  return new Point2(_dimensions.X,(_parent.Get(statType) / _parent.GetMax(statType)) * _dimensions.Y);
}","private int CalculateHeight(String statType){
  return (int)((_parent.Get(statType) / _parent.GetMax(statType)) * _dimensions.Y);
}"
51787,"private static AbstractCreature GenerateCreature(int actorType){
switch (actorType) {
case AigilasActorType.PEON:
    return new Peon();
case AigilasActorType.ZORB:
  return new Zorb();
case AigilasActorType.WRATH:
return new Wrath();
case AigilasActorType.HAND:
return new Hand();
case AigilasActorType.PRIDE:
return new Pride();
case AigilasActorType.ENVY:
return new Envy();
case AigilasActorType.GLUTTONY:
return new Gluttony();
case AigilasActorType.LUST:
return new Lust();
case AigilasActorType.SLOTH:
return new Sloth();
case AigilasActorType.GREED:
return new Greed();
case AigilasActorType.SERPENT:
return new Serpent();
case AigilasActorType.BREAKING_WHEEL:
return new BreakingWheel();
default :
try {
throw new Exception(""String_Node_Str"" + actorType);
}
 catch (Exception e) {
e.printStackTrace();
}
}
}","private static AbstractCreature GenerateCreature(int actorType){
switch (actorType) {
case AigilasActorType.PEON:
    return new Peon();
case AigilasActorType.ZORB:
  return new Zorb();
case AigilasActorType.WRATH:
return new Wrath();
case AigilasActorType.HAND:
return new Hand();
case AigilasActorType.PRIDE:
return new Pride();
case AigilasActorType.ENVY:
return new Envy();
case AigilasActorType.GLUTTONY:
return new Gluttony();
case AigilasActorType.LUST:
return new Lust();
case AigilasActorType.SLOTH:
return new Sloth();
case AigilasActorType.GREED:
return new Greed();
case AigilasActorType.SERPENT:
return new Serpent();
case AigilasActorType.BREAKING_WHEEL:
return new BreakingWheel();
default :
try {
throw new Exception(""String_Node_Str"" + actorType);
}
 catch (Exception e) {
e.printStackTrace();
}
return null;
}
}"
51788,"public void React(String skillId){
}","public void React(String skillId){
  if (_actorType == AigilasActorType.PLAYER && skillId != SkillId.FORGET_SKILL && _god.NameText == GodId.Names[GodId.GLUTTONY]) {
    if (_skills.Count() < _currentLevel) {
      _skills.Add(skillId);
    }
  }
}"
51789,"public ComboMarker(ICreature source,int elementId,int index){
}","public ComboMarker(ICreature source,int elementId,int index){
  Initialize(source.GetLocation(),SpriteType.COMBO_MARKER,com.aigilas.EntityType.COMBO_MARKER,com.aigilas.Depth.ComboMarker);
  _graphic.SetColor(Elements.Colors[elementId]);
  _graphic.SetAlpha(0);
  ParticleEngine.Emit(com.spx.particles.behaviors.RotateBehavior.GetInstance(),this,_graphic.GetColor());
  _parent=source;
  _index=index;
}"
51790,"/** 
 * <p>setStatus</p>
 * @param status a int.
 * @param description a {@link java.lang.String} object.
 */
public void setStatus(int status,String description){
switch (status) {
case ERROR:
    m_errorIcon.setTitle(description);
  m_panel.setWidget(m_errorIcon);
break;
case LOADING:
m_progressIcon.setTitle(description);
m_panel.setWidget(m_progressIcon);
break;
case COMPLETE:
if (m_panel.getContentWidget() != null) {
m_panel.remove(m_panel.getContentWidget());
}
break;
}
}","/** 
 * <p>setStatus</p>
 * @param status a int.
 * @param description a {@link java.lang.String} object.
 */
public void setStatus(int status,String description){
switch (status) {
case ERROR:
    m_errorIcon.setTitle(description);
  m_panel.setWidget(m_errorIcon);
break;
case LOADING:
m_progressIcon.setTitle(description);
m_panel.setWidget(m_progressIcon);
break;
case COMPLETE:
if (m_panel.getWidget() != null) {
m_panel.remove(m_panel.getWidget());
}
break;
}
}"
51791,"private Map<Long,Double> getPowerData(CostFunctionCapability powerCost,boolean isInstantaneous){
  currentMap.clear();
  capacityMap.clear();
  initCurrentAndCapacity(powerCost);
  if (isInstantaneous) {
    for (    Long t : currentMap.keySet()) {
      System.out.println(t + ""String_Node_Str"" + currentMap.get(t));
    }
    System.out.println();
  }
  return isInstantaneous ? currentMap : capacityMap;
}","private Map<Long,Double> getPowerData(CostFunctionCapability powerCost,boolean isInstantaneous){
  currentMap.clear();
  capacityMap.clear();
  initCurrentAndCapacity(powerCost);
  return isInstantaneous ? currentMap : capacityMap;
}"
51792,"private Map<Long,Double> getCommData(CostFunctionCapability commCost,boolean isInstantaneous){
  Collection<Long> changeTimes=getChangeTimes(CostType.COMM);
  Map<Long,Double> data=new TreeMap<Long,Double>();
  if (isInstantaneous) {
    for (    Long t : changeTimes) {
      data.put(t,commCost.getValue(t));
    }
  }
 else {
    Long[] timeType=new Long[]{};
    Long[] time=changeTimes.toArray(timeType);
    int size=changeTimes.size();
    double currentValue=0;
    for (int i=0; i < size; i++) {
      long t=time[i];
      data.put(t,currentValue);
      double commValue=commCost.getValue(t);
      double increase=((i < size - 1) ? commValue * (time[i + 1] - t) / SECOND_TO_MILLIS : 0.0);
      currentValue+=increase;
    }
  }
  return data;
}","private Map<Long,Double> getCommData(CostFunctionCapability commCost,boolean isInstantaneous){
  Collection<Long> changeTimes=getChangeTimes(CostType.COMM);
  Map<Long,Double> data=new TreeMap<Long,Double>();
  if (isInstantaneous) {
    for (    Long t : changeTimes) {
      data.put(t,commCost.getValue(t));
    }
  }
 else {
    Long[] timeType=new Long[]{};
    Long[] time=changeTimes.toArray(timeType);
    int size=changeTimes.size();
    double currentValue=0;
    for (int i=0; i < size; i++) {
      long t=time[i];
      data.put(t,currentValue);
      double commValue=commCost.getValue(t);
      double increase=((i < size - 1) ? commValue * (time[i + 1] - t) / SECOND_TO_MILLIS : 0.0);
      currentValue+=increase;
    }
    if (getStart() != time[0])     data.put(getStart(),0.0);
    if (getEnd() != time[changeTimes.size() - 1])     data.put(getEnd(),currentValue);
  }
  return data;
}"
51793,"private void initCurrentAndCapacity(CostFunctionCapability powerCost){
  Battery battery=new Battery(getModel());
  double initialStateOfCharge=battery.getInitialStateOfCharge();
  double stateOfCharge=initialStateOfCharge;
  double voltage, current, power;
  Collection<Long> changeTimes=getChangeTimes(CostType.POWER);
  for (  Long t : changeTimes) {
    capacityMap.put(t,stateOfCharge);
    power=powerCost.getValue(t);
    if ((battery.getStateOfCharge() < 100.0) || ((battery.getStateOfCharge() == initialStateOfCharge) && (power > 0.0))) {
      voltage=battery.getVoltage();
      current=power / voltage;
      stateOfCharge=battery.setStateOfCharge(power,(double)TIME_INTERVAL);
    }
 else {
      stateOfCharge=initialStateOfCharge;
      current=0.0;
    }
    currentMap.put(t,current);
  }
}","private void initCurrentAndCapacity(CostFunctionCapability powerCost){
  Battery battery=new Battery(getModel());
  double initialStateOfCharge=battery.getInitialStateOfCharge();
  double stateOfCharge=initialStateOfCharge;
  double voltage, current=0.0, power;
  Collection<Long> changeTimes=getChangeTimes(CostType.POWER);
  Long previousTime=-1l;
  capacityMap.put(getStart(),initialStateOfCharge);
  currentMap.put(getStart(),0.0);
  for (  Long t : changeTimes) {
    power=powerCost.getValue(t);
    if ((battery.getStateOfCharge() < 100.0) || ((battery.getStateOfCharge() >= 100.0) && (power > 0.0))) {
      if (!capacityMap.containsKey(previousTime)) {
        capacityMap.put(t,stateOfCharge);
      }
 else {
        if (stateOfCharge != capacityMap.get(previousTime)) {
          capacityMap.put(t,stateOfCharge);
        }
      }
      voltage=battery.getVoltage();
      current=BatteryVoltageTable.getNearestState(power / voltage);
      if (!currentMap.containsKey(previousTime)) {
        currentMap.put(t,current);
      }
 else {
        if (current != currentMap.get(previousTime)) {
          currentMap.put(t,current);
        }
      }
      stateOfCharge=battery.setStateOfCharge(power,(double)TIME_INTERVAL);
    }
 else {
      currentMap.put(t,0.0);
    }
    previousTime=t;
  }
  capacityMap.put(getEnd(),stateOfCharge);
  currentMap.put(getEnd(),0.0);
}"
51794,"public double setStateOfCharge(double power,double duration){
  duration=getMinuteToHour(duration);
  if (power != 0) {
    double change=power * duration / capacity;
    stateOfCharge-=change * 100.0;
  }
  return stateOfCharge;
}","public double setStateOfCharge(double power,double duration){
  duration=getMinuteToHour(duration);
  if (power != 0) {
    double change=power * duration / capacity;
    stateOfCharge-=change * 100.0;
  }
  stateOfCharge=(stateOfCharge > 100.0) ? 100.0 : stateOfCharge;
  return round(stateOfCharge);
}"
51795,"private double getNearestState(double realState){
  double upper=Math.ceil(realState / INTERVAL) * INTERVAL;
  double lower=Math.floor(realState / INTERVAL) * INTERVAL;
  double state=((upper - realState) - (realState - lower) >= 0) ? lower : upper;
  return state;
}","public static double getNearestState(double realState){
  double upper=Math.ceil(realState / INTERVAL) * INTERVAL;
  double lower=Math.floor(realState / INTERVAL) * INTERVAL;
  double state=((upper - realState) - (realState - lower) >= 0) ? lower : upper;
  return state;
}"
51796,"protected void updateGraph(){
  Collection<Long> timeCollection=new TreeSet<Long>();
  Collection<Double> dataCollection=new ArrayList<Double>();
  Map<Long,Double> values=graphData.getData(type,isInstantaneous);
  if (values != null) {
    if (!values.containsKey(getStart()))     values.put(getStart(),0.0);
    if (!values.containsKey(getEnd()))     values.put(getEnd(),0.0);
    dataCollection=values.values();
    timeCollection=values.keySet();
  }
  int size=timeCollection.size();
  if (size > 1) {
    Double[] dataType=new Double[]{};
    dataPoints=dataCollection.toArray(dataType);
    Long[] timeType=new Long[]{};
    time=timeCollection.toArray(timeType);
    setMinAndMax(dataPoints);
    int[] x=new int[size];
    int[] y=new int[size];
    for (int j=0; j < size; j++) {
      x[j]=toX(time[j]);
      y[j]=toY(dataPoints[j],minData,maxData);
    }
    this.x=x;
    this.y=y;
  }
}","protected void updateGraph(){
  Collection<Long> timeCollection=new TreeSet<Long>();
  Collection<Double> dataCollection=new ArrayList<Double>();
  Map<Long,Double> values=graphData.getData(type,isInstantaneous);
  if (values != null) {
    dataCollection=values.values();
    timeCollection=values.keySet();
  }
  int size=timeCollection.size();
  if (size > 1) {
    Double[] dataType=new Double[]{};
    dataPoints=dataCollection.toArray(dataType);
    Long[] timeType=new Long[]{};
    time=timeCollection.toArray(timeType);
    setMinAndMax(dataPoints);
    int[] x=new int[size];
    int[] y=new int[size];
    for (int j=0; j < size; j++) {
      x[j]=toX(time[j]);
      y[j]=toY(dataPoints[j],minData,maxData);
    }
    this.x=x;
    this.y=y;
  }
}"
51797,"public RepositoryMoveDialog(final SwingWorker worker){
  super(null,Dialog.ModalityType.APPLICATION_MODAL);
  final JPanel panel=new JPanel();
  final JLabel label=new JLabel(""String_Node_Str"");
  final JProgressBar progress=new JProgressBar(0,100);
  final JButton button=new JButton(""String_Node_Str"");
  button.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RepositoryMoveDialog.this.dispose();
    }
  }
);
  worker.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent event){
      progress.setValue(worker.getProgress());
    }
  }
);
  panel.setLayout(new BoxLayout(panel,BoxLayout.PAGE_AXIS));
  panel.add(label);
  panel.add(progress);
  panel.add(button);
  add(panel);
  pack();
}","public RepositoryMoveDialog(final SwingWorker<?,?> worker){
  super(null,Dialog.ModalityType.APPLICATION_MODAL);
  final JPanel panel=new JPanel();
  final JLabel label=new JLabel(""String_Node_Str"");
  final JProgressBar progress=new JProgressBar(0,100);
  final JButton button=new JButton(""String_Node_Str"");
  button.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      RepositoryMoveDialog.this.dispose();
    }
  }
);
  worker.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent event){
      progress.setValue(worker.getProgress());
    }
  }
);
  panel.setLayout(new BoxLayout(panel,BoxLayout.PAGE_AXIS));
  panel.add(label);
  panel.add(progress);
  panel.add(button);
  add(panel);
  pack();
}"
51798,"@Override protected Void doInBackground() throws Exception {
  Map<AbstractComponent,Set<AbstractComponent>> otherRepositories=new HashMap<AbstractComponent,Set<AbstractComponent>>();
  int i=0, j=0;
  int childCount=addedComponents.size();
  for (  AbstractComponent child : addedComponents) {
    Collection<AbstractComponent> parents=child.getReferencingComponents();
    int parentCount=parents.size();
    for (    AbstractComponent parent : parents) {
      RepositoryCapability parentRepo=parent.getCapability(RepositoryCapability.class);
      if (parentRepo != null && parentRepo.getCapabilityClass().isAssignableFrom(repositoryComponent.getCapabilityClass())) {
        if (!(repositoryComponent.getComponentId().equals(parent.getComponentId()))) {
          if (!otherRepositories.containsKey(parent)) {
            otherRepositories.put(parent,new HashSet<AbstractComponent>());
          }
          otherRepositories.get(parent).add(child);
        }
      }
      setProgress((100 * i + (j * i / parentCount)) / childCount);
    }
    i++;
    setProgress(100 * i / childCount);
  }
  for (  Entry<AbstractComponent,Set<AbstractComponent>> otherRepo : otherRepositories.entrySet()) {
    otherRepo.getKey().removeDelegateComponents(otherRepo.getValue());
  }
  PlatformAccess.getPlatform().getPersistenceProvider().persist(otherRepositories.keySet());
  return null;
}","@Override protected Void doInBackground() throws Exception {
  Map<String,Set<AbstractComponent>> toRemove=new HashMap<String,Set<AbstractComponent>>();
  Map<String,AbstractComponent> parentRepos=new HashMap<String,AbstractComponent>();
  int childIndex=0;
  int childCount=addedComponents.size();
  for (  AbstractComponent child : addedComponents) {
    Collection<AbstractComponent> parents=child.getReferencingComponents();
    int parentIndex=0;
    int parentCount=parents.size();
    for (    AbstractComponent parent : parents) {
      RepositoryCapability parentRepo=parent.getCapability(RepositoryCapability.class);
      if (parentRepo != null && parentRepo.getCapabilityClass().isAssignableFrom(repositoryComponent.getCapabilityClass())) {
        String parentId=parent.getComponentId();
        if (!(repositoryComponent.getComponentId().equals(parentId))) {
          parentRepos.put(parentId,parent);
          if (!toRemove.containsKey(parentId)) {
            toRemove.put(parentId,new HashSet<AbstractComponent>());
          }
          toRemove.get(parentId).add(child);
        }
      }
      parentIndex++;
      setProgress((100 * childIndex + (parentIndex * childIndex / parentCount)) / childCount);
    }
    childIndex++;
    setProgress(100 * childIndex / childCount);
  }
  for (  String id : parentRepos.keySet()) {
    parentRepos.get(id).removeDelegateComponents(toRemove.get(id));
  }
  PlatformAccess.getPlatform().getPersistenceProvider().persist(parentRepos.values());
  return null;
}"
51799,"@Override public JComponent getUI(final JButton jbCreate){
  tleUtil=new TLEUtility();
  chosenSats=new HashSet<String>();
  lmSatChoices=new DefaultListModel();
  lmSatChosen=new DefaultListModel();
  jbAddSat=new JButton(""String_Node_Str"");
  jbAddAllSat=new JButton(""String_Node_Str"");
  jbRemoveSat=new JButton(""String_Node_Str"");
  jbRemoveAllSat=new JButton(""String_Node_Str"");
  lblChooseSat=new JLabel(""String_Node_Str"");
  lblChoiceSat=new JLabel(""String_Node_Str"");
  lblChosenSat=new JLabel(""String_Node_Str"");
  lblCollectionName=new JLabel(""String_Node_Str"");
  jchkbMakeCollection=new JCheckBox(""String_Node_Str"");
  jtfCollectionName=new JTextField(""String_Node_Str"",TEXT_FIELD_COL_SIZE);
  jbAddSat.setEnabled(false);
  jbAddAllSat.setEnabled(false);
  jbRemoveSat.setEnabled(false);
  jbRemoveAllSat.setEnabled(false);
  jbCreate.setEnabled(false);
  jchkbMakeCollection.setSelected(true);
  jchkbMakeCollection.setEnabled(true);
  jtfCollectionName.setEnabled(true);
  lblCollectionName.setEnabled(true);
  jtfCollectionName.setText(DEFAULT_COLLECTION_NAME);
  jtfCollectionName.selectAll();
  JPanel rootPanel=new JPanel();
  rootPanel.setLayout(new FlowLayout());
  JPanel motherPanel=new JPanel();
  motherPanel.setLayout(new BoxLayout(motherPanel,BoxLayout.Y_AXIS));
  JPanel headPanel=new JPanel();
  headPanel.setLayout(new BoxLayout(headPanel,BoxLayout.LINE_AXIS));
  JPanel bodyPanel=new JPanel();
  bodyPanel.setLayout(new BoxLayout(bodyPanel,BoxLayout.LINE_AXIS));
  JPanel footPanel=new JPanel();
  footPanel.setLayout(new BorderLayout());
  JPanel satChoicePanel=new JPanel();
  satChoicePanel.setLayout(new BoxLayout(satChoicePanel,BoxLayout.Y_AXIS));
  JPanel SatChosenPanel=new JPanel();
  SatChosenPanel.setLayout(new BoxLayout(SatChosenPanel,BoxLayout.Y_AXIS));
  JPanel addBtnsPanel=new JPanel();
  addBtnsPanel.setLayout(new GridBagLayout());
  JPanel removeBtnsPanel=new JPanel();
  removeBtnsPanel.setLayout(new GridBagLayout());
  JPanel makeCollectionPanel=new JPanel();
  makeCollectionPanel.setLayout(new BoxLayout(makeCollectionPanel,BoxLayout.Y_AXIS));
  JPanel nameCollectionPanel=new JPanel();
  nameCollectionPanel.setLayout(new BoxLayout(nameCollectionPanel,BoxLayout.X_AXIS));
  GridBagConstraints cAdd=new GridBagConstraints();
  cAdd.fill=GridBagConstraints.BOTH;
  cAdd.weightx=1.0;
  GridBagConstraints cRemove=new GridBagConstraints();
  cRemove.fill=GridBagConstraints.BOTH;
  cRemove.weightx=1.0;
  List<Object> jcbElements=new ArrayList<Object>();
  for (int i=0; i < SatCat.length; i++) {
    jcbElements.add(new ComboItem(SatCat[i][0],false));
    for (int j=1; j < SatCat[i].length; j++) {
      jcbElements.add(new ComboItem(SatCat[i][j],true));
    }
  }
  jcbSatCategories=new JComboBox(jcbElements.toArray());
  jcbSatCategories.setBackground(Color.WHITE);
  jcbSatCategories.setRenderer(new ComboRenderer());
  jcbSatCategories.addActionListener(new ComboListener(jcbSatCategories));
  jcbSatCategories.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent le){
      if (((ComboItem)jcbSatCategories.getSelectedItem()).isEnabled() == true) {
        lmSatChoices.clear();
        String choice=jcbSatCategories.getSelectedItem().toString();
        List<TLE> userSatChoices;
        if (storedSatCats.containsKey(choice)) {
          userSatChoices=storedSatCats.get(choice);
        }
 else {
          userSatChoices=tleUtil.getTLEs(choice);
          storedSatCats.put(choice,userSatChoices);
        }
        for (int i=0; i < userSatChoices.size(); i++)         lmSatChoices.addElement(userSatChoices.get(i));
        jbAddSat.setEnabled(true);
        jbAddAllSat.setEnabled(true);
        jlSatChoices.requestFocusInWindow();
        jlSatChoices.setSelectedIndex(0);
      }
    }
  }
);
  jbAddSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      int selected[]=jlSatChoices.getSelectedIndices();
      int len=selected.length;
      if (len == 0) {
        return;
      }
      jbRemoveSat.setEnabled(true);
      jbRemoveAllSat.setEnabled(true);
      jchkbMakeCollection.setEnabled(true);
      jbCreate.setEnabled(true);
      for (int i=0; i < len; i++) {
        Object chosen=lmSatChoices.get(selected[i]);
        if (!satAlreadyAdded((TLE)chosen)) {
          addToChosen((TLE)chosen);
          lmSatChosen.addElement(chosen);
        }
      }
      for (int i=0; i < len; i++)       lmSatChoices.remove(selected[len - 1 - i]);
      if (lmSatChoices.isEmpty()) {
        jbAddSat.setEnabled(false);
        jbAddAllSat.setEnabled(false);
      }
 else       jlSatChoices.setSelectedIndex(0);
    }
  }
);
  jbAddAllSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int size=lmSatChoices.getSize();
      for (int i=0; i < size; i++) {
        if (!satAlreadyAdded((TLE)lmSatChoices.get(0))) {
          addToChosen((TLE)lmSatChoices.get(0));
          lmSatChosen.addElement(lmSatChoices.get(0));
        }
        lmSatChoices.remove(0);
      }
      jbAddSat.setEnabled(false);
      jbAddAllSat.setEnabled(false);
      jbRemoveSat.setEnabled(true);
      jbRemoveAllSat.setEnabled(true);
      jchkbMakeCollection.setEnabled(true);
      jbCreate.setEnabled(true);
    }
  }
);
  jbRemoveSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int selected[]=jlSatChosen.getSelectedIndices();
      if (selected.length == 0)       return;
      for (int i=0; i < selected.length; i++) {
        removeFromChosen((TLE)lmSatChosen.get(selected[selected.length - 1 - i]));
        lmSatChosen.remove(selected[selected.length - 1 - i]);
      }
      if (lmSatChosen.isEmpty()) {
        jbRemoveSat.setEnabled(false);
        jbRemoveAllSat.setEnabled(false);
        jchkbMakeCollection.setEnabled(false);
        jbCreate.setEnabled(false);
        jcbSatCategories.requestFocus();
      }
 else       jlSatChosen.setSelectedIndex(0);
    }
  }
);
  jbRemoveAllSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      lmSatChosen.clear();
      chosenSats.clear();
      jbRemoveSat.setEnabled(false);
      jbRemoveAllSat.setEnabled(false);
      jchkbMakeCollection.setEnabled(false);
      jbCreate.setEnabled(false);
    }
  }
);
  jchkbMakeCollection.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        lblCollectionName.setEnabled(true);
        jtfCollectionName.setEnabled(true);
        jtfCollectionName.requestFocusInWindow();
        jtfCollectionName.setText(DEFAULT_COLLECTION_NAME);
        jtfCollectionName.selectAll();
      }
 else {
        lblCollectionName.setEnabled(false);
        jtfCollectionName.setText(""String_Node_Str"");
        jtfCollectionName.setEnabled(false);
      }
    }
  }
);
  jtfCollectionName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void removeUpdate(    DocumentEvent e){
      if (jtfCollectionName.getText().isEmpty() && jchkbMakeCollection.isSelected())       jbCreate.setEnabled(false);
 else       jbCreate.setEnabled(true);
    }
    @Override public void insertUpdate(    DocumentEvent e){
      jbCreate.setEnabled(true);
    }
    @Override public void changedUpdate(    DocumentEvent arg0){
      if (jtfCollectionName.getText().isEmpty() && jchkbMakeCollection.isSelected()) {
        jbCreate.setEnabled(false);
      }
 else       jbCreate.setEnabled(true);
    }
  }
);
  jlSatChoices=new JList(lmSatChoices);
  jlSatChoices.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  jlSatChoices.setCellRenderer(new TLEListRenderer());
  jscrlpSatChoices=new JScrollPane(jlSatChoices);
  jlSatChosen=new JList(lmSatChosen);
  jlSatChosen.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  jlSatChosen.setCellRenderer(new TLEListRenderer());
  jscrlpSatChosen=new JScrollPane(jlSatChosen);
  headPanel.add(lblChooseSat);
  headPanel.add(Box.createRigidArea(new Dimension(20,0)));
  headPanel.add(jcbSatCategories);
  headPanel.add(Box.createRigidArea(new Dimension(200,0)));
  satChoicePanel.add(lblChoiceSat);
  lblChoiceSat.setAlignmentX(Component.CENTER_ALIGNMENT);
  satChoicePanel.add(Box.createRigidArea(new Dimension(0,5)));
  satChoicePanel.add(jscrlpSatChoices);
  satChoicePanel.setMinimumSize(new Dimension(250,300));
  satChoicePanel.setPreferredSize(new Dimension(250,300));
  satChoicePanel.setMaximumSize(new Dimension(Short.MAX_VALUE,Short.MAX_VALUE));
  addBtnsPanel.add(jbAddSat,cAdd);
  cAdd.gridx++;
  cAdd.insets=new Insets(5,0,0,0);
  addBtnsPanel.add(jbAddAllSat,cAdd);
  SatChosenPanel.add(lblChosenSat);
  lblChosenSat.setAlignmentX(Component.CENTER_ALIGNMENT);
  SatChosenPanel.add(Box.createRigidArea(new Dimension(0,5)));
  SatChosenPanel.add(jscrlpSatChosen);
  SatChosenPanel.setMinimumSize(new Dimension(250,300));
  SatChosenPanel.setPreferredSize(new Dimension(250,300));
  SatChosenPanel.setMaximumSize(new Dimension(Short.MAX_VALUE,Short.MAX_VALUE));
  removeBtnsPanel.add(jbRemoveSat,cRemove);
  cRemove.gridx++;
  cRemove.insets=new Insets(5,0,0,0);
  removeBtnsPanel.add(jbRemoveAllSat,cRemove);
  bodyPanel.add(satChoicePanel);
  bodyPanel.add(Box.createRigidArea(new Dimension(20,0)));
  bodyPanel.add(addBtnsPanel);
  bodyPanel.add(Box.createRigidArea(new Dimension(20,0)));
  bodyPanel.add(SatChosenPanel);
  bodyPanel.add(Box.createRigidArea(new Dimension(20,0)));
  bodyPanel.add(removeBtnsPanel);
  makeCollectionPanel.add(jchkbMakeCollection);
  jchkbMakeCollection.setAlignmentX(Component.LEFT_ALIGNMENT);
  nameCollectionPanel.add(lblCollectionName);
  nameCollectionPanel.add(jtfCollectionName);
  nameCollectionPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  makeCollectionPanel.add(nameCollectionPanel);
  footPanel.add(makeCollectionPanel,BorderLayout.EAST);
  motherPanel.add(headPanel);
  motherPanel.add(Box.createRigidArea(new Dimension(0,10)));
  motherPanel.add(bodyPanel);
  motherPanel.add(footPanel);
  rootPanel.add(motherPanel,Component.CENTER_ALIGNMENT);
  return rootPanel;
}","@Override public JComponent getUI(final JButton jbCreate){
  tleUtil=new TLEUtility();
  chosenSats=new HashSet<String>();
  lmSatChoices=new DefaultListModel();
  lmSatChosen=new DefaultListModel();
  jbAddSat=new JButton(""String_Node_Str"");
  jbAddAllSat=new JButton(""String_Node_Str"");
  jbRemoveSat=new JButton(""String_Node_Str"");
  jbRemoveAllSat=new JButton(""String_Node_Str"");
  lblChooseSat=new JLabel(""String_Node_Str"");
  lblChoiceSat=new JLabel(""String_Node_Str"");
  lblChosenSat=new JLabel(""String_Node_Str"");
  lblCollectionName=new JLabel(""String_Node_Str"");
  jchkbMakeCollection=new JCheckBox(""String_Node_Str"");
  jtfCollectionName=new JTextField(""String_Node_Str"",TEXT_FIELD_COL_SIZE);
  jbAddSat.setEnabled(false);
  jbAddAllSat.setEnabled(false);
  jbRemoveSat.setEnabled(false);
  jbRemoveAllSat.setEnabled(false);
  jbCreate.setEnabled(false);
  jchkbMakeCollection.setSelected(true);
  jchkbMakeCollection.setEnabled(true);
  jtfCollectionName.setEnabled(true);
  lblCollectionName.setEnabled(true);
  jtfCollectionName.setText(DEFAULT_COLLECTION_NAME);
  jtfCollectionName.selectAll();
  JPanel rootPanel=new JPanel();
  rootPanel.setLayout(new FlowLayout());
  JPanel motherPanel=new JPanel();
  motherPanel.setLayout(new BoxLayout(motherPanel,BoxLayout.Y_AXIS));
  JPanel headPanel=new JPanel();
  headPanel.setLayout(new BoxLayout(headPanel,BoxLayout.LINE_AXIS));
  JPanel bodyPanel=new JPanel();
  bodyPanel.setLayout(new BoxLayout(bodyPanel,BoxLayout.LINE_AXIS));
  JPanel footPanel=new JPanel();
  footPanel.setLayout(new BorderLayout());
  JPanel satChoicePanel=new JPanel();
  satChoicePanel.setLayout(new BoxLayout(satChoicePanel,BoxLayout.Y_AXIS));
  JPanel SatChosenPanel=new JPanel();
  SatChosenPanel.setLayout(new BoxLayout(SatChosenPanel,BoxLayout.Y_AXIS));
  JPanel addBtnsPanel=new JPanel();
  addBtnsPanel.setLayout(new GridBagLayout());
  JPanel removeBtnsPanel=new JPanel();
  removeBtnsPanel.setLayout(new GridBagLayout());
  JPanel makeCollectionPanel=new JPanel();
  makeCollectionPanel.setLayout(new BoxLayout(makeCollectionPanel,BoxLayout.Y_AXIS));
  JPanel nameCollectionPanel=new JPanel();
  nameCollectionPanel.setLayout(new BoxLayout(nameCollectionPanel,BoxLayout.X_AXIS));
  GridBagConstraints cAdd=new GridBagConstraints();
  cAdd.fill=GridBagConstraints.BOTH;
  cAdd.weightx=1.0;
  GridBagConstraints cRemove=new GridBagConstraints();
  cRemove.fill=GridBagConstraints.BOTH;
  cRemove.weightx=1.0;
  List<Object> jcbElements=new ArrayList<Object>();
  for (int i=0; i < SatCat.length; i++) {
    jcbElements.add(new ComboItem(SatCat[i][0],false));
    for (int j=1; j < SatCat[i].length; j++) {
      jcbElements.add(new ComboItem(SatCat[i][j],true));
    }
  }
  jcbSatCategories=new JComboBox(jcbElements.toArray());
  jcbSatCategories.setBackground(Color.WHITE);
  jcbSatCategories.setRenderer(new ComboRenderer());
  jcbSatCategories.addActionListener(new ComboListener(jcbSatCategories));
  jcbSatCategories.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent le){
      if (((ComboItem)jcbSatCategories.getSelectedItem()).isEnabled() == true) {
        lmSatChoices.clear();
        final String choice=jcbSatCategories.getSelectedItem().toString();
        if (storedSatCats.containsKey(choice)) {
          populate(storedSatCats.get(choice));
        }
 else {
          new SwingWorker<List<TLE>,Object>(){
            @Override protected List<TLE> doInBackground() throws Exception {
              return tleUtil.getTLEs(choice);
            }
            @Override protected void done(){
              try {
                storedSatCats.put(choice,get());
                populate(storedSatCats.get(choice));
              }
 catch (              InterruptedException e) {
                populate(Collections.<TLE>emptyList());
              }
catch (              ExecutionException e) {
                populate(Collections.<TLE>emptyList());
              }
            }
          }
.execute();
        }
      }
    }
    private void populate(    List<TLE> userSatChoices){
      for (int i=0; i < userSatChoices.size(); i++)       lmSatChoices.addElement(userSatChoices.get(i));
      jbAddSat.setEnabled(true);
      jbAddAllSat.setEnabled(true);
      jlSatChoices.requestFocusInWindow();
      jlSatChoices.setSelectedIndex(0);
    }
  }
);
  jbAddSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent ae){
      int selected[]=jlSatChoices.getSelectedIndices();
      int len=selected.length;
      if (len == 0) {
        return;
      }
      jbRemoveSat.setEnabled(true);
      jbRemoveAllSat.setEnabled(true);
      jchkbMakeCollection.setEnabled(true);
      jbCreate.setEnabled(true);
      for (int i=0; i < len; i++) {
        Object chosen=lmSatChoices.get(selected[i]);
        if (!satAlreadyAdded((TLE)chosen)) {
          addToChosen((TLE)chosen);
          lmSatChosen.addElement(chosen);
        }
      }
      for (int i=0; i < len; i++)       lmSatChoices.remove(selected[len - 1 - i]);
      if (lmSatChoices.isEmpty()) {
        jbAddSat.setEnabled(false);
        jbAddAllSat.setEnabled(false);
      }
 else       jlSatChoices.setSelectedIndex(0);
    }
  }
);
  jbAddAllSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int size=lmSatChoices.getSize();
      for (int i=0; i < size; i++) {
        if (!satAlreadyAdded((TLE)lmSatChoices.get(0))) {
          addToChosen((TLE)lmSatChoices.get(0));
          lmSatChosen.addElement(lmSatChoices.get(0));
        }
        lmSatChoices.remove(0);
      }
      jbAddSat.setEnabled(false);
      jbAddAllSat.setEnabled(false);
      jbRemoveSat.setEnabled(true);
      jbRemoveAllSat.setEnabled(true);
      jchkbMakeCollection.setEnabled(true);
      jbCreate.setEnabled(true);
    }
  }
);
  jbRemoveSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int selected[]=jlSatChosen.getSelectedIndices();
      if (selected.length == 0)       return;
      for (int i=0; i < selected.length; i++) {
        removeFromChosen((TLE)lmSatChosen.get(selected[selected.length - 1 - i]));
        lmSatChosen.remove(selected[selected.length - 1 - i]);
      }
      if (lmSatChosen.isEmpty()) {
        jbRemoveSat.setEnabled(false);
        jbRemoveAllSat.setEnabled(false);
        jchkbMakeCollection.setEnabled(false);
        jbCreate.setEnabled(false);
        jcbSatCategories.requestFocus();
      }
 else       jlSatChosen.setSelectedIndex(0);
    }
  }
);
  jbRemoveAllSat.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      lmSatChosen.clear();
      chosenSats.clear();
      jbRemoveSat.setEnabled(false);
      jbRemoveAllSat.setEnabled(false);
      jchkbMakeCollection.setEnabled(false);
      jbCreate.setEnabled(false);
    }
  }
);
  jchkbMakeCollection.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        lblCollectionName.setEnabled(true);
        jtfCollectionName.setEnabled(true);
        jtfCollectionName.requestFocusInWindow();
        jtfCollectionName.setText(DEFAULT_COLLECTION_NAME);
        jtfCollectionName.selectAll();
      }
 else {
        lblCollectionName.setEnabled(false);
        jtfCollectionName.setText(""String_Node_Str"");
        jtfCollectionName.setEnabled(false);
      }
    }
  }
);
  jtfCollectionName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void removeUpdate(    DocumentEvent e){
      if (jtfCollectionName.getText().isEmpty() && jchkbMakeCollection.isSelected())       jbCreate.setEnabled(false);
 else       jbCreate.setEnabled(true);
    }
    @Override public void insertUpdate(    DocumentEvent e){
      jbCreate.setEnabled(true);
    }
    @Override public void changedUpdate(    DocumentEvent arg0){
      if (jtfCollectionName.getText().isEmpty() && jchkbMakeCollection.isSelected()) {
        jbCreate.setEnabled(false);
      }
 else       jbCreate.setEnabled(true);
    }
  }
);
  jlSatChoices=new JList(lmSatChoices);
  jlSatChoices.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  jlSatChoices.setCellRenderer(new TLEListRenderer());
  jscrlpSatChoices=new JScrollPane(jlSatChoices);
  jlSatChosen=new JList(lmSatChosen);
  jlSatChosen.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  jlSatChosen.setCellRenderer(new TLEListRenderer());
  jscrlpSatChosen=new JScrollPane(jlSatChosen);
  headPanel.add(lblChooseSat);
  headPanel.add(Box.createRigidArea(new Dimension(20,0)));
  headPanel.add(jcbSatCategories);
  headPanel.add(Box.createRigidArea(new Dimension(200,0)));
  satChoicePanel.add(lblChoiceSat);
  lblChoiceSat.setAlignmentX(Component.CENTER_ALIGNMENT);
  satChoicePanel.add(Box.createRigidArea(new Dimension(0,5)));
  satChoicePanel.add(jscrlpSatChoices);
  satChoicePanel.setMinimumSize(new Dimension(250,300));
  satChoicePanel.setPreferredSize(new Dimension(250,300));
  satChoicePanel.setMaximumSize(new Dimension(Short.MAX_VALUE,Short.MAX_VALUE));
  addBtnsPanel.add(jbAddSat,cAdd);
  cAdd.gridx++;
  cAdd.insets=new Insets(5,0,0,0);
  addBtnsPanel.add(jbAddAllSat,cAdd);
  SatChosenPanel.add(lblChosenSat);
  lblChosenSat.setAlignmentX(Component.CENTER_ALIGNMENT);
  SatChosenPanel.add(Box.createRigidArea(new Dimension(0,5)));
  SatChosenPanel.add(jscrlpSatChosen);
  SatChosenPanel.setMinimumSize(new Dimension(250,300));
  SatChosenPanel.setPreferredSize(new Dimension(250,300));
  SatChosenPanel.setMaximumSize(new Dimension(Short.MAX_VALUE,Short.MAX_VALUE));
  removeBtnsPanel.add(jbRemoveSat,cRemove);
  cRemove.gridx++;
  cRemove.insets=new Insets(5,0,0,0);
  removeBtnsPanel.add(jbRemoveAllSat,cRemove);
  bodyPanel.add(satChoicePanel);
  bodyPanel.add(Box.createRigidArea(new Dimension(20,0)));
  bodyPanel.add(addBtnsPanel);
  bodyPanel.add(Box.createRigidArea(new Dimension(20,0)));
  bodyPanel.add(SatChosenPanel);
  bodyPanel.add(Box.createRigidArea(new Dimension(20,0)));
  bodyPanel.add(removeBtnsPanel);
  makeCollectionPanel.add(jchkbMakeCollection);
  jchkbMakeCollection.setAlignmentX(Component.LEFT_ALIGNMENT);
  nameCollectionPanel.add(lblCollectionName);
  nameCollectionPanel.add(jtfCollectionName);
  nameCollectionPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  makeCollectionPanel.add(nameCollectionPanel);
  footPanel.add(makeCollectionPanel,BorderLayout.EAST);
  motherPanel.add(headPanel);
  motherPanel.add(Box.createRigidArea(new Dimension(0,10)));
  motherPanel.add(bodyPanel);
  motherPanel.add(footPanel);
  rootPanel.add(motherPanel,Component.CENTER_ALIGNMENT);
  return rootPanel;
}"
51800,"@Override protected <T>List<T> handleGetCapabilities(Class<T> capability){
  if (capability.isAssignableFrom(TagCapability.class)) {
    List<T> tagCapabilities=null;
    for (    AbstractComponent child : getComponents()) {
      if (!(child instanceof ActivityComponent)) {
        List<T> childTags=child.getCapabilities(capability);
        if (childTags != null && !childTags.isEmpty()) {
          if (tagCapabilities == null) {
            tagCapabilities=new ArrayList<T>();
            tagCapabilities.addAll(childTags);
          }
        }
      }
    }
    if (tagCapabilities != null) {
      return tagCapabilities;
    }
  }
  return super.handleGetCapabilities(capability);
}","@Override protected <T>List<T> handleGetCapabilities(Class<T> capability){
  if (capability.isAssignableFrom(TagCapability.class)) {
    List<T> tagCapabilities=null;
    for (    AbstractComponent child : getComponents()) {
      if (!(child instanceof ActivityComponent)) {
        List<T> childTags=child.getCapabilities(capability);
        if (childTags != null && !childTags.isEmpty()) {
          if (tagCapabilities == null) {
            tagCapabilities=new ArrayList<T>();
          }
          tagCapabilities.addAll(childTags);
        }
      }
    }
    if (tagCapabilities != null) {
      return tagCapabilities;
    }
  }
  return super.handleGetCapabilities(capability);
}"
51801,"@Override public void viewPersisted(){
  if (!getInfo().getViewType().equals(ViewType.EMBEDDED)) {
    setManifestedComponent(PlatformAccess.getPlatform().getPersistenceProvider().getComponent(getManifestedComponent().getComponentId()));
    getManifestedComponent().addViewManifestation(this);
  }
  Collection<View> selected=getSelectionProvider().getSelectedManifestations();
  String selectedId=null;
  if (!selected.isEmpty()) {
    selectedId=selected.iterator().next().getManifestedComponent().getComponentId();
    select(null);
  }
  for (  AbstractComponent child : getManifestedComponent().getComponents()) {
    searchAndReplace(upperPanel,child);
  }
  if (costGraph != null) {
    costGraph.setManifestedComponent(getManifestedComponent());
    costGraph.viewPersisted();
  }
  if (selectedId != null) {
    selectComponent(selectedId);
  }
}","@Override public void viewPersisted(){
  if (!getInfo().getViewType().equals(ViewType.EMBEDDED)) {
    setManifestedComponent(PlatformAccess.getPlatform().getPersistenceProvider().getComponent(getManifestedComponent().getComponentId()));
    getManifestedComponent().addViewManifestation(this);
  }
  Collection<View> selected=getSelectionProvider().getSelectedManifestations();
  String selectedId=null;
  if (!selected.isEmpty()) {
    selectedId=selected.iterator().next().getManifestedComponent().getComponentId();
    select(null);
  }
  for (  AbstractComponent child : getManifestedComponent().getComponents()) {
    child.getCapability(ComponentInitializer.class).setWorkUnitDelegate(getManifestedComponent());
    searchAndReplace(upperPanel,child);
  }
  if (costGraph != null) {
    costGraph.setManifestedComponent(getManifestedComponent());
    costGraph.viewPersisted();
  }
  if (selectedId != null) {
    selectComponent(selectedId);
  }
}"
51802,"private void buildUpperPanel(){
  AbstractComponent ac=getManifestedComponent();
  if (!getInfo().getViewType().equals(ViewType.EMBEDDED)) {
    ac.addViewManifestation(this);
  }
  for (  AbstractComponent child : ac.getComponents()) {
    if (child instanceof TimelineComponent) {
      upperPanel.add(createTimeline((TimelineComponent)child));
    }
  }
  List<CostFunctionCapability> costs=ac.getCapabilities(CostFunctionCapability.class);
  if (costs != null && !costs.isEmpty()) {
    upperPanel.add(new CollapsibleContainer(costGraph=GraphView.VIEW_INFO.createView(getManifestedComponent())));
  }
}","private void buildUpperPanel(){
  AbstractComponent ac=getManifestedComponent();
  if (!getInfo().getViewType().equals(ViewType.EMBEDDED)) {
    ac.addViewManifestation(this);
  }
  for (  AbstractComponent child : ac.getComponents()) {
    if (child instanceof TimelineComponent) {
      child.getCapability(ComponentInitializer.class).setWorkUnitDelegate(getManifestedComponent());
      upperPanel.add(createTimeline((TimelineComponent)child));
    }
  }
  List<CostFunctionCapability> costs=ac.getCapabilities(CostFunctionCapability.class);
  if (costs != null && !costs.isEmpty()) {
    upperPanel.add(new CollapsibleContainer(costGraph=GraphView.VIEW_INFO.createView(getManifestedComponent())));
  }
}"
51803,"@Override public void propertyChange(java.beans.PropertyChangeEvent evt){
  Object src=evt.getSource();
  if ((Boolean)evt.getNewValue() && src instanceof View && ((View)src).getManifestedComponent().isStale()) {
    if (!used && getManifestedComponent().getComponentId() != null) {
      AbstractComponent committedComponent=PlatformAccess.getPlatform().getPersistenceProvider().getComponent(getManifestedComponent().getComponentId());
      ObjectManager objectManager=getManifestedComponent().getCapability(ObjectManager.class);
      boolean updated=objectManager != null && new TimelineMergeHandler(objectManager).update(committedComponent);
      setManifestedComponent(committedComponent);
      rebuildUpperPanel();
      updateMasterDuration();
      used=true;
      if (updated) {
        save();
      }
    }
  }
}","@Override public void propertyChange(java.beans.PropertyChangeEvent evt){
  Object src=evt.getSource();
  if ((Boolean)evt.getNewValue() && src instanceof View && ((View)src).getManifestedComponent().isStale()) {
    if (!used && getManifestedComponent().getComponentId() != null) {
      AbstractComponent committedComponent=PlatformAccess.getPlatform().getPersistenceProvider().getComponent(getManifestedComponent().getComponentId());
      AbstractComponent workUnitDelegate=getManifestedComponent().getWorkUnitDelegate();
      ObjectManager objectManager=(workUnitDelegate == null ? getManifestedComponent() : workUnitDelegate).getCapability(ObjectManager.class);
      if (workUnitDelegate != null) {
        committedComponent.getCapability(ComponentInitializer.class).setWorkUnitDelegate(workUnitDelegate);
      }
      boolean updated=objectManager != null && new TimelineMergeHandler(objectManager).update(committedComponent);
      setManifestedComponent(committedComponent);
      rebuildUpperPanel();
      updateMasterDuration();
      used=true;
      if (updated) {
        save();
      }
    }
  }
}"
51804,"private boolean canContain(AbstractComponent parent,AbstractComponent child){
  if (parent instanceof ScenarioComponent) {
    return child instanceof TimelineComponent || child instanceof ActivityComponent;
  }
  if (parent instanceof TimelineComponent) {
    return !(child instanceof DecisionComponent || child instanceof ScenarioComponent) && (child.getCapability(DurationCapability.class) != null || child.getCapability(FeedProvider.class) != null || child.getComponentTypeID().contains(""String_Node_Str""));
  }
  if (parent instanceof ActivityComponent) {
    return child instanceof ActivityComponent || child instanceof DecisionComponent;
  }
  if (child instanceof DecisionComponent) {
    return parent instanceof ActivityComponent;
  }
  return true;
}","private boolean canContain(AbstractComponent parent,AbstractComponent child){
  if (parent instanceof ScenarioComponent) {
    return child instanceof TimelineComponent || child instanceof ActivityComponent;
  }
  if (parent instanceof TimelineComponent) {
    return !(child instanceof DecisionComponent || child instanceof TimelineComponent || child instanceof ScenarioComponent) && (child.getCapability(DurationCapability.class) != null || child.getCapability(FeedProvider.class) != null || child.getComponentTypeID().contains(""String_Node_Str""));
  }
  if (parent instanceof ActivityComponent) {
    return child instanceof ActivityComponent || child instanceof DecisionComponent;
  }
  if (child instanceof DecisionComponent) {
    return parent instanceof ActivityComponent;
  }
  return true;
}"
51805,"public ScenarioView(AbstractComponent ac,ViewInfo vi){
  super(ac,vi);
  setOpaque(false);
  JPanel upperPanel=new JPanel();
  upperPanel.setLayout(new BoxLayout(upperPanel,BoxLayout.Y_AXIS));
  upperPanel.setOpaque(false);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(upperPanel,BorderLayout.NORTH);
  for (  AbstractComponent child : ac.getComponents()) {
    if (child instanceof TimelineComponent) {
      View view=TimelineView.VIEW_INFO.createView(child);
      upperPanel.add(new CollapsibleContainer(view));
    }
  }
}","public ScenarioView(AbstractComponent ac,ViewInfo vi){
  super(ac,vi);
  setOpaque(false);
  JPanel upperPanel=new JPanel();
  upperPanel.setLayout(new BoxLayout(upperPanel,BoxLayout.Y_AXIS));
  upperPanel.setOpaque(false);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(upperPanel,BorderLayout.NORTH);
  for (  AbstractComponent child : ac.getComponents()) {
    if (child instanceof TimelineComponent) {
      View view=TimelineView.VIEW_INFO.createView(child);
      upperPanel.add(new CollapsibleContainer(view));
    }
  }
  upperPanel.add(GraphView.VIEW_INFO.createView(getManifestedComponent()));
}"
51806,"public void paintComponent(Graphics g){
  if (isActive) {
    g.setColor(OVERLAY_COLOR);
    g.fillRect(x + getLeftPadding(),0,1,getHeight());
    long time=(long)(x / getPixelScale()) + getTimeOffset();
    FontMetrics metrics=g.getFontMetrics(g.getFont());
    for (    Component c : costComponents) {
      if (c instanceof CostOverlay) {
        int compX=getXRelativeToContentPane(c);
        if (compX <= x + getLeftPadding() && compX + c.getWidth() >= x + getLeftPadding()) {
          List<CostFunctionCapability> costs=((CostOverlay)c).getCostFunctions();
          String costString=""String_Node_Str"";
          for (          CostFunctionCapability cost : costs) {
            costString+=cost.getValue(time) + ""String_Node_Str"" + cost.getUnits()+ ""String_Node_Str"";
          }
          if (!costString.isEmpty()) {
            int leftX=x + getLeftPadding();
            int centerY=getYRelativeToContentPane(c) + c.getHeight() / 2;
            int width=metrics.stringWidth(costString);
            int height=metrics.getHeight() * 3 / 2;
            g.setColor(OVERLAY_COLOR);
            g.fillRect(leftX,centerY - height / 2,width + 4,height);
            g.setColor(OVERLAY_TEXT_COLOR);
            g.drawString(costString,leftX + 2,centerY + metrics.getAscent() / 2 - 1);
          }
        }
      }
    }
  }
}","public void paintComponent(Graphics g){
  if (isActive) {
    g.setColor(OVERLAY_COLOR);
    g.fillRect(x + getLeftPadding(),0,1,getHeight());
    long time=(long)(x / getPixelScale()) + getTimeOffset();
    FontMetrics metrics=g.getFontMetrics(g.getFont());
    for (    Component c : costComponents) {
      if (c instanceof CostOverlay && c.isShowing()) {
        int compX=getXRelativeToContentPane(c);
        if (compX <= x + getLeftPadding() && compX + c.getWidth() >= x + getLeftPadding()) {
          List<CostFunctionCapability> costs=((CostOverlay)c).getCostFunctions();
          String costString=""String_Node_Str"";
          for (          CostFunctionCapability cost : costs) {
            costString+=cost.getValue(time) + ""String_Node_Str"" + cost.getUnits()+ ""String_Node_Str"";
          }
          if (!costString.isEmpty()) {
            int leftX=x + getLeftPadding();
            int centerY=getYRelativeToContentPane(c) + c.getHeight() / 2;
            int width=metrics.stringWidth(costString);
            int height=metrics.getHeight() * 3 / 2;
            g.setColor(OVERLAY_COLOR);
            g.fillRect(leftX,centerY - height / 2,width + 4,height);
            g.setColor(OVERLAY_TEXT_COLOR);
            g.drawString(costString,leftX + 2,centerY + metrics.getAscent() / 2 - 1);
          }
        }
      }
    }
  }
}"
51807,"public TimelineView(AbstractComponent ac,ViewInfo vi){
  super(ac=PlatformAccess.getPlatform().getPersistenceProvider().getComponent(ac.getComponentId()),vi);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(upperPanel,BorderLayout.NORTH);
  upperPanel.setLayout(new BoxLayout(upperPanel,BoxLayout.Y_AXIS));
  upperPanel.setOpaque(false);
  upperPanel.add(Box.createVerticalStrut(TIMELINE_ROW_SPACING));
  getContentPane().setBackground(backgroundColor);
  for (  AbstractComponent child : ac.getComponents()) {
    addTopLevelActivity(child);
  }
  upperPanel.add(new CollapsibleContainer(GraphView.VIEW_INFO.createView(ac)));
}","public TimelineView(AbstractComponent ac,ViewInfo vi){
  super(vi.getViewType().equals(ViewType.EMBEDDED) ? ac : (ac=PlatformAccess.getPlatform().getPersistenceProvider().getComponent(ac.getComponentId())),vi);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(upperPanel,BorderLayout.NORTH);
  upperPanel.setLayout(new BoxLayout(upperPanel,BoxLayout.Y_AXIS));
  upperPanel.setOpaque(false);
  upperPanel.add(Box.createVerticalStrut(TIMELINE_ROW_SPACING));
  getContentPane().setBackground(backgroundColor);
  for (  AbstractComponent child : ac.getComponents()) {
    addTopLevelActivity(child);
  }
  upperPanel.add(new CollapsibleContainer(GraphView.VIEW_INFO.createView(ac)));
}"
51808,"private void constrainActivities(DurationCapability source,boolean isStart){
  int sign=isStart ? 1 : -1;
  long movingEdge=isStart ? source.getStart() : source.getEnd();
  long mostOverlapping=movingEdge;
  DurationCapability durationCapabilityToShift=null;
  for (  AbstractComponent child : getComponents()) {
    DurationCapability dc=child.getCapability(DurationCapability.class);
    if (dc != source && overlaps(dc,source)) {
      long movedEdge=isStart ? dc.getEnd() : dc.getStart();
      if (movedEdge * sign > mostOverlapping * sign) {
        mostOverlapping=movedEdge;
        durationCapabilityToShift=dc;
      }
    }
  }
  if (durationCapabilityToShift != null) {
    long delta=movingEdge - mostOverlapping;
    durationCapabilityToShift.setStart(durationCapabilityToShift.getStart() + delta);
    durationCapabilityToShift.setEnd(durationCapabilityToShift.getEnd() + delta);
    constrainActivities(durationCapabilityToShift,isStart);
  }
}","private void constrainActivities(DurationCapability source,boolean isStart){
  int sign=isStart ? 1 : -1;
  long movingEdge=isStart ? source.getStart() : source.getEnd();
  long mostOverlapping=movingEdge;
  DurationCapability durationCapabilityToShift=null;
  for (  AbstractComponent child : getComponents()) {
    DurationCapability dc=child.getCapability(DurationCapability.class);
    if (dc != source && overlaps(dc,source)) {
      long movedEdge=isStart ? dc.getEnd() : dc.getStart();
      if (movedEdge * sign > mostOverlapping * sign) {
        mostOverlapping=movedEdge;
        durationCapabilityToShift=dc;
      }
    }
  }
  if (durationCapabilityToShift != null) {
    long delta=movingEdge - mostOverlapping;
    durationCapabilityToShift.setStart(durationCapabilityToShift.getStart() + delta);
    durationCapabilityToShift.setEnd(durationCapabilityToShift.getEnd() + delta);
    constrainActivities(durationCapabilityToShift,delta < 0);
  }
}"
51809,"private void constrainDecisions(boolean movingTowardStart){
  boolean moved=false;
  do {
    moved=false;
    for (    AbstractComponent child : getComponents()) {
      if (child instanceof DecisionComponent) {
        long start=((DecisionComponent)child).getStart();
        long end=((DecisionComponent)child).getEnd();
        DurationCapability preceedingCapability=null;
        DurationCapability followingCapability=null;
        long nearestPrecedent=getStart();
        long nearestFollower=getEnd();
        for (        AbstractComponent otherChild : getComponents()) {
          if (child != otherChild) {
            DurationCapability dc=otherChild.getCapability(DurationCapability.class);
            if (dc.getEnd() > nearestPrecedent && dc.getEnd() <= end) {
              preceedingCapability=dc;
              nearestPrecedent=dc.getEnd();
            }
            if (dc.getStart() < nearestFollower && dc.getStart() >= start) {
              followingCapability=dc;
              nearestFollower=dc.getStart();
            }
          }
        }
        if (preceedingCapability != null && nearestPrecedent < start && !overlaps((DurationCapability)child,preceedingCapability)) {
          long delta=(start - nearestPrecedent) * (movingTowardStart ? -1 : 1);
          DurationCapability toMove=(DurationCapability)(movingTowardStart ? child : preceedingCapability);
          toMove.setStart(toMove.getStart() + delta);
          toMove.setEnd(toMove.getEnd() + delta);
          moved=true;
        }
        if (followingCapability != null && nearestFollower > end && !overlaps((DurationCapability)child,followingCapability)) {
          long delta=(end - nearestFollower) * (movingTowardStart ? 1 : -1);
          DurationCapability toMove=(DurationCapability)(!movingTowardStart ? child : followingCapability);
          toMove.setStart(toMove.getStart() + delta);
          toMove.setEnd(toMove.getEnd() + delta);
          moved=true;
        }
      }
    }
  }
 while (moved);
}","private void constrainDecisions(boolean movingTowardStart){
  boolean moved=false;
  do {
    moved=false;
    for (    AbstractComponent child : getComponents()) {
      if (child instanceof DecisionComponent) {
        long start=((DecisionComponent)child).getStart();
        long end=((DecisionComponent)child).getEnd();
        DurationCapability preceedingCapability=null;
        DurationCapability followingCapability=null;
        long nearestPrecedent=getStart();
        long nearestFollower=getEnd();
        for (        AbstractComponent otherChild : getComponents()) {
          if (child != otherChild) {
            DurationCapability dc=otherChild.getCapability(DurationCapability.class);
            if (dc.getEnd() > nearestPrecedent && dc.getEnd() <= start) {
              preceedingCapability=dc;
              nearestPrecedent=dc.getEnd();
            }
            if (dc.getStart() < nearestFollower && dc.getStart() >= end) {
              followingCapability=dc;
              nearestFollower=dc.getStart();
            }
          }
        }
        if (preceedingCapability != null && nearestPrecedent < start && !overlaps((DurationCapability)child,preceedingCapability)) {
          long delta=(start - nearestPrecedent) * (movingTowardStart ? -1 : 1);
          DurationCapability toMove=(DurationCapability)(movingTowardStart ? child : preceedingCapability);
          toMove.setStart(toMove.getStart() + delta);
          toMove.setEnd(toMove.getEnd() + delta);
          moved=true;
        }
        if (followingCapability != null && nearestFollower > end && !overlaps((DurationCapability)child,followingCapability)) {
          long delta=(end - nearestFollower) * (movingTowardStart ? 1 : -1);
          DurationCapability toMove=(DurationCapability)(!movingTowardStart ? child : followingCapability);
          toMove.setStart(toMove.getStart() + delta);
          toMove.setEnd(toMove.getEnd() + delta);
          moved=true;
        }
      }
    }
  }
 while (moved);
}"
51810,"@Override public void mouseDragged(MouseEvent e){
  if (activeHandle != null) {
    boolean isTowardStart=e.getXOnScreen() < priorX;
    int xDiff=e.getXOnScreen() - initialX;
    long tDiff=(long)(xDiff / parentView.getPixelScale());
    long currentTimeDiff=activeHandle.changesStart ? (durationCapability.getStart() - initialStart) : (durationCapability.getEnd() - initialEnd);
    tDiff=clamp(tDiff,activeHandle.changesStart ? initialStart : initialEnd,activeHandle.changesStart ? parentView.getStart() : initialStart,activeHandle.changesEnd ? parentView.getEnd() : initialEnd);
    tDiff-=currentTimeDiff;
    if (Math.abs(tDiff) > (durationCapability.getEnd() - durationCapability.getStart()) / 2) {
      tDiff=(durationCapability.getEnd() - durationCapability.getStart()) / 2 * (tDiff > 0 ? 1 : -1);
    }
    if (activeHandle.changesStart) {
      durationCapability.setStart(durationCapability.getStart() + tDiff);
    }
    if (activeHandle.changesEnd) {
      durationCapability.setEnd(durationCapability.getEnd() + tDiff);
    }
    if (parentComponent != null) {
      parentComponent.constrainChildren(durationCapability,isTowardStart);
    }
    parentView.revalidate();
    parentView.repaint();
    parentView.stateChanged(null);
    Object src=e.getSource();
    if (src instanceof Component) {
      ((Component)src).invalidate();
      ((Component)src).validate();
      ((Component)src).repaint();
    }
    parentView.getManifestedComponent().save();
    priorX=e.getXOnScreen();
  }
}","@Override public void mouseDragged(MouseEvent e){
  if (activeHandle != null) {
    int xDiff=e.getXOnScreen() - initialX;
    if (xDiff == 0)     return;
    long tDiff=(long)(xDiff / parentView.getPixelScale());
    long currentTimeDiff=activeHandle.changesStart ? (durationCapability.getStart() - initialStart) : (durationCapability.getEnd() - initialEnd);
    tDiff=clamp(tDiff,activeHandle.changesStart ? initialStart : initialEnd,activeHandle.changesStart ? parentView.getStart() : initialStart,activeHandle.changesEnd ? parentView.getEnd() : initialEnd);
    tDiff-=currentTimeDiff;
    if (tDiff == 0)     return;
    long timeStep=(long)(1 / parentView.getPixelScale());
    boolean isTowardStart=tDiff < 0;
    for (long t=0; t <= Math.abs(tDiff); t+=timeStep) {
      long delta=(tDiff < 0 ? -1 : 1) * ((t == 0) ? (Math.abs(tDiff) % timeStep) : timeStep);
      if (activeHandle.changesStart) {
        durationCapability.setStart(durationCapability.getStart() + delta);
      }
      if (activeHandle.changesEnd) {
        durationCapability.setEnd(durationCapability.getEnd() + delta);
      }
      if (parentComponent != null) {
        parentComponent.constrainChildren(durationCapability,isTowardStart);
      }
    }
    parentView.revalidate();
    parentView.repaint();
    parentView.stateChanged(null);
    Object src=e.getSource();
    if (src instanceof Component) {
      ((Component)src).invalidate();
      ((Component)src).validate();
      ((Component)src).repaint();
    }
    parentView.getManifestedComponent().save();
    priorX=e.getXOnScreen();
  }
}"
51811,"@Override public long getStart(){
  return parent != null ? parent.getStart() : centerTime - (long)((masterDuration.getEnd() - masterDuration.getStart()) / getZoom()) / 2;
}","@Override public long getStart(){
  return parent != null ? parent.getStart() : centerTime - (long)(((double)(masterDuration.getEnd() - masterDuration.getStart()) / getZoom()) / 2.0);
}"
51812,"@Override public long getEnd(){
  return parent != null ? parent.getStart() : centerTime + (long)((masterDuration.getEnd() - masterDuration.getStart()) / getZoom()) / 2;
}","@Override public long getEnd(){
  return parent != null ? parent.getStart() : centerTime + (long)(((double)(masterDuration.getEnd() - masterDuration.getStart()) / getZoom()) / 2.0);
}"
51813,"public double getPixelScale(){
  return parent != null ? parent.getPixelScale() : getZoom() * (double)(getWidth() - getLeftPadding() - getRightPadding()) / (double)(getEnd() - getStart());
}","public double getPixelScale(){
  return parent != null ? parent.getPixelScale() : (double)(getWidth() - getLeftPadding() - getRightPadding()) / (double)(getEnd() - getStart());
}"
51814,"@Override public void stateChanged(ChangeEvent e){
  revalidate();
  repaint();
  contentPane.revalidate();
  contentPane.repaint();
  for (  ChangeListener l : changeListeners) {
    l.stateChanged(e);
  }
}","@Override public void stateChanged(ChangeEvent e){
  updateLabels();
  revalidate();
  repaint();
  contentPane.revalidate();
  contentPane.repaint();
  for (  ChangeListener l : changeListeners) {
    l.stateChanged(e);
  }
}"
51815,"@Override public List<PropertyDescriptor> getFieldDescriptors(){
  List<PropertyDescriptor> fields=new ArrayList<PropertyDescriptor>();
  PropertyDescriptor duration=new PropertyDescriptor(""String_Node_Str"",new TextPropertyEditor(this),VisualControlDescriptor.TextField);
  duration.setFieldMutable(true);
  fields.add(duration);
  return fields;
}","@Override public List<PropertyDescriptor> getFieldDescriptors(){
  List<PropertyDescriptor> fields=new ArrayList<PropertyDescriptor>();
  PropertyDescriptor duration=new PropertyDescriptor(""String_Node_Str"",new DurationPropertyEditor(this),VisualControlDescriptor.TextField);
  duration.setFieldMutable(true);
  PropertyDescriptor power=new PropertyDescriptor(""String_Node_Str"",new PowerPropertyEditor(this),VisualControlDescriptor.TextField);
  power.setFieldMutable(true);
  PropertyDescriptor comm=new PropertyDescriptor(""String_Node_Str"",new CommPropertyEditor(this),VisualControlDescriptor.TextField);
  comm.setFieldMutable(true);
  fields.add(duration);
  fields.add(power);
  fields.add(comm);
  return fields;
}"
51816,"@Override public AbstractComponent createActivity(AbstractComponent parent){
  ComponentRegistry registry=ActivityCreationServiceImpl.registry.get();
  ActivityComponent activity=registry.newInstance(ActivityComponent.class,parent);
  activity.getModel().getData().setDuration(0.0);
  activity.save();
  return activity;
}","@Override public AbstractComponent createActivity(AbstractComponent parent){
  ComponentRegistry registry=ActivityCreationServiceImpl.registry.get();
  ActivityComponent activity=registry.newInstance(ActivityComponent.class,parent);
  activity.getModel().getData().setDuration(0.0);
  activity.getModel().getData().setPower(0);
  activity.getModel().getData().setComm(0);
  activity.save();
  return activity;
}"
51817,"@Override public List<PropertyDescriptor> getFieldDescriptors(){
  List<PropertyDescriptor> fields=new ArrayList<PropertyDescriptor>();
  PropertyDescriptor duration=new PropertyDescriptor(""String_Node_Str"",new TextPropertyEditor(this),VisualControlDescriptor.TextField);
  duration.setFieldMutable(true);
  fields.add(duration);
  return fields;
}","@Override public List<PropertyDescriptor> getFieldDescriptors(){
  List<PropertyDescriptor> fields=new ArrayList<PropertyDescriptor>();
  PropertyDescriptor duration=new PropertyDescriptor(""String_Node_Str"",new DurationPropertyEditor(this),VisualControlDescriptor.TextField);
  duration.setFieldMutable(true);
  fields.add(duration);
  return fields;
}"
51818,"@Override public List<PropertyDescriptor> getFieldDescriptors(){
  List<PropertyDescriptor> fields=new ArrayList<PropertyDescriptor>();
  PropertyDescriptor duration=new PropertyDescriptor(""String_Node_Str"",new TextPropertyEditor(this),VisualControlDescriptor.TextField);
  duration.setFieldMutable(true);
  fields.add(duration);
  return fields;
}","@Override public List<PropertyDescriptor> getFieldDescriptors(){
  List<PropertyDescriptor> fields=new ArrayList<PropertyDescriptor>();
  PropertyDescriptor duration=new PropertyDescriptor(""String_Node_Str"",new DurationPropertyEditor(this),VisualControlDescriptor.TextField);
  duration.setFieldMutable(true);
  fields.add(duration);
  return fields;
}"
51819,"@Override public Collection<ViewInfo> getViews(String componentTypeId){
  if (componentTypeId.equals(ActivityComponent.class.getName())) {
    return Arrays.asList(new ViewInfo(TimelineView.class,TimelineView.VIEW_ROLE_NAME,ViewType.OBJECT),new ViewInfo(TimelineView.class,TimelineView.VIEW_ROLE_NAME,TimelineView.class.getName(),ViewType.EMBEDDED,null,null,true,ActivityComponent.class),new ViewInfo(TimelineView.class,TimelineView.VIEW_ROLE_NAME,TimelineView.class.getName(),ViewType.CENTER,null,null,true,ActivityComponent.class));
  }
  return Collections.emptyList();
}","@Override public Collection<ViewInfo> getViews(String componentTypeId){
  if (componentTypeId.equals(ActivityComponent.class.getName())) {
    return Arrays.asList(new ViewInfo(ActivityOverviewView.class,ActivityOverviewView.VIEW_ROLE_NAME,ActivityOverviewView.class.getName(),ViewType.EMBEDDED,null,null,true,ActivityComponent.class),new ViewInfo(ActivityOverviewView.class,ActivityOverviewView.VIEW_ROLE_NAME,ActivityOverviewView.class.getName(),ViewType.OBJECT,null,null,true,ActivityComponent.class),new ViewInfo(ActivityOverviewView.class,ActivityOverviewView.VIEW_ROLE_NAME,ActivityOverviewView.class.getName(),ViewType.CENTER,null,null,true,ActivityComponent.class));
  }
  return Collections.emptyList();
}"
51820,"@Override public AbstractComponent createComp(ComponentRegistry comp,AbstractComponent targetComponent){
  String displayName=name.getText().trim();
  AbstractComponent component=null;
  component=comp.newInstance(componentClass,targetComponent);
  component.setDisplayName(displayName);
  component.save();
  return component;
}","@Override public AbstractComponent createComp(ComponentRegistry comp,AbstractComponent targetComponent){
  String displayName=name.getText().trim();
  AbstractComponent component=null;
  component=comp.newInstance(componentClass,targetComponent);
  component.setDisplayName(displayName);
  ActivityComponent activityComponent=(ActivityComponent)component;
  ActivityData data=activityComponent.getData();
  Date currentTime=Calendar.getInstance().getTime();
  data.setStartDate(currentTime);
  data.setEndDate(currentTime);
  data.setPower(0);
  data.setComm(0);
  component.save();
  return component;
}"
51821,"@Override public JComponent getUI(final JButton create){
  JLabel prompt=new JLabel(bundle.getString(""String_Node_Str""));
  name.setText(bundle.getString(""String_Node_Str""));
  prompt.setLabelFor(name);
  name.selectAll();
  name.setColumns(COL_SIZE);
  name.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
    }
    @Override public void insertUpdate(    DocumentEvent e){
      doAction();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      doAction();
    }
    private boolean verify(    String input){
      return DataValidation.validateLength(input,MIN_LENGTH,MAX_LENGTH);
    }
    private void doAction(){
      boolean flag=verify(name.getText().trim());
      create.setEnabled(flag);
      message.setIcon((flag) ? null : MCTIcons.getErrorIcon(ICON_WIDTH,ICON_HEIGHT));
      message.setText((flag) ? ""String_Node_Str"" : ERRORMSG);
    }
  }
);
  name.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      name.setForeground(Color.BLACK);
    }
  }
);
  JPanel messagePanel=new JPanel();
  messagePanel.add(message);
  JPanel UIPanel=new JPanel();
  UIPanel.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.insets=new Insets(10,10,0,0);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.FIRST_LINE_START;
  c.gridy=0;
  c.weightx=0.01;
  UIPanel.add(prompt,c);
  c.gridx=1;
  c.weightx=0.99;
  c.insets=new Insets(10,0,0,10);
  UIPanel.add(name,c);
  c.gridx=0;
  c.gridy=1;
  c.weightx=1;
  c.gridwidth=2;
  c.insets=new Insets(0,10,0,10);
  c.gridx=0;
  c.gridy=2;
  c.weightx=1;
  c.gridwidth=2;
  UIPanel.add(messagePanel,c);
  UIPanel.setVisible(true);
  return UIPanel;
}","@Override public JComponent getUI(final JButton create){
  JLabel prompt=new JLabel(bundle.getString(""String_Node_Str""));
  name.setText(""String_Node_Str"");
  prompt.setLabelFor(name);
  name.selectAll();
  name.setColumns(COL_SIZE);
  name.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
    }
    @Override public void insertUpdate(    DocumentEvent e){
      doAction();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      doAction();
    }
    private boolean verify(    String input){
      return DataValidation.validateLength(input,MIN_LENGTH,MAX_LENGTH);
    }
    private void doAction(){
      boolean flag=verify(name.getText().trim());
      create.setEnabled(flag);
      message.setIcon((flag) ? null : MCTIcons.getErrorIcon(ICON_WIDTH,ICON_HEIGHT));
      message.setText((flag) ? ""String_Node_Str"" : ERRORMSG);
    }
  }
);
  name.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      name.setForeground(Color.BLACK);
    }
  }
);
  JPanel messagePanel=new JPanel();
  messagePanel.add(message);
  JPanel UIPanel=new JPanel();
  UIPanel.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.insets=new Insets(10,10,0,0);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.anchor=GridBagConstraints.FIRST_LINE_START;
  c.gridy=0;
  c.weightx=0.01;
  UIPanel.add(prompt,c);
  c.gridx=1;
  c.weightx=0.99;
  c.insets=new Insets(10,0,0,10);
  UIPanel.add(name,c);
  c.gridx=0;
  c.gridy=1;
  c.weightx=1;
  c.gridwidth=2;
  c.insets=new Insets(0,10,0,10);
  c.gridx=0;
  c.gridy=2;
  c.weightx=1;
  c.gridwidth=2;
  UIPanel.add(messagePanel,c);
  UIPanel.setVisible(true);
  return UIPanel;
}"
51822,"@Override public AbstractComponent createComp(ComponentRegistry comp,AbstractComponent targetComponent){
  String displayName=name.getText().trim();
  AbstractComponent component=null;
  component=comp.newInstance(componentClass,targetComponent);
  component.setDisplayName(displayName);
  component.save();
  return component;
}","@Override public AbstractComponent createComp(ComponentRegistry comp,AbstractComponent targetComponent){
  String displayName=name.getText().trim();
  AbstractComponent component=null;
  component=comp.newInstance(componentClass,targetComponent);
  component.setDisplayName(displayName);
  DecisionComponent decisionComponent=(DecisionComponent)component;
  DecisionData data=decisionComponent.getData();
  Date currentTime=Calendar.getInstance().getTime();
  data.setStartDate(currentTime);
  data.setEndDate(currentTime);
  component.save();
  return component;
}"
51823,"private void assignDecisionLevel(DecisionWrapper dw){
  for (int group=0; group < activityMap.size(); group++) {
    List<ActivityWrapper> list=activityMap.get(group);
    for (    ActivityWrapper aw : list) {
      if (dw.parentActivity == aw.activityComponent) {
        dw.group=group;
        dw.level=aw.level - 1;
      }
    }
  }
}","private void assignDecisionLevel(DecisionWrapper dw){
  for (int group=0; group < activityMap.size(); group++) {
    List<ActivityWrapper> list=activityMap.get(group);
    for (    ActivityWrapper aw : list) {
      if (dw.parentActivity == aw.activityComponent) {
        dw.group=group;
        dw.level=aw.level - 1;
        return;
      }
    }
  }
}"
51824,"private void assignLevel(ActivityWrapper node){
  for (  ActivityWrapper child : node.children) {
    assignLevel(child);
  }
  if (node.children.isEmpty())   node.level=0;
 else {
    int maxLevel=0;
    for (    ActivityWrapper child : node.children) {
      if (child.level > maxLevel)       maxLevel=child.level;
    }
    node.level=maxLevel + 1;
    for (    ActivityWrapper child : node.children) {
      child.level=node.level - 1;
    }
  }
}","private void assignLevel(ActivityWrapper node){
  for (  ActivityWrapper child : node.children) {
    assignLevel(child);
  }
  if (node.activityComponent == null)   return;
 else   if (node.children.isEmpty())   node.level=0;
 else {
    int maxLevel=0;
    for (    ActivityWrapper child : node.children) {
      if (child.level > maxLevel)       maxLevel=child.level;
    }
    node.level=maxLevel + 1;
    for (    ActivityWrapper child : node.children) {
      child.level=node.level - 1;
    }
  }
}"
51825,"@Override protected void paintComponent(Graphics g){
  Graphics2D g2=(Graphics2D)g;
  g2.clearRect(0,0,getWidth(),getHeight());
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g2.setRenderingHints(renderHints);
  xStart=timeScaleIconWidth + margin;
  xEnd=getWidth() - timeScaleIconWidth - margin;
  if (currentTickerX == -1)   currentTickerX=xStart;
  initActivities();
  paintTimeScale(g2);
  g2.drawString(""String_Node_Str"" + FORMATTER.format(globalStartTime),0,getFontMetrics(getFont()).getHeight());
  String endtimeString=""String_Node_Str"" + FORMATTER.format(globalEndTime);
  g2.drawString(endtimeString,getWidth() - getFontMetrics(getFont()).charsWidth(endtimeString.toCharArray(),0,endtimeString.length()),getFontMetrics(getFont()).getHeight());
  long hoursDiff=(globalEndTime.getTime() - globalStartTime.getTime()) / (60 * 60 * 1000) % 24;
  long minDiff=(globalEndTime.getTime() - globalStartTime.getTime()) / (60 * 1000) % 60;
  String totalDurationText=""String_Node_Str"" + String.format(""String_Node_Str"",Long.toString(hoursDiff)).replace(' ','0') + ""String_Node_Str""+ String.format(""String_Node_Str"",Long.toString(minDiff)).replace(' ','0');
  g2.drawString(totalDurationText,getWidth() - getFontMetrics(getFont()).charsWidth(totalDurationText.toCharArray(),0,totalDurationText.length()),getFontMetrics(getFont()).getHeight() * 2);
  int yStart=20;
  activityWidgets.clear();
  for (int group=0; group < activityMap.size(); group++) {
    List<ActivityWrapper> list=activityMap.get(group);
    int level=list.get(0).level;
    for (    ActivityWrapper aw : list) {
      if (level != aw.level) {
        for (        DecisionWrapper dw : getDecisions(group,level)) {
          paintDecision(g2,dw,yStart);
        }
        yStart+=50;
        level=aw.level;
      }
      paintActivity(g2,aw.activityComponent,yStart);
    }
    yStart+=65;
    drawActivityDivider(g2,yStart);
  }
  paintTrend(g2,""String_Node_Str"",getHeight() - (2 * timeScaleHeight + 15),timeseries.get(0));
  paintTrend(g2,""String_Node_Str"",getHeight() - (2 * timeScaleHeight + 75),timeseries.get(1));
  if (showVeriticalTickLine && currentTickerX >= xStart)   paintVeriticalTickLine(g2);
}","@Override protected void paintComponent(Graphics g){
  Graphics2D g2=(Graphics2D)g;
  g2.clearRect(0,0,getWidth(),getHeight());
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g2.setRenderingHints(renderHints);
  xStart=timeScaleIconWidth + margin;
  xEnd=getWidth() - timeScaleIconWidth - margin;
  if (currentTickerX == -1)   currentTickerX=xStart;
  initActivities();
  if (globalStartTime == null || globalEndTime == null || ((globalEndTime.getTime() - globalStartTime.getTime()) == 0))   return;
  paintTimeScale(g2);
  g2.drawString(""String_Node_Str"" + FORMATTER.format(globalStartTime),0,getFontMetrics(getFont()).getHeight());
  String endtimeString=""String_Node_Str"" + FORMATTER.format(globalEndTime);
  g2.drawString(endtimeString,getWidth() - getFontMetrics(getFont()).charsWidth(endtimeString.toCharArray(),0,endtimeString.length()),getFontMetrics(getFont()).getHeight());
  String totalDurationText=""String_Node_Str"" + getFormattedDurationText(globalStartTime,globalEndTime);
  g2.drawString(totalDurationText,getWidth() - getFontMetrics(getFont()).charsWidth(totalDurationText.toCharArray(),0,totalDurationText.length()),getFontMetrics(getFont()).getHeight() * 2);
  int yStart=20;
  activityWidgets.clear();
  for (int group=0; group < activityMap.size(); group++) {
    List<ActivityWrapper> list=activityMap.get(group);
    int level=list.get(0).level;
    for (    ActivityWrapper aw : list) {
      if (level != aw.level) {
        for (        DecisionWrapper dw : getDecisions(group,level)) {
          paintDecision(g2,dw,yStart);
        }
        yStart+=50;
        level=aw.level;
      }
      paintActivity(g2,aw.activityComponent,yStart);
    }
    for (    DecisionWrapper dw : getDecisions(group,level)) {
      paintDecision(g2,dw,yStart);
    }
    yStart+=65;
    drawActivityDivider(g2,yStart);
  }
  paintTrend(g2,""String_Node_Str"",getHeight() - (2 * timeScaleHeight + 20),timeseries.get(0));
  paintTrend(g2,""String_Node_Str"",getHeight() - (2 * timeScaleHeight + 80),timeseries.get(1));
  if (showVeriticalTickLine && currentTickerX >= xStart)   paintVeriticalTickLine(g2);
}"
51826,"private void paintActivity(Graphics2D g2,ActivityComponent ac,int yStart){
  ActivityData data=ac.getModel().getData();
  if (globalStartTime == null || globalEndTime == null)   return;
  long timeDiff=globalEndTime.getTime() - globalStartTime.getTime();
  int xd=xEnd - xStart;
  int x1=xStart + (int)((data.getStartTime().getTime() - globalStartTime.getTime()) * xd / timeDiff);
  int x2=xStart + (int)((data.getEndTime().getTime() - globalStartTime.getTime()) * xd / timeDiff);
  int durationWidth=x2 - x1;
  Rectangle rectangle=new Rectangle(x1,yStart + 15,durationWidth,35);
  ActivityWidget widget=new ActivityWidget(ac,rectangle);
  activityWidgets.add(widget);
  int arcWidthAndHeight=TIME_UNIT_PIX / 2;
  g2.setColor(DURATION_COLOR);
  g2.fillRoundRect(rectangle.x,rectangle.y,rectangle.width,rectangle.height,arcWidthAndHeight,arcWidthAndHeight);
  g2.setStroke(SOLID_2PT_LINE_STROKE);
  g2.setColor(LINE_COLOR);
  g2.drawRoundRect(rectangle.x,rectangle.y,rectangle.width,rectangle.height,arcWidthAndHeight,arcWidthAndHeight);
  String name=getTruncatedString(g2,ac.getDisplayName(),widget);
  int charsWidth=getFontMetrics(getFont()).charsWidth(name.toCharArray(),0,name.length());
  int charHeight=getFontMetrics(getFont()).getHeight();
  g2.setColor(TEXT_COLOR);
  g2.drawString(name,x1 + durationWidth / 2 - charsWidth / 2,yStart + 15 + 14+ charHeight / 2);
}","private void paintActivity(Graphics2D g2,ActivityComponent ac,int yStart){
  ActivityData data=ac.getModel().getData();
  if (globalStartTime == null || globalEndTime == null)   return;
  long timeDiff=globalEndTime.getTime() - globalStartTime.getTime();
  if (timeDiff == 0)   return;
  int xd=xEnd - xStart;
  int x1=xStart + (int)((data.getStartTime().getTime() - globalStartTime.getTime()) * xd / timeDiff);
  int x2=xStart + (int)((data.getEndTime().getTime() - globalStartTime.getTime()) * xd / timeDiff);
  int durationWidth=x2 - x1;
  Rectangle rectangle=new Rectangle(x1,yStart + 15,durationWidth,35);
  ActivityWidget widget=new ActivityWidget(ac,rectangle);
  activityWidgets.add(widget);
  int arcWidthAndHeight=TIME_UNIT_PIX / 2;
  g2.setColor(DURATION_COLOR);
  g2.fillRoundRect(rectangle.x,rectangle.y,rectangle.width,rectangle.height,arcWidthAndHeight,arcWidthAndHeight);
  g2.setStroke(SOLID_2PT_LINE_STROKE);
  g2.setColor(LINE_COLOR);
  g2.drawRoundRect(rectangle.x,rectangle.y,rectangle.width,rectangle.height,arcWidthAndHeight,arcWidthAndHeight);
  String title=getTruncatedString(g2,ac.getDisplayName() + ""String_Node_Str"" + getFormattedDurationText(data.getStartTime(),data.getEndTime()),widget);
  int charsWidth=getFontMetrics(getFont()).charsWidth(title.toCharArray(),0,title.length());
  int charHeight=getFontMetrics(getFont()).getHeight();
  g2.setColor(TEXT_COLOR);
  g2.drawString(title,x1 + durationWidth / 2 - charsWidth / 2,yStart + 15 + 14+ charHeight / 2);
}"
51827,"private void initActivities(){
  if (activitiesInitialized())   return;
  activities=new ArrayList<ActivityComponent>();
  decisionMap=new ArrayList<DecisionWrapper>();
  activityWidgets=new ArrayList<TimelineView.ActivityWidget>();
  decisionWidgets=new ArrayList<TimelineView.DecisionWidget>();
  addAllActivitiesAndDecisionsRecursively(getManifestedComponent());
  ActivityWrapper root=new ActivityWrapper(null);
  replicateActivityTree(getManifestedComponent(),root);
  assignLevel(root);
  activityMap=new ArrayList<List<ActivityWrapper>>();
  populateActivityMap(root);
  assignLevelsForDecisions();
  TreeMap<Date,Double> powerChanges=new TreeMap<Date,Double>();
  TreeMap<Date,Double> commBandwidthChanges=new TreeMap<Date,Double>();
  for (  ActivityComponent activityComponent : activities) {
    ActivityData data=activityComponent.getModel().getData();
    Date startTime=data.getStartTime();
    Date endTime=data.getEndTime();
    if (globalStartTime == null) {
      globalStartTime=startTime;
      globalEndTime=endTime;
    }
 else {
      if (startTime.before(globalStartTime))       globalStartTime=startTime;
      if (endTime.after(globalEndTime))       globalEndTime=endTime;
    }
    if (powerChanges.containsKey(data.getStartTime()))     powerChanges.put(data.getStartTime(),data.getPower() + powerChanges.get(data.getStartTime()));
 else     powerChanges.put(data.getStartTime(),data.getPower());
    if (powerChanges.containsKey(data.getEndTime()))     powerChanges.put(data.getEndTime(),powerChanges.get(data.getEndTime()) - data.getPower());
 else     powerChanges.put(data.getEndTime(),(-1) * data.getPower());
    if (commBandwidthChanges.containsKey(data.getStartTime()))     commBandwidthChanges.put(data.getStartTime(),data.getComm() + commBandwidthChanges.get(data.getStartTime()));
 else     commBandwidthChanges.put(data.getStartTime(),data.getComm());
    if (commBandwidthChanges.containsKey(data.getEndTime()))     commBandwidthChanges.put(data.getEndTime(),commBandwidthChanges.get(data.getEndTime()) - data.getComm());
 else     commBandwidthChanges.put(data.getEndTime(),(-1) * data.getComm());
  }
  pixelMillis=(globalEndTime.getTime() - globalStartTime.getTime()) / (xEnd - xStart);
  double currentValue=0;
  TreeMap<Date,Double> dataset=new TreeMap<Date,Double>();
  timeseries.add(dataset);
  for (  Date date : powerChanges.keySet()) {
    currentValue+=powerChanges.get(date);
    dataset.put(date,currentValue);
  }
  dataset=new TreeMap<Date,Double>();
  timeseries.add(dataset);
  for (  Date date : commBandwidthChanges.keySet()) {
    currentValue+=commBandwidthChanges.get(date);
    dataset.put(date,currentValue);
  }
}","private void initActivities(){
  if (activitiesInitialized())   return;
  activities=new ArrayList<ActivityComponent>();
  decisionMap=new ArrayList<DecisionWrapper>();
  activityWidgets=new ArrayList<TimelineView.ActivityWidget>();
  decisionWidgets=new ArrayList<TimelineView.DecisionWidget>();
  addAllActivitiesAndDecisionsRecursively(getManifestedComponent());
  ActivityWrapper root=new ActivityWrapper(null);
  replicateActivityTree(getManifestedComponent(),root);
  assignLevel(root);
  activityMap=new ArrayList<List<ActivityWrapper>>();
  populateActivityMap(root);
  assignLevelsForDecisions();
  TreeMap<Date,Double> powerChanges=new TreeMap<Date,Double>();
  TreeMap<Date,Double> commBandwidthChanges=new TreeMap<Date,Double>();
  for (  ActivityComponent activityComponent : activities) {
    ActivityData data=activityComponent.getModel().getData();
    Date startTime=data.getStartTime();
    Date endTime=data.getEndTime();
    if (globalStartTime == null) {
      globalStartTime=startTime;
      globalEndTime=endTime;
    }
 else {
      if (startTime.before(globalStartTime))       globalStartTime=startTime;
      if (endTime.after(globalEndTime))       globalEndTime=endTime;
    }
    if (data.getStartTime() == null || data.getEndTime() == null)     return;
    if (powerChanges.containsKey(data.getStartTime()))     powerChanges.put(data.getStartTime(),data.getPower() + powerChanges.get(data.getStartTime()));
 else     powerChanges.put(data.getStartTime(),data.getPower());
    if (powerChanges.containsKey(data.getEndTime()))     powerChanges.put(data.getEndTime(),powerChanges.get(data.getEndTime()) - data.getPower());
 else     powerChanges.put(data.getEndTime(),(-1) * data.getPower());
    if (commBandwidthChanges.containsKey(data.getStartTime()))     commBandwidthChanges.put(data.getStartTime(),data.getComm() + commBandwidthChanges.get(data.getStartTime()));
 else     commBandwidthChanges.put(data.getStartTime(),data.getComm());
    if (commBandwidthChanges.containsKey(data.getEndTime()))     commBandwidthChanges.put(data.getEndTime(),commBandwidthChanges.get(data.getEndTime()) - data.getComm());
 else     commBandwidthChanges.put(data.getEndTime(),(-1) * data.getComm());
  }
  if (globalStartTime == null || globalEndTime == null)   return;
  pixelMillis=(globalEndTime.getTime() - globalStartTime.getTime()) / (xEnd - xStart);
  double currentValue=0;
  TreeMap<Date,Double> dataset=new TreeMap<Date,Double>();
  timeseries.add(dataset);
  for (  Date date : powerChanges.keySet()) {
    currentValue+=powerChanges.get(date);
    dataset.put(date,currentValue);
  }
  dataset=new TreeMap<Date,Double>();
  timeseries.add(dataset);
  for (  Date date : commBandwidthChanges.keySet()) {
    currentValue+=commBandwidthChanges.get(date);
    dataset.put(date,currentValue);
  }
}"
51828,"public LogEntryComponent<T> addEntry(T entry,List<AbstractComponent> components){
  PlatformAccess.getPlatform().getPersistenceProvider().startRelatedOperations();
  LogEntryComponent<T> child;
  child=PlatformAccess.getPlatform().getComponentRegistry().newInstance(getEntryComponentClass(),this);
  child.initialize(entry,components);
  child.setDisplayName(new UNIXTimeInstant(child.getEntry().getEntryTime()).toString());
  child.save();
  PlatformAccess.getPlatform().getPersistenceProvider().completeRelatedOperations(true);
  return child;
}","public LogEntryComponent<T> addEntry(T entry,List<AbstractComponent> components){
  LogEntryComponent<T> child;
  child=PlatformAccess.getPlatform().getComponentRegistry().newInstance(getEntryComponentClass(),this);
  PlatformAccess.getPlatform().getPersistenceProvider().startRelatedOperations();
  child.initialize(entry,components);
  child.setDisplayName(new UNIXTimeInstant(child.getEntry().getEntryTime()).toString());
  child.save();
  PlatformAccess.getPlatform().getPersistenceProvider().completeRelatedOperations(true);
  return child;
}"
51829,"private void prepareDataEntryPanel(JComponent panel,GridBagConstraints gbc){
  if (dataEntryPanel.getComponentCount() == 0) {
    if (!isEditable())     return;
    final JLabel prompt=new JLabel(""String_Node_Str"");
    final JTextArea textArea=new JTextArea();
    final JLabel updateButton=new JLabel(""String_Node_Str"");
    referenceArea=new ReferenceArea();
    referenceArea.setVisible(false);
    updateButton.setVisible(false);
    textArea.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,1));
    textArea.setDropTarget(referenceArea.getDropTarget());
    prompt.setForeground(Color.GRAY);
    dataEntryPanel=new JPanel();
    dataEntryPanel.setOpaque(false);
    dataEntryPanel.add(prompt);
    MouseListener dataEntryMouseListener=new MouseListener(){
      boolean active=false;
      @Override public void mouseClicked(      MouseEvent arg0){
        if (arg0.getSource().equals(dataEntryPanel)) {
          if (active)           return;
          dataEntryPanel.removeAll();
          dataEntryPanel.add(textArea);
          dataEntryPanel.add(updateButton);
          referenceArea.setVisible(!referenceArea.getReferences().isEmpty());
          textArea.grabFocus();
          revalidate();
          repaint();
          active=true;
        }
 else         if (arg0.getSource().equals(updateButton)) {
          if (updateButton.isVisible() && active) {
            AbstractComponent comp=getManifestedComponent();
            if (comp instanceof UserLogComponent) {
              List<AbstractComponent> references=referenceArea.getReferences();
              ((UserLogComponent)comp).addEntry(textArea.getText(),references);
              PlatformAccess.getPlatform().getPersistenceProvider().startRelatedOperations();
              comp.save();
              PlatformAccess.getPlatform().getPersistenceProvider().completeRelatedOperations(true);
              textArea.setText(""String_Node_Str"");
              updateButton.setVisible(false);
              referenceArea.setVisible(false);
              referenceArea.clear();
              dataEntryPanel.removeAll();
              dataEntryPanel.add(prompt);
              revalidate();
              active=false;
              setupView();
            }
          }
        }
 else {
          if (!active)           return;
          dataEntryPanel.removeAll();
          dataEntryPanel.add(prompt);
          referenceArea.setVisible(false);
          revalidate();
          repaint();
          active=false;
        }
      }
      @Override public void mouseEntered(      MouseEvent arg0){
      }
      @Override public void mouseExited(      MouseEvent arg0){
      }
      @Override public void mousePressed(      MouseEvent arg0){
      }
      @Override public void mouseReleased(      MouseEvent arg0){
      }
    }
;
    textArea.addKeyListener(new KeyListener(){
      @Override public void keyPressed(      KeyEvent arg0){
      }
      @Override public void keyReleased(      KeyEvent arg0){
      }
      @Override public void keyTyped(      KeyEvent arg0){
        updateButton.setVisible(!textArea.getText().isEmpty());
      }
    }
);
    dataEntryPanel.addMouseListener(dataEntryMouseListener);
    updateButton.addMouseListener(dataEntryMouseListener);
    addMouseListener(dataEntryMouseListener);
  }
  gbc.gridx=1;
  gbc.weightx=1.0;
  panel.add(dataEntryPanel,gbc);
  gbc.gridx=2;
  gbc.weightx=1.0;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  panel.add(referenceArea,gbc);
}","private void prepareDataEntryPanel(JComponent panel,GridBagConstraints gbc){
  if (dataEntryPanel.getComponentCount() == 0) {
    if (!isEditable())     return;
    final JLabel prompt=new JLabel(""String_Node_Str"");
    final JTextArea textArea=new JTextArea();
    final JLabel updateButton=new JLabel(""String_Node_Str"");
    referenceArea=new ReferenceArea();
    referenceArea.setVisible(false);
    updateButton.setVisible(false);
    textArea.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY,1));
    textArea.setDropTarget(referenceArea.getDropTarget());
    prompt.setForeground(Color.GRAY);
    dataEntryPanel=new JPanel();
    dataEntryPanel.setOpaque(false);
    dataEntryPanel.add(prompt);
    MouseListener dataEntryMouseListener=new MouseListener(){
      boolean active=false;
      @Override public void mouseClicked(      MouseEvent arg0){
        if (arg0.getSource().equals(dataEntryPanel)) {
          if (active)           return;
          dataEntryPanel.removeAll();
          dataEntryPanel.add(textArea);
          dataEntryPanel.add(updateButton);
          referenceArea.setVisible(!referenceArea.getReferences().isEmpty());
          textArea.grabFocus();
          revalidate();
          repaint();
          active=true;
        }
 else         if (arg0.getSource().equals(updateButton)) {
          if (updateButton.isVisible() && active) {
            AbstractComponent comp=getManifestedComponent();
            if (comp instanceof UserLogComponent) {
              List<AbstractComponent> references=referenceArea.getReferences();
              ((UserLogComponent)comp).addEntry(textArea.getText(),references);
              comp.save();
              textArea.setText(""String_Node_Str"");
              updateButton.setVisible(false);
              referenceArea.setVisible(false);
              referenceArea.clear();
              dataEntryPanel.removeAll();
              dataEntryPanel.add(prompt);
              revalidate();
              active=false;
              setupView();
            }
          }
        }
 else {
          if (!active)           return;
          dataEntryPanel.removeAll();
          dataEntryPanel.add(prompt);
          referenceArea.setVisible(false);
          revalidate();
          repaint();
          active=false;
        }
      }
      @Override public void mouseEntered(      MouseEvent arg0){
      }
      @Override public void mouseExited(      MouseEvent arg0){
      }
      @Override public void mousePressed(      MouseEvent arg0){
      }
      @Override public void mouseReleased(      MouseEvent arg0){
      }
    }
;
    textArea.addKeyListener(new KeyListener(){
      @Override public void keyPressed(      KeyEvent arg0){
      }
      @Override public void keyReleased(      KeyEvent arg0){
      }
      @Override public void keyTyped(      KeyEvent arg0){
        updateButton.setVisible(!textArea.getText().isEmpty());
      }
    }
);
    dataEntryPanel.addMouseListener(dataEntryMouseListener);
    updateButton.addMouseListener(dataEntryMouseListener);
    addMouseListener(dataEntryMouseListener);
  }
  gbc.gridx=1;
  gbc.weightx=1.0;
  panel.add(dataEntryPanel,gbc);
  gbc.gridx=2;
  gbc.weightx=1.0;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  panel.add(referenceArea,gbc);
}"
51830,"private JComponent buildEntryPanel(LogEntry<? extends String> entry,JComponent panel,GridBagConstraints gbc){
  gbc.gridx=0;
  gbc.weightx=0.0;
  panel.add(new EditableTimeLabel(entry),gbc);
  gbc.gridx=1;
  gbc.weightx=1.0;
  JLabel contents=new JLabel(""String_Node_Str"" + (entry == logEntry ? ""String_Node_Str"" : ""String_Node_Str"") + entry.getEntry().replaceAll(""String_Node_Str"",""String_Node_Str"")+ (entry == logEntry ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  panel.add(contents,gbc);
  if (entry == logEntry)   highlightedComponents.add(contents);
  JPanel referencePanel=new JPanel();
  referencePanel.setLayout(new BoxLayout(referencePanel,BoxLayout.PAGE_AXIS));
  referencePanel.setOpaque(false);
  ComponentRegistry registry=ComponentRegistryAccess.getComponentRegistry();
  for (  String reference : entry.getReferencedIDs()) {
    AbstractComponent comp=registry.getComponent(reference);
    if (comp != null) {
      referencePanel.add(new NotebookPanel(comp,entry.getEntryTime()));
    }
  }
  gbc.gridx=2;
  gbc.weightx=0.0;
  panel.add(referencePanel,gbc);
  return panel;
}","private JComponent buildEntryPanel(LogEntry<? extends String> entry,JComponent panel,GridBagConstraints gbc){
  gbc.gridx=0;
  gbc.weightx=0.0;
  panel.add(new EditableTimeLabel(entry),gbc);
  gbc.gridx=1;
  gbc.weightx=1.0;
  JLabel contents=new JLabel(""String_Node_Str"" + (entry == logEntry ? ""String_Node_Str"" : ""String_Node_Str"") + entry.getEntry().replaceAll(""String_Node_Str"",""String_Node_Str"")+ (entry == logEntry ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  panel.add(contents,gbc);
  if (entry != null && logEntry != null && entry.getEntryTime() == logEntry.getEntryTime()) {
    highlightedComponents.add(contents);
  }
  JPanel referencePanel=new JPanel();
  referencePanel.setLayout(new BoxLayout(referencePanel,BoxLayout.PAGE_AXIS));
  referencePanel.setOpaque(false);
  ComponentRegistry registry=ComponentRegistryAccess.getComponentRegistry();
  for (  String reference : entry.getReferencedIDs()) {
    AbstractComponent comp=registry.getComponent(reference);
    if (comp != null) {
      referencePanel.add(new NotebookPanel(comp,entry.getEntryTime()));
    }
  }
  gbc.gridx=2;
  gbc.weightx=0.0;
  panel.add(referencePanel,gbc);
  return panel;
}"
51831,"private void setupTable(){
  List<XulComponent> colCollection=getColumns().getChildNodes();
  String cols[]=new String[colCollection.size()];
  SelectionGrid.SelectionPolicy selectionPolicy=null;
  if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionGrid.SelectionPolicy.ONE_ROW;
  }
 else   if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionGrid.SelectionPolicy.MULTI_ROW;
  }
  int[] widths=new int[cols.length];
  int totalFlex=0;
  for (int i=0; i < cols.length; i++) {
    totalFlex+=colCollection.get(i).getFlex();
  }
  boolean allFlexing=true;
  int totalWidth=0;
  for (int i=0; i < cols.length; i++) {
    cols[i]=((XulTreeCol)colCollection.get(i)).getLabel();
    if (totalFlex > 0 && getWidth() > 0) {
      widths[i]=(int)(getWidth() * ((double)colCollection.get(i).getFlex() / totalFlex));
      totalWidth+=widths[i];
    }
 else     if (getColumns().getColumn(i).getWidth() > 0) {
      allFlexing=false;
      widths[i]=getColumns().getColumn(i).getWidth();
      totalWidth+=widths[i];
    }
  }
  table=new BaseTable(cols,widths,new BaseColumnComparator[cols.length],selectionPolicy,this);
  if (getHeight() != 0) {
    table.setHeight(getHeight() + ""String_Node_Str"");
  }
 else {
    table.setHeight(""String_Node_Str"");
  }
  if (getWidth() != 0) {
    table.setWidth(getWidth() + ""String_Node_Str"");
  }
 else {
    table.setWidth(""String_Node_Str"");
  }
  if (allFlexing) {
    table.fillWidth();
  }
  RowSelectionHandler handler=new RowSelectionHandler(){
    @Override public void onRowSelection(    RowSelectionEvent event){
      try {
        if (getOnselect() != null && getOnselect().trim().length() > 0) {
          getXulDomContainer().invoke(getOnselect(),new Object[]{});
        }
        Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
        int[] rows=new int[selectedRows.length];
        for (int i=0; i < selectedRows.length; i++) {
          rows[i]=selectedRows[i];
        }
        GwtTree.this.setSelectedRows(rows);
        GwtTree.this.colCollection=getColumns().getChildNodes();
        if (GwtTree.this.isShowalleditcontrols() == false) {
          if (curSelectedRow > -1) {
            Object[] curSelectedRowOriginal=new Object[getColumns().getColumnCount()];
            for (int j=0; j < getColumns().getColumnCount(); j++) {
              curSelectedRowOriginal[j]=getColumnEditor(j,curSelectedRow);
            }
            table.replaceRow(curSelectedRow,curSelectedRowOriginal);
          }
          curSelectedRow=rows[0];
          Object[] newRow=new Object[getColumns().getColumnCount()];
          for (int j=0; j < getColumns().getColumnCount(); j++) {
            newRow[j]=getColumnEditor(j,rows[0]);
          }
          table.replaceRow(rows[0],newRow);
        }
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
;
  table.addRowSelectionHandler(handler);
  setWidgetInPanel(table);
  updateUI();
}","private void setupTable(){
  List<XulComponent> colCollection=getColumns().getChildNodes();
  String cols[]=new String[colCollection.size()];
  SelectionGrid.SelectionPolicy selectionPolicy=null;
  if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionGrid.SelectionPolicy.ONE_ROW;
  }
 else   if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionGrid.SelectionPolicy.MULTI_ROW;
  }
  int[] widths=new int[cols.length];
  int totalFlex=0;
  for (int i=0; i < cols.length; i++) {
    totalFlex+=colCollection.get(i).getFlex();
  }
  boolean allFlexing=true;
  int totalWidth=0;
  for (int i=0; i < cols.length; i++) {
    cols[i]=((XulTreeCol)colCollection.get(i)).getLabel();
    if (totalFlex > 0 && getWidth() > 0) {
      widths[i]=(int)(getWidth() * ((double)colCollection.get(i).getFlex() / totalFlex));
      totalWidth+=widths[i];
    }
 else     if (getColumns().getColumn(i).getWidth() > 0) {
      allFlexing=false;
      widths[i]=getColumns().getColumn(i).getWidth();
      totalWidth+=widths[i];
    }
  }
  table=new BaseTable(cols,widths,new BaseColumnComparator[cols.length],selectionPolicy,this);
  if (getHeight() != 0) {
    table.setHeight(getHeight() + ""String_Node_Str"");
  }
 else {
    table.setHeight(""String_Node_Str"");
  }
  if (getWidth() != 0) {
    table.setWidth(getWidth() + ""String_Node_Str"");
  }
 else {
    table.setWidth(""String_Node_Str"");
  }
  if (allFlexing) {
    table.fillWidth();
  }
  RowSelectionHandler handler=new RowSelectionHandler(){
    @Override public void onRowSelection(    RowSelectionEvent event){
      try {
        Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
        if (getOnselect() != null && getOnselect().trim().length() > 0) {
          getXulDomContainer().invoke(getOnselect(),new Object[]{selectedRows.length > 0 ? selectedRows[0] : null});
        }
        int[] rows=new int[selectedRows.length];
        for (int i=0; i < selectedRows.length; i++) {
          rows[i]=selectedRows[i];
        }
        GwtTree.this.setSelectedRows(rows);
        GwtTree.this.colCollection=getColumns().getChildNodes();
        if (GwtTree.this.isShowalleditcontrols() == false) {
          if (curSelectedRow > -1) {
            Object[] curSelectedRowOriginal=new Object[getColumns().getColumnCount()];
            for (int j=0; j < getColumns().getColumnCount(); j++) {
              curSelectedRowOriginal[j]=getColumnEditor(j,curSelectedRow);
            }
            table.replaceRow(curSelectedRow,curSelectedRowOriginal);
          }
          curSelectedRow=rows[0];
          Object[] newRow=new Object[getColumns().getColumnCount()];
          for (int j=0; j < getColumns().getColumnCount(); j++) {
            newRow[j]=getColumnEditor(j,rows[0]);
          }
          table.replaceRow(rows[0],newRow);
        }
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
;
  table.addRowSelectionHandler(handler);
  setWidgetInPanel(table);
  updateUI();
}"
51832,"@Override public void onRowSelection(RowSelectionEvent event){
  try {
    if (getOnselect() != null && getOnselect().trim().length() > 0) {
      getXulDomContainer().invoke(getOnselect(),new Object[]{});
    }
    Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
    int[] rows=new int[selectedRows.length];
    for (int i=0; i < selectedRows.length; i++) {
      rows[i]=selectedRows[i];
    }
    GwtTree.this.setSelectedRows(rows);
    GwtTree.this.colCollection=getColumns().getChildNodes();
    if (GwtTree.this.isShowalleditcontrols() == false) {
      if (curSelectedRow > -1) {
        Object[] curSelectedRowOriginal=new Object[getColumns().getColumnCount()];
        for (int j=0; j < getColumns().getColumnCount(); j++) {
          curSelectedRowOriginal[j]=getColumnEditor(j,curSelectedRow);
        }
        table.replaceRow(curSelectedRow,curSelectedRowOriginal);
      }
      curSelectedRow=rows[0];
      Object[] newRow=new Object[getColumns().getColumnCount()];
      for (int j=0; j < getColumns().getColumnCount(); j++) {
        newRow[j]=getColumnEditor(j,rows[0]);
      }
      table.replaceRow(rows[0],newRow);
    }
  }
 catch (  XulException e) {
    e.printStackTrace();
  }
}","@Override public void onRowSelection(RowSelectionEvent event){
  try {
    Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
    if (getOnselect() != null && getOnselect().trim().length() > 0) {
      getXulDomContainer().invoke(getOnselect(),new Object[]{selectedRows.length > 0 ? selectedRows[0] : null});
    }
    int[] rows=new int[selectedRows.length];
    for (int i=0; i < selectedRows.length; i++) {
      rows[i]=selectedRows[i];
    }
    GwtTree.this.setSelectedRows(rows);
    GwtTree.this.colCollection=getColumns().getChildNodes();
    if (GwtTree.this.isShowalleditcontrols() == false) {
      if (curSelectedRow > -1) {
        Object[] curSelectedRowOriginal=new Object[getColumns().getColumnCount()];
        for (int j=0; j < getColumns().getColumnCount(); j++) {
          curSelectedRowOriginal[j]=getColumnEditor(j,curSelectedRow);
        }
        table.replaceRow(curSelectedRow,curSelectedRowOriginal);
      }
      curSelectedRow=rows[0];
      Object[] newRow=new Object[getColumns().getColumnCount()];
      for (int j=0; j < getColumns().getColumnCount(); j++) {
        newRow[j]=getColumnEditor(j,rows[0]);
      }
      table.replaceRow(rows[0],newRow);
    }
  }
 catch (  XulException e) {
    e.printStackTrace();
  }
}"
51833,"public JfaceMenuitem(Element self,XulComponent parent,XulDomContainer domContainer,String tagName,int pos,Action action){
  super(""String_Node_Str"");
  this.parent=parent;
  this.domContainer=domContainer;
  if (parent.getManagedObject() != null && parent.getManagedObject() instanceof IMenuManager) {
    createItem(self,parent,pos,true);
  }
}","private JfaceMenuitem(Element self,XulComponent parent,XulDomContainer domContainer,String tagName,int pos,Action action,boolean shouldCreate,boolean autoAdd){
  super(""String_Node_Str"");
  this.parent=parent;
  this.domContainer=domContainer;
  if (shouldCreate) {
    createItem(self,parent,pos,autoAdd);
  }
}"
51834,"@Override public void addChildAt(Element c,int pos){
  if (pos != -1) {
    super.addChildAt(c,pos);
  }
 else {
    super.addChild(c);
  }
  IContributionItem items[]=menu.getItems();
  for (  IContributionItem item : items) {
    if (item.getId() != null && item.getId().equals(c.getAttributeValue(""String_Node_Str"")) && !item.isVisible()) {
      item.setVisible(true);
      return;
    }
  }
  IAction action=null;
  IContributionItem contribs=null;
  if (c instanceof JfaceMenuitem) {
    JfaceMenuitem item=(JfaceMenuitem)c;
    Object man=item.getManagedObject();
    if (man instanceof IAction) {
      action=(IAction)item.getManagedObject();
    }
 else     if (man == null) {
    }
 else {
    }
  }
 else   if (c instanceof JfaceMenu) {
    JfaceMenu item=(JfaceMenu)c;
    contribs=item.getJfaceMenu();
  }
  if (action == null && contribs == null) {
    return;
  }
  String id=null;
  if (pos == 0 && pos < menu.getItems().length) {
    id=menu.getItems()[1].getId();
  }
 else   if (pos > 0 && pos < menu.getItems().length) {
    id=menu.getItems()[pos].getId();
  }
  if (id != null) {
    if (action != null) {
      menu.insertBefore(id,action);
    }
 else {
      menu.insertBefore(id,contribs);
    }
  }
 else {
    if (action != null) {
      menu.add(action);
    }
 else {
      menu.add(contribs);
    }
  }
}","@Override public void addChildAt(Element c,int pos){
  if (pos != -1) {
    super.addChildAt(c,pos);
  }
 else {
    super.addChild(c);
  }
  IContributionItem items[]=menu.getItems();
  for (  IContributionItem item : items) {
    if (item.getId() != null && item.getId().equals(c.getAttributeValue(""String_Node_Str"")) && !item.isVisible()) {
      item.setVisible(true);
      return;
    }
  }
  IAction action=null;
  IContributionItem contribs=null;
  if (c instanceof JfaceMenuitem) {
    JfaceMenuitem item=(JfaceMenuitem)c;
    Object man=item.getManagedObject();
    if (man instanceof IAction) {
      action=(IAction)item.getManagedObject();
    }
 else     if (man instanceof IContributionItem) {
      contribs=(IContributionItem)man;
    }
 else     if (man == null) {
    }
 else {
    }
  }
 else   if (c instanceof JfaceMenu) {
    JfaceMenu item=(JfaceMenu)c;
    contribs=item.getJfaceMenu();
  }
  if (action == null && contribs == null) {
    return;
  }
  String id=null;
  if (pos == 0 && pos < menu.getItems().length) {
    id=menu.getItems()[1].getId();
  }
 else   if (pos > 0 && pos < menu.getItems().length) {
    id=menu.getItems()[pos].getId();
  }
  if (id != null) {
    if (action != null) {
      menu.insertBefore(id,action);
    }
 else {
      menu.insertBefore(id,contribs);
    }
  }
 else {
    if (action != null) {
      menu.add(action);
    }
 else {
      menu.add(contribs);
    }
  }
}"
51835,"public JComponent getJComponent(){
  return (JComponent)getManagedObject();
}","public JComponent getJComponent(){
  return getManagedObject() instanceof JComponent ? (JComponent)getManagedObject() : null;
}"
51836,"public SwingDialog(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  ID=self.getAttributeValue(""String_Node_Str"");
  this.parent=parent;
  this.domContainer=domContainer;
  this.orientation=Orient.VERTICAL;
  container=new JPanel(new GridBagLayout());
  setManagedObject(container);
  resetContainer();
}","public SwingDialog(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  ID=self.getAttributeValue(""String_Node_Str"");
  this.parent=parent;
  this.domContainer=domContainer;
  this.orientation=Orient.VERTICAL;
  container=new JPanel(new GridBagLayout());
  setManagedObject(""String_Node_Str"");
  resetContainer();
}"
51837,"public void setAccesskey(String accessKey){
  if (item != null && item.isDisposed() == false) {
    int mask=0;
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.MOD1;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.SHIFT;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.ALT;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.PAGE_UP;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.PAGE_DOWN;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.HOME;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.ESC;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.ARROW_LEFT;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.ARROW_RIGHT;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.ARROW_UP;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask+=SWT.ARROW_DOWN;
    }
    String remainder=accessKey.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    if (remainder.length() == 1) {
      mask+=remainder.toUpperCase().charAt(0);
    }
 else     if (remainder.length() > 1 && remainder.startsWith(""String_Node_Str"")) {
      mask+=LegacyActionTools.findKeyCode(remainder);
    }
    item.setAccelerator(mask);
  }
}","public void setAccesskey(String accessKey){
  if (item != null && item.isDisposed() == false) {
    int mask=0;
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.MOD1;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.SHIFT;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.ALT;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.PAGE_UP;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.PAGE_DOWN;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.HOME;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.ESC;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1 && accessKey.indexOf(""String_Node_Str"") == -1) {
      mask|=SWT.ARROW_UP;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1 && accessKey.indexOf(""String_Node_Str"") == -1) {
      mask|=SWT.ARROW_DOWN;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.ARROW_LEFT;
    }
    if (accessKey.indexOf(""String_Node_Str"") > -1) {
      mask|=SWT.ARROW_RIGHT;
    }
    String remainder=accessKey.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    if (remainder.length() == 1) {
      mask+=remainder.toUpperCase().charAt(0);
    }
 else     if (remainder.length() > 1 && remainder.startsWith(""String_Node_Str"")) {
      mask+=LegacyActionTools.findKeyCode(remainder);
    }
    item.setAccelerator(mask);
  }
}"
51838,"@Bindable public <T>void setElements(Collection<T> elements){
  try {
    this.elements=elements;
    suppressEvents=true;
    prevSelectionPos=-1;
    if (this.getRootChildren() != null) {
      this.getRootChildren().removeAll();
    }
    this.elements=elements;
    for (    Binding b : expandBindings) {
      b.destroyBindings();
    }
    this.expandBindings.clear();
    for (    TreeItemDropController d : this.dropHandlers) {
      XulDragController.getInstance().unregisterDropController(d);
    }
    dropHandlers.clear();
    if (elements == null || elements.size() == 0) {
      suppressEvents=false;
      updateUI();
      return;
    }
    try {
      if (table != null) {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          int colSize=this.getColumns().getChildNodes().size();
          for (int x=0; x < colSize; x++) {
            XulComponent col=this.getColumns().getColumn(x);
            XulTreeCol column=((XulTreeCol)col);
            final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
            addBindings(column,(GwtTreeCell)cell,o);
            row.addCell(cell);
          }
        }
      }
 else {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          ((XulTreeItem)row.getParent()).setBoundObject(o);
          addTreeChild(o,row);
        }
      }
    }
 catch (    XulException e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
catch (    Exception e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    suppressEvents=false;
    this.clearSelection();
    updateUI();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
}","@Bindable public <T>void setElements(Collection<T> elements){
  try {
    suppressEvents=true;
    prevSelectionPos=-1;
    this.getRootChildren().removeAll();
    this.elements=elements;
    for (    Binding b : expandBindings) {
      b.destroyBindings();
    }
    this.expandBindings.clear();
    for (    TreeItemDropController d : this.dropHandlers) {
      XulDragController.getInstance().unregisterDropController(d);
    }
    dropHandlers.clear();
    if (elements == null || elements.size() == 0) {
      suppressEvents=false;
      updateUI();
      return;
    }
    try {
      if (table != null) {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          int colSize=this.getColumns().getChildNodes().size();
          for (int x=0; x < colSize; x++) {
            XulComponent col=this.getColumns().getColumn(x);
            XulTreeCol column=((XulTreeCol)col);
            final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
            addBindings(column,(GwtTreeCell)cell,o);
            row.addCell(cell);
          }
        }
      }
 else {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          ((XulTreeItem)row.getParent()).setBoundObject(o);
          addTreeChild(o,row);
        }
      }
    }
 catch (    XulException e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
catch (    Exception e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    suppressEvents=false;
    this.clearSelection();
    updateUI();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
}"
51839,"private void setupTable(){
  List<XulComponent> colCollection=getColumns().getChildNodes();
  String cols[]=new String[colCollection.size()];
  SelectionPolicy selectionPolicy=null;
  if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionPolicy.ONE_ROW;
  }
 else   if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionPolicy.MULTI_ROW;
  }
  int[] widths=new int[cols.length];
  int totalFlex=0;
  for (int i=0; i < cols.length; i++) {
    totalFlex+=colCollection.get(i).getFlex();
  }
  boolean allFlexing=true;
  int totalWidth=0;
  for (int i=0; i < cols.length; i++) {
    cols[i]=((XulTreeCol)colCollection.get(i)).getLabel();
    if (totalFlex > 0 && getWidth() > 0) {
      widths[i]=(int)(getWidth() * ((double)colCollection.get(i).getFlex() / totalFlex));
      totalWidth+=widths[i];
    }
 else     if (getColumns().getColumn(i).getWidth() > 0) {
      allFlexing=false;
      widths[i]=getColumns().getColumn(i).getWidth();
      totalWidth+=widths[i];
    }
  }
  table=new BaseTable(cols,widths,new BaseColumnComparator[cols.length],selectionPolicy);
  if (getHeight() != 0) {
    table.setHeight(getHeight() + ""String_Node_Str"");
  }
 else {
    table.setHeight(""String_Node_Str"");
  }
  if (getWidth() != 0) {
    table.setWidth(getWidth() + ""String_Node_Str"");
  }
 else {
    table.setWidth(""String_Node_Str"");
  }
  if (allFlexing) {
    table.fillWidth();
  }
  table.addTableSelectionListener(new TableSelectionListener(){
    public void onAllRowsDeselected(    SourceTableSelectionEvents sender){
    }
    public void onCellHover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onCellUnhover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onRowDeselected(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowHover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowUnhover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowsSelected(    SourceTableSelectionEvents sender,    int firstRow,    int numRows){
      try {
        if (getOnselect() != null && getOnselect().trim().length() > 0) {
          getXulDomContainer().invoke(getOnselect(),new Object[]{});
        }
        Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
        int[] rows=new int[selectedRows.length];
        for (int i=0; i < selectedRows.length; i++) {
          rows[i]=selectedRows[i];
        }
        GwtTree.this.setSelectedRows(rows);
        GwtTree.this.colCollection=getColumns().getChildNodes();
        if (GwtTree.this.isShowalleditcontrols() == false) {
          if (curSelectedRow > -1) {
            Object[] curSelectedRowOriginal=new Object[getColumns().getColumnCount()];
            for (int j=0; j < getColumns().getColumnCount(); j++) {
              curSelectedRowOriginal[j]=getColumnEditor(j,curSelectedRow);
            }
            table.replaceRow(curSelectedRow,curSelectedRowOriginal);
          }
          curSelectedRow=rows[0];
          Object[] newRow=new Object[getColumns().getColumnCount()];
          for (int j=0; j < getColumns().getColumnCount(); j++) {
            newRow[j]=getColumnEditor(j,rows[0]);
          }
          table.replaceRow(rows[0],newRow);
        }
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
  setWidgetInPanel(table);
  updateUI();
}","private void setupTable(){
  List<XulComponent> colCollection=getColumns().getChildNodes();
  String cols[]=new String[colCollection.size()];
  SelectionPolicy selectionPolicy=null;
  if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionPolicy.ONE_ROW;
  }
 else   if (""String_Node_Str"".equals(getSeltype())) {
    selectionPolicy=SelectionPolicy.MULTI_ROW;
  }
  int[] widths=new int[cols.length];
  int totalFlex=0;
  for (int i=0; i < cols.length; i++) {
    totalFlex+=colCollection.get(i).getFlex();
  }
  boolean allFlexing=true;
  int totalWidth=0;
  for (int i=0; i < cols.length; i++) {
    cols[i]=((XulTreeCol)colCollection.get(i)).getLabel();
    if (totalFlex > 0 && getWidth() > 0) {
      widths[i]=(int)(getWidth() * ((double)colCollection.get(i).getFlex() / totalFlex));
      totalWidth+=widths[i];
    }
 else     if (getColumns().getColumn(i).getWidth() > 0) {
      allFlexing=false;
      widths[i]=getColumns().getColumn(i).getWidth();
      totalWidth+=widths[i];
    }
  }
  table=new BaseTable(cols,widths,new BaseColumnComparator[cols.length],selectionPolicy,this);
  if (getHeight() != 0) {
    table.setHeight(getHeight() + ""String_Node_Str"");
  }
 else {
    table.setHeight(""String_Node_Str"");
  }
  if (getWidth() != 0) {
    table.setWidth(getWidth() + ""String_Node_Str"");
  }
 else {
    table.setWidth(""String_Node_Str"");
  }
  if (allFlexing) {
    table.fillWidth();
  }
  table.addTableSelectionListener(new TableSelectionListener(){
    public void onAllRowsDeselected(    SourceTableSelectionEvents sender){
    }
    public void onCellHover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onCellUnhover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onRowDeselected(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowHover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowUnhover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowsSelected(    SourceTableSelectionEvents sender,    int firstRow,    int numRows){
      try {
        if (getOnselect() != null && getOnselect().trim().length() > 0) {
          getXulDomContainer().invoke(getOnselect(),new Object[]{});
        }
        Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
        int[] rows=new int[selectedRows.length];
        for (int i=0; i < selectedRows.length; i++) {
          rows[i]=selectedRows[i];
        }
        GwtTree.this.setSelectedRows(rows);
        GwtTree.this.colCollection=getColumns().getChildNodes();
        if (GwtTree.this.isShowalleditcontrols() == false) {
          if (curSelectedRow > -1) {
            Object[] curSelectedRowOriginal=new Object[getColumns().getColumnCount()];
            for (int j=0; j < getColumns().getColumnCount(); j++) {
              curSelectedRowOriginal[j]=getColumnEditor(j,curSelectedRow);
            }
            table.replaceRow(curSelectedRow,curSelectedRowOriginal);
          }
          curSelectedRow=rows[0];
          Object[] newRow=new Object[getColumns().getColumnCount()];
          for (int j=0; j < getColumns().getColumnCount(); j++) {
            newRow[j]=getColumnEditor(j,rows[0]);
          }
          table.replaceRow(rows[0],newRow);
        }
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
  setWidgetInPanel(table);
  updateUI();
}"
51840,"@SuppressWarnings(""String_Node_Str"") public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  mainPanel=new VerticalPanel();
  setManagedObject(mainPanel);
  super.init(srcEle,container);
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setAction(buildActionUrl(GWT.getModuleBaseURL(),srcEle.getAttribute(""String_Node_Str"")));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setOnUploadSuccess(srcEle.getAttribute(""String_Node_Str""));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setOnUploadFailure(srcEle.getAttribute(""String_Node_Str""));
  }
  uploadForm=new FormPanel();
  uploadForm.setEncoding(FormPanel.ENCODING_MULTIPART);
  uploadForm.setMethod(FormPanel.METHOD_POST);
  uploadForm.setHeight(getHeight() + ""String_Node_Str"");
  uploadForm.setWidth(getWidth() + ""String_Node_Str"");
  HorizontalPanel panel=new HorizontalPanel();
  uploadForm.setWidget(panel);
  uploadForm.setVisible(true);
  upload=new FileUpload();
  upload.setName(""String_Node_Str"");
  upload.setVisible(true);
  upload.setHeight(getHeight() + ""String_Node_Str"");
  upload.setWidth(getWidth() + ""String_Node_Str"");
  upload.addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      setSelectedFile(upload.getFilename());
    }
  }
);
  uploadPanel=new VerticalPanel();
  String uploadButtonImage=srcEle.getAttribute(""String_Node_Str"");
  String uploadButtonDisabledImage=srcEle.getAttribute(""String_Node_Str"");
  hiddenPanel=new HTMLPanel(""String_Node_Str"");
  uploadTextBox=new GwtTextbox();
  uploadTextBox.setId(""String_Node_Str"");
  uploadTextBox.setHeight(getHeight());
  uploadTextBox.setWidth(getWidth() - 45);
  GwtButton uploadButton=new GwtButton();
  uploadButton.setId(""String_Node_Str"");
  uploadButton.setHeight(22);
  if (StringUtils.isEmpty(uploadButtonImage)) {
    uploadButton.setLabel(""String_Node_Str"");
    hiddenPanel.add((Widget)uploadTextBox.getManagedObject(),""String_Node_Str"");
    uploadTextBox.layout();
  }
 else {
    uploadButton.setImage(uploadButtonImage);
    uploadButton.setDisabledImage(uploadButtonDisabledImage);
  }
  hiddenPanel.add((Widget)uploadButton.getManagedObject(),""String_Node_Str"");
  uploadButton.layout();
  hiddenPanel.add(upload,""String_Node_Str"");
  uploadPanel.add(hiddenPanel);
  panel.add(uploadPanel);
  mainPanel.add(uploadForm);
  if (getHeight() >= 0) {
    mainPanel.setHeight(getHeight() + ""String_Node_Str"");
  }
  if (getWidth() >= 0) {
    mainPanel.setWidth(getWidth() + ""String_Node_Str"");
  }
  uploadForm.addFormHandler(new FormHandler(){
    public void onSubmit(    FormSubmitEvent event){
      if (upload.getFilename() == null) {
        try {
          GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadFailure(),new Object[]{new Throwable(""String_Node_Str"")});
          return;
        }
 catch (        XulException e) {
          e.printStackTrace();
        }
      }
    }
    public void onSubmitComplete(    FormSubmitCompleteEvent event){
      String results=event.getResults();
      try {
        if (results != null && results.indexOf(ERROR) >= 0) {
          if (results.indexOf(ERROR) + ERROR.length() < results.length()) {
            String result=results.replaceAll(""String_Node_Str"",""String_Node_Str"");
            GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadFailure(),new Object[]{new Throwable(result)});
          }
        }
 else {
          if (results != null) {
            String result=results.replaceAll(""String_Node_Str"",""String_Node_Str"");
            GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadSuccess(),new Object[]{result});
          }
 else {
            GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadFailure(),new Object[]{new Throwable(""String_Node_Str"")});
          }
        }
      }
 catch (      XulException xule) {
        xule.printStackTrace();
      }
    }
  }
);
  uploadForm.setWidth(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  mainPanel=new VerticalPanel();
  setManagedObject(mainPanel);
  super.init(srcEle,container);
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setAction(buildActionUrl(GWT.getModuleBaseURL(),srcEle.getAttribute(""String_Node_Str"")));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setOnUploadSuccess(srcEle.getAttribute(""String_Node_Str""));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setOnUploadFailure(srcEle.getAttribute(""String_Node_Str""));
  }
  uploadForm=new FormPanel();
  uploadForm.setEncoding(FormPanel.ENCODING_MULTIPART);
  uploadForm.setMethod(FormPanel.METHOD_POST);
  uploadForm.setHeight(getHeight() + ""String_Node_Str"");
  uploadForm.setWidth(getWidth() + ""String_Node_Str"");
  HorizontalPanel panel=new HorizontalPanel();
  uploadForm.setWidget(panel);
  uploadForm.setVisible(true);
  upload=new FileUpload();
  upload.setStylePrimaryName(""String_Node_Str"");
  upload.setName(""String_Node_Str"");
  upload.setVisible(true);
  upload.setHeight(getHeight() + ""String_Node_Str"");
  upload.setWidth(getWidth() + ""String_Node_Str"");
  upload.addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      setSelectedFile(upload.getFilename());
    }
  }
);
  uploadPanel=new VerticalPanel();
  String uploadButtonImage=srcEle.getAttribute(""String_Node_Str"");
  String uploadButtonDisabledImage=srcEle.getAttribute(""String_Node_Str"");
  hiddenPanel=new HTMLPanel(""String_Node_Str"");
  uploadTextBox=new GwtTextbox();
  uploadTextBox.setId(""String_Node_Str"");
  uploadTextBox.setHeight(getHeight());
  uploadTextBox.setWidth(getWidth() - 50);
  GwtButton uploadButton=new GwtButton();
  uploadButton.setId(""String_Node_Str"");
  uploadButton.setHeight(22);
  if (StringUtils.isEmpty(uploadButtonImage)) {
    uploadButton.setLabel(""String_Node_Str"");
    hiddenPanel.add((Widget)uploadTextBox.getManagedObject(),""String_Node_Str"");
    uploadTextBox.layout();
  }
 else {
    uploadButton.setImage(uploadButtonImage);
    uploadButton.setDisabledImage(uploadButtonDisabledImage);
  }
  hiddenPanel.add((Widget)uploadButton.getManagedObject(),""String_Node_Str"");
  uploadButton.layout();
  hiddenPanel.add(upload,""String_Node_Str"");
  uploadPanel.add(hiddenPanel);
  panel.add(uploadPanel);
  mainPanel.add(uploadForm);
  if (getHeight() >= 0) {
    mainPanel.setHeight(getHeight() + ""String_Node_Str"");
  }
  if (getWidth() >= 0) {
    mainPanel.setWidth(getWidth() + ""String_Node_Str"");
  }
  uploadForm.addFormHandler(new FormHandler(){
    public void onSubmit(    FormSubmitEvent event){
      if (upload.getFilename() == null) {
        try {
          GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadFailure(),new Object[]{new Throwable(""String_Node_Str"")});
          return;
        }
 catch (        XulException e) {
          e.printStackTrace();
        }
      }
    }
    public void onSubmitComplete(    FormSubmitCompleteEvent event){
      String results=event.getResults();
      try {
        if (results != null && results.indexOf(ERROR) >= 0) {
          if (results.indexOf(ERROR) + ERROR.length() < results.length()) {
            String result=results.replaceAll(""String_Node_Str"",""String_Node_Str"");
            GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadFailure(),new Object[]{new Throwable(result)});
          }
        }
 else {
          if (results != null) {
            String result=results.replaceAll(""String_Node_Str"",""String_Node_Str"");
            GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadSuccess(),new Object[]{result});
          }
 else {
            GwtFileUpload.this.getXulDomContainer().invoke(getOnUploadFailure(),new Object[]{new Throwable(""String_Node_Str"")});
          }
        }
      }
 catch (      XulException xule) {
        xule.printStackTrace();
      }
    }
  }
);
  uploadForm.setWidth(""String_Node_Str"");
}"
51841,"@Bindable public void setSelectedFile(String name){
  if (name == null || name.length() <= 0) {
    hiddenPanel.remove(upload);
    upload=new FileUpload();
    upload.setName(""String_Node_Str"");
    upload.setVisible(true);
    upload.setHeight(getHeight() + ""String_Node_Str"");
    upload.setWidth(getWidth() + ""String_Node_Str"");
    upload.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        setSelectedFile(upload.getFilename());
      }
    }
);
    hiddenPanel.add(upload,""String_Node_Str"");
  }
  uploadTextBox.setValue(name);
  firePropertyChange(""String_Node_Str"",null,name);
}","@Bindable public void setSelectedFile(String name){
  if (name == null || name.length() <= 0) {
    hiddenPanel.remove(upload);
    upload=new FileUpload();
    upload.setStylePrimaryName(""String_Node_Str"");
    upload.setName(""String_Node_Str"");
    upload.setVisible(true);
    upload.setHeight(getHeight() + ""String_Node_Str"");
    upload.setWidth(getWidth() + ""String_Node_Str"");
    upload.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        setSelectedFile(upload.getFilename());
      }
    }
);
    hiddenPanel.add(upload,""String_Node_Str"");
  }
  uploadTextBox.setValue(name);
  firePropertyChange(""String_Node_Str"",null,name);
}"
51842,"/** 
 * called once the drag is finished
 * @param nativeEvent swt event
 * @param effect drop effect, used to detemine if removing is necessary
 */
protected void onSwtDragFinished(DropEffectType effect){
  throw new UnsupportedOperationException(""String_Node_Str"" + getClass());
}","/** 
 * called once the drag is finished
 * @param effect drop effect, used to detemine if removing is necessary
 * @param event
 */
protected void onSwtDragFinished(DropEffectType effect,DropEvent event){
  throw new UnsupportedOperationException(""String_Node_Str"" + getClass());
}"
51843,"public void drop(DropTargetEvent nativeEvent){
  DropEvent event=new DropEvent();
  DataTransfer dataTransfer=new DataTransfer();
  XulSwtDndType types[]=(XulSwtDndType[])nativeEvent.data;
  SwtElement xulDndSource=null;
  try {
    if (types != null) {
      List<Object> objs=new ArrayList<Object>();
      for (int i=0; i < types.length; i++) {
        if (i == 0) {
          xulDndSource=types[i].getXulSource();
        }
        objs.add(types[i].getValue());
      }
      dataTransfer.setData(objs);
      dataTransfer.setDropEffect(lookupXulEffect(nativeEvent.detail));
    }
 else {
      nativeEvent.detail=DND.DROP_NONE;
      return;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  event.setDataTransfer(dataTransfer);
  event.setAccepted(true);
  event.setNativeEvent(nativeEvent);
  resolveDndParentAndIndex(event);
  final String method=getOndrop();
  if (method != null) {
    try {
      Document doc=getDocument();
      XulRoot window=(XulRoot)doc.getRootElement();
      final XulDomContainer con=window.getXulDomContainer();
      con.invoke(method,new Object[]{event});
    }
 catch (    XulException e) {
      logger.error(""String_Node_Str"" + method,e);
    }
  }
  if (!event.isAccepted()) {
    nativeEvent.detail=DND.DROP_NONE;
    return;
  }
  if (xulDndSource == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  xulDndSource.onSwtDragFinished(lookupXulEffect(nativeEvent.detail));
  onSwtDragDropAccepted(event);
}","public void drop(DropTargetEvent nativeEvent){
  DropEvent event=new DropEvent();
  DataTransfer dataTransfer=new DataTransfer();
  XulSwtDndType types[]=(XulSwtDndType[])nativeEvent.data;
  SwtElement xulDndSource=null;
  try {
    if (types != null) {
      List<Object> objs=new ArrayList<Object>();
      for (int i=0; i < types.length; i++) {
        if (i == 0) {
          xulDndSource=types[i].getXulSource();
        }
        objs.add(types[i].getValue());
      }
      dataTransfer.setData(objs);
      dataTransfer.setDropEffect(lookupXulEffect(nativeEvent.detail));
    }
 else {
      nativeEvent.detail=DND.DROP_NONE;
      return;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  event.setDataTransfer(dataTransfer);
  event.setAccepted(true);
  event.setNativeEvent(nativeEvent);
  resolveDndParentAndIndex(event);
  final String method=getOndrop();
  if (method != null) {
    try {
      Document doc=getDocument();
      XulRoot window=(XulRoot)doc.getRootElement();
      final XulDomContainer con=window.getXulDomContainer();
      con.invoke(method,new Object[]{event});
    }
 catch (    XulException e) {
      logger.error(""String_Node_Str"" + method,e);
    }
  }
  if (!event.isAccepted()) {
    nativeEvent.detail=DND.DROP_NONE;
    return;
  }
  if (xulDndSource == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  xulDndSource.onSwtDragFinished(lookupXulEffect(nativeEvent.detail),event);
  onSwtDragDropAccepted(event);
}"
51844,"/** 
 * this call enables drop behavior for this element. it must be called by the component after the managed swt  object has been created
 */
protected void enableDrop(){
  DropTarget target=new DropTarget(getDndObject(),DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_DEFAULT);
  target.setTransfer(new Transfer[]{SwtDndTypeTransfer.getInstance()});
  target.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent arg0){
      arg0.detail=arg0.operations;
    }
    public void dragLeave(    DropTargetEvent arg0){
    }
    public void dragOperationChanged(    DropTargetEvent arg0){
    }
    public void dragOver(    DropTargetEvent event){
      onSwtDragOver(event);
    }
    public void drop(    DropTargetEvent nativeEvent){
      DropEvent event=new DropEvent();
      DataTransfer dataTransfer=new DataTransfer();
      XulSwtDndType types[]=(XulSwtDndType[])nativeEvent.data;
      SwtElement xulDndSource=null;
      try {
        if (types != null) {
          List<Object> objs=new ArrayList<Object>();
          for (int i=0; i < types.length; i++) {
            if (i == 0) {
              xulDndSource=types[i].getXulSource();
            }
            objs.add(types[i].getValue());
          }
          dataTransfer.setData(objs);
          dataTransfer.setDropEffect(lookupXulEffect(nativeEvent.detail));
        }
 else {
          nativeEvent.detail=DND.DROP_NONE;
          return;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      event.setDataTransfer(dataTransfer);
      event.setAccepted(true);
      event.setNativeEvent(nativeEvent);
      resolveDndParentAndIndex(event);
      final String method=getOndrop();
      if (method != null) {
        try {
          Document doc=getDocument();
          XulRoot window=(XulRoot)doc.getRootElement();
          final XulDomContainer con=window.getXulDomContainer();
          con.invoke(method,new Object[]{event});
        }
 catch (        XulException e) {
          logger.error(""String_Node_Str"" + method,e);
        }
      }
      if (!event.isAccepted()) {
        nativeEvent.detail=DND.DROP_NONE;
        return;
      }
      if (xulDndSource == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      xulDndSource.onSwtDragFinished(lookupXulEffect(nativeEvent.detail));
      onSwtDragDropAccepted(event);
    }
    public void dropAccept(    DropTargetEvent arg0){
    }
  }
);
}","/** 
 * this call enables drop behavior for this element. it must be called by the component after the managed swt  object has been created
 */
protected void enableDrop(){
  DropTarget target=new DropTarget(getDndObject(),DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_DEFAULT);
  target.setTransfer(new Transfer[]{SwtDndTypeTransfer.getInstance()});
  target.addDropListener(new DropTargetListener(){
    public void dragEnter(    DropTargetEvent arg0){
      arg0.detail=arg0.operations;
    }
    public void dragLeave(    DropTargetEvent arg0){
    }
    public void dragOperationChanged(    DropTargetEvent arg0){
    }
    public void dragOver(    DropTargetEvent event){
      onSwtDragOver(event);
    }
    public void drop(    DropTargetEvent nativeEvent){
      DropEvent event=new DropEvent();
      DataTransfer dataTransfer=new DataTransfer();
      XulSwtDndType types[]=(XulSwtDndType[])nativeEvent.data;
      SwtElement xulDndSource=null;
      try {
        if (types != null) {
          List<Object> objs=new ArrayList<Object>();
          for (int i=0; i < types.length; i++) {
            if (i == 0) {
              xulDndSource=types[i].getXulSource();
            }
            objs.add(types[i].getValue());
          }
          dataTransfer.setData(objs);
          dataTransfer.setDropEffect(lookupXulEffect(nativeEvent.detail));
        }
 else {
          nativeEvent.detail=DND.DROP_NONE;
          return;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      event.setDataTransfer(dataTransfer);
      event.setAccepted(true);
      event.setNativeEvent(nativeEvent);
      resolveDndParentAndIndex(event);
      final String method=getOndrop();
      if (method != null) {
        try {
          Document doc=getDocument();
          XulRoot window=(XulRoot)doc.getRootElement();
          final XulDomContainer con=window.getXulDomContainer();
          con.invoke(method,new Object[]{event});
        }
 catch (        XulException e) {
          logger.error(""String_Node_Str"" + method,e);
        }
      }
      if (!event.isAccepted()) {
        nativeEvent.detail=DND.DROP_NONE;
        return;
      }
      if (xulDndSource == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      xulDndSource.onSwtDragFinished(lookupXulEffect(nativeEvent.detail),event);
      onSwtDragDropAccepted(event);
    }
    public void dropAccept(    DropTargetEvent arg0){
    }
  }
);
}"
51845,"@Override protected void onSwtDragFinished(DropEffectType effect){
  if (effect == DropEffectType.MOVE) {
    if (elements != null) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
 else {
      int[] indices=listBox.getSelectionIndices();
      for (int i=indices.length - 1; i >= 0; i--) {
        removeChild(getChildNodes().get(indices[i]));
      }
      listBox.remove(indices);
    }
  }
}","@Override protected void onSwtDragFinished(DropEffectType effect,DropEvent event){
  if (effect == DropEffectType.MOVE) {
    if (elements != null) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
 else {
      int[] indices=listBox.getSelectionIndices();
      for (int i=indices.length - 1; i >= 0; i--) {
        removeChild(getChildNodes().get(indices[i]));
      }
      listBox.remove(indices);
    }
  }
}"
51846,"private void removeItemFromElements(Object item){
  String method=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding());
  removeItem(elements,method,item);
}","private void removeItemFromElements(Object item,DropEvent event){
  String method=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding());
  removeItem(elements,method,item,event);
}"
51847,"@Override protected void onSwtDragFinished(DropEffectType effect){
  if (effect == DropEffectType.MOVE) {
    if (elements != null) {
      for (      Object item : cachedDndItems) {
        removeItemFromElements(item);
      }
      cachedDndItems=null;
      setElements(elements);
    }
 else {
      if (isHierarchical()) {
        tree.remove(tree.getSelection());
      }
 else {
        table.remove(table.getSelection());
      }
    }
  }
}","@Override protected void onSwtDragFinished(DropEffectType effect,DropEvent event){
  if (effect == DropEffectType.MOVE) {
    if (elements != null) {
      for (      Object item : cachedDndItems) {
        removeItemFromElements(item,event);
      }
      cachedDndItems=null;
      setElements(elements);
    }
 else {
      if (isHierarchical()) {
        tree.remove(tree.getSelection());
      }
 else {
        table.remove(table.getSelection());
      }
    }
  }
}"
51848,"private void removeItem(Object parent,String childrenMethodProperty,Object toRemove){
  Collection children=getChildCollection(parent,childrenMethodProperty);
  if (children == null) {
    return;
  }
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    Object next=iter.next();
    if (next == toRemove) {
      children.remove(toRemove);
      return;
    }
    removeItem(next,childrenMethodProperty,toRemove);
  }
}","private void removeItem(Object parent,String childrenMethodProperty,Object toRemove,DropEvent event){
  Collection children=getChildCollection(parent,childrenMethodProperty);
  if (children == null) {
    return;
  }
  Iterator iter=children.iterator();
  int pos=0;
  while (iter.hasNext()) {
    Object next=iter.next();
    if (next == toRemove) {
      if (event.getDropParent() == children && event.getDropIndex() > pos) {
        event.setDropIndex(event.getDropIndex() - 1);
      }
      children.remove(toRemove);
      return;
    }
    removeItem(next,childrenMethodProperty,toRemove,event);
    pos++;
  }
}"
51849,"@Bindable public <T>void setElements(Collection<T> elements){
  try {
    this.elements=elements;
    suppressEvents=true;
    prevSelectionPos=-1;
    this.getRootChildren().removeAll();
    for (    Binding b : expandBindings) {
      b.destroyBindings();
    }
    this.expandBindings.clear();
    for (    TreeItemDropController d : this.dropHandlers) {
      XulDragController.getInstance().unregisterDropController(d);
    }
    dropHandlers.clear();
    if (elements == null || elements.size() == 0) {
      suppressEvents=false;
      updateUI();
      return;
    }
    try {
      if (table != null) {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          int colSize=this.getColumns().getChildNodes().size();
          for (int x=0; x < colSize; x++) {
            XulComponent col=this.getColumns().getColumn(x);
            XulTreeCol column=((XulTreeCol)col);
            final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
            addBindings(column,(GwtTreeCell)cell,o);
            row.addCell(cell);
          }
        }
      }
 else {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          ((XulTreeItem)row.getParent()).setBoundObject(o);
          addTreeChild(o,row);
        }
      }
    }
 catch (    XulException e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
catch (    Exception e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    suppressEvents=false;
    this.clearSelection();
    updateUI();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
}","@Bindable public <T>void setElements(Collection<T> elements){
  try {
    this.elements=elements;
    suppressEvents=true;
    prevSelectionPos=-1;
    if (this.getRootChildren() != null) {
      this.getRootChildren().removeAll();
    }
    this.elements=elements;
    for (    Binding b : expandBindings) {
      b.destroyBindings();
    }
    this.expandBindings.clear();
    for (    TreeItemDropController d : this.dropHandlers) {
      XulDragController.getInstance().unregisterDropController(d);
    }
    dropHandlers.clear();
    if (elements == null || elements.size() == 0) {
      suppressEvents=false;
      updateUI();
      return;
    }
    try {
      if (table != null) {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          int colSize=this.getColumns().getChildNodes().size();
          for (int x=0; x < colSize; x++) {
            XulComponent col=this.getColumns().getColumn(x);
            XulTreeCol column=((XulTreeCol)col);
            final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
            addBindings(column,(GwtTreeCell)cell,o);
            row.addCell(cell);
          }
        }
      }
 else {
        for (        T o : elements) {
          XulTreeRow row=this.getRootChildren().addNewRow();
          ((XulTreeItem)row.getParent()).setBoundObject(o);
          addTreeChild(o,row);
        }
      }
    }
 catch (    XulException e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
catch (    Exception e) {
      Window.alert(""String_Node_Str"" + e);
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    suppressEvents=false;
    this.clearSelection();
    updateUI();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
}"
51850,"private void populateTable(){
  int rowCount=getRootChildren().getItemCount();
  colCollection=getColumns().getChildNodes();
  int colCount=colCollection.size();
  currentData=new Object[rowCount][colCount];
  for (int i=0; i < rowCount; i++) {
    for (int j=0; j < colCount; j++) {
      currentData[i][j]=getColumnEditor(j,i);
    }
  }
  table.populateTable(currentData);
  int totalFlex=0;
  boolean allFlexing=true;
  for (int i=0; i < colCount; i++) {
    XulTreeCol col=(XulTreeCol)colCollection.get(i);
    String sortDirection=col.getSortDirection();
    if (col.isSortActive()) {
      isSortable=true;
      table.setSortingEnabled(true);
      table.sortColumn(i,sortDirection != null && sortDirection.equals(""String_Node_Str"") ? true : false);
    }
    int fx=colCollection.get(i).getFlex();
    totalFlex+=fx;
    if (fx == 0) {
      allFlexing=false;
    }
  }
  if (isSortable) {
    for (int i=0; i < colCount; i++) {
      table.setColumnSortable(i,true);
    }
  }
  if (totalFlex > 0) {
    table.fillWidth();
  }
 else {
    table.noFill();
  }
  if (allFlexing) {
    table.suppressHorizontalScrolling();
  }
  colCollection=new ArrayList<XulComponent>();
  if (this.selectedRows != null && this.selectedRows.length > 0) {
    for (int i=0; i < this.selectedRows.length; i++) {
      int idx=this.selectedRows[i];
      if (idx > -1 && idx < currentData.length) {
        table.selectRow(idx);
      }
    }
  }
}","private void populateTable(){
  int rowCount=getRootChildren().getItemCount();
  colCollection=getColumns().getChildNodes();
  int colCount=colCollection.size();
  currentData=new Object[rowCount][colCount];
  for (int i=0; i < rowCount; i++) {
    for (int j=0; j < colCount; j++) {
      currentData[i][j]=getColumnEditor(j,i);
    }
  }
  table.populateTable(currentData,elements);
  int totalFlex=0;
  boolean allFlexing=true;
  for (int i=0; i < colCount; i++) {
    XulTreeCol col=(XulTreeCol)colCollection.get(i);
    String sortDirection=col.getSortDirection();
    if (col.isSortActive()) {
      isSortable=true;
      table.setSortingEnabled(true);
      table.sortColumn(i,sortDirection != null && sortDirection.equals(""String_Node_Str"") ? true : false);
    }
    int fx=colCollection.get(i).getFlex();
    totalFlex+=fx;
    if (fx == 0) {
      allFlexing=false;
    }
  }
  if (isSortable) {
    for (int i=0; i < colCount; i++) {
      table.setColumnSortable(i,true);
    }
  }
  if (totalFlex > 0) {
    table.fillWidth();
  }
 else {
    table.noFill();
  }
  if (allFlexing) {
    table.suppressHorizontalScrolling();
  }
  colCollection=new ArrayList<XulComponent>();
  if (this.selectedRows != null && this.selectedRows.length > 0) {
    for (int i=0; i < this.selectedRows.length; i++) {
      int idx=this.selectedRows[i];
      if (idx > -1 && idx < currentData.length) {
        table.selectRow(idx);
      }
    }
  }
}"
51851,"public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setOnselect(srcEle.getAttribute(""String_Node_Str""));
  setOnedit(srcEle.getAttribute(""String_Node_Str""));
  setSeltype(srcEle.getAttribute(""String_Node_Str""));
  setOndrop(srcEle.getAttribute(""String_Node_Str""));
  setOndrag(srcEle.getAttribute(""String_Node_Str""));
  setDrageffect(srcEle.getAttribute(""String_Node_Str""));
  setDropvetoer(srcEle.getAttribute(""String_Node_Str""));
  if (StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str"")) == false) {
    this.setShowalleditcontrols(srcEle.getAttribute(""String_Node_Str"").equals(""String_Node_Str""));
  }
  this.setEditable(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  this.domContainer=container;
}","public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setOnselect(srcEle.getAttribute(""String_Node_Str""));
  setOnedit(srcEle.getAttribute(""String_Node_Str""));
  setSeltype(srcEle.getAttribute(""String_Node_Str""));
  if (StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str"")) == false) {
    setOndrop(srcEle.getAttribute(""String_Node_Str""));
  }
  if (StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str"")) == false) {
    setOndrag(srcEle.getAttribute(""String_Node_Str""));
  }
  if (StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str"")) == false) {
    setDrageffect(srcEle.getAttribute(""String_Node_Str""));
  }
  setDropvetoer(srcEle.getAttribute(""String_Node_Str""));
  if (StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str"")) == false) {
    this.setShowalleditcontrols(srcEle.getAttribute(""String_Node_Str"").equals(""String_Node_Str""));
  }
  this.setEditable(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  this.domContainer=container;
}"
51852,"@Bindable public void setDisabled(boolean dis){
  this.disabled=dis;
  if (button != null) {
    if (dis) {
      button.addStyleDependentName(""String_Node_Str"");
    }
 else {
      button.addStyleDependentName(""String_Node_Str"");
    }
  }
 else   if (imageButton != null) {
    imageButton.setEnabled(!dis);
  }
 else   if (customButton != null) {
    customButton.setEnabled(!dis);
  }
}","@Bindable public void setDisabled(boolean dis){
  this.disabled=dis;
  if (button != null) {
    if (dis) {
      button.addStyleDependentName(""String_Node_Str"");
    }
 else {
      button.removeStyleDependentName(""String_Node_Str"");
    }
  }
 else   if (imageButton != null) {
    imageButton.setEnabled(!dis);
  }
 else   if (customButton != null) {
    customButton.setEnabled(!dis);
  }
}"
51853,"public void onClick(ClickEvent event){
  try {
    setChecked(radioButton.getValue());
    if (isCustomValue() && isChecked()) {
      customValueTextBox.setEnabled(true);
    }
    if (command != null && command.length() > 0) {
      GwtRadio.this.getXulDomContainer().invoke(command,new Object[]{});
    }
  }
 catch (  XulException e) {
    e.printStackTrace();
  }
}","public void onClick(ClickEvent event){
  try {
    fireChangedEvents(radioButton.getValue());
    if (isCustomValue() && isChecked()) {
      customValueTextBox.setEnabled(true);
    }
    if (command != null && command.length() > 0) {
      GwtRadio.this.getXulDomContainer().invoke(command,new Object[]{});
    }
  }
 catch (  XulException e) {
    e.printStackTrace();
  }
}"
51854,"@Bindable public void setChecked(boolean checked){
  boolean previousVal=this.checked;
  if (checked != radioButton.getValue()) {
    radioButton.setValue(checked);
  }
  this.checked=checked;
  this.firePropertyChange(""String_Node_Str"",null,checked);
}","@Bindable public void setChecked(boolean checked){
  System.out.println(""String_Node_Str"" + checked + ""String_Node_Str""+ ((checked != this.checked) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ((checked != radioButton.getValue()) ? ""String_Node_Str"" : ""String_Node_Str""));
  if (checked != radioButton.getValue()) {
    radioButton.setValue(checked,false);
  }
  fireChangedEvents(checked);
}"
51855,"public GwtRadio(){
  super(ELEMENT_NAME);
  radioContainer=new HorizontalPanel();
  radioContainer.setSpacing(0);
  customValueTextBox=new TextBox();
  customValueTextBox.setEnabled(false);
  String id=""String_Node_Str"";
  if (currentGroup != null) {
    id=currentGroup.getId();
  }
  radioButton=new RadioButton(id);
  radioContainer.add(radioButton);
  setManagedObject(radioContainer);
  radioContainer.setStylePrimaryName(""String_Node_Str"");
  radioButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      try {
        setChecked(radioButton.getValue());
        if (isCustomValue() && isChecked()) {
          customValueTextBox.setEnabled(true);
        }
        if (command != null && command.length() > 0) {
          GwtRadio.this.getXulDomContainer().invoke(command,new Object[]{});
        }
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
}","public GwtRadio(){
  super(ELEMENT_NAME);
  radioContainer=new HorizontalPanel();
  radioContainer.setSpacing(0);
  customValueTextBox=new TextBox();
  customValueTextBox.setEnabled(false);
  String id=""String_Node_Str"";
  if (currentGroup != null) {
    id=currentGroup.getId();
  }
  radioButton=new RadioButton(id);
  radioContainer.add(radioButton);
  setManagedObject(radioContainer);
  radioContainer.setStylePrimaryName(""String_Node_Str"");
  radioButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      try {
        fireChangedEvents(radioButton.getValue());
        if (isCustomValue() && isChecked()) {
          customValueTextBox.setEnabled(true);
        }
        if (command != null && command.length() > 0) {
          GwtRadio.this.getXulDomContainer().invoke(command,new Object[]{});
        }
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
}"
51856,"private Constructor<?> getContructor(String className) throws XulException {
  Constructor<?> con=constructorCache.get(className);
  if (con != null) {
    return con;
  }
  Class<?> c=null;
  for (  ClassLoader loader : classloaders) {
    try {
      c=loader.loadClass(className);
    }
 catch (    ClassNotFoundException e) {
      throw new XulException(e);
    }
  }
  try {
    Constructor<?> constructor=c.getConstructor(new Class[]{Element.class,XulComponent.class,XulDomContainer.class,String.class});
    constructorCache.put(className,constructor);
    return constructor;
  }
 catch (  NoSuchMethodException e1) {
    throw new XulException(e1);
  }
}","private Constructor<?> getContructor(String className) throws XulException {
  Constructor<?> con=constructorCache.get(className);
  if (con != null) {
    return con;
  }
  Class<?> c=null;
  Throwable lastException=null;
  for (  ClassLoader loader : classloaders) {
    try {
      c=loader.loadClass(className);
      if (c != null) {
        break;
      }
    }
 catch (    ClassNotFoundException e) {
      lastException=e;
    }
  }
  if (c == null && lastException != null) {
    throw new XulException(lastException);
  }
  try {
    Constructor<?> constructor=c.getConstructor(new Class[]{Element.class,XulComponent.class,XulDomContainer.class,String.class});
    constructorCache.put(className,constructor);
    return constructor;
  }
 catch (  NoSuchMethodException e1) {
    throw new XulException(e1);
  }
}"
51857,"@Override public Panel getButtonPanel(){
  boolean ignoreIndividualButtonAlign=false;
  String buttonalign=getButtonalign();
  if (!StringUtils.isEmpty(buttonalign)) {
    ignoreIndividualButtonAlign=true;
  }
  HorizontalPanel buttonPanel=new HorizontalPanel();
  HorizontalPanel leftButtonPanel=new HorizontalPanel();
  HorizontalPanel centerButtonPanel=new HorizontalPanel();
  HorizontalPanel rightButtonPanel=new HorizontalPanel();
  rightButtonPanel.setStylePrimaryName(""String_Node_Str"");
  centerButtonPanel.setStylePrimaryName(""String_Node_Str"");
  leftButtonPanel.setStylePrimaryName(""String_Node_Str"");
  for (  XulButton btn : dialogButtons) {
    this.removeChild(btn);
    Widget widget=(Widget)btn.getManagedObject();
    if (!ignoreIndividualButtonAlign) {
      String align=btn.getAlign();
      if (!StringUtils.isEmpty(align)) {
        if (""String_Node_Str"".equals(align)) {
          centerButtonPanel.add(widget);
        }
 else         if (""String_Node_Str"".equals(align)) {
          leftButtonPanel.add(widget);
        }
 else {
          rightButtonPanel.add(widget);
        }
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
 else {
      if (""String_Node_Str"".equals(buttonalign)) {
        centerButtonPanel.add(widget);
      }
 else       if (""String_Node_Str"".equals(buttonalign)) {
        leftButtonPanel.add(widget);
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
  }
  buttonPanel.add(leftButtonPanel);
  buttonPanel.setCellHorizontalAlignment(leftButtonPanel,HorizontalPanel.ALIGN_LEFT);
  buttonPanel.add(centerButtonPanel);
  buttonPanel.setCellHorizontalAlignment(centerButtonPanel,HorizontalPanel.ALIGN_CENTER);
  buttonPanel.setCellWidth(centerButtonPanel,""String_Node_Str"");
  buttonPanel.add(rightButtonPanel);
  buttonPanel.setCellHorizontalAlignment(rightButtonPanel,HorizontalPanel.ALIGN_RIGHT);
  return buttonPanel;
}","@Override public Panel getButtonPanel(){
  boolean ignoreIndividualButtonAlign=false;
  String buttonalign=getButtonalign();
  if (!StringUtils.isEmpty(buttonalign)) {
    ignoreIndividualButtonAlign=true;
  }
  HorizontalPanel buttonPanel=new HorizontalPanel();
  HorizontalPanel leftButtonPanel=new HorizontalPanel();
  HorizontalPanel centerButtonPanel=new HorizontalPanel();
  HorizontalPanel rightButtonPanel=new HorizontalPanel();
  rightButtonPanel.setStylePrimaryName(""String_Node_Str"");
  centerButtonPanel.setStylePrimaryName(""String_Node_Str"");
  leftButtonPanel.setStylePrimaryName(""String_Node_Str"");
  for (  XulButton btn : dialogButtons) {
    this.removeChild(btn);
    Widget widget=(Widget)btn.getManagedObject();
    if (!ignoreIndividualButtonAlign) {
      String align=btn.getAlign();
      if (!StringUtils.isEmpty(align)) {
        if (""String_Node_Str"".equals(align)) {
          centerButtonPanel.add(widget);
        }
 else         if (""String_Node_Str"".equals(align)) {
          leftButtonPanel.add(widget);
        }
 else {
          rightButtonPanel.add(widget);
        }
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
 else {
      if (""String_Node_Str"".equals(buttonalign)) {
        centerButtonPanel.add(widget);
      }
 else       if (""String_Node_Str"".equals(buttonalign)) {
        leftButtonPanel.add(widget);
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
  }
  buttonPanel.add(leftButtonPanel);
  buttonPanel.setCellHorizontalAlignment(leftButtonPanel,HorizontalPanel.ALIGN_LEFT);
  buttonPanel.add(centerButtonPanel);
  buttonPanel.setCellHorizontalAlignment(centerButtonPanel,HorizontalPanel.ALIGN_CENTER);
  buttonPanel.setCellWidth(centerButtonPanel,""String_Node_Str"");
  buttonPanel.add(rightButtonPanel);
  buttonPanel.setCellHorizontalAlignment(rightButtonPanel,HorizontalPanel.ALIGN_RIGHT);
  buttonPanel.setWidth(""String_Node_Str"");
  return buttonPanel;
}"
51858,"private void setupGrid(){
  if (grid == null) {
    grid=new Grid();
    sp=new ScrollPanel(grid);
    SimplePanel div=new SimplePanel();
    div.add(sp);
    container=div;
    setManagedObject(container);
  }
  if (getFlex() > 0) {
    grid.setHeight(""String_Node_Str"");
    grid.setWidth(""String_Node_Str"");
    sp.setHeight(""String_Node_Str"");
    sp.setWidth(""String_Node_Str"");
  }
 else   if (getWidth() > 0) {
    sp.setWidth(getWidth() + ""String_Node_Str"");
    sp.setHeight(getHeight() + ""String_Node_Str"");
  }
  grid.setCellSpacing(1);
  updateUI();
}","private void setupGrid(){
  if (grid == null) {
    grid=new Grid();
    sp=new ScrollPanel(grid);
    SimplePanel div=new SimplePanel();
    div.add(sp);
    container=div;
    setManagedObject(container);
  }
  if (getFlex() > 0) {
    grid.setHeight(""String_Node_Str"");
    grid.setWidth(""String_Node_Str"");
    sp.setHeight(""String_Node_Str"");
    sp.setWidth(""String_Node_Str"");
  }
 else   if (getWidth() > 0) {
    sp.setWidth(getWidth() + ""String_Node_Str"");
    sp.setHeight(getHeight() + ""String_Node_Str"");
  }
  grid.setCellSpacing(1);
  if (getPadding() > 0) {
    grid.setCellPadding(getPadding());
  }
  updateUI();
}"
51859,"public void layout(){
  if (this instanceof XulContainer == false) {
    return;
  }
  setVisible(isVisible());
  if (this.container != null) {
    this.container.clear();
  }
  Object w=getManagedObject();
  double totalFlex=0.0;
  for (  XulComponent comp : this.getChildNodes()) {
    if (comp.getManagedObject() == null) {
      continue;
    }
    if (comp.getFlex() > 0 && comp.isVisible()) {
      flexLayout=true;
      totalFlex+=comp.getFlex();
    }
  }
  List<XulComponent> nodes=this.getChildNodes();
  XulContainer thisContainer=(XulContainer)this;
  Align alignment=(StringUtils.isEmpty(thisContainer.getAlign()) == false) ? Align.valueOf(thisContainer.getAlign().toUpperCase()) : null;
  if (!flexLayout && StringUtils.isEmpty(thisContainer.getAlign()) == false) {
    SimplePanel fillerPanel=new SimplePanel();
switch (alignment) {
case END:
      container.add(fillerPanel);
    if (this.getOrientation() == Orient.VERTICAL) {
      ((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
    }
 else {
      ((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
    }
  break;
case CENTER:
container.add(fillerPanel);
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
}
 else {
((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
}
break;
}
}
for (int i=0; i < children.size(); i++) {
XulComponent comp=nodes.get(i);
Object wrappedWidget=comp.getManagedObject();
if (wrappedWidget == null || !(wrappedWidget instanceof Widget)) {
continue;
}
Widget component=(Widget)wrappedWidget;
component.getElement().setId(comp.getId());
if (component != null) {
container.add(component);
}
if (flexLayout && component != null) {
int componentFlex=comp.getFlex();
if (componentFlex > 0) {
String percentage=Math.round((componentFlex / totalFlex) * 100) + ""String_Node_Str"";
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(component,percentage);
((VerticalPanel)container).setCellWidth(component,""String_Node_Str"");
if (comp.getFlex() > 0) {
component.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
 else {
((HorizontalPanel)container).setCellWidth(component,percentage);
((HorizontalPanel)container).setCellHeight(component,""String_Node_Str"");
if (comp.getFlex() > 0) {
component.setWidth(""String_Node_Str"");
}
}
}
}
Style style=component.getElement().getStyle();
if (this.getOrientation() == Orient.VERTICAL) {
if (comp.getWidth() > 0) {
style.setProperty(""String_Node_Str"",comp.getWidth() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
if (comp.getHeight() > 0) {
style.setProperty(""String_Node_Str"",comp.getHeight() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
 else {
if (comp.getHeight() > 0) {
style.setProperty(""String_Node_Str"",comp.getHeight() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
if (comp.getWidth() > 0) {
style.setProperty(""String_Node_Str"",comp.getWidth() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
if (i + 1 == children.size() && !flexLayout) {
}
}
if (!flexLayout && StringUtils.isEmpty(thisContainer.getAlign()) == false) {
SimplePanel fillerPanel=new SimplePanel();
switch (alignment) {
case START:
container.add(fillerPanel);
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
}
 else {
((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
}
break;
case CENTER:
container.add(fillerPanel);
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
}
 else {
((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
}
break;
case END:
break;
}
}
initialized=true;
}","public void layout(){
  if (this instanceof XulContainer == false) {
    return;
  }
  setVisible(isVisible());
  if (this.container != null) {
    this.container.clear();
  }
  Object w=getManagedObject();
  double totalFlex=0.0;
  for (  XulComponent comp : this.getChildNodes()) {
    if (comp.getManagedObject() == null) {
      continue;
    }
    if (comp.getFlex() > 0 && comp.isVisible()) {
      flexLayout=true;
      totalFlex+=comp.getFlex();
    }
  }
  List<XulComponent> nodes=this.getChildNodes();
  XulContainer thisContainer=(XulContainer)this;
  Align alignment=(StringUtils.isEmpty(thisContainer.getAlign()) == false) ? Align.valueOf(thisContainer.getAlign().toUpperCase()) : null;
  if (!flexLayout && StringUtils.isEmpty(thisContainer.getAlign()) == false) {
    SimplePanel fillerPanel=new SimplePanel();
switch (alignment) {
case END:
      container.add(fillerPanel);
    if (this.getOrientation() == Orient.VERTICAL) {
      ((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
    }
 else {
      ((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
    }
  break;
case CENTER:
container.add(fillerPanel);
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
}
 else {
((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
}
break;
}
}
for (int i=0; i < children.size(); i++) {
XulComponent comp=nodes.get(i);
Object wrappedWidget=comp.getManagedObject();
if (wrappedWidget == null || !(wrappedWidget instanceof Widget)) {
continue;
}
Widget component=(Widget)wrappedWidget;
component.getElement().setId(comp.getId());
if (component != null) {
container.add(component);
}
if (flexLayout && component != null) {
int componentFlex=comp.getFlex();
if (componentFlex > 0) {
String percentage=Math.round((componentFlex / totalFlex) * 100) + ""String_Node_Str"";
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(component,percentage);
((VerticalPanel)container).setCellWidth(component,""String_Node_Str"");
if (comp.getFlex() > 0) {
component.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
 else {
((HorizontalPanel)container).setCellWidth(component,percentage);
((HorizontalPanel)container).setCellHeight(component,""String_Node_Str"");
if (comp.getFlex() > 0) {
component.setWidth(""String_Node_Str"");
}
}
}
}
Style style=component.getElement().getStyle();
if (this.getOrientation() == Orient.VERTICAL) {
if (comp.getWidth() > 0) {
style.setProperty(""String_Node_Str"",comp.getWidth() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
if (comp.getHeight() > 0) {
style.setProperty(""String_Node_Str"",comp.getHeight() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
 else {
if (comp.getHeight() > 0) {
style.setProperty(""String_Node_Str"",comp.getHeight() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
if (comp.getWidth() > 0) {
style.setProperty(""String_Node_Str"",comp.getWidth() + ""String_Node_Str"");
}
 else {
style.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
if (i + 1 == children.size() && !flexLayout) {
}
}
if (!flexLayout && container != null) {
SimplePanel fillerPanel=new SimplePanel();
if (alignment == null) {
alignment=Align.START;
}
switch (alignment) {
case START:
container.add(fillerPanel);
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
}
 else {
((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
}
break;
case CENTER:
container.add(fillerPanel);
if (this.getOrientation() == Orient.VERTICAL) {
((VerticalPanel)container).setCellHeight(fillerPanel,""String_Node_Str"");
}
 else {
((HorizontalPanel)container).setCellWidth(fillerPanel,""String_Node_Str"");
}
break;
case END:
break;
}
}
initialized=true;
}"
51860,"@Override public Panel getButtonPanel(){
  boolean ignoreIndividualButtonAlign=false;
  String buttonalign=getButtonalign();
  if (!StringUtils.isEmpty(buttonalign)) {
    ignoreIndividualButtonAlign=true;
  }
  HorizontalPanel buttonPanel=new HorizontalPanel();
  HorizontalPanel leftButtonPanel=new HorizontalPanel();
  HorizontalPanel centerButtonPanel=new HorizontalPanel();
  HorizontalPanel rightButtonPanel=new HorizontalPanel();
  rightButtonPanel.setSpacing(3);
  centerButtonPanel.setSpacing(3);
  leftButtonPanel.setSpacing(3);
  for (  XulButton btn : dialogButtons) {
    this.removeChild(btn);
    Widget widget=(Widget)btn.getManagedObject();
    if (!ignoreIndividualButtonAlign) {
      String align=btn.getAlign();
      if (!StringUtils.isEmpty(align)) {
        if (""String_Node_Str"".equals(align)) {
          centerButtonPanel.add(widget);
        }
 else         if (""String_Node_Str"".equals(align)) {
          leftButtonPanel.add(widget);
        }
 else {
          rightButtonPanel.add(widget);
        }
      }
    }
 else {
      if (""String_Node_Str"".equals(buttonalign)) {
        centerButtonPanel.add(widget);
      }
 else       if (""String_Node_Str"".equals(buttonalign)) {
        leftButtonPanel.add(widget);
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
  }
  buttonPanel.add(leftButtonPanel);
  buttonPanel.setCellHorizontalAlignment(leftButtonPanel,HorizontalPanel.ALIGN_LEFT);
  buttonPanel.add(centerButtonPanel);
  buttonPanel.setCellHorizontalAlignment(centerButtonPanel,HorizontalPanel.ALIGN_CENTER);
  buttonPanel.setCellWidth(centerButtonPanel,""String_Node_Str"");
  buttonPanel.add(rightButtonPanel);
  buttonPanel.setCellHorizontalAlignment(rightButtonPanel,HorizontalPanel.ALIGN_RIGHT);
  return buttonPanel;
}","@Override public Panel getButtonPanel(){
  boolean ignoreIndividualButtonAlign=false;
  String buttonalign=getButtonalign();
  if (!StringUtils.isEmpty(buttonalign)) {
    ignoreIndividualButtonAlign=true;
  }
  HorizontalPanel buttonPanel=new HorizontalPanel();
  HorizontalPanel leftButtonPanel=new HorizontalPanel();
  HorizontalPanel centerButtonPanel=new HorizontalPanel();
  HorizontalPanel rightButtonPanel=new HorizontalPanel();
  rightButtonPanel.setSpacing(3);
  centerButtonPanel.setSpacing(3);
  leftButtonPanel.setSpacing(3);
  for (  XulButton btn : dialogButtons) {
    this.removeChild(btn);
    Widget widget=(Widget)btn.getManagedObject();
    if (!ignoreIndividualButtonAlign) {
      String align=btn.getAlign();
      if (!StringUtils.isEmpty(align)) {
        if (""String_Node_Str"".equals(align)) {
          centerButtonPanel.add(widget);
        }
 else         if (""String_Node_Str"".equals(align)) {
          leftButtonPanel.add(widget);
        }
 else {
          rightButtonPanel.add(widget);
        }
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
 else {
      if (""String_Node_Str"".equals(buttonalign)) {
        centerButtonPanel.add(widget);
      }
 else       if (""String_Node_Str"".equals(buttonalign)) {
        leftButtonPanel.add(widget);
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
  }
  buttonPanel.add(leftButtonPanel);
  buttonPanel.setCellHorizontalAlignment(leftButtonPanel,HorizontalPanel.ALIGN_LEFT);
  buttonPanel.add(centerButtonPanel);
  buttonPanel.setCellHorizontalAlignment(centerButtonPanel,HorizontalPanel.ALIGN_CENTER);
  buttonPanel.setCellWidth(centerButtonPanel,""String_Node_Str"");
  buttonPanel.add(rightButtonPanel);
  buttonPanel.setCellHorizontalAlignment(rightButtonPanel,HorizontalPanel.ALIGN_RIGHT);
  return buttonPanel;
}"
51861,"public int getSelectedIndex(){
  return container.getVisibleWidget();
}","@Bindable public int getSelectedIndex(){
  return container.getVisibleWidget();
}"
51862,"public void setSelectedIndex(int index){
  int previousVal=selectedIndex;
  if (index < container.getWidgetCount() && index >= 0) {
    container.showWidget(index);
    Widget card=container.getWidget(index);
    notifyOnShow(this);
  }
  selectedIndex=index;
  this.firePropertyChange(""String_Node_Str"",previousVal,index);
}","@Bindable public void setSelectedIndex(int index){
  int previousVal=selectedIndex;
  if (index < container.getWidgetCount() && index >= 0) {
    container.showWidget(index);
    Widget card=container.getWidget(index);
    notifyOnShow(this);
  }
  selectedIndex=index;
  this.firePropertyChange(""String_Node_Str"",previousVal,index);
}"
51863,"@Override public void setPopup(Menu m){
  final Control control;
  if (isHierarchical()) {
    control=tree.getControl();
  }
 else {
    control=table.getControl();
  }
  control.setMenu(m);
}","@Override public void setPopup(final Menu menu){
  final Control control;
  if (isHierarchical()) {
    control=tree.getControl();
  }
 else {
    control=table.getControl();
  }
  control.addListener(SWT.MenuDetect,new Listener(){
    public void handleEvent(    Event evt){
      Point pt=control.getDisplay().map(control,null,new Point(evt.x,evt.y));
      menu.setLocation(evt.x,evt.y);
      menu.setVisible(true);
    }
  }
);
}"
51864,"public void show(boolean force){
  if ((force) || (!buttonsCreated)) {
    setButtons();
  }
  isDialogHidden=false;
  dialog.getShell().setText(title);
  if (this.appIcon == null) {
    applyParentShellIcon();
  }
  if ((height > 0) && (width > 0)) {
    dialog.setHeight(height);
    dialog.setWidth(width);
  }
  dialog.resizeBounds();
  if (pack) {
    dialog.getShell().pack();
  }
  notifyListeners(XulRoot.EVENT_ON_LOAD);
  returnCode=dialog.open();
}","public void show(boolean force){
  if ((force) || (!buttonsCreated)) {
    setButtons();
  }
  isDialogHidden=false;
  dialog.getShell().setText(title);
  if (this.appIcon == null) {
    applyParentShellIcon();
  }
  if ((height > 0) && (width > 0)) {
    dialog.setHeight(height);
    dialog.setWidth(width);
  }
  dialog.resizeBounds();
  if (pack) {
    dialog.getShell().pack();
  }
  dialog.getMainArea().layout(true,true);
  notifyListeners(XulRoot.EVENT_ON_LOAD);
  returnCode=dialog.open();
}"
51865,"private BasicDialog createDialog(){
  final BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),true){
    @Override protected void handleShellCloseEvent(){
      hide();
    }
  }
;
  newDialog.getShell().setBackgroundMode(SWT.INHERIT_DEFAULT);
  if (StringUtils.isNotEmpty(this.appIcon)) {
    setAppicon(this.appIcon);
  }
 else   if (possibleParent != null) {
    newDialog.getShell().setImage(((Shell)possibleParent).getImage());
  }
  return newDialog;
}","private BasicDialog createDialog(){
  final BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),true){
    @Override protected void handleShellCloseEvent(){
      hide();
    }
  }
;
  newDialog.getShell().setBackgroundMode(SWT.INHERIT_DEFAULT);
  if (StringUtils.isNotEmpty(this.appIcon)) {
    setAppicon(this.appIcon);
  }
 else   if (possibleParent != null && possibleParent.isDisposed() == false) {
    newDialog.getShell().setImage(((Shell)possibleParent).getImage());
  }
  return newDialog;
}"
51866,"protected void removeButton(String button){
  String bName=button.trim().toUpperCase();
  if (activeDialogButtons.containsKey(bName)) {
    SwtButton b=activeDialogButtons.get(bName);
    Button swtB=(Button)b.getManagedObject();
    if (!swtB.isDisposed()) {
      swtB.dispose();
    }
    removeChild(b);
    activeDialogButtons.remove(bName);
  }
}","protected void removeButton(String button){
  String bName=button.trim().toUpperCase();
  if (activeDialogButtons.containsKey(bName)) {
    SwtButton b=activeDialogButtons.get(bName);
    Button swtB=(Button)b.getManagedObject();
    if (!swtB.isDisposed()) {
      swtB.dispose();
    }
    activeDialogButtons.remove(bName);
    removeChild(b);
  }
}"
51867,"public <T>void setElements(Collection<T> elements){
  int scrollPos=-1;
  if (this.isHierarchical) {
    if (isPreserveexpandedstate()) {
      cacheExpandedState();
    }
    scrollPos=tree.getTree().getVerticalBar().getSelection();
  }
  destroyPreviousBindings();
  this.elements=elements;
  this.getRootChildren().removeAll();
  if (elements == null) {
    update();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
    return;
  }
  try {
    if (this.isHierarchical == false) {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        ((XulTreeItem)row.getParent()).setBoundObject(o);
        for (int x=0; x < this.getColumns().getChildNodes().size(); x++) {
          XulComponent col=this.getColumns().getColumn(x);
          final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
          XulTreeCol column=(XulTreeCol)col;
          for (          InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
            logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
            String colType=column.getType();
            if (StringUtils.isEmpty(colType) == false && colType.equals(""String_Node_Str"")) {
              colType=extractDynamicColType(o,x);
            }
            if ((colType.equalsIgnoreCase(""String_Node_Str"") || colType.equalsIgnoreCase(""String_Node_Str"")) && column.getCombobinding() != null) {
              DefaultBinding binding=new DefaultBinding(o,column.getCombobinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setBindingType(Binding.Type.ONE_WAY);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              binding=new DefaultBinding(o,((XulTreeCol)col).getBinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setConversion(new BindingConvertor<Object,Integer>(){
                @Override public Integer sourceToTarget(                Object value){
                  int index=((Vector)cell.getValue()).indexOf(value);
                  return index > -1 ? index : 0;
                }
                @Override public Object targetToSource(                Integer value){
                  return ((Vector)cell.getValue()).get(value);
                }
              }
);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              if (colType.equalsIgnoreCase(""String_Node_Str"")) {
                binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
 else {
                  binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
                }
                domContainer.addBinding(binding);
              }
            }
 else             if (colType.equalsIgnoreCase(""String_Node_Str"")) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
 else {
                cell.setLabel(o.toString());
              }
            }
          }
          if (column.getDisabledbinding() != null) {
            String prop=column.getDisabledbinding();
            DefaultBinding bind=new DefaultBinding(o,column.getDisabledbinding(),cell,""String_Node_Str"");
            elementBindings.add(bind);
            bind.setBindingType(Binding.Type.ONE_WAY);
            domContainer.addBinding(bind);
            bind.fireSourceChanged();
          }
          Method imageMethod;
          String imageSrc=null;
          String method=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(x)).getImagebinding());
          if (method != null) {
            imageMethod=o.getClass().getMethod(method);
            imageSrc=(String)imageMethod.invoke(o);
            SwtTreeItem item=(SwtTreeItem)row.getParent();
            item.setXulDomContainer(this.domContainer);
            ((XulTreeItem)row.getParent()).setImage(imageSrc);
          }
          row.addCell(cell);
        }
      }
    }
 else {
      suppressEvents=true;
      if (isHiddenrootnode() == false) {
        SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
        item.setXulDomContainer(this.domContainer);
        item.setBoundObject(elements);
        SwtTreeRow newRow=new SwtTreeRow(item);
        item.setRow(newRow);
        this.getRootChildren().addChild(item);
        addTreeChild(elements,newRow);
      }
 else {
        for (        T o : elements) {
          SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
          item.setXulDomContainer(this.domContainer);
          item.setBoundObject(o);
          SwtTreeRow newRow=new SwtTreeRow(item);
          item.setRow(newRow);
          this.getRootChildren().addChild(item);
          addTreeChild(o,newRow);
        }
      }
      suppressEvents=false;
    }
    update();
    if (this.isHierarchical) {
      if (isPreserveexpandedstate()) {
        restoreExpandedState();
      }
      final int fScrollPos=scrollPos;
      if (scrollPos > -1) {
      }
    }
    if (isPreserveselection() && currentSelectedItems != null && currentSelectedItems.size() > 0) {
      setSelectedItems(currentSelectedItems);
    }
    suppressEvents=false;
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,Collections.EMPTY_LIST);
    changeSupport.firePropertyChange(""String_Node_Str"",""String_Node_Str"",null);
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public <T>void setElements(Collection<T> elements){
  int scrollPos=-1;
  if (this.isHierarchical) {
    if (isPreserveexpandedstate()) {
      cacheExpandedState();
    }
    scrollPos=tree.getTree().getVerticalBar().getSelection();
  }
  destroyPreviousBindings();
  this.elements=elements;
  this.getRootChildren().removeAll();
  if (elements == null) {
    update();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
    return;
  }
  try {
    if (this.isHierarchical == false) {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        ((XulTreeItem)row.getParent()).setBoundObject(o);
        for (int x=0; x < this.getColumns().getChildNodes().size(); x++) {
          XulComponent col=this.getColumns().getColumn(x);
          final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
          XulTreeCol column=(XulTreeCol)col;
          for (          InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
            logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
            String colType=column.getType();
            if (StringUtils.isEmpty(colType) == false && colType.equals(""String_Node_Str"")) {
              colType=extractDynamicColType(o,x);
            }
            if ((colType.equalsIgnoreCase(""String_Node_Str"") || colType.equalsIgnoreCase(""String_Node_Str"")) && column.getCombobinding() != null) {
              DefaultBinding binding=new DefaultBinding(o,column.getCombobinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setBindingType(Binding.Type.ONE_WAY);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              binding=new DefaultBinding(o,((XulTreeCol)col).getBinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setConversion(new BindingConvertor<Object,Integer>(){
                @Override public Integer sourceToTarget(                Object value){
                  int index=((Vector)cell.getValue()).indexOf(value);
                  return index > -1 ? index : 0;
                }
                @Override public Object targetToSource(                Integer value){
                  return ((Vector)cell.getValue()).get(value);
                }
              }
);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              if (colType.equalsIgnoreCase(""String_Node_Str"")) {
                binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
 else {
                  binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
                }
                domContainer.addBinding(binding);
              }
            }
 else             if (colType.equalsIgnoreCase(""String_Node_Str"")) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
 else {
                cell.setLabel(o.toString());
              }
            }
          }
          if (column.getDisabledbinding() != null) {
            String prop=column.getDisabledbinding();
            DefaultBinding bind=new DefaultBinding(o,column.getDisabledbinding(),cell,""String_Node_Str"");
            elementBindings.add(bind);
            bind.setBindingType(Binding.Type.ONE_WAY);
            domContainer.addBinding(bind);
            bind.fireSourceChanged();
          }
          Method imageMethod;
          String imageSrc=null;
          String method=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(x)).getImagebinding());
          if (method != null) {
            imageMethod=o.getClass().getMethod(method);
            imageSrc=(String)imageMethod.invoke(o);
            SwtTreeItem item=(SwtTreeItem)row.getParent();
            item.setXulDomContainer(this.domContainer);
            ((XulTreeItem)row.getParent()).setImage(imageSrc);
          }
          row.addCell(cell);
        }
      }
    }
 else {
      suppressEvents=true;
      if (isHiddenrootnode() == false) {
        SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
        item.setXulDomContainer(this.domContainer);
        item.setBoundObject(elements);
        SwtTreeRow newRow=new SwtTreeRow(item);
        item.setRow(newRow);
        this.getRootChildren().addChild(item);
        addTreeChild(elements,newRow);
      }
 else {
        for (        T o : elements) {
          SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
          item.setXulDomContainer(this.domContainer);
          item.setBoundObject(o);
          SwtTreeRow newRow=new SwtTreeRow(item);
          item.setRow(newRow);
          this.getRootChildren().addChild(item);
          addTreeChild(o,newRow);
        }
      }
      suppressEvents=false;
    }
    update();
    if (this.isHierarchical) {
      if (isPreserveexpandedstate()) {
        restoreExpandedState();
      }
      final int fScrollPos=scrollPos;
      if (scrollPos > -1) {
      }
    }
    if (isPreserveselection() && currentSelectedItems != null && currentSelectedItems.size() > 0) {
      setSelectedItems(currentSelectedItems);
      suppressEvents=false;
    }
 else {
      suppressEvents=false;
      changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
      changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
      changeSupport.firePropertyChange(""String_Node_Str"",null,Collections.EMPTY_LIST);
      changeSupport.firePropertyChange(""String_Node_Str"",""String_Node_Str"",null);
    }
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
51868,"public <T>void setSelectedItems(Collection<T> items){
  int[] selIndexes=new int[items.size()];
  if (this.isHierarchical && this.elements != null) {
    if (currentSelectedItems != null && currentSelectedItems.equals(items)) {
      return;
    }
    List<Object> selection=new ArrayList<Object>();
    String property=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding());
    for (    T t : items) {
      if (this.elements.contains(t)) {
        continue;
      }
      FindBoundItemTuple tuple=new FindBoundItemTuple(t);
      findBoundItem(this.elements,this,property,tuple);
      XulComponent bItem=tuple.treeItem;
      if (tuple.treeItem == this) {
        bItem=this.getRootChildren().getChildNodes().get(0);
      }
      if (bItem != null) {
        selection.add(bItem);
      }
    }
    tree.setSelection(new StructuredSelection(selection));
  }
 else {
    int pos=0;
    for (    T t : items) {
      selIndexes[pos++]=findIndexOfItem(t);
    }
    this.setSelectedRows(selIndexes);
  }
}","public <T>void setSelectedItems(Collection<T> items){
  int[] selIndexes=new int[items.size()];
  if (this.isHierarchical && this.elements != null) {
    List<Object> selection=new ArrayList<Object>();
    String property=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding());
    for (    T t : items) {
      FindBoundItemTuple tuple=new FindBoundItemTuple(t);
      findBoundItem(this.elements,this,property,tuple);
      XulComponent bItem=tuple.treeItem;
      if (tuple.treeItem == this) {
        bItem=this.getRootChildren().getChildNodes().get(0);
      }
      if (bItem != null) {
        selection.add(bItem);
      }
    }
    tree.setSelection(new StructuredSelection(selection));
  }
 else {
    int pos=0;
    for (    T t : items) {
      selIndexes[pos++]=findIndexOfItem(t);
    }
    this.setSelectedRows(selIndexes);
  }
}"
51869,"public void setSelectedIndices(int[] indices){
  listBox.select(indices);
}","public void setSelectedIndices(int[] indices){
  listBox.deselectAll();
  listBox.select(indices);
}"
51870,"private static XulTreeChildren getTreeChildren(XulComponent parent){
  for (  XulComponent c : parent.getChildNodes()) {
    if (c instanceof XulTreeChildren) {
      return (XulTreeChildren)c;
    }
  }
  return null;
}","private XulTreeChildren getTreeChildren(XulComponent parent){
  if (parent == this && this.isHiddenrootnode() == false) {
    List<XulComponent> childNodes=this.getRootChildren().getChildNodes();
    if (childNodes.size() > 0) {
      parent=childNodes.get(0);
    }
 else {
      return null;
    }
  }
  for (  XulComponent c : parent.getChildNodes()) {
    if (c instanceof XulTreeChildren) {
      return (XulTreeChildren)c;
    }
  }
  return null;
}"
51871,"public <T>void setElements(Collection<T> elements){
  if (this.isHierarchical && isPreserveexpandedstate()) {
    cacheExpandedState();
  }
  destroyPreviousBindings();
  this.elements=elements;
  this.getRootChildren().removeAll();
  if (elements == null) {
    update();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
    return;
  }
  try {
    if (this.isHierarchical == false) {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        ((XulTreeItem)row.getParent()).setBoundObject(o);
        for (int x=0; x < this.getColumns().getChildNodes().size(); x++) {
          XulComponent col=this.getColumns().getColumn(x);
          final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
          XulTreeCol column=(XulTreeCol)col;
          for (          InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
            logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
            String colType=column.getType();
            if (StringUtils.isEmpty(colType) == false && colType.equals(""String_Node_Str"")) {
              colType=extractDynamicColType(o,x);
            }
            if ((colType.equalsIgnoreCase(""String_Node_Str"") || colType.equalsIgnoreCase(""String_Node_Str"")) && column.getCombobinding() != null) {
              DefaultBinding binding=new DefaultBinding(o,column.getCombobinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setBindingType(Binding.Type.ONE_WAY);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              binding=new DefaultBinding(o,((XulTreeCol)col).getBinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setConversion(new BindingConvertor<Object,Integer>(){
                @Override public Integer sourceToTarget(                Object value){
                  int index=((Vector)cell.getValue()).indexOf(value);
                  return index > -1 ? index : 0;
                }
                @Override public Object targetToSource(                Integer value){
                  return ((Vector)cell.getValue()).get(value);
                }
              }
);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              if (colType.equalsIgnoreCase(""String_Node_Str"")) {
                binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
 else {
                  binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
                }
                domContainer.addBinding(binding);
              }
            }
 else             if (colType.equalsIgnoreCase(""String_Node_Str"")) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
 else {
                cell.setLabel(o.toString());
              }
            }
          }
          if (column.getDisabledbinding() != null) {
            String prop=column.getDisabledbinding();
            DefaultBinding bind=new DefaultBinding(o,column.getDisabledbinding(),cell,""String_Node_Str"");
            elementBindings.add(bind);
            bind.setBindingType(Binding.Type.ONE_WAY);
            domContainer.addBinding(bind);
            bind.fireSourceChanged();
          }
          Method imageMethod;
          String imageSrc=null;
          String method=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(x)).getImagebinding());
          if (method != null) {
            imageMethod=o.getClass().getMethod(method);
            imageSrc=(String)imageMethod.invoke(o);
            SwtTreeItem item=(SwtTreeItem)row.getParent();
            item.setXulDomContainer(this.domContainer);
            ((XulTreeItem)row.getParent()).setImage(imageSrc);
          }
          row.addCell(cell);
        }
      }
    }
 else {
      suppressEvents=true;
      if (isHiddenrootnode() == false) {
        SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
        item.setXulDomContainer(this.domContainer);
        item.setBoundObject(elements);
        SwtTreeRow newRow=new SwtTreeRow(item);
        item.setRow(newRow);
        this.getRootChildren().addChild(item);
        addTreeChild(elements,newRow);
      }
 else {
        for (        T o : elements) {
          SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
          item.setXulDomContainer(this.domContainer);
          item.setBoundObject(o);
          SwtTreeRow newRow=new SwtTreeRow(item);
          item.setRow(newRow);
          this.getRootChildren().addChild(item);
          addTreeChild(o,newRow);
        }
      }
      suppressEvents=false;
    }
    update();
    if (this.isHierarchical && isPreserveexpandedstate()) {
      restoreExpandedState();
    }
    if (isPreserveselection() && currentSelectedItems != null && currentSelectedItems.size() > 0) {
      setSelectedItems(currentSelectedItems);
    }
    suppressEvents=false;
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,Collections.EMPTY_LIST);
    changeSupport.firePropertyChange(""String_Node_Str"",""String_Node_Str"",null);
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public <T>void setElements(Collection<T> elements){
  int scrollPos=-1;
  if (this.isHierarchical) {
    if (isPreserveexpandedstate()) {
      cacheExpandedState();
    }
    scrollPos=tree.getTree().getVerticalBar().getSelection();
  }
  destroyPreviousBindings();
  this.elements=elements;
  this.getRootChildren().removeAll();
  if (elements == null) {
    update();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
    return;
  }
  try {
    if (this.isHierarchical == false) {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        ((XulTreeItem)row.getParent()).setBoundObject(o);
        for (int x=0; x < this.getColumns().getChildNodes().size(); x++) {
          XulComponent col=this.getColumns().getColumn(x);
          final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
          XulTreeCol column=(XulTreeCol)col;
          for (          InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
            logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
            String colType=column.getType();
            if (StringUtils.isEmpty(colType) == false && colType.equals(""String_Node_Str"")) {
              colType=extractDynamicColType(o,x);
            }
            if ((colType.equalsIgnoreCase(""String_Node_Str"") || colType.equalsIgnoreCase(""String_Node_Str"")) && column.getCombobinding() != null) {
              DefaultBinding binding=new DefaultBinding(o,column.getCombobinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setBindingType(Binding.Type.ONE_WAY);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              binding=new DefaultBinding(o,((XulTreeCol)col).getBinding(),cell,""String_Node_Str"");
              elementBindings.add(binding);
              binding.setConversion(new BindingConvertor<Object,Integer>(){
                @Override public Integer sourceToTarget(                Object value){
                  int index=((Vector)cell.getValue()).indexOf(value);
                  return index > -1 ? index : 0;
                }
                @Override public Object targetToSource(                Integer value){
                  return ((Vector)cell.getValue()).get(value);
                }
              }
);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              if (colType.equalsIgnoreCase(""String_Node_Str"")) {
                binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
 else {
                  binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
                }
                domContainer.addBinding(binding);
              }
            }
 else             if (colType.equalsIgnoreCase(""String_Node_Str"")) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                elementBindings.add(binding);
                if (!column.isEditable()) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
 else {
                cell.setLabel(o.toString());
              }
            }
          }
          if (column.getDisabledbinding() != null) {
            String prop=column.getDisabledbinding();
            DefaultBinding bind=new DefaultBinding(o,column.getDisabledbinding(),cell,""String_Node_Str"");
            elementBindings.add(bind);
            bind.setBindingType(Binding.Type.ONE_WAY);
            domContainer.addBinding(bind);
            bind.fireSourceChanged();
          }
          Method imageMethod;
          String imageSrc=null;
          String method=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(x)).getImagebinding());
          if (method != null) {
            imageMethod=o.getClass().getMethod(method);
            imageSrc=(String)imageMethod.invoke(o);
            SwtTreeItem item=(SwtTreeItem)row.getParent();
            item.setXulDomContainer(this.domContainer);
            ((XulTreeItem)row.getParent()).setImage(imageSrc);
          }
          row.addCell(cell);
        }
      }
    }
 else {
      suppressEvents=true;
      if (isHiddenrootnode() == false) {
        SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
        item.setXulDomContainer(this.domContainer);
        item.setBoundObject(elements);
        SwtTreeRow newRow=new SwtTreeRow(item);
        item.setRow(newRow);
        this.getRootChildren().addChild(item);
        addTreeChild(elements,newRow);
      }
 else {
        for (        T o : elements) {
          SwtTreeItem item=new SwtTreeItem(this.getRootChildren());
          item.setXulDomContainer(this.domContainer);
          item.setBoundObject(o);
          SwtTreeRow newRow=new SwtTreeRow(item);
          item.setRow(newRow);
          this.getRootChildren().addChild(item);
          addTreeChild(o,newRow);
        }
      }
      suppressEvents=false;
    }
    update();
    if (this.isHierarchical) {
      if (isPreserveexpandedstate()) {
        restoreExpandedState();
      }
      final int fScrollPos=scrollPos;
      if (scrollPos > -1) {
      }
    }
    if (isPreserveselection() && currentSelectedItems != null && currentSelectedItems.size() > 0) {
      setSelectedItems(currentSelectedItems);
    }
    suppressEvents=false;
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,getAbsoluteSelectedRows());
    changeSupport.firePropertyChange(""String_Node_Str"",null,Collections.EMPTY_LIST);
    changeSupport.firePropertyChange(""String_Node_Str"",""String_Node_Str"",null);
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
51872,"public <T>void setSelectedItems(Collection<T> items){
  int[] selIndexes=new int[items.size()];
  if (this.isHierarchical && this.elements != null) {
    List<Object> selection=new ArrayList<Object>();
    String property=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding());
    for (    T t : items) {
      FindBoundItemTuple tuple=new FindBoundItemTuple(t);
      findBoundItem(this.elements,this,property,tuple);
      selection.add(tuple.treeItem);
    }
    tree.setSelection(new StructuredSelection(selection));
  }
 else {
    int pos=0;
    for (    T t : items) {
      selIndexes[pos++]=findIndexOfItem(t);
    }
    this.setSelectedRows(selIndexes);
  }
}","public <T>void setSelectedItems(Collection<T> items){
  int[] selIndexes=new int[items.size()];
  if (this.isHierarchical && this.elements != null) {
    if (currentSelectedItems != null && currentSelectedItems.equals(items)) {
      return;
    }
    List<Object> selection=new ArrayList<Object>();
    String property=toGetter(((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding());
    for (    T t : items) {
      if (this.elements.contains(t)) {
        continue;
      }
      FindBoundItemTuple tuple=new FindBoundItemTuple(t);
      findBoundItem(this.elements,this,property,tuple);
      XulComponent bItem=tuple.treeItem;
      if (tuple.treeItem == this) {
        bItem=this.getRootChildren().getChildNodes().get(0);
      }
      if (bItem != null) {
        selection.add(bItem);
      }
    }
    tree.setSelection(new StructuredSelection(selection));
  }
 else {
    int pos=0;
    for (    T t : items) {
      selIndexes[pos++]=findIndexOfItem(t);
    }
    this.setSelectedRows(selIndexes);
  }
}"
51873,"@Override public void layout(){
  XulComponent primaryColumn=this.getElementByXPath(""String_Node_Str"");
  XulComponent isaContainer=this.getElementByXPath(""String_Node_Str"");
  isHierarchical=(primaryColumn != null) || (isaContainer != null);
  if (isHierarchical) {
    int style=(this.selType == TableSelection.MULTIPLE) ? SWT.MULTI : SWT.None;
    style|=SWT.BORDER;
    tree=new TreeViewer((Composite)parentComponent.getManagedObject(),style);
    setManagedObject(tree);
  }
 else {
    table=new TableViewer((Composite)parentComponent.getManagedObject(),SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.BORDER);
    setManagedObject(table);
  }
  if (isHierarchical) {
    setupTree();
  }
 else {
    setupTable();
  }
  if (getOndrag() != null) {
    DropEffectType effect=DropEffectType.COPY;
    if (getDrageffect() != null) {
      effect=DropEffectType.valueOfIgnoreCase(getDrageffect());
    }
    super.enableDrag(effect);
  }
  if (getOndrop() != null) {
    super.enableDrop();
  }
  this.initialized=true;
}","@Override public void layout(){
  XulComponent primaryColumn=this.getElementByXPath(""String_Node_Str"");
  XulComponent isaContainer=this.getElementByXPath(""String_Node_Str"");
  isHierarchical=(primaryColumn != null) || (isaContainer != null);
  if (isHierarchical) {
    int style=(this.selType == TableSelection.MULTIPLE) ? SWT.MULTI : SWT.None;
    style|=SWT.BORDER;
    tree=new TreeViewer((Composite)parentComponent.getManagedObject(),style);
    Button b=new Button((Composite)parentComponent.getManagedObject(),SWT.PUSH);
    b.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
      }
    }
);
    setManagedObject(tree);
  }
 else {
    table=new TableViewer((Composite)parentComponent.getManagedObject(),SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.BORDER);
    setManagedObject(table);
  }
  if (isHierarchical) {
    setupTree();
  }
 else {
    setupTable();
  }
  if (getOndrag() != null) {
    DropEffectType effect=DropEffectType.COPY;
    if (getDrageffect() != null) {
      effect=DropEffectType.valueOfIgnoreCase(getDrageffect());
    }
    super.enableDrag(effect);
  }
  if (getOndrop() != null) {
    super.enableDrop();
  }
  this.initialized=true;
}"
51874,"private BasicDialog createDialog(){
  final BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),true);
  newDialog.getShell().setBackgroundMode(SWT.INHERIT_DEFAULT);
  newDialog.getShell().addListener(SWT.Dispose,new Listener(){
    public void handleEvent(    Event event){
      if (ignoreDisposeEvent == false) {
        hide();
      }
 else {
        ignoreDisposeEvent=false;
      }
    }
  }
);
  setAppicon(this.appIcon);
  return newDialog;
}","private BasicDialog createDialog(){
  final BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),true){
    @Override protected void handleShellCloseEvent(){
      hide();
    }
  }
;
  newDialog.getShell().setBackgroundMode(SWT.INHERIT_DEFAULT);
  setAppicon(this.appIcon);
  return newDialog;
}"
51875,"public void hide(){
  if (dialog.getMainArea().isDisposed()) {
    return;
  }
  returnCode=IDialogConstants.CLOSE_ID;
  BasicDialog newDialog=createDialog();
  Control[] controlz=newDialog.getMainArea().getChildren();
  for (  Control c : controlz) {
    c.dispose();
  }
  Control[] controls=dialog.getMainArea().getChildren();
  for (  Control c : controls) {
    c.setParent(newDialog.getMainArea());
  }
  setButtons(newDialog);
  setAppicon(this.appIcon);
  newDialog.getShell().layout();
  ignoreDisposeEvent=true;
  dialog.close();
  isDialogHidden=true;
  dialog=newDialog;
  setManagedObject(dialog.getMainArea());
}","public void hide(){
  if (dialog.getMainArea().isDisposed()) {
    return;
  }
  returnCode=IDialogConstants.CLOSE_ID;
  BasicDialog newDialog=createDialog();
  Control[] controlz=newDialog.getMainArea().getChildren();
  for (  Control c : controlz) {
    c.dispose();
  }
  Control[] controls=dialog.getMainArea().getChildren();
  for (  Control c : controls) {
    c.setParent(newDialog.getMainArea());
  }
  setButtons(newDialog);
  setAppicon(this.appIcon);
  newDialog.getShell().layout();
  dialog.close();
  isDialogHidden=true;
  dialog=newDialog;
  setManagedObject(dialog.getMainArea());
}"
51876,"private BasicDialog createDialog(){
  final BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),true);
  newDialog.getShell().setBackgroundMode(SWT.INHERIT_DEFAULT);
  newDialog.getShell().addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent arg0){
      if (ignoreDisposeEvent == false) {
        hide();
      }
 else {
        ignoreDisposeEvent=false;
      }
    }
  }
);
  setAppicon(this.appIcon);
  return newDialog;
}","private BasicDialog createDialog(){
  final BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),true);
  newDialog.getShell().setBackgroundMode(SWT.INHERIT_DEFAULT);
  newDialog.getShell().addListener(SWT.Dispose,new Listener(){
    public void handleEvent(    Event event){
      if (ignoreDisposeEvent == false) {
        hide();
      }
 else {
        ignoreDisposeEvent=false;
      }
    }
  }
);
  setAppicon(this.appIcon);
  return newDialog;
}"
51877,"public String performIncludeTranslations(String input) throws XulException {
  String output=input;
  for (  String includeSrc : includedSources) {
    try {
      ResourceBundle res=ResourceBundle.getBundle(includeSrc.replace(""String_Node_Str"",""String_Node_Str""));
      resourceBundleList.add((ResourceBundle)res);
    }
 catch (    MissingResourceException e) {
      URL url=null;
      try {
        url=new File(""String_Node_Str"").toURL();
      }
 catch (      MalformedURLException ex) {
      }
      URLClassLoader cls=URLClassLoader.newInstance(new URL[]{url});
      try {
        resourceBundleList.add(ResourceBundle.getBundle(includeSrc.replace(""String_Node_Str"",""String_Node_Str""),Locale.getDefault(),cls));
      }
 catch (      MissingResourceException ex) {
        continue;
      }
    }
  }
  for (  String resource : resourceBundles) {
    logger.debug(""String_Node_Str"" + resource);
    try {
      ResourceBundle res=ResourceBundle.getBundle(resource);
      if (res == null) {
        continue;
      }
      resourceBundleList.add((ResourceBundle)res);
    }
 catch (    MissingResourceException e) {
      URL url=null;
      try {
        url=new File(""String_Node_Str"").toURL();
      }
 catch (      MalformedURLException ex) {
      }
      URLClassLoader cls=URLClassLoader.newInstance(new URL[]{url});
      try {
        ResourceBundle res=ResourceBundle.getBundle(resource,Locale.getDefault(),cls);
        resourceBundleList.add(res);
      }
 catch (      MissingResourceException ex) {
        continue;
      }
    }
  }
  for (  Object bundle : resourceBundleList) {
    try {
      output=ResourceBundleTranslator.translate(output,(ResourceBundle)bundle);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return output;
}","public String performIncludeTranslations(String input) throws XulException {
  String output=input;
  for (  String includeSrc : includedSources) {
    try {
      ResourceBundle res=null;
      for (      ClassLoader loader : classloaders) {
        try {
          res=ResourceBundle.getBundle(includeSrc.replace(""String_Node_Str"",""String_Node_Str""),Locale.getDefault(),loader);
          resourceBundleList.add((ResourceBundle)res);
          break;
        }
 catch (        MissingResourceException e) {
        }
      }
    }
 catch (    MissingResourceException e) {
      URL url=null;
      try {
        url=new File(""String_Node_Str"").toURL();
      }
 catch (      MalformedURLException ex) {
      }
      URLClassLoader cls=URLClassLoader.newInstance(new URL[]{url});
      try {
        resourceBundleList.add(ResourceBundle.getBundle(includeSrc.replace(""String_Node_Str"",""String_Node_Str""),Locale.getDefault(),cls));
      }
 catch (      MissingResourceException ex) {
        continue;
      }
    }
  }
  for (  String resource : resourceBundles) {
    logger.debug(""String_Node_Str"" + resource);
    try {
      ResourceBundle res=ResourceBundle.getBundle(resource);
      if (res == null) {
        continue;
      }
      resourceBundleList.add((ResourceBundle)res);
    }
 catch (    MissingResourceException e) {
      URL url=null;
      try {
        url=new File(""String_Node_Str"").toURL();
      }
 catch (      MalformedURLException ex) {
      }
      URLClassLoader cls=URLClassLoader.newInstance(new URL[]{url});
      try {
        ResourceBundle res=ResourceBundle.getBundle(resource,Locale.getDefault(),cls);
        resourceBundleList.add(res);
      }
 catch (      MissingResourceException ex) {
        continue;
      }
    }
  }
  for (  Object bundle : resourceBundleList) {
    try {
      output=ResourceBundleTranslator.translate(output,(ResourceBundle)bundle);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return output;
}"
51878,"private void removeItem(Object parent,String childrenMethodProperty,Object toRemove){
  Collection children=getChildCollection(parent,childrenMethodProperty);
  if (children == null) {
    return;
  }
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    Object next=iter.next();
    if (next == toRemove) {
      iter.remove();
      return;
    }
    removeItem(next,childrenMethodProperty,toRemove);
  }
}","private void removeItem(Object parent,String childrenMethodProperty,Object toRemove){
  Collection children=getChildCollection(parent,childrenMethodProperty);
  if (children == null) {
    return;
  }
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    Object next=iter.next();
    if (next == toRemove) {
      children.remove(toRemove);
      return;
    }
    removeItem(next,childrenMethodProperty,toRemove);
  }
}"
51879,"protected int doCompare(Viewer v,Object e1,Object e2){
  String t1=""String_Node_Str"";
  String t2=""String_Node_Str"";
  if (viewer.getLabelProvider() instanceof XulTableColumnLabelProvider) {
    XulTableColumnLabelProvider columnLabelProvider=(XulTableColumnLabelProvider)viewer.getLabelProvider();
    t1=columnLabelProvider.getColumnText(e1,columnIndex);
    t2=columnLabelProvider.getColumnText(e2,columnIndex);
  }
 else {
    ILabelProvider labelProvider=(ILabelProvider)viewer.getLabelProvider(columnIndex);
    t1=labelProvider.getText(e1);
    t2=labelProvider.getText(e2);
  }
  if (t1 == null)   t1=""String_Node_Str"";
  if (t2 == null)   t2=""String_Node_Str"";
  return t1.compareTo(t2);
}","protected int doCompare(Viewer v,Object e1,Object e2){
  String t1=""String_Node_Str"";
  String t2=""String_Node_Str"";
  if (viewer.getLabelProvider() instanceof XulTableColumnLabelProvider) {
    XulTableColumnLabelProvider columnLabelProvider=(XulTableColumnLabelProvider)viewer.getLabelProvider();
    t1=columnLabelProvider.getColumnText(e1,columnIndex);
    t2=columnLabelProvider.getColumnText(e2,columnIndex);
  }
 else {
    ILabelProvider labelProvider=(ILabelProvider)viewer.getLabelProvider(columnIndex);
    t1=labelProvider.getText(e1);
    t2=labelProvider.getText(e2);
  }
  if (t1 == null)   t1=""String_Node_Str"";
  if (t2 == null)   t2=""String_Node_Str"";
  return t1.compareToIgnoreCase(t2);
}"
51880,"protected int doCompare(Viewer v,Object e1,Object e2){
  ILabelProvider labelProvider=(ILabelProvider)viewer.getLabelProvider(columnIndex);
  String t1=labelProvider.getText(e1);
  String t2=labelProvider.getText(e2);
  if (t1 == null)   t1=""String_Node_Str"";
  if (t2 == null)   t2=""String_Node_Str"";
  return t1.compareTo(t2);
}","protected int doCompare(Viewer v,Object e1,Object e2){
  ILabelProvider labelProvider=(ILabelProvider)viewer.getLabelProvider(columnIndex);
  String t1=labelProvider.getText(e1);
  String t2=labelProvider.getText(e2);
  if (t1 == null)   t1=""String_Node_Str"";
  if (t2 == null)   t2=""String_Node_Str"";
  return t1.compareToIgnoreCase(t2);
}"
51881,"private RETURN_CODE showOpen(){
  fc=new FileDialog((Shell)domContainer.getDocumentRoot().getRootElement().getManagedObject(),SWT.OPEN);
  if (fileHint != null) {
    fc.setFileName(fileHint.getAbsolutePath());
  }
  String retVal=fc.open();
  if (retVal != null) {
    if (this.selectionType == SEL_TYPE.SINGLE) {
      selectedFile=fc.getFileName();
    }
 else {
      selectedFiles=fc.getFileNames();
    }
    return RETURN_CODE.OK;
  }
 else {
    return RETURN_CODE.CANCEL;
  }
}","private RETURN_CODE showOpen(){
  fc=new FileDialog((Shell)((XulRoot)domContainer.getDocumentRoot().getRootElement()).getRootObject(),SWT.OPEN);
  if (fileHint != null) {
    fc.setFileName(fileHint.getAbsolutePath());
  }
  String retVal=fc.open();
  if (retVal != null) {
    if (this.selectionType == SEL_TYPE.SINGLE) {
      selectedFile=fc.getFileName();
    }
 else {
      selectedFiles=fc.getFileNames();
    }
    return RETURN_CODE.OK;
  }
 else {
    return RETURN_CODE.CANCEL;
  }
}"
51882,"protected int doCompare(Viewer v,Object e1,Object e2){
  ILabelProvider labelProvider=(ILabelProvider)viewer.getLabelProvider(columnIndex);
  String t1=labelProvider.getText(e1);
  String t2=labelProvider.getText(e2);
  if (t1 == null)   t1=""String_Node_Str"";
  if (t2 == null)   t2=""String_Node_Str"";
  return t1.compareTo(t2);
}","protected int doCompare(Viewer v,Object e1,Object e2){
  String t1=""String_Node_Str"";
  String t2=""String_Node_Str"";
  if (viewer.getLabelProvider() instanceof XulTableColumnLabelProvider) {
    XulTableColumnLabelProvider columnLabelProvider=(XulTableColumnLabelProvider)viewer.getLabelProvider();
    t1=columnLabelProvider.getColumnText(e1,columnIndex);
    t2=columnLabelProvider.getColumnText(e2,columnIndex);
  }
 else {
    ILabelProvider labelProvider=(ILabelProvider)viewer.getLabelProvider(columnIndex);
    t1=labelProvider.getText(e1);
    t2=labelProvider.getText(e2);
  }
  if (t1 == null)   t1=""String_Node_Str"";
  if (t2 == null)   t2=""String_Node_Str"";
  return t1.compareTo(t2);
}"
51883,"public Object getBoundObject(){
  return boundObjectRef.get();
}","public Object getBoundObject(){
  if (boundObjectRef != null) {
    return boundObjectRef.get();
  }
  return null;
}"
51884,"public Document preProcess(Document srcDoc) throws XulException {
  XPath xpath=new DefaultXPath(""String_Node_Str"");
  HashMap uris=new HashMap();
  uris.put(""String_Node_Str"",""String_Node_Str"");
  uris.put(""String_Node_Str"",""String_Node_Str"");
  xpath.setNamespaceURIs(uris);
  List<Element> eles=xpath.selectNodes(srcDoc);
  for (  Element ele : eles) {
    String src=""String_Node_Str"";
    src=this.getRootDir() + ele.attributeValue(""String_Node_Str"");
    String resourceBundle=ele.attributeValue(""String_Node_Str"");
    if (resourceBundle != null) {
      resourceBundles.add(resourceBundle);
    }
 else {
      resourceBundles.add(src.replace(""String_Node_Str"",""String_Node_Str""));
    }
    InputStream in=null;
    try {
      in=getClass().getClassLoader().getResourceAsStream(src);
      if (in != null) {
        logger.debug(""String_Node_Str"" + src);
        includedSources.add(src);
      }
 else {
        src=ele.attributeValue(""String_Node_Str"");
        in=getClass().getClassLoader().getResourceAsStream(src);
        if (in != null) {
          includedSources.add(src);
          logger.debug(""String_Node_Str"" + src);
        }
 else {
          File f=new File(this.getRootDir() + src);
          if (f.exists()) {
            try {
              in=new FileInputStream(f);
              includedSources.add(src);
            }
 catch (            FileNotFoundException e) {
              e.printStackTrace();
            }
          }
        }
      }
      final Document doc=getDocFromInputStream(in);
      Element root=doc.getRootElement();
      String ignoreRoot=ele.attributeValue(""String_Node_Str"");
      if (root.getName().equals(""String_Node_Str"")) {
        processOverlay(root,ele.getDocument().getRootElement());
      }
 else       if (ignoreRoot == null || ignoreRoot.equalsIgnoreCase(""String_Node_Str"")) {
        logger.debug(""String_Node_Str"" + src);
        List contentOfParent=ele.getParent().content();
        int index=contentOfParent.indexOf(ele);
        contentOfParent.set(index,root);
        List<Element> overlays=ele.elements();
        for (        Element overlay : overlays) {
          logger.debug(""String_Node_Str"");
          this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
        }
      }
 else {
        logger.debug(""String_Node_Str"" + src);
        List contentOfParent=ele.getParent().content();
        int index=contentOfParent.indexOf(ele);
        contentOfParent.remove(index);
        List children=root.elements();
        for (int i=children.size() - 1; i >= 0; i--) {
          contentOfParent.add(index,children.get(i));
        }
        List<Element> overlays=ele.elements();
        for (        Element overlay : overlays) {
          logger.debug(""String_Node_Str"");
          this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
        }
      }
    }
  finally {
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
  return srcDoc;
}","public Document preProcess(Document srcDoc) throws XulException {
  XPath xpath=new DefaultXPath(""String_Node_Str"");
  HashMap uris=new HashMap();
  uris.put(""String_Node_Str"",""String_Node_Str"");
  uris.put(""String_Node_Str"",""String_Node_Str"");
  xpath.setNamespaceURIs(uris);
  List<Element> eles=xpath.selectNodes(srcDoc);
  for (  Element ele : eles) {
    String src=""String_Node_Str"";
    src=this.getRootDir() + ele.attributeValue(""String_Node_Str"");
    String resourceBundle=ele.attributeValue(""String_Node_Str"");
    if (resourceBundle != null) {
      resourceBundles.add(resourceBundle);
    }
 else {
      resourceBundles.add(src.replace(""String_Node_Str"",""String_Node_Str""));
    }
    InputStream in=null;
    try {
      in=getClass().getClassLoader().getResourceAsStream(src);
      if (in != null) {
        logger.debug(""String_Node_Str"" + src);
        includedSources.add(src);
      }
 else {
        src=ele.attributeValue(""String_Node_Str"");
        in=getClass().getClassLoader().getResourceAsStream(src);
        if (in != null) {
          includedSources.add(src);
          logger.debug(""String_Node_Str"" + src);
        }
 else {
          File f=new File(this.getRootDir() + src);
          if (f.exists()) {
            try {
              in=new FileInputStream(f);
              includedSources.add(src);
            }
 catch (            FileNotFoundException e) {
              e.printStackTrace();
            }
          }
        }
      }
      final Document doc=getDocFromInputStream(in);
      Element root=doc.getRootElement();
      String ignoreRoot=ele.attributeValue(""String_Node_Str"");
      if (root.getName().equals(""String_Node_Str"")) {
        processOverlay(root,ele.getDocument().getRootElement());
      }
 else       if (ignoreRoot == null || ignoreRoot.equalsIgnoreCase(""String_Node_Str"")) {
        logger.debug(""String_Node_Str"" + src);
        List contentOfParent=ele.getParent().content();
        int index=contentOfParent.indexOf(ele);
        contentOfParent.set(index,root);
        if (root.getName().equals(""String_Node_Str"")) {
          String newOnload=root.attributeValue(""String_Node_Str"");
          if (newOnload != null) {
            String existingOnload=srcDoc.getRootElement().attributeValue(""String_Node_Str"");
            String finalOnload=""String_Node_Str"";
            if (existingOnload != null) {
              finalOnload=existingOnload + ""String_Node_Str"";
            }
            finalOnload+=newOnload;
            srcDoc.getRootElement().setAttributeValue(""String_Node_Str"",finalOnload);
          }
        }
        List<Element> overlays=ele.elements();
        for (        Element overlay : overlays) {
          logger.debug(""String_Node_Str"");
          this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
        }
      }
 else {
        logger.debug(""String_Node_Str"" + src);
        List contentOfParent=ele.getParent().content();
        int index=contentOfParent.indexOf(ele);
        contentOfParent.remove(index);
        List children=root.elements();
        for (int i=children.size() - 1; i >= 0; i--) {
          Element child=(Element)children.get(i);
          contentOfParent.add(index,child);
          if (child.getName().equals(""String_Node_Str"")) {
            String newOnload=child.attributeValue(""String_Node_Str"");
            if (newOnload != null) {
              String existingOnload=srcDoc.getRootElement().attributeValue(""String_Node_Str"");
              String finalOnload=""String_Node_Str"";
              if (existingOnload != null) {
                finalOnload=existingOnload + ""String_Node_Str"";
              }
              finalOnload+=newOnload;
              srcDoc.getRootElement().setAttributeValue(""String_Node_Str"",finalOnload);
            }
          }
        }
        List<Element> overlays=ele.elements();
        for (        Element overlay : overlays) {
          logger.debug(""String_Node_Str"");
          this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
        }
      }
    }
  finally {
      try {
        if (in != null) {
          in.close();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
  return srcDoc;
}"
51885,"@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (getManagedObject() instanceof Control) {
    Control control=(Control)getManagedObject();
    Object data=control.getLayoutData();
    if (data instanceof GridData) {
      ((GridData)data).exclude=!visible;
    }
    control.setLayoutData(data);
    control.setVisible(visible);
    if (!visible) {
      control.setSize(new Point(0,0));
    }
    control.getParent().pack();
    control.getParent().layout(true);
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (getManagedObject() instanceof Control) {
    Control control=(Control)getManagedObject();
    Object data=control.getLayoutData();
    if (data instanceof GridData) {
      ((GridData)data).exclude=!visible;
    }
    control.setLayoutData(data);
    control.setVisible(visible);
    control.getParent().layout(true);
  }
}"
51886,"@Override public void layout(){
  box.layout(true);
  if (!getChildNodes().isEmpty()) {
    XulComponent control=getChildNodes().get(getSelectedIndex());
    layout.topControl=(Control)control.getManagedObject();
  }
}","@Override public void layout(){
  if (!getChildNodes().isEmpty()) {
    XulComponent control=getChildNodes().get(getSelectedIndex());
    layout.topControl=(Control)control.getManagedObject();
    if (layout.topControl instanceof Composite) {
      ((Composite)layout.topControl).layout(true);
    }
  }
  box.layout(true);
}"
51887,"public void setSelectedIndex(int index){
  selectedChildIndex=index;
  if (!getChildNodes().isEmpty()) {
    XulComponent control=getChildNodes().get(selectedChildIndex);
    layout.topControl=(Control)control.getManagedObject();
    layout();
  }
}","public void setSelectedIndex(int index){
  selectedChildIndex=index;
  layout();
}"
51888,"public void setOnload(final String method){
  this.onload=method;
  dialog.getShell().addListener(XulRoot.EVENT_ON_LOAD,new Listener(){
    public void handleEvent(    Event e){
      if (!StringUtils.isEmpty(method)) {
        if (SwtDialog.this.domContainer.isInitialized()) {
          invoke(method);
        }
      }
    }
  }
);
}","public void setOnload(final String method){
  this.onload=method;
}"
51889,"public void handleEvent(Event e){
  if (!StringUtils.isEmpty(method)) {
    if (SwtDialog.this.domContainer.isInitialized()) {
      invoke(method);
    }
  }
}","public void handleEvent(Event event){
  hide();
  event.doit=false;
}"
51890,"public SwtGrid(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  int style=SWT.None;
  if (self.getAttributeValue(""String_Node_Str"") != null) {
    style=SWT.BORDER;
  }
  Composite box=new Composite((Composite)parent.getManagedObject(),style);
  box.setBackgroundMode(SWT.INHERIT_DEFAULT);
  setManagedObject(box);
}","public SwtGrid(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  this.domContainer=domContainer;
  int style=SWT.None;
  if (self.getAttributeValue(""String_Node_Str"") != null) {
    style=SWT.BORDER;
  }
  grid=new Composite((Composite)parent.getManagedObject(),style);
  grid.setBackgroundMode(SWT.INHERIT_DEFAULT);
  setManagedObject(grid);
}"
51891,"public SwtLabel(Element self,XulComponent parent,XulDomContainer container,String tagName){
  super(tagName);
  label=new CLabel((Composite)parent.getManagedObject(),SWT.WRAP);
  setManagedObject(label);
}","public SwtLabel(Element self,XulComponent parent,XulDomContainer container,String tagName){
  super(tagName);
  String multi=self.getAttributeValue(""String_Node_Str"");
  if (multi != null && multi.equals(""String_Node_Str"")) {
    label=new Label((Composite)parent.getManagedObject(),SWT.WRAP);
    setManagedObject(label);
  }
 else {
    cLabel=new CLabel((Composite)parent.getManagedObject(),SWT.NONE);
    setManagedObject(cLabel);
  }
}"
51892,"public String getValue(){
  return label.getText();
}","public String getValue(){
  return (label != null) ? label.getText() : cLabel.getText();
}"
51893,"public void setDisabled(boolean disabled){
  this.disabled=disabled;
  if (!label.isDisposed())   label.setEnabled(!disabled);
}","public void setDisabled(boolean disabled){
  this.disabled=disabled;
  if (label != null) {
    if (!label.isDisposed()) {
      label.setEnabled(!disabled);
    }
  }
 else {
    cLabel.setEnabled(!disabled);
  }
}"
51894,"/** 
 * True parameter for bean-able attribute ""value"" (XUL attribute)
 * @param text
 */
public void setValue(String text){
  if (text == null) {
    text=""String_Node_Str"";
  }
  label.setText(text);
  if (getParent() != null) {
    label.getShell().layout(true);
  }
}","/** 
 * True parameter for bean-able attribute ""value"" (XUL attribute)
 * @param text
 */
public void setValue(String text){
  if (text == null) {
    text=""String_Node_Str"";
  }
  if (label != null) {
    label.setText(text);
    if (getParent() != null) {
      label.getShell().layout(true);
    }
  }
 else {
    cLabel.setText(text);
  }
}"
51895,"@Override public void layout(){
  super.layout();
  if (this instanceof XulDeck) {
    return;
  }
  if (!(getManagedObject() instanceof Composite)) {
    return;
  }
  Composite container=(Composite)getManagedObject();
  int totalFlex=0;
  int thisFlex=0;
  boolean everyChildIsFlexing=true;
  for (  Object child : this.getChildNodes()) {
    thisFlex=((SwtElement)child).getFlex();
    if (thisFlex <= 0) {
      everyChildIsFlexing=false;
    }
    totalFlex+=thisFlex;
  }
switch (orient) {
case HORIZONTAL:
    int columnCount=this.getChildNodes().size() + totalFlex;
  GridLayout layout=new GridLayout(columnCount,everyChildIsFlexing);
if (this.getPadding() > -1) {
  layout.marginWidth=this.getPadding();
  layout.marginHeight=this.getPadding();
}
if (this.getSpacing() > -1) {
layout.horizontalSpacing=this.getSpacing();
layout.verticalSpacing=this.getSpacing();
}
container.setLayout(layout);
break;
case VERTICAL:
layout=new GridLayout();
if (this.getPadding() > -1) {
layout.marginWidth=this.getPadding();
layout.marginHeight=this.getPadding();
}
if (this.getSpacing() > -1) {
layout.horizontalSpacing=this.getSpacing();
layout.verticalSpacing=this.getSpacing();
}
container.setLayout(layout);
break;
}
for (Object child : this.getChildNodes()) {
SwtElement swtChild=(SwtElement)child;
Object mo=swtChild.getManagedObject();
if (mo == null || !(mo instanceof Control) || swtChild instanceof XulDialog) {
continue;
}
Control c=(Control)swtChild.getManagedObject();
GridData data=new GridData();
data.horizontalSpan=orient.equals(Orient.HORIZONTAL) ? swtChild.getFlex() + 1 : 1;
data.verticalSpan=orient.equals(Orient.VERTICAL) ? swtChild.getFlex() + 1 : 1;
switch (orient) {
case HORIZONTAL:
data.verticalAlignment=SWT.FILL;
data.grabExcessVerticalSpace=true;
break;
case VERTICAL:
data.horizontalAlignment=SWT.FILL;
data.grabExcessHorizontalSpace=true;
break;
}
if (swtChild.getFlex() > 0) {
if (swtChild.getWidth() == 0) {
data.grabExcessHorizontalSpace=true;
data.horizontalAlignment=SWT.FILL;
}
if (swtChild.getHeight() == 0) {
data.grabExcessVerticalSpace=true;
data.verticalAlignment=SWT.FILL;
}
}
if (swtChild.getWidth() > 0) {
data.widthHint=swtChild.getWidth();
}
if (swtChild.getHeight() > 0) {
data.heightHint=swtChild.getHeight();
}
if (((XulComponent)swtChild).getAlign() != null) {
SwtAlign swtAlign=SwtAlign.valueOf(((XulContainer)swtChild).getAlign().toString());
if (orient.equals(Orient.HORIZONTAL)) {
if (swtChild.getHeight() < 0) {
data.grabExcessVerticalSpace=true;
}
}
 else {
if (swtChild.getWidth() < 0) {
data.grabExcessHorizontalSpace=true;
}
}
}
c.setLayoutData(data);
}
container.layout(true);
}","@Override public void layout(){
  super.layout();
  if (this instanceof XulDeck) {
    return;
  }
  if (!(getManagedObject() instanceof Composite)) {
    return;
  }
  Composite container=(Composite)getManagedObject();
  int totalFlex=0;
  int thisFlex=0;
  boolean everyChildIsFlexing=true;
  for (  Object child : this.getChildNodes()) {
    thisFlex=((SwtElement)child).getFlex();
    if (thisFlex <= 0) {
      everyChildIsFlexing=false;
    }
    totalFlex+=thisFlex;
  }
switch (orient) {
case HORIZONTAL:
    int columnCount=this.getChildNodes().size() + totalFlex;
  GridLayout layout=new GridLayout(columnCount,everyChildIsFlexing);
if (this.getPadding() > -1) {
  layout.marginWidth=this.getPadding();
  layout.marginHeight=this.getPadding();
}
if (this.getSpacing() > -1) {
layout.horizontalSpacing=this.getSpacing();
layout.verticalSpacing=this.getSpacing();
}
container.setLayout(layout);
break;
case VERTICAL:
layout=new GridLayout();
if (this.getPadding() > -1) {
layout.marginWidth=this.getPadding();
layout.marginHeight=this.getPadding();
}
if (this.getSpacing() > -1) {
layout.horizontalSpacing=this.getSpacing();
layout.verticalSpacing=this.getSpacing();
}
container.setLayout(layout);
break;
}
for (Object child : this.getChildNodes()) {
SwtElement swtChild=(SwtElement)child;
Object mo=swtChild.getManagedObject();
if (mo == null || !(mo instanceof Control || mo instanceof Viewer) || swtChild instanceof XulDialog) {
continue;
}
Control c=null;
if (mo instanceof Control) {
c=(Control)mo;
}
 else if (mo instanceof Viewer) {
c=((Viewer)mo).getControl();
}
GridData data=new GridData();
data.horizontalSpan=orient.equals(Orient.HORIZONTAL) ? swtChild.getFlex() + 1 : 1;
data.verticalSpan=orient.equals(Orient.VERTICAL) ? swtChild.getFlex() + 1 : 1;
switch (orient) {
case HORIZONTAL:
data.verticalAlignment=SWT.FILL;
data.grabExcessVerticalSpace=true;
break;
case VERTICAL:
data.horizontalAlignment=SWT.FILL;
data.grabExcessHorizontalSpace=true;
break;
}
if (swtChild.getFlex() > 0) {
if (swtChild.getWidth() == 0) {
data.grabExcessHorizontalSpace=true;
data.horizontalAlignment=SWT.FILL;
}
if (swtChild.getHeight() == 0) {
data.grabExcessVerticalSpace=true;
data.verticalAlignment=SWT.FILL;
}
}
if (swtChild.getWidth() > 0) {
data.widthHint=swtChild.getWidth();
}
if (swtChild.getHeight() > 0) {
data.heightHint=swtChild.getHeight();
}
if (((XulComponent)swtChild).getAlign() != null) {
SwtAlign swtAlign=SwtAlign.valueOf(((XulContainer)swtChild).getAlign().toString());
if (orient.equals(Orient.HORIZONTAL)) {
if (swtChild.getHeight() < 0) {
data.grabExcessVerticalSpace=true;
}
}
 else {
if (swtChild.getWidth() < 0) {
data.grabExcessHorizontalSpace=true;
}
}
}
c.setLayoutData(data);
}
container.layout(true);
}"
51896,"private Control createImageButton(){
  imageButton=new Label(((Composite)parent.getManagedObject()),SWT.NONE);
  return imageButton;
}","private Control createImageButton(){
  imageButton=new Label(((Composite)parent.getManagedObject()),SWT.NONE);
  imageButton.addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent arg0){
      if (disabled == false) {
        invoke(onclick);
      }
    }
  }
);
  imageButton.setCursor(new Cursor(((Composite)parent.getManagedObject()).getDisplay(),SWT.CURSOR_HAND));
  return imageButton;
}"
51897,"public void setButton(Button button){
  this.button=button;
  setManagedObject(button);
}","public void setButton(Button button){
  this.button=button;
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent arg0){
      invoke(onclick);
    }
  }
);
  setManagedObject(button);
  setVisible(isVisible());
}"
51898,"protected Button createNewButton(Composite parent){
  return new Button(parent,SWT.NONE);
}","protected Button createNewButton(Composite parent){
  Button button=new Button(parent,SWT.NONE);
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    org.eclipse.swt.events.SelectionEvent arg0){
      invoke(onclick);
    }
  }
);
  return button;
}"
51899,"public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0){
  invoke(method);
}","public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0){
  invoke(onclick);
}"
51900,"public void setOnclick(final String method){
  this.onclick=method;
  if (button != null) {
    button.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      org.eclipse.swt.events.SelectionEvent arg0){
        invoke(method);
      }
    }
);
  }
 else {
    imageButton.addMouseListener(new MouseAdapter(){
      @Override public void mouseUp(      MouseEvent arg0){
        if (disabled == false) {
          invoke(method);
        }
      }
    }
);
    imageButton.setCursor(new Cursor(((Composite)parent.getManagedObject()).getDisplay(),SWT.CURSOR_HAND));
  }
}","public void setOnclick(final String method){
  this.onclick=method;
}"
51901,"@Override public void mouseUp(MouseEvent arg0){
  if (disabled == false) {
    invoke(method);
  }
}","@Override public void mouseUp(MouseEvent arg0){
  if (disabled == false) {
    invoke(onclick);
  }
}"
51902,"@Override public void layout(){
  box.layout();
  if (!getChildNodes().isEmpty()) {
    XulComponent control=getChildNodes().get(getSelectedIndex());
    layout.topControl=(Control)control.getManagedObject();
  }
}","@Override public void layout(){
  box.layout(true);
  if (!getChildNodes().isEmpty()) {
    XulComponent control=getChildNodes().get(getSelectedIndex());
    layout.topControl=(Control)control.getManagedObject();
  }
}"
51903,"public void setButtons(final BasicDialog d){
  if (buttons == null) {
    return;
  }
  for (  String buttonName : buttons) {
    DialogButton thisButton=DialogButton.valueOf(buttonName.trim().toUpperCase());
    SwtButton swtButton=null;
    SwtButton existingButton=(this.getDocument() != null) ? (SwtButton)this.getElementById(this.getId() + ""String_Node_Str"" + buttonName.trim().toLowerCase()) : null;
    if (this.getId() != null && existingButton != null) {
      swtButton=existingButton;
      Widget w=(Widget)existingButton.getManagedObject();
      if ((w == null) || (w.isDisposed())) {
        Button button=d.createButton(thisButton,false);
        swtButton.setButton(button);
      }
    }
 else {
      Button button=d.createButton(thisButton,false);
      swtButton=new SwtButton(button){
        @Override public void setVisible(        boolean visible){
          super.setVisible(visible);
          d.getShell().layout(true);
        }
      }
;
      swtButton.setId(this.getId() + ""String_Node_Str"" + buttonName.trim().toLowerCase());
      this.addChild(swtButton);
    }
switch (thisButton) {
case ACCEPT:
      if ((getButtonlabelaccept() != null) && (getButtonlabelaccept().trim().length() > 0)) {
        swtButton.setLabel(getButtonlabelaccept());
      }
    if ((getOndialogaccept() != null) && (getOndialogaccept().trim().length() > 0)) {
      swtButton.setOnclick(getOndialogaccept());
    }
  break;
case CANCEL:
if ((getButtonlabelcancel() != null) && (getButtonlabelcancel().trim().length() > 0)) {
  swtButton.setLabel(getButtonlabelcancel());
}
if ((getOndialogcancel() != null) && (getOndialogcancel().trim().length() > 0)) {
swtButton.setOnclick(getOndialogcancel());
}
break;
case EXTRA1:
if ((getButtonlabelextra1() != null) && (getButtonlabelextra1().trim().length() > 0)) {
swtButton.setLabel(getButtonlabelextra1());
}
if ((getOndialogextra1() != null) && (getOndialogextra1().trim().length() > 0)) {
swtButton.setOnclick(getOndialogextra1());
}
break;
case EXTRA2:
if ((getButtonlabelextra2() != null) && (getButtonlabelextra2().trim().length() > 0)) {
swtButton.setLabel(getButtonlabelextra2());
}
if ((getOndialogextra2() != null) && (getOndialogextra2().trim().length() > 0)) {
swtButton.setOnclick(getOndialogextra2());
}
break;
}
}
}","public void setButtons(final BasicDialog d){
  if (buttons == null) {
    return;
  }
  for (  String buttonName : buttons) {
    DialogButton thisButton=DialogButton.valueOf(buttonName.trim().toUpperCase());
    SwtButton swtButton=null;
    SwtButton existingButton=(this.getDocument() != null) ? (SwtButton)this.getElementById(this.getId() + ""String_Node_Str"" + buttonName.trim().toLowerCase()) : null;
    if (this.getId() != null && existingButton != null) {
      swtButton=existingButton;
      Widget w=(Widget)existingButton.getManagedObject();
      if ((w == null) || (w.isDisposed())) {
        Button button=d.createButton(thisButton,false);
        swtButton.setButton(button);
      }
    }
 else {
      Button button=d.createButton(thisButton,false);
      swtButton=new SwtButton(button);
      swtButton.setId(this.getId() + ""String_Node_Str"" + buttonName.trim().toLowerCase());
      this.addChild(swtButton);
    }
switch (thisButton) {
case ACCEPT:
      if ((getButtonlabelaccept() != null) && (getButtonlabelaccept().trim().length() > 0)) {
        swtButton.setLabel(getButtonlabelaccept());
      }
    if ((getOndialogaccept() != null) && (getOndialogaccept().trim().length() > 0)) {
      swtButton.setOnclick(getOndialogaccept());
    }
  break;
case CANCEL:
if ((getButtonlabelcancel() != null) && (getButtonlabelcancel().trim().length() > 0)) {
  swtButton.setLabel(getButtonlabelcancel());
}
if ((getOndialogcancel() != null) && (getOndialogcancel().trim().length() > 0)) {
swtButton.setOnclick(getOndialogcancel());
}
break;
case EXTRA1:
if ((getButtonlabelextra1() != null) && (getButtonlabelextra1().trim().length() > 0)) {
swtButton.setLabel(getButtonlabelextra1());
}
if ((getOndialogextra1() != null) && (getOndialogextra1().trim().length() > 0)) {
swtButton.setOnclick(getOndialogextra1());
}
break;
case EXTRA2:
if ((getButtonlabelextra2() != null) && (getButtonlabelextra2().trim().length() > 0)) {
swtButton.setLabel(getButtonlabelextra2());
}
if ((getOndialogextra2() != null) && (getOndialogextra2().trim().length() > 0)) {
swtButton.setOnclick(getOndialogextra2());
}
break;
}
}
}"
51904,"/** 
 * True parameter for bean-able attribute ""value"" (XUL attribute)
 * @param text
 */
public void setValue(String text){
  label.setText(text);
}","/** 
 * True parameter for bean-able attribute ""value"" (XUL attribute)
 * @param text
 */
public void setValue(String text){
  label.setText(text);
  if (getParent() != null) {
    label.getShell().layout(true);
  }
}"
51905,"public SwtMenupopup(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  this.parent=parent;
  Shell shell=null;
  this.domContainer=domContainer;
  if (shell == null) {
    XulComponent p=parent;
    while (p != null && p instanceof XulRoot == false) {
      if (p instanceof XulMenubar && p.getAttributeValue(""String_Node_Str"") != null && p.getAttributeValue(""String_Node_Str"").equals(""String_Node_Str"") && domContainer.getOuterContext() != null) {
        shell=(Shell)domContainer.getOuterContext();
        break;
      }
      p=p.getParent();
    }
    if (p != null && p instanceof XulRoot) {
      shell=(Shell)p.getManagedObject();
    }
  }
  if (parent.getManagedObject() instanceof MenuItem) {
    Menu flyout=new Menu(shell,SWT.DROP_DOWN);
    ((MenuItem)parent.getManagedObject()).setMenu(flyout);
    menu=flyout;
    setManagedObject(flyout);
  }
 else   if (parent instanceof XulMenuList) {
  }
 else {
    menu=new Menu(shell,SWT.POP_UP);
    setManagedObject(menu);
  }
}","public SwtMenupopup(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  this.parent=parent;
  Shell shell=null;
  this.domContainer=domContainer;
  if (shell == null) {
    XulComponent p=parent;
    while (p != null && p instanceof XulRoot == false) {
      if (p instanceof XulMenubar && p.getAttributeValue(""String_Node_Str"") != null && p.getAttributeValue(""String_Node_Str"").equals(""String_Node_Str"") && domContainer.getOuterContext() != null) {
        shell=(Shell)domContainer.getOuterContext();
        break;
      }
      p=p.getParent();
    }
    if (p != null && p instanceof XulRoot) {
      shell=(Shell)((XulRoot)p).getRootObject();
    }
  }
  if (parent.getManagedObject() instanceof MenuItem) {
    Menu flyout=new Menu(shell,SWT.DROP_DOWN);
    ((MenuItem)parent.getManagedObject()).setMenu(flyout);
    menu=flyout;
    setManagedObject(flyout);
  }
 else   if (parent instanceof XulMenuList) {
  }
 else {
    menu=new Menu(shell,SWT.POP_UP);
    setManagedObject(menu);
  }
}"
51906,"public XulMenuitem createNewMenuitemAtPos(int pos){
  if (pos > getChildNodes().size()) {
    pos=getChildNodes().size();
  }
  return new SwtMenuitem(this,domContainer,""String_Node_Str"",pos);
}","public XulMenuitem createNewMenuitemAtPos(int pos){
  if (pos > getChildNodes().size()) {
    pos=getChildNodes().size();
  }
  XulMenuitem item=new SwtMenuitem(this,domContainer,""String_Node_Str"",pos);
  this.addChild(item);
  return item;
}"
51907,"public void hide(){
  if (dialog.getMainArea().isDisposed()) {
    return;
  }
  returnCode=IDialogConstants.CLOSE_ID;
  BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),getResizable());
  Control[] controls=dialog.getMainArea().getChildren();
  for (  Control c : controls) {
    c.setParent(newDialog.getMainArea());
  }
  setButtons(newDialog);
  newDialog.getShell().layout();
  dialog.close();
  isDialogHidden=true;
  dialog=newDialog;
  dialog.getShell().addListener(SWT.Close,new Listener(){
    public void handleEvent(    Event event){
      hide();
      event.doit=false;
    }
  }
);
  setManagedObject(dialog.getMainArea());
}","public void hide(){
  if (dialog.getMainArea().isDisposed()) {
    return;
  }
  returnCode=IDialogConstants.CLOSE_ID;
  BasicDialog newDialog=new BasicDialog((possibleParent != null) ? possibleParent : new Shell(SWT.SHELL_TRIM),getResizable());
  Control[] controlz=newDialog.getMainArea().getChildren();
  for (  Control c : controlz) {
    c.dispose();
  }
  Control[] controls=dialog.getMainArea().getChildren();
  System.out.println(""String_Node_Str"");
  for (  Control c : controls) {
    System.out.println(c.toString());
    c.setParent(newDialog.getMainArea());
  }
  setButtons(newDialog);
  newDialog.getShell().layout();
  dialog.close();
  isDialogHidden=true;
  dialog=newDialog;
  dialog.getShell().addListener(SWT.Close,new Listener(){
    public void handleEvent(    Event event){
      hide();
      event.doit=false;
    }
  }
);
  setManagedObject(dialog.getMainArea());
}"
51908,"private Object getSelectedTreeItem(int[] currentSelection){
  if (this.isHierarchical && this.elements != null) {
    int[] vals=currentSelection;
    if (vals == null || vals.length == 0 || elements == null || elements.size() == 0) {
      return null;
    }
    String property=((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding();
    property=""String_Node_Str"" + (property.substring(0,1).toUpperCase() + property.substring(1));
    int selectedIdx=vals[0];
    FindSelectedItemTuple tuple=findSelectedItem(this.elements,property,new FindSelectedItemTuple(selectedIdx));
    return tuple != null ? tuple.selectedItem : null;
  }
  return null;
}","private Object getSelectedTreeItem(int[] currentSelection){
  if (this.isHierarchical && this.elements != null) {
    int[] vals=currentSelection;
    if (vals == null || vals.length == 0 || elements == null || elements.size() == 0) {
      return null;
    }
    String property=((XulTreeCol)this.getColumns().getChildNodes().get(0)).getChildrenbinding();
    property=""String_Node_Str"" + (property.substring(0,1).toUpperCase() + property.substring(1));
    int selectedIdx=vals[0];
    if (selectedIdx == -1) {
      return null;
    }
    FindSelectedItemTuple tuple=findSelectedItem(this.elements,property,new FindSelectedItemTuple(selectedIdx));
    return tuple != null ? tuple.selectedItem : null;
  }
  return null;
}"
51909,"public SwtMenuitem(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  setManagedObject(""String_Node_Str"");
  if (parent.getManagedObject() != null) {
    item=new MenuItem((Menu)parent.getManagedObject(),SWT.PUSH);
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        String command=SwtMenuitem.this.onCommand;
        if (command != null) {
          invoke(command);
        }
      }
    }
);
  }
}","public SwtMenuitem(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  setManagedObject(""String_Node_Str"");
  if (parent.getManagedObject() != null && parent.getManagedObject() instanceof Menu) {
    item=new MenuItem((Menu)parent.getManagedObject(),SWT.PUSH);
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent arg0){
        String command=SwtMenuitem.this.onCommand;
        if (command != null) {
          invoke(command);
        }
      }
    }
);
  }
}"
51910,"public Document preProcess(Document srcDoc) throws XulException {
  XPath xpath=new DefaultXPath(""String_Node_Str"");
  HashMap uris=new HashMap();
  uris.put(""String_Node_Str"",""String_Node_Str"");
  uris.put(""String_Node_Str"",""String_Node_Str"");
  xpath.setNamespaceURIs(uris);
  List<Element> eles=xpath.selectNodes(srcDoc);
  for (  Element ele : eles) {
    String src=""String_Node_Str"";
    src=this.getRootDir() + ele.attributeValue(""String_Node_Str"");
    String resourceBundle=ele.attributeValue(""String_Node_Str"");
    if (resourceBundle != null) {
      resourceBundles.add(resourceBundle);
    }
    InputStream in=getClass().getClassLoader().getResourceAsStream(src);
    if (in != null) {
      logger.debug(""String_Node_Str"" + src);
      includedSources.add(src);
    }
 else {
      src=ele.attributeValue(""String_Node_Str"");
      in=getClass().getClassLoader().getResourceAsStream(this.rootDir + src);
      if (in != null) {
        includedSources.add(src);
        logger.debug(""String_Node_Str"" + src);
      }
 else {
        logger.error(""String_Node_Str"" + src);
      }
    }
    final Document doc=getDocFromInputStream(in);
    Element root=doc.getRootElement();
    String ignoreRoot=ele.attributeValue(""String_Node_Str"");
    if (root.getName().equals(""String_Node_Str"")) {
      processOverlay(root,ele.getDocument().getRootElement());
    }
 else     if (ignoreRoot == null || ignoreRoot.equalsIgnoreCase(""String_Node_Str"")) {
      logger.debug(""String_Node_Str"" + src);
      List contentOfParent=ele.getParent().content();
      int index=contentOfParent.indexOf(ele);
      contentOfParent.set(index,root);
      List<Element> overlays=ele.elements();
      for (      Element overlay : overlays) {
        logger.debug(""String_Node_Str"");
        this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
      }
    }
 else {
      logger.debug(""String_Node_Str"" + src);
      List contentOfParent=ele.getParent().content();
      int index=contentOfParent.indexOf(ele);
      contentOfParent.remove(index);
      List children=root.elements();
      for (int i=children.size() - 1; i >= 0; i--) {
        contentOfParent.add(index,children.get(i));
      }
      List<Element> overlays=ele.elements();
      for (      Element overlay : overlays) {
        logger.debug(""String_Node_Str"");
        this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
      }
    }
  }
  return srcDoc;
}","public Document preProcess(Document srcDoc) throws XulException {
  XPath xpath=new DefaultXPath(""String_Node_Str"");
  HashMap uris=new HashMap();
  uris.put(""String_Node_Str"",""String_Node_Str"");
  uris.put(""String_Node_Str"",""String_Node_Str"");
  xpath.setNamespaceURIs(uris);
  List<Element> eles=xpath.selectNodes(srcDoc);
  for (  Element ele : eles) {
    String src=""String_Node_Str"";
    src=this.getRootDir() + ele.attributeValue(""String_Node_Str"");
    String resourceBundle=ele.attributeValue(""String_Node_Str"");
    if (resourceBundle != null) {
      resourceBundles.add(resourceBundle);
    }
    InputStream in=getClass().getClassLoader().getResourceAsStream(src);
    if (in != null) {
      logger.debug(""String_Node_Str"" + src);
      includedSources.add(src);
    }
 else {
      src=ele.attributeValue(""String_Node_Str"");
      in=getClass().getClassLoader().getResourceAsStream(src);
      if (in != null) {
        includedSources.add(src);
        logger.debug(""String_Node_Str"" + src);
      }
 else {
        logger.error(""String_Node_Str"" + src);
      }
    }
    final Document doc=getDocFromInputStream(in);
    Element root=doc.getRootElement();
    String ignoreRoot=ele.attributeValue(""String_Node_Str"");
    if (root.getName().equals(""String_Node_Str"")) {
      processOverlay(root,ele.getDocument().getRootElement());
    }
 else     if (ignoreRoot == null || ignoreRoot.equalsIgnoreCase(""String_Node_Str"")) {
      logger.debug(""String_Node_Str"" + src);
      List contentOfParent=ele.getParent().content();
      int index=contentOfParent.indexOf(ele);
      contentOfParent.set(index,root);
      List<Element> overlays=ele.elements();
      for (      Element overlay : overlays) {
        logger.debug(""String_Node_Str"");
        this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
      }
    }
 else {
      logger.debug(""String_Node_Str"" + src);
      List contentOfParent=ele.getParent().content();
      int index=contentOfParent.indexOf(ele);
      contentOfParent.remove(index);
      List children=root.elements();
      for (int i=children.size() - 1; i >= 0; i--) {
        contentOfParent.add(index,children.get(i));
      }
      List<Element> overlays=ele.elements();
      for (      Element overlay : overlays) {
        logger.debug(""String_Node_Str"");
        this.processOverlay(overlay.attributeValue(""String_Node_Str""),srcDoc);
      }
    }
  }
  return srcDoc;
}"
51911,"public void componentResized(ComponentEvent e){
  Rectangle size=table.getBounds();
  int newWidth=size.width;
  if (SwingTree.this.rows > -1) {
    int minHeight=table.getRowHeight() * rows;
    scrollpane.getViewport().setMinimumSize(new Dimension(scrollpane.getWidth(),minHeight - 100));
  }
  int newHeight=size.height;
  for (int i=0; i < table.getColumnCount(); i++) {
    int newColWidth=50;
    if (totalFlex > 0) {
      int flex=SwingTree.this.columns.getColumn(table.getColumnModel().getColumn(i).getModelIndex()).getFlex();
      newColWidth=(int)(newWidth * ((double)flex / totalFlex));
    }
 else {
      newColWidth=(int)(newWidth * ((double)1 / table.getColumnCount()));
    }
    table.getColumnModel().getColumn(i).setWidth(newColWidth);
    table.getColumnModel().getColumn(i).setPreferredWidth(newColWidth);
    table.getColumnModel().getColumn(i).setMinWidth(newColWidth);
  }
  loaded=true;
}","public void componentResized(ComponentEvent e){
  calcColumnWidths();
}"
51912,"public <T>void setElements(Collection<T> elements){
  suppressEvents=true;
  this.elements=elements;
  this.getRootChildren().removeAll();
  if (table != null) {
    CellEditor ce=table.getCellEditor();
    if (ce != null) {
      ce.stopCellEditing();
    }
  }
  if (elements == null) {
    if (table != null) {
      table.updateUI();
    }
 else {
      tree.updateUI();
    }
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    return;
  }
  try {
    if (table != null) {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        for (int x=0; x < this.getColumns().getChildNodes().size(); x++) {
          XulComponent col=this.getColumns().getColumn(x);
          final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
          XulTreeCol column=(XulTreeCol)col;
          for (          InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
            logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
            String colType=column.getType();
            if (StringUtils.isEmpty(colType) == false && colType.equalsIgnoreCase(""String_Node_Str"")) {
              colType=extractDynamicColType(o,x);
            }
            if (colType == null) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else             if (colType.equalsIgnoreCase(""String_Node_Str"") || colType.equalsIgnoreCase(""String_Node_Str"") && column.getCombobinding() != null) {
              DefaultBinding binding=new DefaultBinding(o,column.getCombobinding(),cell,""String_Node_Str"");
              binding.setBindingType(Binding.Type.ONE_WAY);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              binding=new DefaultBinding(o,((XulTreeCol)col).getBinding(),cell,""String_Node_Str"");
              binding.setConversion(new BindingConvertor<Object,Integer>(){
                @Override public Integer sourceToTarget(                Object value){
                  int index=((Vector)cell.getValue()).indexOf(value);
                  return index > -1 ? index : 0;
                }
                @Override public Object targetToSource(                Integer value){
                  return ((Vector)cell.getValue()).get(value);
                }
              }
);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              if (colType.equalsIgnoreCase(""String_Node_Str"")) {
                binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
 else {
                  binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
                }
                domContainer.addBinding(binding);
              }
            }
 else             if (colType.equalsIgnoreCase(""String_Node_Str"")) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else             if (colType != null && this.customEditors.containsKey(colType)) {
              DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
              binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
            }
 else {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
          }
          if (column.getDisabledbinding() != null) {
            String prop=column.getDisabledbinding();
            DefaultBinding bind=new DefaultBinding(o,column.getDisabledbinding(),cell,""String_Node_Str"");
            bind.setBindingType(Binding.Type.ONE_WAY);
            domContainer.addBinding(bind);
            bind.fireSourceChanged();
          }
          row.addCell(cell);
        }
      }
    }
 else {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        addTreeChild(o,row);
      }
    }
    if (table != null) {
      table.updateUI();
    }
 else {
      setupTree();
      tree.updateUI();
    }
    suppressEvents=false;
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public <T>void setElements(Collection<T> elements){
  suppressEvents=true;
  this.elements=elements;
  this.getRootChildren().removeAll();
  if (table != null) {
    CellEditor ce=table.getCellEditor();
    if (ce != null) {
      ce.stopCellEditing();
    }
  }
  if (elements == null) {
    if (table != null) {
      table.updateUI();
    }
 else {
      tree.updateUI();
    }
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    return;
  }
  try {
    if (table != null) {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        for (int x=0; x < this.getColumns().getChildNodes().size(); x++) {
          XulComponent col=this.getColumns().getColumn(x);
          final XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
          XulTreeCol column=(XulTreeCol)col;
          for (          InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
            logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
            String colType=column.getType();
            if (StringUtils.isEmpty(colType) == false && colType.equalsIgnoreCase(""String_Node_Str"")) {
              colType=extractDynamicColType(o,x);
            }
            if (colType == null) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else             if ((colType.equalsIgnoreCase(""String_Node_Str"") || colType.equalsIgnoreCase(""String_Node_Str"")) && column.getCombobinding() != null) {
              DefaultBinding binding=new DefaultBinding(o,column.getCombobinding(),cell,""String_Node_Str"");
              binding.setBindingType(Binding.Type.ONE_WAY);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              binding=new DefaultBinding(o,((XulTreeCol)col).getBinding(),cell,""String_Node_Str"");
              binding.setConversion(new BindingConvertor<Object,Integer>(){
                @Override public Integer sourceToTarget(                Object value){
                  int index=((Vector)cell.getValue()).indexOf(value);
                  return index > -1 ? index : 0;
                }
                @Override public Object targetToSource(                Integer value){
                  return ((Vector)cell.getValue()).get(value);
                }
              }
);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
              if (colType.equalsIgnoreCase(""String_Node_Str"")) {
                binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
 else {
                  binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
                }
                domContainer.addBinding(binding);
              }
            }
 else             if (colType.equalsIgnoreCase(""String_Node_Str"")) {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
 else             if (colType != null && this.customEditors.containsKey(colType)) {
              DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,""String_Node_Str"");
              binding.setBindingType(Binding.Type.BI_DIRECTIONAL);
              domContainer.addBinding(binding);
              binding.fireSourceChanged();
            }
 else {
              if (StringUtils.isNotEmpty(exp.getModelAttr())) {
                DefaultBinding binding=new DefaultBinding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
                if (!this.editable) {
                  binding.setBindingType(Binding.Type.ONE_WAY);
                }
                domContainer.addBinding(binding);
                binding.fireSourceChanged();
              }
            }
          }
          if (column.getDisabledbinding() != null) {
            String prop=column.getDisabledbinding();
            DefaultBinding bind=new DefaultBinding(o,column.getDisabledbinding(),cell,""String_Node_Str"");
            bind.setBindingType(Binding.Type.ONE_WAY);
            domContainer.addBinding(bind);
            bind.fireSourceChanged();
          }
          row.addCell(cell);
        }
      }
    }
 else {
      for (      T o : elements) {
        XulTreeRow row=this.getRootChildren().addNewRow();
        addTreeChild(o,row);
      }
    }
    if (table != null) {
      table.updateUI();
    }
 else {
      setupTree();
      tree.updateUI();
    }
    suppressEvents=false;
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
51913,"private void setupTable(){
  tableModel=new XulTableModel(this);
  table.setModel(this.tableModel);
  this.setSeltype(getSeltype());
  updateColumnModel();
  initialized=true;
  table.addComponentListener(new ComponentListener(){
    boolean loaded=false;
    public void componentHidden(    ComponentEvent arg0){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      Rectangle size=table.getBounds();
      int newWidth=size.width;
      if (SwingTree.this.rows > -1) {
        int minHeight=table.getRowHeight() * rows;
        scrollpane.getViewport().setMinimumSize(new Dimension(scrollpane.getWidth(),minHeight - 100));
      }
      int newHeight=size.height;
      for (int i=0; i < table.getColumnCount(); i++) {
        int newColWidth=50;
        if (totalFlex > 0) {
          int flex=SwingTree.this.columns.getColumn(table.getColumnModel().getColumn(i).getModelIndex()).getFlex();
          newColWidth=(int)(newWidth * ((double)flex / totalFlex));
        }
 else {
          newColWidth=(int)(newWidth * ((double)1 / table.getColumnCount()));
        }
        table.getColumnModel().getColumn(i).setWidth(newColWidth);
        table.getColumnModel().getColumn(i).setPreferredWidth(newColWidth);
        table.getColumnModel().getColumn(i).setMinWidth(newColWidth);
      }
      loaded=true;
    }
  }
);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (event.getValueIsAdjusting() == true) {
        return;
      }
      SwingTree.this.changeSupport.firePropertyChange(""String_Node_Str"",null,SwingTree.this.getSelectedRows());
    }
  }
);
  table.getTableHeader().setReorderingAllowed(this.isEnableColumnDrag());
  this.setDisabled(this.isDisabled());
}","private void setupTable(){
  tableModel=new XulTableModel(this);
  table.setModel(this.tableModel);
  this.setSeltype(getSeltype());
  updateColumnModel();
  initialized=true;
  table.addComponentListener(new ComponentListener(){
    public void componentHidden(    ComponentEvent arg0){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      calcColumnWidths();
    }
  }
);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (event.getValueIsAdjusting() == true) {
        return;
      }
      SwingTree.this.changeSupport.firePropertyChange(""String_Node_Str"",null,SwingTree.this.getSelectedRows());
    }
  }
);
  table.getTableHeader().setReorderingAllowed(this.isEnableColumnDrag());
  this.setDisabled(this.isDisabled());
}"
51914,"public GwtTabWidget(String text,String tooltip,final TabPanel tabPanel,final Widget tabContent){
  this.tabPanel=tabPanel;
  this.tabContent=tabContent;
  this.fullText=text;
  setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  panel.setStyleName(""String_Node_Str"");
  leftCap.setStyleName(""String_Node_Str"");
  setLabelText(text);
  setLabelTooltip(tooltip);
  textLabel.setStyleName(""String_Node_Str"");
  textLabel.setWordWrap(false);
  textLabel.addMouseListener(this);
  tabPanel.addSelectionHandler(new SelectionHandler<Integer>(){
    public void onSelection(    SelectionEvent<Integer> event){
      int tabIndex=event.getSelectedItem();
      ElementUtils.blur(getElement().getParentElement());
      if (tabIndex == tabPanel.getWidgetIndex(tabContent)) {
        panel.setStyleName(""String_Node_Str"");
        leftCap.setStyleName(""String_Node_Str"");
      }
 else {
        panel.setStyleName(""String_Node_Str"");
        leftCap.setStyleName(""String_Node_Str"");
      }
    }
  }
);
  panel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  panel.add(textLabel);
  DOM.setStyleAttribute(textLabel.getElement(),""String_Node_Str"",""String_Node_Str"");
  add(leftCap);
  add(panel);
  sinkEvents(Event.ONDBLCLICK | Event.ONMOUSEUP);
}","public GwtTabWidget(String text,String tooltip,final TabPanel tabPanel,final Widget tabContent){
  this.tabPanel=tabPanel;
  this.tabContent=tabContent;
  this.fullText=text;
  setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  panel.setStyleName(""String_Node_Str"");
  leftCap.setStyleName(""String_Node_Str"");
  Image leftCapImage=new Image(GWT.getModuleBaseURL() + ""String_Node_Str"");
  leftCap.setSpacing(0);
  leftCapImage.setWidth(""String_Node_Str"");
  leftCapImage.setHeight(""String_Node_Str"");
  leftCap.add(leftCapImage);
  setLabelText(text);
  setLabelTooltip(tooltip);
  textLabel.setStyleName(""String_Node_Str"");
  textLabel.setWordWrap(false);
  textLabel.addMouseListener(this);
  tabPanel.addSelectionHandler(new SelectionHandler<Integer>(){
    public void onSelection(    SelectionEvent<Integer> event){
      int tabIndex=event.getSelectedItem();
      ElementUtils.blur(getElement().getParentElement());
      if (tabIndex == tabPanel.getWidgetIndex(tabContent)) {
        panel.setStyleName(""String_Node_Str"");
        leftCap.setStyleName(""String_Node_Str"");
      }
 else {
        panel.setStyleName(""String_Node_Str"");
        leftCap.setStyleName(""String_Node_Str"");
      }
    }
  }
);
  panel.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  panel.add(textLabel);
  DOM.setStyleAttribute(textLabel.getElement(),""String_Node_Str"",""String_Node_Str"");
  add(leftCap);
  add(panel);
  sinkEvents(Event.ONDBLCLICK | Event.ONMOUSEUP);
}"
51915,"public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setLabel(srcEle.getAttribute(""String_Node_Str""));
  setChecked(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  String command=srcEle.getAttribute(""String_Node_Str"");
  setCommand(command);
  if (srcEle.getAttribute(""String_Node_Str"") != null && srcEle.getAttribute(""String_Node_Str"").length() > 0) {
    setClass(srcEle.getAttribute(""String_Node_Str""));
  }
}","public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setLabel(srcEle.getAttribute(""String_Node_Str""));
  setChecked(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  checkBox.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      try {
        setChecked(checkBox.getValue());
        if (command != null && command.length() > 0) {
          GwtCheckbox.this.getXulDomContainer().invoke(command,new Object[]{});
        }
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
  setCommand(srcEle.getAttribute(""String_Node_Str""));
  if (srcEle.getAttribute(""String_Node_Str"") != null && srcEle.getAttribute(""String_Node_Str"").length() > 0) {
    setClass(srcEle.getAttribute(""String_Node_Str""));
  }
}"
51916,"public void onClick(Widget sender){
  try {
    if (method != null) {
      GwtCheckbox.this.getXulDomContainer().invoke(method,new Object[]{});
    }
    setChecked(checkBox.isChecked());
  }
 catch (  XulException e) {
    e.printStackTrace();
  }
}","public void onClick(ClickEvent event){
  try {
    setChecked(checkBox.getValue());
    if (command != null && command.length() > 0) {
      GwtCheckbox.this.getXulDomContainer().invoke(command,new Object[]{});
    }
  }
 catch (  XulException e) {
    e.printStackTrace();
  }
}"
51917,"public void setSelected(boolean selected){
  checkBox.setChecked(selected);
}","public void setSelected(boolean selected){
  checkBox.setValue(selected);
}"
51918,"public boolean isChecked(){
  return checkBox.isChecked();
}","public boolean isChecked(){
  return checkBox.getValue();
}"
51919,"public void setCommand(final String method){
  checkBox.addClickListener(new ClickListener(){
    public void onClick(    Widget sender){
      try {
        if (method != null) {
          GwtCheckbox.this.getXulDomContainer().invoke(method,new Object[]{});
        }
        setChecked(checkBox.isChecked());
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
}","public void setCommand(final String command){
  this.command=command;
}"
51920,"public boolean getSelected(){
  return checkBox.isChecked();
}","public boolean getSelected(){
  return checkBox.getValue();
}"
51921,"public void setChecked(boolean checked){
  boolean previousVal=this.checked;
  if (checked != checkBox.isChecked()) {
    checkBox.setChecked(checked);
  }
  this.checked=checked;
  this.firePropertyChange(""String_Node_Str"",previousVal,checked);
}","public void setChecked(boolean checked){
  boolean previousVal=this.checked;
  if (checked != checkBox.getValue()) {
    checkBox.setValue(checked);
  }
  this.checked=checked;
  this.firePropertyChange(""String_Node_Str"",previousVal,checked);
}"
51922,"public Document getDocument(){
  try {
    XulElementDom4J o=(XulElementDom4J)element.getDocument().getRootElement();
    return ((XulRoot)o.getXulElement()).getXulDomContainer().getDocumentRoot();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + e.getMessage(),e);
    return null;
  }
}","public Document getDocument(){
  try {
    org.dom4j.Document doc=element.getDocument();
    if (doc == null) {
      return null;
    }
    XulElementDom4J o=(XulElementDom4J)doc.getRootElement();
    return ((XulRoot)o.getXulElement()).getXulDomContainer().getDocumentRoot();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + e.getMessage(),e);
    return null;
  }
}"
51923,"public SwingVbox(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  this.domContainer=domContainer;
  this.orientation=Orient.VERTICAL;
  container=new ScrollablePanel(new GridBagLayout());
  container.setOpaque(false);
  managedObject=container;
  resetContainer();
}","public SwingVbox(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  this.domContainer=domContainer;
  this.orientation=Orient.VERTICAL;
  container=new ScrollablePanel(new GridBagLayout()){
    @Override public void paintComponent(    Graphics g){
      if (backgroundImage != null) {
        g.drawImage(backgroundImage,0,0,container);
      }
    }
  }
;
  container.setOpaque(false);
  managedObject=container;
  resetContainer();
}"
51924,"public void setBackground(String src){
  this.background=src;
  URL url=SwingImage.class.getClassLoader().getResource(this.domContainer.getXulLoader().getRootDir() + src);
  if (url == null) {
    try {
      url=new File(src).toURL();
    }
 catch (    MalformedURLException e) {
    }
  }
  if (url == null) {
    logger.error(""String_Node_Str"" + src);
    return;
  }
  final ImageIcon ico=new ImageIcon(url);
  container.addComponentListener(new ComponentListener(){
    public void componentHidden(    ComponentEvent arg0){
    }
    public void componentMoved(    ComponentEvent arg0){
    }
    public void componentResized(    ComponentEvent arg0){
      container.getGraphics().drawImage(ico.getImage(),0,0,container);
      container.repaint();
    }
    public void componentShown(    ComponentEvent arg0){
    }
  }
);
}","public void setBackground(String src){
  this.background=src;
  URL url=SwingImage.class.getClassLoader().getResource(this.domContainer.getXulLoader().getRootDir() + src);
  if (url == null) {
    try {
      url=new File(src).toURL();
    }
 catch (    MalformedURLException e) {
    }
  }
  if (url == null) {
    logger.error(""String_Node_Str"" + src);
    return;
  }
  final ImageIcon ico=new ImageIcon(url);
  backgroundImage=ico.getImage();
}"
51925,"public void show(){
  if (dialog != null) {
    for (    XulButton btn : dialogButtons) {
      this.removeChild(btn);
    }
    super.layout();
    for (    XulButton btn : dialogButtons) {
      this.addChild(btn);
    }
    dialog.center();
    dialog.show();
    RootPanel.get().add(glasspane);
    GlassPane.getInstance().show();
    glasspane.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (GwtDialog.dialogPos));
    dialog.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (++GwtDialog.dialogPos));
    return;
  }
  dialog=new DialogBox(){
    @Override public void hide(){
      super.hide();
      RootPanel.get().remove(glasspane);
      GlassPane.getInstance().hide();
    }
  }
;
  dialog.setWidth(getWidth() + ""String_Node_Str"");
  dialog.setHeight(getHeight() + ""String_Node_Str"");
  dialog.setText(getTitle());
  VerticalPanel panel=new VerticalPanel();
  VerticalPanel contentPanel=new VerticalPanel();
  contentPanel.setHeight(""String_Node_Str"");
  contentPanel.setWidth(""String_Node_Str"");
  contentPanel.setStyleName(""String_Node_Str"");
  contentPanel.setWidth(""String_Node_Str"");
  SimplePanel sp=new SimplePanel();
  sp.getElement().setClassName(""String_Node_Str"");
  sp.add(contentPanel);
  panel.add(sp);
  panel.setCellWidth(contentPanel,""String_Node_Str"");
  panel.setCellHeight(contentPanel,""String_Node_Str"");
  panel.setStyleName(""String_Node_Str"");
  container=contentPanel;
  if (getBgcolor() != null) {
    container.getElement().getStyle().setProperty(""String_Node_Str"",getBgcolor());
  }
  boolean ignoreIndividualButtonAlign=false;
  String buttonalign=getButtonalign();
  if (!StringUtils.isEmpty(buttonalign)) {
    ignoreIndividualButtonAlign=true;
  }
  HorizontalPanel buttonPanel=new HorizontalPanel();
  HorizontalPanel leftButtonPanel=new HorizontalPanel();
  HorizontalPanel centerButtonPanel=new HorizontalPanel();
  HorizontalPanel rightButtonPanel=new HorizontalPanel();
  rightButtonPanel.setSpacing(3);
  centerButtonPanel.setSpacing(3);
  leftButtonPanel.setSpacing(3);
  for (  XulButton btn : dialogButtons) {
    this.removeChild(btn);
    Widget widget=(Widget)btn.getManagedObject();
    if (!ignoreIndividualButtonAlign) {
      String align=btn.getAlign();
      if (!StringUtils.isEmpty(align)) {
        if (""String_Node_Str"".equals(align)) {
          centerButtonPanel.add(widget);
        }
 else         if (""String_Node_Str"".equals(align)) {
          leftButtonPanel.add(widget);
        }
 else {
          rightButtonPanel.add(widget);
        }
      }
    }
 else {
      if (""String_Node_Str"".equals(buttonalign)) {
        centerButtonPanel.add(widget);
      }
 else       if (""String_Node_Str"".equals(buttonalign)) {
        leftButtonPanel.add(widget);
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
  }
  buttonPanel.add(leftButtonPanel);
  buttonPanel.setCellHorizontalAlignment(leftButtonPanel,HorizontalPanel.ALIGN_LEFT);
  buttonPanel.add(centerButtonPanel);
  buttonPanel.setCellHorizontalAlignment(centerButtonPanel,HorizontalPanel.ALIGN_CENTER);
  buttonPanel.setCellWidth(centerButtonPanel,""String_Node_Str"");
  buttonPanel.add(rightButtonPanel);
  buttonPanel.setCellHorizontalAlignment(rightButtonPanel,HorizontalPanel.ALIGN_RIGHT);
  super.layout();
  for (  XulButton btn : dialogButtons) {
    this.addChild(btn);
  }
  if (buttonPanel != null) {
    HorizontalPanel buttonPanelWrapper=new HorizontalPanel();
    buttonPanelWrapper.setStyleName(""String_Node_Str"");
    buttonPanelWrapper.add(buttonPanel);
    buttonPanelWrapper.setWidth(""String_Node_Str"");
    panel.add(buttonPanelWrapper);
    buttonPanelWrapper.setCellWidth(buttonPanel,""String_Node_Str"");
  }
  panel.setSpacing(1);
  panel.setHeight(""String_Node_Str"");
  panel.setWidth(""String_Node_Str"");
  dialog.add(panel);
  GlassPane.getInstance().show();
  dialog.center();
  dialog.show();
  RootPanel.get().add(glasspane);
  Style glassPaneStyle=glasspane.getElement().getStyle();
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glasspane.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (GwtDialog.dialogPos));
  dialog.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (++GwtDialog.dialogPos));
}","public void show(){
  if (dialog != null) {
    for (    XulButton btn : dialogButtons) {
      this.removeChild(btn);
    }
    super.layout();
    for (    XulButton btn : dialogButtons) {
      this.addChild(btn);
    }
    dialog.center();
    dialog.show();
    RootPanel.get().add(glasspane);
    GlassPane.getInstance().show();
    glasspane.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (GwtDialog.dialogPos));
    dialog.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (++GwtDialog.dialogPos));
    return;
  }
  dialog=new DialogBox(){
    @Override public void hide(){
      super.hide();
      RootPanel.get().remove(glasspane);
      GlassPane.getInstance().hide();
    }
  }
;
  dialog.setWidth(getWidth() + ""String_Node_Str"");
  dialog.setHeight(""String_Node_Str"");
  dialog.setText(getTitle());
  VerticalPanel panel=new VerticalPanel();
  VerticalPanel contentPanel=new VerticalPanel();
  contentPanel.setHeight(""String_Node_Str"");
  contentPanel.setWidth(""String_Node_Str"");
  contentPanel.setStyleName(""String_Node_Str"");
  contentPanel.setWidth(""String_Node_Str"");
  SimplePanel sp=new SimplePanel();
  sp.getElement().setClassName(""String_Node_Str"");
  sp.add(contentPanel);
  panel.add(sp);
  panel.setCellWidth(sp,""String_Node_Str"");
  panel.setCellHeight(sp,""String_Node_Str"");
  panel.setStyleName(""String_Node_Str"");
  container=contentPanel;
  if (getBgcolor() != null) {
    container.getElement().getStyle().setProperty(""String_Node_Str"",getBgcolor());
  }
  boolean ignoreIndividualButtonAlign=false;
  String buttonalign=getButtonalign();
  if (!StringUtils.isEmpty(buttonalign)) {
    ignoreIndividualButtonAlign=true;
  }
  HorizontalPanel buttonPanel=new HorizontalPanel();
  HorizontalPanel leftButtonPanel=new HorizontalPanel();
  HorizontalPanel centerButtonPanel=new HorizontalPanel();
  HorizontalPanel rightButtonPanel=new HorizontalPanel();
  rightButtonPanel.setSpacing(3);
  centerButtonPanel.setSpacing(3);
  leftButtonPanel.setSpacing(3);
  for (  XulButton btn : dialogButtons) {
    this.removeChild(btn);
    Widget widget=(Widget)btn.getManagedObject();
    if (!ignoreIndividualButtonAlign) {
      String align=btn.getAlign();
      if (!StringUtils.isEmpty(align)) {
        if (""String_Node_Str"".equals(align)) {
          centerButtonPanel.add(widget);
        }
 else         if (""String_Node_Str"".equals(align)) {
          leftButtonPanel.add(widget);
        }
 else {
          rightButtonPanel.add(widget);
        }
      }
    }
 else {
      if (""String_Node_Str"".equals(buttonalign)) {
        centerButtonPanel.add(widget);
      }
 else       if (""String_Node_Str"".equals(buttonalign)) {
        leftButtonPanel.add(widget);
      }
 else {
        rightButtonPanel.add(widget);
      }
    }
  }
  buttonPanel.add(leftButtonPanel);
  buttonPanel.setCellHorizontalAlignment(leftButtonPanel,HorizontalPanel.ALIGN_LEFT);
  buttonPanel.add(centerButtonPanel);
  buttonPanel.setCellHorizontalAlignment(centerButtonPanel,HorizontalPanel.ALIGN_CENTER);
  buttonPanel.setCellWidth(centerButtonPanel,""String_Node_Str"");
  buttonPanel.add(rightButtonPanel);
  buttonPanel.setCellHorizontalAlignment(rightButtonPanel,HorizontalPanel.ALIGN_RIGHT);
  super.layout();
  for (  XulButton btn : dialogButtons) {
    this.addChild(btn);
  }
  if (buttonPanel != null) {
    HorizontalPanel buttonPanelWrapper=new HorizontalPanel();
    buttonPanelWrapper.setStyleName(""String_Node_Str"");
    buttonPanelWrapper.add(buttonPanel);
    buttonPanelWrapper.setWidth(""String_Node_Str"");
    panel.add(buttonPanelWrapper);
    buttonPanelWrapper.setCellWidth(buttonPanel,""String_Node_Str"");
  }
  panel.setSpacing(1);
  panel.setWidth(getWidth() + ""String_Node_Str"");
  panel.setHeight(getHeight() + ""String_Node_Str"");
  dialog.add(panel);
  GlassPane.getInstance().show();
  dialog.center();
  dialog.show();
  RootPanel.get().add(glasspane);
  Style glassPaneStyle=glasspane.getElement().getStyle();
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glasspane.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (GwtDialog.dialogPos));
  dialog.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (++GwtDialog.dialogPos));
}"
51926,"@Override public Panel getDialogContents(){
  VerticalPanel contentPanel=new VerticalPanel();
  contentPanel.setHeight(""String_Node_Str"");
  contentPanel.setWidth(""String_Node_Str"");
  contentPanel.setStyleName(""String_Node_Str"");
  contentPanel.setWidth(""String_Node_Str"");
  container=contentPanel;
  return contentPanel;
}","@Override public Panel getDialogContents(){
  VerticalPanel contentPanel=new VerticalPanel();
  container=contentPanel;
  return contentPanel;
}"
51927,"public GenericDialog(String tagName){
  super(tagName);
  glasspane.setStyleName(""String_Node_Str"");
  Style glassPaneStyle=glasspane.getElement().getStyle();
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  dialog=new DialogBox(){
    @Override public void hide(){
      super.hide();
      RootPanel.get().remove(glasspane);
      GlassPane.getInstance().hide();
    }
  }
;
}","public GenericDialog(String tagName){
  super(tagName);
  glasspane.setStyleName(""String_Node_Str"");
  Style glassPaneStyle=glasspane.getElement().getStyle();
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  glassPaneStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  dialog=new DialogBox(){
    @Override public void hide(){
      super.hide();
      RootPanel.get().remove(glasspane);
      GlassPane.getInstance().hide();
    }
  }
;
  dialog.add(contents);
}"
51928,"public void show(){
  dialog.setText(title);
  contents.clear();
  Panel p=getDialogContents();
  p.setSize(""String_Node_Str"",""String_Node_Str"");
  contents.add(p);
  contents.setCellHeight(p,""String_Node_Str"");
  p=getButtonPanel();
  p.setWidth(""String_Node_Str"");
  HorizontalPanel buttonPanelWrapper=new HorizontalPanel();
  buttonPanelWrapper.setStyleName(""String_Node_Str"");
  buttonPanelWrapper.add(p);
  buttonPanelWrapper.setWidth(""String_Node_Str"");
  buttonPanelWrapper.setCellWidth(p,""String_Node_Str"");
  contents.add(buttonPanelWrapper);
  contents.setSpacing(3);
  contents.setSize(""String_Node_Str"",""String_Node_Str"");
  dialog.setWidget(contents);
  dialog.setWidth(getWidth() + ""String_Node_Str"");
  dialog.setHeight(getHeight() + ""String_Node_Str"");
  dialog.center();
  dialog.show();
  RootPanel.get().add(glasspane);
  GlassPane.getInstance().show();
  glasspane.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (GwtDialog.dialogPos));
  dialog.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (++GwtDialog.dialogPos));
}","public void show(){
  dialog.setText(title);
  contents.clear();
  VerticalPanel panel=new VerticalPanel();
  Panel p=getDialogContents();
  p.setSize(""String_Node_Str"",""String_Node_Str"");
  p.setStyleName(""String_Node_Str"");
  SimplePanel sp=new SimplePanel();
  sp.getElement().setClassName(""String_Node_Str"");
  sp.add(p);
  panel.add(sp);
  panel.setCellWidth(sp,""String_Node_Str"");
  panel.setCellHeight(sp,""String_Node_Str"");
  panel.setStyleName(""String_Node_Str"");
  contents.add(panel);
  if (getBgcolor() != null) {
    p.getElement().getStyle().setProperty(""String_Node_Str"",getBgcolor());
  }
  p=this.getButtonPanel();
  HorizontalPanel buttonPanelWrapper=new HorizontalPanel();
  buttonPanelWrapper.setStyleName(""String_Node_Str"");
  buttonPanelWrapper.add(p);
  buttonPanelWrapper.setWidth(""String_Node_Str"");
  buttonPanelWrapper.setCellWidth(p,""String_Node_Str"");
  contents.add(buttonPanelWrapper);
  contents.setSpacing(1);
  contents.setWidth(""String_Node_Str"");
  contents.setHeight(""String_Node_Str"");
  dialog.setWidth(getWidth() + ""String_Node_Str"");
  dialog.setHeight(getHeight() + ""String_Node_Str"");
  dialog.center();
  dialog.show();
  RootPanel.get().add(glasspane);
  GlassPane.getInstance().show();
  glasspane.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (GenericDialog.dialogPos));
  dialog.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"" + (++GenericDialog.dialogPos));
}"
51929,"@Override public void layout(){
  super.layout();
  for (  XulComponent comp : getChildNodes()) {
    if (comp instanceof XulDialogheader) {
      header=(XulDialogheader)comp;
    }
  }
}","@Override public void layout(){
  setButtons();
  super.layout();
  for (  XulComponent comp : getChildNodes()) {
    if (comp instanceof XulDialogheader) {
      header=(XulDialogheader)comp;
    }
  }
}"
51930,"public GwtGroupBox(){
  super(ELEMENT_NAME);
  this.orientation=Orient.VERTICAL;
  managedObject=captionPanel=new CaptionPanel();
  captionPanel.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  captionPanel.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  container=new VerticalPanel();
  SimplePanel sp=new SimplePanel();
  sp.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  sp.setWidth(""String_Node_Str"");
  sp.add(container);
  ((VerticalPanel)container).setStyleName(""String_Node_Str"");
  ((CaptionPanel)managedObject).add(sp);
}","public GwtGroupBox(){
  super(ELEMENT_NAME);
  this.orientation=Orient.VERTICAL;
  managedObject=captionPanel=new CaptionPanel();
  captionPanel.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  captionPanel.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  container=new VerticalPanel();
  SimplePanel sp=new SimplePanel();
  sp.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  sp.getElement().getStyle().setProperty(""String_Node_Str"",""String_Node_Str"");
  sp.setWidth(""String_Node_Str"");
  sp.add(container);
  ((VerticalPanel)container).setStyleName(""String_Node_Str"");
  ((CaptionPanel)managedObject).add(sp);
}"
51931,"public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setBinding(srcEle.getAttribute(""String_Node_Str""));
  setOnCommand(srcEle.getAttribute(""String_Node_Str""));
  if (StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setWidth(Integer.parseInt(srcEle.getAttribute(""String_Node_Str"")));
  }
}","public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setBinding(srcEle.getAttribute(""String_Node_Str""));
  setOnCommand(srcEle.getAttribute(""String_Node_Str""));
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setWidth(Integer.parseInt(srcEle.getAttribute(""String_Node_Str"")));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setHeight(Integer.parseInt(srcEle.getAttribute(""String_Node_Str"")));
  }
}"
51932,"@Override public void setHeight(String height){
}","@Override public void setHeight(int height){
  listbox.setHeight(height + ""String_Node_Str"");
}"
51933,"public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setLabel(srcEle.getAttribute(""String_Node_Str""));
  setChecked(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  String command=srcEle.getAttribute(""String_Node_Str"");
  if (command != null && command.trim().length() > 0) {
    setCommand(command);
  }
}","public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  super.init(srcEle,container);
  setLabel(srcEle.getAttribute(""String_Node_Str""));
  setChecked(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
  String command=srcEle.getAttribute(""String_Node_Str"");
  if (command != null && command.trim().length() > 0) {
    setCommand(command);
  }
  if (srcEle.getAttribute(""String_Node_Str"") != null && srcEle.getAttribute(""String_Node_Str"").length() > 0) {
    setClass(srcEle.getAttribute(""String_Node_Str""));
  }
}"
51934,"public void updateUI(){
  if (this.isHierarchical()) {
    populateTree();
  }
 else {
    populateTable();
  }
  ;
}","public void updateUI(){
  if (this.suppressLayout) {
    return;
  }
  if (this.isHierarchical()) {
    populateTree();
  }
 else {
    populateTable();
  }
  ;
}"
51935,"private void setupTable(){
  String cols[]=new String[getColumns().getColumnCount()];
  int len[]=new int[cols.length];
  int totalFlex=0;
  for (int i=0; i < cols.length; i++) {
    totalFlex+=getColumns().getColumn(i).getFlex();
  }
  for (int i=0; i < cols.length; i++) {
    cols[i]=getColumns().getColumn(i).getLabel();
    if (totalFlex > 0 && getWidth() > 0) {
      len[i]=(int)(getWidth() * ((double)getColumns().getColumn(i).getFlex() / totalFlex)) - 15;
    }
  }
  SelectionPolicy policy=SelectionPolicy.DISABLED;
  if (""String_Node_Str"".equals(getSeltype())) {
    policy=SelectionPolicy.ONE_ROW;
  }
 else   if (""String_Node_Str"".equals(getSeltype())) {
    policy=SelectionPolicy.MULTI_ROW;
  }
  int[] colWidths=(getWidth() > 0 && totalFlex > 0) ? len : null;
  table=new BaseTable(cols,colWidths,new BaseColumnComparator[cols.length],policy);
  table.addTableSelectionListener(new TableSelectionListener(){
    public void onAllRowsDeselected(    SourceTableSelectionEvents sender){
    }
    public void onCellHover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onCellUnhover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onRowDeselected(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowHover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowUnhover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowsSelected(    SourceTableSelectionEvents sender,    int firstRow,    int numRows){
      try {
        if (getOnselect() != null && getOnselect().trim().length() > 0) {
          getXulDomContainer().invoke(getOnselect(),new Object[]{});
        }
        Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
        int[] rows=new int[selectedRows.length];
        for (int i=0; i < selectedRows.length; i++) {
          rows[i]=selectedRows[i];
        }
        GwtTree.this.setSelectedRows(rows);
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
  setWidgetInPanel(table);
  table.setTableWidth(""String_Node_Str"");
  table.setTableHeight(""String_Node_Str"");
  if (getWidth() > 0) {
    table.setTableWidth(getWidth() + ""String_Node_Str"");
  }
  if (getHeight() > 0) {
    table.setTableHeight(getHeight() + ""String_Node_Str"");
  }
  updateUI();
}","private void setupTable(){
  String cols[]=new String[getColumns().getColumnCount()];
  int len[]=new int[cols.length];
  int totalFlex=0;
  for (int i=0; i < cols.length; i++) {
    totalFlex+=getColumns().getColumn(i).getFlex();
  }
  for (int i=0; i < cols.length; i++) {
    cols[i]=getColumns().getColumn(i).getLabel();
    if (totalFlex > 0 && getWidth() > 0) {
      len[i]=(int)(getWidth() * ((double)getColumns().getColumn(i).getFlex() / totalFlex)) - 15;
    }
 else     if (getColumns().getColumn(i).getWidth() > 0) {
      len[i]=getColumns().getColumn(i).getWidth();
    }
  }
  SelectionPolicy policy=SelectionPolicy.DISABLED;
  if (""String_Node_Str"".equals(getSeltype())) {
    policy=SelectionPolicy.ONE_ROW;
  }
 else   if (""String_Node_Str"".equals(getSeltype())) {
    policy=SelectionPolicy.MULTI_ROW;
  }
  table=new BaseTable(cols,len,new BaseColumnComparator[cols.length],policy);
  table.addTableSelectionListener(new TableSelectionListener(){
    public void onAllRowsDeselected(    SourceTableSelectionEvents sender){
    }
    public void onCellHover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onCellUnhover(    SourceTableSelectionEvents sender,    int row,    int cell){
    }
    public void onRowDeselected(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowHover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowUnhover(    SourceTableSelectionEvents sender,    int row){
    }
    public void onRowsSelected(    SourceTableSelectionEvents sender,    int firstRow,    int numRows){
      try {
        if (getOnselect() != null && getOnselect().trim().length() > 0) {
          getXulDomContainer().invoke(getOnselect(),new Object[]{});
        }
        Integer[] selectedRows=table.getSelectedRows().toArray(new Integer[table.getSelectedRows().size()]);
        int[] rows=new int[selectedRows.length];
        for (int i=0; i < selectedRows.length; i++) {
          rows[i]=selectedRows[i];
        }
        GwtTree.this.setSelectedRows(rows);
      }
 catch (      XulException e) {
        e.printStackTrace();
      }
    }
  }
);
  setWidgetInPanel(table);
  table.setTableWidth(""String_Node_Str"");
  table.setTableHeight(""String_Node_Str"");
  if (getWidth() > 0) {
    table.setTableWidth(getWidth() + ""String_Node_Str"");
  }
  if (getHeight() > 0) {
    table.setTableHeight(getHeight() + ""String_Node_Str"");
  }
  updateUI();
}"
51936,"public void setPageincrement(int increment){
  this.increment=increment;
}","public void setPageincrement(int increment){
  this.pageIncrement=increment;
}"
51937,"public int getPageincrement(){
  return increment;
}","public int getPageincrement(){
  return pageIncrement;
}"
51938,"public void layout(){
  int orient=(orientation == Orient.VERTICAL) ? JSlider.VERTICAL : JSlider.HORIZONTAL;
  slider=new JSlider(orient,this.min,this.max,Math.max(min,this.value));
  this.managedObject=slider;
  slider.setMajorTickSpacing(this.increment);
  slider.setSnapToTicks(true);
  slider.setPaintTicks(true);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent arg0){
      setValue(SwingScale.this.slider.getValue());
    }
  }
);
}","public void layout(){
  int orient=(orientation == Orient.VERTICAL) ? JSlider.VERTICAL : JSlider.HORIZONTAL;
  slider=new JSlider(orient,this.min,this.max,Math.max(min,this.value));
  this.managedObject=slider;
  slider.setMajorTickSpacing(this.pageIncrement);
  slider.setSnapToTicks(false);
  slider.setPaintTicks(true);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent arg0){
      setValue(SwingScale.this.slider.getValue());
    }
  }
);
}"
51939,"public <T>void setElements(Collection<T> elements){
  boundElements=elements;
  logger.info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  this.model.removeAllElements();
  this.removeItems();
  for (  T t : elements) {
    SwingListitem item=new SwingListitem(null,this,this.xulDomContainer,null);
    String attribute=getBinding();
    if (!StringUtils.isEmpty(attribute)) {
      item.setLabel(extractLabel(t));
    }
    this.addChild(item);
  }
  layout();
}","public <T>void setElements(Collection<T> elements){
  boundElements=elements;
  logger.info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  this.model.removeAllElements();
  this.removeItems();
  for (  T t : elements) {
    SwingListitem item=new SwingListitem(null,this,this.xulDomContainer,null);
    String attribute=getBinding();
    item.setLabel(extractLabel(t));
    this.addChild(item);
  }
  layout();
}"
51940,"public void show(){
  isDialogHidden=false;
  dialog.getShell().setText(title);
  if ((height > 0) && (width > 0)) {
    dialog.setHeight(height);
    dialog.setWidth(width);
  }
  dialog.resizeBounds();
  notifyListeners(XulRoot.EVENT_ON_LOAD);
  returnCode=dialog.open();
}","public void show(){
  if (buttonsCreated == false) {
    setButtons();
  }
  isDialogHidden=false;
  dialog.getShell().setText(title);
  if ((height > 0) && (width > 0)) {
    dialog.setHeight(height);
    dialog.setWidth(width);
  }
  dialog.resizeBounds();
  notifyListeners(XulRoot.EVENT_ON_LOAD);
  returnCode=dialog.open();
}"
51941,"@Override public void layout(){
  this.panel.removeAll();
  if (ico == null || !visible) {
    return;
  }
  if (getHeight() > 0 && getWidth() > 0) {
    ico=new ImageIcon(ico.getImage().getScaledInstance(getWidth(),getHeight(),Image.SCALE_AREA_AVERAGING));
  }
  lbl=new JLabel(ico);
  this.panel.add(lbl,BorderLayout.CENTER);
  if (getHeight() > 0 && getWidth() > 0) {
    this.panel.setMinimumSize(new Dimension(this.getWidth(),this.getHeight()));
  }
}","@Override public void layout(){
  this.panel.removeAll();
  if (ico == null || !visible) {
    return;
  }
  if (getHeight() > 0 && getWidth() > 0) {
    ico=new ImageIcon(ico.getImage().getScaledInstance(getWidth(),getHeight(),Image.SCALE_AREA_AVERAGING));
  }
  lbl=new JLabel(ico);
  this.panel.add(lbl,BorderLayout.CENTER);
  if (getHeight() > 0 && getWidth() > 0) {
    this.panel.setMinimumSize(new Dimension(this.getWidth(),this.getHeight()));
  }
  panel.revalidate();
}"
51942,"public void setValue(String text){
  if (text != null && !(text.equals(value))) {
    String prevVal=this.value;
    this.value=text;
    textBox.setText(text);
    this.firePropertyChange(""String_Node_Str"",prevVal,text);
  }
}","public void setValue(String text){
  String prevVal=this.value;
  this.value=text;
  textBox.setText(text);
  this.firePropertyChange(""String_Node_Str"",prevVal,text);
}"
51943,"@Override public void layout(){
  super.layout();
  if (this instanceof XulDeck) {
    return;
  }
  if (!(getManagedObject() instanceof Composite)) {
    return;
  }
  Composite container=(Composite)getManagedObject();
  int totalFlex=0;
  int thisFlex=0;
  boolean everyChildIsFlexing=true;
  for (  Object child : this.getChildNodes()) {
    thisFlex=((SwtElement)child).getFlex();
    if (thisFlex <= 0) {
      everyChildIsFlexing=false;
    }
    totalFlex+=thisFlex;
  }
switch (orient) {
case HORIZONTAL:
    int columnCount=this.getChildNodes().size() + totalFlex;
  container.setLayout(new GridLayout(columnCount,everyChildIsFlexing));
break;
case VERTICAL:
container.setLayout(new GridLayout());
break;
}
for (Object child : this.getChildNodes()) {
SwtElement swtChild=(SwtElement)child;
Object mo=swtChild.getManagedObject();
if (mo == null || !(mo instanceof Control) || swtChild instanceof XulDialog) {
continue;
}
Control c=(Control)swtChild.getManagedObject();
GridData data=new GridData();
data.horizontalSpan=orient.equals(Orient.HORIZONTAL) ? swtChild.getFlex() + 1 : 1;
data.verticalSpan=orient.equals(Orient.VERTICAL) ? swtChild.getFlex() + 1 : 1;
switch (orient) {
case HORIZONTAL:
data.verticalAlignment=SWT.FILL;
data.grabExcessVerticalSpace=true;
break;
case VERTICAL:
data.horizontalAlignment=SWT.FILL;
data.grabExcessHorizontalSpace=true;
break;
}
if (swtChild.getFlex() > 0) {
data.grabExcessHorizontalSpace=true;
data.grabExcessVerticalSpace=true;
data.horizontalAlignment=SWT.FILL;
data.verticalAlignment=SWT.FILL;
}
if (swtChild instanceof XulContainer && ((XulContainer)swtChild).getAlign() != null) {
SwtAlign swtAlign=SwtAlign.valueOf(((XulContainer)swtChild).getAlign().toString());
if (orient.equals(Orient.HORIZONTAL)) {
data.verticalAlignment=swtAlign.getSwtAlign();
if (data.verticalAlignment == SWT.FILL) {
data.grabExcessVerticalSpace=true;
}
}
 else {
data.horizontalAlignment=swtAlign.getSwtAlign();
if (data.horizontalAlignment == SWT.FILL) {
data.grabExcessHorizontalSpace=true;
}
}
}
c.setLayoutData(data);
}
container.layout(true);
}","@Override public void layout(){
  super.layout();
  if (this instanceof XulDeck) {
    return;
  }
  if (!(getManagedObject() instanceof Composite)) {
    return;
  }
  Composite container=(Composite)getManagedObject();
  int totalFlex=0;
  int thisFlex=0;
  boolean everyChildIsFlexing=true;
  for (  Object child : this.getChildNodes()) {
    thisFlex=((SwtElement)child).getFlex();
    if (thisFlex <= 0) {
      everyChildIsFlexing=false;
    }
    totalFlex+=thisFlex;
  }
switch (orient) {
case HORIZONTAL:
    int columnCount=this.getChildNodes().size() + totalFlex;
  container.setLayout(new GridLayout(columnCount,everyChildIsFlexing));
break;
case VERTICAL:
container.setLayout(new GridLayout());
break;
}
for (Object child : this.getChildNodes()) {
SwtElement swtChild=(SwtElement)child;
Object mo=swtChild.getManagedObject();
if (mo == null || !(mo instanceof Control) || swtChild instanceof XulDialog) {
continue;
}
Control c=(Control)swtChild.getManagedObject();
GridData data=new GridData();
data.horizontalSpan=orient.equals(Orient.HORIZONTAL) ? swtChild.getFlex() + 1 : 1;
data.verticalSpan=orient.equals(Orient.VERTICAL) ? swtChild.getFlex() + 1 : 1;
switch (orient) {
case HORIZONTAL:
data.verticalAlignment=SWT.FILL;
data.grabExcessVerticalSpace=true;
break;
case VERTICAL:
data.horizontalAlignment=SWT.FILL;
data.grabExcessHorizontalSpace=true;
break;
}
if (swtChild.getFlex() > 0) {
data.grabExcessHorizontalSpace=true;
data.grabExcessVerticalSpace=true;
data.horizontalAlignment=SWT.FILL;
data.verticalAlignment=SWT.FILL;
}
if (((XulComponent)swtChild).getAlign() != null) {
SwtAlign swtAlign=SwtAlign.valueOf(((XulContainer)swtChild).getAlign().toString());
if (orient.equals(Orient.HORIZONTAL)) {
data.grabExcessVerticalSpace=true;
}
 else {
data.grabExcessHorizontalSpace=true;
}
}
c.setLayoutData(data);
}
container.layout(true);
}"
51944,"@Override public void layout(){
  if (type == Type.CHECKBOX || type == Type.RADIO) {
    final AbstractButton oldButton=getButton();
    final AbstractButton button=new JToggleButton();
    button.setText(oldButton.getText());
    button.setIcon(oldButton.getIcon());
    button.setEnabled(oldButton.isEnabled());
    button.setSelected(this.selected);
    if (this.getOnclick() != null) {
      this.setOnclick(this.getOnclick());
    }
    setButton(button);
  }
  final AbstractButton button=getButton();
  if (this.orientation == Orient.VERTICAL) {
    button.setHorizontalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      button.setVerticalTextPosition(JButton.BOTTOM);
    }
 else {
      button.setVerticalTextPosition(JButton.TOP);
    }
  }
 else {
    button.setVerticalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      button.setHorizontalTextPosition(JButton.RIGHT);
    }
 else {
      button.setHorizontalTextPosition(JButton.LEFT);
    }
  }
  final Icon icon=button.getIcon();
  if (""String_Node_Str"".equals(button.getText()) && icon != null && icon.getIconHeight() == icon.getIconWidth()) {
    Dimension dim=button.getPreferredSize();
    button.setMinimumSize(new Dimension(dim.height,dim.height));
    button.setPreferredSize(new Dimension(dim.height,dim.height));
  }
  button.setToolTipText(this.getTooltiptext());
  super.layout();
}","@Override public void layout(){
  if (type == Type.CHECKBOX || type == Type.RADIO) {
    final AbstractButton oldButton=getButton();
    final AbstractButton button=new JToggleButton();
    button.setText(oldButton.getText());
    button.setIcon(oldButton.getIcon());
    button.setEnabled(oldButton.isEnabled());
    button.setSelected(this.selected);
    setButton(button);
    if (this.getOnclick() != null) {
      this.setOnclick(this.getOnclick());
    }
  }
  final AbstractButton button=getButton();
  if (this.orientation == Orient.VERTICAL) {
    button.setHorizontalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      button.setVerticalTextPosition(JButton.BOTTOM);
    }
 else {
      button.setVerticalTextPosition(JButton.TOP);
    }
  }
 else {
    button.setVerticalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      button.setHorizontalTextPosition(JButton.RIGHT);
    }
 else {
      button.setHorizontalTextPosition(JButton.LEFT);
    }
  }
  final Icon icon=button.getIcon();
  if (""String_Node_Str"".equals(button.getText()) && icon != null && icon.getIconHeight() == icon.getIconWidth()) {
    Dimension dim=button.getPreferredSize();
    button.setMinimumSize(new Dimension(dim.height,dim.height));
    button.setPreferredSize(new Dimension(dim.height,dim.height));
  }
  button.setToolTipText(this.getTooltiptext());
  super.layout();
}"
51945,"@Override public void layout(){
  this.panel.removeAll();
  if (ico == null) {
    return;
  }
  if (getHeight() > 0 && getWidth() > 0) {
    ico=new ImageIcon(ico.getImage().getScaledInstance(getWidth(),getHeight(),Image.SCALE_AREA_AVERAGING));
  }
  lbl=new JLabel(ico);
  this.panel.add(lbl,BorderLayout.CENTER);
  if (getHeight() > 0 && getWidth() > 0) {
    this.panel.setMinimumSize(new Dimension(this.getWidth(),this.getHeight()));
  }
}","@Override public void layout(){
  this.panel.removeAll();
  if (ico == null || !visible) {
    return;
  }
  if (getHeight() > 0 && getWidth() > 0) {
    ico=new ImageIcon(ico.getImage().getScaledInstance(getWidth(),getHeight(),Image.SCALE_AREA_AVERAGING));
  }
  lbl=new JLabel(ico);
  this.panel.add(lbl,BorderLayout.CENTER);
  if (getHeight() > 0 && getWidth() > 0) {
    this.panel.setMinimumSize(new Dimension(this.getWidth(),this.getHeight()));
  }
}"
51946,"private void setupTable(){
  tableModel=new XulTableModel(this);
  table.setModel(this.tableModel);
  TableColumnModel columnModel=table.getColumnModel();
  for (int i=0; i < columns.getChildNodes().size(); i++) {
    if (i >= columnModel.getColumnCount()) {
      break;
    }
    SwingTreeCol child=(SwingTreeCol)columns.getChildNodes().get(i);
    TableColumn col=columnModel.getColumn(i);
    totalFlex+=child.getFlex();
    col.setHeaderValue(child.getLabel());
    col.setCellEditor(getCellEditor(child));
    col.setCellRenderer(getCellRenderer(child));
    initialized=true;
  }
  table.addComponentListener(new ComponentListener(){
    boolean loaded=false;
    public void componentHidden(    ComponentEvent arg0){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      if (loaded) {
        return;
      }
      Rectangle size=table.getBounds();
      int newWidth=size.width;
      if (SwingTree.this.rows > -1) {
        int minHeight=table.getRowHeight() * rows;
        scrollpane.getViewport().setMinimumSize(new Dimension(scrollpane.getWidth(),minHeight - 100));
      }
      int newHeight=size.height;
      for (int i=0; i < table.getColumnCount(); i++) {
        int flex=SwingTree.this.columns.getColumn(table.getColumnModel().getColumn(i).getModelIndex()).getFlex();
        int newColWidth=(int)(newWidth * ((double)flex / totalFlex));
        int headerWidth=table.getColumnModel().getColumn(i).getPreferredWidth();
        int setWidth=newColWidth;
        table.getColumnModel().getColumn(i).setWidth(setWidth);
        table.getColumnModel().getColumn(i).setPreferredWidth(setWidth);
      }
      loaded=true;
    }
  }
);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (event.getValueIsAdjusting() == true) {
        return;
      }
      SwingTree.this.changeSupport.firePropertyChange(""String_Node_Str"",null,SwingTree.this.getSelectedRows());
    }
  }
);
  table.getTableHeader().setReorderingAllowed(this.isEnableColumnDrag());
  this.setDisabled(this.isDisabled());
}","private void setupTable(){
  tableModel=new XulTableModel(this);
  table.setModel(this.tableModel);
  this.setSeltype(getSeltype());
  TableColumnModel columnModel=table.getColumnModel();
  for (int i=0; i < columns.getChildNodes().size(); i++) {
    if (i >= columnModel.getColumnCount()) {
      break;
    }
    SwingTreeCol child=(SwingTreeCol)columns.getChildNodes().get(i);
    TableColumn col=columnModel.getColumn(i);
    totalFlex+=child.getFlex();
    col.setHeaderValue(child.getLabel());
    col.setCellEditor(getCellEditor(child));
    col.setCellRenderer(getCellRenderer(child));
    initialized=true;
  }
  table.addComponentListener(new ComponentListener(){
    boolean loaded=false;
    public void componentHidden(    ComponentEvent arg0){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      if (loaded) {
        return;
      }
      Rectangle size=table.getBounds();
      int newWidth=size.width;
      if (SwingTree.this.rows > -1) {
        int minHeight=table.getRowHeight() * rows;
        scrollpane.getViewport().setMinimumSize(new Dimension(scrollpane.getWidth(),minHeight - 100));
      }
      int newHeight=size.height;
      for (int i=0; i < table.getColumnCount(); i++) {
        int flex=SwingTree.this.columns.getColumn(table.getColumnModel().getColumn(i).getModelIndex()).getFlex();
        int newColWidth=(int)(newWidth * ((double)flex / totalFlex));
        int headerWidth=table.getColumnModel().getColumn(i).getPreferredWidth();
        int setWidth=newColWidth;
        table.getColumnModel().getColumn(i).setWidth(setWidth);
        table.getColumnModel().getColumn(i).setPreferredWidth(setWidth);
      }
      loaded=true;
    }
  }
);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (event.getValueIsAdjusting() == true) {
        return;
      }
      SwingTree.this.changeSupport.firePropertyChange(""String_Node_Str"",null,SwingTree.this.getSelectedRows());
    }
  }
);
  table.getTableHeader().setReorderingAllowed(this.isEnableColumnDrag());
  this.setDisabled(this.isDisabled());
}"
51947,"public void setSeltype(String type){
  if (table == null) {
    return;
  }
  this.selType=SELECTION_MODE.valueOf(type.toUpperCase());
switch (this.selType) {
case CELL:
    table.setCellSelectionEnabled(true);
  break;
case MULTIPLE:
table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
break;
case SINGLE:
table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
break;
}
}","public void setSeltype(String type){
  this.selType=SELECTION_MODE.valueOf(type.toUpperCase());
  if (table == null) {
    return;
  }
switch (this.selType) {
case CELL:
    table.setCellSelectionEnabled(true);
  break;
case MULTIPLE:
table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
break;
case SINGLE:
table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
break;
}
}"
51948,"public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  if (srcEle.hasAttribute(""String_Node_Str"")) {
    managedObject=imageButton=new ImageButton();
  }
 else {
    managedObject=button=new RoundedButton();
  }
  super.init(srcEle,container);
  setLabel(srcEle.getAttribute(""String_Node_Str""));
  setOnclick(srcEle.getAttribute(""String_Node_Str""));
  setImage(srcEle.getAttribute(""String_Node_Str""));
  setTooltiptext(srcEle.getAttribute(""String_Node_Str""));
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
}","public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  if (srcEle.hasAttribute(""String_Node_Str"")) {
    button=null;
    managedObject=imageButton=new ImageButton();
  }
 else {
    managedObject=button=new RoundedButton();
  }
  super.init(srcEle,container);
  setLabel(srcEle.getAttribute(""String_Node_Str""));
  setOnclick(srcEle.getAttribute(""String_Node_Str""));
  setImage(srcEle.getAttribute(""String_Node_Str""));
  setTooltiptext(srcEle.getAttribute(""String_Node_Str""));
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
}"
51949,"public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  if (srcEle.hasAttribute(""String_Node_Str"")) {
    button=null;
    managedObject=imageButton=new ImageButton();
  }
 else {
    managedObject=button=new RoundedButton();
  }
  super.init(srcEle,container);
  setLabel(srcEle.getAttribute(""String_Node_Str""));
  setOnclick(srcEle.getAttribute(""String_Node_Str""));
  setImage(srcEle.getAttribute(""String_Node_Str""));
  setTooltiptext(srcEle.getAttribute(""String_Node_Str""));
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
}","public void init(com.google.gwt.xml.client.Element srcEle,XulDomContainer container){
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    button=null;
    managedObject=imageButton=new ImageButton();
  }
 else {
    managedObject=button=new RoundedButton();
  }
  super.init(srcEle,container);
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setLabel(srcEle.getAttribute(""String_Node_Str""));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setOnclick(srcEle.getAttribute(""String_Node_Str""));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setImage(srcEle.getAttribute(""String_Node_Str""));
  }
  if (!StringUtils.isEmpty(srcEle.getAttribute(""String_Node_Str""))) {
    setTooltiptext(srcEle.getAttribute(""String_Node_Str""));
  }
  setDisabled(""String_Node_Str"".equals(srcEle.getAttribute(""String_Node_Str"")));
}"
51950,"public void layout(){
  XulTreeItem item=(XulTreeItem)this.getRootChildren().getFirstChild();
  if (item.getAttributeValue(""String_Node_Str"") != null && item.getAttributeValue(""String_Node_Str"").equals(""String_Node_Str"")) {
    isHierarchical=true;
  }
  if (isHierarchical()) {
    setupTree();
  }
 else {
    setupTable();
  }
}","public void layout(){
  XulTreeItem item=(XulTreeItem)this.getRootChildren().getFirstChild();
  if (item != null && item.getAttributeValue(""String_Node_Str"") != null && item.getAttributeValue(""String_Node_Str"").equals(""String_Node_Str"")) {
    isHierarchical=true;
  }
  if (isHierarchical()) {
    setupTree();
  }
 else {
    setupTable();
  }
}"
51951,"public void setOnselect(final String select){
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (event.getValueIsAdjusting() == true) {
        return;
      }
      invoke(select,new Object[]{new Integer(table.getSelectedRow())});
    }
  }
);
}","public void setOnselect(final String select){
  if (table != null) {
    table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
      public void valueChanged(      ListSelectionEvent event){
        if (event.getValueIsAdjusting() == true) {
          return;
        }
        invoke(select,new Object[]{new Integer(table.getSelectedRow())});
      }
    }
);
  }
}"
51952,"public void setDisabled(boolean dis){
  this.disabled=dis;
  table.setEnabled(!this.disabled);
}","public void setDisabled(boolean dis){
  this.disabled=dis;
  if (table != null) {
    table.setEnabled(!this.disabled);
  }
}"
51953,"private void setupTable(){
  tableModel=new XulTableModel(this);
  table.setModel(this.tableModel);
  TableColumnModel columnModel=table.getColumnModel();
  for (int i=0; i < columns.getChildNodes().size(); i++) {
    if (i >= columnModel.getColumnCount()) {
      break;
    }
    SwingTreeCol child=(SwingTreeCol)columns.getChildNodes().get(i);
    TableColumn col=columnModel.getColumn(i);
    totalFlex+=child.getFlex();
    col.setHeaderValue(child.getLabel());
    col.setCellEditor(getCellEditor(child));
    col.setCellRenderer(getCellRenderer(child));
    initialized=true;
  }
  table.addComponentListener(new ComponentListener(){
    boolean loaded=false;
    public void componentHidden(    ComponentEvent arg0){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      if (loaded) {
        return;
      }
      Rectangle size=table.getBounds();
      int newWidth=size.width;
      if (SwingTree.this.rows > -1) {
        int minHeight=table.getRowHeight() * rows;
        scrollpane.getViewport().setMinimumSize(new Dimension(scrollpane.getWidth(),minHeight - 100));
      }
      int newHeight=size.height;
      for (int i=0; i < table.getColumnCount(); i++) {
        int flex=SwingTree.this.columns.getColumn(table.getColumnModel().getColumn(i).getModelIndex()).getFlex();
        int newColWidth=(int)(newWidth * ((double)flex / totalFlex));
        int headerWidth=table.getColumnModel().getColumn(i).getPreferredWidth();
        int setWidth=newColWidth;
        table.getColumnModel().getColumn(i).setWidth(setWidth);
        table.getColumnModel().getColumn(i).setPreferredWidth(setWidth);
      }
      loaded=true;
    }
  }
);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (event.getValueIsAdjusting() == true) {
        return;
      }
      SwingTree.this.changeSupport.firePropertyChange(""String_Node_Str"",null,SwingTree.this.getSelectedRows());
    }
  }
);
  table.getTableHeader().setReorderingAllowed(this.isEnableColumnDrag());
}","private void setupTable(){
  tableModel=new XulTableModel(this);
  table.setModel(this.tableModel);
  TableColumnModel columnModel=table.getColumnModel();
  for (int i=0; i < columns.getChildNodes().size(); i++) {
    if (i >= columnModel.getColumnCount()) {
      break;
    }
    SwingTreeCol child=(SwingTreeCol)columns.getChildNodes().get(i);
    TableColumn col=columnModel.getColumn(i);
    totalFlex+=child.getFlex();
    col.setHeaderValue(child.getLabel());
    col.setCellEditor(getCellEditor(child));
    col.setCellRenderer(getCellRenderer(child));
    initialized=true;
  }
  table.addComponentListener(new ComponentListener(){
    boolean loaded=false;
    public void componentHidden(    ComponentEvent arg0){
    }
    public void componentMoved(    ComponentEvent e){
    }
    public void componentShown(    ComponentEvent e){
    }
    public void componentResized(    ComponentEvent e){
      if (loaded) {
        return;
      }
      Rectangle size=table.getBounds();
      int newWidth=size.width;
      if (SwingTree.this.rows > -1) {
        int minHeight=table.getRowHeight() * rows;
        scrollpane.getViewport().setMinimumSize(new Dimension(scrollpane.getWidth(),minHeight - 100));
      }
      int newHeight=size.height;
      for (int i=0; i < table.getColumnCount(); i++) {
        int flex=SwingTree.this.columns.getColumn(table.getColumnModel().getColumn(i).getModelIndex()).getFlex();
        int newColWidth=(int)(newWidth * ((double)flex / totalFlex));
        int headerWidth=table.getColumnModel().getColumn(i).getPreferredWidth();
        int setWidth=newColWidth;
        table.getColumnModel().getColumn(i).setWidth(setWidth);
        table.getColumnModel().getColumn(i).setPreferredWidth(setWidth);
      }
      loaded=true;
    }
  }
);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent event){
      if (event.getValueIsAdjusting() == true) {
        return;
      }
      SwingTree.this.changeSupport.firePropertyChange(""String_Node_Str"",null,SwingTree.this.getSelectedRows());
    }
  }
);
  table.getTableHeader().setReorderingAllowed(this.isEnableColumnDrag());
  this.setDisabled(this.isDisabled());
}"
51954,"private Object[] getArgs(String methodCall){
  if (methodCall.indexOf(""String_Node_Str"") > -1) {
    return null;
  }
  String argsList=methodCall.substring(methodCall.indexOf(""String_Node_Str"") + 1,methodCall.indexOf(""String_Node_Str""));
  String[] stringArgs=argsList.split(""String_Node_Str"");
  Object[] args=new Object[stringArgs.length];
  int i=-1;
  for (  String obj : stringArgs) {
    i++;
    obj=obj.trim();
    try {
      Integer num=Integer.valueOf(obj);
      args[i]=num;
      continue;
    }
 catch (    NumberFormatException e) {
      try {
        Double num=Double.valueOf(obj);
        args[i]=num;
        continue;
      }
 catch (      NumberFormatException e2) {
        try {
          if (obj.indexOf('\'') == -1 && obj.indexOf('\""') == -1) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          String str=obj.replaceAll(""String_Node_Str"",""String_Node_Str"");
          str=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
          args[i]=str;
          continue;
        }
 catch (        IllegalArgumentException e4) {
          try {
            Boolean flag=Boolean.parseBoolean(obj);
            args[i]=flag;
            continue;
          }
 catch (          NumberFormatException e3) {
            continue;
          }
        }
      }
    }
  }
  return args;
}","private Object[] getArgs(String methodCall){
  if (methodCall.endsWith(""String_Node_Str"")) {
    return null;
  }
  String argsList=methodCall.substring(methodCall.indexOf(""String_Node_Str"") + 1,methodCall.lastIndexOf(""String_Node_Str""));
  String[] stringArgs=argsList.split(""String_Node_Str"");
  Object[] args=new Object[stringArgs.length];
  int i=-1;
  for (  String obj : stringArgs) {
    i++;
    obj=obj.trim();
    try {
      Integer num=Integer.valueOf(obj);
      args[i]=num;
      continue;
    }
 catch (    NumberFormatException e) {
      try {
        Double num=Double.valueOf(obj);
        args[i]=num;
        continue;
      }
 catch (      NumberFormatException e2) {
        try {
          if (obj.indexOf('\'') == -1 && obj.indexOf('\""') == -1) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          String str=obj.replaceAll(""String_Node_Str"",""String_Node_Str"");
          str=str.replaceAll(""String_Node_Str"",""String_Node_Str"");
          args[i]=str;
          continue;
        }
 catch (        IllegalArgumentException e4) {
          try {
            Boolean flag=Boolean.parseBoolean(obj);
            args[i]=flag;
            continue;
          }
 catch (          NumberFormatException e3) {
            continue;
          }
        }
      }
    }
  }
  return args;
}"
51955,"private void applyOverlay(Document doc){
  this.document=getDocumentRoot();
  for (  XulComponent overlay : doc.getChildNodes()) {
    for (    XulComponent child : overlay.getChildNodes()) {
      XulComponent sourceDocumentNodeMatch;
      String childId=child.getId();
      if (childId != null && (sourceDocumentNodeMatch=this.document.getElementById(childId)) != null) {
        if (child.getRemoveelement()) {
          sourceDocumentNodeMatch.getParent().removeChild(sourceDocumentNodeMatch);
          continue;
        }
        sourceDocumentNodeMatch.adoptAttributes(child);
        for (        XulComponent overlayChild : child.getChildNodes()) {
          int position=overlayChild.getPosition();
          String insertBefore=overlayChild.getInsertbefore();
          String insertAfter=overlayChild.getInsertafter();
          XulContainer sourceContainer=((XulContainer)sourceDocumentNodeMatch);
          if (position > -1) {
            sourceContainer.addChildAt(overlayChild,position);
          }
 else           if (insertBefore != null) {
            XulComponent relativeTo=document.getElementById(insertBefore);
            if (relativeTo != null && sourceDocumentNodeMatch.getChildNodes().contains(relativeTo)) {
              int relativePos=sourceDocumentNodeMatch.getChildNodes().indexOf(relativeTo);
              relativePos--;
              Math.abs(relativePos);
              sourceContainer.addChildAt(overlayChild,relativePos);
            }
 else {
              sourceContainer.addChild(overlayChild);
            }
          }
 else           if (insertAfter != null) {
            XulComponent relativeTo=document.getElementById(insertAfter);
            if (relativeTo != null && sourceDocumentNodeMatch.getChildNodes().contains(relativeTo)) {
              int relativePos=sourceDocumentNodeMatch.getChildNodes().indexOf(relativeTo);
              relativePos++;
              sourceContainer.addChildAt(overlayChild,relativePos);
            }
 else {
              sourceContainer.addChild(overlayChild);
            }
          }
 else {
            sourceContainer.addChild(overlayChild);
          }
        }
      }
    }
  }
}","private void applyOverlay(Document doc){
  this.document=getDocumentRoot();
  for (  XulComponent overlay : doc.getChildNodes()) {
    for (    XulComponent child : overlay.getChildNodes()) {
      XulComponent sourceDocumentNodeMatch;
      String childId=child.getId();
      if (childId != null && (sourceDocumentNodeMatch=this.document.getElementById(childId)) != null) {
        if (child.getRemoveelement()) {
          sourceDocumentNodeMatch.getParent().removeChild(sourceDocumentNodeMatch);
          continue;
        }
        sourceDocumentNodeMatch.adoptAttributes(child);
        for (        XulComponent overlayChild : child.getChildNodes()) {
          int position=overlayChild.getPosition();
          String insertBefore=overlayChild.getInsertbefore();
          String insertAfter=overlayChild.getInsertafter();
          XulContainer sourceContainer=((XulContainer)sourceDocumentNodeMatch);
          ((AbstractGwtXulComponent)overlayChild).setXulDomContainer(this);
          if (position > -1) {
            sourceContainer.addChildAt(overlayChild,position);
          }
 else           if (insertBefore != null) {
            XulComponent relativeTo=document.getElementById(insertBefore);
            if (relativeTo != null && sourceDocumentNodeMatch.getChildNodes().contains(relativeTo)) {
              int relativePos=sourceDocumentNodeMatch.getChildNodes().indexOf(relativeTo);
              relativePos--;
              Math.abs(relativePos);
              sourceContainer.addChildAt(overlayChild,relativePos);
            }
 else {
              sourceContainer.addChild(overlayChild);
            }
          }
 else           if (insertAfter != null) {
            XulComponent relativeTo=document.getElementById(insertAfter);
            if (relativeTo != null && sourceDocumentNodeMatch.getChildNodes().contains(relativeTo)) {
              int relativePos=sourceDocumentNodeMatch.getChildNodes().indexOf(relativeTo);
              relativePos++;
              sourceContainer.addChildAt(overlayChild,relativePos);
            }
 else {
              sourceContainer.addChild(overlayChild);
            }
          }
 else {
            sourceContainer.addChild(overlayChild);
          }
        }
      }
    }
  }
}"
51956,"public void initialize() throws XulException {
  XulWindow rootEle=(XulWindow)containers.get(0).getDocumentRoot().getRootElement();
  System.out.println(""String_Node_Str"" + rootEle.getOnload());
  String onLoad=rootEle.getOnload();
  if (onLoad != null) {
    String onloads[]=onLoad.split(""String_Node_Str"");
    for (    String ol : onloads) {
      containers.get(0).invoke(ol.trim(),new Object[]{});
    }
  }
  if (rootEle instanceof GwtWindow) {
    rootFrame=(Panel)((GwtWindow)rootEle).getManagedObject();
  }
 else {
    throw new XulException(""String_Node_Str"");
  }
}","public void initialize() throws XulException {
  XulComponent c=containers.get(0).getDocumentRoot().getRootElement();
  if (c instanceof XulWindow == false) {
    return;
  }
  XulWindow rootEle=(XulWindow)containers.get(0).getDocumentRoot().getRootElement();
  System.out.println(""String_Node_Str"" + rootEle.getOnload());
  String onLoad=rootEle.getOnload();
  if (onLoad != null) {
    String onloads[]=onLoad.split(""String_Node_Str"");
    for (    String ol : onloads) {
      containers.get(0).invoke(ol.trim(),new Object[]{});
    }
  }
  if (rootEle instanceof GwtWindow) {
    rootFrame=(Panel)((GwtWindow)rootEle).getManagedObject();
  }
 else {
    throw new XulException(""String_Node_Str"");
  }
}"
51957,"private void generateMethods(SourceWriter sourceWriter){
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  try {
    JClassType classType=typeOracle.getType(typeName);
    for (    JMethod m : classType.getMethods()) {
      String methodName=m.getName();
      if (!m.isPublic()) {
        continue;
      }
      sourceWriter.println(""String_Node_Str"" + methodName + ""String_Node_Str"");
      sourceWriter.indent();
      boolean firstParam=true;
      sourceWriter.print(""String_Node_Str"" + methodName + ""String_Node_Str"");
      int argPos=0;
      for (      JParameter param : m.getParameters()) {
        if (!firstParam) {
          sourceWriter.print(""String_Node_Str"");
        }
 else {
          firstParam=false;
        }
        sourceWriter.print(""String_Node_Str"" + boxPrimative(param.getType()) + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
      }
      sourceWriter.print(""String_Node_Str"");
      sourceWriter.println(""String_Node_Str"");
      sourceWriter.outdent();
      sourceWriter.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
  }
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(handlerClassName + ""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"" + handlerClassName + ""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
}","private void generateMethods(SourceWriter sourceWriter){
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  try {
    JClassType classType=typeOracle.getType(typeName);
    for (    JMethod m : classType.getMethods()) {
      String methodName=m.getName();
      if (!m.isPublic()) {
        continue;
      }
      sourceWriter.println(""String_Node_Str"" + methodName + ""String_Node_Str"");
      sourceWriter.indent();
      boolean firstParam=true;
      sourceWriter.print(""String_Node_Str"" + methodName + ""String_Node_Str"");
      int argPos=0;
      for (      JParameter param : m.getParameters()) {
        if (!firstParam) {
          sourceWriter.print(""String_Node_Str"");
        }
 else {
          firstParam=false;
        }
        sourceWriter.print(""String_Node_Str"" + boxPrimative(param.getType()) + ""String_Node_Str""+ argPos+ ""String_Node_Str"");
        argPos++;
      }
      sourceWriter.print(""String_Node_Str"");
      sourceWriter.println(""String_Node_Str"");
      sourceWriter.outdent();
      sourceWriter.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
  }
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(handlerClassName + ""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"" + handlerClassName + ""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.indent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
  sourceWriter.println(""String_Node_Str"");
}"
51958,"public void bundleLoaded(String bundleName){
  if (fromSource) {
    if (loadingOverlay) {
      loadOverlay(xulSrc);
    }
    if (removingOverlay) {
      removeOverlay(xulSrc);
    }
 else {
      generateXulContainer(xulSrc);
    }
    return;
  }
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,xulSrc);
    try {
      Request response=builder.sendRequest(null,new RequestCallback(){
        public void onError(        Request request,        Throwable exception){
          Window.alert(""String_Node_Str"" + exception.getMessage());
        }
        public void onResponseReceived(        Request request,        Response response){
          if (AsyncXulLoader.this.loadingOverlay) {
            loadOverlay(response.getText());
          }
 else           if (AsyncXulLoader.this.removingOverlay) {
            removeOverlay(response.getText());
          }
 else {
            generateXulContainer(response.getText());
          }
        }
      }
);
    }
 catch (    RequestException e) {
      Window.alert(""String_Node_Str"" + e.getMessage());
    }
  }
 catch (  Exception e) {
    Window.alert(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","public void bundleLoaded(String bundleName){
  if (fromSource) {
    if (loadingOverlay) {
      loadOverlay(xulSrc);
    }
 else     if (removingOverlay) {
      removeOverlay(xulSrc);
    }
 else {
      generateXulContainer(xulSrc);
    }
    return;
  }
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,xulSrc);
    try {
      Request response=builder.sendRequest(null,new RequestCallback(){
        public void onError(        Request request,        Throwable exception){
          Window.alert(""String_Node_Str"" + exception.getMessage());
        }
        public void onResponseReceived(        Request request,        Response response){
          if (AsyncXulLoader.this.loadingOverlay) {
            loadOverlay(response.getText());
          }
 else           if (AsyncXulLoader.this.removingOverlay) {
            removeOverlay(response.getText());
          }
 else {
            generateXulContainer(response.getText());
          }
        }
      }
);
    }
 catch (    RequestException e) {
      Window.alert(""String_Node_Str"" + e.getMessage());
    }
  }
 catch (  Exception e) {
    Window.alert(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}"
51959,"public void processOverlay(String overlaySrc,org.pentaho.ui.xul.dom.Document targetDocument,XulDomContainer container) throws XulException {
  InputStream in=getInputStreamForSrc(overlaySrc);
  Document doc=null;
  ResourceBundle res=null;
  try {
    res=ResourceBundle.getBundle(overlaySrc.replace(""String_Node_Str"",""String_Node_Str""));
    if (res == null) {
      res=ResourceBundle.getBundle((this.getRootDir() + overlaySrc).replace(""String_Node_Str"",""String_Node_Str""));
      if (res == null) {
        logger.error(""String_Node_Str"");
        res=mainBundle;
      }
    }
  }
 catch (  MissingResourceException e) {
    logger.warn(""String_Node_Str"" + overlaySrc);
  }
  String runningTranslatedOutput=getDocFromInputStream(in).asXML();
  if (res != null) {
    try {
      runningTranslatedOutput=ResourceBundleTranslator.translate(runningTranslatedOutput,res);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + overlaySrc,e);
    }
  }
  if (this.mainBundle != null) {
    try {
      runningTranslatedOutput=ResourceBundleTranslator.translate(runningTranslatedOutput,this.mainBundle);
      try {
        SAXReader rdr=new SAXReader();
        String upperedIdDoc=this.upperCaseIDAttrs(runningTranslatedOutput.toString());
        doc=rdr.read(new StringReader(upperedIdDoc));
      }
 catch (      DocumentException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    try {
      SAXReader rdr=new SAXReader();
      String upperedIdDoc=this.upperCaseIDAttrs(runningTranslatedOutput.toString());
      doc=rdr.read(new StringReader(upperedIdDoc));
    }
 catch (    DocumentException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  Element overlayRoot=doc.getRootElement();
  for (  Object child : overlayRoot.elements()) {
    Element overlay=(Element)child;
    String overlayId=overlay.attributeValue(""String_Node_Str"");
    org.pentaho.ui.xul.dom.Element sourceElement=targetDocument.getElementById(overlayId);
    if (sourceElement == null) {
      logger.warn(""String_Node_Str"" + overlayId + ""String_Node_Str"");
      continue;
    }
    for (    Object childToParse : overlay.elements()) {
      Element childElement=(Element)childToParse;
      logger.info(""String_Node_Str"" + overlayId);
      parser.reset();
      parser.setContainer(container);
      XulComponent c=parser.parse(childElement,(XulContainer)sourceElement);
      String insertBefore=childElement.attributeValue(""String_Node_Str"");
      String insertAfter=childElement.attributeValue(""String_Node_Str"");
      String position=childElement.attributeValue(""String_Node_Str"");
      XulContainer sourceContainer=((XulContainer)sourceElement);
      int positionToInsert=-1;
      if (insertBefore != null) {
        org.pentaho.ui.xul.dom.Element insertBeforeTarget=targetDocument.getElementById(insertBefore);
        positionToInsert=sourceContainer.getChildNodes().indexOf(insertBeforeTarget);
      }
 else       if (insertAfter != null) {
        org.pentaho.ui.xul.dom.Element insertAfterTarget=targetDocument.getElementById(insertAfter);
        positionToInsert=sourceContainer.getChildNodes().indexOf(insertAfterTarget);
      }
 else       if (position != null) {
        int pos=Integer.parseInt(position);
        positionToInsert=(pos <= sourceContainer.getChildNodes().size()) ? pos : -1;
      }
      if (positionToInsert == -1) {
        positionToInsert=sourceContainer.getChildNodes().size();
      }
      sourceContainer.addComponentAt(c,positionToInsert);
      sourceContainer.addChildAt(c,positionToInsert);
      logger.info(""String_Node_Str"" + c);
    }
    List attribs=overlay.attributes();
    for (    Object o : attribs) {
      Attribute atr=(Attribute)o;
      try {
        BeanUtils.setProperty(sourceElement,atr.getName(),atr.getValue());
      }
 catch (      InvocationTargetException e) {
        logger.error(e);
      }
catch (      IllegalAccessException e) {
        logger.error(e);
      }
    }
  }
}","public void processOverlay(String overlaySrc,org.pentaho.ui.xul.dom.Document targetDocument,XulDomContainer container) throws XulException {
  InputStream in=getInputStreamForSrc(overlaySrc);
  Document doc=null;
  ResourceBundle res=null;
  try {
    res=ResourceBundle.getBundle(overlaySrc.replace(""String_Node_Str"",""String_Node_Str""));
    if (res == null) {
      res=ResourceBundle.getBundle((this.getRootDir() + overlaySrc).replace(""String_Node_Str"",""String_Node_Str""));
      if (res == null) {
        logger.error(""String_Node_Str"");
        res=mainBundle;
      }
    }
  }
 catch (  MissingResourceException e) {
    logger.warn(""String_Node_Str"" + overlaySrc);
  }
  String runningTranslatedOutput=getDocFromInputStream(in).asXML();
  if (res != null) {
    try {
      runningTranslatedOutput=ResourceBundleTranslator.translate(runningTranslatedOutput,res);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + overlaySrc,e);
    }
  }
  if (this.mainBundle != null) {
    try {
      runningTranslatedOutput=ResourceBundleTranslator.translate(runningTranslatedOutput,this.mainBundle);
      try {
        SAXReader rdr=new SAXReader();
        String upperedIdDoc=this.upperCaseIDAttrs(runningTranslatedOutput.toString());
        doc=rdr.read(new StringReader(upperedIdDoc));
      }
 catch (      DocumentException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    try {
      SAXReader rdr=new SAXReader();
      String upperedIdDoc=this.upperCaseIDAttrs(runningTranslatedOutput.toString());
      doc=rdr.read(new StringReader(upperedIdDoc));
    }
 catch (    DocumentException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  Element overlayRoot=doc.getRootElement();
  for (  Object child : overlayRoot.elements()) {
    Element overlay=(Element)child;
    String overlayId=overlay.attributeValue(""String_Node_Str"");
    org.pentaho.ui.xul.dom.Element sourceElement=targetDocument.getElementById(overlayId);
    if (sourceElement == null) {
      logger.warn(""String_Node_Str"" + overlayId + ""String_Node_Str"");
      continue;
    }
    for (    Object childToParse : overlay.elements()) {
      Element childElement=(Element)childToParse;
      logger.info(""String_Node_Str"" + overlayId);
      parser.reset();
      parser.setContainer(container);
      XulComponent c=parser.parse(childElement,(XulContainer)sourceElement);
      String insertBefore=childElement.attributeValue(""String_Node_Str"");
      String insertAfter=childElement.attributeValue(""String_Node_Str"");
      String position=childElement.attributeValue(""String_Node_Str"");
      XulContainer sourceContainer=((XulContainer)sourceElement);
      int positionToInsert=-1;
      if (insertBefore != null) {
        org.pentaho.ui.xul.dom.Element insertBeforeTarget=targetDocument.getElementById(insertBefore);
        positionToInsert=sourceContainer.getChildNodes().indexOf(insertBeforeTarget);
      }
 else       if (insertAfter != null) {
        org.pentaho.ui.xul.dom.Element insertAfterTarget=targetDocument.getElementById(insertAfter);
        positionToInsert=sourceContainer.getChildNodes().indexOf(insertAfterTarget);
      }
 else       if (position != null) {
        int pos=Integer.parseInt(position);
        positionToInsert=(pos <= sourceContainer.getChildNodes().size()) ? pos : -1;
      }
      if (positionToInsert == -1 || positionToInsert == sourceContainer.getChildNodes().size()) {
        sourceContainer.addComponent(c);
        sourceContainer.addChild(c);
      }
 else {
        sourceContainer.addComponentAt(c,positionToInsert);
        sourceContainer.addChildAt(c,positionToInsert);
      }
      logger.info(""String_Node_Str"" + c);
    }
    List attribs=overlay.attributes();
    for (    Object o : attribs) {
      Attribute atr=(Attribute)o;
      try {
        BeanUtils.setProperty(sourceElement,atr.getName(),atr.getValue());
      }
 catch (      InvocationTargetException e) {
        logger.error(e);
      }
catch (      IllegalAccessException e) {
        logger.error(e);
      }
    }
  }
}"
51960,"public void keyReleased(KeyEvent arg0){
  if (!oldValue.equals(textBox.getText())) {
    SwtTextbox.this.changeSupport.firePropertyChange(""String_Node_Str"",""String_Node_Str"",SwtTextbox.this.getValue());
  }
}","public void keyReleased(KeyEvent arg0){
  if (!oldValue.equals(box.getText())) {
    changeSupport.firePropertyChange(""String_Node_Str"",""String_Node_Str"",getValue());
  }
}"
51961,"public void keyPressed(KeyEvent arg0){
  oldValue=textBox.getText();
}","public void keyPressed(KeyEvent arg0){
  oldValue=box.getText();
}"
51962,"public SwtTextbox(Element self,XulComponent parent,XulDomContainer container,String tagName){
  super(tagName);
  parentComposite=(Composite)parent.getManagedObject();
  textBox=createNewText();
  textBox.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent arg0){
      oldValue=textBox.getText();
    }
    public void keyReleased(    KeyEvent arg0){
      if (!oldValue.equals(textBox.getText())) {
        SwtTextbox.this.changeSupport.firePropertyChange(""String_Node_Str"",""String_Node_Str"",SwtTextbox.this.getValue());
      }
    }
  }
);
  managedObject=textBox;
}","public SwtTextbox(Element self,XulComponent parent,XulDomContainer container,String tagName){
  super(tagName);
  parentComposite=(Composite)parent.getManagedObject();
  textBox=createNewText();
  managedObject=textBox;
}"
51963,"public Text createNewText(){
  return new org.eclipse.swt.widgets.Text(parentComposite,SWT.BORDER);
}","public Text createNewText(){
  textBox=new org.eclipse.swt.widgets.Text(parentComposite,SWT.BORDER);
  addKeyListener(textBox);
  return textBox;
}"
51964,"public void addComponentAt(XulComponent c,int idx){
  children.add(idx,c);
}","public void addComponentAt(XulComponent c,int idx){
  if (idx < children.size()) {
    children.add(idx,c);
  }
 else {
    children.add(c);
  }
}"
51965,"public void destroyBindings(){
  if (destroyed) {
    return;
  }
  Object sourceObj=getSource().get();
  Object targetObj=getTarget().get();
  if (forwardListener != null && sourceObj != null) {
    ((XulEventSource)sourceObj).removePropertyChangeListener(forwardListener);
    logger.debug(""String_Node_Str"" + sourceObj);
  }
  if (reverseListener != null && targetObj != null && targetObj instanceof XulEventSource) {
    ((XulEventSource)targetObj).removePropertyChangeListener(reverseListener);
    logger.debug(""String_Node_Str"" + targetObj);
  }
  if (context != null) {
    context.remove(this);
  }
  setDestroyed(true);
}","public void destroyBindings(){
  if (destroyed) {
    return;
  }
  Object sourceObj=getSource().get();
  Object targetObj=getTarget().get();
  if (forwardListener != null && sourceObj != null) {
    ((XulEventSource)sourceObj).removePropertyChangeListener(forwardListener);
    logger.debug(""String_Node_Str"" + sourceObj);
  }
  if (reverseListener != null && targetObj != null && targetObj instanceof XulEventSource) {
    ((XulEventSource)targetObj).removePropertyChangeListener(reverseListener);
    logger.debug(""String_Node_Str"" + targetObj);
  }
  setDestroyed(true);
  if (context != null) {
    context.remove(this);
  }
}"
51966,"public void show(){
  if (dialog == null) {
    createDialog();
    dialog.pack();
  }
  dialog.setLocationRelativeTo(frame);
  dialog.setVisible(true);
}","public void show(){
  if (dialog == null) {
    createDialog();
    dialog.pack();
  }
  dialog.setLocationRelativeTo(centerComp);
  dialog.setVisible(true);
}"
51967,"private void createDialog(){
  Document doc=getDocument();
  Element rootElement=doc.getRootElement();
  XulWindow window=null;
  if (rootElement != this) {
    window=(XulWindow)rootElement;
  }
  if (window != null) {
    frame=(JFrame)window.getManagedObject();
    dialog=new JDialog(frame);
    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  }
 else {
    dialog=new JDialog();
    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  }
  dialog.setResizable(false);
  dialog.setLayout(new BorderLayout());
  JPanel mainPanel=new JPanel(new BorderLayout());
  mainPanel.setOpaque(true);
  int pad=(this.getPadding() > -1) ? getPadding() : 3;
  mainPanel.setBorder(BorderFactory.createEmptyBorder(pad,pad,pad,pad));
  dialog.setTitle(title);
  dialog.setModal(true);
  dialog.add(mainPanel,BorderLayout.CENTER);
  mainPanel.add(container,BorderLayout.CENTER);
  container.setOpaque(false);
  if (this.header != null) {
    JPanel headerPanel=new JPanel(new BorderLayout());
    headerPanel.setBackground(Color.decode(""String_Node_Str""));
    headerPanel.setOpaque(true);
    JPanel headerPanelInner=new JPanel(new BorderLayout());
    headerPanelInner.setBorder(BorderFactory.createEmptyBorder(3,3,3,3));
    headerPanelInner.setOpaque(false);
    headerPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED,Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str"")));
    JLabel title=new JLabel(this.header.getTitle());
    title.setForeground(Color.white);
    headerPanelInner.add(title,BorderLayout.WEST);
    JLabel desc=new JLabel(this.header.getDescription());
    desc.setForeground(Color.white);
    headerPanelInner.add(desc,BorderLayout.EAST);
    headerPanel.add(headerPanelInner,BorderLayout.CENTER);
    mainPanel.add(headerPanel,BorderLayout.NORTH);
  }
  Box buttonPanel=Box.createHorizontalBox();
  if (this.buttonAlignment == BUTTON_ALIGN.RIGHT || this.buttonAlignment == BUTTON_ALIGN.END || this.buttonAlignment == BUTTON_ALIGN.MIDDLE || this.buttonAlignment == BUTTON_ALIGN.CENTER) {
    buttonPanel.add(Box.createHorizontalGlue());
  }
  ArrayList<BUTTONS> buttonKeyList=new ArrayList<BUTTONS>(buttons.keySet());
  for (int i=0; i < buttonKeyList.size(); i++) {
    buttonPanel.add(Box.createHorizontalStrut(5));
    buttonPanel.add((JButton)this.buttons.get(buttonKeyList.get(i)).getManagedObject());
    this.addChild(this.buttons.get(buttonKeyList.get(i)));
  }
  buttonPanel.add(Box.createHorizontalStrut(5));
  if (this.buttonAlignment == BUTTON_ALIGN.START || this.buttonAlignment == BUTTON_ALIGN.LEFT || this.buttonAlignment == BUTTON_ALIGN.MIDDLE || this.buttonAlignment == BUTTON_ALIGN.CENTER) {
    buttonPanel.add(Box.createHorizontalGlue());
  }
  mainPanel.add(buttonPanel,BorderLayout.SOUTH);
  dialog.setSize(new Dimension(getWidth(),getHeight()));
  dialog.setPreferredSize(new Dimension(getWidth(),getHeight()));
  dialog.setMinimumSize(new Dimension(getWidth(),getHeight()));
  if (buttons.containsKey(SwingDialog.BUTTONS.ACCEPT)) {
    this.buttons.get(SwingDialog.BUTTONS.ACCEPT).setLabel(this.getButtonlabelaccept());
    this.buttons.get(SwingDialog.BUTTONS.ACCEPT).setOnclick(this.getOndialogaccept());
  }
  if (buttons.containsKey(SwingDialog.BUTTONS.CANCEL)) {
    this.buttons.get(SwingDialog.BUTTONS.CANCEL).setLabel(this.getButtonlabelcancel());
    this.buttons.get(SwingDialog.BUTTONS.CANCEL).setOnclick(this.getOndialogcancel());
  }
  if (buttons.containsKey(SwingDialog.BUTTONS.EXTRA1)) {
    this.buttons.get(SwingDialog.BUTTONS.EXTRA1).setLabel(this.getButtonlabelextra1());
    this.buttons.get(SwingDialog.BUTTONS.EXTRA1).setOnclick(this.getOndialogextra1());
  }
  if (buttons.containsKey(SwingDialog.BUTTONS.EXTRA2)) {
    this.buttons.get(SwingDialog.BUTTONS.EXTRA2).setLabel(this.getButtonlabelextra2());
    this.buttons.get(SwingDialog.BUTTONS.EXTRA2).setOnclick(this.getOndialogextra2());
  }
  if (this.getBgcolor() != null) {
    mainPanel.setBackground(Color.decode(this.getBgcolor()));
  }
}","private void createDialog(){
  if (getParent() instanceof XulRoot) {
    Object parentObj=getParent().getManagedObject();
    if (parentObj instanceof Dialog) {
      dialog=new JDialog((Dialog)parentObj);
    }
 else {
      dialog=new JDialog((Frame)parentObj);
    }
    centerComp=(Component)parentObj;
  }
 else {
    Document doc=getDocument();
    Element rootElement=doc.getRootElement();
    XulWindow window=null;
    if (rootElement != this) {
      window=(XulWindow)rootElement;
    }
    if (window != null) {
      frame=(JFrame)window.getManagedObject();
      dialog=new JDialog(frame);
      centerComp=frame;
    }
 else {
      dialog=new JDialog();
    }
  }
  dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
  dialog.setResizable(false);
  dialog.setLayout(new BorderLayout());
  JPanel mainPanel=new JPanel(new BorderLayout());
  mainPanel.setOpaque(true);
  int pad=(this.getPadding() > -1) ? getPadding() : 3;
  mainPanel.setBorder(BorderFactory.createEmptyBorder(pad,pad,pad,pad));
  dialog.setTitle(title);
  dialog.setModal(true);
  dialog.add(mainPanel,BorderLayout.CENTER);
  mainPanel.add(container,BorderLayout.CENTER);
  container.setOpaque(false);
  if (this.header != null) {
    JPanel headerPanel=new JPanel(new BorderLayout());
    headerPanel.setBackground(Color.decode(""String_Node_Str""));
    headerPanel.setOpaque(true);
    JPanel headerPanelInner=new JPanel(new BorderLayout());
    headerPanelInner.setBorder(BorderFactory.createEmptyBorder(3,3,3,3));
    headerPanelInner.setOpaque(false);
    headerPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED,Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str"")));
    JLabel title=new JLabel(this.header.getTitle());
    title.setForeground(Color.white);
    headerPanelInner.add(title,BorderLayout.WEST);
    JLabel desc=new JLabel(this.header.getDescription());
    desc.setForeground(Color.white);
    headerPanelInner.add(desc,BorderLayout.EAST);
    headerPanel.add(headerPanelInner,BorderLayout.CENTER);
    mainPanel.add(headerPanel,BorderLayout.NORTH);
  }
  Box buttonPanel=Box.createHorizontalBox();
  if (this.buttonAlignment == BUTTON_ALIGN.RIGHT || this.buttonAlignment == BUTTON_ALIGN.END || this.buttonAlignment == BUTTON_ALIGN.MIDDLE || this.buttonAlignment == BUTTON_ALIGN.CENTER) {
    buttonPanel.add(Box.createHorizontalGlue());
  }
  ArrayList<BUTTONS> buttonKeyList=new ArrayList<BUTTONS>(buttons.keySet());
  for (int i=0; i < buttonKeyList.size(); i++) {
    buttonPanel.add(Box.createHorizontalStrut(5));
    buttonPanel.add((JButton)this.buttons.get(buttonKeyList.get(i)).getManagedObject());
    this.addChild(this.buttons.get(buttonKeyList.get(i)));
  }
  buttonPanel.add(Box.createHorizontalStrut(5));
  if (this.buttonAlignment == BUTTON_ALIGN.START || this.buttonAlignment == BUTTON_ALIGN.LEFT || this.buttonAlignment == BUTTON_ALIGN.MIDDLE || this.buttonAlignment == BUTTON_ALIGN.CENTER) {
    buttonPanel.add(Box.createHorizontalGlue());
  }
  mainPanel.add(buttonPanel,BorderLayout.SOUTH);
  dialog.setSize(new Dimension(getWidth(),getHeight()));
  dialog.setPreferredSize(new Dimension(getWidth(),getHeight()));
  dialog.setMinimumSize(new Dimension(getWidth(),getHeight()));
  if (buttons.containsKey(SwingDialog.BUTTONS.ACCEPT)) {
    this.buttons.get(SwingDialog.BUTTONS.ACCEPT).setLabel(this.getButtonlabelaccept());
    this.buttons.get(SwingDialog.BUTTONS.ACCEPT).setOnclick(this.getOndialogaccept());
  }
  if (buttons.containsKey(SwingDialog.BUTTONS.CANCEL)) {
    this.buttons.get(SwingDialog.BUTTONS.CANCEL).setLabel(this.getButtonlabelcancel());
    this.buttons.get(SwingDialog.BUTTONS.CANCEL).setOnclick(this.getOndialogcancel());
  }
  if (buttons.containsKey(SwingDialog.BUTTONS.EXTRA1)) {
    this.buttons.get(SwingDialog.BUTTONS.EXTRA1).setLabel(this.getButtonlabelextra1());
    this.buttons.get(SwingDialog.BUTTONS.EXTRA1).setOnclick(this.getOndialogextra1());
  }
  if (buttons.containsKey(SwingDialog.BUTTONS.EXTRA2)) {
    this.buttons.get(SwingDialog.BUTTONS.EXTRA2).setLabel(this.getButtonlabelextra2());
    this.buttons.get(SwingDialog.BUTTONS.EXTRA2).setOnclick(this.getOndialogextra2());
  }
  if (this.getBgcolor() != null) {
    mainPanel.setBackground(Color.decode(this.getBgcolor()));
  }
}"
51968,"private RETURN_CODE showSave(){
  int retVal=fc.showSaveDialog((Component)this.getDocument().getRootElement().getManagedObject());
switch (retVal) {
case JFileChooser.APPROVE_OPTION:
    selectedFile=fc.getSelectedFile();
  return RETURN_CODE.OK;
case JFileChooser.CANCEL_OPTION:
default :
return RETURN_CODE.CANCEL;
}
}","private RETURN_CODE showSave(){
  int retVal=fc.showSaveDialog(getParentComp());
switch (retVal) {
case JFileChooser.APPROVE_OPTION:
    selectedFile=fc.getSelectedFile();
  return RETURN_CODE.OK;
case JFileChooser.CANCEL_OPTION:
default :
return RETURN_CODE.CANCEL;
}
}"
51969,"private RETURN_CODE showOpen(){
  int retVal=fc.showOpenDialog((Component)this.getDocument().getRootElement().getManagedObject());
switch (retVal) {
case JFileChooser.APPROVE_OPTION:
    if (this.selectionType == SEL_TYPE.SINGLE) {
      selectedFile=fc.getSelectedFile();
    }
 else {
      selectedFiles=fc.getSelectedFiles();
    }
  return RETURN_CODE.OK;
case JFileChooser.CANCEL_OPTION:
default :
return RETURN_CODE.CANCEL;
}
}","private RETURN_CODE showOpen(){
  int retVal=fc.showOpenDialog(getParentComp());
switch (retVal) {
case JFileChooser.APPROVE_OPTION:
    if (this.selectionType == SEL_TYPE.SINGLE) {
      selectedFile=fc.getSelectedFile();
    }
 else {
      selectedFiles=fc.getSelectedFiles();
    }
  return RETURN_CODE.OK;
case JFileChooser.CANCEL_OPTION:
default :
return RETURN_CODE.CANCEL;
}
}"
51970,"public <T>void setElements(Collection<T> elements){
  this.getRootChildren().removeAll();
  if (elements == null) {
    table.updateUI();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    return;
  }
  try {
    for (    T o : elements) {
      logger.debug(""String_Node_Str"" + o.getClass().getName());
      XulTreeRow row=this.getRootChildren().addNewRow();
      for (      XulComponent col : this.getColumns().getChildNodes()) {
        XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
        for (        InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
          logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
          Binding binding=new Binding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
          domContainer.addBinding(binding);
          binding.fireSourceChanged();
        }
        row.addCell(cell);
      }
    }
    table.updateUI();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public <T>void setElements(Collection<T> elements){
  this.getRootChildren().removeAll();
  CellEditor ce=table.getCellEditor();
  if (ce != null) {
    ce.stopCellEditing();
  }
  if (elements == null) {
    table.updateUI();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
    return;
  }
  try {
    for (    T o : elements) {
      logger.debug(""String_Node_Str"" + o.getClass().getName());
      XulTreeRow row=this.getRootChildren().addNewRow();
      for (      XulComponent col : this.getColumns().getChildNodes()) {
        XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
        for (        InlineBindingExpression exp : ((XulTreeCol)col).getBindingExpressions()) {
          logger.debug(""String_Node_Str"" + exp + ""String_Node_Str""+ cell+ ""String_Node_Str""+ o+ ""String_Node_Str"");
          Binding binding=new Binding(o,exp.getModelAttr(),cell,exp.getXulCompAttr());
          domContainer.addBinding(binding);
          binding.fireSourceChanged();
        }
        row.addCell(cell);
      }
    }
    table.updateUI();
    changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
51971,"public void removeTreeRows(int[] rows){
  for (int i=0; i < rows.length; i++) {
    if (i < rootChildren.getItemCount()) {
      this.rootChildren.removeItem(rows[i]);
    }
  }
  table.updateUI();
  changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
}","public void removeTreeRows(int[] rows){
  ArrayList<Integer> rowArray=new ArrayList<Integer>();
  for (int i=0; i < rows.length; i++) {
    rowArray.add(rows[i]);
  }
  Collections.sort(rowArray,Collections.reverseOrder());
  for (int i=0; i < rowArray.size(); i++) {
    int item=rowArray.get(i);
    if (item >= 0 && item < rootChildren.getItemCount()) {
      this.rootChildren.removeItem(item);
    }
  }
  table.updateUI();
  changeSupport.firePropertyChange(""String_Node_Str"",null,getSelectedRows());
}"
51972,"@Override public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,final int row,final int column){
  Component comp;
switch (col.getColumnType()) {
case CHECKBOX:
    final JCheckBox checkbox=new JCheckBox();
  checkbox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
    }
  }
);
control=checkbox;
if (value instanceof String) {
checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
}
 else if (value instanceof Boolean) {
checkbox.setSelected((Boolean)value);
}
 else if (value == null) {
checkbox.setSelected(false);
}
if (isSelected) {
checkbox.setBackground(Color.LIGHT_GRAY);
}
comp=checkbox;
break;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
comp=comboBox;
break;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
comp=label;
break;
}
return comp;
}","@Override public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,final int row,final int column){
  Component comp;
switch (col.getColumnType()) {
case CHECKBOX:
    final JCheckBox checkbox=new JCheckBox();
  final JTable tbl=table;
checkbox.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent event){
    SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
    tbl.getCellEditor().stopCellEditing();
  }
}
);
control=checkbox;
if (value instanceof String) {
checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
}
 else if (value instanceof Boolean) {
checkbox.setSelected((Boolean)value);
}
 else if (value == null) {
checkbox.setSelected(false);
}
if (isSelected) {
checkbox.setBackground(Color.LIGHT_GRAY);
}
comp=checkbox;
break;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
comp=comboBox;
break;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
comp=label;
break;
}
return comp;
}"
51973,"private TableCellEditor getCellEditor(final SwingTreeCol col){
  return new DefaultCellEditor(new JComboBox()){
    JComponent control;
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    final int row,    final int column){
      Component comp;
switch (col.getColumnType()) {
case CHECKBOX:
        final JCheckBox checkbox=new JCheckBox();
      checkbox.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent event){
          SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
        }
      }
);
    control=checkbox;
  if (value instanceof String) {
    checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
  }
 else   if (value instanceof Boolean) {
    checkbox.setSelected((Boolean)value);
  }
 else   if (value == null) {
    checkbox.setSelected(false);
  }
if (isSelected) {
  checkbox.setBackground(Color.LIGHT_GRAY);
}
comp=checkbox;
break;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
comp=comboBox;
break;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
comp=label;
break;
}
return comp;
}
@Override public Object getCellEditorValue(){
if (control instanceof JCheckBox) {
return ((JCheckBox)control).isSelected();
}
 else if (control instanceof JComboBox) {
return ((JComboBox)control).getSelectedIndex();
}
 else {
return ((JTextField)control).getText();
}
}
}
;
}","private TableCellEditor getCellEditor(final SwingTreeCol col){
  return new DefaultCellEditor(new JComboBox()){
    JComponent control;
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    final int row,    final int column){
      Component comp;
switch (col.getColumnType()) {
case CHECKBOX:
        final JCheckBox checkbox=new JCheckBox();
      final JTable tbl=table;
    checkbox.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent event){
        SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
        tbl.getCellEditor().stopCellEditing();
      }
    }
);
  control=checkbox;
if (value instanceof String) {
  checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
}
 else if (value instanceof Boolean) {
  checkbox.setSelected((Boolean)value);
}
 else if (value == null) {
  checkbox.setSelected(false);
}
if (isSelected) {
checkbox.setBackground(Color.LIGHT_GRAY);
}
comp=checkbox;
break;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
comp=comboBox;
break;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
comp=label;
break;
}
return comp;
}
@Override public Object getCellEditorValue(){
if (control instanceof JCheckBox) {
return ((JCheckBox)control).isSelected();
}
 else if (control instanceof JComboBox) {
return ((JComboBox)control).getSelectedIndex();
}
 else {
return ((JTextField)control).getText();
}
}
}
;
}"
51974,"public void setSelectedItem(T t){
  this.combobox.setSelectedItem(t);
}","public void setSelectedItem(T t){
  SwingMenupopup popup=getPopupElement();
  for (  XulComponent item : popup.getChildNodes()) {
    SwingMenuitem tempItem=(SwingMenuitem)item;
    if (tempItem.getLabel().equals(extractLabel(t))) {
      this.combobox.setSelectedItem(tempItem);
    }
  }
}"
51975,"public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting() == true) {
    return;
  }
  if (onselect != null && initialized) {
    invoke(onselect);
  }
  setSelectedIndices(listBox.getSelectedIndices());
}","public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting() == true) {
    return;
  }
  if (onselect != null && initialized) {
    invoke(onselect);
  }
}"
51976,"public void setSelectedIndices(int[] indices){
  if (!Arrays.equals(curSelectedIndices,indices)) {
    this.changeSupport.firePropertyChange(""String_Node_Str"",curSelectedIndices,indices);
    curSelectedIndices=indices;
  }
}","public void setSelectedIndices(int[] indices){
  listBox.setSelectedIndices(indices);
  if (!Arrays.equals(curSelectedIndices,indices)) {
    this.changeSupport.firePropertyChange(""String_Node_Str"",curSelectedIndices,indices);
    curSelectedIndices=indices;
  }
}"
51977,"public void setSelectedItems(Object[] items){
  int[] indices=new int[items.length];
  int index=-1;
  for (  Object object : items) {
    indices[++index]=model.indexOf(object);
  }
}","public void setSelectedItems(Object[] items){
  int[] indices=new int[items.length];
  int index=-1;
  for (  Object object : items) {
    indices[++index]=model.indexOf(object);
  }
  setSelectedIndices(indices);
}"
51978,"public XulComponent getElementById(String id){
  XulElementDom4J ele=(XulElementDom4J)element.elementByID(id);
  if (ele == null) {
    return null;
  }
  return (XulComponent)ele.getXulElement();
}","public XulComponent getElementById(String id){
  XulElementDom4J ele=(XulElementDom4J)element.getDocument().elementByID(id);
  if (ele == null) {
    return null;
  }
  return (XulComponent)ele.getXulElement();
}"
51979,"public void processOverlay(String overlaySrc,org.pentaho.ui.xul.dom.Document targetDocument,XulDomContainer container) throws XulException {
  final Document doc=getDocFromClasspath(overlaySrc);
  Element overlayRoot=doc.getRootElement();
  for (  Object child : overlayRoot.elements()) {
    Element overlay=(Element)child;
    String overlayId=overlay.attributeValue(""String_Node_Str"");
    org.pentaho.ui.xul.dom.Element sourceElement=targetDocument.getElementById(overlayId);
    if (sourceElement == null) {
      logger.warn(""String_Node_Str"" + overlayId + ""String_Node_Str"");
      continue;
    }
    for (    Object childToParse : overlay.elements()) {
      logger.info(""String_Node_Str"" + overlayId);
      parser.reset();
      parser.setContainer(container);
      XulComponent c=parser.parse((Element)childToParse,(XulContainer)sourceElement);
      sourceElement.addChild(c);
      ((XulContainer)sourceElement).addComponent(c);
      ((XulContainer)sourceElement).addChild(c);
      logger.info(""String_Node_Str"" + c);
    }
  }
}","public void processOverlay(String overlaySrc,org.pentaho.ui.xul.dom.Document targetDocument,XulDomContainer container) throws XulException {
  InputStream in=getInputStreamForSrc(overlaySrc);
  Document doc=null;
  ResourceBundle res=null;
  try {
    res=ResourceBundle.getBundle(overlaySrc.replace(""String_Node_Str"",""String_Node_Str""));
    if (res == null) {
      res=ResourceBundle.getBundle((this.getRootDir() + overlaySrc).replace(""String_Node_Str"",""String_Node_Str""));
      if (res == null) {
        logger.error(""String_Node_Str"");
        res=mainBundle;
      }
    }
  }
 catch (  MissingResourceException e) {
    logger.debug(""String_Node_Str"" + overlaySrc);
  }
  String runningTranslatedOutput=getDocFromInputStream(in).asXML();
  if (res != null) {
    try {
      runningTranslatedOutput=ResourceBundleTranslator.translate(runningTranslatedOutput,res);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + overlaySrc,e);
    }
  }
  if (this.mainBundle != null) {
    try {
      runningTranslatedOutput=ResourceBundleTranslator.translate(runningTranslatedOutput,this.mainBundle);
      try {
        SAXReader rdr=new SAXReader();
        String upperedIdDoc=this.upperCaseIDAttrs(runningTranslatedOutput.toString());
        doc=rdr.read(new StringReader(upperedIdDoc));
      }
 catch (      DocumentException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else {
    try {
      SAXReader rdr=new SAXReader();
      String upperedIdDoc=this.upperCaseIDAttrs(runningTranslatedOutput.toString());
      doc=rdr.read(new StringReader(upperedIdDoc));
    }
 catch (    DocumentException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
  Element overlayRoot=doc.getRootElement();
  for (  Object child : overlayRoot.elements()) {
    Element overlay=(Element)child;
    String overlayId=overlay.attributeValue(""String_Node_Str"");
    org.pentaho.ui.xul.dom.Element sourceElement=targetDocument.getElementById(overlayId);
    if (sourceElement == null) {
      logger.warn(""String_Node_Str"" + overlayId + ""String_Node_Str"");
      continue;
    }
    for (    Object childToParse : overlay.elements()) {
      logger.info(""String_Node_Str"" + overlayId);
      parser.reset();
      parser.setContainer(container);
      XulComponent c=parser.parse((Element)childToParse,(XulContainer)sourceElement);
      sourceElement.addChild(c);
      ((XulContainer)sourceElement).addComponent(c);
      ((XulContainer)sourceElement).addChild(c);
      logger.info(""String_Node_Str"" + c);
    }
  }
}"
51980,"public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting() == true) {
    return;
  }
  if (initialized) {
    invoke(onselect);
  }
}","public void valueChanged(ListSelectionEvent e){
  if (e.getValueIsAdjusting() == true) {
    return;
  }
  if (onselect != null && initialized) {
    invoke(onselect);
  }
}"
51981,"public void layout(){
  super.layout();
  for (  XulComponent comp : children) {
    if (comp instanceof SwingListitem) {
      this.model.addElement(comp);
    }
  }
  this.scrollPane.setMinimumSize(new Dimension(this.width,this.height));
  if (this.selectedIndex > -1) {
    this.listBox.setSelectedIndex(selectedIndex);
  }
  initialized=true;
}","public void layout(){
  for (  XulComponent comp : children) {
    if (comp instanceof SwingListitem) {
      this.model.addElement(comp);
      logger.info(""String_Node_Str"");
    }
  }
  this.scrollPane.setMinimumSize(new Dimension(this.width,this.height));
  if (this.selectedIndex > -1) {
    this.listBox.setSelectedIndex(selectedIndex);
  }
  initialized=true;
}"
51982,"public SwingListbox(Element self,XulComponent parent,XulDomContainer container,String tagName){
  super(tagName);
  model=new DefaultListModel();
  listBox=new JList(model);
  scrollPane=new JScrollPane(listBox);
  listBox.setBorder(BorderFactory.createLineBorder(Color.gray));
  listBox.addListSelectionListener(this);
  managedObject=scrollPane;
}","public SwingListbox(Element self,XulComponent parent,XulDomContainer container,String tagName){
  super(tagName);
  model=new DefaultListModel();
  listBox=new JList(model);
  scrollPane=new JScrollPane(listBox);
  listBox.setBorder(BorderFactory.createLineBorder(Color.gray));
  listBox.addListSelectionListener(this);
  managedObject=scrollPane;
  this.xulDomContainer=container;
}"
51983,"public void removeItems(){
  this.model.removeAllElements();
}","public void removeItems(){
  this.model.removeAllElements();
  this.children.clear();
  for (  XulComponent c : this.getChildNodes()) {
    this.removeChild(c);
  }
}"
51984,"public SwingScript(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  try {
    if ((self.getAttributeValue(""String_Node_Str"") == null) || (self.getAttributeValue(""String_Node_Str"") == null)) {
      return;
    }
    domContainer.addEventHandler(self.getAttributeValue(""String_Node_Str""),self.getAttributeValue(""String_Node_Str""));
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"" + self.getAttributeValue(""String_Node_Str"") + ""String_Node_Str""+ self.getAttributeValue(""String_Node_Str""),e);
  }
}","public SwingScript(Element self,XulComponent parent,XulDomContainer domContainer,String tagName){
  super(""String_Node_Str"");
  try {
    if ((self.getAttributeValue(""String_Node_Str"") == null) || (self.getAttributeValue(""String_Node_Str"") == null)) {
      return;
    }
    domContainer.addEventHandler(self.getAttributeValue(""String_Node_Str""),self.getAttributeValue(""String_Node_Str""));
    logger.info(""String_Node_Str"" + self.getAttributeValue(""String_Node_Str""));
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"" + self.getAttributeValue(""String_Node_Str"") + ""String_Node_Str""+ self.getAttributeValue(""String_Node_Str""),e);
  }
}"
51985,"public void setElements(Collection<T> elements){
}","public <T>void setElements(Collection<T> elements){
}"
51986,"public Collection<T> getElements(){
  return null;
}","public <T>Collection<T> getElements(){
  return null;
}"
51987,"public void clearSelection(){
  table.getSelectionModel().clearSelection();
}","public void clearSelection(){
  table.getSelectionModel().clearSelection();
  CellEditor ce=table.getCellEditor();
  if (ce != null) {
    ce.stopCellEditing();
  }
}"
51988,"public Collection<T> getElements(){
  return null;
}","public <T>Collection<T> getElements(){
  return null;
}"
51989,"@Override public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,final int row,final int column){
switch (col.getColumnType()) {
case CHECKBOX:
    final JCheckBox checkbox=new JCheckBox();
  checkbox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
    }
  }
);
control=checkbox;
if (value instanceof String) {
checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
}
 else if (value instanceof Boolean) {
checkbox.setSelected((Boolean)value);
}
 else if (value == null) {
checkbox.setSelected(false);
}
if (isSelected) {
checkbox.setBackground(Color.LIGHT_GRAY);
}
return checkbox;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
return comboBox;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
return label;
}
}","@Override public Component getTableCellEditorComponent(JTable table,Object value,boolean isSelected,final int row,final int column){
  Component comp;
switch (col.getColumnType()) {
case CHECKBOX:
    final JCheckBox checkbox=new JCheckBox();
  checkbox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
    }
  }
);
control=checkbox;
if (value instanceof String) {
checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
}
 else if (value instanceof Boolean) {
checkbox.setSelected((Boolean)value);
}
 else if (value == null) {
checkbox.setSelected(false);
}
if (isSelected) {
checkbox.setBackground(Color.LIGHT_GRAY);
}
comp=checkbox;
break;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
comp=comboBox;
break;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
comp=label;
break;
}
return comp;
}"
51990,"private TableCellEditor getCellEditor(final SwingTreeCol col){
  return new DefaultCellEditor(new JComboBox()){
    JComponent control;
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    final int row,    final int column){
switch (col.getColumnType()) {
case CHECKBOX:
        final JCheckBox checkbox=new JCheckBox();
      checkbox.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent event){
          SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
        }
      }
);
    control=checkbox;
  if (value instanceof String) {
    checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
  }
 else   if (value instanceof Boolean) {
    checkbox.setSelected((Boolean)value);
  }
 else   if (value == null) {
    checkbox.setSelected(false);
  }
if (isSelected) {
  checkbox.setBackground(Color.LIGHT_GRAY);
}
return checkbox;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
return comboBox;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
return label;
}
}
@Override public Object getCellEditorValue(){
if (control instanceof JCheckBox) {
return ((JCheckBox)control).isSelected();
}
 else if (control instanceof JComboBox) {
return ((JComboBox)control).getSelectedIndex();
}
 else {
return ((JTextField)control).getText();
}
}
}
;
}","private TableCellEditor getCellEditor(final SwingTreeCol col){
  return new DefaultCellEditor(new JComboBox()){
    JComponent control;
    @Override public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    final int row,    final int column){
      Component comp;
switch (col.getColumnType()) {
case CHECKBOX:
        final JCheckBox checkbox=new JCheckBox();
      checkbox.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent event){
          SwingTree.this.table.setValueAt(checkbox.isSelected(),row,column);
        }
      }
);
    control=checkbox;
  if (value instanceof String) {
    checkbox.setSelected(((String)value).equalsIgnoreCase(""String_Node_Str""));
  }
 else   if (value instanceof Boolean) {
    checkbox.setSelected((Boolean)value);
  }
 else   if (value == null) {
    checkbox.setSelected(false);
  }
if (isSelected) {
  checkbox.setBackground(Color.LIGHT_GRAY);
}
comp=checkbox;
break;
case COMBOBOX:
Vector val=(value != null) ? (Vector)value : new Vector();
final JComboBox comboBox=new JComboBox(val);
comboBox.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent event){
SwingTree.logger.debug(""String_Node_Str"" + comboBox.getSelectedItem() + ""String_Node_Str""+ row+ ""String_Node_Str""+ column);
SwingTree.this.table.setValueAt(comboBox.getSelectedIndex(),row,column);
}
}
);
if (isSelected) {
comboBox.setBackground(Color.LIGHT_GRAY);
}
control=comboBox;
comp=comboBox;
break;
default :
final JTextField label=new JTextField((String)value);
label.getDocument().addDocumentListener(new DocumentListener(){
public void changedUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void insertUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
public void removeUpdate(DocumentEvent arg0){
SwingTree.this.table.setValueAt(label.getText(),row,column);
}
}
);
if (isSelected) {
label.setOpaque(true);
label.setBackground(Color.LIGHT_GRAY);
}
control=label;
comp=label;
break;
}
return comp;
}
@Override public Object getCellEditorValue(){
if (control instanceof JCheckBox) {
return ((JCheckBox)control).isSelected();
}
 else if (control instanceof JComboBox) {
return ((JComboBox)control).getSelectedIndex();
}
 else {
return ((JTextField)control).getText();
}
}
}
;
}"
51991,"public void setElements(Collection<T> elements){
  this.getRootChildren().removeAll();
  try {
    for (    T o : elements) {
      XulTreeRow row=this.getRootChildren().addNewRow();
      for (      XulComponent col : this.getColumns().getChildNodes()) {
        XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
        String attribute=((XulTreeCol)col).getBinding();
        String getter=""String_Node_Str"" + (String.valueOf(attribute.charAt(0)).toUpperCase()) + attribute.substring(1);
        cell.setLabel(new Expression(o,getter,null).getValue().toString());
        row.addCell(cell);
      }
    }
    table.updateUI();
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","public <T>void setElements(Collection<T> elements){
  this.getRootChildren().removeAll();
  logger.debug(""String_Node_Str"" + elements.size());
  try {
    for (    T o : elements) {
      XulTreeRow row=this.getRootChildren().addNewRow();
      for (      XulComponent col : this.getColumns().getChildNodes()) {
        XulTreeCell cell=(XulTreeCell)getDocument().createElement(""String_Node_Str"");
        String attribute=((XulTreeCol)col).getBinding();
        String getter=""String_Node_Str"" + (String.valueOf(attribute.charAt(0)).toUpperCase()) + attribute.substring(1);
        Object val=new Expression(o,getter,null).getValue();
        if (val != null) {
          cell.setLabel(val.toString());
        }
        row.addCell(cell);
      }
    }
    table.updateUI();
  }
 catch (  XulException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
51992,"@Override public void layout(){
  if (type == Type.CHECKBOX || type == Type.RADIO) {
    AbstractButton oldButton=button;
    button=new JToggleButton();
    button.setText(oldButton.getText());
    button.setIcon(oldButton.getIcon());
    button.setEnabled(oldButton.isEnabled());
    button.setSelected(this.selected);
    if (this.getOnclick() != null) {
      this.setOnclick(this.getOnclick());
    }
    managedObject=button;
    if (this.group != null) {
      button.addComponentListener(new ComponentListener(){
        public void componentHidden(        ComponentEvent arg0){
        }
        public void componentMoved(        ComponentEvent arg0){
        }
        public void componentShown(        ComponentEvent arg0){
        }
        public void componentResized(        ComponentEvent arg0){
          buttonGroup=((SwingWindow)SwingButton.this.getDocument().getRootElement()).getButtonGroup(group);
          buttonGroup.add(button);
          if (buttonGroup.getButtonCount() == 1) {
            button.setSelected(true);
          }
          button.removeComponentListener(this);
        }
      }
);
    }
  }
  if (this.orientation == Orient.VERTICAL) {
    this.button.setHorizontalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      this.button.setVerticalTextPosition(JButton.BOTTOM);
    }
 else {
      this.button.setVerticalTextPosition(JButton.TOP);
    }
  }
 else {
    this.button.setVerticalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      this.button.setHorizontalTextPosition(JButton.RIGHT);
    }
 else {
      this.button.setHorizontalTextPosition(JButton.LEFT);
    }
  }
  if (button.getText().equals(""String_Node_Str"") && button.getIcon().getIconHeight() == button.getIcon().getIconWidth()) {
    Dimension dim=button.getPreferredSize();
    button.setMinimumSize(new Dimension(dim.height,dim.height));
    button.setPreferredSize(new Dimension(dim.height,dim.height));
  }
  super.layout();
}","@Override public void layout(){
  if (type == Type.CHECKBOX || type == Type.RADIO) {
    AbstractButton oldButton=button;
    button=new JToggleButton();
    button.setText(oldButton.getText());
    button.setIcon(oldButton.getIcon());
    button.setEnabled(oldButton.isEnabled());
    button.setSelected(this.selected);
    if (this.getOnclick() != null) {
      this.setOnclick(this.getOnclick());
    }
    managedObject=button;
    if (this.group != null) {
      button.addComponentListener(new ComponentListener(){
        public void componentHidden(        ComponentEvent arg0){
        }
        public void componentMoved(        ComponentEvent arg0){
        }
        public void componentShown(        ComponentEvent arg0){
        }
        public void componentResized(        ComponentEvent arg0){
          buttonGroup=((SwingWindow)SwingButton.this.getDocument().getRootElement()).getButtonGroup(group);
          buttonGroup.add(button);
          if (buttonGroup.getButtonCount() == 1) {
            button.setSelected(true);
          }
          button.removeComponentListener(this);
        }
      }
);
    }
  }
  if (this.orientation == Orient.VERTICAL) {
    this.button.setHorizontalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      this.button.setVerticalTextPosition(JButton.BOTTOM);
    }
 else {
      this.button.setVerticalTextPosition(JButton.TOP);
    }
  }
 else {
    this.button.setVerticalTextPosition(JButton.CENTER);
    if (this.dir == Direction.FORWARD) {
      this.button.setHorizontalTextPosition(JButton.RIGHT);
    }
 else {
      this.button.setHorizontalTextPosition(JButton.LEFT);
    }
  }
  if (button.getText().equals(""String_Node_Str"") && button.getIcon() != null && button.getIcon().getIconHeight() == button.getIcon().getIconWidth()) {
    Dimension dim=button.getPreferredSize();
    button.setMinimumSize(new Dimension(dim.height,dim.height));
    button.setPreferredSize(new Dimension(dim.height,dim.height));
  }
  super.layout();
}"
51993,"/** 
 * @return int The maximum number of characters that the textbox allows to be entered.
 */
public int getMaxlength(){
  if (!textBox.isDisposed()) {
    maxLength=textBox.getTextLimit();
  }
  return maxLength;
}","/** 
 * @return int The maximum number of characters that the textbox allows to be entered.
 */
public int getMaxlength(){
  return maxLength;
}"
51994,public void setColumns(XulTreeCols columns);,void setColumns(XulTreeCols columns);
51995,public void setDisabled(boolean dis);,void setDisabled(boolean dis);
51996,public void update();,void update();
51997,public int getRows();,int getRows();
51998,public int getWidth();,int getWidth();
51999,public XulTreeCols getColumns();,XulTreeCols getColumns();
52000,public boolean isEditable();,boolean isEditable();
